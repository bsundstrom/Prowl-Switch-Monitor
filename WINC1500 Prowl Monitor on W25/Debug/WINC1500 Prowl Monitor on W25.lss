
WINC1500 Prowl Monitor on W25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008780  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00008780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000360  20000078  000087f8  00020078  2**2
                  ALLOC
  3 .stack        00002000  200003d8  00008b58  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d71f  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000622b  00000000  00000000  0005d818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010e5f  00000000  00000000  00063a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d20  00000000  00000000  000748a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001100  00000000  00000000  000755c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021541  00000000  00000000  000766c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a28f  00000000  00000000  00097c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00091fe9  00000000  00000000  000b1e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d04  00000000  00000000  00143e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200023d8 	.word	0x200023d8
       4:	00004be1 	.word	0x00004be1
       8:	00004bdd 	.word	0x00004bdd
       c:	00004bdd 	.word	0x00004bdd
	...
      2c:	00004bdd 	.word	0x00004bdd
	...
      38:	00004bdd 	.word	0x00004bdd
      3c:	00004bdd 	.word	0x00004bdd
      40:	00004bdd 	.word	0x00004bdd
      44:	00004bdd 	.word	0x00004bdd
      48:	00004bdd 	.word	0x00004bdd
      4c:	00004bdd 	.word	0x00004bdd
      50:	000033f1 	.word	0x000033f1
      54:	00004bdd 	.word	0x00004bdd
      58:	00004bdd 	.word	0x00004bdd
      5c:	00004bdd 	.word	0x00004bdd
      60:	00004bdd 	.word	0x00004bdd
      64:	000039f5 	.word	0x000039f5
      68:	00003a05 	.word	0x00003a05
      6c:	00003a15 	.word	0x00003a15
      70:	00003a25 	.word	0x00003a25
      74:	00003a35 	.word	0x00003a35
      78:	00003a45 	.word	0x00003a45
      7c:	00004bdd 	.word	0x00004bdd
      80:	00004bdd 	.word	0x00004bdd
      84:	00004bdd 	.word	0x00004bdd
      88:	00000525 	.word	0x00000525
      8c:	00000535 	.word	0x00000535
      90:	00000545 	.word	0x00000545
	...
      9c:	00004bdd 	.word	0x00004bdd
      a0:	00004bdd 	.word	0x00004bdd
      a4:	00004bdd 	.word	0x00004bdd
      a8:	00004bdd 	.word	0x00004bdd
      ac:	00004bdd 	.word	0x00004bdd
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	00008780 	.word	0x00008780

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	00008780 	.word	0x00008780
     10c:	00008780 	.word	0x00008780
     110:	00000000 	.word	0x00000000

00000114 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     118:	aa01      	add	r2, sp, #4
     11a:	4b0b      	ldr	r3, [pc, #44]	; (148 <_tc_get_inst_index+0x34>)
     11c:	cb32      	ldmia	r3!, {r1, r4, r5}
     11e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     120:	9b01      	ldr	r3, [sp, #4]
     122:	4298      	cmp	r0, r3
     124:	d00a      	beq.n	13c <_tc_get_inst_index+0x28>
     126:	9b02      	ldr	r3, [sp, #8]
     128:	4298      	cmp	r0, r3
     12a:	d005      	beq.n	138 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     12c:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     12e:	9a03      	ldr	r2, [sp, #12]
     130:	4282      	cmp	r2, r0
     132:	d105      	bne.n	140 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     134:	3302      	adds	r3, #2
     136:	e002      	b.n	13e <_tc_get_inst_index+0x2a>
     138:	2301      	movs	r3, #1
     13a:	e000      	b.n	13e <_tc_get_inst_index+0x2a>
     13c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
     13e:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     140:	0018      	movs	r0, r3
     142:	b005      	add	sp, #20
     144:	bd30      	pop	{r4, r5, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	000071d8 	.word	0x000071d8

0000014c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     14c:	b5f0      	push	{r4, r5, r6, r7, lr}
     14e:	464f      	mov	r7, r9
     150:	4646      	mov	r6, r8
     152:	b4c0      	push	{r6, r7}
     154:	b087      	sub	sp, #28
     156:	0004      	movs	r4, r0
     158:	000e      	movs	r6, r1
     15a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     15c:	0008      	movs	r0, r1
     15e:	4b92      	ldr	r3, [pc, #584]	; (3a8 <tc_init+0x25c>)
     160:	4798      	blx	r3
     162:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     164:	4d91      	ldr	r5, [pc, #580]	; (3ac <tc_init+0x260>)
     166:	0029      	movs	r1, r5
     168:	310c      	adds	r1, #12
     16a:	2203      	movs	r2, #3
     16c:	a805      	add	r0, sp, #20
     16e:	4f90      	ldr	r7, [pc, #576]	; (3b0 <tc_init+0x264>)
     170:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     172:	0029      	movs	r1, r5
     174:	3110      	adds	r1, #16
     176:	2206      	movs	r2, #6
     178:	a803      	add	r0, sp, #12
     17a:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     17c:	2300      	movs	r3, #0
     17e:	60a3      	str	r3, [r4, #8]
     180:	60e3      	str	r3, [r4, #12]
     182:	6123      	str	r3, [r4, #16]
     184:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     186:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     188:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     18a:	464b      	mov	r3, r9
     18c:	009a      	lsls	r2, r3, #2
     18e:	4b89      	ldr	r3, [pc, #548]	; (3b4 <tc_init+0x268>)
     190:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     192:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     194:	4643      	mov	r3, r8
     196:	789b      	ldrb	r3, [r3, #2]
     198:	2b08      	cmp	r3, #8
     19a:	d104      	bne.n	1a6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     19c:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     19e:	464a      	mov	r2, r9
     1a0:	07d2      	lsls	r2, r2, #31
     1a2:	d400      	bmi.n	1a6 <tc_init+0x5a>
     1a4:	e0fb      	b.n	39e <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     1a6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     1a8:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1aa:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     1ac:	07db      	lsls	r3, r3, #31
     1ae:	d500      	bpl.n	1b2 <tc_init+0x66>
     1b0:	e0f5      	b.n	39e <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1b2:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     1b4:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1b6:	06db      	lsls	r3, r3, #27
     1b8:	d500      	bpl.n	1bc <tc_init+0x70>
     1ba:	e0f0      	b.n	39e <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     1bc:	8833      	ldrh	r3, [r6, #0]
     1be:	079b      	lsls	r3, r3, #30
     1c0:	d500      	bpl.n	1c4 <tc_init+0x78>
     1c2:	e0ec      	b.n	39e <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     1c4:	4643      	mov	r3, r8
     1c6:	7c1b      	ldrb	r3, [r3, #16]
     1c8:	2b00      	cmp	r3, #0
     1ca:	d00c      	beq.n	1e6 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1cc:	a902      	add	r1, sp, #8
     1ce:	2301      	movs	r3, #1
     1d0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     1d2:	2200      	movs	r2, #0
     1d4:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     1d6:	4642      	mov	r2, r8
     1d8:	7e12      	ldrb	r2, [r2, #24]
     1da:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     1dc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     1de:	4643      	mov	r3, r8
     1e0:	7d18      	ldrb	r0, [r3, #20]
     1e2:	4b75      	ldr	r3, [pc, #468]	; (3b8 <tc_init+0x26c>)
     1e4:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     1e6:	4643      	mov	r3, r8
     1e8:	7f1b      	ldrb	r3, [r3, #28]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d00d      	beq.n	20a <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1ee:	a902      	add	r1, sp, #8
     1f0:	2301      	movs	r3, #1
     1f2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     1f4:	2200      	movs	r2, #0
     1f6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     1f8:	4642      	mov	r2, r8
     1fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
     1fc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     1fe:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     200:	4643      	mov	r3, r8
     202:	6a1b      	ldr	r3, [r3, #32]
     204:	b2d8      	uxtb	r0, r3
     206:	4b6c      	ldr	r3, [pc, #432]	; (3b8 <tc_init+0x26c>)
     208:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     20a:	496c      	ldr	r1, [pc, #432]	; (3bc <tc_init+0x270>)
     20c:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     20e:	464a      	mov	r2, r9
     210:	0052      	lsls	r2, r2, #1
     212:	a803      	add	r0, sp, #12
     214:	5a12      	ldrh	r2, [r2, r0]
     216:	4313      	orrs	r3, r2
     218:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     21a:	4643      	mov	r3, r8
     21c:	789b      	ldrb	r3, [r3, #2]
     21e:	2b08      	cmp	r3, #8
     220:	d106      	bne.n	230 <tc_init+0xe4>
     222:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     224:	464a      	mov	r2, r9
     226:	3201      	adds	r2, #1
     228:	0052      	lsls	r2, r2, #1
     22a:	5a12      	ldrh	r2, [r2, r0]
     22c:	4313      	orrs	r3, r2
     22e:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     230:	a901      	add	r1, sp, #4
     232:	4643      	mov	r3, r8
     234:	781b      	ldrb	r3, [r3, #0]
     236:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     238:	ab05      	add	r3, sp, #20
     23a:	464a      	mov	r2, r9
     23c:	5c9d      	ldrb	r5, [r3, r2]
     23e:	0028      	movs	r0, r5
     240:	4b5f      	ldr	r3, [pc, #380]	; (3c0 <tc_init+0x274>)
     242:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     244:	0028      	movs	r0, r5
     246:	4b5f      	ldr	r3, [pc, #380]	; (3c4 <tc_init+0x278>)
     248:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     24a:	4643      	mov	r3, r8
     24c:	7898      	ldrb	r0, [r3, #2]
     24e:	799b      	ldrb	r3, [r3, #6]
     250:	0002      	movs	r2, r0
     252:	431a      	orrs	r2, r3
     254:	4643      	mov	r3, r8
     256:	8918      	ldrh	r0, [r3, #8]
     258:	889b      	ldrh	r3, [r3, #4]
     25a:	4303      	orrs	r3, r0
     25c:	431a      	orrs	r2, r3
     25e:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     260:	4643      	mov	r3, r8
     262:	785b      	ldrb	r3, [r3, #1]
     264:	2b00      	cmp	r3, #0
     266:	d002      	beq.n	26e <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     268:	2380      	movs	r3, #128	; 0x80
     26a:	011b      	lsls	r3, r3, #4
     26c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     26e:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     270:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     272:	7bcb      	ldrb	r3, [r1, #15]
     274:	4393      	bics	r3, r2
     276:	d1fc      	bne.n	272 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     278:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     27a:	4643      	mov	r3, r8
     27c:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     27e:	1e43      	subs	r3, r0, #1
     280:	4198      	sbcs	r0, r3
     282:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
     284:	4643      	mov	r3, r8
     286:	7b9b      	ldrb	r3, [r3, #14]
     288:	2b00      	cmp	r3, #0
     28a:	d001      	beq.n	290 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     28c:	2301      	movs	r3, #1
     28e:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     290:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     292:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     294:	7bcb      	ldrb	r3, [r1, #15]
     296:	4393      	bics	r3, r2
     298:	d1fc      	bne.n	294 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     29a:	33ff      	adds	r3, #255	; 0xff
     29c:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     29e:	2800      	cmp	r0, #0
     2a0:	d005      	beq.n	2ae <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2a2:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
     2a4:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2a6:	7bcb      	ldrb	r3, [r1, #15]
     2a8:	4393      	bics	r3, r2
     2aa:	d1fc      	bne.n	2a6 <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     2ac:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     2ae:	4643      	mov	r3, r8
     2b0:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     2b2:	7adb      	ldrb	r3, [r3, #11]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d001      	beq.n	2bc <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     2b8:	2310      	movs	r3, #16
     2ba:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     2bc:	4643      	mov	r3, r8
     2be:	7b1b      	ldrb	r3, [r3, #12]
     2c0:	2b00      	cmp	r3, #0
     2c2:	d001      	beq.n	2c8 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     2c4:	2320      	movs	r3, #32
     2c6:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2c8:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     2ca:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2cc:	7bcb      	ldrb	r3, [r1, #15]
     2ce:	4393      	bics	r3, r2
     2d0:	d1fc      	bne.n	2cc <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     2d2:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2d4:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     2d6:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2d8:	7bd3      	ldrb	r3, [r2, #15]
     2da:	438b      	bics	r3, r1
     2dc:	d1fc      	bne.n	2d8 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     2de:	7923      	ldrb	r3, [r4, #4]
     2e0:	2b04      	cmp	r3, #4
     2e2:	d005      	beq.n	2f0 <tc_init+0x1a4>
     2e4:	2b08      	cmp	r3, #8
     2e6:	d041      	beq.n	36c <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     2e8:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     2ea:	2b00      	cmp	r3, #0
     2ec:	d157      	bne.n	39e <tc_init+0x252>
     2ee:	e024      	b.n	33a <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     2f0:	217f      	movs	r1, #127	; 0x7f
     2f2:	7bd3      	ldrb	r3, [r2, #15]
     2f4:	438b      	bics	r3, r1
     2f6:	d1fc      	bne.n	2f2 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     2f8:	3328      	adds	r3, #40	; 0x28
     2fa:	4642      	mov	r2, r8
     2fc:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     2fe:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     300:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     302:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     304:	7bcb      	ldrb	r3, [r1, #15]
     306:	4393      	bics	r3, r2
     308:	d1fc      	bne.n	304 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     30a:	3329      	adds	r3, #41	; 0x29
     30c:	4642      	mov	r2, r8
     30e:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     310:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     312:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     314:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     316:	7bcb      	ldrb	r3, [r1, #15]
     318:	4393      	bics	r3, r2
     31a:	d1fc      	bne.n	316 <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     31c:	332a      	adds	r3, #42	; 0x2a
     31e:	4642      	mov	r2, r8
     320:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     322:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     324:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     326:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     328:	7bcb      	ldrb	r3, [r1, #15]
     32a:	4393      	bics	r3, r2
     32c:	d1fc      	bne.n	328 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     32e:	332b      	adds	r3, #43	; 0x2b
     330:	4642      	mov	r2, r8
     332:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     334:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     336:	2000      	movs	r0, #0
     338:	e031      	b.n	39e <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     33a:	217f      	movs	r1, #127	; 0x7f
     33c:	7bd3      	ldrb	r3, [r2, #15]
     33e:	438b      	bics	r3, r1
     340:	d1fc      	bne.n	33c <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     342:	4643      	mov	r3, r8
     344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     346:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     348:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     34a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     34c:	7bcb      	ldrb	r3, [r1, #15]
     34e:	4393      	bics	r3, r2
     350:	d1fc      	bne.n	34c <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     352:	4643      	mov	r3, r8
     354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     356:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     358:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     35a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     35c:	7bcb      	ldrb	r3, [r1, #15]
     35e:	4393      	bics	r3, r2
     360:	d1fc      	bne.n	35c <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     362:	4643      	mov	r3, r8
     364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     366:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     368:	2000      	movs	r0, #0
     36a:	e018      	b.n	39e <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     36c:	217f      	movs	r1, #127	; 0x7f
     36e:	7bd3      	ldrb	r3, [r2, #15]
     370:	438b      	bics	r3, r1
     372:	d1fc      	bne.n	36e <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     374:	4643      	mov	r3, r8
     376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     378:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     37a:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     37c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     37e:	7bcb      	ldrb	r3, [r1, #15]
     380:	4393      	bics	r3, r2
     382:	d1fc      	bne.n	37e <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     384:	4643      	mov	r3, r8
     386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     388:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     38a:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     38c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     38e:	7bcb      	ldrb	r3, [r1, #15]
     390:	4393      	bics	r3, r2
     392:	d1fc      	bne.n	38e <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     394:	4643      	mov	r3, r8
     396:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     398:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     39a:	2000      	movs	r0, #0
     39c:	e7ff      	b.n	39e <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     39e:	b007      	add	sp, #28
     3a0:	bc0c      	pop	{r2, r3}
     3a2:	4690      	mov	r8, r2
     3a4:	4699      	mov	r9, r3
     3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3a8:	00000115 	.word	0x00000115
     3ac:	000071d8 	.word	0x000071d8
     3b0:	00005cc9 	.word	0x00005cc9
     3b4:	200001ec 	.word	0x200001ec
     3b8:	00004b7d 	.word	0x00004b7d
     3bc:	40000400 	.word	0x40000400
     3c0:	00004a85 	.word	0x00004a85
     3c4:	000049f9 	.word	0x000049f9

000003c8 <tc_callback>:
#include "main.h"

struct tc_module tc_instance;

void tc_callback(struct tc_module *const module_inst)
{
     3c8:	b510      	push	{r4, lr}
	TimerCallback();
     3ca:	4b01      	ldr	r3, [pc, #4]	; (3d0 <tc_callback+0x8>)
     3cc:	4798      	blx	r3
}
     3ce:	bd10      	pop	{r4, pc}
     3d0:	00005885 	.word	0x00005885

000003d4 <configure_tc>:

void configure_tc(void)
{
     3d4:	b510      	push	{r4, lr}
     3d6:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     3d8:	aa01      	add	r2, sp, #4
     3da:	2300      	movs	r3, #0
     3dc:	2100      	movs	r1, #0
     3de:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     3e0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     3e2:	2000      	movs	r0, #0
     3e4:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     3e6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     3e8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     3ea:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     3ec:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     3ee:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     3f0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     3f2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     3f4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     3f6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     3f8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     3fa:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     3fc:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     3fe:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     400:	3304      	adds	r3, #4
     402:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
     404:	3b03      	subs	r3, #3
     406:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
     408:	23c0      	movs	r3, #192	; 0xc0
     40a:	00db      	lsls	r3, r3, #3
     40c:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 32; //This sets interrupt time - 128cnts/sec - 32 =.25sec
     40e:	2120      	movs	r1, #32
     410:	2329      	movs	r3, #41	; 0x29
     412:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
     414:	3112      	adds	r1, #18
     416:	3301      	adds	r3, #1
     418:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[1] = 99;
     41a:	3131      	adds	r1, #49	; 0x31
     41c:	3301      	adds	r3, #1
     41e:	54d1      	strb	r1, [r2, r3]

	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     420:	4c07      	ldr	r4, [pc, #28]	; (440 <configure_tc+0x6c>)
     422:	4908      	ldr	r1, [pc, #32]	; (444 <configure_tc+0x70>)
     424:	0020      	movs	r0, r4
     426:	4b08      	ldr	r3, [pc, #32]	; (448 <configure_tc+0x74>)
     428:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     42a:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     42c:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     42e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     430:	438b      	bics	r3, r1
     432:	d1fc      	bne.n	42e <configure_tc+0x5a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     434:	8811      	ldrh	r1, [r2, #0]
     436:	3302      	adds	r3, #2
     438:	430b      	orrs	r3, r1
     43a:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
}
     43c:	b00e      	add	sp, #56	; 0x38
     43e:	bd10      	pop	{r4, pc}
     440:	200001d0 	.word	0x200001d0
     444:	42002c00 	.word	0x42002c00
     448:	0000014d 	.word	0x0000014d

0000044c <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
     44c:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_OVERFLOW);
     44e:	4c0c      	ldr	r4, [pc, #48]	; (480 <configure_tc_callbacks+0x34>)
     450:	2200      	movs	r2, #0
     452:	490c      	ldr	r1, [pc, #48]	; (484 <configure_tc_callbacks+0x38>)
     454:	0020      	movs	r0, r4
     456:	4b0c      	ldr	r3, [pc, #48]	; (488 <configure_tc_callbacks+0x3c>)
     458:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     45a:	6820      	ldr	r0, [r4, #0]
     45c:	4b0b      	ldr	r3, [pc, #44]	; (48c <configure_tc_callbacks+0x40>)
     45e:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     460:	4b0b      	ldr	r3, [pc, #44]	; (490 <configure_tc_callbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     462:	5c1b      	ldrb	r3, [r3, r0]
     464:	221f      	movs	r2, #31
     466:	4013      	ands	r3, r2
     468:	3a1e      	subs	r2, #30
     46a:	0011      	movs	r1, r2
     46c:	4099      	lsls	r1, r3
     46e:	4b09      	ldr	r3, [pc, #36]	; (494 <configure_tc_callbacks+0x48>)
     470:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     472:	7e61      	ldrb	r1, [r4, #25]
     474:	2301      	movs	r3, #1
     476:	430b      	orrs	r3, r1
     478:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     47a:	6823      	ldr	r3, [r4, #0]
     47c:	735a      	strb	r2, [r3, #13]
	//tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_CC_CHANNEL0);
	//tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_CC_CHANNEL1);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL1);
     47e:	bd10      	pop	{r4, pc}
     480:	200001d0 	.word	0x200001d0
     484:	000003c9 	.word	0x000003c9
     488:	00000499 	.word	0x00000499
     48c:	00000115 	.word	0x00000115
     490:	000071f0 	.word	0x000071f0
     494:	e000e100 	.word	0xe000e100

00000498 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     498:	1c93      	adds	r3, r2, #2
     49a:	009b      	lsls	r3, r3, #2
     49c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     49e:	2a02      	cmp	r2, #2
     4a0:	d104      	bne.n	4ac <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     4a2:	7e02      	ldrb	r2, [r0, #24]
     4a4:	2310      	movs	r3, #16
     4a6:	4313      	orrs	r3, r2
     4a8:	7603      	strb	r3, [r0, #24]
     4aa:	e00b      	b.n	4c4 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     4ac:	2a03      	cmp	r2, #3
     4ae:	d104      	bne.n	4ba <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     4b0:	7e02      	ldrb	r2, [r0, #24]
     4b2:	2320      	movs	r3, #32
     4b4:	4313      	orrs	r3, r2
     4b6:	7603      	strb	r3, [r0, #24]
     4b8:	e004      	b.n	4c4 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     4ba:	2301      	movs	r3, #1
     4bc:	4093      	lsls	r3, r2
     4be:	7e02      	ldrb	r2, [r0, #24]
     4c0:	4313      	orrs	r3, r2
     4c2:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     4c4:	2000      	movs	r0, #0
     4c6:	4770      	bx	lr

000004c8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     4c8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     4ca:	0080      	lsls	r0, r0, #2
     4cc:	4b14      	ldr	r3, [pc, #80]	; (520 <_tc_interrupt_handler+0x58>)
     4ce:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     4d0:	682b      	ldr	r3, [r5, #0]
     4d2:	7b9c      	ldrb	r4, [r3, #14]
     4d4:	7e2b      	ldrb	r3, [r5, #24]
     4d6:	401c      	ands	r4, r3
     4d8:	7e6b      	ldrb	r3, [r5, #25]
     4da:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     4dc:	07e3      	lsls	r3, r4, #31
     4de:	d505      	bpl.n	4ec <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     4e0:	0028      	movs	r0, r5
     4e2:	68ab      	ldr	r3, [r5, #8]
     4e4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     4e6:	2301      	movs	r3, #1
     4e8:	682a      	ldr	r2, [r5, #0]
     4ea:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     4ec:	07a3      	lsls	r3, r4, #30
     4ee:	d505      	bpl.n	4fc <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     4f0:	0028      	movs	r0, r5
     4f2:	68eb      	ldr	r3, [r5, #12]
     4f4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     4f6:	2302      	movs	r3, #2
     4f8:	682a      	ldr	r2, [r5, #0]
     4fa:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     4fc:	06e3      	lsls	r3, r4, #27
     4fe:	d505      	bpl.n	50c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     500:	0028      	movs	r0, r5
     502:	692b      	ldr	r3, [r5, #16]
     504:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     506:	2310      	movs	r3, #16
     508:	682a      	ldr	r2, [r5, #0]
     50a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     50c:	06a3      	lsls	r3, r4, #26
     50e:	d505      	bpl.n	51c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     510:	0028      	movs	r0, r5
     512:	696b      	ldr	r3, [r5, #20]
     514:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     516:	682b      	ldr	r3, [r5, #0]
     518:	2220      	movs	r2, #32
     51a:	739a      	strb	r2, [r3, #14]
	}
}
     51c:	bd70      	pop	{r4, r5, r6, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	200001ec 	.word	0x200001ec

00000524 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     524:	b510      	push	{r4, lr}
     526:	2000      	movs	r0, #0
     528:	4b01      	ldr	r3, [pc, #4]	; (530 <TC3_Handler+0xc>)
     52a:	4798      	blx	r3
     52c:	bd10      	pop	{r4, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	000004c9 	.word	0x000004c9

00000534 <TC4_Handler>:
     534:	b510      	push	{r4, lr}
     536:	2001      	movs	r0, #1
     538:	4b01      	ldr	r3, [pc, #4]	; (540 <TC4_Handler+0xc>)
     53a:	4798      	blx	r3
     53c:	bd10      	pop	{r4, pc}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	000004c9 	.word	0x000004c9

00000544 <TC5_Handler>:
     544:	b510      	push	{r4, lr}
     546:	2002      	movs	r0, #2
     548:	4b01      	ldr	r3, [pc, #4]	; (550 <TC5_Handler+0xc>)
     54a:	4798      	blx	r3
     54c:	bd10      	pop	{r4, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004c9 	.word	0x000004c9

00000554 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     554:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     556:	2000      	movs	r0, #0
     558:	4b08      	ldr	r3, [pc, #32]	; (57c <delay_init+0x28>)
     55a:	4798      	blx	r3
     55c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     55e:	4c08      	ldr	r4, [pc, #32]	; (580 <delay_init+0x2c>)
     560:	21fa      	movs	r1, #250	; 0xfa
     562:	0089      	lsls	r1, r1, #2
     564:	47a0      	blx	r4
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <delay_init+0x30>)
     568:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     56a:	4907      	ldr	r1, [pc, #28]	; (588 <delay_init+0x34>)
     56c:	0028      	movs	r0, r5
     56e:	47a0      	blx	r4
     570:	4b06      	ldr	r3, [pc, #24]	; (58c <delay_init+0x38>)
     572:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     574:	2205      	movs	r2, #5
     576:	4b06      	ldr	r3, [pc, #24]	; (590 <delay_init+0x3c>)
     578:	601a      	str	r2, [r3, #0]
}
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	0000496d 	.word	0x0000496d
     580:	00005b0d 	.word	0x00005b0d
     584:	20000004 	.word	0x20000004
     588:	000f4240 	.word	0x000f4240
     58c:	20000000 	.word	0x20000000
     590:	e000e010 	.word	0xe000e010

00000594 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     594:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     596:	4b08      	ldr	r3, [pc, #32]	; (5b8 <delay_cycles_ms+0x24>)
     598:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     59a:	4a08      	ldr	r2, [pc, #32]	; (5bc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     59c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     59e:	2180      	movs	r1, #128	; 0x80
     5a0:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     5a2:	e006      	b.n	5b2 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     5a4:	2c00      	cmp	r4, #0
     5a6:	d004      	beq.n	5b2 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     5a8:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5aa:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5ac:	6813      	ldr	r3, [r2, #0]
     5ae:	420b      	tst	r3, r1
     5b0:	d0fc      	beq.n	5ac <delay_cycles_ms+0x18>
     5b2:	3801      	subs	r0, #1
     5b4:	d2f6      	bcs.n	5a4 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     5b6:	bd30      	pop	{r4, r5, pc}
     5b8:	20000004 	.word	0x20000004
     5bc:	e000e010 	.word	0xe000e010

000005c0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     5c0:	b510      	push	{r4, lr}
	if (gpfIsr) {
     5c2:	4b03      	ldr	r3, [pc, #12]	; (5d0 <chip_isr+0x10>)
     5c4:	681b      	ldr	r3, [r3, #0]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d000      	beq.n	5cc <chip_isr+0xc>
		gpfIsr();
     5ca:	4798      	blx	r3
	}
}
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	20000094 	.word	0x20000094

000005d4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d006      	beq.n	5e8 <nm_bsp_sleep+0x14>
     5da:	0004      	movs	r4, r0
		delay_ms(1);
     5dc:	4d03      	ldr	r5, [pc, #12]	; (5ec <nm_bsp_sleep+0x18>)
     5de:	2001      	movs	r0, #1
     5e0:	47a8      	blx	r5
     5e2:	3c01      	subs	r4, #1
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     5e4:	2c00      	cmp	r4, #0
     5e6:	d1fa      	bne.n	5de <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     5e8:	bd70      	pop	{r4, r5, r6, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00000595 	.word	0x00000595

000005f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     5f2:	4c08      	ldr	r4, [pc, #32]	; (614 <nm_bsp_reset+0x24>)
     5f4:	2780      	movs	r7, #128	; 0x80
     5f6:	057f      	lsls	r7, r7, #21
     5f8:	6167      	str	r7, [r4, #20]
     5fa:	2680      	movs	r6, #128	; 0x80
     5fc:	0536      	lsls	r6, r6, #20
     5fe:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	nm_bsp_sleep(100);
     600:	2064      	movs	r0, #100	; 0x64
     602:	4d05      	ldr	r5, [pc, #20]	; (618 <nm_bsp_reset+0x28>)
     604:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     606:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
	nm_bsp_sleep(10);
     608:	200a      	movs	r0, #10
     60a:	47a8      	blx	r5
     60c:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
	nm_bsp_sleep(10);
     60e:	200a      	movs	r0, #10
     610:	47a8      	blx	r5
}
     612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     614:	41004400 	.word	0x41004400
     618:	000005d5 	.word	0x000005d5

0000061c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     61c:	b570      	push	{r4, r5, r6, lr}
     61e:	b082      	sub	sp, #8
	gpfIsr = NULL;
     620:	2300      	movs	r3, #0
     622:	4a13      	ldr	r2, [pc, #76]	; (670 <nm_bsp_init+0x54>)
     624:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     626:	ac01      	add	r4, sp, #4
     628:	2501      	movs	r5, #1
     62a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     62c:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     62e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     630:	0021      	movs	r1, r4
     632:	201b      	movs	r0, #27
     634:	4e0f      	ldr	r6, [pc, #60]	; (674 <nm_bsp_init+0x58>)
     636:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     638:	0021      	movs	r1, r4
     63a:	201c      	movs	r0, #28
     63c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     63e:	0021      	movs	r1, r4
     640:	2028      	movs	r0, #40	; 0x28
     642:	47b0      	blx	r6

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     644:	4b0c      	ldr	r3, [pc, #48]	; (678 <nm_bsp_init+0x5c>)
     646:	681b      	ldr	r3, [r3, #0]
     648:	421d      	tst	r5, r3
     64a:	d003      	beq.n	654 <nm_bsp_init+0x38>
     64c:	4b0a      	ldr	r3, [pc, #40]	; (678 <nm_bsp_init+0x5c>)
     64e:	681b      	ldr	r3, [r3, #0]
     650:	079b      	lsls	r3, r3, #30
     652:	d401      	bmi.n	658 <nm_bsp_init+0x3c>
	    delay_init();
     654:	4b09      	ldr	r3, [pc, #36]	; (67c <nm_bsp_init+0x60>)
     656:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     658:	4b09      	ldr	r3, [pc, #36]	; (680 <nm_bsp_init+0x64>)
     65a:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     65c:	2201      	movs	r2, #1
     65e:	4b09      	ldr	r3, [pc, #36]	; (684 <nm_bsp_init+0x68>)
     660:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     662:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     666:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     668:	2000      	movs	r0, #0
     66a:	b002      	add	sp, #8
     66c:	bd70      	pop	{r4, r5, r6, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	20000094 	.word	0x20000094
     674:	00003565 	.word	0x00003565
     678:	e000e010 	.word	0xe000e010
     67c:	00000555 	.word	0x00000555
     680:	000005f1 	.word	0x000005f1
     684:	20000010 	.word	0x20000010

00000688 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     688:	b510      	push	{r4, lr}
     68a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     68c:	4b0e      	ldr	r3, [pc, #56]	; (6c8 <nm_bsp_register_isr+0x40>)
     68e:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     690:	ac01      	add	r4, sp, #4
     692:	0020      	movs	r0, r4
     694:	4b0d      	ldr	r3, [pc, #52]	; (6cc <nm_bsp_register_isr+0x44>)
     696:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     698:	2329      	movs	r3, #41	; 0x29
     69a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     69c:	2300      	movs	r3, #0
     69e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     6a0:	3301      	adds	r3, #1
     6a2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     6a4:	3301      	adds	r3, #1
     6a6:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     6a8:	0021      	movs	r1, r4
     6aa:	2009      	movs	r0, #9
     6ac:	4b08      	ldr	r3, [pc, #32]	; (6d0 <nm_bsp_register_isr+0x48>)
     6ae:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     6b0:	2200      	movs	r2, #0
     6b2:	2109      	movs	r1, #9
     6b4:	4807      	ldr	r0, [pc, #28]	; (6d4 <nm_bsp_register_isr+0x4c>)
     6b6:	4b08      	ldr	r3, [pc, #32]	; (6d8 <nm_bsp_register_isr+0x50>)
     6b8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     6ba:	2100      	movs	r1, #0
     6bc:	2009      	movs	r0, #9
     6be:	4b07      	ldr	r3, [pc, #28]	; (6dc <nm_bsp_register_isr+0x54>)
     6c0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     6c2:	b004      	add	sp, #16
     6c4:	bd10      	pop	{r4, pc}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	20000094 	.word	0x20000094
     6cc:	000034dd 	.word	0x000034dd
     6d0:	000034f1 	.word	0x000034f1
     6d4:	000005c1 	.word	0x000005c1
     6d8:	00003385 	.word	0x00003385
     6dc:	000033b1 	.word	0x000033b1

000006e0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     6e0:	b510      	push	{r4, lr}
	if (u8Enable) {
     6e2:	2800      	cmp	r0, #0
     6e4:	d004      	beq.n	6f0 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     6e6:	2100      	movs	r1, #0
     6e8:	2009      	movs	r0, #9
     6ea:	4b04      	ldr	r3, [pc, #16]	; (6fc <nm_bsp_interrupt_ctrl+0x1c>)
     6ec:	4798      	blx	r3
     6ee:	e003      	b.n	6f8 <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     6f0:	2100      	movs	r1, #0
     6f2:	2009      	movs	r0, #9
     6f4:	4b02      	ldr	r3, [pc, #8]	; (700 <nm_bsp_interrupt_ctrl+0x20>)
     6f6:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     6f8:	bd10      	pop	{r4, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	000033b1 	.word	0x000033b1
     700:	000033d1 	.word	0x000033d1

00000704 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     704:	b530      	push	{r4, r5, lr}
     706:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     708:	4c30      	ldr	r4, [pc, #192]	; (7cc <nm_bus_init+0xc8>)
     70a:	230e      	movs	r3, #14
     70c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     70e:	2300      	movs	r3, #0
     710:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     712:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     714:	a901      	add	r1, sp, #4
     716:	2201      	movs	r2, #1
     718:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     71a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     71c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     71e:	200e      	movs	r0, #14
     720:	4b2b      	ldr	r3, [pc, #172]	; (7d0 <nm_bus_init+0xcc>)
     722:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     724:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     726:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     728:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     72a:	2900      	cmp	r1, #0
     72c:	d104      	bne.n	738 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     72e:	095a      	lsrs	r2, r3, #5
     730:	01d2      	lsls	r2, r2, #7
     732:	4928      	ldr	r1, [pc, #160]	; (7d4 <nm_bus_init+0xd0>)
     734:	468c      	mov	ip, r1
     736:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     738:	211f      	movs	r1, #31
     73a:	400b      	ands	r3, r1
     73c:	391e      	subs	r1, #30
     73e:	0008      	movs	r0, r1
     740:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     742:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     744:	ac02      	add	r4, sp, #8
     746:	7021      	strb	r1, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     748:	2300      	movs	r3, #0
     74a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     74c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     74e:	22c0      	movs	r2, #192	; 0xc0
     750:	0392      	lsls	r2, r2, #14
     752:	9205      	str	r2, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     754:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     756:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     758:	74a1      	strb	r1, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     75a:	74e1      	strb	r1, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     75c:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     75e:	2224      	movs	r2, #36	; 0x24
     760:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     762:	3a18      	subs	r2, #24
     764:	2100      	movs	r1, #0
     766:	a808      	add	r0, sp, #32
     768:	4b1b      	ldr	r3, [pc, #108]	; (7d8 <nm_bus_init+0xd4>)
     76a:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     76c:	4b1b      	ldr	r3, [pc, #108]	; (7dc <nm_bus_init+0xd8>)
     76e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     770:	4b1b      	ldr	r3, [pc, #108]	; (7e0 <nm_bus_init+0xdc>)
     772:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     774:	2301      	movs	r3, #1
     776:	425b      	negs	r3, r3
     778:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     77a:	4b1a      	ldr	r3, [pc, #104]	; (7e4 <nm_bus_init+0xe0>)
     77c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     77e:	4b1a      	ldr	r3, [pc, #104]	; (7e8 <nm_bus_init+0xe4>)
     780:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     782:	0022      	movs	r2, r4
     784:	4919      	ldr	r1, [pc, #100]	; (7ec <nm_bus_init+0xe8>)
     786:	481a      	ldr	r0, [pc, #104]	; (7f0 <nm_bus_init+0xec>)
     788:	4b1a      	ldr	r3, [pc, #104]	; (7f4 <nm_bus_init+0xf0>)
     78a:	4798      	blx	r3
     78c:	2800      	cmp	r0, #0
     78e:	d119      	bne.n	7c4 <nm_bus_init+0xc0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     790:	4d17      	ldr	r5, [pc, #92]	; (7f0 <nm_bus_init+0xec>)
     792:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     794:	0020      	movs	r0, r4
     796:	4b18      	ldr	r3, [pc, #96]	; (7f8 <nm_bus_init+0xf4>)
     798:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     79a:	231f      	movs	r3, #31
     79c:	4018      	ands	r0, r3
     79e:	3b1e      	subs	r3, #30
     7a0:	4083      	lsls	r3, r0
     7a2:	4a16      	ldr	r2, [pc, #88]	; (7fc <nm_bus_init+0xf8>)
     7a4:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7a6:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     7a8:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     7aa:	2b00      	cmp	r3, #0
     7ac:	d1fc      	bne.n	7a8 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     7ae:	6822      	ldr	r2, [r4, #0]
     7b0:	3302      	adds	r3, #2
     7b2:	4313      	orrs	r3, r2
     7b4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     7b6:	4b12      	ldr	r3, [pc, #72]	; (800 <nm_bus_init+0xfc>)
     7b8:	4798      	blx	r3
	nm_bsp_sleep(1);
     7ba:	2001      	movs	r0, #1
     7bc:	4b11      	ldr	r3, [pc, #68]	; (804 <nm_bus_init+0x100>)
     7be:	4798      	blx	r3
#endif
	return result;
     7c0:	2000      	movs	r0, #0
     7c2:	e001      	b.n	7c8 <nm_bus_init+0xc4>
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
     7c4:	2006      	movs	r0, #6
     7c6:	4240      	negs	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
     7c8:	b011      	add	sp, #68	; 0x44
     7ca:	bd30      	pop	{r4, r5, pc}
     7cc:	200001f8 	.word	0x200001f8
     7d0:	00003565 	.word	0x00003565
     7d4:	41004400 	.word	0x41004400
     7d8:	00005cdb 	.word	0x00005cdb
     7dc:	000c0002 	.word	0x000c0002
     7e0:	000d0002 	.word	0x000d0002
     7e4:	000f0002 	.word	0x000f0002
     7e8:	00b71b00 	.word	0x00b71b00
     7ec:	42001000 	.word	0x42001000
     7f0:	200001fc 	.word	0x200001fc
     7f4:	00003a55 	.word	0x00003a55
     7f8:	000039c9 	.word	0x000039c9
     7fc:	e000e100 	.word	0xe000e100
     800:	000005f1 	.word	0x000005f1
     804:	000005d5 	.word	0x000005d5

00000808 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     808:	b5f0      	push	{r4, r5, r6, r7, lr}
     80a:	465f      	mov	r7, fp
     80c:	4656      	mov	r6, sl
     80e:	464d      	mov	r5, r9
     810:	4644      	mov	r4, r8
     812:	b4f0      	push	{r4, r5, r6, r7}
     814:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     816:	2803      	cmp	r0, #3
     818:	d165      	bne.n	8e6 <nm_bus_ioctl+0xde>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     81a:	680f      	ldr	r7, [r1, #0]
     81c:	684e      	ldr	r6, [r1, #4]
     81e:	890d      	ldrh	r5, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
     820:	2200      	movs	r2, #0
     822:	466b      	mov	r3, sp
     824:	71da      	strb	r2, [r3, #7]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
     826:	2f00      	cmp	r7, #0
     828:	d008      	beq.n	83c <nm_bus_ioctl+0x34>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
     82a:	2e00      	cmp	r6, #0
     82c:	d158      	bne.n	8e0 <nm_bus_ioctl+0xd8>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
     82e:	2301      	movs	r3, #1
     830:	4699      	mov	r9, r3
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     832:	2300      	movs	r3, #0
     834:	4698      	mov	r8, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
     836:	466b      	mov	r3, sp
     838:	1dde      	adds	r6, r3, #7
     83a:	e005      	b.n	848 <nm_bus_ioctl+0x40>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     83c:	2300      	movs	r3, #0
     83e:	4699      	mov	r9, r3
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
     840:	3301      	adds	r3, #1
     842:	4698      	mov	r8, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
     844:	466b      	mov	r3, sp
     846:	1ddf      	adds	r7, r3, #7
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);
     848:	2201      	movs	r2, #1
     84a:	4931      	ldr	r1, [pc, #196]	; (910 <nm_bus_ioctl+0x108>)
     84c:	4831      	ldr	r0, [pc, #196]	; (914 <nm_bus_ioctl+0x10c>)
     84e:	4b32      	ldr	r3, [pc, #200]	; (918 <nm_bus_ioctl+0x110>)
     850:	4798      	blx	r3

	while (u16Sz) {
     852:	2d00      	cmp	r5, #0
     854:	d037      	beq.n	8c6 <nm_bus_ioctl+0xbe>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     856:	4b2f      	ldr	r3, [pc, #188]	; (914 <nm_bus_ioctl+0x10c>)
     858:	469b      	mov	fp, r3
		txd_data = *pu8Mosi;
		while (!spi_is_ready_to_write(&master))
     85a:	2401      	movs	r4, #1
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     85c:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     85e:	469a      	mov	sl, r3
			;
		*pu8Miso = rxd_data;

		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
     860:	4649      	mov	r1, r9
     862:	424b      	negs	r3, r1
     864:	4159      	adcs	r1, r3
     866:	4689      	mov	r9, r1
		if (!u8SkipMosi)
			pu8Mosi++;
     868:	4641      	mov	r1, r8
     86a:	424b      	negs	r3, r1
     86c:	4159      	adcs	r1, r3
     86e:	4688      	mov	r8, r1
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
     870:	7838      	ldrb	r0, [r7, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     872:	465b      	mov	r3, fp
     874:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     876:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     878:	4221      	tst	r1, r4
     87a:	d0fc      	beq.n	876 <nm_bus_ioctl+0x6e>
     87c:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     87e:	4221      	tst	r1, r4
     880:	d0fc      	beq.n	87c <nm_bus_ioctl+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     882:	6298      	str	r0, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     884:	7e19      	ldrb	r1, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     886:	4211      	tst	r1, r2
     888:	d0fc      	beq.n	884 <nm_bus_ioctl+0x7c>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     88a:	4651      	mov	r1, sl
     88c:	7989      	ldrb	r1, [r1, #6]
     88e:	468c      	mov	ip, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     890:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     892:	4211      	tst	r1, r2
     894:	d0fc      	beq.n	890 <nm_bus_ioctl+0x88>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     896:	8b58      	ldrh	r0, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     898:	2100      	movs	r1, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     89a:	4210      	tst	r0, r2
     89c:	d001      	beq.n	8a2 <nm_bus_ioctl+0x9a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     89e:	835a      	strh	r2, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     8a0:	311e      	adds	r1, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8a2:	4660      	mov	r0, ip
     8a4:	2801      	cmp	r0, #1
     8a6:	d103      	bne.n	8b0 <nm_bus_ioctl+0xa8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
     8aa:	05c0      	lsls	r0, r0, #23
     8ac:	0dc0      	lsrs	r0, r0, #23
     8ae:	e001      	b.n	8b4 <nm_bus_ioctl+0xac>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
     8b2:	b2c0      	uxtb	r0, r0
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     8b4:	2900      	cmp	r1, #0
     8b6:	d1eb      	bne.n	890 <nm_bus_ioctl+0x88>
			;
		*pu8Miso = rxd_data;
     8b8:	7030      	strb	r0, [r6, #0]

		u16Sz--;
     8ba:	3d01      	subs	r5, #1
     8bc:	b2ad      	uxth	r5, r5
		if (!u8SkipMiso)
			pu8Miso++;
     8be:	444e      	add	r6, r9
		if (!u8SkipMosi)
			pu8Mosi++;
     8c0:	4447      	add	r7, r8
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     8c2:	2d00      	cmp	r5, #0
     8c4:	d1d4      	bne.n	870 <nm_bus_ioctl+0x68>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8c6:	4b13      	ldr	r3, [pc, #76]	; (914 <nm_bus_ioctl+0x10c>)
     8c8:	6819      	ldr	r1, [r3, #0]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     8ca:	2202      	movs	r2, #2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     8cc:	7e0b      	ldrb	r3, [r1, #24]
     8ce:	4213      	tst	r3, r2
     8d0:	d0fc      	beq.n	8cc <nm_bus_ioctl+0xc4>
		;

	spi_select_slave(&master, &slave_inst, false);
     8d2:	2200      	movs	r2, #0
     8d4:	490e      	ldr	r1, [pc, #56]	; (910 <nm_bus_ioctl+0x108>)
     8d6:	480f      	ldr	r0, [pc, #60]	; (914 <nm_bus_ioctl+0x10c>)
     8d8:	4b0f      	ldr	r3, [pc, #60]	; (918 <nm_bus_ioctl+0x110>)
     8da:	4798      	blx	r3

	return M2M_SUCCESS;
     8dc:	2000      	movs	r0, #0
     8de:	e010      	b.n	902 <nm_bus_ioctl+0xfa>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
     8e0:	2006      	movs	r0, #6
     8e2:	4240      	negs	r0, r0
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
     8e4:	e00d      	b.n	902 <nm_bus_ioctl+0xfa>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
     8e6:	2286      	movs	r2, #134	; 0x86
     8e8:	0052      	lsls	r2, r2, #1
     8ea:	490c      	ldr	r1, [pc, #48]	; (91c <nm_bus_ioctl+0x114>)
     8ec:	480c      	ldr	r0, [pc, #48]	; (920 <nm_bus_ioctl+0x118>)
     8ee:	4b0d      	ldr	r3, [pc, #52]	; (924 <nm_bus_ioctl+0x11c>)
     8f0:	4798      	blx	r3
     8f2:	480d      	ldr	r0, [pc, #52]	; (928 <nm_bus_ioctl+0x120>)
     8f4:	4b0d      	ldr	r3, [pc, #52]	; (92c <nm_bus_ioctl+0x124>)
     8f6:	4798      	blx	r3
     8f8:	200d      	movs	r0, #13
     8fa:	4b0d      	ldr	r3, [pc, #52]	; (930 <nm_bus_ioctl+0x128>)
     8fc:	4798      	blx	r3
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
     8fe:	2001      	movs	r0, #1
     900:	4240      	negs	r0, r0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     902:	b003      	add	sp, #12
     904:	bc3c      	pop	{r2, r3, r4, r5}
     906:	4690      	mov	r8, r2
     908:	4699      	mov	r9, r3
     90a:	46a2      	mov	sl, r4
     90c:	46ab      	mov	fp, r5
     90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     910:	200001f8 	.word	0x200001f8
     914:	200001fc 	.word	0x200001fc
     918:	00003c21 	.word	0x00003c21
     91c:	0000721c 	.word	0x0000721c
     920:	000071f4 	.word	0x000071f4
     924:	00005ced 	.word	0x00005ced
     928:	00007208 	.word	0x00007208
     92c:	00005e0d 	.word	0x00005e0d
     930:	00005d21 	.word	0x00005d21

00000934 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     934:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     936:	4d0b      	ldr	r5, [pc, #44]	; (964 <nm_bus_deinit+0x30>)
     938:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     93a:	0020      	movs	r0, r4
     93c:	4b0a      	ldr	r3, [pc, #40]	; (968 <nm_bus_deinit+0x34>)
     93e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     940:	231f      	movs	r3, #31
     942:	4018      	ands	r0, r3
     944:	3b1e      	subs	r3, #30
     946:	4083      	lsls	r3, r0
     948:	2280      	movs	r2, #128	; 0x80
     94a:	4908      	ldr	r1, [pc, #32]	; (96c <nm_bus_deinit+0x38>)
     94c:	508b      	str	r3, [r1, r2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     94e:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     950:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     952:	2b00      	cmp	r3, #0
     954:	d1fc      	bne.n	950 <nm_bus_deinit+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     956:	6823      	ldr	r3, [r4, #0]
     958:	2202      	movs	r2, #2
     95a:	4393      	bics	r3, r2
     95c:	6023      	str	r3, [r4, #0]
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	

#endif /* CONF_WINC_USE_SPI */
	return result;
}
     95e:	2000      	movs	r0, #0
     960:	bd70      	pop	{r4, r5, r6, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	200001fc 	.word	0x200001fc
     968:	000039c9 	.word	0x000039c9
     96c:	e000e100 	.word	0xe000e100

00000970 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     970:	2a00      	cmp	r2, #0
     972:	d006      	beq.n	982 <m2m_memcpy+0x12>
     974:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     976:	780b      	ldrb	r3, [r1, #0]
     978:	7003      	strb	r3, [r0, #0]
		pDst++;
     97a:	3001      	adds	r0, #1
		pSrc++;
     97c:	3101      	adds	r1, #1
	}while(--sz);
     97e:	4290      	cmp	r0, r2
     980:	d1f9      	bne.n	976 <m2m_memcpy+0x6>
}
     982:	4770      	bx	lr

00000984 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     984:	2a00      	cmp	r2, #0
     986:	d004      	beq.n	992 <m2m_memset+0xe>
     988:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     98a:	7001      	strb	r1, [r0, #0]
		pBuf++;
     98c:	3001      	adds	r0, #1
	}while(--sz);
     98e:	4290      	cmp	r0, r2
     990:	d1fb      	bne.n	98a <m2m_memset+0x6>
}
     992:	4770      	bx	lr

00000994 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     994:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     996:	7802      	ldrb	r2, [r0, #0]
     998:	2a00      	cmp	r2, #0
     99a:	d007      	beq.n	9ac <m2m_strlen+0x18>
     99c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     99e:	3001      	adds	r0, #1
     9a0:	b280      	uxth	r0, r0
		pcStr++;
     9a2:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     9a4:	781a      	ldrb	r2, [r3, #0]
     9a6:	2a00      	cmp	r2, #0
     9a8:	d1f9      	bne.n	99e <m2m_strlen+0xa>
     9aa:	e000      	b.n	9ae <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
     9ac:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
     9ae:	4770      	bx	lr

000009b0 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
     9b0:	b510      	push	{r4, lr}
     9b2:	0003      	movs	r3, r0
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
     9b4:	2a00      	cmp	r2, #0
     9b6:	d01a      	beq.n	9ee <m2m_strncmp+0x3e>
	if (*pcS1 != *pcS2)
     9b8:	7800      	ldrb	r0, [r0, #0]
     9ba:	780c      	ldrb	r4, [r1, #0]
     9bc:	42a0      	cmp	r0, r4
     9be:	d10a      	bne.n	9d6 <m2m_strncmp+0x26>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
     9c0:	2800      	cmp	r0, #0
     9c2:	d017      	beq.n	9f4 <m2m_strncmp+0x44>
     9c4:	3a01      	subs	r2, #1
     9c6:	b292      	uxth	r2, r2
     9c8:	3201      	adds	r2, #1
     9ca:	189a      	adds	r2, r3, r2
     9cc:	e009      	b.n	9e2 <m2m_strncmp+0x32>
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
	if (*pcS1 != *pcS2)
     9ce:	7818      	ldrb	r0, [r3, #0]
     9d0:	780c      	ldrb	r4, [r1, #0]
     9d2:	42a0      	cmp	r0, r4
     9d4:	d003      	beq.n	9de <m2m_strncmp+0x2e>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
     9d6:	42a0      	cmp	r0, r4
     9d8:	d30b      	bcc.n	9f2 <m2m_strncmp+0x42>
     9da:	2001      	movs	r0, #1
     9dc:	e00a      	b.n	9f4 <m2m_strncmp+0x44>
	else if (*pcS1 == '\0')
     9de:	2800      	cmp	r0, #0
     9e0:	d008      	beq.n	9f4 <m2m_strncmp+0x44>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
     9e2:	3301      	adds	r3, #1
     9e4:	3101      	adds	r1, #1
     9e6:	4293      	cmp	r3, r2
     9e8:	d1f1      	bne.n	9ce <m2m_strncmp+0x1e>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
     9ea:	2000      	movs	r0, #0
     9ec:	e002      	b.n	9f4 <m2m_strncmp+0x44>
     9ee:	2000      	movs	r0, #0
     9f0:	e000      	b.n	9f4 <m2m_strncmp+0x44>

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
     9f2:	20ff      	movs	r0, #255	; 0xff
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
}
     9f4:	bd10      	pop	{r4, pc}
     9f6:	46c0      	nop			; (mov r8, r8)

000009f8 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
     9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9fa:	b083      	sub	sp, #12
     9fc:	0004      	movs	r4, r0
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
     9fe:	780e      	ldrb	r6, [r1, #0]
    if (!u8c)
     a00:	2e00      	cmp	r6, #0
     a02:	d017      	beq.n	a34 <m2m_strstr+0x3c>
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
     a04:	1c4b      	adds	r3, r1, #1
     a06:	9300      	str	r3, [sp, #0]
    if (!u8c)
        return (uint8 *) pcIn;	// Trivial empty string case

    u16StrLen = m2m_strlen(pcStr);
     a08:	0018      	movs	r0, r3
     a0a:	4b0b      	ldr	r3, [pc, #44]	; (a38 <m2m_strstr+0x40>)
     a0c:	4798      	blx	r3
     a0e:	9001      	str	r0, [sp, #4]
        do {
            u8Sc = *pcIn++;
            if (!u8Sc)
                return (uint8 *) 0;
        } while (u8Sc != u8c);
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
     a10:	4f0a      	ldr	r7, [pc, #40]	; (a3c <m2m_strstr+0x44>)
     a12:	e000      	b.n	a16 <m2m_strstr+0x1e>
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
     a14:	002c      	movs	r4, r5
    u16StrLen = m2m_strlen(pcStr);
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
     a16:	1c65      	adds	r5, r4, #1
     a18:	7823      	ldrb	r3, [r4, #0]
            if (!u8Sc)
     a1a:	2b00      	cmp	r3, #0
     a1c:	d009      	beq.n	a32 <m2m_strstr+0x3a>
                return (uint8 *) 0;
        } while (u8Sc != u8c);
     a1e:	429e      	cmp	r6, r3
     a20:	d1f8      	bne.n	a14 <m2m_strstr+0x1c>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
     a22:	9a01      	ldr	r2, [sp, #4]
     a24:	9900      	ldr	r1, [sp, #0]
     a26:	0028      	movs	r0, r5
     a28:	47b8      	blx	r7
     a2a:	2800      	cmp	r0, #0
     a2c:	d1f2      	bne.n	a14 <m2m_strstr+0x1c>
     a2e:	0020      	movs	r0, r4
     a30:	e000      	b.n	a34 <m2m_strstr+0x3c>
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
            if (!u8Sc)
                return (uint8 *) 0;
     a32:	2000      	movs	r0, #0
        } while (u8Sc != u8c);
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);

    return (uint8 *) (pcIn - 1);
}
     a34:	b003      	add	sp, #12
     a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a38:	00000995 	.word	0x00000995
     a3c:	000009b1 	.word	0x000009b1

00000a40 <m2m_memcmp>:

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
     a40:	b530      	push	{r4, r5, lr}
	uint32	i;
	sint8		s8Result = 0;
	for(i	 = 0 ; i < u32Size ; i++)
     a42:	2a00      	cmp	r2, #0
     a44:	d00e      	beq.n	a64 <m2m_memcmp+0x24>
	{
		if(pu8Buff1[i] != pu8Buff2[i])
     a46:	7804      	ldrb	r4, [r0, #0]
     a48:	780b      	ldrb	r3, [r1, #0]
     a4a:	429c      	cmp	r4, r3
     a4c:	d10c      	bne.n	a68 <m2m_memcmp+0x28>
     a4e:	2300      	movs	r3, #0
     a50:	e003      	b.n	a5a <m2m_memcmp+0x1a>
     a52:	5cc5      	ldrb	r5, [r0, r3]
     a54:	5ccc      	ldrb	r4, [r1, r3]
     a56:	42a5      	cmp	r5, r4
     a58:	d108      	bne.n	a6c <m2m_memcmp+0x2c>

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
	uint32	i;
	sint8		s8Result = 0;
	for(i	 = 0 ; i < u32Size ; i++)
     a5a:	3301      	adds	r3, #1
     a5c:	429a      	cmp	r2, r3
     a5e:	d1f8      	bne.n	a52 <m2m_memcmp+0x12>
}

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
	uint32	i;
	sint8		s8Result = 0;
     a60:	2000      	movs	r0, #0
     a62:	e004      	b.n	a6e <m2m_memcmp+0x2e>
     a64:	2000      	movs	r0, #0
     a66:	e002      	b.n	a6e <m2m_memcmp+0x2e>
	for(i	 = 0 ; i < u32Size ; i++)
	{
		if(pu8Buff1[i] != pu8Buff2[i])
		{
			s8Result = 1;
     a68:	2001      	movs	r0, #1
     a6a:	e000      	b.n	a6e <m2m_memcmp+0x2e>
     a6c:	2001      	movs	r0, #1
			break;
		}
	}
	return s8Result;
}
     a6e:	bd30      	pop	{r4, r5, pc}

00000a70 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
     a70:	4a02      	ldr	r2, [pc, #8]	; (a7c <isr+0xc>)
     a72:	7813      	ldrb	r3, [r2, #0]
     a74:	3301      	adds	r3, #1
     a76:	b2db      	uxtb	r3, r3
     a78:	7013      	strb	r3, [r2, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     a7a:	4770      	bx	lr
     a7c:	200000a0 	.word	0x200000a0

00000a80 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     a80:	4770      	bx	lr
     a82:	46c0      	nop			; (mov r8, r8)

00000a84 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
     a84:	b500      	push	{lr}
     a86:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     a88:	2001      	movs	r0, #1
     a8a:	4b08      	ldr	r3, [pc, #32]	; (aac <hif_set_rx_done+0x28>)
     a8c:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     a8e:	a901      	add	r1, sp, #4
     a90:	4807      	ldr	r0, [pc, #28]	; (ab0 <hif_set_rx_done+0x2c>)
     a92:	4b08      	ldr	r3, [pc, #32]	; (ab4 <hif_set_rx_done+0x30>)
     a94:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     a96:	2800      	cmp	r0, #0
     a98:	d106      	bne.n	aa8 <hif_set_rx_done+0x24>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     a9a:	2102      	movs	r1, #2
     a9c:	9b01      	ldr	r3, [sp, #4]
     a9e:	4319      	orrs	r1, r3
     aa0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     aa2:	4803      	ldr	r0, [pc, #12]	; (ab0 <hif_set_rx_done+0x2c>)
     aa4:	4b04      	ldr	r3, [pc, #16]	; (ab8 <hif_set_rx_done+0x34>)
     aa6:	4798      	blx	r3
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
     aa8:	b003      	add	sp, #12
     aaa:	bd00      	pop	{pc}
     aac:	000006e1 	.word	0x000006e1
     ab0:	00001070 	.word	0x00001070
     ab4:	00001e05 	.word	0x00001e05
     ab8:	00001e11 	.word	0x00001e11

00000abc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     abc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
     abe:	4b0e      	ldr	r3, [pc, #56]	; (af8 <hif_chip_wake+0x3c>)
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d111      	bne.n	aea <hif_chip_wake+0x2e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     ac6:	4b0d      	ldr	r3, [pc, #52]	; (afc <hif_chip_wake+0x40>)
     ac8:	781b      	ldrb	r3, [r3, #0]
     aca:	2b03      	cmp	r3, #3
     acc:	d003      	beq.n	ad6 <hif_chip_wake+0x1a>
     ace:	4b0b      	ldr	r3, [pc, #44]	; (afc <hif_chip_wake+0x40>)
     ad0:	781b      	ldrb	r3, [r3, #0]
     ad2:	2b04      	cmp	r3, #4
     ad4:	d109      	bne.n	aea <hif_chip_wake+0x2e>
		{
			ret = nm_clkless_wake();
     ad6:	4b0a      	ldr	r3, [pc, #40]	; (b00 <hif_chip_wake+0x44>)
     ad8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     ada:	2800      	cmp	r0, #0
     adc:	d10b      	bne.n	af6 <hif_chip_wake+0x3a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     ade:	4909      	ldr	r1, [pc, #36]	; (b04 <hif_chip_wake+0x48>)
     ae0:	4809      	ldr	r0, [pc, #36]	; (b08 <hif_chip_wake+0x4c>)
     ae2:	4b0a      	ldr	r3, [pc, #40]	; (b0c <hif_chip_wake+0x50>)
     ae4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     ae6:	2800      	cmp	r0, #0
     ae8:	d105      	bne.n	af6 <hif_chip_wake+0x3a>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     aea:	4a03      	ldr	r2, [pc, #12]	; (af8 <hif_chip_wake+0x3c>)
     aec:	7813      	ldrb	r3, [r2, #0]
     aee:	3301      	adds	r3, #1
     af0:	b2db      	uxtb	r3, r3
     af2:	7013      	strb	r3, [r2, #0]
     af4:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     af6:	bd10      	pop	{r4, pc}
     af8:	200000bc 	.word	0x200000bc
     afc:	200000ac 	.word	0x200000ac
     b00:	00001931 	.word	0x00001931
     b04:	00005678 	.word	0x00005678
     b08:	00001074 	.word	0x00001074
     b0c:	00001e11 	.word	0x00001e11

00000b10 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     b10:	b500      	push	{lr}
     b12:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
     b14:	4b17      	ldr	r3, [pc, #92]	; (b74 <hif_chip_sleep+0x64>)
     b16:	781b      	ldrb	r3, [r3, #0]
     b18:	2b00      	cmp	r3, #0
     b1a:	d004      	beq.n	b26 <hif_chip_sleep+0x16>
	{
		gu8ChipSleep--;
     b1c:	4a15      	ldr	r2, [pc, #84]	; (b74 <hif_chip_sleep+0x64>)
     b1e:	7813      	ldrb	r3, [r2, #0]
     b20:	3b01      	subs	r3, #1
     b22:	b2db      	uxtb	r3, r3
     b24:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
     b26:	4b13      	ldr	r3, [pc, #76]	; (b74 <hif_chip_sleep+0x64>)
     b28:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
     b2a:	2000      	movs	r0, #0
	if(gu8ChipSleep >= 1)
	{
		gu8ChipSleep--;
	}
	
	if(gu8ChipSleep == 0)
     b2c:	2b00      	cmp	r3, #0
     b2e:	d11e      	bne.n	b6e <hif_chip_sleep+0x5e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     b30:	4b11      	ldr	r3, [pc, #68]	; (b78 <hif_chip_sleep+0x68>)
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b03      	cmp	r3, #3
     b36:	d003      	beq.n	b40 <hif_chip_sleep+0x30>
     b38:	4b0f      	ldr	r3, [pc, #60]	; (b78 <hif_chip_sleep+0x68>)
     b3a:	781b      	ldrb	r3, [r3, #0]
     b3c:	2b04      	cmp	r3, #4
     b3e:	d116      	bne.n	b6e <hif_chip_sleep+0x5e>
		{
			uint32 reg = 0;
     b40:	2300      	movs	r3, #0
     b42:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     b44:	490d      	ldr	r1, [pc, #52]	; (b7c <hif_chip_sleep+0x6c>)
     b46:	480e      	ldr	r0, [pc, #56]	; (b80 <hif_chip_sleep+0x70>)
     b48:	4b0e      	ldr	r3, [pc, #56]	; (b84 <hif_chip_sleep+0x74>)
     b4a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     b4c:	2800      	cmp	r0, #0
     b4e:	d10e      	bne.n	b6e <hif_chip_sleep+0x5e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     b50:	a901      	add	r1, sp, #4
     b52:	3001      	adds	r0, #1
     b54:	4b0c      	ldr	r3, [pc, #48]	; (b88 <hif_chip_sleep+0x78>)
     b56:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     b58:	2800      	cmp	r0, #0
     b5a:	d108      	bne.n	b6e <hif_chip_sleep+0x5e>
			if(reg&0x2)
     b5c:	9901      	ldr	r1, [sp, #4]
     b5e:	078b      	lsls	r3, r1, #30
     b60:	d505      	bpl.n	b6e <hif_chip_sleep+0x5e>
			{
				reg &=~(1 << 1);
     b62:	2302      	movs	r3, #2
     b64:	4399      	bics	r1, r3
     b66:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
     b68:	3001      	adds	r0, #1
     b6a:	4b06      	ldr	r3, [pc, #24]	; (b84 <hif_chip_sleep+0x74>)
     b6c:	4798      	blx	r3
		{
		}
	}
ERR1:
	return ret;
}
     b6e:	b003      	add	sp, #12
     b70:	bd00      	pop	{pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	200000bc 	.word	0x200000bc
     b78:	200000ac 	.word	0x200000ac
     b7c:	00004321 	.word	0x00004321
     b80:	00001074 	.word	0x00001074
     b84:	00001e11 	.word	0x00001e11
     b88:	00001e05 	.word	0x00001e05

00000b8c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8e:	465f      	mov	r7, fp
     b90:	4656      	mov	r6, sl
     b92:	b4c0      	push	{r6, r7}
     b94:	b089      	sub	sp, #36	; 0x24
     b96:	4683      	mov	fp, r0
     b98:	468a      	mov	sl, r1
     b9a:	9201      	str	r2, [sp, #4]
     b9c:	9300      	str	r3, [sp, #0]
     b9e:	ab10      	add	r3, sp, #64	; 0x40
     ba0:	cb80      	ldmia	r3!, {r7}
     ba2:	881e      	ldrh	r6, [r3, #0]
     ba4:	ab12      	add	r3, sp, #72	; 0x48
     ba6:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     ba8:	227f      	movs	r2, #127	; 0x7f
     baa:	400a      	ands	r2, r1
     bac:	ab07      	add	r3, sp, #28
     bae:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     bb0:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     bb2:	2208      	movs	r2, #8
     bb4:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     bb6:	2f00      	cmp	r7, #0
     bb8:	d005      	beq.n	bc6 <hif_send+0x3a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     bba:	885a      	ldrh	r2, [r3, #2]
     bbc:	1992      	adds	r2, r2, r6
     bbe:	18aa      	adds	r2, r5, r2
     bc0:	b292      	uxth	r2, r2
     bc2:	805a      	strh	r2, [r3, #2]
     bc4:	e006      	b.n	bd4 <hif_send+0x48>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     bc6:	ab07      	add	r3, sp, #28
     bc8:	885a      	ldrh	r2, [r3, #2]
     bca:	9900      	ldr	r1, [sp, #0]
     bcc:	468c      	mov	ip, r1
     bce:	4462      	add	r2, ip
     bd0:	b292      	uxth	r2, r2
     bd2:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     bd4:	4b56      	ldr	r3, [pc, #344]	; (d30 <hif_send+0x1a4>)
     bd6:	4798      	blx	r3
     bd8:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     bda:	d000      	beq.n	bde <hif_send+0x52>
     bdc:	e08e      	b.n	cfc <hif_send+0x170>
	{
		volatile uint32 reg, dma_addr = 0;
     bde:	2300      	movs	r3, #0
     be0:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     be2:	aa02      	add	r2, sp, #8
     be4:	80d3      	strh	r3, [r2, #6]

		reg = 0UL;
     be6:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     be8:	9b04      	ldr	r3, [sp, #16]
     bea:	465a      	mov	r2, fp
     bec:	431a      	orrs	r2, r3
     bee:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     bf0:	9a04      	ldr	r2, [sp, #16]
     bf2:	4653      	mov	r3, sl
     bf4:	021b      	lsls	r3, r3, #8
     bf6:	4313      	orrs	r3, r2
     bf8:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     bfa:	ab07      	add	r3, sp, #28
     bfc:	885b      	ldrh	r3, [r3, #2]
     bfe:	9a04      	ldr	r2, [sp, #16]
     c00:	041b      	lsls	r3, r3, #16
     c02:	4313      	orrs	r3, r2
     c04:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     c06:	9904      	ldr	r1, [sp, #16]
     c08:	484a      	ldr	r0, [pc, #296]	; (d34 <hif_send+0x1a8>)
     c0a:	4b4b      	ldr	r3, [pc, #300]	; (d38 <hif_send+0x1ac>)
     c0c:	4798      	blx	r3
     c0e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     c10:	d000      	beq.n	c14 <hif_send+0x88>
     c12:	e086      	b.n	d22 <hif_send+0x196>


		reg = 0;
     c14:	2300      	movs	r3, #0
     c16:	9304      	str	r3, [sp, #16]
		reg |= (1<<1);
     c18:	9a04      	ldr	r2, [sp, #16]
     c1a:	3302      	adds	r3, #2
     c1c:	4313      	orrs	r3, r2
     c1e:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     c20:	9904      	ldr	r1, [sp, #16]
     c22:	4846      	ldr	r0, [pc, #280]	; (d3c <hif_send+0x1b0>)
     c24:	4b44      	ldr	r3, [pc, #272]	; (d38 <hif_send+0x1ac>)
     c26:	4798      	blx	r3
     c28:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     c2a:	d000      	beq.n	c2e <hif_send+0xa2>
     c2c:	e079      	b.n	d22 <hif_send+0x196>
		dma_addr = 0;
     c2e:	2200      	movs	r2, #0
     c30:	9205      	str	r2, [sp, #20]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     c32:	ab02      	add	r3, sp, #8
     c34:	80da      	strh	r2, [r3, #6]
     c36:	3306      	adds	r3, #6
     c38:	881b      	ldrh	r3, [r3, #0]
     c3a:	b29b      	uxth	r3, r3
     c3c:	4a40      	ldr	r2, [pc, #256]	; (d40 <hif_send+0x1b4>)
     c3e:	4293      	cmp	r3, r2
     c40:	d81c      	bhi.n	c7c <hif_send+0xf0>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     c42:	4c40      	ldr	r4, [pc, #256]	; (d44 <hif_send+0x1b8>)
     c44:	a904      	add	r1, sp, #16
     c46:	483d      	ldr	r0, [pc, #244]	; (d3c <hif_send+0x1b0>)
     c48:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     c4a:	2800      	cmp	r0, #0
     c4c:	d116      	bne.n	c7c <hif_send+0xf0>
			if (!(reg & 0x2))
     c4e:	9b04      	ldr	r3, [sp, #16]
     c50:	079b      	lsls	r3, r3, #30
     c52:	d408      	bmi.n	c66 <hif_send+0xda>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     c54:	a905      	add	r1, sp, #20
     c56:	483c      	ldr	r0, [pc, #240]	; (d48 <hif_send+0x1bc>)
     c58:	4b3a      	ldr	r3, [pc, #232]	; (d44 <hif_send+0x1b8>)
     c5a:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
     c5c:	2800      	cmp	r0, #0
     c5e:	d00d      	beq.n	c7c <hif_send+0xf0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
     c60:	2300      	movs	r3, #0
     c62:	9305      	str	r3, [sp, #20]
     c64:	e00a      	b.n	c7c <hif_send+0xf0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     c66:	ab02      	add	r3, sp, #8
     c68:	88da      	ldrh	r2, [r3, #6]
     c6a:	3201      	adds	r2, #1
     c6c:	b292      	uxth	r2, r2
     c6e:	80da      	strh	r2, [r3, #6]
     c70:	3306      	adds	r3, #6
     c72:	881b      	ldrh	r3, [r3, #0]
     c74:	b29b      	uxth	r3, r3
     c76:	4a32      	ldr	r2, [pc, #200]	; (d40 <hif_send+0x1b4>)
     c78:	4293      	cmp	r3, r2
     c7a:	d9e3      	bls.n	c44 <hif_send+0xb8>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     c7c:	9b05      	ldr	r3, [sp, #20]
     c7e:	2b00      	cmp	r3, #0
     c80:	d04d      	beq.n	d1e <hif_send+0x192>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     c82:	9b05      	ldr	r3, [sp, #20]
     c84:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     c86:	a907      	add	r1, sp, #28
     c88:	884b      	ldrh	r3, [r1, #2]
     c8a:	b29b      	uxth	r3, r3
     c8c:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     c8e:	9806      	ldr	r0, [sp, #24]
     c90:	2208      	movs	r2, #8
     c92:	4b2e      	ldr	r3, [pc, #184]	; (d4c <hif_send+0x1c0>)
     c94:	4798      	blx	r3
     c96:	1e04      	subs	r4, r0, #0
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
     c98:	d143      	bne.n	d22 <hif_send+0x196>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     c9a:	9b06      	ldr	r3, [sp, #24]
     c9c:	3308      	adds	r3, #8
     c9e:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     ca0:	9b01      	ldr	r3, [sp, #4]
     ca2:	2b00      	cmp	r3, #0
     ca4:	d00b      	beq.n	cbe <hif_send+0x132>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     ca6:	9806      	ldr	r0, [sp, #24]
     ca8:	9a00      	ldr	r2, [sp, #0]
     caa:	0019      	movs	r1, r3
     cac:	4b27      	ldr	r3, [pc, #156]	; (d4c <hif_send+0x1c0>)
     cae:	4798      	blx	r3
     cb0:	1e04      	subs	r4, r0, #0
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     cb2:	d136      	bne.n	d22 <hif_send+0x196>
				u32CurrAddr += u16CtrlBufSize;
     cb4:	9b06      	ldr	r3, [sp, #24]
     cb6:	9a00      	ldr	r2, [sp, #0]
     cb8:	4694      	mov	ip, r2
     cba:	4463      	add	r3, ip
     cbc:	9306      	str	r3, [sp, #24]
			}
			if(pu8DataBuf != NULL)
     cbe:	2f00      	cmp	r7, #0
     cc0:	d00e      	beq.n	ce0 <hif_send+0x154>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     cc2:	9b06      	ldr	r3, [sp, #24]
     cc4:	9a00      	ldr	r2, [sp, #0]
     cc6:	1aad      	subs	r5, r5, r2
     cc8:	18ed      	adds	r5, r5, r3
     cca:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     ccc:	9806      	ldr	r0, [sp, #24]
     cce:	0032      	movs	r2, r6
     cd0:	0039      	movs	r1, r7
     cd2:	4b1e      	ldr	r3, [pc, #120]	; (d4c <hif_send+0x1c0>)
     cd4:	4798      	blx	r3
     cd6:	1e04      	subs	r4, r0, #0
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     cd8:	d123      	bne.n	d22 <hif_send+0x196>
				u32CurrAddr += u16DataSize;
     cda:	9b06      	ldr	r3, [sp, #24]
     cdc:	18f3      	adds	r3, r6, r3
     cde:	9306      	str	r3, [sp, #24]
			}

			reg = dma_addr << 2;
     ce0:	9b05      	ldr	r3, [sp, #20]
     ce2:	009b      	lsls	r3, r3, #2
     ce4:	9304      	str	r3, [sp, #16]
			reg |= (1 << 1);
     ce6:	9a04      	ldr	r2, [sp, #16]
     ce8:	2302      	movs	r3, #2
     cea:	4313      	orrs	r3, r2
     cec:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     cee:	9904      	ldr	r1, [sp, #16]
     cf0:	4817      	ldr	r0, [pc, #92]	; (d50 <hif_send+0x1c4>)
     cf2:	4b11      	ldr	r3, [pc, #68]	; (d38 <hif_send+0x1ac>)
     cf4:	4798      	blx	r3
     cf6:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     cf8:	d113      	bne.n	d22 <hif_send+0x196>
     cfa:	e00c      	b.n	d16 <hif_send+0x18a>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     cfc:	22a0      	movs	r2, #160	; 0xa0
     cfe:	32ff      	adds	r2, #255	; 0xff
     d00:	4914      	ldr	r1, [pc, #80]	; (d54 <hif_send+0x1c8>)
     d02:	4815      	ldr	r0, [pc, #84]	; (d58 <hif_send+0x1cc>)
     d04:	4b15      	ldr	r3, [pc, #84]	; (d5c <hif_send+0x1d0>)
     d06:	4798      	blx	r3
     d08:	4815      	ldr	r0, [pc, #84]	; (d60 <hif_send+0x1d4>)
     d0a:	4b16      	ldr	r3, [pc, #88]	; (d64 <hif_send+0x1d8>)
     d0c:	4798      	blx	r3
     d0e:	200d      	movs	r0, #13
     d10:	4b15      	ldr	r3, [pc, #84]	; (d68 <hif_send+0x1dc>)
     d12:	4798      	blx	r3
		goto ERR1;
     d14:	e005      	b.n	d22 <hif_send+0x196>
	}
	ret = hif_chip_sleep();
     d16:	4b15      	ldr	r3, [pc, #84]	; (d6c <hif_send+0x1e0>)
     d18:	4798      	blx	r3
     d1a:	0004      	movs	r4, r0
     d1c:	e001      	b.n	d22 <hif_send+0x196>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
     d1e:	2403      	movs	r4, #3
     d20:	4264      	negs	r4, r4
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
     d22:	0020      	movs	r0, r4
     d24:	b009      	add	sp, #36	; 0x24
     d26:	bc0c      	pop	{r2, r3}
     d28:	4692      	mov	sl, r2
     d2a:	469b      	mov	fp, r3
     d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000abd 	.word	0x00000abd
     d34:	0000108c 	.word	0x0000108c
     d38:	00001e11 	.word	0x00001e11
     d3c:	00001078 	.word	0x00001078
     d40:	000003e7 	.word	0x000003e7
     d44:	00001e05 	.word	0x00001e05
     d48:	00150400 	.word	0x00150400
     d4c:	00001e85 	.word	0x00001e85
     d50:	0000106c 	.word	0x0000106c
     d54:	0000724c 	.word	0x0000724c
     d58:	000071f4 	.word	0x000071f4
     d5c:	00005ced 	.word	0x00005ced
     d60:	00007270 	.word	0x00007270
     d64:	00005e0d 	.word	0x00005e0d
     d68:	00005d21 	.word	0x00005d21
     d6c:	00000b11 	.word	0x00000b11

00000d70 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     d70:	b5f0      	push	{r4, r5, r6, r7, lr}
     d72:	464f      	mov	r7, r9
     d74:	4646      	mov	r6, r8
     d76:	b4c0      	push	{r6, r7}
     d78:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     d7a:	4ba8      	ldr	r3, [pc, #672]	; (101c <hif_handle_isr+0x2ac>)
     d7c:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     d7e:	4699      	mov	r9, r3
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     d80:	4ea7      	ldr	r6, [pc, #668]	; (1020 <hif_handle_isr+0x2b0>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     d82:	e13f      	b.n	1004 <hif_handle_isr+0x294>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     d84:	464b      	mov	r3, r9
     d86:	781b      	ldrb	r3, [r3, #0]
     d88:	3b01      	subs	r3, #1
     d8a:	b2db      	uxtb	r3, r3
     d8c:	464a      	mov	r2, r9
     d8e:	7013      	strb	r3, [r2, #0]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     d90:	47b0      	blx	r6
     d92:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     d94:	d000      	beq.n	d98 <hif_handle_isr+0x28>
     d96:	e117      	b.n	fc8 <hif_handle_isr+0x258>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     d98:	a903      	add	r1, sp, #12
     d9a:	48a2      	ldr	r0, [pc, #648]	; (1024 <hif_handle_isr+0x2b4>)
     d9c:	4ba2      	ldr	r3, [pc, #648]	; (1028 <hif_handle_isr+0x2b8>)
     d9e:	4798      	blx	r3
     da0:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS == ret)
     da2:	d000      	beq.n	da6 <hif_handle_isr+0x36>
     da4:	e104      	b.n	fb0 <hif_handle_isr+0x240>
		{
			if(reg & 0x1)	/* New interrupt has been received */
     da6:	9b03      	ldr	r3, [sp, #12]
     da8:	07db      	lsls	r3, r3, #31
     daa:	d400      	bmi.n	dae <hif_handle_isr+0x3e>
     dac:	e0f3      	b.n	f96 <hif_handle_isr+0x226>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
     dae:	2000      	movs	r0, #0
     db0:	4b9e      	ldr	r3, [pc, #632]	; (102c <hif_handle_isr+0x2bc>)
     db2:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
     db4:	2301      	movs	r3, #1
     db6:	9903      	ldr	r1, [sp, #12]
     db8:	4399      	bics	r1, r3
     dba:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     dbc:	4899      	ldr	r0, [pc, #612]	; (1024 <hif_handle_isr+0x2b4>)
     dbe:	4b9c      	ldr	r3, [pc, #624]	; (1030 <hif_handle_isr+0x2c0>)
     dc0:	4798      	blx	r3
     dc2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     dc4:	d000      	beq.n	dc8 <hif_handle_isr+0x58>
     dc6:	e111      	b.n	fec <hif_handle_isr+0x27c>
				gu8HifSizeDone = 0;
     dc8:	2200      	movs	r2, #0
     dca:	4b9a      	ldr	r3, [pc, #616]	; (1034 <hif_handle_isr+0x2c4>)
     dcc:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
     dce:	9b03      	ldr	r3, [sp, #12]
     dd0:	049b      	lsls	r3, r3, #18
     dd2:	0d1f      	lsrs	r7, r3, #20
				if (size > 0) {
     dd4:	d100      	bne.n	dd8 <hif_handle_isr+0x68>
     dd6:	e0d0      	b.n	f7a <hif_handle_isr+0x20a>
					uint32 address = 0;
     dd8:	2300      	movs	r3, #0
     dda:	9305      	str	r3, [sp, #20]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     ddc:	a905      	add	r1, sp, #20
     dde:	4896      	ldr	r0, [pc, #600]	; (1038 <hif_handle_isr+0x2c8>)
     de0:	4b91      	ldr	r3, [pc, #580]	; (1028 <hif_handle_isr+0x2b8>)
     de2:	4798      	blx	r3
     de4:	1e04      	subs	r4, r0, #0
					if(M2M_SUCCESS != ret)
     de6:	d00f      	beq.n	e08 <hif_handle_isr+0x98>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     de8:	22e7      	movs	r2, #231	; 0xe7
     dea:	0052      	lsls	r2, r2, #1
     dec:	4993      	ldr	r1, [pc, #588]	; (103c <hif_handle_isr+0x2cc>)
     dee:	4894      	ldr	r0, [pc, #592]	; (1040 <hif_handle_isr+0x2d0>)
     df0:	4b94      	ldr	r3, [pc, #592]	; (1044 <hif_handle_isr+0x2d4>)
     df2:	4798      	blx	r3
     df4:	4894      	ldr	r0, [pc, #592]	; (1048 <hif_handle_isr+0x2d8>)
     df6:	4b95      	ldr	r3, [pc, #596]	; (104c <hif_handle_isr+0x2dc>)
     df8:	4798      	blx	r3
     dfa:	200d      	movs	r0, #13
     dfc:	4b94      	ldr	r3, [pc, #592]	; (1050 <hif_handle_isr+0x2e0>)
     dfe:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     e00:	2001      	movs	r0, #1
     e02:	4b8a      	ldr	r3, [pc, #552]	; (102c <hif_handle_isr+0x2bc>)
     e04:	4798      	blx	r3
     e06:	e0ef      	b.n	fe8 <hif_handle_isr+0x278>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     e08:	ad04      	add	r5, sp, #16
     e0a:	2204      	movs	r2, #4
     e0c:	0029      	movs	r1, r5
     e0e:	9805      	ldr	r0, [sp, #20]
     e10:	4b90      	ldr	r3, [pc, #576]	; (1054 <hif_handle_isr+0x2e4>)
     e12:	4798      	blx	r3
     e14:	0004      	movs	r4, r0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     e16:	886b      	ldrh	r3, [r5, #2]
     e18:	b29b      	uxth	r3, r3
     e1a:	806b      	strh	r3, [r5, #2]
					if(M2M_SUCCESS != ret)
     e1c:	2800      	cmp	r0, #0
     e1e:	d00f      	beq.n	e40 <hif_handle_isr+0xd0>
					{
						M2M_ERR("(hif) address bus fail\n");
     e20:	22eb      	movs	r2, #235	; 0xeb
     e22:	0052      	lsls	r2, r2, #1
     e24:	4985      	ldr	r1, [pc, #532]	; (103c <hif_handle_isr+0x2cc>)
     e26:	4886      	ldr	r0, [pc, #536]	; (1040 <hif_handle_isr+0x2d0>)
     e28:	4b86      	ldr	r3, [pc, #536]	; (1044 <hif_handle_isr+0x2d4>)
     e2a:	4798      	blx	r3
     e2c:	488a      	ldr	r0, [pc, #552]	; (1058 <hif_handle_isr+0x2e8>)
     e2e:	4b87      	ldr	r3, [pc, #540]	; (104c <hif_handle_isr+0x2dc>)
     e30:	4798      	blx	r3
     e32:	200d      	movs	r0, #13
     e34:	4b86      	ldr	r3, [pc, #536]	; (1050 <hif_handle_isr+0x2e0>)
     e36:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     e38:	2001      	movs	r0, #1
     e3a:	4b7c      	ldr	r3, [pc, #496]	; (102c <hif_handle_isr+0x2bc>)
     e3c:	4798      	blx	r3
     e3e:	e0d3      	b.n	fe8 <hif_handle_isr+0x278>
						goto ERR1;
					}
					if(strHif.u16Length != size)
     e40:	ab04      	add	r3, sp, #16
     e42:	885b      	ldrh	r3, [r3, #2]
     e44:	b29b      	uxth	r3, r3
     e46:	429f      	cmp	r7, r3
     e48:	d01d      	beq.n	e86 <hif_handle_isr+0x116>
					{
						if((size - strHif.u16Length) > 4)
     e4a:	ab04      	add	r3, sp, #16
     e4c:	885b      	ldrh	r3, [r3, #2]
     e4e:	1afb      	subs	r3, r7, r3
     e50:	2b04      	cmp	r3, #4
     e52:	dd18      	ble.n	e86 <hif_handle_isr+0x116>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     e54:	22e0      	movs	r2, #224	; 0xe0
     e56:	32ff      	adds	r2, #255	; 0xff
     e58:	4978      	ldr	r1, [pc, #480]	; (103c <hif_handle_isr+0x2cc>)
     e5a:	4879      	ldr	r0, [pc, #484]	; (1040 <hif_handle_isr+0x2d0>)
     e5c:	4c79      	ldr	r4, [pc, #484]	; (1044 <hif_handle_isr+0x2d4>)
     e5e:	47a0      	blx	r4
     e60:	a904      	add	r1, sp, #16
     e62:	884a      	ldrh	r2, [r1, #2]
     e64:	b292      	uxth	r2, r2
     e66:	780b      	ldrb	r3, [r1, #0]
     e68:	b2db      	uxtb	r3, r3
     e6a:	7849      	ldrb	r1, [r1, #1]
     e6c:	9100      	str	r1, [sp, #0]
     e6e:	0039      	movs	r1, r7
     e70:	487a      	ldr	r0, [pc, #488]	; (105c <hif_handle_isr+0x2ec>)
     e72:	47a0      	blx	r4
     e74:	200d      	movs	r0, #13
     e76:	4b76      	ldr	r3, [pc, #472]	; (1050 <hif_handle_isr+0x2e0>)
     e78:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
     e7a:	2001      	movs	r0, #1
     e7c:	4b6b      	ldr	r3, [pc, #428]	; (102c <hif_handle_isr+0x2bc>)
     e7e:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
     e80:	2406      	movs	r4, #6
     e82:	4264      	negs	r4, r4
     e84:	e0b0      	b.n	fe8 <hif_handle_isr+0x278>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     e86:	ab04      	add	r3, sp, #16
     e88:	781b      	ldrb	r3, [r3, #0]
     e8a:	2b01      	cmp	r3, #1
     e8c:	d10d      	bne.n	eaa <hif_handle_isr+0x13a>
					{
						if(pfWifiCb)
     e8e:	4b74      	ldr	r3, [pc, #464]	; (1060 <hif_handle_isr+0x2f0>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	2b00      	cmp	r3, #0
     e94:	d05f      	beq.n	f56 <hif_handle_isr+0x1e6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     e96:	aa04      	add	r2, sp, #16
     e98:	7850      	ldrb	r0, [r2, #1]
     e9a:	b2c0      	uxtb	r0, r0
     e9c:	8851      	ldrh	r1, [r2, #2]
     e9e:	9a05      	ldr	r2, [sp, #20]
     ea0:	3208      	adds	r2, #8
     ea2:	3908      	subs	r1, #8
     ea4:	b289      	uxth	r1, r1
     ea6:	4798      	blx	r3
     ea8:	e055      	b.n	f56 <hif_handle_isr+0x1e6>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     eaa:	ab04      	add	r3, sp, #16
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	2b02      	cmp	r3, #2
     eb0:	d10d      	bne.n	ece <hif_handle_isr+0x15e>
					{
						if(pfIpCb)
     eb2:	4b6c      	ldr	r3, [pc, #432]	; (1064 <hif_handle_isr+0x2f4>)
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d04d      	beq.n	f56 <hif_handle_isr+0x1e6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     eba:	aa04      	add	r2, sp, #16
     ebc:	7850      	ldrb	r0, [r2, #1]
     ebe:	b2c0      	uxtb	r0, r0
     ec0:	8851      	ldrh	r1, [r2, #2]
     ec2:	9a05      	ldr	r2, [sp, #20]
     ec4:	3208      	adds	r2, #8
     ec6:	3908      	subs	r1, #8
     ec8:	b289      	uxth	r1, r1
     eca:	4798      	blx	r3
     ecc:	e043      	b.n	f56 <hif_handle_isr+0x1e6>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     ece:	ab04      	add	r3, sp, #16
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2b04      	cmp	r3, #4
     ed4:	d10d      	bne.n	ef2 <hif_handle_isr+0x182>
					{
						if(pfOtaCb)
     ed6:	4b64      	ldr	r3, [pc, #400]	; (1068 <hif_handle_isr+0x2f8>)
     ed8:	681b      	ldr	r3, [r3, #0]
     eda:	2b00      	cmp	r3, #0
     edc:	d03b      	beq.n	f56 <hif_handle_isr+0x1e6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     ede:	aa04      	add	r2, sp, #16
     ee0:	7850      	ldrb	r0, [r2, #1]
     ee2:	b2c0      	uxtb	r0, r0
     ee4:	8851      	ldrh	r1, [r2, #2]
     ee6:	9a05      	ldr	r2, [sp, #20]
     ee8:	3208      	adds	r2, #8
     eea:	3908      	subs	r1, #8
     eec:	b289      	uxth	r1, r1
     eee:	4798      	blx	r3
     ef0:	e031      	b.n	f56 <hif_handle_isr+0x1e6>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     ef2:	ab04      	add	r3, sp, #16
     ef4:	781b      	ldrb	r3, [r3, #0]
     ef6:	2b06      	cmp	r3, #6
     ef8:	d10d      	bne.n	f16 <hif_handle_isr+0x1a6>
					{
						if(pfCryptoCb)
     efa:	4b5c      	ldr	r3, [pc, #368]	; (106c <hif_handle_isr+0x2fc>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	2b00      	cmp	r3, #0
     f00:	d029      	beq.n	f56 <hif_handle_isr+0x1e6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     f02:	aa04      	add	r2, sp, #16
     f04:	7850      	ldrb	r0, [r2, #1]
     f06:	b2c0      	uxtb	r0, r0
     f08:	8851      	ldrh	r1, [r2, #2]
     f0a:	9a05      	ldr	r2, [sp, #20]
     f0c:	3208      	adds	r2, #8
     f0e:	3908      	subs	r1, #8
     f10:	b289      	uxth	r1, r1
     f12:	4798      	blx	r3
     f14:	e01f      	b.n	f56 <hif_handle_isr+0x1e6>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     f16:	ab04      	add	r3, sp, #16
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	2b07      	cmp	r3, #7
     f1c:	d10d      	bne.n	f3a <hif_handle_isr+0x1ca>
					{
						if(pfSigmaCb)
     f1e:	4b54      	ldr	r3, [pc, #336]	; (1070 <hif_handle_isr+0x300>)
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	2b00      	cmp	r3, #0
     f24:	d017      	beq.n	f56 <hif_handle_isr+0x1e6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     f26:	aa04      	add	r2, sp, #16
     f28:	7850      	ldrb	r0, [r2, #1]
     f2a:	b2c0      	uxtb	r0, r0
     f2c:	8851      	ldrh	r1, [r2, #2]
     f2e:	9a05      	ldr	r2, [sp, #20]
     f30:	3208      	adds	r2, #8
     f32:	3908      	subs	r1, #8
     f34:	b289      	uxth	r1, r1
     f36:	4798      	blx	r3
     f38:	e00d      	b.n	f56 <hif_handle_isr+0x1e6>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
     f3a:	4a4e      	ldr	r2, [pc, #312]	; (1074 <hif_handle_isr+0x304>)
     f3c:	493f      	ldr	r1, [pc, #252]	; (103c <hif_handle_isr+0x2cc>)
     f3e:	4840      	ldr	r0, [pc, #256]	; (1040 <hif_handle_isr+0x2d0>)
     f40:	4b40      	ldr	r3, [pc, #256]	; (1044 <hif_handle_isr+0x2d4>)
     f42:	4798      	blx	r3
     f44:	484c      	ldr	r0, [pc, #304]	; (1078 <hif_handle_isr+0x308>)
     f46:	4b41      	ldr	r3, [pc, #260]	; (104c <hif_handle_isr+0x2dc>)
     f48:	4798      	blx	r3
     f4a:	200d      	movs	r0, #13
     f4c:	4b40      	ldr	r3, [pc, #256]	; (1050 <hif_handle_isr+0x2e0>)
     f4e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     f50:	2406      	movs	r4, #6
     f52:	4264      	negs	r4, r4
     f54:	e048      	b.n	fe8 <hif_handle_isr+0x278>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
     f56:	4b37      	ldr	r3, [pc, #220]	; (1034 <hif_handle_isr+0x2c4>)
     f58:	781b      	ldrb	r3, [r3, #0]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d141      	bne.n	fe2 <hif_handle_isr+0x272>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
     f5e:	4a47      	ldr	r2, [pc, #284]	; (107c <hif_handle_isr+0x30c>)
     f60:	4936      	ldr	r1, [pc, #216]	; (103c <hif_handle_isr+0x2cc>)
     f62:	4837      	ldr	r0, [pc, #220]	; (1040 <hif_handle_isr+0x2d0>)
     f64:	4b37      	ldr	r3, [pc, #220]	; (1044 <hif_handle_isr+0x2d4>)
     f66:	4798      	blx	r3
     f68:	4845      	ldr	r0, [pc, #276]	; (1080 <hif_handle_isr+0x310>)
     f6a:	4b38      	ldr	r3, [pc, #224]	; (104c <hif_handle_isr+0x2dc>)
     f6c:	4798      	blx	r3
     f6e:	200d      	movs	r0, #13
     f70:	4b37      	ldr	r3, [pc, #220]	; (1050 <hif_handle_isr+0x2e0>)
     f72:	4798      	blx	r3
						ret = hif_set_rx_done();
     f74:	4b43      	ldr	r3, [pc, #268]	; (1084 <hif_handle_isr+0x314>)
     f76:	4798      	blx	r3
     f78:	e033      	b.n	fe2 <hif_handle_isr+0x272>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
     f7a:	4a43      	ldr	r2, [pc, #268]	; (1088 <hif_handle_isr+0x318>)
     f7c:	492f      	ldr	r1, [pc, #188]	; (103c <hif_handle_isr+0x2cc>)
     f7e:	4830      	ldr	r0, [pc, #192]	; (1040 <hif_handle_isr+0x2d0>)
     f80:	4b30      	ldr	r3, [pc, #192]	; (1044 <hif_handle_isr+0x2d4>)
     f82:	4798      	blx	r3
     f84:	4841      	ldr	r0, [pc, #260]	; (108c <hif_handle_isr+0x31c>)
     f86:	4b31      	ldr	r3, [pc, #196]	; (104c <hif_handle_isr+0x2dc>)
     f88:	4798      	blx	r3
     f8a:	200d      	movs	r0, #13
     f8c:	4b30      	ldr	r3, [pc, #192]	; (1050 <hif_handle_isr+0x2e0>)
     f8e:	4798      	blx	r3
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
     f90:	2402      	movs	r4, #2
     f92:	4264      	negs	r4, r4
     f94:	e02a      	b.n	fec <hif_handle_isr+0x27c>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
     f96:	2286      	movs	r2, #134	; 0x86
     f98:	0092      	lsls	r2, r2, #2
     f9a:	4928      	ldr	r1, [pc, #160]	; (103c <hif_handle_isr+0x2cc>)
     f9c:	4828      	ldr	r0, [pc, #160]	; (1040 <hif_handle_isr+0x2d0>)
     f9e:	4c29      	ldr	r4, [pc, #164]	; (1044 <hif_handle_isr+0x2d4>)
     fa0:	47a0      	blx	r4
     fa2:	9903      	ldr	r1, [sp, #12]
     fa4:	483a      	ldr	r0, [pc, #232]	; (1090 <hif_handle_isr+0x320>)
     fa6:	47a0      	blx	r4
     fa8:	200d      	movs	r0, #13
     faa:	4b29      	ldr	r3, [pc, #164]	; (1050 <hif_handle_isr+0x2e0>)
     fac:	4798      	blx	r3
     fae:	e018      	b.n	fe2 <hif_handle_isr+0x272>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
     fb0:	4a38      	ldr	r2, [pc, #224]	; (1094 <hif_handle_isr+0x324>)
     fb2:	4922      	ldr	r1, [pc, #136]	; (103c <hif_handle_isr+0x2cc>)
     fb4:	4822      	ldr	r0, [pc, #136]	; (1040 <hif_handle_isr+0x2d0>)
     fb6:	4b23      	ldr	r3, [pc, #140]	; (1044 <hif_handle_isr+0x2d4>)
     fb8:	4798      	blx	r3
     fba:	4837      	ldr	r0, [pc, #220]	; (1098 <hif_handle_isr+0x328>)
     fbc:	4b23      	ldr	r3, [pc, #140]	; (104c <hif_handle_isr+0x2dc>)
     fbe:	4798      	blx	r3
     fc0:	200d      	movs	r0, #13
     fc2:	4b23      	ldr	r3, [pc, #140]	; (1050 <hif_handle_isr+0x2e0>)
     fc4:	4798      	blx	r3
     fc6:	e011      	b.n	fec <hif_handle_isr+0x27c>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
     fc8:	2289      	movs	r2, #137	; 0x89
     fca:	0092      	lsls	r2, r2, #2
     fcc:	491b      	ldr	r1, [pc, #108]	; (103c <hif_handle_isr+0x2cc>)
     fce:	481c      	ldr	r0, [pc, #112]	; (1040 <hif_handle_isr+0x2d0>)
     fd0:	4b1c      	ldr	r3, [pc, #112]	; (1044 <hif_handle_isr+0x2d4>)
     fd2:	4798      	blx	r3
     fd4:	4831      	ldr	r0, [pc, #196]	; (109c <hif_handle_isr+0x32c>)
     fd6:	4b1d      	ldr	r3, [pc, #116]	; (104c <hif_handle_isr+0x2dc>)
     fd8:	4798      	blx	r3
     fda:	200d      	movs	r0, #13
     fdc:	4b1c      	ldr	r3, [pc, #112]	; (1050 <hif_handle_isr+0x2e0>)
     fde:	4798      	blx	r3
     fe0:	e004      	b.n	fec <hif_handle_isr+0x27c>
		goto ERR1;
	}

	ret = hif_chip_sleep();
     fe2:	4b2f      	ldr	r3, [pc, #188]	; (10a0 <hif_handle_isr+0x330>)
     fe4:	4798      	blx	r3
     fe6:	0004      	movs	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
     fe8:	2c00      	cmp	r4, #0
     fea:	d00b      	beq.n	1004 <hif_handle_isr+0x294>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     fec:	4a2d      	ldr	r2, [pc, #180]	; (10a4 <hif_handle_isr+0x334>)
     fee:	492e      	ldr	r1, [pc, #184]	; (10a8 <hif_handle_isr+0x338>)
     ff0:	4813      	ldr	r0, [pc, #76]	; (1040 <hif_handle_isr+0x2d0>)
     ff2:	4d14      	ldr	r5, [pc, #80]	; (1044 <hif_handle_isr+0x2d4>)
     ff4:	47a8      	blx	r5
     ff6:	0021      	movs	r1, r4
     ff8:	482c      	ldr	r0, [pc, #176]	; (10ac <hif_handle_isr+0x33c>)
     ffa:	47a8      	blx	r5
     ffc:	200d      	movs	r0, #13
     ffe:	4b14      	ldr	r3, [pc, #80]	; (1050 <hif_handle_isr+0x2e0>)
    1000:	4798      	blx	r3
			}
		}
    1002:	e6c5      	b.n	d90 <hif_handle_isr+0x20>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    1004:	4643      	mov	r3, r8
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	2b00      	cmp	r3, #0
    100a:	d000      	beq.n	100e <hif_handle_isr+0x29e>
    100c:	e6ba      	b.n	d84 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
    100e:	2000      	movs	r0, #0
    1010:	b007      	add	sp, #28
    1012:	bc0c      	pop	{r2, r3}
    1014:	4690      	mov	r8, r2
    1016:	4699      	mov	r9, r3
    1018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	200000a0 	.word	0x200000a0
    1020:	00000abd 	.word	0x00000abd
    1024:	00001070 	.word	0x00001070
    1028:	00001e05 	.word	0x00001e05
    102c:	000006e1 	.word	0x000006e1
    1030:	00001e11 	.word	0x00001e11
    1034:	200000b4 	.word	0x200000b4
    1038:	00001084 	.word	0x00001084
    103c:	00007268 	.word	0x00007268
    1040:	000071f4 	.word	0x000071f4
    1044:	00005ced 	.word	0x00005ced
    1048:	0000728c 	.word	0x0000728c
    104c:	00005e0d 	.word	0x00005e0d
    1050:	00005d21 	.word	0x00005d21
    1054:	00001e1d 	.word	0x00001e1d
    1058:	000072b0 	.word	0x000072b0
    105c:	000072c8 	.word	0x000072c8
    1060:	2000009c 	.word	0x2000009c
    1064:	200000b0 	.word	0x200000b0
    1068:	200000b8 	.word	0x200000b8
    106c:	20000098 	.word	0x20000098
    1070:	200000a8 	.word	0x200000a8
    1074:	00000202 	.word	0x00000202
    1078:	00007308 	.word	0x00007308
    107c:	00000209 	.word	0x00000209
    1080:	00007320 	.word	0x00007320
    1084:	00000a85 	.word	0x00000a85
    1088:	00000211 	.word	0x00000211
    108c:	00007344 	.word	0x00007344
    1090:	00007358 	.word	0x00007358
    1094:	0000021e 	.word	0x0000021e
    1098:	00007374 	.word	0x00007374
    109c:	00007398 	.word	0x00007398
    10a0:	00000b11 	.word	0x00000b11
    10a4:	00000243 	.word	0x00000243
    10a8:	00007258 	.word	0x00007258
    10ac:	000073b8 	.word	0x000073b8

000010b0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    10b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10b2:	464f      	mov	r7, r9
    10b4:	4646      	mov	r6, r8
    10b6:	b4c0      	push	{r6, r7}
    10b8:	b083      	sub	sp, #12
    10ba:	0006      	movs	r6, r0
    10bc:	000c      	movs	r4, r1
    10be:	0015      	movs	r5, r2
    10c0:	001f      	movs	r7, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    10c2:	2800      	cmp	r0, #0
    10c4:	d003      	beq.n	10ce <hif_receive+0x1e>
    10c6:	2900      	cmp	r1, #0
    10c8:	d001      	beq.n	10ce <hif_receive+0x1e>
    10ca:	2a00      	cmp	r2, #0
    10cc:	d115      	bne.n	10fa <hif_receive+0x4a>
	{
		if(isDone)
    10ce:	2f00      	cmp	r7, #0
    10d0:	d005      	beq.n	10de <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
    10d2:	2201      	movs	r2, #1
    10d4:	4b31      	ldr	r3, [pc, #196]	; (119c <hif_receive+0xec>)
    10d6:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    10d8:	4b31      	ldr	r3, [pc, #196]	; (11a0 <hif_receive+0xf0>)
    10da:	4798      	blx	r3
    10dc:	e059      	b.n	1192 <hif_receive+0xe2>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
    10de:	4a31      	ldr	r2, [pc, #196]	; (11a4 <hif_receive+0xf4>)
    10e0:	4931      	ldr	r1, [pc, #196]	; (11a8 <hif_receive+0xf8>)
    10e2:	4832      	ldr	r0, [pc, #200]	; (11ac <hif_receive+0xfc>)
    10e4:	4b32      	ldr	r3, [pc, #200]	; (11b0 <hif_receive+0x100>)
    10e6:	4798      	blx	r3
    10e8:	4832      	ldr	r0, [pc, #200]	; (11b4 <hif_receive+0x104>)
    10ea:	4b33      	ldr	r3, [pc, #204]	; (11b8 <hif_receive+0x108>)
    10ec:	4798      	blx	r3
    10ee:	200d      	movs	r0, #13
    10f0:	4b32      	ldr	r3, [pc, #200]	; (11bc <hif_receive+0x10c>)
    10f2:	4798      	blx	r3
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    10f4:	200c      	movs	r0, #12
    10f6:	4240      	negs	r0, r0
    10f8:	e04b      	b.n	1192 <hif_receive+0xe2>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    10fa:	4669      	mov	r1, sp
    10fc:	4830      	ldr	r0, [pc, #192]	; (11c0 <hif_receive+0x110>)
    10fe:	4b31      	ldr	r3, [pc, #196]	; (11c4 <hif_receive+0x114>)
    1100:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1102:	2800      	cmp	r0, #0
    1104:	d145      	bne.n	1192 <hif_receive+0xe2>


	size = (uint16)((reg >> 2) & 0xfff);
    1106:	9b00      	ldr	r3, [sp, #0]
    1108:	4698      	mov	r8, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    110a:	a901      	add	r1, sp, #4
    110c:	482e      	ldr	r0, [pc, #184]	; (11c8 <hif_receive+0x118>)
    110e:	4b2d      	ldr	r3, [pc, #180]	; (11c4 <hif_receive+0x114>)
    1110:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1112:	2800      	cmp	r0, #0
    1114:	d13d      	bne.n	1192 <hif_receive+0xe2>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
    1116:	4643      	mov	r3, r8
    1118:	049b      	lsls	r3, r3, #18
    111a:	0d1b      	lsrs	r3, r3, #20
    111c:	4698      	mov	r8, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
    111e:	429d      	cmp	r5, r3
    1120:	d90e      	bls.n	1140 <hif_receive+0x90>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    1122:	4a2a      	ldr	r2, [pc, #168]	; (11cc <hif_receive+0x11c>)
    1124:	4920      	ldr	r1, [pc, #128]	; (11a8 <hif_receive+0xf8>)
    1126:	4821      	ldr	r0, [pc, #132]	; (11ac <hif_receive+0xfc>)
    1128:	4c21      	ldr	r4, [pc, #132]	; (11b0 <hif_receive+0x100>)
    112a:	47a0      	blx	r4
    112c:	4642      	mov	r2, r8
    112e:	0029      	movs	r1, r5
    1130:	4827      	ldr	r0, [pc, #156]	; (11d0 <hif_receive+0x120>)
    1132:	47a0      	blx	r4
    1134:	200d      	movs	r0, #13
    1136:	4b21      	ldr	r3, [pc, #132]	; (11bc <hif_receive+0x10c>)
    1138:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
    113a:	200c      	movs	r0, #12
    113c:	4240      	negs	r0, r0
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
    113e:	e028      	b.n	1192 <hif_receive+0xe2>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    1140:	9b01      	ldr	r3, [sp, #4]
    1142:	429e      	cmp	r6, r3
    1144:	d304      	bcc.n	1150 <hif_receive+0xa0>
    1146:	1972      	adds	r2, r6, r5
    1148:	4691      	mov	r9, r2
    114a:	4443      	add	r3, r8
    114c:	429a      	cmp	r2, r3
    114e:	d90e      	bls.n	116e <hif_receive+0xbe>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1150:	22a0      	movs	r2, #160	; 0xa0
    1152:	0092      	lsls	r2, r2, #2
    1154:	4914      	ldr	r1, [pc, #80]	; (11a8 <hif_receive+0xf8>)
    1156:	4815      	ldr	r0, [pc, #84]	; (11ac <hif_receive+0xfc>)
    1158:	4b15      	ldr	r3, [pc, #84]	; (11b0 <hif_receive+0x100>)
    115a:	4798      	blx	r3
    115c:	481d      	ldr	r0, [pc, #116]	; (11d4 <hif_receive+0x124>)
    115e:	4b16      	ldr	r3, [pc, #88]	; (11b8 <hif_receive+0x108>)
    1160:	4798      	blx	r3
    1162:	200d      	movs	r0, #13
    1164:	4b15      	ldr	r3, [pc, #84]	; (11bc <hif_receive+0x10c>)
    1166:	4798      	blx	r3
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
    1168:	200c      	movs	r0, #12
    116a:	4240      	negs	r0, r0
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    116c:	e011      	b.n	1192 <hif_receive+0xe2>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    116e:	002a      	movs	r2, r5
    1170:	0021      	movs	r1, r4
    1172:	0030      	movs	r0, r6
    1174:	4b18      	ldr	r3, [pc, #96]	; (11d8 <hif_receive+0x128>)
    1176:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1178:	2800      	cmp	r0, #0
    117a:	d10a      	bne.n	1192 <hif_receive+0xe2>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    117c:	9b01      	ldr	r3, [sp, #4]
    117e:	4443      	add	r3, r8
    1180:	4599      	cmp	r9, r3
    1182:	d001      	beq.n	1188 <hif_receive+0xd8>
    1184:	2f00      	cmp	r7, #0
    1186:	d004      	beq.n	1192 <hif_receive+0xe2>
	{
		gu8HifSizeDone = 1;
    1188:	2201      	movs	r2, #1
    118a:	4b04      	ldr	r3, [pc, #16]	; (119c <hif_receive+0xec>)
    118c:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    118e:	4b04      	ldr	r3, [pc, #16]	; (11a0 <hif_receive+0xf0>)
    1190:	4798      	blx	r3



ERR1:
	return ret;
}
    1192:	b003      	add	sp, #12
    1194:	bc0c      	pop	{r2, r3}
    1196:	4690      	mov	r8, r2
    1198:	4699      	mov	r9, r3
    119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119c:	200000b4 	.word	0x200000b4
    11a0:	00000a85 	.word	0x00000a85
    11a4:	00000269 	.word	0x00000269
    11a8:	0000749c 	.word	0x0000749c
    11ac:	000071f4 	.word	0x000071f4
    11b0:	00005ced 	.word	0x00005ced
    11b4:	000073e8 	.word	0x000073e8
    11b8:	00005e0d 	.word	0x00005e0d
    11bc:	00005d21 	.word	0x00005d21
    11c0:	00001070 	.word	0x00001070
    11c4:	00001e05 	.word	0x00001e05
    11c8:	00001084 	.word	0x00001084
    11cc:	0000027a 	.word	0x0000027a
    11d0:	00007408 	.word	0x00007408
    11d4:	0000744c 	.word	0x0000744c
    11d8:	00001e1d 	.word	0x00001e1d

000011dc <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	1e04      	subs	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    11e0:	2c07      	cmp	r4, #7
    11e2:	d81b      	bhi.n	121c <hif_register_cb+0x40>
    11e4:	0083      	lsls	r3, r0, #2
    11e6:	4a14      	ldr	r2, [pc, #80]	; (1238 <hif_register_cb+0x5c>)
    11e8:	58d3      	ldr	r3, [r2, r3]
    11ea:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    11ec:	4b13      	ldr	r3, [pc, #76]	; (123c <hif_register_cb+0x60>)
    11ee:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    11f0:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
    11f2:	e020      	b.n	1236 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    11f4:	4b12      	ldr	r3, [pc, #72]	; (1240 <hif_register_cb+0x64>)
    11f6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    11f8:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
    11fa:	e01c      	b.n	1236 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    11fc:	4b11      	ldr	r3, [pc, #68]	; (1244 <hif_register_cb+0x68>)
    11fe:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1200:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
    1202:	e018      	b.n	1236 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    1204:	4b10      	ldr	r3, [pc, #64]	; (1248 <hif_register_cb+0x6c>)
    1206:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1208:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
    120a:	e014      	b.n	1236 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    120c:	4b0f      	ldr	r3, [pc, #60]	; (124c <hif_register_cb+0x70>)
    120e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1210:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
    1212:	e010      	b.n	1236 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    1214:	4b0e      	ldr	r3, [pc, #56]	; (1250 <hif_register_cb+0x74>)
    1216:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1218:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
    121a:	e00c      	b.n	1236 <hif_register_cb+0x5a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    121c:	4a0d      	ldr	r2, [pc, #52]	; (1254 <hif_register_cb+0x78>)
    121e:	490e      	ldr	r1, [pc, #56]	; (1258 <hif_register_cb+0x7c>)
    1220:	480e      	ldr	r0, [pc, #56]	; (125c <hif_register_cb+0x80>)
    1222:	4d0f      	ldr	r5, [pc, #60]	; (1260 <hif_register_cb+0x84>)
    1224:	47a8      	blx	r5
    1226:	0021      	movs	r1, r4
    1228:	480e      	ldr	r0, [pc, #56]	; (1264 <hif_register_cb+0x88>)
    122a:	47a8      	blx	r5
    122c:	200d      	movs	r0, #13
    122e:	4b0e      	ldr	r3, [pc, #56]	; (1268 <hif_register_cb+0x8c>)
    1230:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1232:	200c      	movs	r0, #12
    1234:	4240      	negs	r0, r0
			break;
	}
	return ret;
}
    1236:	bd70      	pop	{r4, r5, r6, pc}
    1238:	0000722c 	.word	0x0000722c
    123c:	200000b0 	.word	0x200000b0
    1240:	2000009c 	.word	0x2000009c
    1244:	200000b8 	.word	0x200000b8
    1248:	200000a4 	.word	0x200000a4
    124c:	20000098 	.word	0x20000098
    1250:	200000a8 	.word	0x200000a8
    1254:	000002b9 	.word	0x000002b9
    1258:	000074a8 	.word	0x000074a8
    125c:	000071f4 	.word	0x000071f4
    1260:	00005ced 	.word	0x00005ced
    1264:	00007490 	.word	0x00007490
    1268:	00005d21 	.word	0x00005d21

0000126c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    126c:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
    126e:	2300      	movs	r3, #0
    1270:	4a09      	ldr	r2, [pc, #36]	; (1298 <hif_init+0x2c>)
    1272:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
    1274:	4a09      	ldr	r2, [pc, #36]	; (129c <hif_init+0x30>)
    1276:	6013      	str	r3, [r2, #0]

	gu8ChipSleep = 0;
    1278:	4a09      	ldr	r2, [pc, #36]	; (12a0 <hif_init+0x34>)
    127a:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
    127c:	4a09      	ldr	r2, [pc, #36]	; (12a4 <hif_init+0x38>)
    127e:	7013      	strb	r3, [r2, #0]

	gu8Interrupt = 0;
    1280:	4a09      	ldr	r2, [pc, #36]	; (12a8 <hif_init+0x3c>)
    1282:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
    1284:	4809      	ldr	r0, [pc, #36]	; (12ac <hif_init+0x40>)
    1286:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <hif_init+0x44>)
    1288:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    128a:	490a      	ldr	r1, [pc, #40]	; (12b4 <hif_init+0x48>)
    128c:	2003      	movs	r0, #3
    128e:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <hif_init+0x4c>)
    1290:	4798      	blx	r3

	return M2M_SUCCESS;
}
    1292:	2000      	movs	r0, #0
    1294:	bd10      	pop	{r4, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	2000009c 	.word	0x2000009c
    129c:	200000b0 	.word	0x200000b0
    12a0:	200000bc 	.word	0x200000bc
    12a4:	200000ac 	.word	0x200000ac
    12a8:	200000a0 	.word	0x200000a0
    12ac:	00000a71 	.word	0x00000a71
    12b0:	00000689 	.word	0x00000689
    12b4:	00000a81 	.word	0x00000a81
    12b8:	000011dd 	.word	0x000011dd

000012bc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    12bc:	b530      	push	{r4, r5, lr}
    12be:	b09f      	sub	sp, #124	; 0x7c
    12c0:	0004      	movs	r4, r0
    12c2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    12c4:	282c      	cmp	r0, #44	; 0x2c
    12c6:	d111      	bne.n	12ec <m2m_wifi_cb+0x30>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    12c8:	2300      	movs	r3, #0
    12ca:	2204      	movs	r2, #4
    12cc:	a903      	add	r1, sp, #12
    12ce:	0028      	movs	r0, r5
    12d0:	4c94      	ldr	r4, [pc, #592]	; (1524 <m2m_wifi_cb+0x268>)
    12d2:	47a0      	blx	r4
    12d4:	2800      	cmp	r0, #0
    12d6:	d000      	beq.n	12da <m2m_wifi_cb+0x1e>
    12d8:	e122      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    12da:	4b93      	ldr	r3, [pc, #588]	; (1528 <m2m_wifi_cb+0x26c>)
    12dc:	681b      	ldr	r3, [r3, #0]
    12de:	2b00      	cmp	r3, #0
    12e0:	d100      	bne.n	12e4 <m2m_wifi_cb+0x28>
    12e2:	e11d      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    12e4:	a903      	add	r1, sp, #12
    12e6:	302c      	adds	r0, #44	; 0x2c
    12e8:	4798      	blx	r3
    12ea:	e119      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    12ec:	281b      	cmp	r0, #27
    12ee:	d111      	bne.n	1314 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    12f0:	2300      	movs	r3, #0
    12f2:	2208      	movs	r2, #8
    12f4:	a903      	add	r1, sp, #12
    12f6:	0028      	movs	r0, r5
    12f8:	4c8a      	ldr	r4, [pc, #552]	; (1524 <m2m_wifi_cb+0x268>)
    12fa:	47a0      	blx	r4
    12fc:	2800      	cmp	r0, #0
    12fe:	d000      	beq.n	1302 <m2m_wifi_cb+0x46>
    1300:	e10e      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1302:	4b89      	ldr	r3, [pc, #548]	; (1528 <m2m_wifi_cb+0x26c>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	2b00      	cmp	r3, #0
    1308:	d100      	bne.n	130c <m2m_wifi_cb+0x50>
    130a:	e109      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    130c:	a903      	add	r1, sp, #12
    130e:	301b      	adds	r0, #27
    1310:	4798      	blx	r3
    1312:	e105      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1314:	2806      	cmp	r0, #6
    1316:	d111      	bne.n	133c <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1318:	2301      	movs	r3, #1
    131a:	2230      	movs	r2, #48	; 0x30
    131c:	a903      	add	r1, sp, #12
    131e:	0028      	movs	r0, r5
    1320:	4c80      	ldr	r4, [pc, #512]	; (1524 <m2m_wifi_cb+0x268>)
    1322:	47a0      	blx	r4
    1324:	2800      	cmp	r0, #0
    1326:	d000      	beq.n	132a <m2m_wifi_cb+0x6e>
    1328:	e0fa      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    132a:	4b7f      	ldr	r3, [pc, #508]	; (1528 <m2m_wifi_cb+0x26c>)
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	2b00      	cmp	r3, #0
    1330:	d100      	bne.n	1334 <m2m_wifi_cb+0x78>
    1332:	e0f5      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1334:	a903      	add	r1, sp, #12
    1336:	3006      	adds	r0, #6
    1338:	4798      	blx	r3
    133a:	e0f1      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    133c:	280e      	cmp	r0, #14
    133e:	d100      	bne.n	1342 <m2m_wifi_cb+0x86>
    1340:	e0ee      	b.n	1520 <m2m_wifi_cb+0x264>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1342:	2832      	cmp	r0, #50	; 0x32
    1344:	d111      	bne.n	136a <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1346:	2300      	movs	r3, #0
    1348:	2210      	movs	r2, #16
    134a:	a903      	add	r1, sp, #12
    134c:	0028      	movs	r0, r5
    134e:	4c75      	ldr	r4, [pc, #468]	; (1524 <m2m_wifi_cb+0x268>)
    1350:	47a0      	blx	r4
    1352:	2800      	cmp	r0, #0
    1354:	d000      	beq.n	1358 <m2m_wifi_cb+0x9c>
    1356:	e0e3      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1358:	4b73      	ldr	r3, [pc, #460]	; (1528 <m2m_wifi_cb+0x26c>)
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	2b00      	cmp	r3, #0
    135e:	d100      	bne.n	1362 <m2m_wifi_cb+0xa6>
    1360:	e0de      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1362:	a903      	add	r1, sp, #12
    1364:	3032      	adds	r0, #50	; 0x32
    1366:	4798      	blx	r3
    1368:	e0da      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    136a:	282f      	cmp	r0, #47	; 0x2f
    136c:	d116      	bne.n	139c <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    136e:	2264      	movs	r2, #100	; 0x64
    1370:	2100      	movs	r1, #0
    1372:	a803      	add	r0, sp, #12
    1374:	4b6d      	ldr	r3, [pc, #436]	; (152c <m2m_wifi_cb+0x270>)
    1376:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1378:	2300      	movs	r3, #0
    137a:	2264      	movs	r2, #100	; 0x64
    137c:	a903      	add	r1, sp, #12
    137e:	0028      	movs	r0, r5
    1380:	4c68      	ldr	r4, [pc, #416]	; (1524 <m2m_wifi_cb+0x268>)
    1382:	47a0      	blx	r4
    1384:	2800      	cmp	r0, #0
    1386:	d000      	beq.n	138a <m2m_wifi_cb+0xce>
    1388:	e0ca      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    138a:	4b67      	ldr	r3, [pc, #412]	; (1528 <m2m_wifi_cb+0x26c>)
    138c:	681b      	ldr	r3, [r3, #0]
    138e:	2b00      	cmp	r3, #0
    1390:	d100      	bne.n	1394 <m2m_wifi_cb+0xd8>
    1392:	e0c5      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1394:	a903      	add	r1, sp, #12
    1396:	302f      	adds	r0, #47	; 0x2f
    1398:	4798      	blx	r3
    139a:	e0c1      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    139c:	2834      	cmp	r0, #52	; 0x34
    139e:	d122      	bne.n	13e6 <m2m_wifi_cb+0x12a>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    13a0:	2300      	movs	r3, #0
    13a2:	2204      	movs	r2, #4
    13a4:	a903      	add	r1, sp, #12
    13a6:	0028      	movs	r0, r5
    13a8:	4c5e      	ldr	r4, [pc, #376]	; (1524 <m2m_wifi_cb+0x268>)
    13aa:	47a0      	blx	r4
    13ac:	2800      	cmp	r0, #0
    13ae:	d000      	beq.n	13b2 <m2m_wifi_cb+0xf6>
    13b0:	e0b6      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    13b2:	485f      	ldr	r0, [pc, #380]	; (1530 <m2m_wifi_cb+0x274>)
    13b4:	4c5f      	ldr	r4, [pc, #380]	; (1534 <m2m_wifi_cb+0x278>)
    13b6:	47a0      	blx	r4
    13b8:	9803      	ldr	r0, [sp, #12]
    13ba:	0c03      	lsrs	r3, r0, #16
    13bc:	21ff      	movs	r1, #255	; 0xff
    13be:	400b      	ands	r3, r1
    13c0:	0a02      	lsrs	r2, r0, #8
    13c2:	400a      	ands	r2, r1
    13c4:	4001      	ands	r1, r0
    13c6:	0e00      	lsrs	r0, r0, #24
    13c8:	9000      	str	r0, [sp, #0]
    13ca:	485b      	ldr	r0, [pc, #364]	; (1538 <m2m_wifi_cb+0x27c>)
    13cc:	47a0      	blx	r4
    13ce:	200d      	movs	r0, #13
    13d0:	4b5a      	ldr	r3, [pc, #360]	; (153c <m2m_wifi_cb+0x280>)
    13d2:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    13d4:	4b54      	ldr	r3, [pc, #336]	; (1528 <m2m_wifi_cb+0x26c>)
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	2b00      	cmp	r3, #0
    13da:	d100      	bne.n	13de <m2m_wifi_cb+0x122>
    13dc:	e0a0      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    13de:	2100      	movs	r1, #0
    13e0:	2034      	movs	r0, #52	; 0x34
    13e2:	4798      	blx	r3
    13e4:	e09c      	b.n	1520 <m2m_wifi_cb+0x264>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    13e6:	2811      	cmp	r0, #17
    13e8:	d118      	bne.n	141c <m2m_wifi_cb+0x160>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    13ea:	2200      	movs	r2, #0
    13ec:	4b54      	ldr	r3, [pc, #336]	; (1540 <m2m_wifi_cb+0x284>)
    13ee:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    13f0:	2300      	movs	r3, #0
    13f2:	3204      	adds	r2, #4
    13f4:	a903      	add	r1, sp, #12
    13f6:	0028      	movs	r0, r5
    13f8:	4c4a      	ldr	r4, [pc, #296]	; (1524 <m2m_wifi_cb+0x268>)
    13fa:	47a0      	blx	r4
    13fc:	2800      	cmp	r0, #0
    13fe:	d000      	beq.n	1402 <m2m_wifi_cb+0x146>
    1400:	e08e      	b.n	1520 <m2m_wifi_cb+0x264>
		{
			gu8ChNum = strState.u8NumofCh;
    1402:	ab03      	add	r3, sp, #12
    1404:	781a      	ldrb	r2, [r3, #0]
    1406:	4b4f      	ldr	r3, [pc, #316]	; (1544 <m2m_wifi_cb+0x288>)
    1408:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    140a:	4b47      	ldr	r3, [pc, #284]	; (1528 <m2m_wifi_cb+0x26c>)
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d100      	bne.n	1414 <m2m_wifi_cb+0x158>
    1412:	e085      	b.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1414:	a903      	add	r1, sp, #12
    1416:	3011      	adds	r0, #17
    1418:	4798      	blx	r3
    141a:	e081      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    141c:	2813      	cmp	r0, #19
    141e:	d10f      	bne.n	1440 <m2m_wifi_cb+0x184>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1420:	2300      	movs	r3, #0
    1422:	222c      	movs	r2, #44	; 0x2c
    1424:	a903      	add	r1, sp, #12
    1426:	0028      	movs	r0, r5
    1428:	4c3e      	ldr	r4, [pc, #248]	; (1524 <m2m_wifi_cb+0x268>)
    142a:	47a0      	blx	r4
    142c:	2800      	cmp	r0, #0
    142e:	d177      	bne.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1430:	4b3d      	ldr	r3, [pc, #244]	; (1528 <m2m_wifi_cb+0x26c>)
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	2b00      	cmp	r3, #0
    1436:	d073      	beq.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1438:	a903      	add	r1, sp, #12
    143a:	3013      	adds	r0, #19
    143c:	4798      	blx	r3
    143e:	e06f      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1440:	2804      	cmp	r0, #4
    1442:	d10f      	bne.n	1464 <m2m_wifi_cb+0x1a8>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1444:	2300      	movs	r3, #0
    1446:	2204      	movs	r2, #4
    1448:	a91c      	add	r1, sp, #112	; 0x70
    144a:	0028      	movs	r0, r5
    144c:	4c35      	ldr	r4, [pc, #212]	; (1524 <m2m_wifi_cb+0x268>)
    144e:	47a0      	blx	r4
    1450:	2800      	cmp	r0, #0
    1452:	d165      	bne.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1454:	4b34      	ldr	r3, [pc, #208]	; (1528 <m2m_wifi_cb+0x26c>)
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	2b00      	cmp	r3, #0
    145a:	d061      	beq.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    145c:	a91c      	add	r1, sp, #112	; 0x70
    145e:	3004      	adds	r0, #4
    1460:	4798      	blx	r3
    1462:	e05d      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1464:	2865      	cmp	r0, #101	; 0x65
    1466:	d10f      	bne.n	1488 <m2m_wifi_cb+0x1cc>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1468:	2300      	movs	r3, #0
    146a:	2204      	movs	r2, #4
    146c:	a91c      	add	r1, sp, #112	; 0x70
    146e:	0028      	movs	r0, r5
    1470:	4c2c      	ldr	r4, [pc, #176]	; (1524 <m2m_wifi_cb+0x268>)
    1472:	47a0      	blx	r4
    1474:	2800      	cmp	r0, #0
    1476:	d153      	bne.n	1520 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1478:	4b2b      	ldr	r3, [pc, #172]	; (1528 <m2m_wifi_cb+0x26c>)
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	2b00      	cmp	r3, #0
    147e:	d04f      	beq.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1480:	a91c      	add	r1, sp, #112	; 0x70
    1482:	3065      	adds	r0, #101	; 0x65
    1484:	4798      	blx	r3
    1486:	e04b      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1488:	2809      	cmp	r0, #9
    148a:	d10f      	bne.n	14ac <m2m_wifi_cb+0x1f0>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    148c:	2301      	movs	r3, #1
    148e:	2264      	movs	r2, #100	; 0x64
    1490:	a903      	add	r1, sp, #12
    1492:	0028      	movs	r0, r5
    1494:	4c23      	ldr	r4, [pc, #140]	; (1524 <m2m_wifi_cb+0x268>)
    1496:	47a0      	blx	r4
    1498:	2800      	cmp	r0, #0
    149a:	d141      	bne.n	1520 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    149c:	4b22      	ldr	r3, [pc, #136]	; (1528 <m2m_wifi_cb+0x26c>)
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d03d      	beq.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    14a4:	a903      	add	r1, sp, #12
    14a6:	3009      	adds	r0, #9
    14a8:	4798      	blx	r3
    14aa:	e039      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    14ac:	282a      	cmp	r0, #42	; 0x2a
    14ae:	d10f      	bne.n	14d0 <m2m_wifi_cb+0x214>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    14b0:	2301      	movs	r3, #1
    14b2:	2204      	movs	r2, #4
    14b4:	a903      	add	r1, sp, #12
    14b6:	0028      	movs	r0, r5
    14b8:	4c1a      	ldr	r4, [pc, #104]	; (1524 <m2m_wifi_cb+0x268>)
    14ba:	47a0      	blx	r4
    14bc:	2800      	cmp	r0, #0
    14be:	d12f      	bne.n	1520 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    14c0:	4b19      	ldr	r3, [pc, #100]	; (1528 <m2m_wifi_cb+0x26c>)
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	2b00      	cmp	r3, #0
    14c6:	d02b      	beq.n	1520 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    14c8:	a903      	add	r1, sp, #12
    14ca:	302a      	adds	r0, #42	; 0x2a
    14cc:	4798      	blx	r3
    14ce:	e027      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    14d0:	2820      	cmp	r0, #32
    14d2:	d119      	bne.n	1508 <m2m_wifi_cb+0x24c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    14d4:	2300      	movs	r3, #0
    14d6:	2208      	movs	r2, #8
    14d8:	a903      	add	r1, sp, #12
    14da:	0028      	movs	r0, r5
    14dc:	4c11      	ldr	r4, [pc, #68]	; (1524 <m2m_wifi_cb+0x268>)
    14de:	47a0      	blx	r4
    14e0:	2800      	cmp	r0, #0
    14e2:	d11d      	bne.n	1520 <m2m_wifi_cb+0x264>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    14e4:	ab03      	add	r3, sp, #12
    14e6:	889a      	ldrh	r2, [r3, #4]
    14e8:	0028      	movs	r0, r5
    14ea:	3008      	adds	r0, #8
    14ec:	2301      	movs	r3, #1
    14ee:	9903      	ldr	r1, [sp, #12]
    14f0:	4c0c      	ldr	r4, [pc, #48]	; (1524 <m2m_wifi_cb+0x268>)
    14f2:	47a0      	blx	r4
    14f4:	2800      	cmp	r0, #0
    14f6:	d113      	bne.n	1520 <m2m_wifi_cb+0x264>
			{
				if(gpfAppWifiCb)
    14f8:	4b0b      	ldr	r3, [pc, #44]	; (1528 <m2m_wifi_cb+0x26c>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d00f      	beq.n	1520 <m2m_wifi_cb+0x264>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1500:	a903      	add	r1, sp, #12
    1502:	3020      	adds	r0, #32
    1504:	4798      	blx	r3
    1506:	e00b      	b.n	1520 <m2m_wifi_cb+0x264>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1508:	2292      	movs	r2, #146	; 0x92
    150a:	0052      	lsls	r2, r2, #1
    150c:	490e      	ldr	r1, [pc, #56]	; (1548 <m2m_wifi_cb+0x28c>)
    150e:	480f      	ldr	r0, [pc, #60]	; (154c <m2m_wifi_cb+0x290>)
    1510:	4d08      	ldr	r5, [pc, #32]	; (1534 <m2m_wifi_cb+0x278>)
    1512:	47a8      	blx	r5
    1514:	0021      	movs	r1, r4
    1516:	480e      	ldr	r0, [pc, #56]	; (1550 <m2m_wifi_cb+0x294>)
    1518:	47a8      	blx	r5
    151a:	200d      	movs	r0, #13
    151c:	4b07      	ldr	r3, [pc, #28]	; (153c <m2m_wifi_cb+0x280>)
    151e:	4798      	blx	r3
	}
}
    1520:	b01f      	add	sp, #124	; 0x7c
    1522:	bd30      	pop	{r4, r5, pc}
    1524:	000010b1 	.word	0x000010b1
    1528:	200000c0 	.word	0x200000c0
    152c:	00000985 	.word	0x00000985
    1530:	000074d4 	.word	0x000074d4
    1534:	00005ced 	.word	0x00005ced
    1538:	000074e0 	.word	0x000074e0
    153c:	00005d21 	.word	0x00005d21
    1540:	200000c4 	.word	0x200000c4
    1544:	200000c5 	.word	0x200000c5
    1548:	000074c8 	.word	0x000074c8
    154c:	000071f4 	.word	0x000071f4
    1550:	00007500 	.word	0x00007500

00001554 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1554:	b5f0      	push	{r4, r5, r6, r7, lr}
    1556:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1558:	2201      	movs	r2, #1
    155a:	466b      	mov	r3, sp
    155c:	71da      	strb	r2, [r3, #7]
	
	if(param == NULL) {
    155e:	2800      	cmp	r0, #0
    1560:	d04a      	beq.n	15f8 <m2m_wifi_init+0xa4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1562:	6802      	ldr	r2, [r0, #0]
    1564:	4b27      	ldr	r3, [pc, #156]	; (1604 <m2m_wifi_init+0xb0>)
    1566:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1568:	2200      	movs	r2, #0
    156a:	4b27      	ldr	r3, [pc, #156]	; (1608 <m2m_wifi_init+0xb4>)
    156c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    156e:	466b      	mov	r3, sp
    1570:	1dd8      	adds	r0, r3, #7
    1572:	4b26      	ldr	r3, [pc, #152]	; (160c <m2m_wifi_init+0xb8>)
    1574:	4798      	blx	r3
    1576:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1578:	d140      	bne.n	15fc <m2m_wifi_init+0xa8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    157a:	2000      	movs	r0, #0
    157c:	4b24      	ldr	r3, [pc, #144]	; (1610 <m2m_wifi_init+0xbc>)
    157e:	4798      	blx	r3
    1580:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1582:	d135      	bne.n	15f0 <m2m_wifi_init+0x9c>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1584:	4923      	ldr	r1, [pc, #140]	; (1614 <m2m_wifi_init+0xc0>)
    1586:	2001      	movs	r0, #1
    1588:	4b23      	ldr	r3, [pc, #140]	; (1618 <m2m_wifi_init+0xc4>)
    158a:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    158c:	ad02      	add	r5, sp, #8
    158e:	0028      	movs	r0, r5
    1590:	4b22      	ldr	r3, [pc, #136]	; (161c <m2m_wifi_init+0xc8>)
    1592:	4798      	blx	r3
    1594:	0004      	movs	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    1596:	4822      	ldr	r0, [pc, #136]	; (1620 <m2m_wifi_init+0xcc>)
    1598:	4e22      	ldr	r6, [pc, #136]	; (1624 <m2m_wifi_init+0xd0>)
    159a:	47b0      	blx	r6
    159c:	79ab      	ldrb	r3, [r5, #6]
    159e:	796a      	ldrb	r2, [r5, #5]
    15a0:	7929      	ldrb	r1, [r5, #4]
    15a2:	4821      	ldr	r0, [pc, #132]	; (1628 <m2m_wifi_init+0xd4>)
    15a4:	47b0      	blx	r6
    15a6:	200d      	movs	r0, #13
    15a8:	4f20      	ldr	r7, [pc, #128]	; (162c <m2m_wifi_init+0xd8>)
    15aa:	47b8      	blx	r7
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    15ac:	481c      	ldr	r0, [pc, #112]	; (1620 <m2m_wifi_init+0xcc>)
    15ae:	47b0      	blx	r6
    15b0:	7a6b      	ldrb	r3, [r5, #9]
    15b2:	7a2a      	ldrb	r2, [r5, #8]
    15b4:	79e9      	ldrb	r1, [r5, #7]
    15b6:	481e      	ldr	r0, [pc, #120]	; (1630 <m2m_wifi_init+0xdc>)
    15b8:	47b0      	blx	r6
    15ba:	200d      	movs	r0, #13
    15bc:	47b8      	blx	r7
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    15be:	4818      	ldr	r0, [pc, #96]	; (1620 <m2m_wifi_init+0xcc>)
    15c0:	47b0      	blx	r6
    15c2:	2300      	movs	r3, #0
    15c4:	2203      	movs	r2, #3
    15c6:	2113      	movs	r1, #19
    15c8:	481a      	ldr	r0, [pc, #104]	; (1634 <m2m_wifi_init+0xe0>)
    15ca:	47b0      	blx	r6
    15cc:	200d      	movs	r0, #13
    15ce:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    15d0:	0023      	movs	r3, r4
    15d2:	330d      	adds	r3, #13
    15d4:	d112      	bne.n	15fc <m2m_wifi_init+0xa8>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    15d6:	22d0      	movs	r2, #208	; 0xd0
    15d8:	32ff      	adds	r2, #255	; 0xff
    15da:	4917      	ldr	r1, [pc, #92]	; (1638 <m2m_wifi_init+0xe4>)
    15dc:	4817      	ldr	r0, [pc, #92]	; (163c <m2m_wifi_init+0xe8>)
    15de:	4b11      	ldr	r3, [pc, #68]	; (1624 <m2m_wifi_init+0xd0>)
    15e0:	4798      	blx	r3
    15e2:	4817      	ldr	r0, [pc, #92]	; (1640 <m2m_wifi_init+0xec>)
    15e4:	4b17      	ldr	r3, [pc, #92]	; (1644 <m2m_wifi_init+0xf0>)
    15e6:	4798      	blx	r3
    15e8:	200d      	movs	r0, #13
    15ea:	4b10      	ldr	r3, [pc, #64]	; (162c <m2m_wifi_init+0xd8>)
    15ec:	4798      	blx	r3
    15ee:	e005      	b.n	15fc <m2m_wifi_init+0xa8>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    15f0:	2000      	movs	r0, #0
    15f2:	4b15      	ldr	r3, [pc, #84]	; (1648 <m2m_wifi_init+0xf4>)
    15f4:	4798      	blx	r3
    15f6:	e001      	b.n	15fc <m2m_wifi_init+0xa8>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
    15f8:	240c      	movs	r4, #12
    15fa:	4264      	negs	r4, r4

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    15fc:	0020      	movs	r0, r4
    15fe:	b00b      	add	sp, #44	; 0x2c
    1600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	200000c0 	.word	0x200000c0
    1608:	200000c4 	.word	0x200000c4
    160c:	00001f99 	.word	0x00001f99
    1610:	0000126d 	.word	0x0000126d
    1614:	000012bd 	.word	0x000012bd
    1618:	000011dd 	.word	0x000011dd
    161c:	00001eed 	.word	0x00001eed
    1620:	000074d4 	.word	0x000074d4
    1624:	00005ced 	.word	0x00005ced
    1628:	000075ac 	.word	0x000075ac
    162c:	00005d21 	.word	0x00005d21
    1630:	000075c8 	.word	0x000075c8
    1634:	000075e4 	.word	0x000075e4
    1638:	000074b8 	.word	0x000074b8
    163c:	000071f4 	.word	0x000071f4
    1640:	00007600 	.word	0x00007600
    1644:	00005e0d 	.word	0x00005e0d
    1648:	0000206d 	.word	0x0000206d

0000164c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    164c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    164e:	4b01      	ldr	r3, [pc, #4]	; (1654 <m2m_wifi_handle_events+0x8>)
    1650:	4798      	blx	r3
}
    1652:	bd10      	pop	{r4, pc}
    1654:	00000d71 	.word	0x00000d71

00001658 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1658:	b5f0      	push	{r4, r5, r6, r7, lr}
    165a:	464f      	mov	r7, r9
    165c:	4646      	mov	r6, r8
    165e:	b4c0      	push	{r6, r7}
    1660:	b0a3      	sub	sp, #140	; 0x8c
    1662:	9005      	str	r0, [sp, #20]
    1664:	000c      	movs	r4, r1
    1666:	0015      	movs	r5, r2
    1668:	001f      	movs	r7, r3
    166a:	ab2a      	add	r3, sp, #168	; 0xa8
    166c:	881b      	ldrh	r3, [r3, #0]
    166e:	4699      	mov	r9, r3
    1670:	ab2b      	add	r3, sp, #172	; 0xac
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1676:	2a01      	cmp	r2, #1
    1678:	d041      	beq.n	16fe <m2m_wifi_connect_sc+0xa6>
	{
		if(pvAuthInfo == NULL)
    167a:	2f00      	cmp	r7, #0
    167c:	d10e      	bne.n	169c <m2m_wifi_connect_sc+0x44>
		{
			M2M_ERR("Key is not valid\n");
    167e:	22fe      	movs	r2, #254	; 0xfe
    1680:	32ff      	adds	r2, #255	; 0xff
    1682:	497e      	ldr	r1, [pc, #504]	; (187c <m2m_wifi_connect_sc+0x224>)
    1684:	487e      	ldr	r0, [pc, #504]	; (1880 <m2m_wifi_connect_sc+0x228>)
    1686:	4b7f      	ldr	r3, [pc, #508]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    1688:	4798      	blx	r3
    168a:	487f      	ldr	r0, [pc, #508]	; (1888 <m2m_wifi_connect_sc+0x230>)
    168c:	4b7f      	ldr	r3, [pc, #508]	; (188c <m2m_wifi_connect_sc+0x234>)
    168e:	4798      	blx	r3
    1690:	200d      	movs	r0, #13
    1692:	4b7f      	ldr	r3, [pc, #508]	; (1890 <m2m_wifi_connect_sc+0x238>)
    1694:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1696:	200c      	movs	r0, #12
    1698:	4240      	negs	r0, r0
			goto ERR1;
    169a:	e0e9      	b.n	1870 <m2m_wifi_connect_sc+0x218>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    169c:	2a02      	cmp	r2, #2
    169e:	d12e      	bne.n	16fe <m2m_wifi_connect_sc+0xa6>
    16a0:	0038      	movs	r0, r7
    16a2:	4b7c      	ldr	r3, [pc, #496]	; (1894 <m2m_wifi_connect_sc+0x23c>)
    16a4:	4798      	blx	r3
    16a6:	2840      	cmp	r0, #64	; 0x40
    16a8:	d129      	bne.n	16fe <m2m_wifi_connect_sc+0xa6>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    16aa:	783b      	ldrb	r3, [r7, #0]
    16ac:	001a      	movs	r2, r3
    16ae:	3a30      	subs	r2, #48	; 0x30
    16b0:	2a36      	cmp	r2, #54	; 0x36
    16b2:	d813      	bhi.n	16dc <m2m_wifi_connect_sc+0x84>
    16b4:	3a0a      	subs	r2, #10
    16b6:	2a06      	cmp	r2, #6
    16b8:	d910      	bls.n	16dc <m2m_wifi_connect_sc+0x84>
    16ba:	3b47      	subs	r3, #71	; 0x47
    16bc:	2b19      	cmp	r3, #25
    16be:	d90d      	bls.n	16dc <m2m_wifi_connect_sc+0x84>
    16c0:	1c7a      	adds	r2, r7, #1
    16c2:	0038      	movs	r0, r7
    16c4:	3040      	adds	r0, #64	; 0x40
    16c6:	7813      	ldrb	r3, [r2, #0]
    16c8:	0019      	movs	r1, r3
    16ca:	3930      	subs	r1, #48	; 0x30
    16cc:	2936      	cmp	r1, #54	; 0x36
    16ce:	d805      	bhi.n	16dc <m2m_wifi_connect_sc+0x84>
    16d0:	390a      	subs	r1, #10
    16d2:	2906      	cmp	r1, #6
    16d4:	d902      	bls.n	16dc <m2m_wifi_connect_sc+0x84>
    16d6:	3b47      	subs	r3, #71	; 0x47
    16d8:	2b19      	cmp	r3, #25
    16da:	d80d      	bhi.n	16f8 <m2m_wifi_connect_sc+0xa0>
				{
					M2M_ERR("Invalid Key\n");
    16dc:	4a6e      	ldr	r2, [pc, #440]	; (1898 <m2m_wifi_connect_sc+0x240>)
    16de:	4967      	ldr	r1, [pc, #412]	; (187c <m2m_wifi_connect_sc+0x224>)
    16e0:	4867      	ldr	r0, [pc, #412]	; (1880 <m2m_wifi_connect_sc+0x228>)
    16e2:	4b68      	ldr	r3, [pc, #416]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    16e4:	4798      	blx	r3
    16e6:	486d      	ldr	r0, [pc, #436]	; (189c <m2m_wifi_connect_sc+0x244>)
    16e8:	4b68      	ldr	r3, [pc, #416]	; (188c <m2m_wifi_connect_sc+0x234>)
    16ea:	4798      	blx	r3
    16ec:	200d      	movs	r0, #13
    16ee:	4b68      	ldr	r3, [pc, #416]	; (1890 <m2m_wifi_connect_sc+0x238>)
    16f0:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    16f2:	200c      	movs	r0, #12
    16f4:	4240      	negs	r0, r0
					goto ERR1;
    16f6:	e0bb      	b.n	1870 <m2m_wifi_connect_sc+0x218>
    16f8:	3201      	adds	r2, #1
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    16fa:	4282      	cmp	r2, r0
    16fc:	d1e3      	bne.n	16c6 <m2m_wifi_connect_sc+0x6e>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    16fe:	1e63      	subs	r3, r4, #1
    1700:	2b1f      	cmp	r3, #31
    1702:	d90d      	bls.n	1720 <m2m_wifi_connect_sc+0xc8>
	{
		M2M_ERR("SSID LEN INVALID\n");
    1704:	4a66      	ldr	r2, [pc, #408]	; (18a0 <m2m_wifi_connect_sc+0x248>)
    1706:	495d      	ldr	r1, [pc, #372]	; (187c <m2m_wifi_connect_sc+0x224>)
    1708:	485d      	ldr	r0, [pc, #372]	; (1880 <m2m_wifi_connect_sc+0x228>)
    170a:	4b5e      	ldr	r3, [pc, #376]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    170c:	4798      	blx	r3
    170e:	4865      	ldr	r0, [pc, #404]	; (18a4 <m2m_wifi_connect_sc+0x24c>)
    1710:	4b5e      	ldr	r3, [pc, #376]	; (188c <m2m_wifi_connect_sc+0x234>)
    1712:	4798      	blx	r3
    1714:	200d      	movs	r0, #13
    1716:	4b5e      	ldr	r3, [pc, #376]	; (1890 <m2m_wifi_connect_sc+0x238>)
    1718:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    171a:	200c      	movs	r0, #12
    171c:	4240      	negs	r0, r0
		goto ERR1;
    171e:	e0a7      	b.n	1870 <m2m_wifi_connect_sc+0x218>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    1720:	464b      	mov	r3, r9
    1722:	2b0d      	cmp	r3, #13
    1724:	d910      	bls.n	1748 <m2m_wifi_connect_sc+0xf0>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1726:	2bff      	cmp	r3, #255	; 0xff
    1728:	d00e      	beq.n	1748 <m2m_wifi_connect_sc+0xf0>
		{
			M2M_ERR("CH INVALID\n");
    172a:	2287      	movs	r2, #135	; 0x87
    172c:	0092      	lsls	r2, r2, #2
    172e:	4953      	ldr	r1, [pc, #332]	; (187c <m2m_wifi_connect_sc+0x224>)
    1730:	4853      	ldr	r0, [pc, #332]	; (1880 <m2m_wifi_connect_sc+0x228>)
    1732:	4b54      	ldr	r3, [pc, #336]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    1734:	4798      	blx	r3
    1736:	485c      	ldr	r0, [pc, #368]	; (18a8 <m2m_wifi_connect_sc+0x250>)
    1738:	4b54      	ldr	r3, [pc, #336]	; (188c <m2m_wifi_connect_sc+0x234>)
    173a:	4798      	blx	r3
    173c:	200d      	movs	r0, #13
    173e:	4b54      	ldr	r3, [pc, #336]	; (1890 <m2m_wifi_connect_sc+0x238>)
    1740:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1742:	200c      	movs	r0, #12
    1744:	4240      	negs	r0, r0
			goto ERR1;
    1746:	e093      	b.n	1870 <m2m_wifi_connect_sc+0x218>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1748:	ae07      	add	r6, sp, #28
    174a:	0022      	movs	r2, r4
    174c:	9905      	ldr	r1, [sp, #20]
    174e:	205a      	movs	r0, #90	; 0x5a
    1750:	ab02      	add	r3, sp, #8
    1752:	469c      	mov	ip, r3
    1754:	4460      	add	r0, ip
    1756:	4b55      	ldr	r3, [pc, #340]	; (18ac <m2m_wifi_connect_sc+0x254>)
    1758:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    175a:	1934      	adds	r4, r6, r4
    175c:	3446      	adds	r4, #70	; 0x46
    175e:	2300      	movs	r3, #0
    1760:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1762:	3344      	adds	r3, #68	; 0x44
    1764:	464a      	mov	r2, r9
    1766:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1768:	4643      	mov	r3, r8
    176a:	1e5a      	subs	r2, r3, #1
    176c:	4193      	sbcs	r3, r2
    176e:	2267      	movs	r2, #103	; 0x67
    1770:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1772:	2341      	movs	r3, #65	; 0x41
    1774:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1776:	2d03      	cmp	r5, #3
    1778:	d13b      	bne.n	17f2 <m2m_wifi_connect_sc+0x19a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    177a:	783b      	ldrb	r3, [r7, #0]
    177c:	3b01      	subs	r3, #1
    177e:	b2db      	uxtb	r3, r3
    1780:	aa07      	add	r2, sp, #28
    1782:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1784:	2b03      	cmp	r3, #3
    1786:	d90e      	bls.n	17a6 <m2m_wifi_connect_sc+0x14e>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1788:	4a49      	ldr	r2, [pc, #292]	; (18b0 <m2m_wifi_connect_sc+0x258>)
    178a:	493c      	ldr	r1, [pc, #240]	; (187c <m2m_wifi_connect_sc+0x224>)
    178c:	483c      	ldr	r0, [pc, #240]	; (1880 <m2m_wifi_connect_sc+0x228>)
    178e:	4c3d      	ldr	r4, [pc, #244]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    1790:	47a0      	blx	r4
    1792:	ab07      	add	r3, sp, #28
    1794:	7819      	ldrb	r1, [r3, #0]
    1796:	4847      	ldr	r0, [pc, #284]	; (18b4 <m2m_wifi_connect_sc+0x25c>)
    1798:	47a0      	blx	r4
    179a:	200d      	movs	r0, #13
    179c:	4b3c      	ldr	r3, [pc, #240]	; (1890 <m2m_wifi_connect_sc+0x238>)
    179e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    17a0:	200c      	movs	r0, #12
    17a2:	4240      	negs	r0, r0
			goto ERR1;
    17a4:	e064      	b.n	1870 <m2m_wifi_connect_sc+0x218>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    17a6:	787a      	ldrb	r2, [r7, #1]
    17a8:	1e51      	subs	r1, r2, #1
    17aa:	ab07      	add	r3, sp, #28
    17ac:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    17ae:	2310      	movs	r3, #16
    17b0:	0011      	movs	r1, r2
    17b2:	4399      	bics	r1, r3
    17b4:	290b      	cmp	r1, #11
    17b6:	d00e      	beq.n	17d6 <m2m_wifi_connect_sc+0x17e>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    17b8:	4a3f      	ldr	r2, [pc, #252]	; (18b8 <m2m_wifi_connect_sc+0x260>)
    17ba:	4930      	ldr	r1, [pc, #192]	; (187c <m2m_wifi_connect_sc+0x224>)
    17bc:	4830      	ldr	r0, [pc, #192]	; (1880 <m2m_wifi_connect_sc+0x228>)
    17be:	4c31      	ldr	r4, [pc, #196]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    17c0:	47a0      	blx	r4
    17c2:	ab07      	add	r3, sp, #28
    17c4:	7859      	ldrb	r1, [r3, #1]
    17c6:	483d      	ldr	r0, [pc, #244]	; (18bc <m2m_wifi_connect_sc+0x264>)
    17c8:	47a0      	blx	r4
    17ca:	200d      	movs	r0, #13
    17cc:	4b30      	ldr	r3, [pc, #192]	; (1890 <m2m_wifi_connect_sc+0x238>)
    17ce:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    17d0:	200c      	movs	r0, #12
    17d2:	4240      	negs	r0, r0
			goto ERR1;
    17d4:	e04c      	b.n	1870 <m2m_wifi_connect_sc+0x218>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    17d6:	1cb9      	adds	r1, r7, #2
    17d8:	2016      	movs	r0, #22
    17da:	ab02      	add	r3, sp, #8
    17dc:	469c      	mov	ip, r3
    17de:	4460      	add	r0, ip
    17e0:	4b32      	ldr	r3, [pc, #200]	; (18ac <m2m_wifi_connect_sc+0x254>)
    17e2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    17e4:	787b      	ldrb	r3, [r7, #1]
    17e6:	aa07      	add	r2, sp, #28
    17e8:	4694      	mov	ip, r2
    17ea:	4463      	add	r3, ip
    17ec:	2200      	movs	r2, #0
    17ee:	709a      	strb	r2, [r3, #2]
    17f0:	e034      	b.n	185c <m2m_wifi_connect_sc+0x204>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    17f2:	2d02      	cmp	r5, #2
    17f4:	d11a      	bne.n	182c <m2m_wifi_connect_sc+0x1d4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    17f6:	0038      	movs	r0, r7
    17f8:	4b26      	ldr	r3, [pc, #152]	; (1894 <m2m_wifi_connect_sc+0x23c>)
    17fa:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    17fc:	1e43      	subs	r3, r0, #1
    17fe:	b29b      	uxth	r3, r3
    1800:	2b3f      	cmp	r3, #63	; 0x3f
    1802:	d90d      	bls.n	1820 <m2m_wifi_connect_sc+0x1c8>
		{
			M2M_ERR("Incorrect PSK key length\n");
    1804:	4a2e      	ldr	r2, [pc, #184]	; (18c0 <m2m_wifi_connect_sc+0x268>)
    1806:	491d      	ldr	r1, [pc, #116]	; (187c <m2m_wifi_connect_sc+0x224>)
    1808:	481d      	ldr	r0, [pc, #116]	; (1880 <m2m_wifi_connect_sc+0x228>)
    180a:	4b1e      	ldr	r3, [pc, #120]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    180c:	4798      	blx	r3
    180e:	482d      	ldr	r0, [pc, #180]	; (18c4 <m2m_wifi_connect_sc+0x26c>)
    1810:	4b1e      	ldr	r3, [pc, #120]	; (188c <m2m_wifi_connect_sc+0x234>)
    1812:	4798      	blx	r3
    1814:	200d      	movs	r0, #13
    1816:	4b1e      	ldr	r3, [pc, #120]	; (1890 <m2m_wifi_connect_sc+0x238>)
    1818:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    181a:	200c      	movs	r0, #12
    181c:	4240      	negs	r0, r0
			goto ERR1;
    181e:	e027      	b.n	1870 <m2m_wifi_connect_sc+0x218>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1820:	1c42      	adds	r2, r0, #1
    1822:	0039      	movs	r1, r7
    1824:	a807      	add	r0, sp, #28
    1826:	4b21      	ldr	r3, [pc, #132]	; (18ac <m2m_wifi_connect_sc+0x254>)
    1828:	4798      	blx	r3
    182a:	e017      	b.n	185c <m2m_wifi_connect_sc+0x204>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    182c:	2d04      	cmp	r5, #4
    182e:	d105      	bne.n	183c <m2m_wifi_connect_sc+0x1e4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1830:	223e      	movs	r2, #62	; 0x3e
    1832:	0039      	movs	r1, r7
    1834:	a807      	add	r0, sp, #28
    1836:	4b1d      	ldr	r3, [pc, #116]	; (18ac <m2m_wifi_connect_sc+0x254>)
    1838:	4798      	blx	r3
    183a:	e00f      	b.n	185c <m2m_wifi_connect_sc+0x204>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    183c:	2d01      	cmp	r5, #1
    183e:	d00d      	beq.n	185c <m2m_wifi_connect_sc+0x204>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    1840:	4a21      	ldr	r2, [pc, #132]	; (18c8 <m2m_wifi_connect_sc+0x270>)
    1842:	490e      	ldr	r1, [pc, #56]	; (187c <m2m_wifi_connect_sc+0x224>)
    1844:	480e      	ldr	r0, [pc, #56]	; (1880 <m2m_wifi_connect_sc+0x228>)
    1846:	4b0f      	ldr	r3, [pc, #60]	; (1884 <m2m_wifi_connect_sc+0x22c>)
    1848:	4798      	blx	r3
    184a:	4820      	ldr	r0, [pc, #128]	; (18cc <m2m_wifi_connect_sc+0x274>)
    184c:	4b0f      	ldr	r3, [pc, #60]	; (188c <m2m_wifi_connect_sc+0x234>)
    184e:	4798      	blx	r3
    1850:	200d      	movs	r0, #13
    1852:	4b0f      	ldr	r3, [pc, #60]	; (1890 <m2m_wifi_connect_sc+0x238>)
    1854:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1856:	200c      	movs	r0, #12
    1858:	4240      	negs	r0, r0
		goto ERR1;
    185a:	e009      	b.n	1870 <m2m_wifi_connect_sc+0x218>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    185c:	2300      	movs	r3, #0
    185e:	9302      	str	r3, [sp, #8]
    1860:	9301      	str	r3, [sp, #4]
    1862:	9300      	str	r3, [sp, #0]
    1864:	336c      	adds	r3, #108	; 0x6c
    1866:	aa07      	add	r2, sp, #28
    1868:	2128      	movs	r1, #40	; 0x28
    186a:	2001      	movs	r0, #1
    186c:	4c18      	ldr	r4, [pc, #96]	; (18d0 <m2m_wifi_connect_sc+0x278>)
    186e:	47a0      	blx	r4

ERR1:
	return ret;
}
    1870:	b023      	add	sp, #140	; 0x8c
    1872:	bc0c      	pop	{r2, r3}
    1874:	4690      	mov	r8, r2
    1876:	4699      	mov	r9, r3
    1878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	000077e4 	.word	0x000077e4
    1880:	000071f4 	.word	0x000071f4
    1884:	00005ced 	.word	0x00005ced
    1888:	0000761c 	.word	0x0000761c
    188c:	00005e0d 	.word	0x00005e0d
    1890:	00005d21 	.word	0x00005d21
    1894:	00000995 	.word	0x00000995
    1898:	00000209 	.word	0x00000209
    189c:	00007630 	.word	0x00007630
    18a0:	00000213 	.word	0x00000213
    18a4:	0000763c 	.word	0x0000763c
    18a8:	00007650 	.word	0x00007650
    18ac:	00000971 	.word	0x00000971
    18b0:	00000233 	.word	0x00000233
    18b4:	0000765c 	.word	0x0000765c
    18b8:	0000023a 	.word	0x0000023a
    18bc:	00007678 	.word	0x00007678
    18c0:	00000249 	.word	0x00000249
    18c4:	00007694 	.word	0x00007694
    18c8:	00000259 	.word	0x00000259
    18cc:	000076b0 	.word	0x000076b0
    18d0:	00000b8d 	.word	0x00000b8d

000018d4 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    18d4:	b530      	push	{r4, r5, lr}
    18d6:	b083      	sub	sp, #12
    18d8:	ac06      	add	r4, sp, #24
    18da:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    18dc:	2500      	movs	r5, #0
    18de:	9501      	str	r5, [sp, #4]
    18e0:	9400      	str	r4, [sp, #0]
    18e2:	4c02      	ldr	r4, [pc, #8]	; (18ec <m2m_wifi_connect+0x18>)
    18e4:	47a0      	blx	r4
}
    18e6:	b003      	add	sp, #12
    18e8:	bd30      	pop	{r4, r5, pc}
    18ea:	46c0      	nop			; (mov r8, r8)
    18ec:	00001659 	.word	0x00001659

000018f0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    18f0:	2000      	movs	r0, #0
    18f2:	4770      	bx	lr

000018f4 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    18f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f6:	b083      	sub	sp, #12
    18f8:	0004      	movs	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    18fa:	25a5      	movs	r5, #165	; 0xa5
    18fc:	016d      	lsls	r5, r5, #5
    18fe:	4e0a      	ldr	r6, [pc, #40]	; (1928 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1900:	4f0a      	ldr	r7, [pc, #40]	; (192c <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    1902:	0021      	movs	r1, r4
    1904:	0028      	movs	r0, r5
    1906:	47b0      	blx	r6
		if(val32 != 0) {		
    1908:	2c00      	cmp	r4, #0
    190a:	d009      	beq.n	1920 <chip_apply_conf+0x2c>
			uint32 reg = 0;
    190c:	2300      	movs	r3, #0
    190e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1910:	a901      	add	r1, sp, #4
    1912:	0028      	movs	r0, r5
    1914:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
    1916:	2800      	cmp	r0, #0
    1918:	d1f3      	bne.n	1902 <chip_apply_conf+0xe>
				if(reg == val32)
    191a:	9b01      	ldr	r3, [sp, #4]
    191c:	429c      	cmp	r4, r3
    191e:	d1f0      	bne.n	1902 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    1920:	2000      	movs	r0, #0
    1922:	b003      	add	sp, #12
    1924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	00001e11 	.word	0x00001e11
    192c:	00001e05 	.word	0x00001e05

00001930 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    1930:	b5f0      	push	{r4, r5, r6, r7, lr}
    1932:	465f      	mov	r7, fp
    1934:	4656      	mov	r6, sl
    1936:	4645      	mov	r5, r8
    1938:	b4e0      	push	{r5, r6, r7}
    193a:	b084      	sub	sp, #16
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    193c:	2001      	movs	r0, #1
    193e:	4b43      	ldr	r3, [pc, #268]	; (1a4c <nm_clkless_wake+0x11c>)
    1940:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    1942:	a903      	add	r1, sp, #12
    1944:	2001      	movs	r0, #1
    1946:	4b42      	ldr	r3, [pc, #264]	; (1a50 <nm_clkless_wake+0x120>)
    1948:	4798      	blx	r3
    194a:	9001      	str	r0, [sp, #4]
    194c:	2400      	movs	r4, #0
	if(ret != M2M_SUCCESS) {
    194e:	2800      	cmp	r0, #0
    1950:	d00b      	beq.n	196a <nm_clkless_wake+0x3a>
		M2M_ERR("Bus error (1). Wake up failed\n");
    1952:	2272      	movs	r2, #114	; 0x72
    1954:	493f      	ldr	r1, [pc, #252]	; (1a54 <nm_clkless_wake+0x124>)
    1956:	4840      	ldr	r0, [pc, #256]	; (1a58 <nm_clkless_wake+0x128>)
    1958:	4b40      	ldr	r3, [pc, #256]	; (1a5c <nm_clkless_wake+0x12c>)
    195a:	4798      	blx	r3
    195c:	4840      	ldr	r0, [pc, #256]	; (1a60 <nm_clkless_wake+0x130>)
    195e:	4b41      	ldr	r3, [pc, #260]	; (1a64 <nm_clkless_wake+0x134>)
    1960:	4798      	blx	r3
    1962:	200d      	movs	r0, #13
    1964:	4b40      	ldr	r3, [pc, #256]	; (1a68 <nm_clkless_wake+0x138>)
    1966:	4798      	blx	r3
		goto _WAKE_EXIT;
    1968:	e068      	b.n	1a3c <nm_clkless_wake+0x10c>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    196a:	4b40      	ldr	r3, [pc, #256]	; (1a6c <nm_clkless_wake+0x13c>)
    196c:	469b      	mov	fp, r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    196e:	4b37      	ldr	r3, [pc, #220]	; (1a4c <nm_clkless_wake+0x11c>)
    1970:	469a      	mov	sl, r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1972:	4b3f      	ldr	r3, [pc, #252]	; (1a70 <nm_clkless_wake+0x140>)
    1974:	4698      	mov	r8, r3
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    1976:	2102      	movs	r1, #2
    1978:	9b03      	ldr	r3, [sp, #12]
    197a:	4319      	orrs	r1, r3
    197c:	2001      	movs	r0, #1
    197e:	47d8      	blx	fp
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    1980:	2001      	movs	r0, #1
    1982:	47d0      	blx	sl
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1984:	a902      	add	r1, sp, #8
    1986:	4643      	mov	r3, r8
    1988:	6818      	ldr	r0, [r3, #0]
    198a:	4b31      	ldr	r3, [pc, #196]	; (1a50 <nm_clkless_wake+0x120>)
    198c:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    198e:	2800      	cmp	r0, #0
    1990:	d106      	bne.n	19a0 <nm_clkless_wake+0x70>
    1992:	9b02      	ldr	r3, [sp, #8]
    1994:	2b00      	cmp	r3, #0
    1996:	d003      	beq.n	19a0 <nm_clkless_wake+0x70>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1998:	4d36      	ldr	r5, [pc, #216]	; (1a74 <nm_clkless_wake+0x144>)
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    199a:	4f2c      	ldr	r7, [pc, #176]	; (1a4c <nm_clkless_wake+0x11c>)

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    199c:	4e34      	ldr	r6, [pc, #208]	; (1a70 <nm_clkless_wake+0x140>)
    199e:	e03b      	b.n	1a18 <nm_clkless_wake+0xe8>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    19a0:	4d33      	ldr	r5, [pc, #204]	; (1a70 <nm_clkless_wake+0x140>)
    19a2:	230e      	movs	r3, #14
    19a4:	602b      	str	r3, [r5, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    19a6:	2001      	movs	r0, #1
    19a8:	4b28      	ldr	r3, [pc, #160]	; (1a4c <nm_clkless_wake+0x11c>)
    19aa:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19ac:	6828      	ldr	r0, [r5, #0]
    19ae:	a902      	add	r1, sp, #8
    19b0:	4b27      	ldr	r3, [pc, #156]	; (1a50 <nm_clkless_wake+0x120>)
    19b2:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    19b4:	2800      	cmp	r0, #0
    19b6:	d102      	bne.n	19be <nm_clkless_wake+0x8e>
    19b8:	9b02      	ldr	r3, [sp, #8]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d1ec      	bne.n	1998 <nm_clkless_wake+0x68>
				 
				clk_status_reg_adr = 0x13;
    19be:	4d2c      	ldr	r5, [pc, #176]	; (1a70 <nm_clkless_wake+0x140>)
    19c0:	2313      	movs	r3, #19
    19c2:	602b      	str	r3, [r5, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    19c4:	2001      	movs	r0, #1
    19c6:	4b21      	ldr	r3, [pc, #132]	; (1a4c <nm_clkless_wake+0x11c>)
    19c8:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19ca:	6828      	ldr	r0, [r5, #0]
    19cc:	a902      	add	r1, sp, #8
    19ce:	4b20      	ldr	r3, [pc, #128]	; (1a50 <nm_clkless_wake+0x120>)
    19d0:	4798      	blx	r3
    19d2:	1e05      	subs	r5, r0, #0
			
				if(ret != M2M_SUCCESS) {
    19d4:	d0e0      	beq.n	1998 <nm_clkless_wake+0x68>
					M2M_ERR("Bus error (2). Wake up failed\n");
    19d6:	2296      	movs	r2, #150	; 0x96
    19d8:	491e      	ldr	r1, [pc, #120]	; (1a54 <nm_clkless_wake+0x124>)
    19da:	481f      	ldr	r0, [pc, #124]	; (1a58 <nm_clkless_wake+0x128>)
    19dc:	4b1f      	ldr	r3, [pc, #124]	; (1a5c <nm_clkless_wake+0x12c>)
    19de:	4798      	blx	r3
    19e0:	4825      	ldr	r0, [pc, #148]	; (1a78 <nm_clkless_wake+0x148>)
    19e2:	4b20      	ldr	r3, [pc, #128]	; (1a64 <nm_clkless_wake+0x134>)
    19e4:	4798      	blx	r3
    19e6:	200d      	movs	r0, #13
    19e8:	4b1f      	ldr	r3, [pc, #124]	; (1a68 <nm_clkless_wake+0x138>)
    19ea:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19ec:	9501      	str	r5, [sp, #4]
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
    19ee:	e025      	b.n	1a3c <nm_clkless_wake+0x10c>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    19f0:	2002      	movs	r0, #2
    19f2:	47b8      	blx	r7

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19f4:	a902      	add	r1, sp, #8
    19f6:	6830      	ldr	r0, [r6, #0]
    19f8:	4b15      	ldr	r3, [pc, #84]	; (1a50 <nm_clkless_wake+0x120>)
    19fa:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    19fc:	9b02      	ldr	r3, [sp, #8]
    19fe:	075b      	lsls	r3, r3, #29
    1a00:	d40a      	bmi.n	1a18 <nm_clkless_wake+0xe8>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    1a02:	22aa      	movs	r2, #170	; 0xaa
    1a04:	4913      	ldr	r1, [pc, #76]	; (1a54 <nm_clkless_wake+0x124>)
    1a06:	4814      	ldr	r0, [pc, #80]	; (1a58 <nm_clkless_wake+0x128>)
    1a08:	4b14      	ldr	r3, [pc, #80]	; (1a5c <nm_clkless_wake+0x12c>)
    1a0a:	4798      	blx	r3
    1a0c:	481b      	ldr	r0, [pc, #108]	; (1a7c <nm_clkless_wake+0x14c>)
    1a0e:	4b15      	ldr	r3, [pc, #84]	; (1a64 <nm_clkless_wake+0x134>)
    1a10:	4798      	blx	r3
    1a12:	200d      	movs	r0, #13
    1a14:	4b14      	ldr	r3, [pc, #80]	; (1a68 <nm_clkless_wake+0x138>)
    1a16:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1a18:	9b02      	ldr	r3, [sp, #8]
    1a1a:	075b      	lsls	r3, r3, #29
    1a1c:	d40e      	bmi.n	1a3c <nm_clkless_wake+0x10c>
    1a1e:	3401      	adds	r4, #1
    1a20:	2103      	movs	r1, #3
    1a22:	0020      	movs	r0, r4
    1a24:	47a8      	blx	r5
    1a26:	2900      	cmp	r1, #0
    1a28:	d0e2      	beq.n	19f0 <nm_clkless_wake+0xc0>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    1a2a:	2102      	movs	r1, #2
    1a2c:	9b03      	ldr	r3, [sp, #12]
    1a2e:	4319      	orrs	r1, r3
    1a30:	2001      	movs	r0, #1
    1a32:	4b0e      	ldr	r3, [pc, #56]	; (1a6c <nm_clkless_wake+0x13c>)
    1a34:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    1a36:	9b02      	ldr	r3, [sp, #8]
    1a38:	075b      	lsls	r3, r3, #29
    1a3a:	d59c      	bpl.n	1976 <nm_clkless_wake+0x46>

_WAKE_EXIT:
	return ret;
}
    1a3c:	9801      	ldr	r0, [sp, #4]
    1a3e:	b004      	add	sp, #16
    1a40:	bc1c      	pop	{r2, r3, r4}
    1a42:	4690      	mov	r8, r2
    1a44:	469a      	mov	sl, r3
    1a46:	46a3      	mov	fp, r4
    1a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	000005d5 	.word	0x000005d5
    1a50:	00001e05 	.word	0x00001e05
    1a54:	00007918 	.word	0x00007918
    1a58:	000071f4 	.word	0x000071f4
    1a5c:	00005ced 	.word	0x00005ced
    1a60:	00007804 	.word	0x00007804
    1a64:	00005e0d 	.word	0x00005e0d
    1a68:	00005d21 	.word	0x00005d21
    1a6c:	00001e11 	.word	0x00001e11
    1a70:	2000000c 	.word	0x2000000c
    1a74:	00005c19 	.word	0x00005c19
    1a78:	00007824 	.word	0x00007824
    1a7c:	00007844 	.word	0x00007844

00001a80 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    1a80:	b500      	push	{lr}
    1a82:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1a84:	a901      	add	r1, sp, #4
    1a86:	4817      	ldr	r0, [pc, #92]	; (1ae4 <enable_interrupts+0x64>)
    1a88:	4b17      	ldr	r3, [pc, #92]	; (1ae8 <enable_interrupts+0x68>)
    1a8a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d11c      	bne.n	1aca <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    1a90:	2180      	movs	r1, #128	; 0x80
    1a92:	0049      	lsls	r1, r1, #1
    1a94:	9b01      	ldr	r3, [sp, #4]
    1a96:	4319      	orrs	r1, r3
    1a98:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    1a9a:	4812      	ldr	r0, [pc, #72]	; (1ae4 <enable_interrupts+0x64>)
    1a9c:	4b13      	ldr	r3, [pc, #76]	; (1aec <enable_interrupts+0x6c>)
    1a9e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1aa0:	2800      	cmp	r0, #0
    1aa2:	d115      	bne.n	1ad0 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1aa4:	a901      	add	r1, sp, #4
    1aa6:	20d0      	movs	r0, #208	; 0xd0
    1aa8:	0140      	lsls	r0, r0, #5
    1aaa:	4b0f      	ldr	r3, [pc, #60]	; (1ae8 <enable_interrupts+0x68>)
    1aac:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1aae:	2800      	cmp	r0, #0
    1ab0:	d111      	bne.n	1ad6 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    1ab2:	2180      	movs	r1, #128	; 0x80
    1ab4:	0249      	lsls	r1, r1, #9
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	4319      	orrs	r1, r3
    1aba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1abc:	20d0      	movs	r0, #208	; 0xd0
    1abe:	0140      	lsls	r0, r0, #5
    1ac0:	4b0a      	ldr	r3, [pc, #40]	; (1aec <enable_interrupts+0x6c>)
    1ac2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1ac4:	2800      	cmp	r0, #0
    1ac6:	d109      	bne.n	1adc <enable_interrupts+0x5c>
    1ac8:	e00a      	b.n	1ae0 <enable_interrupts+0x60>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1aca:	2006      	movs	r0, #6
    1acc:	4240      	negs	r0, r0
    1ace:	e007      	b.n	1ae0 <enable_interrupts+0x60>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1ad0:	2006      	movs	r0, #6
    1ad2:	4240      	negs	r0, r0
    1ad4:	e004      	b.n	1ae0 <enable_interrupts+0x60>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1ad6:	2006      	movs	r0, #6
    1ad8:	4240      	negs	r0, r0
    1ada:	e001      	b.n	1ae0 <enable_interrupts+0x60>
	}
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1adc:	2006      	movs	r0, #6
    1ade:	4240      	negs	r0, r0
	}
	return M2M_SUCCESS;
}
    1ae0:	b003      	add	sp, #12
    1ae2:	bd00      	pop	{pc}
    1ae4:	00001408 	.word	0x00001408
    1ae8:	00001e05 	.word	0x00001e05
    1aec:	00001e11 	.word	0x00001e11

00001af0 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1af0:	b510      	push	{r4, lr}
    1af2:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1af4:	4b27      	ldr	r3, [pc, #156]	; (1b94 <nmi_get_chipid+0xa4>)
    1af6:	681c      	ldr	r4, [r3, #0]
    1af8:	2c00      	cmp	r4, #0
    1afa:	d146      	bne.n	1b8a <nmi_get_chipid+0x9a>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    1afc:	0019      	movs	r1, r3
    1afe:	2080      	movs	r0, #128	; 0x80
    1b00:	0140      	lsls	r0, r0, #5
    1b02:	4b25      	ldr	r3, [pc, #148]	; (1b98 <nmi_get_chipid+0xa8>)
    1b04:	4798      	blx	r3
    1b06:	2800      	cmp	r0, #0
    1b08:	d003      	beq.n	1b12 <nmi_get_chipid+0x22>
			chipid = 0;
    1b0a:	2200      	movs	r2, #0
    1b0c:	4b21      	ldr	r3, [pc, #132]	; (1b94 <nmi_get_chipid+0xa4>)
    1b0e:	601a      	str	r2, [r3, #0]
			return 0;
    1b10:	e03d      	b.n	1b8e <nmi_get_chipid+0x9e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1b12:	a901      	add	r1, sp, #4
    1b14:	4821      	ldr	r0, [pc, #132]	; (1b9c <nmi_get_chipid+0xac>)
    1b16:	4b20      	ldr	r3, [pc, #128]	; (1b98 <nmi_get_chipid+0xa8>)
    1b18:	4798      	blx	r3
    1b1a:	2800      	cmp	r0, #0
    1b1c:	d003      	beq.n	1b26 <nmi_get_chipid+0x36>
			chipid = 0;
    1b1e:	2200      	movs	r2, #0
    1b20:	4b1c      	ldr	r3, [pc, #112]	; (1b94 <nmi_get_chipid+0xa4>)
    1b22:	601a      	str	r2, [r3, #0]
			return 0;
    1b24:	e033      	b.n	1b8e <nmi_get_chipid+0x9e>
		}

		if (chipid == 0x1002a0)  {
    1b26:	4b1b      	ldr	r3, [pc, #108]	; (1b94 <nmi_get_chipid+0xa4>)
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	4a1d      	ldr	r2, [pc, #116]	; (1ba0 <nmi_get_chipid+0xb0>)
    1b2c:	4293      	cmp	r3, r2
    1b2e:	d106      	bne.n	1b3e <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    1b30:	9b01      	ldr	r3, [sp, #4]
    1b32:	2b01      	cmp	r3, #1
    1b34:	d021      	beq.n	1b7a <nmi_get_chipid+0x8a>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    1b36:	4a1b      	ldr	r2, [pc, #108]	; (1ba4 <nmi_get_chipid+0xb4>)
    1b38:	4b16      	ldr	r3, [pc, #88]	; (1b94 <nmi_get_chipid+0xa4>)
    1b3a:	601a      	str	r2, [r3, #0]
    1b3c:	e01d      	b.n	1b7a <nmi_get_chipid+0x8a>
			}
		} else if(chipid == 0x1002b0) {
    1b3e:	4a1a      	ldr	r2, [pc, #104]	; (1ba8 <nmi_get_chipid+0xb8>)
    1b40:	4293      	cmp	r3, r2
    1b42:	d10c      	bne.n	1b5e <nmi_get_chipid+0x6e>
			if(rfrevid == 3) { /* 1002B0 */
    1b44:	9b01      	ldr	r3, [sp, #4]
    1b46:	2b03      	cmp	r3, #3
    1b48:	d017      	beq.n	1b7a <nmi_get_chipid+0x8a>
			} else if(rfrevid == 4) { /* 1002B1 */
    1b4a:	2b04      	cmp	r3, #4
    1b4c:	d103      	bne.n	1b56 <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    1b4e:	4a17      	ldr	r2, [pc, #92]	; (1bac <nmi_get_chipid+0xbc>)
    1b50:	4b10      	ldr	r3, [pc, #64]	; (1b94 <nmi_get_chipid+0xa4>)
    1b52:	601a      	str	r2, [r3, #0]
    1b54:	e011      	b.n	1b7a <nmi_get_chipid+0x8a>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    1b56:	4a16      	ldr	r2, [pc, #88]	; (1bb0 <nmi_get_chipid+0xc0>)
    1b58:	4b0e      	ldr	r3, [pc, #56]	; (1b94 <nmi_get_chipid+0xa4>)
    1b5a:	601a      	str	r2, [r3, #0]
    1b5c:	e00d      	b.n	1b7a <nmi_get_chipid+0x8a>
			}
		} else if(chipid == 0x1000F0) { 
    1b5e:	4a15      	ldr	r2, [pc, #84]	; (1bb4 <nmi_get_chipid+0xc4>)
    1b60:	4293      	cmp	r3, r2
    1b62:	d10a      	bne.n	1b7a <nmi_get_chipid+0x8a>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    1b64:	490b      	ldr	r1, [pc, #44]	; (1b94 <nmi_get_chipid+0xa4>)
    1b66:	20ec      	movs	r0, #236	; 0xec
    1b68:	0380      	lsls	r0, r0, #14
    1b6a:	4b0b      	ldr	r3, [pc, #44]	; (1b98 <nmi_get_chipid+0xa8>)
    1b6c:	4798      	blx	r3
    1b6e:	2800      	cmp	r0, #0
    1b70:	d003      	beq.n	1b7a <nmi_get_chipid+0x8a>
			chipid = 0;
    1b72:	2200      	movs	r2, #0
    1b74:	4b07      	ldr	r3, [pc, #28]	; (1b94 <nmi_get_chipid+0xa4>)
    1b76:	601a      	str	r2, [r3, #0]
			return 0;
    1b78:	e009      	b.n	1b8e <nmi_get_chipid+0x9e>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    1b7a:	4a06      	ldr	r2, [pc, #24]	; (1b94 <nmi_get_chipid+0xa4>)
    1b7c:	4b0e      	ldr	r3, [pc, #56]	; (1bb8 <nmi_get_chipid+0xc8>)
    1b7e:	6811      	ldr	r1, [r2, #0]
    1b80:	400b      	ands	r3, r1
    1b82:	21a0      	movs	r1, #160	; 0xa0
    1b84:	02c9      	lsls	r1, r1, #11
    1b86:	430b      	orrs	r3, r1
    1b88:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    1b8a:	4b02      	ldr	r3, [pc, #8]	; (1b94 <nmi_get_chipid+0xa4>)
    1b8c:	681c      	ldr	r4, [r3, #0]
}
    1b8e:	0020      	movs	r0, r4
    1b90:	b002      	add	sp, #8
    1b92:	bd10      	pop	{r4, pc}
    1b94:	200000c8 	.word	0x200000c8
    1b98:	00001e05 	.word	0x00001e05
    1b9c:	000013f4 	.word	0x000013f4
    1ba0:	001002a0 	.word	0x001002a0
    1ba4:	001002a1 	.word	0x001002a1
    1ba8:	001002b0 	.word	0x001002b0
    1bac:	001002b1 	.word	0x001002b1
    1bb0:	001002b2 	.word	0x001002b2
    1bb4:	001000f0 	.word	0x001000f0
    1bb8:	fff0ffff 	.word	0xfff0ffff

00001bbc <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bbe:	0007      	movs	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1bc0:	4d24      	ldr	r5, [pc, #144]	; (1c54 <wait_for_bootrom+0x98>)
    1bc2:	4c25      	ldr	r4, [pc, #148]	; (1c58 <wait_for_bootrom+0x9c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1bc4:	4e25      	ldr	r6, [pc, #148]	; (1c5c <wait_for_bootrom+0xa0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1bc6:	0028      	movs	r0, r5
    1bc8:	47a0      	blx	r4
		if (reg & 0x80000000) {
    1bca:	2800      	cmp	r0, #0
    1bcc:	db02      	blt.n	1bd4 <wait_for_bootrom+0x18>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1bce:	2001      	movs	r0, #1
    1bd0:	47b0      	blx	r6
	}
    1bd2:	e7f8      	b.n	1bc6 <wait_for_bootrom+0xa>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1bd4:	4822      	ldr	r0, [pc, #136]	; (1c60 <wait_for_bootrom+0xa4>)
    1bd6:	4b20      	ldr	r3, [pc, #128]	; (1c58 <wait_for_bootrom+0x9c>)
    1bd8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    1bda:	07c3      	lsls	r3, r0, #31
    1bdc:	d409      	bmi.n	1bf2 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1bde:	4e1f      	ldr	r6, [pc, #124]	; (1c5c <wait_for_bootrom+0xa0>)
			reg = nm_read_reg(BOOTROM_REG);
    1be0:	4c20      	ldr	r4, [pc, #128]	; (1c64 <wait_for_bootrom+0xa8>)
    1be2:	4d1d      	ldr	r5, [pc, #116]	; (1c58 <wait_for_bootrom+0x9c>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1be4:	2001      	movs	r0, #1
    1be6:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    1be8:	0020      	movs	r0, r4
    1bea:	47a8      	blx	r5

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    1bec:	4b1e      	ldr	r3, [pc, #120]	; (1c68 <wait_for_bootrom+0xac>)
    1bee:	4298      	cmp	r0, r3
    1bf0:	d1f8      	bne.n	1be4 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    1bf2:	2f02      	cmp	r7, #2
    1bf4:	d109      	bne.n	1c0a <wait_for_bootrom+0x4e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1bf6:	491d      	ldr	r1, [pc, #116]	; (1c6c <wait_for_bootrom+0xb0>)
    1bf8:	481d      	ldr	r0, [pc, #116]	; (1c70 <wait_for_bootrom+0xb4>)
    1bfa:	4c1e      	ldr	r4, [pc, #120]	; (1c74 <wait_for_bootrom+0xb8>)
    1bfc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    1bfe:	2180      	movs	r1, #128	; 0x80
    1c00:	0349      	lsls	r1, r1, #13
    1c02:	481d      	ldr	r0, [pc, #116]	; (1c78 <wait_for_bootrom+0xbc>)
    1c04:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    1c06:	2700      	movs	r7, #0
    1c08:	e00e      	b.n	1c28 <wait_for_bootrom+0x6c>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    1c0a:	2f03      	cmp	r7, #3
    1c0c:	d108      	bne.n	1c20 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1c0e:	4917      	ldr	r1, [pc, #92]	; (1c6c <wait_for_bootrom+0xb0>)
    1c10:	4817      	ldr	r0, [pc, #92]	; (1c70 <wait_for_bootrom+0xb4>)
    1c12:	4c18      	ldr	r4, [pc, #96]	; (1c74 <wait_for_bootrom+0xb8>)
    1c14:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    1c16:	2100      	movs	r1, #0
    1c18:	4817      	ldr	r0, [pc, #92]	; (1c78 <wait_for_bootrom+0xbc>)
    1c1a:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    1c1c:	2700      	movs	r7, #0
    1c1e:	e003      	b.n	1c28 <wait_for_bootrom+0x6c>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    1c20:	3f04      	subs	r7, #4
    1c22:	427b      	negs	r3, r7
    1c24:	415f      	adcs	r7, r3
    1c26:	01ff      	lsls	r7, r7, #7
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    1c28:	4b14      	ldr	r3, [pc, #80]	; (1c7c <wait_for_bootrom+0xc0>)
    1c2a:	4798      	blx	r3
    1c2c:	0500      	lsls	r0, r0, #20
    1c2e:	0d00      	lsrs	r0, r0, #20
    1c30:	23e8      	movs	r3, #232	; 0xe8
    1c32:	009b      	lsls	r3, r3, #2
    1c34:	4298      	cmp	r0, r3
    1c36:	d104      	bne.n	1c42 <wait_for_bootrom+0x86>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    1c38:	2002      	movs	r0, #2
    1c3a:	4338      	orrs	r0, r7
    1c3c:	4b10      	ldr	r3, [pc, #64]	; (1c80 <wait_for_bootrom+0xc4>)
    1c3e:	4798      	blx	r3
    1c40:	e002      	b.n	1c48 <wait_for_bootrom+0x8c>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    1c42:	0038      	movs	r0, r7
    1c44:	4b0e      	ldr	r3, [pc, #56]	; (1c80 <wait_for_bootrom+0xc4>)
    1c46:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    1c48:	490e      	ldr	r1, [pc, #56]	; (1c84 <wait_for_bootrom+0xc8>)
    1c4a:	4806      	ldr	r0, [pc, #24]	; (1c64 <wait_for_bootrom+0xa8>)
    1c4c:	4b09      	ldr	r3, [pc, #36]	; (1c74 <wait_for_bootrom+0xb8>)
    1c4e:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    1c50:	2000      	movs	r0, #0
    1c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c54:	00001014 	.word	0x00001014
    1c58:	00001df9 	.word	0x00001df9
    1c5c:	000005d5 	.word	0x000005d5
    1c60:	000207bc 	.word	0x000207bc
    1c64:	000c000c 	.word	0x000c000c
    1c68:	10add09e 	.word	0x10add09e
    1c6c:	3c1cd57d 	.word	0x3c1cd57d
    1c70:	000207ac 	.word	0x000207ac
    1c74:	00001e11 	.word	0x00001e11
    1c78:	0000108c 	.word	0x0000108c
    1c7c:	00001af1 	.word	0x00001af1
    1c80:	000018f5 	.word	0x000018f5
    1c84:	ef522f61 	.word	0xef522f61

00001c88 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1c88:	b570      	push	{r4, r5, r6, lr}
    1c8a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    1c8c:	4b15      	ldr	r3, [pc, #84]	; (1ce4 <wait_for_firmware_start+0x5c>)
    1c8e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1c90:	4b15      	ldr	r3, [pc, #84]	; (1ce8 <wait_for_firmware_start+0x60>)
    1c92:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1c94:	3802      	subs	r0, #2
    1c96:	2801      	cmp	r0, #1
    1c98:	d80c      	bhi.n	1cb4 <wait_for_firmware_start+0x2c>
		regAddress = NMI_REV_REG;
    1c9a:	4b14      	ldr	r3, [pc, #80]	; (1cec <wait_for_firmware_start+0x64>)
    1c9c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    1c9e:	4b14      	ldr	r3, [pc, #80]	; (1cf0 <wait_for_firmware_start+0x68>)
    1ca0:	9300      	str	r3, [sp, #0]
    1ca2:	e007      	b.n	1cb4 <wait_for_firmware_start+0x2c>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1ca4:	2002      	movs	r0, #2
    1ca6:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1ca8:	9801      	ldr	r0, [sp, #4]
    1caa:	47a8      	blx	r5
    1cac:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1cae:	2c00      	cmp	r4, #0
    1cb0:	d105      	bne.n	1cbe <wait_for_firmware_start+0x36>
    1cb2:	e012      	b.n	1cda <wait_for_firmware_start+0x52>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    1cb4:	2401      	movs	r4, #1
    1cb6:	4264      	negs	r4, r4
    1cb8:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1cba:	4e0e      	ldr	r6, [pc, #56]	; (1cf4 <wait_for_firmware_start+0x6c>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1cbc:	4d0e      	ldr	r5, [pc, #56]	; (1cf8 <wait_for_firmware_start+0x70>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    1cbe:	9b00      	ldr	r3, [sp, #0]
    1cc0:	4298      	cmp	r0, r3
    1cc2:	d1ef      	bne.n	1ca4 <wait_for_firmware_start+0x1c>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1cc4:	9a00      	ldr	r2, [sp, #0]
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1cc6:	2000      	movs	r0, #0
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1cc8:	4b07      	ldr	r3, [pc, #28]	; (1ce8 <wait_for_firmware_start+0x60>)
    1cca:	429a      	cmp	r2, r3
    1ccc:	d107      	bne.n	1cde <wait_for_firmware_start+0x56>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    1cce:	2100      	movs	r1, #0
    1cd0:	4804      	ldr	r0, [pc, #16]	; (1ce4 <wait_for_firmware_start+0x5c>)
    1cd2:	4b0a      	ldr	r3, [pc, #40]	; (1cfc <wait_for_firmware_start+0x74>)
    1cd4:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1cd6:	2000      	movs	r0, #0
    1cd8:	e001      	b.n	1cde <wait_for_firmware_start+0x56>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1cda:	2005      	movs	r0, #5
    1cdc:	4240      	negs	r0, r0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    1cde:	b002      	add	sp, #8
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	0000108c 	.word	0x0000108c
    1ce8:	02532636 	.word	0x02532636
    1cec:	000207ac 	.word	0x000207ac
    1cf0:	d75dc1c3 	.word	0xd75dc1c3
    1cf4:	000005d5 	.word	0x000005d5
    1cf8:	00001df9 	.word	0x00001df9
    1cfc:	00001e11 	.word	0x00001e11

00001d00 <chip_deinit>:

sint8 chip_deinit(void)
{
    1d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d02:	b083      	sub	sp, #12
	uint32 reg = 0;
    1d04:	2300      	movs	r3, #0
    1d06:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d08:	a901      	add	r1, sp, #4
    1d0a:	20a0      	movs	r0, #160	; 0xa0
    1d0c:	0140      	lsls	r0, r0, #5
    1d0e:	4b27      	ldr	r3, [pc, #156]	; (1dac <chip_deinit+0xac>)
    1d10:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    1d12:	2800      	cmp	r0, #0
    1d14:	d00a      	beq.n	1d2c <chip_deinit+0x2c>
		M2M_ERR("failed to de-initialize\n");
    1d16:	4a26      	ldr	r2, [pc, #152]	; (1db0 <chip_deinit+0xb0>)
    1d18:	4926      	ldr	r1, [pc, #152]	; (1db4 <chip_deinit+0xb4>)
    1d1a:	4827      	ldr	r0, [pc, #156]	; (1db8 <chip_deinit+0xb8>)
    1d1c:	4b27      	ldr	r3, [pc, #156]	; (1dbc <chip_deinit+0xbc>)
    1d1e:	4798      	blx	r3
    1d20:	4827      	ldr	r0, [pc, #156]	; (1dc0 <chip_deinit+0xc0>)
    1d22:	4b28      	ldr	r3, [pc, #160]	; (1dc4 <chip_deinit+0xc4>)
    1d24:	4798      	blx	r3
    1d26:	200d      	movs	r0, #13
    1d28:	4b27      	ldr	r3, [pc, #156]	; (1dc8 <chip_deinit+0xc8>)
    1d2a:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    1d2c:	4927      	ldr	r1, [pc, #156]	; (1dcc <chip_deinit+0xcc>)
    1d2e:	9b01      	ldr	r3, [sp, #4]
    1d30:	4019      	ands	r1, r3
    1d32:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1d34:	20a0      	movs	r0, #160	; 0xa0
    1d36:	0140      	lsls	r0, r0, #5
    1d38:	4b25      	ldr	r3, [pc, #148]	; (1dd0 <chip_deinit+0xd0>)
    1d3a:	4798      	blx	r3
    1d3c:	0004      	movs	r4, r0
    1d3e:	250a      	movs	r5, #10

	if (ret != M2M_SUCCESS) {
    1d40:	2800      	cmp	r0, #0
    1d42:	d00c      	beq.n	1d5e <chip_deinit+0x5e>
		M2M_ERR("Error while writing reg\n");
    1d44:	4a23      	ldr	r2, [pc, #140]	; (1dd4 <chip_deinit+0xd4>)
    1d46:	491b      	ldr	r1, [pc, #108]	; (1db4 <chip_deinit+0xb4>)
    1d48:	481b      	ldr	r0, [pc, #108]	; (1db8 <chip_deinit+0xb8>)
    1d4a:	4b1c      	ldr	r3, [pc, #112]	; (1dbc <chip_deinit+0xbc>)
    1d4c:	4798      	blx	r3
    1d4e:	4822      	ldr	r0, [pc, #136]	; (1dd8 <chip_deinit+0xd8>)
    1d50:	4b1c      	ldr	r3, [pc, #112]	; (1dc4 <chip_deinit+0xc4>)
    1d52:	4798      	blx	r3
    1d54:	200d      	movs	r0, #13
    1d56:	4b1c      	ldr	r3, [pc, #112]	; (1dc8 <chip_deinit+0xc8>)
    1d58:	4798      	blx	r3
		return ret;
    1d5a:	0020      	movs	r0, r4
    1d5c:	e024      	b.n	1da8 <chip_deinit+0xa8>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d5e:	4e13      	ldr	r6, [pc, #76]	; (1dac <chip_deinit+0xac>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1d60:	4f1b      	ldr	r7, [pc, #108]	; (1dd0 <chip_deinit+0xd0>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d62:	a901      	add	r1, sp, #4
    1d64:	20a0      	movs	r0, #160	; 0xa0
    1d66:	0140      	lsls	r0, r0, #5
    1d68:	47b0      	blx	r6
    1d6a:	1e04      	subs	r4, r0, #0
		if (ret != M2M_SUCCESS) {
    1d6c:	d00d      	beq.n	1d8a <chip_deinit+0x8a>
			M2M_ERR("Error while reading reg\n");
    1d6e:	228f      	movs	r2, #143	; 0x8f
    1d70:	0092      	lsls	r2, r2, #2
    1d72:	4910      	ldr	r1, [pc, #64]	; (1db4 <chip_deinit+0xb4>)
    1d74:	4810      	ldr	r0, [pc, #64]	; (1db8 <chip_deinit+0xb8>)
    1d76:	4b11      	ldr	r3, [pc, #68]	; (1dbc <chip_deinit+0xbc>)
    1d78:	4798      	blx	r3
    1d7a:	4818      	ldr	r0, [pc, #96]	; (1ddc <chip_deinit+0xdc>)
    1d7c:	4b11      	ldr	r3, [pc, #68]	; (1dc4 <chip_deinit+0xc4>)
    1d7e:	4798      	blx	r3
    1d80:	200d      	movs	r0, #13
    1d82:	4b11      	ldr	r3, [pc, #68]	; (1dc8 <chip_deinit+0xc8>)
    1d84:	4798      	blx	r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d86:	0020      	movs	r0, r4
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
    1d88:	e00e      	b.n	1da8 <chip_deinit+0xa8>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    1d8a:	9901      	ldr	r1, [sp, #4]
    1d8c:	054b      	lsls	r3, r1, #21
    1d8e:	d50a      	bpl.n	1da6 <chip_deinit+0xa6>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    1d90:	4b0e      	ldr	r3, [pc, #56]	; (1dcc <chip_deinit+0xcc>)
    1d92:	4019      	ands	r1, r3
    1d94:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1d96:	20a0      	movs	r0, #160	; 0xa0
    1d98:	0140      	lsls	r0, r0, #5
    1d9a:	47b8      	blx	r7
    1d9c:	3d01      	subs	r5, #1
    1d9e:	b2ed      	uxtb	r5, r5
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    1da0:	2d00      	cmp	r5, #0
    1da2:	d1de      	bne.n	1d62 <chip_deinit+0x62>
    1da4:	e000      	b.n	1da8 <chip_deinit+0xa8>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1da6:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
    1da8:	b003      	add	sp, #12
    1daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dac:	00001e05 	.word	0x00001e05
    1db0:	0000022f 	.word	0x0000022f
    1db4:	000077f8 	.word	0x000077f8
    1db8:	000071f4 	.word	0x000071f4
    1dbc:	00005ced 	.word	0x00005ced
    1dc0:	00007890 	.word	0x00007890
    1dc4:	00005e0d 	.word	0x00005e0d
    1dc8:	00005d21 	.word	0x00005d21
    1dcc:	fffffbff 	.word	0xfffffbff
    1dd0:	00001e11 	.word	0x00001e11
    1dd4:	00000235 	.word	0x00000235
    1dd8:	000078a8 	.word	0x000078a8
    1ddc:	000078c0 	.word	0x000078c0

00001de0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1de0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    1de2:	4b01      	ldr	r3, [pc, #4]	; (1de8 <nm_bus_iface_init+0x8>)
    1de4:	4798      	blx	r3

	return ret;
}
    1de6:	bd10      	pop	{r4, pc}
    1de8:	00000705 	.word	0x00000705

00001dec <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1dec:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1dee:	4b01      	ldr	r3, [pc, #4]	; (1df4 <nm_bus_iface_deinit+0x8>)
    1df0:	4798      	blx	r3

	return ret;
}
    1df2:	bd10      	pop	{r4, pc}
    1df4:	00000935 	.word	0x00000935

00001df8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1df8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1dfa:	4b01      	ldr	r3, [pc, #4]	; (1e00 <nm_read_reg+0x8>)
    1dfc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1dfe:	bd10      	pop	{r4, pc}
    1e00:	0000268d 	.word	0x0000268d

00001e04 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1e04:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1e06:	4b01      	ldr	r3, [pc, #4]	; (1e0c <nm_read_reg_with_ret+0x8>)
    1e08:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1e0a:	bd10      	pop	{r4, pc}
    1e0c:	000026a1 	.word	0x000026a1

00001e10 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1e10:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1e12:	4b01      	ldr	r3, [pc, #4]	; (1e18 <nm_write_reg+0x8>)
    1e14:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1e16:	bd10      	pop	{r4, pc}
    1e18:	000026b9 	.word	0x000026b9

00001e1c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1e:	4657      	mov	r7, sl
    1e20:	464e      	mov	r6, r9
    1e22:	4645      	mov	r5, r8
    1e24:	b4e0      	push	{r5, r6, r7}
    1e26:	b082      	sub	sp, #8
    1e28:	4680      	mov	r8, r0
    1e2a:	4689      	mov	r9, r1
    1e2c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1e2e:	4b13      	ldr	r3, [pc, #76]	; (1e7c <nm_read_block+0x60>)
    1e30:	881f      	ldrh	r7, [r3, #0]
    1e32:	3f08      	subs	r7, #8
    1e34:	b2bb      	uxth	r3, r7
    1e36:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1e38:	001e      	movs	r6, r3
    1e3a:	0004      	movs	r4, r0
    1e3c:	429a      	cmp	r2, r3
    1e3e:	d806      	bhi.n	1e4e <nm_read_block+0x32>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1e40:	2100      	movs	r1, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1e42:	b2aa      	uxth	r2, r5
    1e44:	4449      	add	r1, r9
    1e46:	0020      	movs	r0, r4
    1e48:	4b0d      	ldr	r3, [pc, #52]	; (1e80 <nm_read_block+0x64>)
    1e4a:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    1e4c:	e010      	b.n	1e70 <nm_read_block+0x54>
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1e4e:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <nm_read_block+0x64>)
    1e50:	469a      	mov	sl, r3
    1e52:	1a37      	subs	r7, r6, r0
    1e54:	4643      	mov	r3, r8
    1e56:	1ae1      	subs	r1, r4, r3
    1e58:	4449      	add	r1, r9
    1e5a:	9a01      	ldr	r2, [sp, #4]
    1e5c:	0020      	movs	r0, r4
    1e5e:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1e60:	2800      	cmp	r0, #0
    1e62:	d105      	bne.n	1e70 <nm_read_block+0x54>
			u32Sz -= u16MaxTrxSz;
    1e64:	1bad      	subs	r5, r5, r6
    1e66:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1e68:	19a4      	adds	r4, r4, r6
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1e6a:	42b5      	cmp	r5, r6
    1e6c:	d8f2      	bhi.n	1e54 <nm_read_block+0x38>
    1e6e:	e7e8      	b.n	1e42 <nm_read_block+0x26>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    1e70:	b002      	add	sp, #8
    1e72:	bc1c      	pop	{r2, r3, r4}
    1e74:	4690      	mov	r8, r2
    1e76:	4699      	mov	r9, r3
    1e78:	46a2      	mov	sl, r4
    1e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e7c:	20000008 	.word	0x20000008
    1e80:	000027f9 	.word	0x000027f9

00001e84 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e86:	4657      	mov	r7, sl
    1e88:	464e      	mov	r6, r9
    1e8a:	4645      	mov	r5, r8
    1e8c:	b4e0      	push	{r5, r6, r7}
    1e8e:	b082      	sub	sp, #8
    1e90:	4680      	mov	r8, r0
    1e92:	4689      	mov	r9, r1
    1e94:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1e96:	4b13      	ldr	r3, [pc, #76]	; (1ee4 <nm_write_block+0x60>)
    1e98:	881f      	ldrh	r7, [r3, #0]
    1e9a:	3f08      	subs	r7, #8
    1e9c:	b2bb      	uxth	r3, r7
    1e9e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1ea0:	001e      	movs	r6, r3
    1ea2:	0004      	movs	r4, r0
    1ea4:	429a      	cmp	r2, r3
    1ea6:	d806      	bhi.n	1eb6 <nm_write_block+0x32>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1ea8:	2100      	movs	r1, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1eaa:	b2aa      	uxth	r2, r5
    1eac:	4449      	add	r1, r9
    1eae:	0020      	movs	r0, r4
    1eb0:	4b0d      	ldr	r3, [pc, #52]	; (1ee8 <nm_write_block+0x64>)
    1eb2:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    1eb4:	e010      	b.n	1ed8 <nm_write_block+0x54>
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1eb6:	4b0c      	ldr	r3, [pc, #48]	; (1ee8 <nm_write_block+0x64>)
    1eb8:	469a      	mov	sl, r3
    1eba:	1a37      	subs	r7, r6, r0
    1ebc:	4643      	mov	r3, r8
    1ebe:	1ae1      	subs	r1, r4, r3
    1ec0:	4449      	add	r1, r9
    1ec2:	9a01      	ldr	r2, [sp, #4]
    1ec4:	0020      	movs	r0, r4
    1ec6:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1ec8:	2800      	cmp	r0, #0
    1eca:	d105      	bne.n	1ed8 <nm_write_block+0x54>
			u32Sz -= u16MaxTrxSz;
    1ecc:	1bad      	subs	r5, r5, r6
    1ece:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1ed0:	19a4      	adds	r4, r4, r6
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1ed2:	42b5      	cmp	r5, r6
    1ed4:	d8f2      	bhi.n	1ebc <nm_write_block+0x38>
    1ed6:	e7e8      	b.n	1eaa <nm_write_block+0x26>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    1ed8:	b002      	add	sp, #8
    1eda:	bc1c      	pop	{r2, r3, r4}
    1edc:	4690      	mov	r8, r2
    1ede:	4699      	mov	r9, r3
    1ee0:	46a2      	mov	sl, r4
    1ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ee4:	20000008 	.word	0x20000008
    1ee8:	000028d1 	.word	0x000028d1

00001eec <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    1eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eee:	b083      	sub	sp, #12
    1ef0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1ef2:	2300      	movs	r3, #0
    1ef4:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    1ef6:	a901      	add	r1, sp, #4
    1ef8:	4820      	ldr	r0, [pc, #128]	; (1f7c <nm_get_firmware_info+0x90>)
    1efa:	4b21      	ldr	r3, [pc, #132]	; (1f80 <nm_get_firmware_info+0x94>)
    1efc:	4798      	blx	r3
    1efe:	0005      	movs	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    1f00:	4b20      	ldr	r3, [pc, #128]	; (1f84 <nm_get_firmware_info+0x98>)
    1f02:	9a01      	ldr	r2, [sp, #4]
    1f04:	429a      	cmp	r2, r3
    1f06:	d104      	bne.n	1f12 <nm_get_firmware_info+0x26>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    1f08:	a901      	add	r1, sp, #4
    1f0a:	481f      	ldr	r0, [pc, #124]	; (1f88 <nm_get_firmware_info+0x9c>)
    1f0c:	4b1c      	ldr	r3, [pc, #112]	; (1f80 <nm_get_firmware_info+0x94>)
    1f0e:	4798      	blx	r3
    1f10:	0005      	movs	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    1f12:	9b01      	ldr	r3, [sp, #4]
    1f14:	0c1a      	lsrs	r2, r3, #16
    1f16:	1211      	asrs	r1, r2, #8
    1f18:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    1f1a:	1111      	asrs	r1, r2, #4
    1f1c:	260f      	movs	r6, #15
    1f1e:	4031      	ands	r1, r6
    1f20:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    1f22:	4032      	ands	r2, r6
    1f24:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    1f26:	121a      	asrs	r2, r3, #8
    1f28:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    1f2a:	111a      	asrs	r2, r3, #4
    1f2c:	4032      	ands	r2, r6
    1f2e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    1f30:	4033      	ands	r3, r6
    1f32:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    1f34:	4b15      	ldr	r3, [pc, #84]	; (1f8c <nm_get_firmware_info+0xa0>)
    1f36:	4798      	blx	r3
    1f38:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    1f3a:	7923      	ldrb	r3, [r4, #4]
    1f3c:	021a      	lsls	r2, r3, #8
    1f3e:	79a3      	ldrb	r3, [r4, #6]
    1f40:	4033      	ands	r3, r6
    1f42:	4313      	orrs	r3, r2
    1f44:	7960      	ldrb	r0, [r4, #5]
    1f46:	0100      	lsls	r0, r0, #4
    1f48:	27ff      	movs	r7, #255	; 0xff
    1f4a:	4038      	ands	r0, r7
    1f4c:	4303      	orrs	r3, r0
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
    1f4e:	79e0      	ldrb	r0, [r4, #7]
    1f50:	0200      	lsls	r0, r0, #8
    1f52:	7a62      	ldrb	r2, [r4, #9]
    1f54:	4016      	ands	r6, r2
    1f56:	4306      	orrs	r6, r0
    1f58:	7a21      	ldrb	r1, [r4, #8]
    1f5a:	0109      	lsls	r1, r1, #4
    1f5c:	4039      	ands	r1, r7
    1f5e:	0032      	movs	r2, r6
    1f60:	430a      	orrs	r2, r1
    1f62:	490b      	ldr	r1, [pc, #44]	; (1f90 <nm_get_firmware_info+0xa4>)
    1f64:	428a      	cmp	r2, r1
    1f66:	d901      	bls.n	1f6c <nm_get_firmware_info+0x80>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    1f68:	250d      	movs	r5, #13
    1f6a:	426d      	negs	r5, r5
	}
	if(curr_drv_ver >  curr_firm_ver) {
    1f6c:	4a09      	ldr	r2, [pc, #36]	; (1f94 <nm_get_firmware_info+0xa8>)
    1f6e:	4293      	cmp	r3, r2
    1f70:	d801      	bhi.n	1f76 <nm_get_firmware_info+0x8a>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    1f72:	250d      	movs	r5, #13
    1f74:	426d      	negs	r5, r5
	}
	return ret;
}
    1f76:	0028      	movs	r0, r5
    1f78:	b003      	add	sp, #12
    1f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f7c:	000207ac 	.word	0x000207ac
    1f80:	00001e05 	.word	0x00001e05
    1f84:	d75dc1c3 	.word	0xd75dc1c3
    1f88:	00001048 	.word	0x00001048
    1f8c:	00001af1 	.word	0x00001af1
    1f90:	00001330 	.word	0x00001330
    1f94:	0000132f 	.word	0x0000132f

00001f98 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1f98:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1f9a:	2800      	cmp	r0, #0
    1f9c:	d005      	beq.n	1faa <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
    1f9e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1fa0:	1e6b      	subs	r3, r5, #1
    1fa2:	2b03      	cmp	r3, #3
    1fa4:	d902      	bls.n	1fac <nm_drv_init+0x14>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1fa6:	2501      	movs	r5, #1
    1fa8:	e000      	b.n	1fac <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1faa:	2501      	movs	r5, #1
	}
	
	ret = nm_bus_iface_init(NULL);
    1fac:	2000      	movs	r0, #0
    1fae:	4b1f      	ldr	r3, [pc, #124]	; (202c <STACK_SIZE+0x2c>)
    1fb0:	4798      	blx	r3
    1fb2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1fb4:	d00c      	beq.n	1fd0 <nm_drv_init+0x38>
		M2M_ERR("[nmi start]: fail init bus\n");
    1fb6:	2292      	movs	r2, #146	; 0x92
    1fb8:	0052      	lsls	r2, r2, #1
    1fba:	491d      	ldr	r1, [pc, #116]	; (2030 <STACK_SIZE+0x30>)
    1fbc:	481d      	ldr	r0, [pc, #116]	; (2034 <STACK_SIZE+0x34>)
    1fbe:	4b1e      	ldr	r3, [pc, #120]	; (2038 <STACK_SIZE+0x38>)
    1fc0:	4798      	blx	r3
    1fc2:	481e      	ldr	r0, [pc, #120]	; (203c <STACK_SIZE+0x3c>)
    1fc4:	4b1e      	ldr	r3, [pc, #120]	; (2040 <STACK_SIZE+0x40>)
    1fc6:	4798      	blx	r3
    1fc8:	200d      	movs	r0, #13
    1fca:	4b1e      	ldr	r3, [pc, #120]	; (2044 <STACK_SIZE+0x44>)
    1fcc:	4798      	blx	r3
		goto ERR1;
    1fce:	e02b      	b.n	2028 <STACK_SIZE+0x28>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1fd0:	481d      	ldr	r0, [pc, #116]	; (2048 <STACK_SIZE+0x48>)
    1fd2:	4c19      	ldr	r4, [pc, #100]	; (2038 <STACK_SIZE+0x38>)
    1fd4:	47a0      	blx	r4
    1fd6:	4b1d      	ldr	r3, [pc, #116]	; (204c <STACK_SIZE+0x4c>)
    1fd8:	4798      	blx	r3
    1fda:	0001      	movs	r1, r0
    1fdc:	481c      	ldr	r0, [pc, #112]	; (2050 <STACK_SIZE+0x50>)
    1fde:	47a0      	blx	r4
    1fe0:	200d      	movs	r0, #13
    1fe2:	4b18      	ldr	r3, [pc, #96]	; (2044 <STACK_SIZE+0x44>)
    1fe4:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1fe6:	4b1b      	ldr	r3, [pc, #108]	; (2054 <STACK_SIZE+0x54>)
    1fe8:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    1fea:	0028      	movs	r0, r5
    1fec:	4b1a      	ldr	r3, [pc, #104]	; (2058 <STACK_SIZE+0x58>)
    1fee:	4798      	blx	r3
    1ff0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1ff2:	d117      	bne.n	2024 <STACK_SIZE+0x24>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1ff4:	0028      	movs	r0, r5
    1ff6:	4b19      	ldr	r3, [pc, #100]	; (205c <STACK_SIZE+0x5c>)
    1ff8:	4798      	blx	r3
    1ffa:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1ffc:	d112      	bne.n	2024 <STACK_SIZE+0x24>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1ffe:	1ea8      	subs	r0, r5, #2
    2000:	2801      	cmp	r0, #1
    2002:	d911      	bls.n	2028 <STACK_SIZE+0x28>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2004:	4b16      	ldr	r3, [pc, #88]	; (2060 <STACK_SIZE+0x60>)
    2006:	4798      	blx	r3
    2008:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    200a:	d00d      	beq.n	2028 <STACK_SIZE+0x28>
		M2M_ERR("failed to enable interrupts..\n");
    200c:	22ae      	movs	r2, #174	; 0xae
    200e:	0052      	lsls	r2, r2, #1
    2010:	4907      	ldr	r1, [pc, #28]	; (2030 <STACK_SIZE+0x30>)
    2012:	4808      	ldr	r0, [pc, #32]	; (2034 <STACK_SIZE+0x34>)
    2014:	4b08      	ldr	r3, [pc, #32]	; (2038 <STACK_SIZE+0x38>)
    2016:	4798      	blx	r3
    2018:	4812      	ldr	r0, [pc, #72]	; (2064 <STACK_SIZE+0x64>)
    201a:	4b09      	ldr	r3, [pc, #36]	; (2040 <STACK_SIZE+0x40>)
    201c:	4798      	blx	r3
    201e:	200d      	movs	r0, #13
    2020:	4b08      	ldr	r3, [pc, #32]	; (2044 <STACK_SIZE+0x44>)
    2022:	4798      	blx	r3
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2024:	4b10      	ldr	r3, [pc, #64]	; (2068 <STACK_SIZE+0x68>)
    2026:	4798      	blx	r3
ERR1:
	return ret;
}
    2028:	0020      	movs	r0, r4
    202a:	bd70      	pop	{r4, r5, r6, pc}
    202c:	00001de1 	.word	0x00001de1
    2030:	00007928 	.word	0x00007928
    2034:	000071f4 	.word	0x000071f4
    2038:	00005ced 	.word	0x00005ced
    203c:	00007944 	.word	0x00007944
    2040:	00005e0d 	.word	0x00005e0d
    2044:	00005d21 	.word	0x00005d21
    2048:	000074d4 	.word	0x000074d4
    204c:	00001af1 	.word	0x00001af1
    2050:	00007960 	.word	0x00007960
    2054:	000026d1 	.word	0x000026d1
    2058:	00001bbd 	.word	0x00001bbd
    205c:	00001c89 	.word	0x00001c89
    2060:	00001a81 	.word	0x00001a81
    2064:	00007970 	.word	0x00007970
    2068:	00001ded 	.word	0x00001ded

0000206c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    206c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    206e:	4b1c      	ldr	r3, [pc, #112]	; (20e0 <nm_drv_deinit+0x74>)
    2070:	4798      	blx	r3
    2072:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2074:	d00c      	beq.n	2090 <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2076:	22ba      	movs	r2, #186	; 0xba
    2078:	0052      	lsls	r2, r2, #1
    207a:	491a      	ldr	r1, [pc, #104]	; (20e4 <nm_drv_deinit+0x78>)
    207c:	481a      	ldr	r0, [pc, #104]	; (20e8 <nm_drv_deinit+0x7c>)
    207e:	4b1b      	ldr	r3, [pc, #108]	; (20ec <nm_drv_deinit+0x80>)
    2080:	4798      	blx	r3
    2082:	481b      	ldr	r0, [pc, #108]	; (20f0 <nm_drv_deinit+0x84>)
    2084:	4b1b      	ldr	r3, [pc, #108]	; (20f4 <nm_drv_deinit+0x88>)
    2086:	4798      	blx	r3
    2088:	200d      	movs	r0, #13
    208a:	4b1b      	ldr	r3, [pc, #108]	; (20f8 <nm_drv_deinit+0x8c>)
    208c:	4798      	blx	r3
		goto ERR1;
    208e:	e024      	b.n	20da <nm_drv_deinit+0x6e>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2090:	2000      	movs	r0, #0
    2092:	4b1a      	ldr	r3, [pc, #104]	; (20fc <nm_drv_deinit+0x90>)
    2094:	4798      	blx	r3
    2096:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2098:	d00c      	beq.n	20b4 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    209a:	227c      	movs	r2, #124	; 0x7c
    209c:	32ff      	adds	r2, #255	; 0xff
    209e:	4911      	ldr	r1, [pc, #68]	; (20e4 <nm_drv_deinit+0x78>)
    20a0:	4811      	ldr	r0, [pc, #68]	; (20e8 <nm_drv_deinit+0x7c>)
    20a2:	4b12      	ldr	r3, [pc, #72]	; (20ec <nm_drv_deinit+0x80>)
    20a4:	4798      	blx	r3
    20a6:	4816      	ldr	r0, [pc, #88]	; (2100 <nm_drv_deinit+0x94>)
    20a8:	4b12      	ldr	r3, [pc, #72]	; (20f4 <nm_drv_deinit+0x88>)
    20aa:	4798      	blx	r3
    20ac:	200d      	movs	r0, #13
    20ae:	4b12      	ldr	r3, [pc, #72]	; (20f8 <nm_drv_deinit+0x8c>)
    20b0:	4798      	blx	r3
		goto ERR1;
    20b2:	e012      	b.n	20da <nm_drv_deinit+0x6e>
	}

	ret = nm_bus_iface_deinit();
    20b4:	4b13      	ldr	r3, [pc, #76]	; (2104 <nm_drv_deinit+0x98>)
    20b6:	4798      	blx	r3
    20b8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    20ba:	d00c      	beq.n	20d6 <nm_drv_deinit+0x6a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    20bc:	2282      	movs	r2, #130	; 0x82
    20be:	32ff      	adds	r2, #255	; 0xff
    20c0:	4908      	ldr	r1, [pc, #32]	; (20e4 <nm_drv_deinit+0x78>)
    20c2:	4809      	ldr	r0, [pc, #36]	; (20e8 <nm_drv_deinit+0x7c>)
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <nm_drv_deinit+0x80>)
    20c6:	4798      	blx	r3
    20c8:	480f      	ldr	r0, [pc, #60]	; (2108 <nm_drv_deinit+0x9c>)
    20ca:	4b0a      	ldr	r3, [pc, #40]	; (20f4 <nm_drv_deinit+0x88>)
    20cc:	4798      	blx	r3
    20ce:	200d      	movs	r0, #13
    20d0:	4b09      	ldr	r3, [pc, #36]	; (20f8 <nm_drv_deinit+0x8c>)
    20d2:	4798      	blx	r3
		goto ERR1;
    20d4:	e001      	b.n	20da <nm_drv_deinit+0x6e>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    20d6:	4b0d      	ldr	r3, [pc, #52]	; (210c <nm_drv_deinit+0xa0>)
    20d8:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    20da:	0020      	movs	r0, r4
    20dc:	bd10      	pop	{r4, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	00001d01 	.word	0x00001d01
    20e4:	00007934 	.word	0x00007934
    20e8:	000071f4 	.word	0x000071f4
    20ec:	00005ced 	.word	0x00005ced
    20f0:	00007990 	.word	0x00007990
    20f4:	00005e0d 	.word	0x00005e0d
    20f8:	00005d21 	.word	0x00005d21
    20fc:	000031f9 	.word	0x000031f9
    2100:	000079b0 	.word	0x000079b0
    2104:	00001ded 	.word	0x00001ded
    2108:	000079d4 	.word	0x000079d4
    210c:	0000267d 	.word	0x0000267d

00002110 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    2110:	b500      	push	{lr}
    2112:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    2114:	ab01      	add	r3, sp, #4
    2116:	2200      	movs	r2, #0
    2118:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    211a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    211c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    211e:	0019      	movs	r1, r3
    2120:	2003      	movs	r0, #3
    2122:	4b02      	ldr	r3, [pc, #8]	; (212c <nmi_spi_read+0x1c>)
    2124:	4798      	blx	r3
}
    2126:	b005      	add	sp, #20
    2128:	bd00      	pop	{pc}
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	00000809 	.word	0x00000809

00002130 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}
    2132:	b083      	sub	sp, #12
    2134:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2136:	2ecf      	cmp	r6, #207	; 0xcf
    2138:	d004      	beq.n	2144 <spi_cmd_rsp+0x14>
    213a:	0003      	movs	r3, r0
    213c:	333b      	adds	r3, #59	; 0x3b
    213e:	b2db      	uxtb	r3, r3
    2140:	2b01      	cmp	r3, #1
    2142:	d807      	bhi.n	2154 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2144:	2101      	movs	r1, #1
    2146:	466b      	mov	r3, sp
    2148:	1dd8      	adds	r0, r3, #7
    214a:	4b24      	ldr	r3, [pc, #144]	; (21dc <spi_cmd_rsp+0xac>)
    214c:	4798      	blx	r3
			result = N_FAIL;
    214e:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2150:	2800      	cmp	r0, #0
    2152:	d140      	bne.n	21d6 <spi_cmd_rsp+0xa6>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2154:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2156:	466b      	mov	r3, sp
    2158:	1ddd      	adds	r5, r3, #7
    215a:	4f20      	ldr	r7, [pc, #128]	; (21dc <spi_cmd_rsp+0xac>)
    215c:	2101      	movs	r1, #1
    215e:	0028      	movs	r0, r5
    2160:	47b8      	blx	r7
    2162:	2800      	cmp	r0, #0
    2164:	d00d      	beq.n	2182 <spi_cmd_rsp+0x52>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2166:	2228      	movs	r2, #40	; 0x28
    2168:	32ff      	adds	r2, #255	; 0xff
    216a:	491d      	ldr	r1, [pc, #116]	; (21e0 <spi_cmd_rsp+0xb0>)
    216c:	481d      	ldr	r0, [pc, #116]	; (21e4 <spi_cmd_rsp+0xb4>)
    216e:	4b1e      	ldr	r3, [pc, #120]	; (21e8 <spi_cmd_rsp+0xb8>)
    2170:	4798      	blx	r3
    2172:	481e      	ldr	r0, [pc, #120]	; (21ec <spi_cmd_rsp+0xbc>)
    2174:	4b1e      	ldr	r3, [pc, #120]	; (21f0 <spi_cmd_rsp+0xc0>)
    2176:	4798      	blx	r3
    2178:	200d      	movs	r0, #13
    217a:	4b1e      	ldr	r3, [pc, #120]	; (21f4 <spi_cmd_rsp+0xc4>)
    217c:	4798      	blx	r3
			result = N_FAIL;
    217e:	2300      	movs	r3, #0
			goto _fail_;
    2180:	e029      	b.n	21d6 <spi_cmd_rsp+0xa6>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2182:	782b      	ldrb	r3, [r5, #0]
    2184:	42b3      	cmp	r3, r6
    2186:	d005      	beq.n	2194 <spi_cmd_rsp+0x64>
    2188:	3c01      	subs	r4, #1
    218a:	b2e4      	uxtb	r4, r4
    218c:	2c00      	cmp	r4, #0
    218e:	d1e5      	bne.n	215c <spi_cmd_rsp+0x2c>
    2190:	340b      	adds	r4, #11
    2192:	e000      	b.n	2196 <spi_cmd_rsp+0x66>
    2194:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2196:	466b      	mov	r3, sp
    2198:	1ddd      	adds	r5, r3, #7
    219a:	4e10      	ldr	r6, [pc, #64]	; (21dc <spi_cmd_rsp+0xac>)
    219c:	2101      	movs	r1, #1
    219e:	0028      	movs	r0, r5
    21a0:	47b0      	blx	r6
    21a2:	2800      	cmp	r0, #0
    21a4:	d00d      	beq.n	21c2 <spi_cmd_rsp+0x92>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    21a6:	2236      	movs	r2, #54	; 0x36
    21a8:	32ff      	adds	r2, #255	; 0xff
    21aa:	490d      	ldr	r1, [pc, #52]	; (21e0 <spi_cmd_rsp+0xb0>)
    21ac:	480d      	ldr	r0, [pc, #52]	; (21e4 <spi_cmd_rsp+0xb4>)
    21ae:	4b0e      	ldr	r3, [pc, #56]	; (21e8 <spi_cmd_rsp+0xb8>)
    21b0:	4798      	blx	r3
    21b2:	480e      	ldr	r0, [pc, #56]	; (21ec <spi_cmd_rsp+0xbc>)
    21b4:	4b0e      	ldr	r3, [pc, #56]	; (21f0 <spi_cmd_rsp+0xc0>)
    21b6:	4798      	blx	r3
    21b8:	200d      	movs	r0, #13
    21ba:	4b0e      	ldr	r3, [pc, #56]	; (21f4 <spi_cmd_rsp+0xc4>)
    21bc:	4798      	blx	r3
			result = N_FAIL;
    21be:	2300      	movs	r3, #0
			goto _fail_;
    21c0:	e009      	b.n	21d6 <spi_cmd_rsp+0xa6>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    21c2:	782b      	ldrb	r3, [r5, #0]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d005      	beq.n	21d4 <spi_cmd_rsp+0xa4>
    21c8:	3c01      	subs	r4, #1
    21ca:	b2e4      	uxtb	r4, r4
    21cc:	2c00      	cmp	r4, #0
    21ce:	d1e5      	bne.n	219c <spi_cmd_rsp+0x6c>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    21d0:	2301      	movs	r3, #1
    21d2:	e000      	b.n	21d6 <spi_cmd_rsp+0xa6>
    21d4:	2301      	movs	r3, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
    21d6:	0018      	movs	r0, r3
    21d8:	b003      	add	sp, #12
    21da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21dc:	00002111 	.word	0x00002111
    21e0:	00007a3c 	.word	0x00007a3c
    21e4:	000071f4 	.word	0x000071f4
    21e8:	00005ced 	.word	0x00005ced
    21ec:	00007a78 	.word	0x00007a78
    21f0:	00005e0d 	.word	0x00005e0d
    21f4:	00005d21 	.word	0x00005d21

000021f8 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    21f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fa:	465f      	mov	r7, fp
    21fc:	4656      	mov	r6, sl
    21fe:	464d      	mov	r5, r9
    2200:	4644      	mov	r4, r8
    2202:	b4f0      	push	{r4, r5, r6, r7}
    2204:	b083      	sub	sp, #12
    2206:	4682      	mov	sl, r0
    2208:	4689      	mov	r9, r1
    220a:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    220c:	2300      	movs	r3, #0
    220e:	4698      	mov	r8, r3
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2210:	4f3e      	ldr	r7, [pc, #248]	; (230c <spi_data_read+0x114>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    2212:	2380      	movs	r3, #128	; 0x80
    2214:	019b      	lsls	r3, r3, #6
    2216:	4599      	cmp	r9, r3
    2218:	d802      	bhi.n	2220 <spi_data_read+0x28>
			nbytes = sz;
    221a:	464b      	mov	r3, r9
    221c:	b21e      	sxth	r6, r3
    221e:	e001      	b.n	2224 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
    2220:	2680      	movs	r6, #128	; 0x80
    2222:	01b6      	lsls	r6, r6, #6

		/**
			Data Respnose header
		**/
		retry = 10;
    2224:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2226:	466b      	mov	r3, sp
    2228:	1cdd      	adds	r5, r3, #3
    222a:	2101      	movs	r1, #1
    222c:	0028      	movs	r0, r5
    222e:	47b8      	blx	r7
    2230:	2800      	cmp	r0, #0
    2232:	d00d      	beq.n	2250 <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2234:	2258      	movs	r2, #88	; 0x58
    2236:	32ff      	adds	r2, #255	; 0xff
    2238:	4935      	ldr	r1, [pc, #212]	; (2310 <spi_data_read+0x118>)
    223a:	4836      	ldr	r0, [pc, #216]	; (2314 <spi_data_read+0x11c>)
    223c:	4b36      	ldr	r3, [pc, #216]	; (2318 <spi_data_read+0x120>)
    223e:	4798      	blx	r3
    2240:	4836      	ldr	r0, [pc, #216]	; (231c <spi_data_read+0x124>)
    2242:	4b37      	ldr	r3, [pc, #220]	; (2320 <spi_data_read+0x128>)
    2244:	4798      	blx	r3
    2246:	200d      	movs	r0, #13
    2248:	4b36      	ldr	r3, [pc, #216]	; (2324 <spi_data_read+0x12c>)
    224a:	4798      	blx	r3
    224c:	2000      	movs	r0, #0
    224e:	e055      	b.n	22fc <spi_data_read+0x104>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    2250:	782b      	ldrb	r3, [r5, #0]
    2252:	091b      	lsrs	r3, r3, #4
    2254:	2b0f      	cmp	r3, #15
    2256:	d004      	beq.n	2262 <spi_data_read+0x6a>
    2258:	3c01      	subs	r4, #1
    225a:	b224      	sxth	r4, r4
				break;
		} while (retry--);
    225c:	1c63      	adds	r3, r4, #1
    225e:	d1e4      	bne.n	222a <spi_data_read+0x32>
    2260:	e001      	b.n	2266 <spi_data_read+0x6e>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    2262:	2c00      	cmp	r4, #0
    2264:	dc0e      	bgt.n	2284 <spi_data_read+0x8c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2266:	2264      	movs	r2, #100	; 0x64
    2268:	32ff      	adds	r2, #255	; 0xff
    226a:	4929      	ldr	r1, [pc, #164]	; (2310 <spi_data_read+0x118>)
    226c:	4829      	ldr	r0, [pc, #164]	; (2314 <spi_data_read+0x11c>)
    226e:	4c2a      	ldr	r4, [pc, #168]	; (2318 <spi_data_read+0x120>)
    2270:	47a0      	blx	r4
    2272:	466b      	mov	r3, sp
    2274:	78d9      	ldrb	r1, [r3, #3]
    2276:	482c      	ldr	r0, [pc, #176]	; (2328 <spi_data_read+0x130>)
    2278:	47a0      	blx	r4
    227a:	200d      	movs	r0, #13
    227c:	4b29      	ldr	r3, [pc, #164]	; (2324 <spi_data_read+0x12c>)
    227e:	4798      	blx	r3
			result = N_FAIL;
    2280:	2000      	movs	r0, #0
			break;
    2282:	e03b      	b.n	22fc <spi_data_read+0x104>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2284:	b2b6      	uxth	r6, r6
    2286:	4650      	mov	r0, sl
    2288:	4440      	add	r0, r8
    228a:	0031      	movs	r1, r6
    228c:	4b1f      	ldr	r3, [pc, #124]	; (230c <spi_data_read+0x114>)
    228e:	4798      	blx	r3
    2290:	2800      	cmp	r0, #0
    2292:	d00d      	beq.n	22b0 <spi_data_read+0xb8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2294:	22b6      	movs	r2, #182	; 0xb6
    2296:	0052      	lsls	r2, r2, #1
    2298:	491d      	ldr	r1, [pc, #116]	; (2310 <spi_data_read+0x118>)
    229a:	481e      	ldr	r0, [pc, #120]	; (2314 <spi_data_read+0x11c>)
    229c:	4b1e      	ldr	r3, [pc, #120]	; (2318 <spi_data_read+0x120>)
    229e:	4798      	blx	r3
    22a0:	4822      	ldr	r0, [pc, #136]	; (232c <spi_data_read+0x134>)
    22a2:	4b1f      	ldr	r3, [pc, #124]	; (2320 <spi_data_read+0x128>)
    22a4:	4798      	blx	r3
    22a6:	200d      	movs	r0, #13
    22a8:	4b1e      	ldr	r3, [pc, #120]	; (2324 <spi_data_read+0x12c>)
    22aa:	4798      	blx	r3
			result = N_FAIL;
    22ac:	2000      	movs	r0, #0
			break;
    22ae:	e025      	b.n	22fc <spi_data_read+0x104>
		}
		if(!clockless)
    22b0:	465b      	mov	r3, fp
    22b2:	2b00      	cmp	r3, #0
    22b4:	d117      	bne.n	22e6 <spi_data_read+0xee>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    22b6:	4b1e      	ldr	r3, [pc, #120]	; (2330 <spi_data_read+0x138>)
    22b8:	781b      	ldrb	r3, [r3, #0]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d113      	bne.n	22e6 <spi_data_read+0xee>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    22be:	2102      	movs	r1, #2
    22c0:	a801      	add	r0, sp, #4
    22c2:	4b12      	ldr	r3, [pc, #72]	; (230c <spi_data_read+0x114>)
    22c4:	4798      	blx	r3
    22c6:	2800      	cmp	r0, #0
    22c8:	d00d      	beq.n	22e6 <spi_data_read+0xee>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    22ca:	2278      	movs	r2, #120	; 0x78
    22cc:	32ff      	adds	r2, #255	; 0xff
    22ce:	4910      	ldr	r1, [pc, #64]	; (2310 <spi_data_read+0x118>)
    22d0:	4810      	ldr	r0, [pc, #64]	; (2314 <spi_data_read+0x11c>)
    22d2:	4b11      	ldr	r3, [pc, #68]	; (2318 <spi_data_read+0x120>)
    22d4:	4798      	blx	r3
    22d6:	4817      	ldr	r0, [pc, #92]	; (2334 <spi_data_read+0x13c>)
    22d8:	4b11      	ldr	r3, [pc, #68]	; (2320 <spi_data_read+0x128>)
    22da:	4798      	blx	r3
    22dc:	200d      	movs	r0, #13
    22de:	4b11      	ldr	r3, [pc, #68]	; (2324 <spi_data_read+0x12c>)
    22e0:	4798      	blx	r3
					result = N_FAIL;
    22e2:	2000      	movs	r0, #0
					break;
    22e4:	e00a      	b.n	22fc <spi_data_read+0x104>
				}
			}
		}
		ix += nbytes;
    22e6:	4643      	mov	r3, r8
    22e8:	18f3      	adds	r3, r6, r3
    22ea:	b21b      	sxth	r3, r3
    22ec:	4698      	mov	r8, r3
		sz -= nbytes;
    22ee:	464b      	mov	r3, r9
    22f0:	1b9e      	subs	r6, r3, r6
    22f2:	b2b3      	uxth	r3, r6
    22f4:	4699      	mov	r9, r3

	} while (sz);
    22f6:	2b00      	cmp	r3, #0
    22f8:	d18b      	bne.n	2212 <spi_data_read+0x1a>
    22fa:	2001      	movs	r0, #1

	return result;
}
    22fc:	b003      	add	sp, #12
    22fe:	bc3c      	pop	{r2, r3, r4, r5}
    2300:	4690      	mov	r8, r2
    2302:	4699      	mov	r9, r3
    2304:	46a2      	mov	sl, r4
    2306:	46ab      	mov	fp, r5
    2308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	00002111 	.word	0x00002111
    2310:	00007a58 	.word	0x00007a58
    2314:	000071f4 	.word	0x000071f4
    2318:	00005ced 	.word	0x00005ced
    231c:	00007aac 	.word	0x00007aac
    2320:	00005e0d 	.word	0x00005e0d
    2324:	00005d21 	.word	0x00005d21
    2328:	00007ae0 	.word	0x00007ae0
    232c:	00007b10 	.word	0x00007b10
    2330:	200000cc 	.word	0x200000cc
    2334:	00007b40 	.word	0x00007b40

00002338 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2338:	b500      	push	{lr}
    233a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    233c:	ab01      	add	r3, sp, #4
    233e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2340:	2200      	movs	r2, #0
    2342:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2344:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2346:	0019      	movs	r1, r3
    2348:	2003      	movs	r0, #3
    234a:	4b02      	ldr	r3, [pc, #8]	; (2354 <nmi_spi_write+0x1c>)
    234c:	4798      	blx	r3
}
    234e:	b005      	add	sp, #20
    2350:	bd00      	pop	{pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	00000809 	.word	0x00000809

00002358 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	b084      	sub	sp, #16
    235c:	ac08      	add	r4, sp, #32
    235e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2360:	ac01      	add	r4, sp, #4
    2362:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2364:	303f      	adds	r0, #63	; 0x3f
    2366:	b2c4      	uxtb	r4, r0
    2368:	2c0e      	cmp	r4, #14
    236a:	d900      	bls.n	236e <spi_cmd+0x16>
    236c:	e092      	b.n	2494 <spi_cmd+0x13c>
    236e:	00a0      	lsls	r0, r4, #2
    2370:	4c50      	ldr	r4, [pc, #320]	; (24b4 <spi_cmd+0x15c>)
    2372:	5820      	ldr	r0, [r4, r0]
    2374:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2376:	ab01      	add	r3, sp, #4
    2378:	0c0a      	lsrs	r2, r1, #16
    237a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    237c:	0a0a      	lsrs	r2, r1, #8
    237e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2380:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2382:	2105      	movs	r1, #5
		break;
    2384:	e08e      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    2386:	0a0b      	lsrs	r3, r1, #8
    2388:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    238a:	2d00      	cmp	r5, #0
    238c:	d102      	bne.n	2394 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    238e:	aa01      	add	r2, sp, #4
    2390:	7053      	strb	r3, [r2, #1]
    2392:	e004      	b.n	239e <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    2394:	2280      	movs	r2, #128	; 0x80
    2396:	4252      	negs	r2, r2
    2398:	4313      	orrs	r3, r2
    239a:	aa01      	add	r2, sp, #4
    239c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    239e:	ab01      	add	r3, sp, #4
    23a0:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    23a2:	2200      	movs	r2, #0
    23a4:	70da      	strb	r2, [r3, #3]
		len = 5;
    23a6:	2105      	movs	r1, #5
		break;
    23a8:	e07c      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    23aa:	ab01      	add	r3, sp, #4
    23ac:	2200      	movs	r2, #0
    23ae:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    23b0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    23b2:	70da      	strb	r2, [r3, #3]
		len = 5;
    23b4:	2105      	movs	r1, #5
		break;
    23b6:	e075      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    23b8:	ab01      	add	r3, sp, #4
    23ba:	2200      	movs	r2, #0
    23bc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    23be:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    23c0:	70da      	strb	r2, [r3, #3]
		len = 5;
    23c2:	2105      	movs	r1, #5
		break;
    23c4:	e06e      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    23c6:	ab01      	add	r3, sp, #4
    23c8:	22ff      	movs	r2, #255	; 0xff
    23ca:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    23cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    23ce:	70da      	strb	r2, [r3, #3]
		len = 5;
    23d0:	2105      	movs	r1, #5
		break;
    23d2:	e067      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    23d4:	aa01      	add	r2, sp, #4
    23d6:	0c08      	lsrs	r0, r1, #16
    23d8:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    23da:	0a08      	lsrs	r0, r1, #8
    23dc:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    23de:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    23e0:	0a19      	lsrs	r1, r3, #8
    23e2:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    23e4:	7153      	strb	r3, [r2, #5]
		len = 7;
    23e6:	2107      	movs	r1, #7
		break;
    23e8:	e05c      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    23ea:	aa01      	add	r2, sp, #4
    23ec:	0c08      	lsrs	r0, r1, #16
    23ee:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    23f0:	0a08      	lsrs	r0, r1, #8
    23f2:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    23f4:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    23f6:	0c19      	lsrs	r1, r3, #16
    23f8:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    23fa:	0a19      	lsrs	r1, r3, #8
    23fc:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    23fe:	7193      	strb	r3, [r2, #6]
		len = 8;
    2400:	2108      	movs	r1, #8
		break;
    2402:	e04f      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2404:	0a0b      	lsrs	r3, r1, #8
    2406:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2408:	2d00      	cmp	r5, #0
    240a:	d102      	bne.n	2412 <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    240c:	a801      	add	r0, sp, #4
    240e:	7043      	strb	r3, [r0, #1]
    2410:	e004      	b.n	241c <spi_cmd+0xc4>
		if(clockless)  bc[1] |= (1 << 7);
    2412:	2080      	movs	r0, #128	; 0x80
    2414:	4240      	negs	r0, r0
    2416:	4303      	orrs	r3, r0
    2418:	a801      	add	r0, sp, #4
    241a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    241c:	ab01      	add	r3, sp, #4
    241e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2420:	0e11      	lsrs	r1, r2, #24
    2422:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2424:	0c11      	lsrs	r1, r2, #16
    2426:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2428:	0a11      	lsrs	r1, r2, #8
    242a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    242c:	719a      	strb	r2, [r3, #6]
		len = 8;
    242e:	2108      	movs	r1, #8
		break;
    2430:	e038      	b.n	24a4 <spi_cmd+0x14c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2432:	ab01      	add	r3, sp, #4
    2434:	0c08      	lsrs	r0, r1, #16
    2436:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2438:	0a08      	lsrs	r0, r1, #8
    243a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    243c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    243e:	0e11      	lsrs	r1, r2, #24
    2440:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2442:	0c11      	lsrs	r1, r2, #16
    2444:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2446:	0a11      	lsrs	r1, r2, #8
    2448:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    244a:	71da      	strb	r2, [r3, #7]
		len = 9;
    244c:	2109      	movs	r1, #9
		break;
    244e:	e029      	b.n	24a4 <spi_cmd+0x14c>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    2450:	005b      	lsls	r3, r3, #1
    2452:	7810      	ldrb	r0, [r2, #0]
    2454:	4043      	eors	r3, r0
    2456:	5ce3      	ldrb	r3, [r4, r3]
    2458:	3201      	adds	r2, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    245a:	4295      	cmp	r5, r2
    245c:	d1f8      	bne.n	2450 <spi_cmd+0xf8>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    245e:	005b      	lsls	r3, r3, #1
    2460:	aa01      	add	r2, sp, #4
    2462:	5593      	strb	r3, [r2, r6]
    2464:	e001      	b.n	246a <spi_cmd+0x112>
		else
			len-=1;
    2466:	3901      	subs	r1, #1
    2468:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    246a:	b289      	uxth	r1, r1
    246c:	a801      	add	r0, sp, #4
    246e:	4b12      	ldr	r3, [pc, #72]	; (24b8 <spi_cmd+0x160>)
    2470:	4798      	blx	r3
    2472:	2301      	movs	r3, #1
    2474:	2800      	cmp	r0, #0
    2476:	d01a      	beq.n	24ae <spi_cmd+0x156>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2478:	2284      	movs	r2, #132	; 0x84
    247a:	0052      	lsls	r2, r2, #1
    247c:	490f      	ldr	r1, [pc, #60]	; (24bc <spi_cmd+0x164>)
    247e:	4810      	ldr	r0, [pc, #64]	; (24c0 <spi_cmd+0x168>)
    2480:	4b10      	ldr	r3, [pc, #64]	; (24c4 <spi_cmd+0x16c>)
    2482:	4798      	blx	r3
    2484:	4810      	ldr	r0, [pc, #64]	; (24c8 <spi_cmd+0x170>)
    2486:	4b11      	ldr	r3, [pc, #68]	; (24cc <spi_cmd+0x174>)
    2488:	4798      	blx	r3
    248a:	200d      	movs	r0, #13
    248c:	4b10      	ldr	r3, [pc, #64]	; (24d0 <spi_cmd+0x178>)
    248e:	4798      	blx	r3
			result = N_FAIL;
    2490:	2300      	movs	r3, #0
    2492:	e00c      	b.n	24ae <spi_cmd+0x156>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    2494:	2300      	movs	r3, #0
    2496:	e00a      	b.n	24ae <spi_cmd+0x156>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2498:	1e4e      	subs	r6, r1, #1
    249a:	aa01      	add	r2, sp, #4
    249c:	1995      	adds	r5, r2, r6
    249e:	237f      	movs	r3, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    24a0:	4c0c      	ldr	r4, [pc, #48]	; (24d4 <spi_cmd+0x17c>)
    24a2:	e7d5      	b.n	2450 <spi_cmd+0xf8>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    24a4:	4b0c      	ldr	r3, [pc, #48]	; (24d8 <spi_cmd+0x180>)
    24a6:	781b      	ldrb	r3, [r3, #0]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d1dc      	bne.n	2466 <spi_cmd+0x10e>
    24ac:	e7f4      	b.n	2498 <spi_cmd+0x140>
			result = N_FAIL;
		}
	}

	return result;
}
    24ae:	0018      	movs	r0, r3
    24b0:	b004      	add	sp, #16
    24b2:	bd70      	pop	{r4, r5, r6, pc}
    24b4:	000079f0 	.word	0x000079f0
    24b8:	00002339 	.word	0x00002339
    24bc:	00008044 	.word	0x00008044
    24c0:	000071f4 	.word	0x000071f4
    24c4:	00005ced 	.word	0x00005ced
    24c8:	00007b74 	.word	0x00007b74
    24cc:	00005e0d 	.word	0x00005e0d
    24d0:	00005d21 	.word	0x00005d21
    24d4:	00007f34 	.word	0x00007f34
    24d8:	200000cc 	.word	0x200000cc

000024dc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	b082      	sub	sp, #8
    24e0:	0004      	movs	r4, r0
    24e2:	000a      	movs	r2, r1
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    24e4:	2830      	cmp	r0, #48	; 0x30
    24e6:	d902      	bls.n	24ee <spi_write_reg+0x12>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    24e8:	2300      	movs	r3, #0
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    24ea:	25c9      	movs	r5, #201	; 0xc9
    24ec:	e001      	b.n	24f2 <spi_write_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
    24ee:	2301      	movs	r3, #1
	if (addr <= 0x30)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    24f0:	25c3      	movs	r5, #195	; 0xc3
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    24f2:	9300      	str	r3, [sp, #0]
    24f4:	2304      	movs	r3, #4
    24f6:	0021      	movs	r1, r4
    24f8:	0028      	movs	r0, r5
    24fa:	4e17      	ldr	r6, [pc, #92]	; (2558 <spi_write_reg+0x7c>)
    24fc:	47b0      	blx	r6
	if (result != N_OK) {
    24fe:	2801      	cmp	r0, #1
    2500:	d00d      	beq.n	251e <spi_write_reg+0x42>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2502:	22ec      	movs	r2, #236	; 0xec
    2504:	32ff      	adds	r2, #255	; 0xff
    2506:	4915      	ldr	r1, [pc, #84]	; (255c <spi_write_reg+0x80>)
    2508:	4815      	ldr	r0, [pc, #84]	; (2560 <spi_write_reg+0x84>)
    250a:	4d16      	ldr	r5, [pc, #88]	; (2564 <spi_write_reg+0x88>)
    250c:	47a8      	blx	r5
    250e:	0021      	movs	r1, r4
    2510:	4815      	ldr	r0, [pc, #84]	; (2568 <spi_write_reg+0x8c>)
    2512:	47a8      	blx	r5
    2514:	200d      	movs	r0, #13
    2516:	4b15      	ldr	r3, [pc, #84]	; (256c <spi_write_reg+0x90>)
    2518:	4798      	blx	r3
		return N_FAIL;
    251a:	2000      	movs	r0, #0
    251c:	e01a      	b.n	2554 <spi_write_reg+0x78>
	}

	result = spi_cmd_rsp(cmd);
    251e:	0028      	movs	r0, r5
    2520:	4b13      	ldr	r3, [pc, #76]	; (2570 <spi_write_reg+0x94>)
    2522:	4798      	blx	r3
    2524:	0003      	movs	r3, r0
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	return N_OK;
    2526:	2001      	movs	r0, #1
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
    2528:	2b01      	cmp	r3, #1
    252a:	d013      	beq.n	2554 <spi_write_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    252c:	22f2      	movs	r2, #242	; 0xf2
    252e:	32ff      	adds	r2, #255	; 0xff
    2530:	490a      	ldr	r1, [pc, #40]	; (255c <spi_write_reg+0x80>)
    2532:	480b      	ldr	r0, [pc, #44]	; (2560 <spi_write_reg+0x84>)
    2534:	4d0b      	ldr	r5, [pc, #44]	; (2564 <spi_write_reg+0x88>)
    2536:	47a8      	blx	r5
    2538:	0021      	movs	r1, r4
    253a:	480e      	ldr	r0, [pc, #56]	; (2574 <spi_write_reg+0x98>)
    253c:	47a8      	blx	r5
    253e:	200d      	movs	r0, #13
    2540:	4b0a      	ldr	r3, [pc, #40]	; (256c <spi_write_reg+0x90>)
    2542:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2544:	2300      	movs	r3, #0
    2546:	9300      	str	r3, [sp, #0]
    2548:	2200      	movs	r2, #0
    254a:	2100      	movs	r1, #0
    254c:	20cf      	movs	r0, #207	; 0xcf
    254e:	4c02      	ldr	r4, [pc, #8]	; (2558 <spi_write_reg+0x7c>)
    2550:	47a0      	blx	r4
		return N_FAIL;
    2552:	2000      	movs	r0, #0
	}

	return result;

#endif
}
    2554:	b002      	add	sp, #8
    2556:	bd70      	pop	{r4, r5, r6, pc}
    2558:	00002359 	.word	0x00002359
    255c:	00008034 	.word	0x00008034
    2560:	000071f4 	.word	0x000071f4
    2564:	00005ced 	.word	0x00005ced
    2568:	00007ba0 	.word	0x00007ba0
    256c:	00005d21 	.word	0x00005d21
    2570:	00002131 	.word	0x00002131
    2574:	00007bcc 	.word	0x00007bcc

00002578 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2578:	b5f0      	push	{r4, r5, r6, r7, lr}
    257a:	b087      	sub	sp, #28
    257c:	1e04      	subs	r4, r0, #0
    257e:	9103      	str	r1, [sp, #12]
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    2580:	2cff      	cmp	r4, #255	; 0xff
    2582:	d902      	bls.n	258a <spi_read_reg+0x12>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    2584:	2600      	movs	r6, #0
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    2586:	25ca      	movs	r5, #202	; 0xca
    2588:	e001      	b.n	258e <spi_read_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
    258a:	2601      	movs	r6, #1
	if (addr <= 0xff)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    258c:	25c4      	movs	r5, #196	; 0xc4
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    258e:	9600      	str	r6, [sp, #0]
    2590:	2304      	movs	r3, #4
    2592:	2200      	movs	r2, #0
    2594:	0021      	movs	r1, r4
    2596:	0028      	movs	r0, r5
    2598:	4f2a      	ldr	r7, [pc, #168]	; (2644 <spi_read_reg+0xcc>)
    259a:	47b8      	blx	r7
	if (result != N_OK) {
    259c:	2801      	cmp	r0, #1
    259e:	d00c      	beq.n	25ba <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    25a0:	4a29      	ldr	r2, [pc, #164]	; (2648 <spi_read_reg+0xd0>)
    25a2:	492a      	ldr	r1, [pc, #168]	; (264c <spi_read_reg+0xd4>)
    25a4:	482a      	ldr	r0, [pc, #168]	; (2650 <spi_read_reg+0xd8>)
    25a6:	4d2b      	ldr	r5, [pc, #172]	; (2654 <spi_read_reg+0xdc>)
    25a8:	47a8      	blx	r5
    25aa:	0021      	movs	r1, r4
    25ac:	482a      	ldr	r0, [pc, #168]	; (2658 <spi_read_reg+0xe0>)
    25ae:	47a8      	blx	r5
    25b0:	200d      	movs	r0, #13
    25b2:	4b2a      	ldr	r3, [pc, #168]	; (265c <spi_read_reg+0xe4>)
    25b4:	4798      	blx	r3
		return N_FAIL;
    25b6:	2000      	movs	r0, #0
    25b8:	e041      	b.n	263e <spi_read_reg+0xc6>
	}

	result = spi_cmd_rsp(cmd);
    25ba:	0028      	movs	r0, r5
    25bc:	4b28      	ldr	r3, [pc, #160]	; (2660 <spi_read_reg+0xe8>)
    25be:	4798      	blx	r3
	if (result != N_OK) {
    25c0:	2801      	cmp	r0, #1
    25c2:	d013      	beq.n	25ec <spi_read_reg+0x74>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    25c4:	4a27      	ldr	r2, [pc, #156]	; (2664 <spi_read_reg+0xec>)
    25c6:	4921      	ldr	r1, [pc, #132]	; (264c <spi_read_reg+0xd4>)
    25c8:	4821      	ldr	r0, [pc, #132]	; (2650 <spi_read_reg+0xd8>)
    25ca:	4d22      	ldr	r5, [pc, #136]	; (2654 <spi_read_reg+0xdc>)
    25cc:	47a8      	blx	r5
    25ce:	0021      	movs	r1, r4
    25d0:	4825      	ldr	r0, [pc, #148]	; (2668 <spi_read_reg+0xf0>)
    25d2:	47a8      	blx	r5
    25d4:	200d      	movs	r0, #13
    25d6:	4b21      	ldr	r3, [pc, #132]	; (265c <spi_read_reg+0xe4>)
    25d8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    25da:	2300      	movs	r3, #0
    25dc:	9300      	str	r3, [sp, #0]
    25de:	2200      	movs	r2, #0
    25e0:	2100      	movs	r1, #0
    25e2:	20cf      	movs	r0, #207	; 0xcf
    25e4:	4c17      	ldr	r4, [pc, #92]	; (2644 <spi_read_reg+0xcc>)
    25e6:	47a0      	blx	r4
		return N_FAIL;
    25e8:	2000      	movs	r0, #0
    25ea:	e028      	b.n	263e <spi_read_reg+0xc6>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    25ec:	0032      	movs	r2, r6
    25ee:	2104      	movs	r1, #4
    25f0:	a805      	add	r0, sp, #20
    25f2:	4b1e      	ldr	r3, [pc, #120]	; (266c <spi_read_reg+0xf4>)
    25f4:	4798      	blx	r3
	if (result != N_OK) {
    25f6:	2801      	cmp	r0, #1
    25f8:	d013      	beq.n	2622 <spi_read_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    25fa:	4a1d      	ldr	r2, [pc, #116]	; (2670 <spi_read_reg+0xf8>)
    25fc:	4913      	ldr	r1, [pc, #76]	; (264c <spi_read_reg+0xd4>)
    25fe:	4814      	ldr	r0, [pc, #80]	; (2650 <spi_read_reg+0xd8>)
    2600:	4b14      	ldr	r3, [pc, #80]	; (2654 <spi_read_reg+0xdc>)
    2602:	4798      	blx	r3
    2604:	481b      	ldr	r0, [pc, #108]	; (2674 <spi_read_reg+0xfc>)
    2606:	4b1c      	ldr	r3, [pc, #112]	; (2678 <spi_read_reg+0x100>)
    2608:	4798      	blx	r3
    260a:	200d      	movs	r0, #13
    260c:	4b13      	ldr	r3, [pc, #76]	; (265c <spi_read_reg+0xe4>)
    260e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2610:	2300      	movs	r3, #0
    2612:	9300      	str	r3, [sp, #0]
    2614:	2200      	movs	r2, #0
    2616:	2100      	movs	r1, #0
    2618:	20cf      	movs	r0, #207	; 0xcf
    261a:	4c0a      	ldr	r4, [pc, #40]	; (2644 <spi_read_reg+0xcc>)
    261c:	47a0      	blx	r4
		return N_FAIL;
    261e:	2000      	movs	r0, #0
    2620:	e00d      	b.n	263e <spi_read_reg+0xc6>
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    2622:	aa05      	add	r2, sp, #20
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2624:	7853      	ldrb	r3, [r2, #1]
    2626:	0219      	lsls	r1, r3, #8
    2628:	7893      	ldrb	r3, [r2, #2]
    262a:	041b      	lsls	r3, r3, #16
    262c:	430b      	orrs	r3, r1
    262e:	7811      	ldrb	r1, [r2, #0]
    2630:	430b      	orrs	r3, r1
    2632:	78d2      	ldrb	r2, [r2, #3]
    2634:	0612      	lsls	r2, r2, #24
    2636:	4313      	orrs	r3, r2
    2638:	9a03      	ldr	r2, [sp, #12]
    263a:	6013      	str	r3, [r2, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    263c:	2001      	movs	r0, #1
}
    263e:	b007      	add	sp, #28
    2640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00002359 	.word	0x00002359
    2648:	00000245 	.word	0x00000245
    264c:	00007a48 	.word	0x00007a48
    2650:	000071f4 	.word	0x000071f4
    2654:	00005ced 	.word	0x00005ced
    2658:	00007c04 	.word	0x00007c04
    265c:	00005d21 	.word	0x00005d21
    2660:	00002131 	.word	0x00002131
    2664:	0000024b 	.word	0x0000024b
    2668:	00007c30 	.word	0x00007c30
    266c:	000021f9 	.word	0x000021f9
    2670:	00000253 	.word	0x00000253
    2674:	00007c64 	.word	0x00007c64
    2678:	00005e0d 	.word	0x00005e0d

0000267c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    267c:	2200      	movs	r2, #0
    267e:	4b02      	ldr	r3, [pc, #8]	; (2688 <nm_spi_deinit+0xc>)
    2680:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    2682:	2000      	movs	r0, #0
    2684:	4770      	bx	lr
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	200000cc 	.word	0x200000cc

0000268c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    268c:	b500      	push	{lr}
    268e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2690:	a901      	add	r1, sp, #4
    2692:	4b02      	ldr	r3, [pc, #8]	; (269c <nm_spi_read_reg+0x10>)
    2694:	4798      	blx	r3

	return u32Val;
}
    2696:	9801      	ldr	r0, [sp, #4]
    2698:	b003      	add	sp, #12
    269a:	bd00      	pop	{pc}
    269c:	00002579 	.word	0x00002579

000026a0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    26a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    26a2:	4b04      	ldr	r3, [pc, #16]	; (26b4 <nm_spi_read_reg_with_ret+0x14>)
    26a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    26a6:	2300      	movs	r3, #0
    26a8:	2801      	cmp	r0, #1
    26aa:	d000      	beq.n	26ae <nm_spi_read_reg_with_ret+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    26ac:	3b06      	subs	r3, #6

	return s8Ret;
}
    26ae:	0018      	movs	r0, r3
    26b0:	bd10      	pop	{r4, pc}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	00002579 	.word	0x00002579

000026b8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    26b8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    26ba:	4b04      	ldr	r3, [pc, #16]	; (26cc <nm_spi_write_reg+0x14>)
    26bc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    26be:	2300      	movs	r3, #0
    26c0:	2801      	cmp	r0, #1
    26c2:	d000      	beq.n	26c6 <nm_spi_write_reg+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    26c4:	3b06      	subs	r3, #6

	return s8Ret;
}
    26c6:	0018      	movs	r0, r3
    26c8:	bd10      	pop	{r4, pc}
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	000024dd 	.word	0x000024dd

000026d0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    26d0:	b510      	push	{r4, lr}
    26d2:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg =0;
    26d4:	2300      	movs	r3, #0
    26d6:	9300      	str	r3, [sp, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    26d8:	4a36      	ldr	r2, [pc, #216]	; (27b4 <nm_spi_init+0xe4>)
    26da:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    26dc:	4669      	mov	r1, sp
    26de:	4836      	ldr	r0, [pc, #216]	; (27b8 <nm_spi_init+0xe8>)
    26e0:	4b36      	ldr	r3, [pc, #216]	; (27bc <nm_spi_init+0xec>)
    26e2:	4798      	blx	r3
    26e4:	2800      	cmp	r0, #0
    26e6:	d120      	bne.n	272a <nm_spi_init+0x5a>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    26e8:	2201      	movs	r2, #1
    26ea:	4b32      	ldr	r3, [pc, #200]	; (27b4 <nm_spi_init+0xe4>)
    26ec:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    26ee:	4a34      	ldr	r2, [pc, #208]	; (27c0 <nm_spi_init+0xf0>)
    26f0:	4934      	ldr	r1, [pc, #208]	; (27c4 <nm_spi_init+0xf4>)
    26f2:	4835      	ldr	r0, [pc, #212]	; (27c8 <nm_spi_init+0xf8>)
    26f4:	4b35      	ldr	r3, [pc, #212]	; (27cc <nm_spi_init+0xfc>)
    26f6:	4798      	blx	r3
    26f8:	4835      	ldr	r0, [pc, #212]	; (27d0 <nm_spi_init+0x100>)
    26fa:	4b36      	ldr	r3, [pc, #216]	; (27d4 <nm_spi_init+0x104>)
    26fc:	4798      	blx	r3
    26fe:	200d      	movs	r0, #13
    2700:	4b35      	ldr	r3, [pc, #212]	; (27d8 <nm_spi_init+0x108>)
    2702:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2704:	4669      	mov	r1, sp
    2706:	482c      	ldr	r0, [pc, #176]	; (27b8 <nm_spi_init+0xe8>)
    2708:	4b2c      	ldr	r3, [pc, #176]	; (27bc <nm_spi_init+0xec>)
    270a:	4798      	blx	r3
    270c:	1e04      	subs	r4, r0, #0
    270e:	d10c      	bne.n	272a <nm_spi_init+0x5a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2710:	22b2      	movs	r2, #178	; 0xb2
    2712:	0092      	lsls	r2, r2, #2
    2714:	492b      	ldr	r1, [pc, #172]	; (27c4 <nm_spi_init+0xf4>)
    2716:	482c      	ldr	r0, [pc, #176]	; (27c8 <nm_spi_init+0xf8>)
    2718:	4b2c      	ldr	r3, [pc, #176]	; (27cc <nm_spi_init+0xfc>)
    271a:	4798      	blx	r3
    271c:	482f      	ldr	r0, [pc, #188]	; (27dc <nm_spi_init+0x10c>)
    271e:	4b2d      	ldr	r3, [pc, #180]	; (27d4 <nm_spi_init+0x104>)
    2720:	4798      	blx	r3
    2722:	200d      	movs	r0, #13
    2724:	4b2c      	ldr	r3, [pc, #176]	; (27d8 <nm_spi_init+0x108>)
    2726:	4798      	blx	r3
			return 0;
    2728:	e040      	b.n	27ac <nm_spi_init+0xdc>
		}
	}
	if(gu8Crc_off == 0)
    272a:	4b22      	ldr	r3, [pc, #136]	; (27b4 <nm_spi_init+0xe4>)
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d119      	bne.n	2766 <nm_spi_init+0x96>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    2732:	337c      	adds	r3, #124	; 0x7c
    2734:	9900      	ldr	r1, [sp, #0]
    2736:	4399      	bics	r1, r3
    2738:	3b2c      	subs	r3, #44	; 0x2c
    273a:	4319      	orrs	r1, r3
    273c:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    273e:	481e      	ldr	r0, [pc, #120]	; (27b8 <nm_spi_init+0xe8>)
    2740:	4b27      	ldr	r3, [pc, #156]	; (27e0 <nm_spi_init+0x110>)
    2742:	4798      	blx	r3
    2744:	1e04      	subs	r4, r0, #0
    2746:	d10b      	bne.n	2760 <nm_spi_init+0x90>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2748:	4a26      	ldr	r2, [pc, #152]	; (27e4 <nm_spi_init+0x114>)
    274a:	491e      	ldr	r1, [pc, #120]	; (27c4 <nm_spi_init+0xf4>)
    274c:	481e      	ldr	r0, [pc, #120]	; (27c8 <nm_spi_init+0xf8>)
    274e:	4b1f      	ldr	r3, [pc, #124]	; (27cc <nm_spi_init+0xfc>)
    2750:	4798      	blx	r3
    2752:	4825      	ldr	r0, [pc, #148]	; (27e8 <nm_spi_init+0x118>)
    2754:	4b1f      	ldr	r3, [pc, #124]	; (27d4 <nm_spi_init+0x104>)
    2756:	4798      	blx	r3
    2758:	200d      	movs	r0, #13
    275a:	4b1f      	ldr	r3, [pc, #124]	; (27d8 <nm_spi_init+0x108>)
    275c:	4798      	blx	r3
			return 0;
    275e:	e025      	b.n	27ac <nm_spi_init+0xdc>
		}
		gu8Crc_off = 1;
    2760:	2201      	movs	r2, #1
    2762:	4b14      	ldr	r3, [pc, #80]	; (27b4 <nm_spi_init+0xe4>)
    2764:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    2766:	a901      	add	r1, sp, #4
    2768:	2080      	movs	r0, #128	; 0x80
    276a:	0140      	lsls	r0, r0, #5
    276c:	4b13      	ldr	r3, [pc, #76]	; (27bc <nm_spi_init+0xec>)
    276e:	4798      	blx	r3
    2770:	2800      	cmp	r0, #0
    2772:	d10e      	bne.n	2792 <nm_spi_init+0xc2>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2774:	22b7      	movs	r2, #183	; 0xb7
    2776:	0092      	lsls	r2, r2, #2
    2778:	4912      	ldr	r1, [pc, #72]	; (27c4 <nm_spi_init+0xf4>)
    277a:	4813      	ldr	r0, [pc, #76]	; (27c8 <nm_spi_init+0xf8>)
    277c:	4b13      	ldr	r3, [pc, #76]	; (27cc <nm_spi_init+0xfc>)
    277e:	4798      	blx	r3
    2780:	481a      	ldr	r0, [pc, #104]	; (27ec <nm_spi_init+0x11c>)
    2782:	4b14      	ldr	r3, [pc, #80]	; (27d4 <nm_spi_init+0x104>)
    2784:	4798      	blx	r3
    2786:	200d      	movs	r0, #13
    2788:	4b13      	ldr	r3, [pc, #76]	; (27d8 <nm_spi_init+0x108>)
    278a:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    278c:	2406      	movs	r4, #6
    278e:	4264      	negs	r4, r4
    2790:	e00c      	b.n	27ac <nm_spi_init+0xdc>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2792:	4c09      	ldr	r4, [pc, #36]	; (27b8 <nm_spi_init+0xe8>)
    2794:	0020      	movs	r0, r4
    2796:	4b16      	ldr	r3, [pc, #88]	; (27f0 <nm_spi_init+0x120>)
    2798:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    279a:	2370      	movs	r3, #112	; 0x70
    279c:	0001      	movs	r1, r0
    279e:	4399      	bics	r1, r3
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    27a0:	3b20      	subs	r3, #32
    27a2:	4319      	orrs	r1, r3
    27a4:	0020      	movs	r0, r4
    27a6:	4b13      	ldr	r3, [pc, #76]	; (27f4 <nm_spi_init+0x124>)
    27a8:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    27aa:	2400      	movs	r4, #0
}
    27ac:	0020      	movs	r0, r4
    27ae:	b002      	add	sp, #8
    27b0:	bd10      	pop	{r4, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	200000cc 	.word	0x200000cc
    27b8:	0000e824 	.word	0x0000e824
    27bc:	00002579 	.word	0x00002579
    27c0:	000002c5 	.word	0x000002c5
    27c4:	00007f1c 	.word	0x00007f1c
    27c8:	000071f4 	.word	0x000071f4
    27cc:	00005ced 	.word	0x00005ced
    27d0:	00007c84 	.word	0x00007c84
    27d4:	00005e0d 	.word	0x00005e0d
    27d8:	00005d21 	.word	0x00005d21
    27dc:	00007cd4 	.word	0x00007cd4
    27e0:	000024dd 	.word	0x000024dd
    27e4:	000002d2 	.word	0x000002d2
    27e8:	00007d00 	.word	0x00007d00
    27ec:	00007d34 	.word	0x00007d34
    27f0:	0000268d 	.word	0x0000268d
    27f4:	000026b9 	.word	0x000026b9

000027f8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    27f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27fa:	b083      	sub	sp, #12
    27fc:	0004      	movs	r4, r0
    27fe:	000e      	movs	r6, r1
    2800:	0015      	movs	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2802:	2300      	movs	r3, #0
    2804:	9300      	str	r3, [sp, #0]
    2806:	0013      	movs	r3, r2
    2808:	2200      	movs	r2, #0
    280a:	0001      	movs	r1, r0
    280c:	20c8      	movs	r0, #200	; 0xc8
    280e:	4f24      	ldr	r7, [pc, #144]	; (28a0 <nm_spi_read_block+0xa8>)
    2810:	47b8      	blx	r7
	if (result != N_OK) {
    2812:	2801      	cmp	r0, #1
    2814:	d00c      	beq.n	2830 <nm_spi_read_block+0x38>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2816:	229d      	movs	r2, #157	; 0x9d
    2818:	0092      	lsls	r2, r2, #2
    281a:	4922      	ldr	r1, [pc, #136]	; (28a4 <nm_spi_read_block+0xac>)
    281c:	4822      	ldr	r0, [pc, #136]	; (28a8 <nm_spi_read_block+0xb0>)
    281e:	4d23      	ldr	r5, [pc, #140]	; (28ac <nm_spi_read_block+0xb4>)
    2820:	47a8      	blx	r5
    2822:	0021      	movs	r1, r4
    2824:	4822      	ldr	r0, [pc, #136]	; (28b0 <nm_spi_read_block+0xb8>)
    2826:	47a8      	blx	r5
    2828:	200d      	movs	r0, #13
    282a:	4b22      	ldr	r3, [pc, #136]	; (28b4 <nm_spi_read_block+0xbc>)
    282c:	4798      	blx	r3
    282e:	e033      	b.n	2898 <nm_spi_read_block+0xa0>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    2830:	20c8      	movs	r0, #200	; 0xc8
    2832:	4b21      	ldr	r3, [pc, #132]	; (28b8 <nm_spi_read_block+0xc0>)
    2834:	4798      	blx	r3
	if (result != N_OK) {
    2836:	2801      	cmp	r0, #1
    2838:	d012      	beq.n	2860 <nm_spi_read_block+0x68>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    283a:	4a20      	ldr	r2, [pc, #128]	; (28bc <nm_spi_read_block+0xc4>)
    283c:	4919      	ldr	r1, [pc, #100]	; (28a4 <nm_spi_read_block+0xac>)
    283e:	481a      	ldr	r0, [pc, #104]	; (28a8 <nm_spi_read_block+0xb0>)
    2840:	4d1a      	ldr	r5, [pc, #104]	; (28ac <nm_spi_read_block+0xb4>)
    2842:	47a8      	blx	r5
    2844:	0021      	movs	r1, r4
    2846:	481e      	ldr	r0, [pc, #120]	; (28c0 <nm_spi_read_block+0xc8>)
    2848:	47a8      	blx	r5
    284a:	200d      	movs	r0, #13
    284c:	4b19      	ldr	r3, [pc, #100]	; (28b4 <nm_spi_read_block+0xbc>)
    284e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2850:	2300      	movs	r3, #0
    2852:	9300      	str	r3, [sp, #0]
    2854:	2200      	movs	r2, #0
    2856:	2100      	movs	r1, #0
    2858:	20cf      	movs	r0, #207	; 0xcf
    285a:	4c11      	ldr	r4, [pc, #68]	; (28a0 <nm_spi_read_block+0xa8>)
    285c:	47a0      	blx	r4
    285e:	e01b      	b.n	2898 <nm_spi_read_block+0xa0>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2860:	2200      	movs	r2, #0
    2862:	0029      	movs	r1, r5
    2864:	0030      	movs	r0, r6
    2866:	4b17      	ldr	r3, [pc, #92]	; (28c4 <nm_spi_read_block+0xcc>)
    2868:	4798      	blx	r3
    286a:	0003      	movs	r3, r0
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    286c:	2000      	movs	r0, #0

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
	if (result != N_OK) {
    286e:	2b01      	cmp	r3, #1
    2870:	d014      	beq.n	289c <nm_spi_read_block+0xa4>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2872:	22a1      	movs	r2, #161	; 0xa1
    2874:	0092      	lsls	r2, r2, #2
    2876:	490b      	ldr	r1, [pc, #44]	; (28a4 <nm_spi_read_block+0xac>)
    2878:	480b      	ldr	r0, [pc, #44]	; (28a8 <nm_spi_read_block+0xb0>)
    287a:	4b0c      	ldr	r3, [pc, #48]	; (28ac <nm_spi_read_block+0xb4>)
    287c:	4798      	blx	r3
    287e:	4812      	ldr	r0, [pc, #72]	; (28c8 <nm_spi_read_block+0xd0>)
    2880:	4b12      	ldr	r3, [pc, #72]	; (28cc <nm_spi_read_block+0xd4>)
    2882:	4798      	blx	r3
    2884:	200d      	movs	r0, #13
    2886:	4b0b      	ldr	r3, [pc, #44]	; (28b4 <nm_spi_read_block+0xbc>)
    2888:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    288a:	2300      	movs	r3, #0
    288c:	9300      	str	r3, [sp, #0]
    288e:	2200      	movs	r2, #0
    2890:	2100      	movs	r1, #0
    2892:	20cf      	movs	r0, #207	; 0xcf
    2894:	4c02      	ldr	r4, [pc, #8]	; (28a0 <nm_spi_read_block+0xa8>)
    2896:	47a0      	blx	r4
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    2898:	2006      	movs	r0, #6
    289a:	4240      	negs	r0, r0

	return s8Ret;
}
    289c:	b003      	add	sp, #12
    289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a0:	00002359 	.word	0x00002359
    28a4:	00007f28 	.word	0x00007f28
    28a8:	000071f4 	.word	0x000071f4
    28ac:	00005ced 	.word	0x00005ced
    28b0:	00007d58 	.word	0x00007d58
    28b4:	00005d21 	.word	0x00005d21
    28b8:	00002131 	.word	0x00002131
    28bc:	0000027a 	.word	0x0000027a
    28c0:	00007d88 	.word	0x00007d88
    28c4:	000021f9 	.word	0x000021f9
    28c8:	00007dc0 	.word	0x00007dc0
    28cc:	00005e0d 	.word	0x00005e0d

000028d0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    28d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28d2:	4657      	mov	r7, sl
    28d4:	b480      	push	{r7}
    28d6:	b086      	sub	sp, #24
    28d8:	0004      	movs	r4, r0
    28da:	468a      	mov	sl, r1
    28dc:	0015      	movs	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    28de:	2300      	movs	r3, #0
    28e0:	9300      	str	r3, [sp, #0]
    28e2:	0013      	movs	r3, r2
    28e4:	2200      	movs	r2, #0
    28e6:	0001      	movs	r1, r0
    28e8:	20c7      	movs	r0, #199	; 0xc7
    28ea:	4e54      	ldr	r6, [pc, #336]	; (2a3c <nm_spi_write_block+0x16c>)
    28ec:	47b0      	blx	r6
	if (result != N_OK) {
    28ee:	2801      	cmp	r0, #1
    28f0:	d00b      	beq.n	290a <nm_spi_write_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    28f2:	4a53      	ldr	r2, [pc, #332]	; (2a40 <nm_spi_write_block+0x170>)
    28f4:	4953      	ldr	r1, [pc, #332]	; (2a44 <nm_spi_write_block+0x174>)
    28f6:	4854      	ldr	r0, [pc, #336]	; (2a48 <nm_spi_write_block+0x178>)
    28f8:	4d54      	ldr	r5, [pc, #336]	; (2a4c <nm_spi_write_block+0x17c>)
    28fa:	47a8      	blx	r5
    28fc:	0021      	movs	r1, r4
    28fe:	4854      	ldr	r0, [pc, #336]	; (2a50 <nm_spi_write_block+0x180>)
    2900:	47a8      	blx	r5
    2902:	200d      	movs	r0, #13
    2904:	4b53      	ldr	r3, [pc, #332]	; (2a54 <nm_spi_write_block+0x184>)
    2906:	4798      	blx	r3
    2908:	e092      	b.n	2a30 <nm_spi_write_block+0x160>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    290a:	20c7      	movs	r0, #199	; 0xc7
    290c:	4b52      	ldr	r3, [pc, #328]	; (2a58 <nm_spi_write_block+0x188>)
    290e:	4798      	blx	r3
	if (result != N_OK) {
    2910:	2801      	cmp	r0, #1
    2912:	d012      	beq.n	293a <nm_spi_write_block+0x6a>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2914:	4a51      	ldr	r2, [pc, #324]	; (2a5c <nm_spi_write_block+0x18c>)
    2916:	494b      	ldr	r1, [pc, #300]	; (2a44 <nm_spi_write_block+0x174>)
    2918:	484b      	ldr	r0, [pc, #300]	; (2a48 <nm_spi_write_block+0x178>)
    291a:	4d4c      	ldr	r5, [pc, #304]	; (2a4c <nm_spi_write_block+0x17c>)
    291c:	47a8      	blx	r5
    291e:	0021      	movs	r1, r4
    2920:	484f      	ldr	r0, [pc, #316]	; (2a60 <nm_spi_write_block+0x190>)
    2922:	47a8      	blx	r5
    2924:	200d      	movs	r0, #13
    2926:	4b4b      	ldr	r3, [pc, #300]	; (2a54 <nm_spi_write_block+0x184>)
    2928:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    292a:	2300      	movs	r3, #0
    292c:	9300      	str	r3, [sp, #0]
    292e:	2200      	movs	r2, #0
    2930:	2100      	movs	r1, #0
    2932:	20cf      	movs	r0, #207	; 0xcf
    2934:	4c41      	ldr	r4, [pc, #260]	; (2a3c <nm_spi_write_block+0x16c>)
    2936:	47a0      	blx	r4
    2938:	e07a      	b.n	2a30 <nm_spi_write_block+0x160>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    293a:	2200      	movs	r2, #0
    293c:	ab05      	add	r3, sp, #20
    293e:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2940:	2600      	movs	r6, #0
    2942:	2780      	movs	r7, #128	; 0x80
    2944:	01bf      	lsls	r7, r7, #6
    2946:	466b      	mov	r3, sp
    2948:	81df      	strh	r7, [r3, #14]
    294a:	1c2c      	adds	r4, r5, #0
    294c:	42bd      	cmp	r5, r7
    294e:	d901      	bls.n	2954 <nm_spi_write_block+0x84>
    2950:	466b      	mov	r3, sp
    2952:	89dc      	ldrh	r4, [r3, #14]
    2954:	b2a4      	uxth	r4, r4

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    2956:	2e00      	cmp	r6, #0
    2958:	d104      	bne.n	2964 <nm_spi_write_block+0x94>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    295a:	2303      	movs	r3, #3
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    295c:	42bd      	cmp	r5, r7
    295e:	d905      	bls.n	296c <nm_spi_write_block+0x9c>
				order = 0x3;
			else
				order = 0x1;
    2960:	3b02      	subs	r3, #2
    2962:	e003      	b.n	296c <nm_spi_write_block+0x9c>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    2964:	2300      	movs	r3, #0
    2966:	42af      	cmp	r7, r5
    2968:	415b      	adcs	r3, r3
    296a:	3302      	adds	r3, #2
		}
		cmd |= order;
    296c:	200b      	movs	r0, #11
    296e:	aa02      	add	r2, sp, #8
    2970:	4694      	mov	ip, r2
    2972:	4460      	add	r0, ip
    2974:	2210      	movs	r2, #16
    2976:	4252      	negs	r2, r2
    2978:	4313      	orrs	r3, r2
    297a:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    297c:	2101      	movs	r1, #1
    297e:	4b39      	ldr	r3, [pc, #228]	; (2a64 <nm_spi_write_block+0x194>)
    2980:	4798      	blx	r3
    2982:	2800      	cmp	r0, #0
    2984:	d00c      	beq.n	29a0 <nm_spi_write_block+0xd0>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2986:	22d4      	movs	r2, #212	; 0xd4
    2988:	0052      	lsls	r2, r2, #1
    298a:	4937      	ldr	r1, [pc, #220]	; (2a68 <nm_spi_write_block+0x198>)
    298c:	482e      	ldr	r0, [pc, #184]	; (2a48 <nm_spi_write_block+0x178>)
    298e:	4b2f      	ldr	r3, [pc, #188]	; (2a4c <nm_spi_write_block+0x17c>)
    2990:	4798      	blx	r3
    2992:	4836      	ldr	r0, [pc, #216]	; (2a6c <nm_spi_write_block+0x19c>)
    2994:	4b36      	ldr	r3, [pc, #216]	; (2a70 <nm_spi_write_block+0x1a0>)
    2996:	4798      	blx	r3
    2998:	200d      	movs	r0, #13
    299a:	4b2e      	ldr	r3, [pc, #184]	; (2a54 <nm_spi_write_block+0x184>)
    299c:	4798      	blx	r3
    299e:	e031      	b.n	2a04 <nm_spi_write_block+0x134>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    29a0:	4653      	mov	r3, sl
    29a2:	1998      	adds	r0, r3, r6
    29a4:	0021      	movs	r1, r4
    29a6:	4b2f      	ldr	r3, [pc, #188]	; (2a64 <nm_spi_write_block+0x194>)
    29a8:	4798      	blx	r3
    29aa:	2800      	cmp	r0, #0
    29ac:	d00c      	beq.n	29c8 <nm_spi_write_block+0xf8>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    29ae:	22b2      	movs	r2, #178	; 0xb2
    29b0:	32ff      	adds	r2, #255	; 0xff
    29b2:	492d      	ldr	r1, [pc, #180]	; (2a68 <nm_spi_write_block+0x198>)
    29b4:	4824      	ldr	r0, [pc, #144]	; (2a48 <nm_spi_write_block+0x178>)
    29b6:	4b25      	ldr	r3, [pc, #148]	; (2a4c <nm_spi_write_block+0x17c>)
    29b8:	4798      	blx	r3
    29ba:	482e      	ldr	r0, [pc, #184]	; (2a74 <nm_spi_write_block+0x1a4>)
    29bc:	4b2c      	ldr	r3, [pc, #176]	; (2a70 <nm_spi_write_block+0x1a0>)
    29be:	4798      	blx	r3
    29c0:	200d      	movs	r0, #13
    29c2:	4b24      	ldr	r3, [pc, #144]	; (2a54 <nm_spi_write_block+0x184>)
    29c4:	4798      	blx	r3
    29c6:	e01d      	b.n	2a04 <nm_spi_write_block+0x134>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    29c8:	4b2b      	ldr	r3, [pc, #172]	; (2a78 <nm_spi_write_block+0x1a8>)
    29ca:	781b      	ldrb	r3, [r3, #0]
    29cc:	2b00      	cmp	r3, #0
    29ce:	d112      	bne.n	29f6 <nm_spi_write_block+0x126>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    29d0:	2102      	movs	r1, #2
    29d2:	a805      	add	r0, sp, #20
    29d4:	4b23      	ldr	r3, [pc, #140]	; (2a64 <nm_spi_write_block+0x194>)
    29d6:	4798      	blx	r3
    29d8:	2800      	cmp	r0, #0
    29da:	d00c      	beq.n	29f6 <nm_spi_write_block+0x126>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    29dc:	22bc      	movs	r2, #188	; 0xbc
    29de:	32ff      	adds	r2, #255	; 0xff
    29e0:	4921      	ldr	r1, [pc, #132]	; (2a68 <nm_spi_write_block+0x198>)
    29e2:	4819      	ldr	r0, [pc, #100]	; (2a48 <nm_spi_write_block+0x178>)
    29e4:	4b19      	ldr	r3, [pc, #100]	; (2a4c <nm_spi_write_block+0x17c>)
    29e6:	4798      	blx	r3
    29e8:	4824      	ldr	r0, [pc, #144]	; (2a7c <nm_spi_write_block+0x1ac>)
    29ea:	4b21      	ldr	r3, [pc, #132]	; (2a70 <nm_spi_write_block+0x1a0>)
    29ec:	4798      	blx	r3
    29ee:	200d      	movs	r0, #13
    29f0:	4b18      	ldr	r3, [pc, #96]	; (2a54 <nm_spi_write_block+0x184>)
    29f2:	4798      	blx	r3
    29f4:	e006      	b.n	2a04 <nm_spi_write_block+0x134>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    29f6:	19a3      	adds	r3, r4, r6
    29f8:	b21e      	sxth	r6, r3
		sz -= nbytes;
    29fa:	1b2d      	subs	r5, r5, r4
    29fc:	b2ad      	uxth	r5, r5
	} while (sz);
    29fe:	2d00      	cmp	r5, #0
    2a00:	d1a3      	bne.n	294a <nm_spi_write_block+0x7a>
    2a02:	e013      	b.n	2a2c <nm_spi_write_block+0x15c>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2a04:	4a1e      	ldr	r2, [pc, #120]	; (2a80 <nm_spi_write_block+0x1b0>)
    2a06:	490f      	ldr	r1, [pc, #60]	; (2a44 <nm_spi_write_block+0x174>)
    2a08:	480f      	ldr	r0, [pc, #60]	; (2a48 <nm_spi_write_block+0x178>)
    2a0a:	4b10      	ldr	r3, [pc, #64]	; (2a4c <nm_spi_write_block+0x17c>)
    2a0c:	4798      	blx	r3
    2a0e:	481d      	ldr	r0, [pc, #116]	; (2a84 <nm_spi_write_block+0x1b4>)
    2a10:	4b17      	ldr	r3, [pc, #92]	; (2a70 <nm_spi_write_block+0x1a0>)
    2a12:	4798      	blx	r3
    2a14:	200d      	movs	r0, #13
    2a16:	4b0f      	ldr	r3, [pc, #60]	; (2a54 <nm_spi_write_block+0x184>)
    2a18:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2a1a:	2300      	movs	r3, #0
    2a1c:	9300      	str	r3, [sp, #0]
    2a1e:	2200      	movs	r2, #0
    2a20:	2100      	movs	r1, #0
    2a22:	20cf      	movs	r0, #207	; 0xcf
    2a24:	4c05      	ldr	r4, [pc, #20]	; (2a3c <nm_spi_write_block+0x16c>)
    2a26:	47a0      	blx	r4
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2a28:	2000      	movs	r0, #0
    2a2a:	e003      	b.n	2a34 <nm_spi_write_block+0x164>
    2a2c:	2000      	movs	r0, #0
    2a2e:	e001      	b.n	2a34 <nm_spi_write_block+0x164>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2a30:	2006      	movs	r0, #6
    2a32:	4240      	negs	r0, r0

	return s8Ret;
}
    2a34:	b006      	add	sp, #24
    2a36:	bc04      	pop	{r2}
    2a38:	4692      	mov	sl, r2
    2a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a3c:	00002359 	.word	0x00002359
    2a40:	0000020f 	.word	0x0000020f
    2a44:	00007a2c 	.word	0x00007a2c
    2a48:	000071f4 	.word	0x000071f4
    2a4c:	00005ced 	.word	0x00005ced
    2a50:	00007de8 	.word	0x00007de8
    2a54:	00005d21 	.word	0x00005d21
    2a58:	00002131 	.word	0x00002131
    2a5c:	00000215 	.word	0x00000215
    2a60:	00007e18 	.word	0x00007e18
    2a64:	00002339 	.word	0x00002339
    2a68:	00007a68 	.word	0x00007a68
    2a6c:	00007e50 	.word	0x00007e50
    2a70:	00005e0d 	.word	0x00005e0d
    2a74:	00007e88 	.word	0x00007e88
    2a78:	200000cc 	.word	0x200000cc
    2a7c:	00007ebc 	.word	0x00007ebc
    2a80:	00000226 	.word	0x00000226
    2a84:	00007ef4 	.word	0x00007ef4

00002a88 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    2a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8a:	465f      	mov	r7, fp
    2a8c:	4656      	mov	r6, sl
    2a8e:	464d      	mov	r5, r9
    2a90:	4644      	mov	r4, r8
    2a92:	b4f0      	push	{r4, r5, r6, r7}
    2a94:	b085      	sub	sp, #20
    2a96:	9002      	str	r0, [sp, #8]
    2a98:	000e      	movs	r6, r1
    2a9a:	9203      	str	r2, [sp, #12]
    2a9c:	001f      	movs	r7, r3
    2a9e:	ab0e      	add	r3, sp, #56	; 0x38
    2aa0:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    2aa2:	2c00      	cmp	r4, #0
    2aa4:	d052      	beq.n	2b4c <Socket_ReadSocketData+0xc4>
    2aa6:	0103      	lsls	r3, r0, #4
    2aa8:	492c      	ldr	r1, [pc, #176]	; (2b5c <Socket_ReadSocketData+0xd4>)
    2aaa:	585b      	ldr	r3, [r3, r1]
    2aac:	2b00      	cmp	r3, #0
    2aae:	d04d      	beq.n	2b4c <Socket_ReadSocketData+0xc4>
    2ab0:	0103      	lsls	r3, r0, #4
    2ab2:	18cb      	adds	r3, r1, r3
    2ab4:	889b      	ldrh	r3, [r3, #4]
    2ab6:	b29b      	uxth	r3, r3
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d047      	beq.n	2b4c <Socket_ReadSocketData+0xc4>
    2abc:	0103      	lsls	r3, r0, #4
    2abe:	18cb      	adds	r3, r1, r3
    2ac0:	7a9b      	ldrb	r3, [r3, #10]
    2ac2:	2b01      	cmp	r3, #1
    2ac4:	d142      	bne.n	2b4c <Socket_ReadSocketData+0xc4>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    2ac6:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2ac8:	0103      	lsls	r3, r0, #4
    2aca:	4699      	mov	r9, r3
    2acc:	000b      	movs	r3, r1
    2ace:	444b      	add	r3, r9
    2ad0:	469b      	mov	fp, r3
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2ad2:	46d8      	mov	r8, fp
    2ad4:	9701      	str	r7, [sp, #4]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2ad6:	465b      	mov	r3, fp
    2ad8:	889b      	ldrh	r3, [r3, #4]
			if(s16Diff > 0)
    2ada:	1ae3      	subs	r3, r4, r3
    2adc:	b21b      	sxth	r3, r3
    2ade:	2b00      	cmp	r3, #0
    2ae0:	dd04      	ble.n	2aec <Socket_ReadSocketData+0x64>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2ae2:	4643      	mov	r3, r8
    2ae4:	889d      	ldrh	r5, [r3, #4]
    2ae6:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    2ae8:	2300      	movs	r3, #0
    2aea:	e001      	b.n	2af0 <Socket_ReadSocketData+0x68>
    2aec:	0025      	movs	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    2aee:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    2af0:	4a1a      	ldr	r2, [pc, #104]	; (2b5c <Socket_ReadSocketData+0xd4>)
    2af2:	4649      	mov	r1, r9
    2af4:	5889      	ldr	r1, [r1, r2]
    2af6:	002a      	movs	r2, r5
    2af8:	9801      	ldr	r0, [sp, #4]
    2afa:	4f19      	ldr	r7, [pc, #100]	; (2b60 <Socket_ReadSocketData+0xd8>)
    2afc:	47b8      	blx	r7
    2afe:	2800      	cmp	r0, #0
    2b00:	d11b      	bne.n	2b3a <Socket_ReadSocketData+0xb2>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    2b02:	4b16      	ldr	r3, [pc, #88]	; (2b5c <Socket_ReadSocketData+0xd4>)
    2b04:	464a      	mov	r2, r9
    2b06:	58d3      	ldr	r3, [r2, r3]
    2b08:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2b0a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2b0c:	88f3      	ldrh	r3, [r6, #6]
    2b0e:	1b5b      	subs	r3, r3, r5
    2b10:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
    2b12:	4b14      	ldr	r3, [pc, #80]	; (2b64 <Socket_ReadSocketData+0xdc>)
    2b14:	681b      	ldr	r3, [r3, #0]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d005      	beq.n	2b26 <Socket_ReadSocketData+0x9e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2b1a:	4b12      	ldr	r3, [pc, #72]	; (2b64 <Socket_ReadSocketData+0xdc>)
    2b1c:	681b      	ldr	r3, [r3, #0]
    2b1e:	0032      	movs	r2, r6
    2b20:	9903      	ldr	r1, [sp, #12]
    2b22:	9802      	ldr	r0, [sp, #8]
    2b24:	4798      	blx	r3

				u16ReadCount -= u16Read;
    2b26:	1b64      	subs	r4, r4, r5
    2b28:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2b2a:	9b01      	ldr	r3, [sp, #4]
    2b2c:	469c      	mov	ip, r3
    2b2e:	44ac      	add	ip, r5
    2b30:	4663      	mov	r3, ip
    2b32:	9301      	str	r3, [sp, #4]
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    2b34:	2c00      	cmp	r4, #0
    2b36:	d1ce      	bne.n	2ad6 <Socket_ReadSocketData+0x4e>
    2b38:	e008      	b.n	2b4c <Socket_ReadSocketData+0xc4>
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2b3a:	480b      	ldr	r0, [pc, #44]	; (2b68 <Socket_ReadSocketData+0xe0>)
    2b3c:	4d0b      	ldr	r5, [pc, #44]	; (2b6c <Socket_ReadSocketData+0xe4>)
    2b3e:	47a8      	blx	r5
    2b40:	0021      	movs	r1, r4
    2b42:	480b      	ldr	r0, [pc, #44]	; (2b70 <Socket_ReadSocketData+0xe8>)
    2b44:	47a8      	blx	r5
    2b46:	200d      	movs	r0, #13
    2b48:	4b0a      	ldr	r3, [pc, #40]	; (2b74 <Socket_ReadSocketData+0xec>)
    2b4a:	4798      	blx	r3
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    2b4c:	b005      	add	sp, #20
    2b4e:	bc3c      	pop	{r2, r3, r4, r5}
    2b50:	4690      	mov	r8, r2
    2b52:	4699      	mov	r9, r3
    2b54:	46a2      	mov	sl, r4
    2b56:	46ab      	mov	fp, r5
    2b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	2000023c 	.word	0x2000023c
    2b60:	000010b1 	.word	0x000010b1
    2b64:	200002ec 	.word	0x200002ec
    2b68:	000074d4 	.word	0x000074d4
    2b6c:	00005ced 	.word	0x00005ced
    2b70:	0000804c 	.word	0x0000804c
    2b74:	00005d21 	.word	0x00005d21

00002b78 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    2b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b7a:	464f      	mov	r7, r9
    2b7c:	4646      	mov	r6, r8
    2b7e:	b4c0      	push	{r6, r7}
    2b80:	b09b      	sub	sp, #108	; 0x6c
    2b82:	000d      	movs	r5, r1
    2b84:	0014      	movs	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
    2b86:	2841      	cmp	r0, #65	; 0x41
    2b88:	d11a      	bne.n	2bc0 <m2m_ip_cb+0x48>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2b8a:	2300      	movs	r3, #0
    2b8c:	2204      	movs	r2, #4
    2b8e:	a909      	add	r1, sp, #36	; 0x24
    2b90:	0020      	movs	r0, r4
    2b92:	4caa      	ldr	r4, [pc, #680]	; (2e3c <m2m_ip_cb+0x2c4>)
    2b94:	47a0      	blx	r4
    2b96:	2800      	cmp	r0, #0
    2b98:	d000      	beq.n	2b9c <m2m_ip_cb+0x24>
    2b9a:	e149      	b.n	2e30 <m2m_ip_cb+0x2b8>
		{
			strBind.status = strBindReply.s8Status;
    2b9c:	ab09      	add	r3, sp, #36	; 0x24
    2b9e:	785a      	ldrb	r2, [r3, #1]
    2ba0:	ab05      	add	r3, sp, #20
    2ba2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2ba4:	4ba6      	ldr	r3, [pc, #664]	; (2e40 <m2m_ip_cb+0x2c8>)
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d100      	bne.n	2bae <m2m_ip_cb+0x36>
    2bac:	e140      	b.n	2e30 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2bae:	4ba4      	ldr	r3, [pc, #656]	; (2e40 <m2m_ip_cb+0x2c8>)
    2bb0:	681b      	ldr	r3, [r3, #0]
    2bb2:	aa09      	add	r2, sp, #36	; 0x24
    2bb4:	2000      	movs	r0, #0
    2bb6:	5610      	ldrsb	r0, [r2, r0]
    2bb8:	aa05      	add	r2, sp, #20
    2bba:	2101      	movs	r1, #1
    2bbc:	4798      	blx	r3
    2bbe:	e137      	b.n	2e30 <m2m_ip_cb+0x2b8>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2bc0:	2842      	cmp	r0, #66	; 0x42
    2bc2:	d11a      	bne.n	2bfa <m2m_ip_cb+0x82>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2bc4:	2300      	movs	r3, #0
    2bc6:	2204      	movs	r2, #4
    2bc8:	a909      	add	r1, sp, #36	; 0x24
    2bca:	0020      	movs	r0, r4
    2bcc:	4c9b      	ldr	r4, [pc, #620]	; (2e3c <m2m_ip_cb+0x2c4>)
    2bce:	47a0      	blx	r4
    2bd0:	2800      	cmp	r0, #0
    2bd2:	d000      	beq.n	2bd6 <m2m_ip_cb+0x5e>
    2bd4:	e12c      	b.n	2e30 <m2m_ip_cb+0x2b8>
		{
			strListen.status = strListenReply.s8Status;
    2bd6:	ab09      	add	r3, sp, #36	; 0x24
    2bd8:	785a      	ldrb	r2, [r3, #1]
    2bda:	ab05      	add	r3, sp, #20
    2bdc:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2bde:	4b98      	ldr	r3, [pc, #608]	; (2e40 <m2m_ip_cb+0x2c8>)
    2be0:	681b      	ldr	r3, [r3, #0]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d100      	bne.n	2be8 <m2m_ip_cb+0x70>
    2be6:	e123      	b.n	2e30 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2be8:	4b95      	ldr	r3, [pc, #596]	; (2e40 <m2m_ip_cb+0x2c8>)
    2bea:	681b      	ldr	r3, [r3, #0]
    2bec:	aa09      	add	r2, sp, #36	; 0x24
    2bee:	2000      	movs	r0, #0
    2bf0:	5610      	ldrsb	r0, [r2, r0]
    2bf2:	aa05      	add	r2, sp, #20
    2bf4:	2102      	movs	r1, #2
    2bf6:	4798      	blx	r3
    2bf8:	e11a      	b.n	2e30 <m2m_ip_cb+0x2b8>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    2bfa:	2843      	cmp	r0, #67	; 0x43
    2bfc:	d13f      	bne.n	2c7e <m2m_ip_cb+0x106>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2bfe:	2300      	movs	r3, #0
    2c00:	220c      	movs	r2, #12
    2c02:	a905      	add	r1, sp, #20
    2c04:	0020      	movs	r0, r4
    2c06:	4c8d      	ldr	r4, [pc, #564]	; (2e3c <m2m_ip_cb+0x2c4>)
    2c08:	47a0      	blx	r4
    2c0a:	2800      	cmp	r0, #0
    2c0c:	d000      	beq.n	2c10 <m2m_ip_cb+0x98>
    2c0e:	e10f      	b.n	2e30 <m2m_ip_cb+0x2b8>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    2c10:	ab05      	add	r3, sp, #20
    2c12:	2109      	movs	r1, #9
    2c14:	5659      	ldrsb	r1, [r3, r1]
    2c16:	2900      	cmp	r1, #0
    2c18:	db1a      	blt.n	2c50 <m2m_ip_cb+0xd8>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    2c1a:	010a      	lsls	r2, r1, #4
    2c1c:	4b89      	ldr	r3, [pc, #548]	; (2e44 <m2m_ip_cb+0x2cc>)
    2c1e:	189b      	adds	r3, r3, r2
    2c20:	2200      	movs	r2, #0
    2c22:	72da      	strb	r2, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    2c24:	3201      	adds	r2, #1
    2c26:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2c28:	4a87      	ldr	r2, [pc, #540]	; (2e48 <m2m_ip_cb+0x2d0>)
    2c2a:	8813      	ldrh	r3, [r2, #0]
    2c2c:	3301      	adds	r3, #1
    2c2e:	b29b      	uxth	r3, r3
    2c30:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
    2c32:	8813      	ldrh	r3, [r2, #0]
    2c34:	b29b      	uxth	r3, r3
    2c36:	2b00      	cmp	r3, #0
    2c38:	d103      	bne.n	2c42 <m2m_ip_cb+0xca>
					++gu16SessionID;
    2c3a:	8813      	ldrh	r3, [r2, #0]
    2c3c:	3301      	adds	r3, #1
    2c3e:	b29b      	uxth	r3, r3
    2c40:	8013      	strh	r3, [r2, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2c42:	4b81      	ldr	r3, [pc, #516]	; (2e48 <m2m_ip_cb+0x2d0>)
    2c44:	881a      	ldrh	r2, [r3, #0]
    2c46:	b292      	uxth	r2, r2
    2c48:	010b      	lsls	r3, r1, #4
    2c4a:	487e      	ldr	r0, [pc, #504]	; (2e44 <m2m_ip_cb+0x2cc>)
    2c4c:	18c3      	adds	r3, r0, r3
    2c4e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    2c50:	ab09      	add	r3, sp, #36	; 0x24
    2c52:	7019      	strb	r1, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2c54:	2202      	movs	r2, #2
    2c56:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2c58:	aa05      	add	r2, sp, #20
    2c5a:	8851      	ldrh	r1, [r2, #2]
    2c5c:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2c5e:	9a06      	ldr	r2, [sp, #24]
    2c60:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2c62:	4b77      	ldr	r3, [pc, #476]	; (2e40 <m2m_ip_cb+0x2c8>)
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d100      	bne.n	2c6c <m2m_ip_cb+0xf4>
    2c6a:	e0e1      	b.n	2e30 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2c6c:	4b74      	ldr	r3, [pc, #464]	; (2e40 <m2m_ip_cb+0x2c8>)
    2c6e:	681b      	ldr	r3, [r3, #0]
    2c70:	aa05      	add	r2, sp, #20
    2c72:	2008      	movs	r0, #8
    2c74:	5610      	ldrsb	r0, [r2, r0]
    2c76:	aa09      	add	r2, sp, #36	; 0x24
    2c78:	2104      	movs	r1, #4
    2c7a:	4798      	blx	r3
    2c7c:	e0d8      	b.n	2e30 <m2m_ip_cb+0x2b8>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    2c7e:	2844      	cmp	r0, #68	; 0x44
    2c80:	d001      	beq.n	2c86 <m2m_ip_cb+0x10e>
    2c82:	284b      	cmp	r0, #75	; 0x4b
    2c84:	d125      	bne.n	2cd2 <m2m_ip_cb+0x15a>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2c86:	2300      	movs	r3, #0
    2c88:	2204      	movs	r2, #4
    2c8a:	a909      	add	r1, sp, #36	; 0x24
    2c8c:	0020      	movs	r0, r4
    2c8e:	4c6b      	ldr	r4, [pc, #428]	; (2e3c <m2m_ip_cb+0x2c4>)
    2c90:	47a0      	blx	r4
    2c92:	2800      	cmp	r0, #0
    2c94:	d000      	beq.n	2c98 <m2m_ip_cb+0x120>
    2c96:	e0cb      	b.n	2e30 <m2m_ip_cb+0x2b8>
		{
			strConnMsg.sock		= strConnectReply.sock;
    2c98:	ab09      	add	r3, sp, #36	; 0x24
    2c9a:	2000      	movs	r0, #0
    2c9c:	5618      	ldrsb	r0, [r3, r0]
    2c9e:	aa05      	add	r2, sp, #20
    2ca0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2ca2:	785b      	ldrb	r3, [r3, #1]
    2ca4:	b25b      	sxtb	r3, r3
    2ca6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d107      	bne.n	2cbc <m2m_ip_cb+0x144>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2cac:	ab09      	add	r3, sp, #36	; 0x24
    2cae:	885a      	ldrh	r2, [r3, #2]
    2cb0:	3a08      	subs	r2, #8
    2cb2:	b292      	uxth	r2, r2
    2cb4:	0103      	lsls	r3, r0, #4
    2cb6:	4963      	ldr	r1, [pc, #396]	; (2e44 <m2m_ip_cb+0x2cc>)
    2cb8:	18cb      	adds	r3, r1, r3
    2cba:	811a      	strh	r2, [r3, #8]
			}
			if(gpfAppSocketCb)
    2cbc:	4b60      	ldr	r3, [pc, #384]	; (2e40 <m2m_ip_cb+0x2c8>)
    2cbe:	681b      	ldr	r3, [r3, #0]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d100      	bne.n	2cc6 <m2m_ip_cb+0x14e>
    2cc4:	e0b4      	b.n	2e30 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2cc6:	4b5e      	ldr	r3, [pc, #376]	; (2e40 <m2m_ip_cb+0x2c8>)
    2cc8:	681b      	ldr	r3, [r3, #0]
    2cca:	aa05      	add	r2, sp, #20
    2ccc:	2105      	movs	r1, #5
    2cce:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    2cd0:	e0ae      	b.n	2e30 <m2m_ip_cb+0x2b8>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2cd2:	284a      	cmp	r0, #74	; 0x4a
    2cd4:	d115      	bne.n	2d02 <m2m_ip_cb+0x18a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2cd6:	2300      	movs	r3, #0
    2cd8:	2244      	movs	r2, #68	; 0x44
    2cda:	a909      	add	r1, sp, #36	; 0x24
    2cdc:	0020      	movs	r0, r4
    2cde:	4c57      	ldr	r4, [pc, #348]	; (2e3c <m2m_ip_cb+0x2c4>)
    2ce0:	47a0      	blx	r4
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d000      	beq.n	2ce8 <m2m_ip_cb+0x170>
    2ce6:	e0a3      	b.n	2e30 <m2m_ip_cb+0x2b8>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
    2ce8:	4b58      	ldr	r3, [pc, #352]	; (2e4c <m2m_ip_cb+0x2d4>)
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d100      	bne.n	2cf2 <m2m_ip_cb+0x17a>
    2cf0:	e09e      	b.n	2e30 <m2m_ip_cb+0x2b8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2cf2:	4b56      	ldr	r3, [pc, #344]	; (2e4c <m2m_ip_cb+0x2d4>)
    2cf4:	681b      	ldr	r3, [r3, #0]
    2cf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2cf8:	9203      	str	r2, [sp, #12]
    2cfa:	0011      	movs	r1, r2
    2cfc:	a809      	add	r0, sp, #36	; 0x24
    2cfe:	4798      	blx	r3
    2d00:	e096      	b.n	2e30 <m2m_ip_cb+0x2b8>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2d02:	2846      	cmp	r0, #70	; 0x46
    2d04:	d005      	beq.n	2d12 <m2m_ip_cb+0x19a>
    2d06:	2848      	cmp	r0, #72	; 0x48
    2d08:	d005      	beq.n	2d16 <m2m_ip_cb+0x19e>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2d0a:	2606      	movs	r6, #6
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2d0c:	284d      	cmp	r0, #77	; 0x4d
    2d0e:	d003      	beq.n	2d18 <m2m_ip_cb+0x1a0>
    2d10:	e04c      	b.n	2dac <m2m_ip_cb+0x234>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2d12:	2606      	movs	r6, #6
    2d14:	e000      	b.n	2d18 <m2m_ip_cb+0x1a0>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2d16:	2609      	movs	r6, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2d18:	2300      	movs	r3, #0
    2d1a:	2210      	movs	r2, #16
    2d1c:	a905      	add	r1, sp, #20
    2d1e:	0020      	movs	r0, r4
    2d20:	4f46      	ldr	r7, [pc, #280]	; (2e3c <m2m_ip_cb+0x2c4>)
    2d22:	47b8      	blx	r7
    2d24:	2800      	cmp	r0, #0
    2d26:	d000      	beq.n	2d2a <m2m_ip_cb+0x1b2>
    2d28:	e082      	b.n	2e30 <m2m_ip_cb+0x2b8>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
    2d2a:	aa05      	add	r2, sp, #20
    2d2c:	200c      	movs	r0, #12
    2d2e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2d30:	89d3      	ldrh	r3, [r2, #14]
    2d32:	469c      	mov	ip, r3
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    2d34:	0103      	lsls	r3, r0, #4
    2d36:	4943      	ldr	r1, [pc, #268]	; (2e44 <m2m_ip_cb+0x2cc>)
    2d38:	18c9      	adds	r1, r1, r3
    2d3a:	2300      	movs	r3, #0
    2d3c:	730b      	strb	r3, [r1, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2d3e:	2708      	movs	r7, #8
    2d40:	5fd3      	ldrsh	r3, [r2, r7]
    2d42:	4698      	mov	r8, r3
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2d44:	8953      	ldrh	r3, [r2, #10]
    2d46:	4699      	mov	r9, r3
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2d48:	af09      	add	r7, sp, #36	; 0x24
    2d4a:	8853      	ldrh	r3, [r2, #2]
    2d4c:	817b      	strh	r3, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2d4e:	9b06      	ldr	r3, [sp, #24]
    2d50:	930c      	str	r3, [sp, #48]	; 0x30

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2d52:	88ca      	ldrh	r2, [r1, #6]
    2d54:	b292      	uxth	r2, r2
    2d56:	4594      	cmp	ip, r2
    2d58:	d11f      	bne.n	2d9a <m2m_ip_cb+0x222>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2d5a:	4643      	mov	r3, r8
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	dd0d      	ble.n	2d7c <m2m_ip_cb+0x204>
    2d60:	45a8      	cmp	r8, r5
    2d62:	da0b      	bge.n	2d7c <m2m_ip_cb+0x204>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2d64:	0023      	movs	r3, r4
    2d66:	444b      	add	r3, r9
    2d68:	4642      	mov	r2, r8
    2d6a:	4669      	mov	r1, sp
    2d6c:	818a      	strh	r2, [r1, #12]
    2d6e:	898a      	ldrh	r2, [r1, #12]
    2d70:	9200      	str	r2, [sp, #0]
    2d72:	0032      	movs	r2, r6
    2d74:	0039      	movs	r1, r7
    2d76:	4c36      	ldr	r4, [pc, #216]	; (2e50 <m2m_ip_cb+0x2d8>)
    2d78:	47a0      	blx	r4
    2d7a:	e059      	b.n	2e30 <m2m_ip_cb+0x2b8>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2d7c:	ab09      	add	r3, sp, #36	; 0x24
    2d7e:	4642      	mov	r2, r8
    2d80:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2d82:	2300      	movs	r3, #0
    2d84:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2d86:	4b2e      	ldr	r3, [pc, #184]	; (2e40 <m2m_ip_cb+0x2c8>)
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d050      	beq.n	2e30 <m2m_ip_cb+0x2b8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2d8e:	4b2c      	ldr	r3, [pc, #176]	; (2e40 <m2m_ip_cb+0x2c8>)
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	aa09      	add	r2, sp, #36	; 0x24
    2d94:	0031      	movs	r1, r6
    2d96:	4798      	blx	r3
    2d98:	e04a      	b.n	2e30 <m2m_ip_cb+0x2b8>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    2d9a:	2d10      	cmp	r5, #16
    2d9c:	d948      	bls.n	2e30 <m2m_ip_cb+0x2b8>
					hif_receive(0, NULL, 0, 1);
    2d9e:	2301      	movs	r3, #1
    2da0:	2200      	movs	r2, #0
    2da2:	2100      	movs	r1, #0
    2da4:	2000      	movs	r0, #0
    2da6:	4c25      	ldr	r4, [pc, #148]	; (2e3c <m2m_ip_cb+0x2c4>)
    2da8:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    2daa:	e041      	b.n	2e30 <m2m_ip_cb+0x2b8>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2dac:	2845      	cmp	r0, #69	; 0x45
    2dae:	d005      	beq.n	2dbc <m2m_ip_cb+0x244>
    2db0:	2847      	cmp	r0, #71	; 0x47
    2db2:	d005      	beq.n	2dc0 <m2m_ip_cb+0x248>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2db4:	2507      	movs	r5, #7
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2db6:	284c      	cmp	r0, #76	; 0x4c
    2db8:	d003      	beq.n	2dc2 <m2m_ip_cb+0x24a>
    2dba:	e022      	b.n	2e02 <m2m_ip_cb+0x28a>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2dbc:	2507      	movs	r5, #7
    2dbe:	e000      	b.n	2dc2 <m2m_ip_cb+0x24a>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2dc0:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2dc2:	2300      	movs	r3, #0
    2dc4:	2208      	movs	r2, #8
    2dc6:	a909      	add	r1, sp, #36	; 0x24
    2dc8:	0020      	movs	r0, r4
    2dca:	4c1c      	ldr	r4, [pc, #112]	; (2e3c <m2m_ip_cb+0x2c4>)
    2dcc:	47a0      	blx	r4
    2dce:	2800      	cmp	r0, #0
    2dd0:	d12e      	bne.n	2e30 <m2m_ip_cb+0x2b8>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
    2dd2:	ab09      	add	r3, sp, #36	; 0x24
    2dd4:	2000      	movs	r0, #0
    2dd6:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2dd8:	889a      	ldrh	r2, [r3, #4]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2dda:	8859      	ldrh	r1, [r3, #2]
    2ddc:	ab05      	add	r3, sp, #20
    2dde:	8019      	strh	r1, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2de0:	0103      	lsls	r3, r0, #4
    2de2:	4918      	ldr	r1, [pc, #96]	; (2e44 <m2m_ip_cb+0x2cc>)
    2de4:	18cb      	adds	r3, r1, r3
    2de6:	88db      	ldrh	r3, [r3, #6]
    2de8:	b29b      	uxth	r3, r3
    2dea:	429a      	cmp	r2, r3
    2dec:	d120      	bne.n	2e30 <m2m_ip_cb+0x2b8>
			{
				if(gpfAppSocketCb)
    2dee:	4b14      	ldr	r3, [pc, #80]	; (2e40 <m2m_ip_cb+0x2c8>)
    2df0:	681b      	ldr	r3, [r3, #0]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d01c      	beq.n	2e30 <m2m_ip_cb+0x2b8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2df6:	4b12      	ldr	r3, [pc, #72]	; (2e40 <m2m_ip_cb+0x2c8>)
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	aa05      	add	r2, sp, #20
    2dfc:	0029      	movs	r1, r5
    2dfe:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    2e00:	e016      	b.n	2e30 <m2m_ip_cb+0x2b8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2e02:	2852      	cmp	r0, #82	; 0x52
    2e04:	d114      	bne.n	2e30 <m2m_ip_cb+0x2b8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2e06:	2301      	movs	r3, #1
    2e08:	2214      	movs	r2, #20
    2e0a:	a909      	add	r1, sp, #36	; 0x24
    2e0c:	0020      	movs	r0, r4
    2e0e:	4c0b      	ldr	r4, [pc, #44]	; (2e3c <m2m_ip_cb+0x2c4>)
    2e10:	47a0      	blx	r4
    2e12:	2800      	cmp	r0, #0
    2e14:	d10c      	bne.n	2e30 <m2m_ip_cb+0x2b8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2e16:	4b0f      	ldr	r3, [pc, #60]	; (2e54 <m2m_ip_cb+0x2dc>)
    2e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2e1a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d006      	beq.n	2e30 <m2m_ip_cb+0x2b8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2e22:	4b0c      	ldr	r3, [pc, #48]	; (2e54 <m2m_ip_cb+0x2dc>)
    2e24:	681c      	ldr	r4, [r3, #0]
    2e26:	ab09      	add	r3, sp, #36	; 0x24
    2e28:	7c1a      	ldrb	r2, [r3, #16]
    2e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e2e:	47a0      	blx	r4
			}
		}
	}
}
    2e30:	b01b      	add	sp, #108	; 0x6c
    2e32:	bc0c      	pop	{r2, r3}
    2e34:	4690      	mov	r8, r2
    2e36:	4699      	mov	r9, r3
    2e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	000010b1 	.word	0x000010b1
    2e40:	200002ec 	.word	0x200002ec
    2e44:	2000023c 	.word	0x2000023c
    2e48:	200000ce 	.word	0x200000ce
    2e4c:	200002f4 	.word	0x200002f4
    2e50:	00002a89 	.word	0x00002a89
    2e54:	200002f0 	.word	0x200002f0

00002e58 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2e58:	b510      	push	{r4, lr}
	if(gbSocketInit==0)
    2e5a:	4b0a      	ldr	r3, [pc, #40]	; (2e84 <socketInit+0x2c>)
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d10e      	bne.n	2e80 <socketInit+0x28>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2e62:	22b0      	movs	r2, #176	; 0xb0
    2e64:	2100      	movs	r1, #0
    2e66:	4808      	ldr	r0, [pc, #32]	; (2e88 <socketInit+0x30>)
    2e68:	4b08      	ldr	r3, [pc, #32]	; (2e8c <socketInit+0x34>)
    2e6a:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2e6c:	4908      	ldr	r1, [pc, #32]	; (2e90 <socketInit+0x38>)
    2e6e:	2002      	movs	r0, #2
    2e70:	4b08      	ldr	r3, [pc, #32]	; (2e94 <socketInit+0x3c>)
    2e72:	4798      	blx	r3
		gbSocketInit=1;
    2e74:	2201      	movs	r2, #1
    2e76:	4b03      	ldr	r3, [pc, #12]	; (2e84 <socketInit+0x2c>)
    2e78:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    2e7a:	2200      	movs	r2, #0
    2e7c:	4b06      	ldr	r3, [pc, #24]	; (2e98 <socketInit+0x40>)
    2e7e:	801a      	strh	r2, [r3, #0]
	}
}
    2e80:	bd10      	pop	{r4, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	200000cd 	.word	0x200000cd
    2e88:	2000023c 	.word	0x2000023c
    2e8c:	00000985 	.word	0x00000985
    2e90:	00002b79 	.word	0x00002b79
    2e94:	000011dd 	.word	0x000011dd
    2e98:	200000ce 	.word	0x200000ce

00002e9c <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2e9c:	4b02      	ldr	r3, [pc, #8]	; (2ea8 <registerSocketCallback+0xc>)
    2e9e:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2ea0:	4b02      	ldr	r3, [pc, #8]	; (2eac <registerSocketCallback+0x10>)
    2ea2:	6019      	str	r1, [r3, #0]
}
    2ea4:	4770      	bx	lr
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	200002ec 	.word	0x200002ec
    2eac:	200002f4 	.word	0x200002f4

00002eb0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	b086      	sub	sp, #24
    2eb4:	0016      	movs	r6, r2
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2eb6:	2802      	cmp	r0, #2
    2eb8:	d148      	bne.n	2f4c <socket+0x9c>
	{
		if(u8Type == SOCK_STREAM)
    2eba:	2901      	cmp	r1, #1
    2ebc:	d049      	beq.n	2f52 <socket+0xa2>
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    2ebe:	220b      	movs	r2, #11
			u8Count = TCP_SOCK_MAX;
    2ec0:	2407      	movs	r4, #7
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
    2ec2:	2902      	cmp	r1, #2
    2ec4:	d047      	beq.n	2f56 <socket+0xa6>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
    2ec6:	3c08      	subs	r4, #8
    2ec8:	e04f      	b.n	2f6a <socket+0xba>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2eca:	0025      	movs	r5, r4
			if(pstrSock->bIsUsed == 0)
    2ecc:	0123      	lsls	r3, r4, #4
    2ece:	18cb      	adds	r3, r1, r3
    2ed0:	7a9b      	ldrb	r3, [r3, #10]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d133      	bne.n	2f3e <socket+0x8e>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2ed6:	0120      	lsls	r0, r4, #4
    2ed8:	4b25      	ldr	r3, [pc, #148]	; (2f70 <socket+0xc0>)
    2eda:	18c0      	adds	r0, r0, r3
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2edc:	2210      	movs	r2, #16
    2ede:	2100      	movs	r1, #0
    2ee0:	4b24      	ldr	r3, [pc, #144]	; (2f74 <socket+0xc4>)
    2ee2:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    2ee4:	012b      	lsls	r3, r5, #4
    2ee6:	4a22      	ldr	r2, [pc, #136]	; (2f70 <socket+0xc0>)
    2ee8:	18d3      	adds	r3, r2, r3
    2eea:	2201      	movs	r2, #1
    2eec:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2eee:	4a22      	ldr	r2, [pc, #136]	; (2f78 <socket+0xc8>)
    2ef0:	8813      	ldrh	r3, [r2, #0]
    2ef2:	3301      	adds	r3, #1
    2ef4:	b29b      	uxth	r3, r3
    2ef6:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
    2ef8:	8813      	ldrh	r3, [r2, #0]
    2efa:	b29b      	uxth	r3, r3
    2efc:	2b00      	cmp	r3, #0
    2efe:	d103      	bne.n	2f08 <socket+0x58>
					++gu16SessionID;
    2f00:	8813      	ldrh	r3, [r2, #0]
    2f02:	3301      	adds	r3, #1
    2f04:	b29b      	uxth	r3, r3
    2f06:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    2f08:	4b1b      	ldr	r3, [pc, #108]	; (2f78 <socket+0xc8>)
    2f0a:	881a      	ldrh	r2, [r3, #0]
    2f0c:	b292      	uxth	r2, r2
    2f0e:	012b      	lsls	r3, r5, #4
    2f10:	4917      	ldr	r1, [pc, #92]	; (2f70 <socket+0xc0>)
    2f12:	18cb      	adds	r3, r1, r3
    2f14:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    2f16:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
    2f18:	07f3      	lsls	r3, r6, #31
    2f1a:	d526      	bpl.n	2f6a <socket+0xba>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    2f1c:	aa05      	add	r2, sp, #20
    2f1e:	7014      	strb	r4, [r2, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2f20:	012d      	lsls	r5, r5, #4
    2f22:	194d      	adds	r5, r1, r5
    2f24:	2321      	movs	r3, #33	; 0x21
    2f26:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2f28:	2300      	movs	r3, #0
    2f2a:	9302      	str	r3, [sp, #8]
    2f2c:	9301      	str	r3, [sp, #4]
    2f2e:	9300      	str	r3, [sp, #0]
    2f30:	3304      	adds	r3, #4
    2f32:	2150      	movs	r1, #80	; 0x50
    2f34:	2002      	movs	r0, #2
    2f36:	4d11      	ldr	r5, [pc, #68]	; (2f7c <socket+0xcc>)
    2f38:	47a8      	blx	r5
    2f3a:	e016      	b.n	2f6a <socket+0xba>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
    2f3c:	490c      	ldr	r1, [pc, #48]	; (2f70 <socket+0xc0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    2f3e:	3401      	adds	r4, #1
    2f40:	b2e4      	uxtb	r4, r4
    2f42:	4294      	cmp	r4, r2
    2f44:	d3c1      	bcc.n	2eca <socket+0x1a>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
    2f46:	2401      	movs	r4, #1
    2f48:	4264      	negs	r4, r4
    2f4a:	e00e      	b.n	2f6a <socket+0xba>
    2f4c:	2401      	movs	r4, #1
    2f4e:	4264      	negs	r4, r4
    2f50:	e00b      	b.n	2f6a <socket+0xba>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
    2f52:	2207      	movs	r2, #7
			u8Count = 0;
    2f54:	2400      	movs	r4, #0
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2f56:	0025      	movs	r5, r4
			if(pstrSock->bIsUsed == 0)
    2f58:	0123      	lsls	r3, r4, #4
    2f5a:	4905      	ldr	r1, [pc, #20]	; (2f70 <socket+0xc0>)
    2f5c:	18cb      	adds	r3, r1, r3
    2f5e:	7a9b      	ldrb	r3, [r3, #10]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d1eb      	bne.n	2f3c <socket+0x8c>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2f64:	0120      	lsls	r0, r4, #4
    2f66:	1840      	adds	r0, r0, r1
    2f68:	e7b8      	b.n	2edc <socket+0x2c>
				break;
			}
		}
	}
	return sock;
}
    2f6a:	0020      	movs	r0, r4
    2f6c:	b006      	add	sp, #24
    2f6e:	bd70      	pop	{r4, r5, r6, pc}
    2f70:	2000023c 	.word	0x2000023c
    2f74:	00000985 	.word	0x00000985
    2f78:	200000ce 	.word	0x200000ce
    2f7c:	00000b8d 	.word	0x00000b8d

00002f80 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2f80:	b570      	push	{r4, r5, r6, lr}
    2f82:	b088      	sub	sp, #32
    2f84:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2f86:	db2f      	blt.n	2fe8 <connect+0x68>
    2f88:	2900      	cmp	r1, #0
    2f8a:	d030      	beq.n	2fee <connect+0x6e>
    2f8c:	0103      	lsls	r3, r0, #4
    2f8e:	481d      	ldr	r0, [pc, #116]	; (3004 <connect+0x84>)
    2f90:	18c3      	adds	r3, r0, r3
    2f92:	7a9b      	ldrb	r3, [r3, #10]
    2f94:	2b01      	cmp	r3, #1
    2f96:	d12d      	bne.n	2ff4 <connect+0x74>
    2f98:	2a00      	cmp	r2, #0
    2f9a:	d02e      	beq.n	2ffa <connect+0x7a>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f9c:	0123      	lsls	r3, r4, #4
    2f9e:	18c3      	adds	r3, r0, r3
    2fa0:	7adb      	ldrb	r3, [r3, #11]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2fa2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2fa4:	07db      	lsls	r3, r3, #31
    2fa6:	d505      	bpl.n	2fb4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2fa8:	0123      	lsls	r3, r4, #4
    2faa:	18c3      	adds	r3, r0, r3
    2fac:	7ada      	ldrb	r2, [r3, #11]
    2fae:	ab05      	add	r3, sp, #20
    2fb0:	725a      	strb	r2, [r3, #9]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2fb2:	3607      	adds	r6, #7
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    2fb4:	ad05      	add	r5, sp, #20
    2fb6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2fb8:	2208      	movs	r2, #8
    2fba:	0028      	movs	r0, r5
    2fbc:	4b12      	ldr	r3, [pc, #72]	; (3008 <connect+0x88>)
    2fbe:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2fc0:	0124      	lsls	r4, r4, #4
    2fc2:	4b10      	ldr	r3, [pc, #64]	; (3004 <connect+0x84>)
    2fc4:	191c      	adds	r4, r3, r4
    2fc6:	88e3      	ldrh	r3, [r4, #6]
    2fc8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2fca:	2300      	movs	r3, #0
    2fcc:	9302      	str	r3, [sp, #8]
    2fce:	9301      	str	r3, [sp, #4]
    2fd0:	9300      	str	r3, [sp, #0]
    2fd2:	330c      	adds	r3, #12
    2fd4:	002a      	movs	r2, r5
    2fd6:	0031      	movs	r1, r6
    2fd8:	2002      	movs	r0, #2
    2fda:	4c0c      	ldr	r4, [pc, #48]	; (300c <connect+0x8c>)
    2fdc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2fde:	2800      	cmp	r0, #0
    2fe0:	d00d      	beq.n	2ffe <connect+0x7e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2fe2:	2009      	movs	r0, #9
    2fe4:	4240      	negs	r0, r0
    2fe6:	e00a      	b.n	2ffe <connect+0x7e>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2fe8:	2006      	movs	r0, #6
    2fea:	4240      	negs	r0, r0
    2fec:	e007      	b.n	2ffe <connect+0x7e>
    2fee:	2006      	movs	r0, #6
    2ff0:	4240      	negs	r0, r0
    2ff2:	e004      	b.n	2ffe <connect+0x7e>
    2ff4:	2006      	movs	r0, #6
    2ff6:	4240      	negs	r0, r0
    2ff8:	e001      	b.n	2ffe <connect+0x7e>
    2ffa:	2006      	movs	r0, #6
    2ffc:	4240      	negs	r0, r0
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
    2ffe:	b008      	add	sp, #32
    3000:	bd70      	pop	{r4, r5, r6, pc}
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	2000023c 	.word	0x2000023c
    3008:	00000971 	.word	0x00000971
    300c:	00000b8d 	.word	0x00000b8d

00003010 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3010:	b530      	push	{r4, r5, lr}
    3012:	b089      	sub	sp, #36	; 0x24
    3014:	000c      	movs	r4, r1
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3016:	2800      	cmp	r0, #0
    3018:	db33      	blt.n	3082 <send+0x72>
    301a:	2900      	cmp	r1, #0
    301c:	d034      	beq.n	3088 <send+0x78>
    301e:	23af      	movs	r3, #175	; 0xaf
    3020:	00db      	lsls	r3, r3, #3
    3022:	429a      	cmp	r2, r3
    3024:	d833      	bhi.n	308e <send+0x7e>
    3026:	0103      	lsls	r3, r0, #4
    3028:	491d      	ldr	r1, [pc, #116]	; (30a0 <send+0x90>)
    302a:	18cb      	adds	r3, r1, r3
    302c:	7a9b      	ldrb	r3, [r3, #10]
    302e:	2b01      	cmp	r3, #1
    3030:	d130      	bne.n	3094 <send+0x84>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3032:	a904      	add	r1, sp, #16
    3034:	7008      	strb	r0, [r1, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3036:	804a      	strh	r2, [r1, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3038:	0103      	lsls	r3, r0, #4
    303a:	4d19      	ldr	r5, [pc, #100]	; (30a0 <send+0x90>)
    303c:	18eb      	adds	r3, r5, r3
    303e:	88db      	ldrh	r3, [r3, #6]
    3040:	818b      	strh	r3, [r1, #12]
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3042:	2550      	movs	r5, #80	; 0x50

		strSend.sock			= sock;
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;

		if(sock >= TCP_SOCK_MAX)
    3044:	2806      	cmp	r0, #6
    3046:	dd00      	ble.n	304a <send+0x3a>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3048:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    304a:	0103      	lsls	r3, r0, #4
    304c:	4914      	ldr	r1, [pc, #80]	; (30a0 <send+0x90>)
    304e:	18cb      	adds	r3, r1, r3
    3050:	7adb      	ldrb	r3, [r3, #11]
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    3052:	2145      	movs	r1, #69	; 0x45

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3054:	07db      	lsls	r3, r3, #31
    3056:	d505      	bpl.n	3064 <send+0x54>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3058:	0100      	lsls	r0, r0, #4
    305a:	4b11      	ldr	r3, [pc, #68]	; (30a0 <send+0x90>)
    305c:	1818      	adds	r0, r3, r0
    305e:	8905      	ldrh	r5, [r0, #8]
    3060:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3062:	3107      	adds	r1, #7
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3064:	2380      	movs	r3, #128	; 0x80
    3066:	4319      	orrs	r1, r3
    3068:	9502      	str	r5, [sp, #8]
    306a:	9201      	str	r2, [sp, #4]
    306c:	9400      	str	r4, [sp, #0]
    306e:	3b70      	subs	r3, #112	; 0x70
    3070:	aa04      	add	r2, sp, #16
    3072:	2002      	movs	r0, #2
    3074:	4c0b      	ldr	r4, [pc, #44]	; (30a4 <send+0x94>)
    3076:	47a0      	blx	r4
    3078:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    307a:	2800      	cmp	r0, #0
    307c:	d00c      	beq.n	3098 <send+0x88>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    307e:	3b0e      	subs	r3, #14
    3080:	e00a      	b.n	3098 <send+0x88>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3082:	2306      	movs	r3, #6
    3084:	425b      	negs	r3, r3
    3086:	e007      	b.n	3098 <send+0x88>
    3088:	2306      	movs	r3, #6
    308a:	425b      	negs	r3, r3
    308c:	e004      	b.n	3098 <send+0x88>
    308e:	2306      	movs	r3, #6
    3090:	425b      	negs	r3, r3
    3092:	e001      	b.n	3098 <send+0x88>
    3094:	2306      	movs	r3, #6
    3096:	425b      	negs	r3, r3
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
    3098:	0018      	movs	r0, r3
    309a:	b009      	add	sp, #36	; 0x24
    309c:	bd30      	pop	{r4, r5, pc}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	2000023c 	.word	0x2000023c
    30a4:	00000b8d 	.word	0x00000b8d

000030a8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    30a8:	b530      	push	{r4, r5, lr}
    30aa:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    30ac:	2800      	cmp	r0, #0
    30ae:	db33      	blt.n	3118 <recv+0x70>
    30b0:	2900      	cmp	r1, #0
    30b2:	d034      	beq.n	311e <recv+0x76>
    30b4:	2a00      	cmp	r2, #0
    30b6:	d035      	beq.n	3124 <recv+0x7c>
    30b8:	0104      	lsls	r4, r0, #4
    30ba:	4d1e      	ldr	r5, [pc, #120]	; (3134 <recv+0x8c>)
    30bc:	192c      	adds	r4, r5, r4
    30be:	7aa4      	ldrb	r4, [r4, #10]
    30c0:	2c01      	cmp	r4, #1
    30c2:	d132      	bne.n	312a <recv+0x82>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    30c4:	0104      	lsls	r4, r0, #4
    30c6:	5161      	str	r1, [r4, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    30c8:	1929      	adds	r1, r5, r4
    30ca:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    30cc:	7b09      	ldrb	r1, [r1, #12]
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    30ce:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    30d0:	2900      	cmp	r1, #0
    30d2:	d12c      	bne.n	312e <recv+0x86>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    30d4:	192a      	adds	r2, r5, r4
    30d6:	2101      	movs	r1, #1
    30d8:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    30da:	7ad2      	ldrb	r2, [r2, #11]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    30dc:	3145      	adds	r1, #69	; 0x45

			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    30de:	07d2      	lsls	r2, r2, #31
    30e0:	d500      	bpl.n	30e4 <recv+0x3c>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    30e2:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    30e4:	2b00      	cmp	r3, #0
    30e6:	d102      	bne.n	30ee <recv+0x46>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    30e8:	3b01      	subs	r3, #1
    30ea:	9304      	str	r3, [sp, #16]
    30ec:	e000      	b.n	30f0 <recv+0x48>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    30ee:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    30f0:	aa04      	add	r2, sp, #16
    30f2:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    30f4:	0100      	lsls	r0, r0, #4
    30f6:	4b0f      	ldr	r3, [pc, #60]	; (3134 <recv+0x8c>)
    30f8:	1818      	adds	r0, r3, r0
    30fa:	88c3      	ldrh	r3, [r0, #6]
    30fc:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    30fe:	2300      	movs	r3, #0
    3100:	9302      	str	r3, [sp, #8]
    3102:	9301      	str	r3, [sp, #4]
    3104:	9300      	str	r3, [sp, #0]
    3106:	3308      	adds	r3, #8
    3108:	2002      	movs	r0, #2
    310a:	4c0b      	ldr	r4, [pc, #44]	; (3138 <recv+0x90>)
    310c:	47a0      	blx	r4
    310e:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3110:	2800      	cmp	r0, #0
    3112:	d00c      	beq.n	312e <recv+0x86>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3114:	3a0e      	subs	r2, #14
    3116:	e00a      	b.n	312e <recv+0x86>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3118:	2206      	movs	r2, #6
    311a:	4252      	negs	r2, r2
    311c:	e007      	b.n	312e <recv+0x86>
    311e:	2206      	movs	r2, #6
    3120:	4252      	negs	r2, r2
    3122:	e004      	b.n	312e <recv+0x86>
    3124:	2206      	movs	r2, #6
    3126:	4252      	negs	r2, r2
    3128:	e001      	b.n	312e <recv+0x86>
    312a:	2206      	movs	r2, #6
    312c:	4252      	negs	r2, r2
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    312e:	0010      	movs	r0, r2
    3130:	b007      	add	sp, #28
    3132:	bd30      	pop	{r4, r5, pc}
    3134:	2000023c 	.word	0x2000023c
    3138:	00000b8d 	.word	0x00000b8d

0000313c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    313c:	b530      	push	{r4, r5, lr}
    313e:	b087      	sub	sp, #28
    3140:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3142:	db29      	blt.n	3198 <close+0x5c>
    3144:	0103      	lsls	r3, r0, #4
    3146:	4a18      	ldr	r2, [pc, #96]	; (31a8 <close+0x6c>)
    3148:	18d3      	adds	r3, r2, r3
    314a:	7a9b      	ldrb	r3, [r3, #10]
    314c:	2b01      	cmp	r3, #1
    314e:	d126      	bne.n	319e <close+0x62>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3150:	a905      	add	r1, sp, #20
    3152:	7008      	strb	r0, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3154:	0102      	lsls	r2, r0, #4
    3156:	4b14      	ldr	r3, [pc, #80]	; (31a8 <close+0x6c>)
    3158:	189b      	adds	r3, r3, r2
    315a:	88da      	ldrh	r2, [r3, #6]
    315c:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    315e:	2200      	movs	r2, #0
    3160:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3162:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3164:	7adb      	ldrb	r3, [r3, #11]
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3166:	2149      	movs	r1, #73	; 0x49
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
		gastrSockets[sock].u16SessionID =0;
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3168:	07db      	lsls	r3, r3, #31
    316a:	d500      	bpl.n	316e <close+0x32>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    316c:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    316e:	2300      	movs	r3, #0
    3170:	9302      	str	r3, [sp, #8]
    3172:	9301      	str	r3, [sp, #4]
    3174:	9300      	str	r3, [sp, #0]
    3176:	3304      	adds	r3, #4
    3178:	aa05      	add	r2, sp, #20
    317a:	2002      	movs	r0, #2
    317c:	4d0b      	ldr	r5, [pc, #44]	; (31ac <close+0x70>)
    317e:	47a8      	blx	r5
    3180:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3182:	d001      	beq.n	3188 <close+0x4c>
		{
			s8Ret = SOCK_ERR_INVALID;
    3184:	2509      	movs	r5, #9
    3186:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3188:	0124      	lsls	r4, r4, #4
    318a:	4807      	ldr	r0, [pc, #28]	; (31a8 <close+0x6c>)
    318c:	1820      	adds	r0, r4, r0
    318e:	2210      	movs	r2, #16
    3190:	2100      	movs	r1, #0
    3192:	4b07      	ldr	r3, [pc, #28]	; (31b0 <close+0x74>)
    3194:	4798      	blx	r3
    3196:	e004      	b.n	31a2 <close+0x66>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3198:	2506      	movs	r5, #6
    319a:	426d      	negs	r5, r5
    319c:	e001      	b.n	31a2 <close+0x66>
    319e:	2506      	movs	r5, #6
    31a0:	426d      	negs	r5, r5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
    31a2:	0028      	movs	r0, r5
    31a4:	b007      	add	sp, #28
    31a6:	bd30      	pop	{r4, r5, pc}
    31a8:	2000023c 	.word	0x2000023c
    31ac:	00000b8d 	.word	0x00000b8d
    31b0:	00000985 	.word	0x00000985

000031b4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    31b4:	b510      	push	{r4, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    31ba:	4b0d      	ldr	r3, [pc, #52]	; (31f0 <gethostbyname+0x3c>)
    31bc:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    31be:	b2c3      	uxtb	r3, r0
    31c0:	2b40      	cmp	r3, #64	; 0x40
    31c2:	d810      	bhi.n	31e6 <gethostbyname+0x32>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    31c4:	23ff      	movs	r3, #255	; 0xff
    31c6:	4018      	ands	r0, r3
    31c8:	1c43      	adds	r3, r0, #1
    31ca:	2200      	movs	r2, #0
    31cc:	9202      	str	r2, [sp, #8]
    31ce:	9201      	str	r2, [sp, #4]
    31d0:	9200      	str	r2, [sp, #0]
    31d2:	0022      	movs	r2, r4
    31d4:	21ca      	movs	r1, #202	; 0xca
    31d6:	2002      	movs	r0, #2
    31d8:	4c06      	ldr	r4, [pc, #24]	; (31f4 <gethostbyname+0x40>)
    31da:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
    31dc:	2800      	cmp	r0, #0
    31de:	d004      	beq.n	31ea <gethostbyname+0x36>
		{
			s8Err = SOCK_ERR_INVALID;
    31e0:	2009      	movs	r0, #9
    31e2:	4240      	negs	r0, r0
    31e4:	e001      	b.n	31ea <gethostbyname+0x36>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    31e6:	2006      	movs	r0, #6
    31e8:	4240      	negs	r0, r0
		{
			s8Err = SOCK_ERR_INVALID;
		}
	}
	return s8Err;
}
    31ea:	b004      	add	sp, #16
    31ec:	bd10      	pop	{r4, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00000995 	.word	0x00000995
    31f4:	00000b8d 	.word	0x00000b8d

000031f8 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    31f8:	b570      	push	{r4, r5, r6, lr}
    31fa:	b082      	sub	sp, #8
    31fc:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    31fe:	4b29      	ldr	r3, [pc, #164]	; (32a4 <spi_flash_enable+0xac>)
    3200:	4798      	blx	r3
    3202:	0500      	lsls	r0, r0, #20
    3204:	0d00      	lsrs	r0, r0, #20
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
    3206:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3208:	4b27      	ldr	r3, [pc, #156]	; (32a8 <spi_flash_enable+0xb0>)
    320a:	4298      	cmp	r0, r3
    320c:	d947      	bls.n	329e <spi_flash_enable+0xa6>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    320e:	a901      	add	r1, sp, #4
    3210:	4826      	ldr	r0, [pc, #152]	; (32ac <spi_flash_enable+0xb4>)
    3212:	4b27      	ldr	r3, [pc, #156]	; (32b0 <spi_flash_enable+0xb8>)
    3214:	4798      	blx	r3
    3216:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3218:	d141      	bne.n	329e <spi_flash_enable+0xa6>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
    321a:	4926      	ldr	r1, [pc, #152]	; (32b4 <spi_flash_enable+0xbc>)
    321c:	9b01      	ldr	r3, [sp, #4]
    321e:	4019      	ands	r1, r3
    3220:	4b25      	ldr	r3, [pc, #148]	; (32b8 <spi_flash_enable+0xc0>)
    3222:	4319      	orrs	r1, r3
    3224:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3226:	4821      	ldr	r0, [pc, #132]	; (32ac <spi_flash_enable+0xb4>)
    3228:	4b24      	ldr	r3, [pc, #144]	; (32bc <spi_flash_enable+0xc4>)
    322a:	4798      	blx	r3
		if(enable) {
    322c:	2c00      	cmp	r4, #0
    322e:	d016      	beq.n	325e <spi_flash_enable+0x66>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3230:	2100      	movs	r1, #0
    3232:	4823      	ldr	r0, [pc, #140]	; (32c0 <spi_flash_enable+0xc8>)
    3234:	4c21      	ldr	r4, [pc, #132]	; (32bc <spi_flash_enable+0xc4>)
    3236:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3238:	21ab      	movs	r1, #171	; 0xab
    323a:	4822      	ldr	r0, [pc, #136]	; (32c4 <spi_flash_enable+0xcc>)
    323c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    323e:	2101      	movs	r1, #1
    3240:	4821      	ldr	r0, [pc, #132]	; (32c8 <spi_flash_enable+0xd0>)
    3242:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3244:	2100      	movs	r1, #0
    3246:	4821      	ldr	r0, [pc, #132]	; (32cc <spi_flash_enable+0xd4>)
    3248:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    324a:	2181      	movs	r1, #129	; 0x81
    324c:	4820      	ldr	r0, [pc, #128]	; (32d0 <spi_flash_enable+0xd8>)
    324e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3250:	4e20      	ldr	r6, [pc, #128]	; (32d4 <spi_flash_enable+0xdc>)
    3252:	4c21      	ldr	r4, [pc, #132]	; (32d8 <spi_flash_enable+0xe0>)
    3254:	0030      	movs	r0, r6
    3256:	47a0      	blx	r4
    3258:	2801      	cmp	r0, #1
    325a:	d1fb      	bne.n	3254 <spi_flash_enable+0x5c>
    325c:	e015      	b.n	328a <spi_flash_enable+0x92>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    325e:	2100      	movs	r1, #0
    3260:	4817      	ldr	r0, [pc, #92]	; (32c0 <spi_flash_enable+0xc8>)
    3262:	4c16      	ldr	r4, [pc, #88]	; (32bc <spi_flash_enable+0xc4>)
    3264:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3266:	21b9      	movs	r1, #185	; 0xb9
    3268:	4816      	ldr	r0, [pc, #88]	; (32c4 <spi_flash_enable+0xcc>)
    326a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    326c:	2101      	movs	r1, #1
    326e:	4816      	ldr	r0, [pc, #88]	; (32c8 <spi_flash_enable+0xd0>)
    3270:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3272:	2100      	movs	r1, #0
    3274:	4815      	ldr	r0, [pc, #84]	; (32cc <spi_flash_enable+0xd4>)
    3276:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3278:	2181      	movs	r1, #129	; 0x81
    327a:	4815      	ldr	r0, [pc, #84]	; (32d0 <spi_flash_enable+0xd8>)
    327c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    327e:	4e15      	ldr	r6, [pc, #84]	; (32d4 <spi_flash_enable+0xdc>)
    3280:	4c15      	ldr	r4, [pc, #84]	; (32d8 <spi_flash_enable+0xe0>)
    3282:	0030      	movs	r0, r6
    3284:	47a0      	blx	r4
    3286:	2801      	cmp	r0, #1
    3288:	d1fb      	bne.n	3282 <spi_flash_enable+0x8a>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
    328a:	490a      	ldr	r1, [pc, #40]	; (32b4 <spi_flash_enable+0xbc>)
    328c:	9b01      	ldr	r3, [sp, #4]
    328e:	4019      	ands	r1, r3
    3290:	2380      	movs	r3, #128	; 0x80
    3292:	025b      	lsls	r3, r3, #9
    3294:	4319      	orrs	r1, r3
    3296:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3298:	4804      	ldr	r0, [pc, #16]	; (32ac <spi_flash_enable+0xb4>)
    329a:	4b08      	ldr	r3, [pc, #32]	; (32bc <spi_flash_enable+0xc4>)
    329c:	4798      	blx	r3
	}
ERR1:
	return s8Ret;
}
    329e:	0028      	movs	r0, r5
    32a0:	b002      	add	sp, #8
    32a2:	bd70      	pop	{r4, r5, r6, pc}
    32a4:	00001af1 	.word	0x00001af1
    32a8:	0000039f 	.word	0x0000039f
    32ac:	00001410 	.word	0x00001410
    32b0:	00001e05 	.word	0x00001e05
    32b4:	f8888fff 	.word	0xf8888fff
    32b8:	01111000 	.word	0x01111000
    32bc:	00001e11 	.word	0x00001e11
    32c0:	00010208 	.word	0x00010208
    32c4:	0001020c 	.word	0x0001020c
    32c8:	00010214 	.word	0x00010214
    32cc:	0001021c 	.word	0x0001021c
    32d0:	00010204 	.word	0x00010204
    32d4:	00010218 	.word	0x00010218
    32d8:	00001df9 	.word	0x00001df9

000032dc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    32dc:	4b0c      	ldr	r3, [pc, #48]	; (3310 <cpu_irq_enter_critical+0x34>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	2b00      	cmp	r3, #0
    32e2:	d110      	bne.n	3306 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32e4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    32e8:	2b00      	cmp	r3, #0
    32ea:	d109      	bne.n	3300 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    32ec:	b672      	cpsid	i
    32ee:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    32f2:	2200      	movs	r2, #0
    32f4:	4b07      	ldr	r3, [pc, #28]	; (3314 <cpu_irq_enter_critical+0x38>)
    32f6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    32f8:	3201      	adds	r2, #1
    32fa:	4b07      	ldr	r3, [pc, #28]	; (3318 <cpu_irq_enter_critical+0x3c>)
    32fc:	701a      	strb	r2, [r3, #0]
    32fe:	e002      	b.n	3306 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3300:	2200      	movs	r2, #0
    3302:	4b05      	ldr	r3, [pc, #20]	; (3318 <cpu_irq_enter_critical+0x3c>)
    3304:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3306:	4a02      	ldr	r2, [pc, #8]	; (3310 <cpu_irq_enter_critical+0x34>)
    3308:	6813      	ldr	r3, [r2, #0]
    330a:	3301      	adds	r3, #1
    330c:	6013      	str	r3, [r2, #0]
}
    330e:	4770      	bx	lr
    3310:	200000d0 	.word	0x200000d0
    3314:	20000010 	.word	0x20000010
    3318:	200000d4 	.word	0x200000d4

0000331c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    331c:	4b08      	ldr	r3, [pc, #32]	; (3340 <cpu_irq_leave_critical+0x24>)
    331e:	681a      	ldr	r2, [r3, #0]
    3320:	3a01      	subs	r2, #1
    3322:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	2b00      	cmp	r3, #0
    3328:	d109      	bne.n	333e <cpu_irq_leave_critical+0x22>
    332a:	4b06      	ldr	r3, [pc, #24]	; (3344 <cpu_irq_leave_critical+0x28>)
    332c:	781b      	ldrb	r3, [r3, #0]
    332e:	2b00      	cmp	r3, #0
    3330:	d005      	beq.n	333e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3332:	2201      	movs	r2, #1
    3334:	4b04      	ldr	r3, [pc, #16]	; (3348 <cpu_irq_leave_critical+0x2c>)
    3336:	701a      	strb	r2, [r3, #0]
    3338:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    333c:	b662      	cpsie	i
	}
}
    333e:	4770      	bx	lr
    3340:	200000d0 	.word	0x200000d0
    3344:	200000d4 	.word	0x200000d4
    3348:	20000010 	.word	0x20000010

0000334c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    334c:	b5f0      	push	{r4, r5, r6, r7, lr}
    334e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3350:	ac01      	add	r4, sp, #4
    3352:	2501      	movs	r5, #1
    3354:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3356:	2700      	movs	r7, #0
    3358:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    335a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    335c:	0021      	movs	r1, r4
    335e:	2017      	movs	r0, #23
    3360:	4e06      	ldr	r6, [pc, #24]	; (337c <system_board_init+0x30>)
    3362:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3364:	2280      	movs	r2, #128	; 0x80
    3366:	0412      	lsls	r2, r2, #16
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <system_board_init+0x34>)
    336a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    336c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    336e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3370:	0021      	movs	r1, r4
    3372:	2037      	movs	r0, #55	; 0x37
    3374:	47b0      	blx	r6
}
    3376:	b003      	add	sp, #12
    3378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	00003565 	.word	0x00003565
    3380:	41004400 	.word	0x41004400

00003384 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3384:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3386:	2a00      	cmp	r2, #0
    3388:	d10d      	bne.n	33a6 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    338a:	008b      	lsls	r3, r1, #2
    338c:	4a07      	ldr	r2, [pc, #28]	; (33ac <extint_register_callback+0x28>)
    338e:	589b      	ldr	r3, [r3, r2]
    3390:	2b00      	cmp	r3, #0
    3392:	d103      	bne.n	339c <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    3394:	0089      	lsls	r1, r1, #2
    3396:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3398:	2300      	movs	r3, #0
    339a:	e004      	b.n	33a6 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    339c:	4283      	cmp	r3, r0
    339e:	d001      	beq.n	33a4 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    33a0:	231d      	movs	r3, #29
    33a2:	e000      	b.n	33a6 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    33a4:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    33a6:	0018      	movs	r0, r3
    33a8:	4770      	bx	lr
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	200002fc 	.word	0x200002fc

000033b0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33b0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    33b2:	2900      	cmp	r1, #0
    33b4:	d107      	bne.n	33c6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    33b6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    33b8:	281f      	cmp	r0, #31
    33ba:	d800      	bhi.n	33be <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    33bc:	4a03      	ldr	r2, [pc, #12]	; (33cc <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    33be:	2301      	movs	r3, #1
    33c0:	4083      	lsls	r3, r0
    33c2:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    33c4:	2300      	movs	r3, #0
}
    33c6:	0018      	movs	r0, r3
    33c8:	4770      	bx	lr
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	40001800 	.word	0x40001800

000033d0 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33d0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    33d2:	2900      	cmp	r1, #0
    33d4:	d107      	bne.n	33e6 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    33d6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    33d8:	281f      	cmp	r0, #31
    33da:	d800      	bhi.n	33de <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    33dc:	4a03      	ldr	r2, [pc, #12]	; (33ec <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    33de:	2301      	movs	r3, #1
    33e0:	4083      	lsls	r3, r0
    33e2:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    33e4:	2300      	movs	r3, #0
}
    33e6:	0018      	movs	r0, r3
    33e8:	4770      	bx	lr
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	40001800 	.word	0x40001800

000033f0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    33f0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    33f2:	2200      	movs	r2, #0
    33f4:	4b15      	ldr	r3, [pc, #84]	; (344c <EIC_Handler+0x5c>)
    33f6:	701a      	strb	r2, [r3, #0]
    33f8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    33fa:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    33fc:	4e14      	ldr	r6, [pc, #80]	; (3450 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    33fe:	4c13      	ldr	r4, [pc, #76]	; (344c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3400:	2b1f      	cmp	r3, #31
    3402:	d919      	bls.n	3438 <EIC_Handler+0x48>
    3404:	e00f      	b.n	3426 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3406:	2100      	movs	r1, #0
    3408:	e000      	b.n	340c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    340a:	4912      	ldr	r1, [pc, #72]	; (3454 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    340c:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    340e:	009b      	lsls	r3, r3, #2
    3410:	599b      	ldr	r3, [r3, r6]
    3412:	2b00      	cmp	r3, #0
    3414:	d000      	beq.n	3418 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3416:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3418:	7823      	ldrb	r3, [r4, #0]
    341a:	3301      	adds	r3, #1
    341c:	b2db      	uxtb	r3, r3
    341e:	7023      	strb	r3, [r4, #0]
    3420:	2b0f      	cmp	r3, #15
    3422:	d9ed      	bls.n	3400 <EIC_Handler+0x10>
    3424:	e011      	b.n	344a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3426:	0029      	movs	r1, r5
    3428:	4019      	ands	r1, r3
    342a:	2201      	movs	r2, #1
    342c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    342e:	2100      	movs	r1, #0
    3430:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3432:	4211      	tst	r1, r2
    3434:	d1e7      	bne.n	3406 <EIC_Handler+0x16>
    3436:	e7ef      	b.n	3418 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3438:	0029      	movs	r1, r5
    343a:	4019      	ands	r1, r3
    343c:	2201      	movs	r2, #1
    343e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3440:	4904      	ldr	r1, [pc, #16]	; (3454 <EIC_Handler+0x64>)
    3442:	6909      	ldr	r1, [r1, #16]
    3444:	4211      	tst	r1, r2
    3446:	d1e0      	bne.n	340a <EIC_Handler+0x1a>
    3448:	e7e6      	b.n	3418 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    344a:	bd70      	pop	{r4, r5, r6, pc}
    344c:	200002f8 	.word	0x200002f8
    3450:	200002fc 	.word	0x200002fc
    3454:	40001800 	.word	0x40001800

00003458 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3458:	4a04      	ldr	r2, [pc, #16]	; (346c <_extint_enable+0x14>)
    345a:	7811      	ldrb	r1, [r2, #0]
    345c:	2302      	movs	r3, #2
    345e:	430b      	orrs	r3, r1
    3460:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3462:	7853      	ldrb	r3, [r2, #1]
    3464:	b25b      	sxtb	r3, r3
    3466:	2b00      	cmp	r3, #0
    3468:	dbfb      	blt.n	3462 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    346a:	4770      	bx	lr
    346c:	40001800 	.word	0x40001800

00003470 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3470:	b500      	push	{lr}
    3472:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3474:	4a12      	ldr	r2, [pc, #72]	; (34c0 <_system_extint_init+0x50>)
    3476:	6991      	ldr	r1, [r2, #24]
    3478:	2340      	movs	r3, #64	; 0x40
    347a:	430b      	orrs	r3, r1
    347c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    347e:	a901      	add	r1, sp, #4
    3480:	2300      	movs	r3, #0
    3482:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3484:	2005      	movs	r0, #5
    3486:	4b0f      	ldr	r3, [pc, #60]	; (34c4 <_system_extint_init+0x54>)
    3488:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    348a:	2005      	movs	r0, #5
    348c:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <_system_extint_init+0x58>)
    348e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3490:	4a0e      	ldr	r2, [pc, #56]	; (34cc <_system_extint_init+0x5c>)
    3492:	7811      	ldrb	r1, [r2, #0]
    3494:	2301      	movs	r3, #1
    3496:	430b      	orrs	r3, r1
    3498:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    349a:	7853      	ldrb	r3, [r2, #1]
    349c:	b25b      	sxtb	r3, r3
    349e:	2b00      	cmp	r3, #0
    34a0:	dbfb      	blt.n	349a <_system_extint_init+0x2a>
    34a2:	4b0b      	ldr	r3, [pc, #44]	; (34d0 <_system_extint_init+0x60>)
    34a4:	0019      	movs	r1, r3
    34a6:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    34a8:	2200      	movs	r2, #0
    34aa:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    34ac:	4299      	cmp	r1, r3
    34ae:	d1fc      	bne.n	34aa <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34b0:	2210      	movs	r2, #16
    34b2:	4b08      	ldr	r3, [pc, #32]	; (34d4 <_system_extint_init+0x64>)
    34b4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    34b6:	4b08      	ldr	r3, [pc, #32]	; (34d8 <_system_extint_init+0x68>)
    34b8:	4798      	blx	r3
}
    34ba:	b003      	add	sp, #12
    34bc:	bd00      	pop	{pc}
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	40000400 	.word	0x40000400
    34c4:	00004a85 	.word	0x00004a85
    34c8:	000049f9 	.word	0x000049f9
    34cc:	40001800 	.word	0x40001800
    34d0:	200002fc 	.word	0x200002fc
    34d4:	e000e100 	.word	0xe000e100
    34d8:	00003459 	.word	0x00003459

000034dc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    34dc:	2300      	movs	r3, #0
    34de:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    34e0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    34e2:	2201      	movs	r2, #1
    34e4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    34e6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    34e8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    34ea:	3302      	adds	r3, #2
    34ec:	72c3      	strb	r3, [r0, #11]
}
    34ee:	4770      	bx	lr

000034f0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    34f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f2:	b083      	sub	sp, #12
    34f4:	0005      	movs	r5, r0
    34f6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34f8:	a901      	add	r1, sp, #4
    34fa:	2300      	movs	r3, #0
    34fc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    34fe:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3500:	7923      	ldrb	r3, [r4, #4]
    3502:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3504:	7a23      	ldrb	r3, [r4, #8]
    3506:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3508:	7820      	ldrb	r0, [r4, #0]
    350a:	4b14      	ldr	r3, [pc, #80]	; (355c <extint_chan_set_config+0x6c>)
    350c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    350e:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3510:	2d1f      	cmp	r5, #31
    3512:	d800      	bhi.n	3516 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3514:	4812      	ldr	r0, [pc, #72]	; (3560 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    3516:	2107      	movs	r1, #7
    3518:	4029      	ands	r1, r5
    351a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    351c:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    351e:	7aa3      	ldrb	r3, [r4, #10]
    3520:	2b00      	cmp	r3, #0
    3522:	d001      	beq.n	3528 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    3524:	2308      	movs	r3, #8
    3526:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    3528:	08eb      	lsrs	r3, r5, #3
    352a:	009b      	lsls	r3, r3, #2
    352c:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    352e:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3530:	270f      	movs	r7, #15
    3532:	408f      	lsls	r7, r1
    3534:	43be      	bics	r6, r7
    3536:	408a      	lsls	r2, r1
    3538:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    353a:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    353c:	7a63      	ldrb	r3, [r4, #9]
    353e:	2b00      	cmp	r3, #0
    3540:	d005      	beq.n	354e <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    3542:	6942      	ldr	r2, [r0, #20]
    3544:	2301      	movs	r3, #1
    3546:	40ab      	lsls	r3, r5
    3548:	4313      	orrs	r3, r2
    354a:	6143      	str	r3, [r0, #20]
    354c:	e004      	b.n	3558 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    354e:	6943      	ldr	r3, [r0, #20]
    3550:	2201      	movs	r2, #1
    3552:	40aa      	lsls	r2, r5
    3554:	4393      	bics	r3, r2
    3556:	6143      	str	r3, [r0, #20]
	}
}
    3558:	b003      	add	sp, #12
    355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    355c:	00004b7d 	.word	0x00004b7d
    3560:	40001800 	.word	0x40001800

00003564 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3564:	b500      	push	{lr}
    3566:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3568:	ab01      	add	r3, sp, #4
    356a:	2280      	movs	r2, #128	; 0x80
    356c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    356e:	780a      	ldrb	r2, [r1, #0]
    3570:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3572:	784a      	ldrb	r2, [r1, #1]
    3574:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3576:	788a      	ldrb	r2, [r1, #2]
    3578:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    357a:	0019      	movs	r1, r3
    357c:	4b01      	ldr	r3, [pc, #4]	; (3584 <port_pin_set_config+0x20>)
    357e:	4798      	blx	r3
}
    3580:	b003      	add	sp, #12
    3582:	bd00      	pop	{pc}
    3584:	00004b7d 	.word	0x00004b7d

00003588 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3588:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    358a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    358c:	2340      	movs	r3, #64	; 0x40
    358e:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3590:	4281      	cmp	r1, r0
    3592:	d201      	bcs.n	3598 <_sercom_get_sync_baud_val+0x10>
    3594:	e00a      	b.n	35ac <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    3596:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    3598:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    359a:	1c63      	adds	r3, r4, #1
    359c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    359e:	4288      	cmp	r0, r1
    35a0:	d9f9      	bls.n	3596 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35a2:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    35a4:	2cff      	cmp	r4, #255	; 0xff
    35a6:	d801      	bhi.n	35ac <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    35a8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    35aa:	2300      	movs	r3, #0
	}
}
    35ac:	0018      	movs	r0, r3
    35ae:	bd10      	pop	{r4, pc}

000035b0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    35b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35b2:	465f      	mov	r7, fp
    35b4:	4656      	mov	r6, sl
    35b6:	464d      	mov	r5, r9
    35b8:	4644      	mov	r4, r8
    35ba:	b4f0      	push	{r4, r5, r6, r7}
    35bc:	b089      	sub	sp, #36	; 0x24
    35be:	000c      	movs	r4, r1
    35c0:	9205      	str	r2, [sp, #20]
    35c2:	aa12      	add	r2, sp, #72	; 0x48
    35c4:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35c6:	0002      	movs	r2, r0
    35c8:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35ca:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35cc:	42a2      	cmp	r2, r4
    35ce:	d900      	bls.n	35d2 <_sercom_get_async_baud_val+0x22>
    35d0:	e0c6      	b.n	3760 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    35d2:	2b00      	cmp	r3, #0
    35d4:	d151      	bne.n	367a <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    35d6:	0002      	movs	r2, r0
    35d8:	0008      	movs	r0, r1
    35da:	2100      	movs	r1, #0
    35dc:	4d64      	ldr	r5, [pc, #400]	; (3770 <_sercom_get_async_baud_val+0x1c0>)
    35de:	47a8      	blx	r5
    35e0:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    35e2:	0026      	movs	r6, r4
    35e4:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    35e6:	2300      	movs	r3, #0
    35e8:	2400      	movs	r4, #0
    35ea:	9300      	str	r3, [sp, #0]
    35ec:	9401      	str	r4, [sp, #4]
    35ee:	2200      	movs	r2, #0
    35f0:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    35f2:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    35f4:	2120      	movs	r1, #32
    35f6:	468c      	mov	ip, r1
    35f8:	391f      	subs	r1, #31
    35fa:	9602      	str	r6, [sp, #8]
    35fc:	9703      	str	r7, [sp, #12]
    35fe:	2420      	movs	r4, #32
    3600:	4264      	negs	r4, r4
    3602:	1904      	adds	r4, r0, r4
    3604:	d403      	bmi.n	360e <_sercom_get_async_baud_val+0x5e>
    3606:	000d      	movs	r5, r1
    3608:	40a5      	lsls	r5, r4
    360a:	46a8      	mov	r8, r5
    360c:	e004      	b.n	3618 <_sercom_get_async_baud_val+0x68>
    360e:	4664      	mov	r4, ip
    3610:	1a24      	subs	r4, r4, r0
    3612:	000d      	movs	r5, r1
    3614:	40e5      	lsrs	r5, r4
    3616:	46a8      	mov	r8, r5
    3618:	000c      	movs	r4, r1
    361a:	4084      	lsls	r4, r0
    361c:	46a1      	mov	r9, r4

		r = r << 1;
    361e:	0014      	movs	r4, r2
    3620:	001d      	movs	r5, r3
    3622:	18a4      	adds	r4, r4, r2
    3624:	415d      	adcs	r5, r3
    3626:	0022      	movs	r2, r4
    3628:	002b      	movs	r3, r5

		if (n & bit_shift) {
    362a:	4646      	mov	r6, r8
    362c:	465f      	mov	r7, fp
    362e:	423e      	tst	r6, r7
    3630:	d003      	beq.n	363a <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    3632:	000e      	movs	r6, r1
    3634:	4326      	orrs	r6, r4
    3636:	0032      	movs	r2, r6
    3638:	002b      	movs	r3, r5
		}

		if (r >= d) {
    363a:	9c02      	ldr	r4, [sp, #8]
    363c:	9d03      	ldr	r5, [sp, #12]
    363e:	429d      	cmp	r5, r3
    3640:	d80f      	bhi.n	3662 <_sercom_get_async_baud_val+0xb2>
    3642:	d101      	bne.n	3648 <_sercom_get_async_baud_val+0x98>
    3644:	4294      	cmp	r4, r2
    3646:	d80c      	bhi.n	3662 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    3648:	9c02      	ldr	r4, [sp, #8]
    364a:	9d03      	ldr	r5, [sp, #12]
    364c:	1b12      	subs	r2, r2, r4
    364e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3650:	464d      	mov	r5, r9
    3652:	9e00      	ldr	r6, [sp, #0]
    3654:	9f01      	ldr	r7, [sp, #4]
    3656:	4335      	orrs	r5, r6
    3658:	003c      	movs	r4, r7
    365a:	4646      	mov	r6, r8
    365c:	4334      	orrs	r4, r6
    365e:	9500      	str	r5, [sp, #0]
    3660:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3662:	3801      	subs	r0, #1
    3664:	d2cb      	bcs.n	35fe <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    3666:	2200      	movs	r2, #0
    3668:	2301      	movs	r3, #1
    366a:	9800      	ldr	r0, [sp, #0]
    366c:	9901      	ldr	r1, [sp, #4]
    366e:	1a12      	subs	r2, r2, r0
    3670:	418b      	sbcs	r3, r1
    3672:	0c12      	lsrs	r2, r2, #16
    3674:	041b      	lsls	r3, r3, #16
    3676:	431a      	orrs	r2, r3
    3678:	e06f      	b.n	375a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    367a:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    367c:	2b01      	cmp	r3, #1
    367e:	d16c      	bne.n	375a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    3680:	0f63      	lsrs	r3, r4, #29
    3682:	9304      	str	r3, [sp, #16]
    3684:	00e3      	lsls	r3, r4, #3
    3686:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    3688:	000a      	movs	r2, r1
    368a:	2300      	movs	r3, #0
    368c:	2100      	movs	r1, #0
    368e:	4c38      	ldr	r4, [pc, #224]	; (3770 <_sercom_get_async_baud_val+0x1c0>)
    3690:	47a0      	blx	r4
    3692:	0004      	movs	r4, r0
    3694:	000d      	movs	r5, r1
    3696:	2300      	movs	r3, #0
    3698:	469c      	mov	ip, r3
    369a:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    369c:	3320      	adds	r3, #32
    369e:	469b      	mov	fp, r3
    36a0:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    36a2:	4663      	mov	r3, ip
    36a4:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    36a6:	2300      	movs	r3, #0
    36a8:	9302      	str	r3, [sp, #8]
    36aa:	2200      	movs	r2, #0
    36ac:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    36ae:	213f      	movs	r1, #63	; 0x3f
    36b0:	9400      	str	r4, [sp, #0]
    36b2:	9501      	str	r5, [sp, #4]
    36b4:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    36b6:	2120      	movs	r1, #32
    36b8:	4249      	negs	r1, r1
    36ba:	1879      	adds	r1, r7, r1
    36bc:	d403      	bmi.n	36c6 <_sercom_get_async_baud_val+0x116>
    36be:	0030      	movs	r0, r6
    36c0:	4088      	lsls	r0, r1
    36c2:	4684      	mov	ip, r0
    36c4:	e004      	b.n	36d0 <_sercom_get_async_baud_val+0x120>
    36c6:	4659      	mov	r1, fp
    36c8:	1bc9      	subs	r1, r1, r7
    36ca:	0030      	movs	r0, r6
    36cc:	40c8      	lsrs	r0, r1
    36ce:	4684      	mov	ip, r0
    36d0:	0031      	movs	r1, r6
    36d2:	40b9      	lsls	r1, r7
    36d4:	4689      	mov	r9, r1

		r = r << 1;
    36d6:	0010      	movs	r0, r2
    36d8:	0019      	movs	r1, r3
    36da:	1880      	adds	r0, r0, r2
    36dc:	4159      	adcs	r1, r3
    36de:	0002      	movs	r2, r0
    36e0:	000b      	movs	r3, r1

		if (n & bit_shift) {
    36e2:	4644      	mov	r4, r8
    36e4:	464d      	mov	r5, r9
    36e6:	402c      	ands	r4, r5
    36e8:	46a2      	mov	sl, r4
    36ea:	4664      	mov	r4, ip
    36ec:	9d04      	ldr	r5, [sp, #16]
    36ee:	402c      	ands	r4, r5
    36f0:	46a4      	mov	ip, r4
    36f2:	4654      	mov	r4, sl
    36f4:	4665      	mov	r5, ip
    36f6:	432c      	orrs	r4, r5
    36f8:	d003      	beq.n	3702 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    36fa:	0034      	movs	r4, r6
    36fc:	4304      	orrs	r4, r0
    36fe:	0022      	movs	r2, r4
    3700:	000b      	movs	r3, r1
		}

		if (r >= d) {
    3702:	9800      	ldr	r0, [sp, #0]
    3704:	9901      	ldr	r1, [sp, #4]
    3706:	4299      	cmp	r1, r3
    3708:	d80a      	bhi.n	3720 <_sercom_get_async_baud_val+0x170>
    370a:	d101      	bne.n	3710 <_sercom_get_async_baud_val+0x160>
    370c:	4290      	cmp	r0, r2
    370e:	d807      	bhi.n	3720 <_sercom_get_async_baud_val+0x170>
			r = r - d;
    3710:	9800      	ldr	r0, [sp, #0]
    3712:	9901      	ldr	r1, [sp, #4]
    3714:	1a12      	subs	r2, r2, r0
    3716:	418b      	sbcs	r3, r1
			q |= bit_shift;
    3718:	9902      	ldr	r1, [sp, #8]
    371a:	4648      	mov	r0, r9
    371c:	4301      	orrs	r1, r0
    371e:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3720:	3f01      	subs	r7, #1
    3722:	d2c8      	bcs.n	36b6 <_sercom_get_async_baud_val+0x106>
    3724:	9c00      	ldr	r4, [sp, #0]
    3726:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    3728:	9902      	ldr	r1, [sp, #8]
    372a:	9a07      	ldr	r2, [sp, #28]
    372c:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    372e:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    3730:	4910      	ldr	r1, [pc, #64]	; (3774 <_sercom_get_async_baud_val+0x1c4>)
    3732:	428b      	cmp	r3, r1
    3734:	d90b      	bls.n	374e <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3736:	9b06      	ldr	r3, [sp, #24]
    3738:	3301      	adds	r3, #1
    373a:	b2db      	uxtb	r3, r3
    373c:	0019      	movs	r1, r3
    373e:	9306      	str	r3, [sp, #24]
    3740:	0013      	movs	r3, r2
    3742:	3301      	adds	r3, #1
    3744:	9307      	str	r3, [sp, #28]
    3746:	2908      	cmp	r1, #8
    3748:	d1ad      	bne.n	36a6 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    374a:	2540      	movs	r5, #64	; 0x40
    374c:	e008      	b.n	3760 <_sercom_get_async_baud_val+0x1b0>
    374e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    3750:	9a06      	ldr	r2, [sp, #24]
    3752:	2a08      	cmp	r2, #8
    3754:	d004      	beq.n	3760 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    3756:	0352      	lsls	r2, r2, #13
    3758:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    375a:	9b05      	ldr	r3, [sp, #20]
    375c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    375e:	2500      	movs	r5, #0
}
    3760:	0028      	movs	r0, r5
    3762:	b009      	add	sp, #36	; 0x24
    3764:	bc3c      	pop	{r2, r3, r4, r5}
    3766:	4690      	mov	r8, r2
    3768:	4699      	mov	r9, r3
    376a:	46a2      	mov	sl, r4
    376c:	46ab      	mov	fp, r5
    376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3770:	00005c25 	.word	0x00005c25
    3774:	00001fff 	.word	0x00001fff

00003778 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3778:	b510      	push	{r4, lr}
    377a:	b082      	sub	sp, #8
    377c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    377e:	4b0e      	ldr	r3, [pc, #56]	; (37b8 <sercom_set_gclk_generator+0x40>)
    3780:	781b      	ldrb	r3, [r3, #0]
    3782:	2b00      	cmp	r3, #0
    3784:	d001      	beq.n	378a <sercom_set_gclk_generator+0x12>
    3786:	2900      	cmp	r1, #0
    3788:	d00d      	beq.n	37a6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    378a:	a901      	add	r1, sp, #4
    378c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    378e:	2013      	movs	r0, #19
    3790:	4b0a      	ldr	r3, [pc, #40]	; (37bc <sercom_set_gclk_generator+0x44>)
    3792:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3794:	2013      	movs	r0, #19
    3796:	4b0a      	ldr	r3, [pc, #40]	; (37c0 <sercom_set_gclk_generator+0x48>)
    3798:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    379a:	4b07      	ldr	r3, [pc, #28]	; (37b8 <sercom_set_gclk_generator+0x40>)
    379c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    379e:	2201      	movs	r2, #1
    37a0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    37a2:	2000      	movs	r0, #0
    37a4:	e006      	b.n	37b4 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    37a6:	4b04      	ldr	r3, [pc, #16]	; (37b8 <sercom_set_gclk_generator+0x40>)
    37a8:	785b      	ldrb	r3, [r3, #1]
    37aa:	4283      	cmp	r3, r0
    37ac:	d001      	beq.n	37b2 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    37ae:	201d      	movs	r0, #29
    37b0:	e000      	b.n	37b4 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    37b2:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    37b4:	b002      	add	sp, #8
    37b6:	bd10      	pop	{r4, pc}
    37b8:	200000d8 	.word	0x200000d8
    37bc:	00004a85 	.word	0x00004a85
    37c0:	000049f9 	.word	0x000049f9

000037c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    37c4:	4b44      	ldr	r3, [pc, #272]	; (38d8 <_sercom_get_default_pad+0x114>)
    37c6:	4298      	cmp	r0, r3
    37c8:	d033      	beq.n	3832 <_sercom_get_default_pad+0x6e>
    37ca:	d806      	bhi.n	37da <_sercom_get_default_pad+0x16>
    37cc:	4b43      	ldr	r3, [pc, #268]	; (38dc <_sercom_get_default_pad+0x118>)
    37ce:	4298      	cmp	r0, r3
    37d0:	d00d      	beq.n	37ee <_sercom_get_default_pad+0x2a>
    37d2:	4b43      	ldr	r3, [pc, #268]	; (38e0 <_sercom_get_default_pad+0x11c>)
    37d4:	4298      	cmp	r0, r3
    37d6:	d01b      	beq.n	3810 <_sercom_get_default_pad+0x4c>
    37d8:	e06f      	b.n	38ba <_sercom_get_default_pad+0xf6>
    37da:	4b42      	ldr	r3, [pc, #264]	; (38e4 <_sercom_get_default_pad+0x120>)
    37dc:	4298      	cmp	r0, r3
    37de:	d04a      	beq.n	3876 <_sercom_get_default_pad+0xb2>
    37e0:	4b41      	ldr	r3, [pc, #260]	; (38e8 <_sercom_get_default_pad+0x124>)
    37e2:	4298      	cmp	r0, r3
    37e4:	d058      	beq.n	3898 <_sercom_get_default_pad+0xd4>
    37e6:	4b41      	ldr	r3, [pc, #260]	; (38ec <_sercom_get_default_pad+0x128>)
    37e8:	4298      	cmp	r0, r3
    37ea:	d166      	bne.n	38ba <_sercom_get_default_pad+0xf6>
    37ec:	e032      	b.n	3854 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37ee:	2901      	cmp	r1, #1
    37f0:	d006      	beq.n	3800 <_sercom_get_default_pad+0x3c>
    37f2:	2900      	cmp	r1, #0
    37f4:	d063      	beq.n	38be <_sercom_get_default_pad+0xfa>
    37f6:	2902      	cmp	r1, #2
    37f8:	d006      	beq.n	3808 <_sercom_get_default_pad+0x44>
    37fa:	2903      	cmp	r1, #3
    37fc:	d006      	beq.n	380c <_sercom_get_default_pad+0x48>
    37fe:	e001      	b.n	3804 <_sercom_get_default_pad+0x40>
    3800:	483b      	ldr	r0, [pc, #236]	; (38f0 <_sercom_get_default_pad+0x12c>)
    3802:	e067      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3804:	2000      	movs	r0, #0
    3806:	e065      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3808:	483a      	ldr	r0, [pc, #232]	; (38f4 <_sercom_get_default_pad+0x130>)
    380a:	e063      	b.n	38d4 <_sercom_get_default_pad+0x110>
    380c:	483a      	ldr	r0, [pc, #232]	; (38f8 <_sercom_get_default_pad+0x134>)
    380e:	e061      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3810:	2901      	cmp	r1, #1
    3812:	d006      	beq.n	3822 <_sercom_get_default_pad+0x5e>
    3814:	2900      	cmp	r1, #0
    3816:	d054      	beq.n	38c2 <_sercom_get_default_pad+0xfe>
    3818:	2902      	cmp	r1, #2
    381a:	d006      	beq.n	382a <_sercom_get_default_pad+0x66>
    381c:	2903      	cmp	r1, #3
    381e:	d006      	beq.n	382e <_sercom_get_default_pad+0x6a>
    3820:	e001      	b.n	3826 <_sercom_get_default_pad+0x62>
    3822:	4836      	ldr	r0, [pc, #216]	; (38fc <_sercom_get_default_pad+0x138>)
    3824:	e056      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3826:	2000      	movs	r0, #0
    3828:	e054      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    382a:	4835      	ldr	r0, [pc, #212]	; (3900 <_sercom_get_default_pad+0x13c>)
    382c:	e052      	b.n	38d4 <_sercom_get_default_pad+0x110>
    382e:	4835      	ldr	r0, [pc, #212]	; (3904 <_sercom_get_default_pad+0x140>)
    3830:	e050      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3832:	2901      	cmp	r1, #1
    3834:	d006      	beq.n	3844 <_sercom_get_default_pad+0x80>
    3836:	2900      	cmp	r1, #0
    3838:	d045      	beq.n	38c6 <_sercom_get_default_pad+0x102>
    383a:	2902      	cmp	r1, #2
    383c:	d006      	beq.n	384c <_sercom_get_default_pad+0x88>
    383e:	2903      	cmp	r1, #3
    3840:	d006      	beq.n	3850 <_sercom_get_default_pad+0x8c>
    3842:	e001      	b.n	3848 <_sercom_get_default_pad+0x84>
    3844:	4830      	ldr	r0, [pc, #192]	; (3908 <_sercom_get_default_pad+0x144>)
    3846:	e045      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3848:	2000      	movs	r0, #0
    384a:	e043      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    384c:	482f      	ldr	r0, [pc, #188]	; (390c <_sercom_get_default_pad+0x148>)
    384e:	e041      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3850:	482f      	ldr	r0, [pc, #188]	; (3910 <_sercom_get_default_pad+0x14c>)
    3852:	e03f      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3854:	2901      	cmp	r1, #1
    3856:	d006      	beq.n	3866 <_sercom_get_default_pad+0xa2>
    3858:	2900      	cmp	r1, #0
    385a:	d036      	beq.n	38ca <_sercom_get_default_pad+0x106>
    385c:	2902      	cmp	r1, #2
    385e:	d006      	beq.n	386e <_sercom_get_default_pad+0xaa>
    3860:	2903      	cmp	r1, #3
    3862:	d006      	beq.n	3872 <_sercom_get_default_pad+0xae>
    3864:	e001      	b.n	386a <_sercom_get_default_pad+0xa6>
    3866:	482b      	ldr	r0, [pc, #172]	; (3914 <_sercom_get_default_pad+0x150>)
    3868:	e034      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    386a:	2000      	movs	r0, #0
    386c:	e032      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    386e:	482a      	ldr	r0, [pc, #168]	; (3918 <_sercom_get_default_pad+0x154>)
    3870:	e030      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3872:	482a      	ldr	r0, [pc, #168]	; (391c <_sercom_get_default_pad+0x158>)
    3874:	e02e      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3876:	2901      	cmp	r1, #1
    3878:	d006      	beq.n	3888 <_sercom_get_default_pad+0xc4>
    387a:	2900      	cmp	r1, #0
    387c:	d027      	beq.n	38ce <_sercom_get_default_pad+0x10a>
    387e:	2902      	cmp	r1, #2
    3880:	d006      	beq.n	3890 <_sercom_get_default_pad+0xcc>
    3882:	2903      	cmp	r1, #3
    3884:	d006      	beq.n	3894 <_sercom_get_default_pad+0xd0>
    3886:	e001      	b.n	388c <_sercom_get_default_pad+0xc8>
    3888:	4825      	ldr	r0, [pc, #148]	; (3920 <_sercom_get_default_pad+0x15c>)
    388a:	e023      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    388c:	2000      	movs	r0, #0
    388e:	e021      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3890:	4824      	ldr	r0, [pc, #144]	; (3924 <_sercom_get_default_pad+0x160>)
    3892:	e01f      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3894:	4824      	ldr	r0, [pc, #144]	; (3928 <_sercom_get_default_pad+0x164>)
    3896:	e01d      	b.n	38d4 <_sercom_get_default_pad+0x110>
    3898:	2901      	cmp	r1, #1
    389a:	d006      	beq.n	38aa <_sercom_get_default_pad+0xe6>
    389c:	2900      	cmp	r1, #0
    389e:	d018      	beq.n	38d2 <_sercom_get_default_pad+0x10e>
    38a0:	2902      	cmp	r1, #2
    38a2:	d006      	beq.n	38b2 <_sercom_get_default_pad+0xee>
    38a4:	2903      	cmp	r1, #3
    38a6:	d006      	beq.n	38b6 <_sercom_get_default_pad+0xf2>
    38a8:	e001      	b.n	38ae <_sercom_get_default_pad+0xea>
    38aa:	4820      	ldr	r0, [pc, #128]	; (392c <_sercom_get_default_pad+0x168>)
    38ac:	e012      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38ae:	2000      	movs	r0, #0
    38b0:	e010      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38b2:	481f      	ldr	r0, [pc, #124]	; (3930 <_sercom_get_default_pad+0x16c>)
    38b4:	e00e      	b.n	38d4 <_sercom_get_default_pad+0x110>
    38b6:	481f      	ldr	r0, [pc, #124]	; (3934 <_sercom_get_default_pad+0x170>)
    38b8:	e00c      	b.n	38d4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38ba:	2000      	movs	r0, #0
    38bc:	e00a      	b.n	38d4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38be:	481e      	ldr	r0, [pc, #120]	; (3938 <_sercom_get_default_pad+0x174>)
    38c0:	e008      	b.n	38d4 <_sercom_get_default_pad+0x110>
    38c2:	2003      	movs	r0, #3
    38c4:	e006      	b.n	38d4 <_sercom_get_default_pad+0x110>
    38c6:	481d      	ldr	r0, [pc, #116]	; (393c <_sercom_get_default_pad+0x178>)
    38c8:	e004      	b.n	38d4 <_sercom_get_default_pad+0x110>
    38ca:	481d      	ldr	r0, [pc, #116]	; (3940 <_sercom_get_default_pad+0x17c>)
    38cc:	e002      	b.n	38d4 <_sercom_get_default_pad+0x110>
    38ce:	481d      	ldr	r0, [pc, #116]	; (3944 <_sercom_get_default_pad+0x180>)
    38d0:	e000      	b.n	38d4 <_sercom_get_default_pad+0x110>
    38d2:	481d      	ldr	r0, [pc, #116]	; (3948 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    38d4:	4770      	bx	lr
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	42001000 	.word	0x42001000
    38dc:	42000800 	.word	0x42000800
    38e0:	42000c00 	.word	0x42000c00
    38e4:	42001800 	.word	0x42001800
    38e8:	42001c00 	.word	0x42001c00
    38ec:	42001400 	.word	0x42001400
    38f0:	00050003 	.word	0x00050003
    38f4:	00060003 	.word	0x00060003
    38f8:	00070003 	.word	0x00070003
    38fc:	00010003 	.word	0x00010003
    3900:	001e0003 	.word	0x001e0003
    3904:	001f0003 	.word	0x001f0003
    3908:	00090003 	.word	0x00090003
    390c:	000a0003 	.word	0x000a0003
    3910:	000b0003 	.word	0x000b0003
    3914:	00110003 	.word	0x00110003
    3918:	00120003 	.word	0x00120003
    391c:	00130003 	.word	0x00130003
    3920:	000d0003 	.word	0x000d0003
    3924:	000e0003 	.word	0x000e0003
    3928:	000f0003 	.word	0x000f0003
    392c:	00170003 	.word	0x00170003
    3930:	00180003 	.word	0x00180003
    3934:	00190003 	.word	0x00190003
    3938:	00040003 	.word	0x00040003
    393c:	00080003 	.word	0x00080003
    3940:	00100003 	.word	0x00100003
    3944:	000c0003 	.word	0x000c0003
    3948:	00160003 	.word	0x00160003

0000394c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    394c:	b530      	push	{r4, r5, lr}
    394e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3950:	4b0c      	ldr	r3, [pc, #48]	; (3984 <_sercom_get_sercom_inst_index+0x38>)
    3952:	466a      	mov	r2, sp
    3954:	cb32      	ldmia	r3!, {r1, r4, r5}
    3956:	c232      	stmia	r2!, {r1, r4, r5}
    3958:	cb32      	ldmia	r3!, {r1, r4, r5}
    395a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    395c:	9b00      	ldr	r3, [sp, #0]
    395e:	4283      	cmp	r3, r0
    3960:	d006      	beq.n	3970 <_sercom_get_sercom_inst_index+0x24>
    3962:	2301      	movs	r3, #1
    3964:	009a      	lsls	r2, r3, #2
    3966:	4669      	mov	r1, sp
    3968:	5852      	ldr	r2, [r2, r1]
    396a:	4282      	cmp	r2, r0
    396c:	d103      	bne.n	3976 <_sercom_get_sercom_inst_index+0x2a>
    396e:	e000      	b.n	3972 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3970:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    3972:	b2d8      	uxtb	r0, r3
    3974:	e003      	b.n	397e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3976:	3301      	adds	r3, #1
    3978:	2b06      	cmp	r3, #6
    397a:	d1f3      	bne.n	3964 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    397c:	2000      	movs	r0, #0
}
    397e:	b007      	add	sp, #28
    3980:	bd30      	pop	{r4, r5, pc}
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	000080a8 	.word	0x000080a8

00003988 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3988:	4770      	bx	lr
    398a:	46c0      	nop			; (mov r8, r8)

0000398c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    398c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    398e:	4b0a      	ldr	r3, [pc, #40]	; (39b8 <_sercom_set_handler+0x2c>)
    3990:	781b      	ldrb	r3, [r3, #0]
    3992:	2b00      	cmp	r3, #0
    3994:	d10c      	bne.n	39b0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3996:	4f09      	ldr	r7, [pc, #36]	; (39bc <_sercom_set_handler+0x30>)
    3998:	4e09      	ldr	r6, [pc, #36]	; (39c0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    399a:	4d0a      	ldr	r5, [pc, #40]	; (39c4 <_sercom_set_handler+0x38>)
    399c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    399e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    39a0:	195a      	adds	r2, r3, r5
    39a2:	6014      	str	r4, [r2, #0]
    39a4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    39a6:	2b18      	cmp	r3, #24
    39a8:	d1f9      	bne.n	399e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    39aa:	2201      	movs	r2, #1
    39ac:	4b02      	ldr	r3, [pc, #8]	; (39b8 <_sercom_set_handler+0x2c>)
    39ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    39b0:	0080      	lsls	r0, r0, #2
    39b2:	4b02      	ldr	r3, [pc, #8]	; (39bc <_sercom_set_handler+0x30>)
    39b4:	50c1      	str	r1, [r0, r3]
}
    39b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39b8:	200000da 	.word	0x200000da
    39bc:	200000dc 	.word	0x200000dc
    39c0:	00003989 	.word	0x00003989
    39c4:	2000033c 	.word	0x2000033c

000039c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    39c8:	b510      	push	{r4, lr}
    39ca:	b082      	sub	sp, #8
    39cc:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    39ce:	2206      	movs	r2, #6
    39d0:	4905      	ldr	r1, [pc, #20]	; (39e8 <_sercom_get_interrupt_vector+0x20>)
    39d2:	4668      	mov	r0, sp
    39d4:	4b05      	ldr	r3, [pc, #20]	; (39ec <_sercom_get_interrupt_vector+0x24>)
    39d6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39d8:	0020      	movs	r0, r4
    39da:	4b05      	ldr	r3, [pc, #20]	; (39f0 <_sercom_get_interrupt_vector+0x28>)
    39dc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    39de:	466b      	mov	r3, sp
    39e0:	5618      	ldrsb	r0, [r3, r0]
}
    39e2:	b002      	add	sp, #8
    39e4:	bd10      	pop	{r4, pc}
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	000080c0 	.word	0x000080c0
    39ec:	00005cc9 	.word	0x00005cc9
    39f0:	0000394d 	.word	0x0000394d

000039f4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    39f4:	b510      	push	{r4, lr}
    39f6:	4b02      	ldr	r3, [pc, #8]	; (3a00 <SERCOM0_Handler+0xc>)
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	2000      	movs	r0, #0
    39fc:	4798      	blx	r3
    39fe:	bd10      	pop	{r4, pc}
    3a00:	200000dc 	.word	0x200000dc

00003a04 <SERCOM1_Handler>:
    3a04:	b510      	push	{r4, lr}
    3a06:	4b02      	ldr	r3, [pc, #8]	; (3a10 <SERCOM1_Handler+0xc>)
    3a08:	685b      	ldr	r3, [r3, #4]
    3a0a:	2001      	movs	r0, #1
    3a0c:	4798      	blx	r3
    3a0e:	bd10      	pop	{r4, pc}
    3a10:	200000dc 	.word	0x200000dc

00003a14 <SERCOM2_Handler>:
    3a14:	b510      	push	{r4, lr}
    3a16:	4b02      	ldr	r3, [pc, #8]	; (3a20 <SERCOM2_Handler+0xc>)
    3a18:	689b      	ldr	r3, [r3, #8]
    3a1a:	2002      	movs	r0, #2
    3a1c:	4798      	blx	r3
    3a1e:	bd10      	pop	{r4, pc}
    3a20:	200000dc 	.word	0x200000dc

00003a24 <SERCOM3_Handler>:
    3a24:	b510      	push	{r4, lr}
    3a26:	4b02      	ldr	r3, [pc, #8]	; (3a30 <SERCOM3_Handler+0xc>)
    3a28:	68db      	ldr	r3, [r3, #12]
    3a2a:	2003      	movs	r0, #3
    3a2c:	4798      	blx	r3
    3a2e:	bd10      	pop	{r4, pc}
    3a30:	200000dc 	.word	0x200000dc

00003a34 <SERCOM4_Handler>:
    3a34:	b510      	push	{r4, lr}
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <SERCOM4_Handler+0xc>)
    3a38:	691b      	ldr	r3, [r3, #16]
    3a3a:	2004      	movs	r0, #4
    3a3c:	4798      	blx	r3
    3a3e:	bd10      	pop	{r4, pc}
    3a40:	200000dc 	.word	0x200000dc

00003a44 <SERCOM5_Handler>:
    3a44:	b510      	push	{r4, lr}
    3a46:	4b02      	ldr	r3, [pc, #8]	; (3a50 <SERCOM5_Handler+0xc>)
    3a48:	695b      	ldr	r3, [r3, #20]
    3a4a:	2005      	movs	r0, #5
    3a4c:	4798      	blx	r3
    3a4e:	bd10      	pop	{r4, pc}
    3a50:	200000dc 	.word	0x200000dc

00003a54 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a56:	b08b      	sub	sp, #44	; 0x2c
    3a58:	0005      	movs	r5, r0
    3a5a:	000c      	movs	r4, r1
    3a5c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3a5e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a60:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3a62:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a64:	079b      	lsls	r3, r3, #30
    3a66:	d500      	bpl.n	3a6a <spi_init+0x16>
    3a68:	e0be      	b.n	3be8 <spi_init+0x194>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a6a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3a6c:	3817      	subs	r0, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a6e:	07db      	lsls	r3, r3, #31
    3a70:	d500      	bpl.n	3a74 <spi_init+0x20>
    3a72:	e0b9      	b.n	3be8 <spi_init+0x194>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a74:	0008      	movs	r0, r1
    3a76:	4b5d      	ldr	r3, [pc, #372]	; (3bec <spi_init+0x198>)
    3a78:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3a7a:	495d      	ldr	r1, [pc, #372]	; (3bf0 <spi_init+0x19c>)
    3a7c:	6a0a      	ldr	r2, [r1, #32]
    3a7e:	1c87      	adds	r7, r0, #2
    3a80:	2301      	movs	r3, #1
    3a82:	40bb      	lsls	r3, r7
    3a84:	4313      	orrs	r3, r2
    3a86:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3a88:	a909      	add	r1, sp, #36	; 0x24
    3a8a:	2724      	movs	r7, #36	; 0x24
    3a8c:	5df3      	ldrb	r3, [r6, r7]
    3a8e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3a90:	3014      	adds	r0, #20
    3a92:	b2c3      	uxtb	r3, r0
    3a94:	9301      	str	r3, [sp, #4]
    3a96:	0018      	movs	r0, r3
    3a98:	4b56      	ldr	r3, [pc, #344]	; (3bf4 <spi_init+0x1a0>)
    3a9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3a9c:	9801      	ldr	r0, [sp, #4]
    3a9e:	4b56      	ldr	r3, [pc, #344]	; (3bf8 <spi_init+0x1a4>)
    3aa0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3aa2:	5df0      	ldrb	r0, [r6, r7]
    3aa4:	2100      	movs	r1, #0
    3aa6:	4b55      	ldr	r3, [pc, #340]	; (3bfc <spi_init+0x1a8>)
    3aa8:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3aaa:	7833      	ldrb	r3, [r6, #0]
    3aac:	2b01      	cmp	r3, #1
    3aae:	d103      	bne.n	3ab8 <spi_init+0x64>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3ab0:	6822      	ldr	r2, [r4, #0]
    3ab2:	330b      	adds	r3, #11
    3ab4:	4313      	orrs	r3, r2
    3ab6:	6023      	str	r3, [r4, #0]
    3ab8:	002b      	movs	r3, r5
    3aba:	330c      	adds	r3, #12
    3abc:	0029      	movs	r1, r5
    3abe:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    3ac0:	2200      	movs	r2, #0
    3ac2:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3ac4:	4299      	cmp	r1, r3
    3ac6:	d1fc      	bne.n	3ac2 <spi_init+0x6e>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3ac8:	2300      	movs	r3, #0
    3aca:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3acc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3ace:	2400      	movs	r4, #0
    3ad0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3ad2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3ad4:	3336      	adds	r3, #54	; 0x36
    3ad6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3ad8:	3301      	adds	r3, #1
    3ada:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3adc:	3301      	adds	r3, #1
    3ade:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3ae0:	3b35      	subs	r3, #53	; 0x35
    3ae2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3ae4:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3ae6:	6828      	ldr	r0, [r5, #0]
    3ae8:	4b40      	ldr	r3, [pc, #256]	; (3bec <spi_init+0x198>)
    3aea:	4798      	blx	r3
    3aec:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3aee:	4944      	ldr	r1, [pc, #272]	; (3c00 <spi_init+0x1ac>)
    3af0:	4b44      	ldr	r3, [pc, #272]	; (3c04 <spi_init+0x1b0>)
    3af2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3af4:	00b8      	lsls	r0, r7, #2
    3af6:	4b44      	ldr	r3, [pc, #272]	; (3c08 <spi_init+0x1b4>)
    3af8:	50c5      	str	r5, [r0, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3afa:	682f      	ldr	r7, [r5, #0]
    3afc:	ab04      	add	r3, sp, #16
    3afe:	2280      	movs	r2, #128	; 0x80
    3b00:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b02:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b04:	3a7f      	subs	r2, #127	; 0x7f
    3b06:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3b08:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    3b0a:	7833      	ldrb	r3, [r6, #0]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d102      	bne.n	3b16 <spi_init+0xc2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3b10:	2200      	movs	r2, #0
    3b12:	ab04      	add	r3, sp, #16
    3b14:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    3b16:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3b18:	9305      	str	r3, [sp, #20]
    3b1a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3b1c:	9306      	str	r3, [sp, #24]
    3b1e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3b20:	9307      	str	r3, [sp, #28]
    3b22:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3b24:	9308      	str	r3, [sp, #32]
    3b26:	2400      	movs	r4, #0
    3b28:	b2e1      	uxtb	r1, r4
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3b2a:	00a3      	lsls	r3, r4, #2
    3b2c:	aa05      	add	r2, sp, #20
    3b2e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3b30:	2800      	cmp	r0, #0
    3b32:	d102      	bne.n	3b3a <spi_init+0xe6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3b34:	0038      	movs	r0, r7
    3b36:	4b35      	ldr	r3, [pc, #212]	; (3c0c <spi_init+0x1b8>)
    3b38:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3b3a:	1c43      	adds	r3, r0, #1
    3b3c:	d006      	beq.n	3b4c <spi_init+0xf8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3b3e:	ab02      	add	r3, sp, #8
    3b40:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3b42:	0c00      	lsrs	r0, r0, #16
    3b44:	b2c0      	uxtb	r0, r0
    3b46:	a904      	add	r1, sp, #16
    3b48:	4b31      	ldr	r3, [pc, #196]	; (3c10 <spi_init+0x1bc>)
    3b4a:	4798      	blx	r3
    3b4c:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3b4e:	2c04      	cmp	r4, #4
    3b50:	d1ea      	bne.n	3b28 <spi_init+0xd4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    3b52:	7833      	ldrb	r3, [r6, #0]
    3b54:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3b56:	7c33      	ldrb	r3, [r6, #16]
    3b58:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3b5a:	7cb3      	ldrb	r3, [r6, #18]
    3b5c:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3b5e:	7d33      	ldrb	r3, [r6, #20]
    3b60:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3b62:	2200      	movs	r2, #0
    3b64:	ab02      	add	r3, sp, #8
    3b66:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3b68:	7833      	ldrb	r3, [r6, #0]
    3b6a:	2b01      	cmp	r3, #1
    3b6c:	d114      	bne.n	3b98 <spi_init+0x144>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b6e:	6828      	ldr	r0, [r5, #0]
    3b70:	4b1e      	ldr	r3, [pc, #120]	; (3bec <spi_init+0x198>)
    3b72:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3b74:	3014      	adds	r0, #20
    3b76:	b2c0      	uxtb	r0, r0
    3b78:	4b26      	ldr	r3, [pc, #152]	; (3c14 <spi_init+0x1c0>)
    3b7a:	4798      	blx	r3
    3b7c:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3b7e:	ab02      	add	r3, sp, #8
    3b80:	1d9a      	adds	r2, r3, #6
    3b82:	69b0      	ldr	r0, [r6, #24]
    3b84:	4b24      	ldr	r3, [pc, #144]	; (3c18 <spi_init+0x1c4>)
    3b86:	4798      	blx	r3
    3b88:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3b8a:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d12b      	bne.n	3be8 <spi_init+0x194>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3b90:	ab02      	add	r3, sp, #8
    3b92:	3306      	adds	r3, #6
    3b94:	781b      	ldrb	r3, [r3, #0]
    3b96:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3b98:	6873      	ldr	r3, [r6, #4]
    3b9a:	68b2      	ldr	r2, [r6, #8]
    3b9c:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3b9e:	68f2      	ldr	r2, [r6, #12]
    3ba0:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3ba2:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3ba4:	7c71      	ldrb	r1, [r6, #17]
    3ba6:	2900      	cmp	r1, #0
    3ba8:	d103      	bne.n	3bb2 <spi_init+0x15e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3baa:	491c      	ldr	r1, [pc, #112]	; (3c1c <spi_init+0x1c8>)
    3bac:	7889      	ldrb	r1, [r1, #2]
    3bae:	0789      	lsls	r1, r1, #30
    3bb0:	d501      	bpl.n	3bb6 <spi_init+0x162>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3bb2:	2180      	movs	r1, #128	; 0x80
    3bb4:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    3bb6:	7cb1      	ldrb	r1, [r6, #18]
    3bb8:	2900      	cmp	r1, #0
    3bba:	d002      	beq.n	3bc2 <spi_init+0x16e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3bbc:	2180      	movs	r1, #128	; 0x80
    3bbe:	0289      	lsls	r1, r1, #10
    3bc0:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3bc2:	7cf1      	ldrb	r1, [r6, #19]
    3bc4:	2900      	cmp	r1, #0
    3bc6:	d002      	beq.n	3bce <spi_init+0x17a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3bc8:	2180      	movs	r1, #128	; 0x80
    3bca:	0089      	lsls	r1, r1, #2
    3bcc:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3bce:	7d31      	ldrb	r1, [r6, #20]
    3bd0:	2900      	cmp	r1, #0
    3bd2:	d002      	beq.n	3bda <spi_init+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3bd4:	2180      	movs	r1, #128	; 0x80
    3bd6:	0189      	lsls	r1, r1, #6
    3bd8:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3bda:	6839      	ldr	r1, [r7, #0]
    3bdc:	430b      	orrs	r3, r1
    3bde:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3be0:	687b      	ldr	r3, [r7, #4]
    3be2:	4313      	orrs	r3, r2
    3be4:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    3be6:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3be8:	b00b      	add	sp, #44	; 0x2c
    3bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bec:	0000394d 	.word	0x0000394d
    3bf0:	40000400 	.word	0x40000400
    3bf4:	00004a85 	.word	0x00004a85
    3bf8:	000049f9 	.word	0x000049f9
    3bfc:	00003779 	.word	0x00003779
    3c00:	00003d11 	.word	0x00003d11
    3c04:	0000398d 	.word	0x0000398d
    3c08:	2000033c 	.word	0x2000033c
    3c0c:	000037c5 	.word	0x000037c5
    3c10:	00004b7d 	.word	0x00004b7d
    3c14:	00004aa1 	.word	0x00004aa1
    3c18:	00003589 	.word	0x00003589
    3c1c:	41002000 	.word	0x41002000

00003c20 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3c20:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3c22:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3c24:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3c26:	2c01      	cmp	r4, #1
    3c28:	d16e      	bne.n	3d08 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3c2a:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3c2c:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3c2e:	2c00      	cmp	r4, #0
    3c30:	d16a      	bne.n	3d08 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    3c32:	2a00      	cmp	r2, #0
    3c34:	d058      	beq.n	3ce8 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3c36:	784b      	ldrb	r3, [r1, #1]
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d044      	beq.n	3cc6 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c3c:	6803      	ldr	r3, [r0, #0]
    3c3e:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3c40:	07db      	lsls	r3, r3, #31
    3c42:	d410      	bmi.n	3c66 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3c44:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c46:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c48:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c4a:	2900      	cmp	r1, #0
    3c4c:	d104      	bne.n	3c58 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    3c4e:	095a      	lsrs	r2, r3, #5
    3c50:	01d2      	lsls	r2, r2, #7
    3c52:	492e      	ldr	r1, [pc, #184]	; (3d0c <spi_select_slave+0xec>)
    3c54:	468c      	mov	ip, r1
    3c56:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c58:	211f      	movs	r1, #31
    3c5a:	400b      	ands	r3, r1
    3c5c:	391e      	subs	r1, #30
    3c5e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c60:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    3c62:	2305      	movs	r3, #5
    3c64:	e050      	b.n	3d08 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3c66:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c68:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c6a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c6c:	2c00      	cmp	r4, #0
    3c6e:	d104      	bne.n	3c7a <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    3c70:	095a      	lsrs	r2, r3, #5
    3c72:	01d2      	lsls	r2, r2, #7
    3c74:	4c25      	ldr	r4, [pc, #148]	; (3d0c <spi_select_slave+0xec>)
    3c76:	46a4      	mov	ip, r4
    3c78:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c7a:	241f      	movs	r4, #31
    3c7c:	4023      	ands	r3, r4
    3c7e:	3c1e      	subs	r4, #30
    3c80:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c82:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c84:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c86:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c88:	07d2      	lsls	r2, r2, #31
    3c8a:	d501      	bpl.n	3c90 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c8c:	788a      	ldrb	r2, [r1, #2]
    3c8e:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3c90:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3c92:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3c94:	2a00      	cmp	r2, #0
    3c96:	d137      	bne.n	3d08 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c98:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3c9a:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c9c:	7e13      	ldrb	r3, [r2, #24]
    3c9e:	420b      	tst	r3, r1
    3ca0:	d0fc      	beq.n	3c9c <spi_select_slave+0x7c>
    3ca2:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3ca4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ca6:	0749      	lsls	r1, r1, #29
    3ca8:	d52e      	bpl.n	3d08 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3caa:	8b53      	ldrh	r3, [r2, #26]
    3cac:	075b      	lsls	r3, r3, #29
    3cae:	d501      	bpl.n	3cb4 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cb0:	2304      	movs	r3, #4
    3cb2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cb4:	7983      	ldrb	r3, [r0, #6]
    3cb6:	2b01      	cmp	r3, #1
    3cb8:	d102      	bne.n	3cc0 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cbc:	2300      	movs	r3, #0
    3cbe:	e023      	b.n	3d08 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cc0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cc2:	2300      	movs	r3, #0
    3cc4:	e020      	b.n	3d08 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3cc6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3cc8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3cca:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3ccc:	2900      	cmp	r1, #0
    3cce:	d104      	bne.n	3cda <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    3cd0:	095a      	lsrs	r2, r3, #5
    3cd2:	01d2      	lsls	r2, r2, #7
    3cd4:	490d      	ldr	r1, [pc, #52]	; (3d0c <spi_select_slave+0xec>)
    3cd6:	468c      	mov	ip, r1
    3cd8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cda:	211f      	movs	r1, #31
    3cdc:	400b      	ands	r3, r1
    3cde:	391e      	subs	r1, #30
    3ce0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3ce2:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3ce4:	2300      	movs	r3, #0
    3ce6:	e00f      	b.n	3d08 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3ce8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3cea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3cec:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3cee:	2900      	cmp	r1, #0
    3cf0:	d104      	bne.n	3cfc <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    3cf2:	095a      	lsrs	r2, r3, #5
    3cf4:	01d2      	lsls	r2, r2, #7
    3cf6:	4905      	ldr	r1, [pc, #20]	; (3d0c <spi_select_slave+0xec>)
    3cf8:	468c      	mov	ip, r1
    3cfa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cfc:	211f      	movs	r1, #31
    3cfe:	400b      	ands	r3, r1
    3d00:	391e      	subs	r1, #30
    3d02:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3d04:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    3d06:	2300      	movs	r3, #0
}
    3d08:	0018      	movs	r0, r3
    3d0a:	bd10      	pop	{r4, pc}
    3d0c:	41004400 	.word	0x41004400

00003d10 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3d12:	0080      	lsls	r0, r0, #2
    3d14:	4b67      	ldr	r3, [pc, #412]	; (3eb4 <_spi_interrupt_handler+0x1a4>)
    3d16:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d18:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3d1a:	2337      	movs	r3, #55	; 0x37

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    3d1c:	5ce3      	ldrb	r3, [r4, r3]
    3d1e:	2236      	movs	r2, #54	; 0x36
    3d20:	5ca7      	ldrb	r7, [r4, r2]
    3d22:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3d24:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3d26:	7db5      	ldrb	r5, [r6, #22]
    3d28:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3d2a:	07eb      	lsls	r3, r5, #31
    3d2c:	d53d      	bpl.n	3daa <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3d2e:	7963      	ldrb	r3, [r4, #5]
    3d30:	2b01      	cmp	r3, #1
    3d32:	d13a      	bne.n	3daa <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
    3d34:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3d36:	2b00      	cmp	r3, #0
    3d38:	d10f      	bne.n	3d5a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    3d3a:	4b5f      	ldr	r3, [pc, #380]	; (3eb8 <_spi_interrupt_handler+0x1a8>)
    3d3c:	881b      	ldrh	r3, [r3, #0]
    3d3e:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3d40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d42:	3b01      	subs	r3, #1
    3d44:	b29b      	uxth	r3, r3
    3d46:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    3d48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d4a:	b29b      	uxth	r3, r3
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d101      	bne.n	3d54 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d50:	3301      	adds	r3, #1
    3d52:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
    3d54:	7963      	ldrb	r3, [r4, #5]
    3d56:	2b01      	cmp	r3, #1
    3d58:	d127      	bne.n	3daa <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3d5a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d024      	beq.n	3daa <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d60:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3d64:	780b      	ldrb	r3, [r1, #0]
    3d66:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3d68:	1c4b      	adds	r3, r1, #1
    3d6a:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d6c:	79a3      	ldrb	r3, [r4, #6]
    3d6e:	2b01      	cmp	r3, #1
    3d70:	d001      	beq.n	3d76 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d72:	b293      	uxth	r3, r2
    3d74:	e004      	b.n	3d80 <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3d76:	784b      	ldrb	r3, [r1, #1]
    3d78:	021b      	lsls	r3, r3, #8
    3d7a:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    3d7c:	3102      	adds	r1, #2
    3d7e:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3d80:	05db      	lsls	r3, r3, #23
    3d82:	0ddb      	lsrs	r3, r3, #23
    3d84:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    3d86:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d88:	3b01      	subs	r3, #1
    3d8a:	b29b      	uxth	r3, r3
    3d8c:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3d8e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d90:	b29b      	uxth	r3, r3
    3d92:	2b00      	cmp	r3, #0
    3d94:	d109      	bne.n	3daa <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d96:	3301      	adds	r3, #1
    3d98:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3d9a:	7a63      	ldrb	r3, [r4, #9]
    3d9c:	2b01      	cmp	r3, #1
    3d9e:	d104      	bne.n	3daa <_spi_interrupt_handler+0x9a>
    3da0:	79e3      	ldrb	r3, [r4, #7]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d101      	bne.n	3daa <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3da6:	3302      	adds	r3, #2
    3da8:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3daa:	076b      	lsls	r3, r5, #29
    3dac:	d55f      	bpl.n	3e6e <_spi_interrupt_handler+0x15e>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3dae:	8b73      	ldrh	r3, [r6, #26]
    3db0:	075b      	lsls	r3, r3, #29
    3db2:	d512      	bpl.n	3dda <_spi_interrupt_handler+0xca>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3db4:	7a63      	ldrb	r3, [r4, #9]
    3db6:	2b01      	cmp	r3, #1
    3db8:	d00b      	beq.n	3dd2 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3dba:	221e      	movs	r2, #30
    3dbc:	2338      	movs	r3, #56	; 0x38
    3dbe:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3dc0:	3b35      	subs	r3, #53	; 0x35
    3dc2:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3dc4:	3302      	adds	r3, #2
    3dc6:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3dc8:	073b      	lsls	r3, r7, #28
    3dca:	d502      	bpl.n	3dd2 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3dcc:	0020      	movs	r0, r4
    3dce:	69a3      	ldr	r3, [r4, #24]
    3dd0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3dd2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3dd4:	2304      	movs	r3, #4
    3dd6:	8373      	strh	r3, [r6, #26]
    3dd8:	e049      	b.n	3e6e <_spi_interrupt_handler+0x15e>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    3dda:	7a63      	ldrb	r3, [r4, #9]
    3ddc:	2b01      	cmp	r3, #1
    3dde:	d116      	bne.n	3e0e <_spi_interrupt_handler+0xfe>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3de0:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    3de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3de4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3de6:	3b01      	subs	r3, #1
    3de8:	b29b      	uxth	r3, r3
    3dea:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    3dec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3dee:	b29b      	uxth	r3, r3
    3df0:	2b00      	cmp	r3, #0
    3df2:	d13c      	bne.n	3e6e <_spi_interrupt_handler+0x15e>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3df4:	3304      	adds	r3, #4
    3df6:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3df8:	2200      	movs	r2, #0
    3dfa:	3334      	adds	r3, #52	; 0x34
    3dfc:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3dfe:	3b35      	subs	r3, #53	; 0x35
    3e00:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    3e02:	07fb      	lsls	r3, r7, #31
    3e04:	d533      	bpl.n	3e6e <_spi_interrupt_handler+0x15e>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3e06:	0020      	movs	r0, r4
    3e08:	68e3      	ldr	r3, [r4, #12]
    3e0a:	4798      	blx	r3
    3e0c:	e02f      	b.n	3e6e <_spi_interrupt_handler+0x15e>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3e0e:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e12:	05db      	lsls	r3, r3, #23
    3e14:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    3e16:	b2da      	uxtb	r2, r3
    3e18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3e1a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    3e1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3e1e:	1c51      	adds	r1, r2, #1
    3e20:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e22:	79a1      	ldrb	r1, [r4, #6]
    3e24:	2901      	cmp	r1, #1
    3e26:	d104      	bne.n	3e32 <_spi_interrupt_handler+0x122>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3e28:	0a1b      	lsrs	r3, r3, #8
    3e2a:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    3e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e2e:	3301      	adds	r3, #1
    3e30:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    3e32:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3e34:	3b01      	subs	r3, #1
    3e36:	b29b      	uxth	r3, r3
    3e38:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    3e3a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3e3c:	b29b      	uxth	r3, r3
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d115      	bne.n	3e6e <_spi_interrupt_handler+0x15e>
					module->status = STATUS_OK;
    3e42:	2200      	movs	r2, #0
    3e44:	3338      	adds	r3, #56	; 0x38
    3e46:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3e48:	3b34      	subs	r3, #52	; 0x34
    3e4a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3e4c:	7a63      	ldrb	r3, [r4, #9]
    3e4e:	2b02      	cmp	r3, #2
    3e50:	d105      	bne.n	3e5e <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3e52:	077b      	lsls	r3, r7, #29
    3e54:	d50b      	bpl.n	3e6e <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3e56:	0020      	movs	r0, r4
    3e58:	6963      	ldr	r3, [r4, #20]
    3e5a:	4798      	blx	r3
    3e5c:	e007      	b.n	3e6e <_spi_interrupt_handler+0x15e>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    3e5e:	7a63      	ldrb	r3, [r4, #9]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d104      	bne.n	3e6e <_spi_interrupt_handler+0x15e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3e64:	07bb      	lsls	r3, r7, #30
    3e66:	d502      	bpl.n	3e6e <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3e68:	0020      	movs	r0, r4
    3e6a:	6923      	ldr	r3, [r4, #16]
    3e6c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3e6e:	07ab      	lsls	r3, r5, #30
    3e70:	d514      	bpl.n	3e9c <_spi_interrupt_handler+0x18c>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e72:	7963      	ldrb	r3, [r4, #5]
    3e74:	2b01      	cmp	r3, #1
    3e76:	d111      	bne.n	3e9c <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e78:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e7a:	2b01      	cmp	r3, #1
    3e7c:	d10e      	bne.n	3e9c <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e7e:	79e3      	ldrb	r3, [r4, #7]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d10b      	bne.n	3e9c <_spi_interrupt_handler+0x18c>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e84:	3302      	adds	r3, #2
    3e86:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3e88:	3301      	adds	r3, #1
    3e8a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3e8c:	2200      	movs	r2, #0
    3e8e:	3335      	adds	r3, #53	; 0x35
    3e90:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3e92:	07fb      	lsls	r3, r7, #31
    3e94:	d502      	bpl.n	3e9c <_spi_interrupt_handler+0x18c>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3e96:	0020      	movs	r0, r4
    3e98:	68e3      	ldr	r3, [r4, #12]
    3e9a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3e9c:	09ed      	lsrs	r5, r5, #7
    3e9e:	d007      	beq.n	3eb0 <_spi_interrupt_handler+0x1a0>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ea0:	2380      	movs	r3, #128	; 0x80
    3ea2:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ea4:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3ea6:	067b      	lsls	r3, r7, #25
    3ea8:	d502      	bpl.n	3eb0 <_spi_interrupt_handler+0x1a0>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3eac:	0020      	movs	r0, r4
    3eae:	4798      	blx	r3
		}
	}
#  endif
}
    3eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	2000033c 	.word	0x2000033c
    3eb8:	20000354 	.word	0x20000354

00003ebc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ebe:	465f      	mov	r7, fp
    3ec0:	4656      	mov	r6, sl
    3ec2:	464d      	mov	r5, r9
    3ec4:	4644      	mov	r4, r8
    3ec6:	b4f0      	push	{r4, r5, r6, r7}
    3ec8:	b091      	sub	sp, #68	; 0x44
    3eca:	0005      	movs	r5, r0
    3ecc:	000c      	movs	r4, r1
    3ece:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3ed0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3ed2:	0008      	movs	r0, r1
    3ed4:	4bb9      	ldr	r3, [pc, #740]	; (41bc <usart_init+0x300>)
    3ed6:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ed8:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3eda:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3edc:	07d2      	lsls	r2, r2, #31
    3ede:	d500      	bpl.n	3ee2 <usart_init+0x26>
    3ee0:	e164      	b.n	41ac <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ee2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3ee4:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ee6:	0792      	lsls	r2, r2, #30
    3ee8:	d500      	bpl.n	3eec <usart_init+0x30>
    3eea:	e15f      	b.n	41ac <usart_init+0x2f0>
    3eec:	49b4      	ldr	r1, [pc, #720]	; (41c0 <usart_init+0x304>)
    3eee:	6a0a      	ldr	r2, [r1, #32]
    3ef0:	1c87      	adds	r7, r0, #2
    3ef2:	3b1b      	subs	r3, #27
    3ef4:	40bb      	lsls	r3, r7
    3ef6:	4313      	orrs	r3, r2
    3ef8:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3efa:	a90f      	add	r1, sp, #60	; 0x3c
    3efc:	272d      	movs	r7, #45	; 0x2d
    3efe:	5df3      	ldrb	r3, [r6, r7]
    3f00:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f02:	3014      	adds	r0, #20
    3f04:	b2c3      	uxtb	r3, r0
    3f06:	9302      	str	r3, [sp, #8]
    3f08:	0018      	movs	r0, r3
    3f0a:	4bae      	ldr	r3, [pc, #696]	; (41c4 <usart_init+0x308>)
    3f0c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f0e:	9802      	ldr	r0, [sp, #8]
    3f10:	4bad      	ldr	r3, [pc, #692]	; (41c8 <usart_init+0x30c>)
    3f12:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f14:	5df0      	ldrb	r0, [r6, r7]
    3f16:	2100      	movs	r1, #0
    3f18:	4bac      	ldr	r3, [pc, #688]	; (41cc <usart_init+0x310>)
    3f1a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3f1c:	7af3      	ldrb	r3, [r6, #11]
    3f1e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3f20:	2324      	movs	r3, #36	; 0x24
    3f22:	5cf3      	ldrb	r3, [r6, r3]
    3f24:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3f26:	2325      	movs	r3, #37	; 0x25
    3f28:	5cf3      	ldrb	r3, [r6, r3]
    3f2a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3f2c:	7ef3      	ldrb	r3, [r6, #27]
    3f2e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3f30:	7f33      	ldrb	r3, [r6, #28]
    3f32:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f34:	682b      	ldr	r3, [r5, #0]
    3f36:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f38:	0018      	movs	r0, r3
    3f3a:	4ba0      	ldr	r3, [pc, #640]	; (41bc <usart_init+0x300>)
    3f3c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f3e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3f40:	2200      	movs	r2, #0
    3f42:	230e      	movs	r3, #14
    3f44:	a906      	add	r1, sp, #24
    3f46:	468c      	mov	ip, r1
    3f48:	4463      	add	r3, ip
    3f4a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3f4c:	8a32      	ldrh	r2, [r6, #16]
    3f4e:	9202      	str	r2, [sp, #8]
    3f50:	2380      	movs	r3, #128	; 0x80
    3f52:	01db      	lsls	r3, r3, #7
    3f54:	429a      	cmp	r2, r3
    3f56:	d01a      	beq.n	3f8e <usart_init+0xd2>
    3f58:	d804      	bhi.n	3f64 <usart_init+0xa8>
    3f5a:	2380      	movs	r3, #128	; 0x80
    3f5c:	019b      	lsls	r3, r3, #6
    3f5e:	429a      	cmp	r2, r3
    3f60:	d00b      	beq.n	3f7a <usart_init+0xbe>
    3f62:	e104      	b.n	416e <usart_init+0x2b2>
    3f64:	23c0      	movs	r3, #192	; 0xc0
    3f66:	01db      	lsls	r3, r3, #7
    3f68:	9a02      	ldr	r2, [sp, #8]
    3f6a:	429a      	cmp	r2, r3
    3f6c:	d00a      	beq.n	3f84 <usart_init+0xc8>
    3f6e:	2380      	movs	r3, #128	; 0x80
    3f70:	021b      	lsls	r3, r3, #8
    3f72:	429a      	cmp	r2, r3
    3f74:	d100      	bne.n	3f78 <usart_init+0xbc>
    3f76:	e0ff      	b.n	4178 <usart_init+0x2bc>
    3f78:	e0f9      	b.n	416e <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f7a:	2310      	movs	r3, #16
    3f7c:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f7e:	3b0f      	subs	r3, #15
    3f80:	9307      	str	r3, [sp, #28]
    3f82:	e0fd      	b.n	4180 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3f84:	2308      	movs	r3, #8
    3f86:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f88:	3b07      	subs	r3, #7
    3f8a:	9307      	str	r3, [sp, #28]
    3f8c:	e0f8      	b.n	4180 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3f8e:	6833      	ldr	r3, [r6, #0]
    3f90:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    3f92:	68f3      	ldr	r3, [r6, #12]
    3f94:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3f96:	6973      	ldr	r3, [r6, #20]
    3f98:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3f9a:	7e33      	ldrb	r3, [r6, #24]
    3f9c:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3f9e:	2326      	movs	r3, #38	; 0x26
    3fa0:	5cf3      	ldrb	r3, [r6, r3]
    3fa2:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3fa4:	6873      	ldr	r3, [r6, #4]
    3fa6:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d015      	beq.n	3fd8 <usart_init+0x11c>
    3fac:	2380      	movs	r3, #128	; 0x80
    3fae:	055b      	lsls	r3, r3, #21
    3fb0:	459a      	cmp	sl, r3
    3fb2:	d136      	bne.n	4022 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3fb4:	2327      	movs	r3, #39	; 0x27
    3fb6:	5cf3      	ldrb	r3, [r6, r3]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d136      	bne.n	402a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3fbc:	6a33      	ldr	r3, [r6, #32]
    3fbe:	001f      	movs	r7, r3
    3fc0:	b2c0      	uxtb	r0, r0
    3fc2:	4b83      	ldr	r3, [pc, #524]	; (41d0 <usart_init+0x314>)
    3fc4:	4798      	blx	r3
    3fc6:	0001      	movs	r1, r0
    3fc8:	220e      	movs	r2, #14
    3fca:	ab06      	add	r3, sp, #24
    3fcc:	469c      	mov	ip, r3
    3fce:	4462      	add	r2, ip
    3fd0:	0038      	movs	r0, r7
    3fd2:	4b80      	ldr	r3, [pc, #512]	; (41d4 <usart_init+0x318>)
    3fd4:	4798      	blx	r3
    3fd6:	e025      	b.n	4024 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3fd8:	2308      	movs	r3, #8
    3fda:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3fdc:	2300      	movs	r3, #0
    3fde:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3fe0:	2327      	movs	r3, #39	; 0x27
    3fe2:	5cf3      	ldrb	r3, [r6, r3]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d00b      	beq.n	4000 <usart_init+0x144>
				status_code =
    3fe8:	9b06      	ldr	r3, [sp, #24]
    3fea:	9300      	str	r3, [sp, #0]
    3fec:	9b07      	ldr	r3, [sp, #28]
    3fee:	220e      	movs	r2, #14
    3ff0:	a906      	add	r1, sp, #24
    3ff2:	468c      	mov	ip, r1
    3ff4:	4462      	add	r2, ip
    3ff6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3ff8:	6a30      	ldr	r0, [r6, #32]
    3ffa:	4f77      	ldr	r7, [pc, #476]	; (41d8 <usart_init+0x31c>)
    3ffc:	47b8      	blx	r7
    3ffe:	e011      	b.n	4024 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4000:	6a33      	ldr	r3, [r6, #32]
    4002:	001f      	movs	r7, r3
    4004:	b2c0      	uxtb	r0, r0
    4006:	4b72      	ldr	r3, [pc, #456]	; (41d0 <usart_init+0x314>)
    4008:	4798      	blx	r3
    400a:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    400c:	9b06      	ldr	r3, [sp, #24]
    400e:	9300      	str	r3, [sp, #0]
    4010:	9b07      	ldr	r3, [sp, #28]
    4012:	220e      	movs	r2, #14
    4014:	a806      	add	r0, sp, #24
    4016:	4684      	mov	ip, r0
    4018:	4462      	add	r2, ip
    401a:	0038      	movs	r0, r7
    401c:	4f6e      	ldr	r7, [pc, #440]	; (41d8 <usart_init+0x31c>)
    401e:	47b8      	blx	r7
    4020:	e000      	b.n	4024 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    4022:	2000      	movs	r0, #0
    4024:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4026:	d000      	beq.n	402a <usart_init+0x16e>
    4028:	e0c0      	b.n	41ac <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    402a:	7e73      	ldrb	r3, [r6, #25]
    402c:	2b00      	cmp	r3, #0
    402e:	d002      	beq.n	4036 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4030:	7eb3      	ldrb	r3, [r6, #26]
    4032:	464a      	mov	r2, r9
    4034:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4036:	682a      	ldr	r2, [r5, #0]
    4038:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    403a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    403c:	2b00      	cmp	r3, #0
    403e:	d1fc      	bne.n	403a <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4040:	330e      	adds	r3, #14
    4042:	aa06      	add	r2, sp, #24
    4044:	4694      	mov	ip, r2
    4046:	4463      	add	r3, ip
    4048:	881b      	ldrh	r3, [r3, #0]
    404a:	464a      	mov	r2, r9
    404c:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    404e:	9b04      	ldr	r3, [sp, #16]
    4050:	465a      	mov	r2, fp
    4052:	4313      	orrs	r3, r2
    4054:	9a03      	ldr	r2, [sp, #12]
    4056:	4313      	orrs	r3, r2
    4058:	4652      	mov	r2, sl
    405a:	4313      	orrs	r3, r2
    405c:	433b      	orrs	r3, r7
    405e:	4642      	mov	r2, r8
    4060:	0212      	lsls	r2, r2, #8
    4062:	4313      	orrs	r3, r2
    4064:	9a05      	ldr	r2, [sp, #20]
    4066:	0757      	lsls	r7, r2, #29
    4068:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    406a:	2327      	movs	r3, #39	; 0x27
    406c:	5cf3      	ldrb	r3, [r6, r3]
    406e:	2b00      	cmp	r3, #0
    4070:	d101      	bne.n	4076 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4072:	3304      	adds	r3, #4
    4074:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    4076:	7e71      	ldrb	r1, [r6, #25]
    4078:	0289      	lsls	r1, r1, #10
    407a:	7f33      	ldrb	r3, [r6, #28]
    407c:	025b      	lsls	r3, r3, #9
    407e:	4319      	orrs	r1, r3
    4080:	7f73      	ldrb	r3, [r6, #29]
    4082:	021b      	lsls	r3, r3, #8
    4084:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4086:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    4088:	5cf3      	ldrb	r3, [r6, r3]
    408a:	045b      	lsls	r3, r3, #17
    408c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    408e:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    4090:	5cf2      	ldrb	r2, [r6, r3]
    4092:	0412      	lsls	r2, r2, #16
    4094:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    4096:	7af3      	ldrb	r3, [r6, #11]
    4098:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    409a:	8933      	ldrh	r3, [r6, #8]
    409c:	2bff      	cmp	r3, #255	; 0xff
    409e:	d004      	beq.n	40aa <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    40a0:	2280      	movs	r2, #128	; 0x80
    40a2:	0452      	lsls	r2, r2, #17
    40a4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    40a6:	4319      	orrs	r1, r3
    40a8:	e005      	b.n	40b6 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    40aa:	7ef3      	ldrb	r3, [r6, #27]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d002      	beq.n	40b6 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    40b0:	2380      	movs	r3, #128	; 0x80
    40b2:	04db      	lsls	r3, r3, #19
    40b4:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    40b6:	232c      	movs	r3, #44	; 0x2c
    40b8:	5cf3      	ldrb	r3, [r6, r3]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d103      	bne.n	40c6 <usart_init+0x20a>
    40be:	4b47      	ldr	r3, [pc, #284]	; (41dc <usart_init+0x320>)
    40c0:	789b      	ldrb	r3, [r3, #2]
    40c2:	079b      	lsls	r3, r3, #30
    40c4:	d501      	bpl.n	40ca <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    40c6:	2380      	movs	r3, #128	; 0x80
    40c8:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    40ca:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40cc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    40ce:	2b00      	cmp	r3, #0
    40d0:	d1fc      	bne.n	40cc <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    40d2:	464b      	mov	r3, r9
    40d4:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    40d6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40d8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    40da:	2b00      	cmp	r3, #0
    40dc:	d1fc      	bne.n	40d8 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    40de:	464b      	mov	r3, r9
    40e0:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    40e2:	ab0e      	add	r3, sp, #56	; 0x38
    40e4:	2280      	movs	r2, #128	; 0x80
    40e6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40e8:	2200      	movs	r2, #0
    40ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    40ec:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    40ee:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    40f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    40f2:	930a      	str	r3, [sp, #40]	; 0x28
    40f4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    40f6:	930b      	str	r3, [sp, #44]	; 0x2c
    40f8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    40fa:	930c      	str	r3, [sp, #48]	; 0x30
    40fc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    40fe:	9302      	str	r3, [sp, #8]
    4100:	930d      	str	r3, [sp, #52]	; 0x34
    4102:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4104:	ae0e      	add	r6, sp, #56	; 0x38
    4106:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4108:	00bb      	lsls	r3, r7, #2
    410a:	aa0a      	add	r2, sp, #40	; 0x28
    410c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    410e:	2800      	cmp	r0, #0
    4110:	d102      	bne.n	4118 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4112:	0020      	movs	r0, r4
    4114:	4b32      	ldr	r3, [pc, #200]	; (41e0 <usart_init+0x324>)
    4116:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4118:	1c43      	adds	r3, r0, #1
    411a:	d005      	beq.n	4128 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    411c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    411e:	0c00      	lsrs	r0, r0, #16
    4120:	b2c0      	uxtb	r0, r0
    4122:	0031      	movs	r1, r6
    4124:	4b2f      	ldr	r3, [pc, #188]	; (41e4 <usart_init+0x328>)
    4126:	4798      	blx	r3
    4128:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    412a:	2f04      	cmp	r7, #4
    412c:	d1eb      	bne.n	4106 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    412e:	2300      	movs	r3, #0
    4130:	60eb      	str	r3, [r5, #12]
    4132:	612b      	str	r3, [r5, #16]
    4134:	616b      	str	r3, [r5, #20]
    4136:	61ab      	str	r3, [r5, #24]
    4138:	61eb      	str	r3, [r5, #28]
    413a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    413c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    413e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4140:	2200      	movs	r2, #0
    4142:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4144:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4146:	3330      	adds	r3, #48	; 0x30
    4148:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    414a:	3301      	adds	r3, #1
    414c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    414e:	3301      	adds	r3, #1
    4150:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4152:	3301      	adds	r3, #1
    4154:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4156:	6828      	ldr	r0, [r5, #0]
    4158:	4b18      	ldr	r3, [pc, #96]	; (41bc <usart_init+0x300>)
    415a:	4798      	blx	r3
    415c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    415e:	4922      	ldr	r1, [pc, #136]	; (41e8 <usart_init+0x32c>)
    4160:	4b22      	ldr	r3, [pc, #136]	; (41ec <usart_init+0x330>)
    4162:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4164:	00a4      	lsls	r4, r4, #2
    4166:	4b22      	ldr	r3, [pc, #136]	; (41f0 <usart_init+0x334>)
    4168:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    416a:	2300      	movs	r3, #0
    416c:	e01e      	b.n	41ac <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    416e:	2310      	movs	r3, #16
    4170:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4172:	2300      	movs	r3, #0
    4174:	9307      	str	r3, [sp, #28]
    4176:	e003      	b.n	4180 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4178:	2303      	movs	r3, #3
    417a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    417c:	2300      	movs	r3, #0
    417e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4180:	6833      	ldr	r3, [r6, #0]
    4182:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    4184:	68f3      	ldr	r3, [r6, #12]
    4186:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4188:	6973      	ldr	r3, [r6, #20]
    418a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    418c:	7e33      	ldrb	r3, [r6, #24]
    418e:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4190:	2326      	movs	r3, #38	; 0x26
    4192:	5cf3      	ldrb	r3, [r6, r3]
    4194:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    4196:	6873      	ldr	r3, [r6, #4]
    4198:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    419a:	2b00      	cmp	r3, #0
    419c:	d100      	bne.n	41a0 <usart_init+0x2e4>
    419e:	e71f      	b.n	3fe0 <usart_init+0x124>
    41a0:	2380      	movs	r3, #128	; 0x80
    41a2:	055b      	lsls	r3, r3, #21
    41a4:	459a      	cmp	sl, r3
    41a6:	d100      	bne.n	41aa <usart_init+0x2ee>
    41a8:	e704      	b.n	3fb4 <usart_init+0xf8>
    41aa:	e73e      	b.n	402a <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    41ac:	0018      	movs	r0, r3
    41ae:	b011      	add	sp, #68	; 0x44
    41b0:	bc3c      	pop	{r2, r3, r4, r5}
    41b2:	4690      	mov	r8, r2
    41b4:	4699      	mov	r9, r3
    41b6:	46a2      	mov	sl, r4
    41b8:	46ab      	mov	fp, r5
    41ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41bc:	0000394d 	.word	0x0000394d
    41c0:	40000400 	.word	0x40000400
    41c4:	00004a85 	.word	0x00004a85
    41c8:	000049f9 	.word	0x000049f9
    41cc:	00003779 	.word	0x00003779
    41d0:	00004aa1 	.word	0x00004aa1
    41d4:	00003589 	.word	0x00003589
    41d8:	000035b1 	.word	0x000035b1
    41dc:	41002000 	.word	0x41002000
    41e0:	000037c5 	.word	0x000037c5
    41e4:	00004b7d 	.word	0x00004b7d
    41e8:	00004291 	.word	0x00004291
    41ec:	0000398d 	.word	0x0000398d
    41f0:	2000033c 	.word	0x2000033c

000041f4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    41f4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    41f6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    41f8:	2a00      	cmp	r2, #0
    41fa:	d00e      	beq.n	421a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    41fc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    41fe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4200:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4202:	2a00      	cmp	r2, #0
    4204:	d109      	bne.n	421a <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4206:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4208:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    420a:	2a00      	cmp	r2, #0
    420c:	d1fc      	bne.n	4208 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    420e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4210:	2102      	movs	r1, #2
    4212:	7e1a      	ldrb	r2, [r3, #24]
    4214:	420a      	tst	r2, r1
    4216:	d0fc      	beq.n	4212 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    4218:	2300      	movs	r3, #0
}
    421a:	0018      	movs	r0, r3
    421c:	4770      	bx	lr
    421e:	46c0      	nop			; (mov r8, r8)

00004220 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4220:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4222:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4224:	2a00      	cmp	r2, #0
    4226:	d030      	beq.n	428a <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    4228:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    422a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    422c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    422e:	2a00      	cmp	r2, #0
    4230:	d12b      	bne.n	428a <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4232:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4234:	7e10      	ldrb	r0, [r2, #24]
    4236:	0740      	lsls	r0, r0, #29
    4238:	d527      	bpl.n	428a <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    423a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    423c:	2b00      	cmp	r3, #0
    423e:	d1fc      	bne.n	423a <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4240:	8b53      	ldrh	r3, [r2, #26]
    4242:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    4244:	0698      	lsls	r0, r3, #26
    4246:	d01d      	beq.n	4284 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4248:	0798      	lsls	r0, r3, #30
    424a:	d503      	bpl.n	4254 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    424c:	2302      	movs	r3, #2
    424e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    4250:	3318      	adds	r3, #24
    4252:	e01a      	b.n	428a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4254:	0758      	lsls	r0, r3, #29
    4256:	d503      	bpl.n	4260 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4258:	2304      	movs	r3, #4
    425a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    425c:	331a      	adds	r3, #26
    425e:	e014      	b.n	428a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4260:	07d8      	lsls	r0, r3, #31
    4262:	d503      	bpl.n	426c <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4264:	2301      	movs	r3, #1
    4266:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    4268:	3312      	adds	r3, #18
    426a:	e00e      	b.n	428a <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    426c:	06d8      	lsls	r0, r3, #27
    426e:	d503      	bpl.n	4278 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4270:	2310      	movs	r3, #16
    4272:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    4274:	3332      	adds	r3, #50	; 0x32
    4276:	e008      	b.n	428a <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4278:	069b      	lsls	r3, r3, #26
    427a:	d503      	bpl.n	4284 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    427c:	2320      	movs	r3, #32
    427e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4280:	3321      	adds	r3, #33	; 0x21
    4282:	e002      	b.n	428a <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4284:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4286:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    4288:	2300      	movs	r3, #0
}
    428a:	0018      	movs	r0, r3
    428c:	4770      	bx	lr
    428e:	46c0      	nop			; (mov r8, r8)

00004290 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4292:	0080      	lsls	r0, r0, #2
    4294:	4b60      	ldr	r3, [pc, #384]	; (4418 <_usart_interrupt_handler+0x188>)
    4296:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4298:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    429a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    429c:	2b00      	cmp	r3, #0
    429e:	d1fc      	bne.n	429a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    42a0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    42a2:	7da6      	ldrb	r6, [r4, #22]
    42a4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    42a6:	2330      	movs	r3, #48	; 0x30
    42a8:	5ceb      	ldrb	r3, [r5, r3]
    42aa:	2231      	movs	r2, #49	; 0x31
    42ac:	5caf      	ldrb	r7, [r5, r2]
    42ae:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    42b0:	07f3      	lsls	r3, r6, #31
    42b2:	d522      	bpl.n	42fa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    42b4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    42b6:	b29b      	uxth	r3, r3
    42b8:	2b00      	cmp	r3, #0
    42ba:	d01c      	beq.n	42f6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    42bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    42be:	7813      	ldrb	r3, [r2, #0]
    42c0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    42c2:	1c51      	adds	r1, r2, #1
    42c4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    42c6:	7969      	ldrb	r1, [r5, #5]
    42c8:	2901      	cmp	r1, #1
    42ca:	d001      	beq.n	42d0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    42cc:	b29b      	uxth	r3, r3
    42ce:	e004      	b.n	42da <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    42d0:	7851      	ldrb	r1, [r2, #1]
    42d2:	0209      	lsls	r1, r1, #8
    42d4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    42d6:	3202      	adds	r2, #2
    42d8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    42da:	05db      	lsls	r3, r3, #23
    42dc:	0ddb      	lsrs	r3, r3, #23
    42de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    42e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    42e2:	3b01      	subs	r3, #1
    42e4:	b29b      	uxth	r3, r3
    42e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    42e8:	2b00      	cmp	r3, #0
    42ea:	d106      	bne.n	42fa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    42ec:	3301      	adds	r3, #1
    42ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    42f0:	3301      	adds	r3, #1
    42f2:	75a3      	strb	r3, [r4, #22]
    42f4:	e001      	b.n	42fa <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    42f6:	2301      	movs	r3, #1
    42f8:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    42fa:	07b3      	lsls	r3, r6, #30
    42fc:	d509      	bpl.n	4312 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    42fe:	2302      	movs	r3, #2
    4300:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4302:	2200      	movs	r2, #0
    4304:	3331      	adds	r3, #49	; 0x31
    4306:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4308:	07fb      	lsls	r3, r7, #31
    430a:	d502      	bpl.n	4312 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    430c:	0028      	movs	r0, r5
    430e:	68eb      	ldr	r3, [r5, #12]
    4310:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4312:	0773      	lsls	r3, r6, #29
    4314:	d560      	bpl.n	43d8 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    4316:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4318:	b29b      	uxth	r3, r3
    431a:	2b00      	cmp	r3, #0
    431c:	d05a      	beq.n	43d4 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    431e:	8b63      	ldrh	r3, [r4, #26]
    4320:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4322:	071a      	lsls	r2, r3, #28
    4324:	d402      	bmi.n	432c <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4326:	223f      	movs	r2, #63	; 0x3f
    4328:	4013      	ands	r3, r2
    432a:	e001      	b.n	4330 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    432c:	2237      	movs	r2, #55	; 0x37
    432e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4330:	2b00      	cmp	r3, #0
    4332:	d02d      	beq.n	4390 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4334:	079a      	lsls	r2, r3, #30
    4336:	d505      	bpl.n	4344 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4338:	221a      	movs	r2, #26
    433a:	2332      	movs	r3, #50	; 0x32
    433c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    433e:	3b30      	subs	r3, #48	; 0x30
    4340:	8363      	strh	r3, [r4, #26]
    4342:	e01f      	b.n	4384 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4344:	075a      	lsls	r2, r3, #29
    4346:	d505      	bpl.n	4354 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    4348:	221e      	movs	r2, #30
    434a:	2332      	movs	r3, #50	; 0x32
    434c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    434e:	3b2e      	subs	r3, #46	; 0x2e
    4350:	8363      	strh	r3, [r4, #26]
    4352:	e017      	b.n	4384 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4354:	07da      	lsls	r2, r3, #31
    4356:	d505      	bpl.n	4364 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4358:	2213      	movs	r2, #19
    435a:	2332      	movs	r3, #50	; 0x32
    435c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    435e:	3b31      	subs	r3, #49	; 0x31
    4360:	8363      	strh	r3, [r4, #26]
    4362:	e00f      	b.n	4384 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4364:	06da      	lsls	r2, r3, #27
    4366:	d505      	bpl.n	4374 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4368:	2242      	movs	r2, #66	; 0x42
    436a:	2332      	movs	r3, #50	; 0x32
    436c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    436e:	3b22      	subs	r3, #34	; 0x22
    4370:	8363      	strh	r3, [r4, #26]
    4372:	e007      	b.n	4384 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4374:	2220      	movs	r2, #32
    4376:	421a      	tst	r2, r3
    4378:	d004      	beq.n	4384 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    437a:	3221      	adds	r2, #33	; 0x21
    437c:	2332      	movs	r3, #50	; 0x32
    437e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4380:	3b12      	subs	r3, #18
    4382:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4384:	077b      	lsls	r3, r7, #29
    4386:	d527      	bpl.n	43d8 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4388:	0028      	movs	r0, r5
    438a:	696b      	ldr	r3, [r5, #20]
    438c:	4798      	blx	r3
    438e:	e023      	b.n	43d8 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4390:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4392:	05db      	lsls	r3, r3, #23
    4394:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4396:	b2da      	uxtb	r2, r3
    4398:	6a69      	ldr	r1, [r5, #36]	; 0x24
    439a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    439c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    439e:	1c51      	adds	r1, r2, #1
    43a0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    43a2:	7969      	ldrb	r1, [r5, #5]
    43a4:	2901      	cmp	r1, #1
    43a6:	d104      	bne.n	43b2 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    43a8:	0a1b      	lsrs	r3, r3, #8
    43aa:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    43ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    43ae:	3301      	adds	r3, #1
    43b0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    43b2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    43b4:	3b01      	subs	r3, #1
    43b6:	b29b      	uxth	r3, r3
    43b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    43ba:	2b00      	cmp	r3, #0
    43bc:	d10c      	bne.n	43d8 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43be:	3304      	adds	r3, #4
    43c0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    43c2:	2200      	movs	r2, #0
    43c4:	332e      	adds	r3, #46	; 0x2e
    43c6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    43c8:	07bb      	lsls	r3, r7, #30
    43ca:	d505      	bpl.n	43d8 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    43cc:	0028      	movs	r0, r5
    43ce:	692b      	ldr	r3, [r5, #16]
    43d0:	4798      	blx	r3
    43d2:	e001      	b.n	43d8 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43d4:	2304      	movs	r3, #4
    43d6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    43d8:	06f3      	lsls	r3, r6, #27
    43da:	d507      	bpl.n	43ec <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    43dc:	2310      	movs	r3, #16
    43de:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    43e0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    43e2:	06fb      	lsls	r3, r7, #27
    43e4:	d502      	bpl.n	43ec <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    43e6:	0028      	movs	r0, r5
    43e8:	69eb      	ldr	r3, [r5, #28]
    43ea:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    43ec:	06b3      	lsls	r3, r6, #26
    43ee:	d507      	bpl.n	4400 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    43f0:	2320      	movs	r3, #32
    43f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    43f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    43f6:	073b      	lsls	r3, r7, #28
    43f8:	d502      	bpl.n	4400 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    43fa:	0028      	movs	r0, r5
    43fc:	69ab      	ldr	r3, [r5, #24]
    43fe:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4400:	0733      	lsls	r3, r6, #28
    4402:	d507      	bpl.n	4414 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4404:	2308      	movs	r3, #8
    4406:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4408:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    440a:	06bb      	lsls	r3, r7, #26
    440c:	d502      	bpl.n	4414 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    440e:	6a2b      	ldr	r3, [r5, #32]
    4410:	0028      	movs	r0, r5
    4412:	4798      	blx	r3
		}
	}
#endif
}
    4414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4416:	46c0      	nop			; (mov r8, r8)
    4418:	2000033c 	.word	0x2000033c

0000441c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    441c:	b510      	push	{r4, lr}
	switch (clock_source) {
    441e:	2808      	cmp	r0, #8
    4420:	d803      	bhi.n	442a <system_clock_source_get_hz+0xe>
    4422:	0080      	lsls	r0, r0, #2
    4424:	4b1b      	ldr	r3, [pc, #108]	; (4494 <system_clock_source_get_hz+0x78>)
    4426:	581b      	ldr	r3, [r3, r0]
    4428:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    442a:	2000      	movs	r0, #0
    442c:	e030      	b.n	4490 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    442e:	4b1a      	ldr	r3, [pc, #104]	; (4498 <system_clock_source_get_hz+0x7c>)
    4430:	6918      	ldr	r0, [r3, #16]
    4432:	e02d      	b.n	4490 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4434:	4b19      	ldr	r3, [pc, #100]	; (449c <system_clock_source_get_hz+0x80>)
    4436:	6a1b      	ldr	r3, [r3, #32]
    4438:	059b      	lsls	r3, r3, #22
    443a:	0f9b      	lsrs	r3, r3, #30
    443c:	4818      	ldr	r0, [pc, #96]	; (44a0 <system_clock_source_get_hz+0x84>)
    443e:	40d8      	lsrs	r0, r3
    4440:	e026      	b.n	4490 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4442:	4b15      	ldr	r3, [pc, #84]	; (4498 <system_clock_source_get_hz+0x7c>)
    4444:	6958      	ldr	r0, [r3, #20]
    4446:	e023      	b.n	4490 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4448:	4b13      	ldr	r3, [pc, #76]	; (4498 <system_clock_source_get_hz+0x7c>)
    444a:	681b      	ldr	r3, [r3, #0]
    444c:	2002      	movs	r0, #2
    444e:	4018      	ands	r0, r3
    4450:	d01e      	beq.n	4490 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4452:	4912      	ldr	r1, [pc, #72]	; (449c <system_clock_source_get_hz+0x80>)
    4454:	2210      	movs	r2, #16
    4456:	68cb      	ldr	r3, [r1, #12]
    4458:	421a      	tst	r2, r3
    445a:	d0fc      	beq.n	4456 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    445c:	4b0e      	ldr	r3, [pc, #56]	; (4498 <system_clock_source_get_hz+0x7c>)
    445e:	681b      	ldr	r3, [r3, #0]
    4460:	075b      	lsls	r3, r3, #29
    4462:	d514      	bpl.n	448e <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4464:	2000      	movs	r0, #0
    4466:	4b0f      	ldr	r3, [pc, #60]	; (44a4 <system_clock_source_get_hz+0x88>)
    4468:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    446a:	4b0b      	ldr	r3, [pc, #44]	; (4498 <system_clock_source_get_hz+0x7c>)
    446c:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    446e:	041b      	lsls	r3, r3, #16
    4470:	0c1b      	lsrs	r3, r3, #16
    4472:	4358      	muls	r0, r3
    4474:	e00c      	b.n	4490 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4476:	2350      	movs	r3, #80	; 0x50
    4478:	4a08      	ldr	r2, [pc, #32]	; (449c <system_clock_source_get_hz+0x80>)
    447a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    447c:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    447e:	075b      	lsls	r3, r3, #29
    4480:	d506      	bpl.n	4490 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4482:	4b05      	ldr	r3, [pc, #20]	; (4498 <system_clock_source_get_hz+0x7c>)
    4484:	68d8      	ldr	r0, [r3, #12]
    4486:	e003      	b.n	4490 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4488:	2080      	movs	r0, #128	; 0x80
    448a:	0200      	lsls	r0, r0, #8
    448c:	e000      	b.n	4490 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    448e:	4806      	ldr	r0, [pc, #24]	; (44a8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    4490:	bd10      	pop	{r4, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	000080c8 	.word	0x000080c8
    4498:	200000f4 	.word	0x200000f4
    449c:	40000800 	.word	0x40000800
    44a0:	007a1200 	.word	0x007a1200
    44a4:	00004aa1 	.word	0x00004aa1
    44a8:	02dc6c00 	.word	0x02dc6c00

000044ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    44ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    44ae:	4c0c      	ldr	r4, [pc, #48]	; (44e0 <system_clock_source_osc8m_set_config+0x34>)
    44b0:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    44b2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    44b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    44b6:	7842      	ldrb	r2, [r0, #1]
    44b8:	2001      	movs	r0, #1
    44ba:	4002      	ands	r2, r0
    44bc:	0192      	lsls	r2, r2, #6
    44be:	2640      	movs	r6, #64	; 0x40
    44c0:	43b3      	bics	r3, r6
    44c2:	4313      	orrs	r3, r2
    44c4:	0002      	movs	r2, r0
    44c6:	402a      	ands	r2, r5
    44c8:	01d2      	lsls	r2, r2, #7
    44ca:	307f      	adds	r0, #127	; 0x7f
    44cc:	4383      	bics	r3, r0
    44ce:	4313      	orrs	r3, r2
    44d0:	2203      	movs	r2, #3
    44d2:	400a      	ands	r2, r1
    44d4:	0212      	lsls	r2, r2, #8
    44d6:	4903      	ldr	r1, [pc, #12]	; (44e4 <system_clock_source_osc8m_set_config+0x38>)
    44d8:	400b      	ands	r3, r1
    44da:	4313      	orrs	r3, r2
    44dc:	6223      	str	r3, [r4, #32]
}
    44de:	bd70      	pop	{r4, r5, r6, pc}
    44e0:	40000800 	.word	0x40000800
    44e4:	fffffcff 	.word	0xfffffcff

000044e8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ea:	465f      	mov	r7, fp
    44ec:	4656      	mov	r6, sl
    44ee:	464d      	mov	r5, r9
    44f0:	4644      	mov	r4, r8
    44f2:	b4f0      	push	{r4, r5, r6, r7}
    44f4:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    44f6:	4e2e      	ldr	r6, [pc, #184]	; (45b0 <system_clock_source_xosc32k_set_config+0xc8>)
    44f8:	8ab3      	ldrh	r3, [r6, #20]
    44fa:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    44fc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    44fe:	7803      	ldrb	r3, [r0, #0]
    4500:	425a      	negs	r2, r3
    4502:	415a      	adcs	r2, r3
    4504:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4506:	7883      	ldrb	r3, [r0, #2]
    4508:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    450a:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    450c:	7902      	ldrb	r2, [r0, #4]
    450e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    4510:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4512:	7b02      	ldrb	r2, [r0, #12]
    4514:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    4516:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4518:	6882      	ldr	r2, [r0, #8]
    451a:	4826      	ldr	r0, [pc, #152]	; (45b4 <system_clock_source_xosc32k_set_config+0xcc>)
    451c:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    451e:	2001      	movs	r0, #1
    4520:	464a      	mov	r2, r9
    4522:	0092      	lsls	r2, r2, #2
    4524:	4691      	mov	r9, r2
    4526:	2204      	movs	r2, #4
    4528:	4692      	mov	sl, r2
    452a:	4662      	mov	r2, ip
    452c:	4651      	mov	r1, sl
    452e:	438a      	bics	r2, r1
    4530:	4694      	mov	ip, r2
    4532:	464a      	mov	r2, r9
    4534:	4661      	mov	r1, ip
    4536:	430a      	orrs	r2, r1
    4538:	4694      	mov	ip, r2
    453a:	4642      	mov	r2, r8
    453c:	4002      	ands	r2, r0
    453e:	00d2      	lsls	r2, r2, #3
    4540:	4690      	mov	r8, r2
    4542:	2208      	movs	r2, #8
    4544:	4691      	mov	r9, r2
    4546:	4662      	mov	r2, ip
    4548:	4649      	mov	r1, r9
    454a:	438a      	bics	r2, r1
    454c:	4694      	mov	ip, r2
    454e:	4642      	mov	r2, r8
    4550:	4661      	mov	r1, ip
    4552:	430a      	orrs	r2, r1
    4554:	4694      	mov	ip, r2
    4556:	4003      	ands	r3, r0
    4558:	011b      	lsls	r3, r3, #4
    455a:	2210      	movs	r2, #16
    455c:	4690      	mov	r8, r2
    455e:	4662      	mov	r2, ip
    4560:	4641      	mov	r1, r8
    4562:	438a      	bics	r2, r1
    4564:	4313      	orrs	r3, r2
    4566:	4659      	mov	r1, fp
    4568:	4001      	ands	r1, r0
    456a:	0149      	lsls	r1, r1, #5
    456c:	2220      	movs	r2, #32
    456e:	4393      	bics	r3, r2
    4570:	430b      	orrs	r3, r1
    4572:	9a01      	ldr	r2, [sp, #4]
    4574:	4002      	ands	r2, r0
    4576:	0192      	lsls	r2, r2, #6
    4578:	2140      	movs	r1, #64	; 0x40
    457a:	438b      	bics	r3, r1
    457c:	4313      	orrs	r3, r2
    457e:	4007      	ands	r7, r0
    4580:	01ff      	lsls	r7, r7, #7
    4582:	2280      	movs	r2, #128	; 0x80
    4584:	4393      	bics	r3, r2
    4586:	433b      	orrs	r3, r7
    4588:	3a79      	subs	r2, #121	; 0x79
    458a:	4015      	ands	r5, r2
    458c:	022d      	lsls	r5, r5, #8
    458e:	4f0a      	ldr	r7, [pc, #40]	; (45b8 <system_clock_source_xosc32k_set_config+0xd0>)
    4590:	403b      	ands	r3, r7
    4592:	432b      	orrs	r3, r5
    4594:	4004      	ands	r4, r0
    4596:	0320      	lsls	r0, r4, #12
    4598:	4c08      	ldr	r4, [pc, #32]	; (45bc <system_clock_source_xosc32k_set_config+0xd4>)
    459a:	401c      	ands	r4, r3
    459c:	4304      	orrs	r4, r0
    459e:	82b4      	strh	r4, [r6, #20]
}
    45a0:	b003      	add	sp, #12
    45a2:	bc3c      	pop	{r2, r3, r4, r5}
    45a4:	4690      	mov	r8, r2
    45a6:	4699      	mov	r9, r3
    45a8:	46a2      	mov	sl, r4
    45aa:	46ab      	mov	fp, r5
    45ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	40000800 	.word	0x40000800
    45b4:	200000f4 	.word	0x200000f4
    45b8:	fffff8ff 	.word	0xfffff8ff
    45bc:	ffffefff 	.word	0xffffefff

000045c0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    45c0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45c2:	7a03      	ldrb	r3, [r0, #8]
    45c4:	069b      	lsls	r3, r3, #26
    45c6:	0c1a      	lsrs	r2, r3, #16
    45c8:	8943      	ldrh	r3, [r0, #10]
    45ca:	059b      	lsls	r3, r3, #22
    45cc:	0d9b      	lsrs	r3, r3, #22
    45ce:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    45d0:	4c19      	ldr	r4, [pc, #100]	; (4638 <system_clock_source_dfll_set_config+0x78>)
    45d2:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    45d4:	7981      	ldrb	r1, [r0, #6]
    45d6:	79c3      	ldrb	r3, [r0, #7]
    45d8:	4319      	orrs	r1, r3
    45da:	8843      	ldrh	r3, [r0, #2]
    45dc:	8882      	ldrh	r2, [r0, #4]
    45de:	4313      	orrs	r3, r2
    45e0:	430b      	orrs	r3, r1
    45e2:	7842      	ldrb	r2, [r0, #1]
    45e4:	01d2      	lsls	r2, r2, #7
    45e6:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    45e8:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    45ea:	7803      	ldrb	r3, [r0, #0]
    45ec:	2b04      	cmp	r3, #4
    45ee:	d10f      	bne.n	4610 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    45f0:	7b03      	ldrb	r3, [r0, #12]
    45f2:	069b      	lsls	r3, r3, #26
    45f4:	8a02      	ldrh	r2, [r0, #16]
    45f6:	4313      	orrs	r3, r2
    45f8:	0019      	movs	r1, r3
    45fa:	89c3      	ldrh	r3, [r0, #14]
    45fc:	041b      	lsls	r3, r3, #16
    45fe:	4a0f      	ldr	r2, [pc, #60]	; (463c <system_clock_source_dfll_set_config+0x7c>)
    4600:	4013      	ands	r3, r2
    4602:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4604:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4606:	6821      	ldr	r1, [r4, #0]
    4608:	2304      	movs	r3, #4
    460a:	430b      	orrs	r3, r1
    460c:	6023      	str	r3, [r4, #0]
    460e:	e011      	b.n	4634 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4610:	2b20      	cmp	r3, #32
    4612:	d10f      	bne.n	4634 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4614:	7b03      	ldrb	r3, [r0, #12]
    4616:	069b      	lsls	r3, r3, #26
    4618:	8a02      	ldrh	r2, [r0, #16]
    461a:	4313      	orrs	r3, r2
    461c:	0019      	movs	r1, r3
    461e:	89c3      	ldrh	r3, [r0, #14]
    4620:	041b      	lsls	r3, r3, #16
    4622:	4a06      	ldr	r2, [pc, #24]	; (463c <system_clock_source_dfll_set_config+0x7c>)
    4624:	4013      	ands	r3, r2
    4626:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4628:	4a03      	ldr	r2, [pc, #12]	; (4638 <system_clock_source_dfll_set_config+0x78>)
    462a:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    462c:	6813      	ldr	r3, [r2, #0]
    462e:	4904      	ldr	r1, [pc, #16]	; (4640 <system_clock_source_dfll_set_config+0x80>)
    4630:	430b      	orrs	r3, r1
    4632:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4634:	bd10      	pop	{r4, pc}
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	200000f4 	.word	0x200000f4
    463c:	03ff0000 	.word	0x03ff0000
    4640:	00000424 	.word	0x00000424

00004644 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4644:	2808      	cmp	r0, #8
    4646:	d803      	bhi.n	4650 <system_clock_source_enable+0xc>
    4648:	0080      	lsls	r0, r0, #2
    464a:	4b25      	ldr	r3, [pc, #148]	; (46e0 <system_clock_source_enable+0x9c>)
    464c:	581b      	ldr	r3, [r3, r0]
    464e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4650:	2017      	movs	r0, #23
    4652:	e044      	b.n	46de <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4654:	4a23      	ldr	r2, [pc, #140]	; (46e4 <system_clock_source_enable+0xa0>)
    4656:	6a11      	ldr	r1, [r2, #32]
    4658:	2302      	movs	r3, #2
    465a:	430b      	orrs	r3, r1
    465c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    465e:	2000      	movs	r0, #0
    4660:	e03d      	b.n	46de <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4662:	4a20      	ldr	r2, [pc, #128]	; (46e4 <system_clock_source_enable+0xa0>)
    4664:	6991      	ldr	r1, [r2, #24]
    4666:	2302      	movs	r3, #2
    4668:	430b      	orrs	r3, r1
    466a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    466c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    466e:	e036      	b.n	46de <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4670:	4a1c      	ldr	r2, [pc, #112]	; (46e4 <system_clock_source_enable+0xa0>)
    4672:	8a11      	ldrh	r1, [r2, #16]
    4674:	2302      	movs	r3, #2
    4676:	430b      	orrs	r3, r1
    4678:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    467a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    467c:	e02f      	b.n	46de <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    467e:	4a19      	ldr	r2, [pc, #100]	; (46e4 <system_clock_source_enable+0xa0>)
    4680:	8a91      	ldrh	r1, [r2, #20]
    4682:	2302      	movs	r3, #2
    4684:	430b      	orrs	r3, r1
    4686:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4688:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    468a:	e028      	b.n	46de <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    468c:	4916      	ldr	r1, [pc, #88]	; (46e8 <system_clock_source_enable+0xa4>)
    468e:	680b      	ldr	r3, [r1, #0]
    4690:	2202      	movs	r2, #2
    4692:	4313      	orrs	r3, r2
    4694:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4696:	4b13      	ldr	r3, [pc, #76]	; (46e4 <system_clock_source_enable+0xa0>)
    4698:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    469a:	0019      	movs	r1, r3
    469c:	320e      	adds	r2, #14
    469e:	68cb      	ldr	r3, [r1, #12]
    46a0:	421a      	tst	r2, r3
    46a2:	d0fc      	beq.n	469e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    46a4:	4a10      	ldr	r2, [pc, #64]	; (46e8 <system_clock_source_enable+0xa4>)
    46a6:	6891      	ldr	r1, [r2, #8]
    46a8:	4b0e      	ldr	r3, [pc, #56]	; (46e4 <system_clock_source_enable+0xa0>)
    46aa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    46ac:	6852      	ldr	r2, [r2, #4]
    46ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    46b0:	2200      	movs	r2, #0
    46b2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46b4:	0019      	movs	r1, r3
    46b6:	3210      	adds	r2, #16
    46b8:	68cb      	ldr	r3, [r1, #12]
    46ba:	421a      	tst	r2, r3
    46bc:	d0fc      	beq.n	46b8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    46be:	4b0a      	ldr	r3, [pc, #40]	; (46e8 <system_clock_source_enable+0xa4>)
    46c0:	681b      	ldr	r3, [r3, #0]
    46c2:	b29b      	uxth	r3, r3
    46c4:	4a07      	ldr	r2, [pc, #28]	; (46e4 <system_clock_source_enable+0xa0>)
    46c6:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46c8:	2000      	movs	r0, #0
    46ca:	e008      	b.n	46de <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46cc:	4905      	ldr	r1, [pc, #20]	; (46e4 <system_clock_source_enable+0xa0>)
    46ce:	2244      	movs	r2, #68	; 0x44
    46d0:	5c88      	ldrb	r0, [r1, r2]
    46d2:	2302      	movs	r3, #2
    46d4:	4303      	orrs	r3, r0
    46d6:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46d8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    46da:	e000      	b.n	46de <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    46dc:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    46de:	4770      	bx	lr
    46e0:	000080ec 	.word	0x000080ec
    46e4:	40000800 	.word	0x40000800
    46e8:	200000f4 	.word	0x200000f4

000046ec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    46ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ee:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    46f0:	22c2      	movs	r2, #194	; 0xc2
    46f2:	00d2      	lsls	r2, r2, #3
    46f4:	4b47      	ldr	r3, [pc, #284]	; (4814 <system_clock_init+0x128>)
    46f6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    46f8:	4947      	ldr	r1, [pc, #284]	; (4818 <system_clock_init+0x12c>)
    46fa:	684b      	ldr	r3, [r1, #4]
    46fc:	221e      	movs	r2, #30
    46fe:	4393      	bics	r3, r2
    4700:	3a1a      	subs	r2, #26
    4702:	4313      	orrs	r3, r2
    4704:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4706:	3a02      	subs	r2, #2
    4708:	ab01      	add	r3, sp, #4
    470a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    470c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    470e:	4d43      	ldr	r5, [pc, #268]	; (481c <system_clock_init+0x130>)
    4710:	b2e0      	uxtb	r0, r4
    4712:	a901      	add	r1, sp, #4
    4714:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4716:	3401      	adds	r4, #1
    4718:	2c25      	cmp	r4, #37	; 0x25
    471a:	d1f9      	bne.n	4710 <system_clock_init+0x24>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    471c:	a80a      	add	r0, sp, #40	; 0x28
    471e:	2300      	movs	r3, #0
    4720:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    4722:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4724:	2280      	movs	r2, #128	; 0x80
    4726:	0212      	lsls	r2, r2, #8
    4728:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    472a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    472c:	2201      	movs	r2, #1
    472e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4730:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    4732:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4734:	3202      	adds	r2, #2
    4736:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4738:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    473a:	4b39      	ldr	r3, [pc, #228]	; (4820 <system_clock_init+0x134>)
    473c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    473e:	2005      	movs	r0, #5
    4740:	4b38      	ldr	r3, [pc, #224]	; (4824 <system_clock_init+0x138>)
    4742:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4744:	4933      	ldr	r1, [pc, #204]	; (4814 <system_clock_init+0x128>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4746:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4748:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    474a:	421a      	tst	r2, r3
    474c:	d0fc      	beq.n	4748 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    474e:	4a31      	ldr	r2, [pc, #196]	; (4814 <system_clock_init+0x128>)
    4750:	8a91      	ldrh	r1, [r2, #20]
    4752:	2380      	movs	r3, #128	; 0x80
    4754:	430b      	orrs	r3, r1
    4756:	8293      	strh	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4758:	ab05      	add	r3, sp, #20
    475a:	2100      	movs	r1, #0
    475c:	2200      	movs	r2, #0
    475e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4760:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4762:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4764:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    4766:	313f      	adds	r1, #63	; 0x3f
    4768:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    476a:	393b      	subs	r1, #59	; 0x3b
    476c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    476e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4770:	4b2d      	ldr	r3, [pc, #180]	; (4828 <system_clock_init+0x13c>)
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4776:	2b3f      	cmp	r3, #63	; 0x3f
    4778:	d100      	bne.n	477c <system_clock_init+0x90>
		coarse = 0x1f;
    477a:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    477c:	a805      	add	r0, sp, #20
    477e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4780:	4b2a      	ldr	r3, [pc, #168]	; (482c <system_clock_init+0x140>)
    4782:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4784:	2307      	movs	r3, #7
    4786:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4788:	3338      	adds	r3, #56	; 0x38
    478a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    478c:	4b28      	ldr	r3, [pc, #160]	; (4830 <system_clock_init+0x144>)
    478e:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    4790:	a804      	add	r0, sp, #16
    4792:	2500      	movs	r5, #0
    4794:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    4796:	2601      	movs	r6, #1
    4798:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    479a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    479c:	4b25      	ldr	r3, [pc, #148]	; (4834 <system_clock_init+0x148>)
    479e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    47a0:	2006      	movs	r0, #6
    47a2:	4f20      	ldr	r7, [pc, #128]	; (4824 <system_clock_init+0x138>)
    47a4:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    47a6:	4b24      	ldr	r3, [pc, #144]	; (4838 <system_clock_init+0x14c>)
    47a8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    47aa:	ac01      	add	r4, sp, #4
    47ac:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    47ae:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    47b0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    47b2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    47b4:	2305      	movs	r3, #5
    47b6:	7023      	strb	r3, [r4, #0]
    47b8:	0021      	movs	r1, r4
    47ba:	2001      	movs	r0, #1
    47bc:	4b1f      	ldr	r3, [pc, #124]	; (483c <system_clock_init+0x150>)
    47be:	4798      	blx	r3
    47c0:	2001      	movs	r0, #1
    47c2:	4b1f      	ldr	r3, [pc, #124]	; (4840 <system_clock_init+0x154>)
    47c4:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    47c6:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    47c8:	0021      	movs	r1, r4
    47ca:	2000      	movs	r0, #0
    47cc:	4b13      	ldr	r3, [pc, #76]	; (481c <system_clock_init+0x130>)
    47ce:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    47d0:	2000      	movs	r0, #0
    47d2:	4b1c      	ldr	r3, [pc, #112]	; (4844 <system_clock_init+0x158>)
    47d4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    47d6:	2007      	movs	r0, #7
    47d8:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    47da:	490e      	ldr	r1, [pc, #56]	; (4814 <system_clock_init+0x128>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    47dc:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    47de:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    47e0:	4013      	ands	r3, r2
    47e2:	2bd0      	cmp	r3, #208	; 0xd0
    47e4:	d1fb      	bne.n	47de <system_clock_init+0xf2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    47e6:	4a18      	ldr	r2, [pc, #96]	; (4848 <system_clock_init+0x15c>)
    47e8:	2300      	movs	r3, #0
    47ea:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    47ec:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    47ee:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    47f0:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    47f2:	a901      	add	r1, sp, #4
    47f4:	2201      	movs	r2, #1
    47f6:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    47f8:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    47fa:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    47fc:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    47fe:	3307      	adds	r3, #7
    4800:	700b      	strb	r3, [r1, #0]
    4802:	2000      	movs	r0, #0
    4804:	4b0d      	ldr	r3, [pc, #52]	; (483c <system_clock_init+0x150>)
    4806:	4798      	blx	r3
    4808:	2000      	movs	r0, #0
    480a:	4b0d      	ldr	r3, [pc, #52]	; (4840 <system_clock_init+0x154>)
    480c:	4798      	blx	r3
#endif
}
    480e:	b00f      	add	sp, #60	; 0x3c
    4810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4812:	46c0      	nop			; (mov r8, r8)
    4814:	40000800 	.word	0x40000800
    4818:	41004000 	.word	0x41004000
    481c:	00004a85 	.word	0x00004a85
    4820:	000044e9 	.word	0x000044e9
    4824:	00004645 	.word	0x00004645
    4828:	00806024 	.word	0x00806024
    482c:	000005b9 	.word	0x000005b9
    4830:	000045c1 	.word	0x000045c1
    4834:	000044ad 	.word	0x000044ad
    4838:	0000484d 	.word	0x0000484d
    483c:	00004871 	.word	0x00004871
    4840:	00004929 	.word	0x00004929
    4844:	000049f9 	.word	0x000049f9
    4848:	40000400 	.word	0x40000400

0000484c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    484c:	4a06      	ldr	r2, [pc, #24]	; (4868 <system_gclk_init+0x1c>)
    484e:	6991      	ldr	r1, [r2, #24]
    4850:	2308      	movs	r3, #8
    4852:	430b      	orrs	r3, r1
    4854:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4856:	2201      	movs	r2, #1
    4858:	4b04      	ldr	r3, [pc, #16]	; (486c <system_gclk_init+0x20>)
    485a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    485c:	0019      	movs	r1, r3
    485e:	780b      	ldrb	r3, [r1, #0]
    4860:	4213      	tst	r3, r2
    4862:	d1fc      	bne.n	485e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4864:	4770      	bx	lr
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	40000400 	.word	0x40000400
    486c:	40000c00 	.word	0x40000c00

00004870 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4870:	b570      	push	{r4, r5, r6, lr}
    4872:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4874:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4876:	780c      	ldrb	r4, [r1, #0]
    4878:	0224      	lsls	r4, r4, #8
    487a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    487c:	784b      	ldrb	r3, [r1, #1]
    487e:	2b00      	cmp	r3, #0
    4880:	d002      	beq.n	4888 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4882:	2380      	movs	r3, #128	; 0x80
    4884:	02db      	lsls	r3, r3, #11
    4886:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4888:	7a4b      	ldrb	r3, [r1, #9]
    488a:	2b00      	cmp	r3, #0
    488c:	d002      	beq.n	4894 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    488e:	2380      	movs	r3, #128	; 0x80
    4890:	031b      	lsls	r3, r3, #12
    4892:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4894:	6848      	ldr	r0, [r1, #4]
    4896:	2801      	cmp	r0, #1
    4898:	d918      	bls.n	48cc <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    489a:	1e43      	subs	r3, r0, #1
    489c:	4218      	tst	r0, r3
    489e:	d110      	bne.n	48c2 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48a0:	2802      	cmp	r0, #2
    48a2:	d906      	bls.n	48b2 <system_gclk_gen_set_config+0x42>
    48a4:	2302      	movs	r3, #2
    48a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    48a8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    48aa:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48ac:	4298      	cmp	r0, r3
    48ae:	d8fb      	bhi.n	48a8 <system_gclk_gen_set_config+0x38>
    48b0:	e000      	b.n	48b4 <system_gclk_gen_set_config+0x44>
    48b2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    48b4:	0212      	lsls	r2, r2, #8
    48b6:	4332      	orrs	r2, r6
    48b8:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    48ba:	2380      	movs	r3, #128	; 0x80
    48bc:	035b      	lsls	r3, r3, #13
    48be:	431c      	orrs	r4, r3
    48c0:	e004      	b.n	48cc <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    48c2:	0205      	lsls	r5, r0, #8
    48c4:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    48c6:	2380      	movs	r3, #128	; 0x80
    48c8:	029b      	lsls	r3, r3, #10
    48ca:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    48cc:	7a0b      	ldrb	r3, [r1, #8]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d002      	beq.n	48d8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    48d2:	2380      	movs	r3, #128	; 0x80
    48d4:	039b      	lsls	r3, r3, #14
    48d6:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48d8:	4a0f      	ldr	r2, [pc, #60]	; (4918 <system_gclk_gen_set_config+0xa8>)
    48da:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    48dc:	b25b      	sxtb	r3, r3
    48de:	2b00      	cmp	r3, #0
    48e0:	dbfb      	blt.n	48da <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    48e2:	4b0e      	ldr	r3, [pc, #56]	; (491c <system_gclk_gen_set_config+0xac>)
    48e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    48e6:	4b0e      	ldr	r3, [pc, #56]	; (4920 <system_gclk_gen_set_config+0xb0>)
    48e8:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48ea:	4a0b      	ldr	r2, [pc, #44]	; (4918 <system_gclk_gen_set_config+0xa8>)
    48ec:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    48ee:	b25b      	sxtb	r3, r3
    48f0:	2b00      	cmp	r3, #0
    48f2:	dbfb      	blt.n	48ec <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    48f4:	4b08      	ldr	r3, [pc, #32]	; (4918 <system_gclk_gen_set_config+0xa8>)
    48f6:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48f8:	001a      	movs	r2, r3
    48fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    48fc:	b25b      	sxtb	r3, r3
    48fe:	2b00      	cmp	r3, #0
    4900:	dbfb      	blt.n	48fa <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4902:	4a05      	ldr	r2, [pc, #20]	; (4918 <system_gclk_gen_set_config+0xa8>)
    4904:	6851      	ldr	r1, [r2, #4]
    4906:	2380      	movs	r3, #128	; 0x80
    4908:	025b      	lsls	r3, r3, #9
    490a:	400b      	ands	r3, r1
    490c:	431c      	orrs	r4, r3
    490e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4910:	4b04      	ldr	r3, [pc, #16]	; (4924 <system_gclk_gen_set_config+0xb4>)
    4912:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4914:	bd70      	pop	{r4, r5, r6, pc}
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	40000c00 	.word	0x40000c00
    491c:	000032dd 	.word	0x000032dd
    4920:	40000c08 	.word	0x40000c08
    4924:	0000331d 	.word	0x0000331d

00004928 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4928:	b510      	push	{r4, lr}
    492a:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    492c:	4a0b      	ldr	r2, [pc, #44]	; (495c <system_gclk_gen_enable+0x34>)
    492e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4930:	b25b      	sxtb	r3, r3
    4932:	2b00      	cmp	r3, #0
    4934:	dbfb      	blt.n	492e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4936:	4b0a      	ldr	r3, [pc, #40]	; (4960 <system_gclk_gen_enable+0x38>)
    4938:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    493a:	4b0a      	ldr	r3, [pc, #40]	; (4964 <system_gclk_gen_enable+0x3c>)
    493c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    493e:	4a07      	ldr	r2, [pc, #28]	; (495c <system_gclk_gen_enable+0x34>)
    4940:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4942:	b25b      	sxtb	r3, r3
    4944:	2b00      	cmp	r3, #0
    4946:	dbfb      	blt.n	4940 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4948:	4a04      	ldr	r2, [pc, #16]	; (495c <system_gclk_gen_enable+0x34>)
    494a:	6853      	ldr	r3, [r2, #4]
    494c:	2180      	movs	r1, #128	; 0x80
    494e:	0249      	lsls	r1, r1, #9
    4950:	430b      	orrs	r3, r1
    4952:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <system_gclk_gen_enable+0x40>)
    4956:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4958:	bd10      	pop	{r4, pc}
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	40000c00 	.word	0x40000c00
    4960:	000032dd 	.word	0x000032dd
    4964:	40000c04 	.word	0x40000c04
    4968:	0000331d 	.word	0x0000331d

0000496c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    496c:	b570      	push	{r4, r5, r6, lr}
    496e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4970:	4a1a      	ldr	r2, [pc, #104]	; (49dc <system_gclk_gen_get_hz+0x70>)
    4972:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4974:	b25b      	sxtb	r3, r3
    4976:	2b00      	cmp	r3, #0
    4978:	dbfb      	blt.n	4972 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    497a:	4b19      	ldr	r3, [pc, #100]	; (49e0 <system_gclk_gen_get_hz+0x74>)
    497c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    497e:	4b19      	ldr	r3, [pc, #100]	; (49e4 <system_gclk_gen_get_hz+0x78>)
    4980:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4982:	4a16      	ldr	r2, [pc, #88]	; (49dc <system_gclk_gen_get_hz+0x70>)
    4984:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4986:	b25b      	sxtb	r3, r3
    4988:	2b00      	cmp	r3, #0
    498a:	dbfb      	blt.n	4984 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    498c:	4e13      	ldr	r6, [pc, #76]	; (49dc <system_gclk_gen_get_hz+0x70>)
    498e:	6870      	ldr	r0, [r6, #4]
    4990:	04c0      	lsls	r0, r0, #19
    4992:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4994:	4b14      	ldr	r3, [pc, #80]	; (49e8 <system_gclk_gen_get_hz+0x7c>)
    4996:	4798      	blx	r3
    4998:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    499a:	4b12      	ldr	r3, [pc, #72]	; (49e4 <system_gclk_gen_get_hz+0x78>)
    499c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    499e:	6876      	ldr	r6, [r6, #4]
    49a0:	02f6      	lsls	r6, r6, #11
    49a2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49a4:	4b11      	ldr	r3, [pc, #68]	; (49ec <system_gclk_gen_get_hz+0x80>)
    49a6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49a8:	4a0c      	ldr	r2, [pc, #48]	; (49dc <system_gclk_gen_get_hz+0x70>)
    49aa:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    49ac:	b25b      	sxtb	r3, r3
    49ae:	2b00      	cmp	r3, #0
    49b0:	dbfb      	blt.n	49aa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    49b2:	4b0a      	ldr	r3, [pc, #40]	; (49dc <system_gclk_gen_get_hz+0x70>)
    49b4:	689c      	ldr	r4, [r3, #8]
    49b6:	0224      	lsls	r4, r4, #8
    49b8:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    49ba:	4b0d      	ldr	r3, [pc, #52]	; (49f0 <system_gclk_gen_get_hz+0x84>)
    49bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    49be:	2e00      	cmp	r6, #0
    49c0:	d107      	bne.n	49d2 <system_gclk_gen_get_hz+0x66>
    49c2:	2c01      	cmp	r4, #1
    49c4:	d907      	bls.n	49d6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    49c6:	0021      	movs	r1, r4
    49c8:	0028      	movs	r0, r5
    49ca:	4b0a      	ldr	r3, [pc, #40]	; (49f4 <system_gclk_gen_get_hz+0x88>)
    49cc:	4798      	blx	r3
    49ce:	0005      	movs	r5, r0
    49d0:	e001      	b.n	49d6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    49d2:	3401      	adds	r4, #1
    49d4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    49d6:	0028      	movs	r0, r5
    49d8:	bd70      	pop	{r4, r5, r6, pc}
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	40000c00 	.word	0x40000c00
    49e0:	000032dd 	.word	0x000032dd
    49e4:	40000c04 	.word	0x40000c04
    49e8:	0000441d 	.word	0x0000441d
    49ec:	40000c08 	.word	0x40000c08
    49f0:	0000331d 	.word	0x0000331d
    49f4:	00005b0d 	.word	0x00005b0d

000049f8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    49f8:	b510      	push	{r4, lr}
    49fa:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    49fc:	4b06      	ldr	r3, [pc, #24]	; (4a18 <system_gclk_chan_enable+0x20>)
    49fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a00:	4b06      	ldr	r3, [pc, #24]	; (4a1c <system_gclk_chan_enable+0x24>)
    4a02:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a04:	4a06      	ldr	r2, [pc, #24]	; (4a20 <system_gclk_chan_enable+0x28>)
    4a06:	8851      	ldrh	r1, [r2, #2]
    4a08:	2380      	movs	r3, #128	; 0x80
    4a0a:	01db      	lsls	r3, r3, #7
    4a0c:	430b      	orrs	r3, r1
    4a0e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4a10:	4b04      	ldr	r3, [pc, #16]	; (4a24 <system_gclk_chan_enable+0x2c>)
    4a12:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a14:	bd10      	pop	{r4, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	000032dd 	.word	0x000032dd
    4a1c:	40000c02 	.word	0x40000c02
    4a20:	40000c00 	.word	0x40000c00
    4a24:	0000331d 	.word	0x0000331d

00004a28 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a28:	b510      	push	{r4, lr}
    4a2a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4a2c:	4b0f      	ldr	r3, [pc, #60]	; (4a6c <system_gclk_chan_disable+0x44>)
    4a2e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a30:	4b0f      	ldr	r3, [pc, #60]	; (4a70 <system_gclk_chan_disable+0x48>)
    4a32:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a34:	4b0f      	ldr	r3, [pc, #60]	; (4a74 <system_gclk_chan_disable+0x4c>)
    4a36:	885a      	ldrh	r2, [r3, #2]
    4a38:	0512      	lsls	r2, r2, #20
    4a3a:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4a3c:	8859      	ldrh	r1, [r3, #2]
    4a3e:	4a0e      	ldr	r2, [pc, #56]	; (4a78 <system_gclk_chan_disable+0x50>)
    4a40:	400a      	ands	r2, r1
    4a42:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a44:	8859      	ldrh	r1, [r3, #2]
    4a46:	4a0d      	ldr	r2, [pc, #52]	; (4a7c <system_gclk_chan_disable+0x54>)
    4a48:	400a      	ands	r2, r1
    4a4a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a4c:	0019      	movs	r1, r3
    4a4e:	2280      	movs	r2, #128	; 0x80
    4a50:	01d2      	lsls	r2, r2, #7
    4a52:	884b      	ldrh	r3, [r1, #2]
    4a54:	4213      	tst	r3, r2
    4a56:	d1fc      	bne.n	4a52 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a58:	4906      	ldr	r1, [pc, #24]	; (4a74 <system_gclk_chan_disable+0x4c>)
    4a5a:	884c      	ldrh	r4, [r1, #2]
    4a5c:	0202      	lsls	r2, r0, #8
    4a5e:	4b06      	ldr	r3, [pc, #24]	; (4a78 <system_gclk_chan_disable+0x50>)
    4a60:	4023      	ands	r3, r4
    4a62:	4313      	orrs	r3, r2
    4a64:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4a66:	4b06      	ldr	r3, [pc, #24]	; (4a80 <system_gclk_chan_disable+0x58>)
    4a68:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a6a:	bd10      	pop	{r4, pc}
    4a6c:	000032dd 	.word	0x000032dd
    4a70:	40000c02 	.word	0x40000c02
    4a74:	40000c00 	.word	0x40000c00
    4a78:	fffff0ff 	.word	0xfffff0ff
    4a7c:	ffffbfff 	.word	0xffffbfff
    4a80:	0000331d 	.word	0x0000331d

00004a84 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4a84:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4a86:	780c      	ldrb	r4, [r1, #0]
    4a88:	0224      	lsls	r4, r4, #8
    4a8a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4a8c:	4b02      	ldr	r3, [pc, #8]	; (4a98 <system_gclk_chan_set_config+0x14>)
    4a8e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4a90:	b2a4      	uxth	r4, r4
    4a92:	4b02      	ldr	r3, [pc, #8]	; (4a9c <system_gclk_chan_set_config+0x18>)
    4a94:	805c      	strh	r4, [r3, #2]
}
    4a96:	bd10      	pop	{r4, pc}
    4a98:	00004a29 	.word	0x00004a29
    4a9c:	40000c00 	.word	0x40000c00

00004aa0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4aa0:	b510      	push	{r4, lr}
    4aa2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4aa4:	4b06      	ldr	r3, [pc, #24]	; (4ac0 <system_gclk_chan_get_hz+0x20>)
    4aa6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4aa8:	4b06      	ldr	r3, [pc, #24]	; (4ac4 <system_gclk_chan_get_hz+0x24>)
    4aaa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4aac:	4b06      	ldr	r3, [pc, #24]	; (4ac8 <system_gclk_chan_get_hz+0x28>)
    4aae:	885c      	ldrh	r4, [r3, #2]
    4ab0:	0524      	lsls	r4, r4, #20
    4ab2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <system_gclk_chan_get_hz+0x2c>)
    4ab6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4ab8:	0020      	movs	r0, r4
    4aba:	4b05      	ldr	r3, [pc, #20]	; (4ad0 <system_gclk_chan_get_hz+0x30>)
    4abc:	4798      	blx	r3
}
    4abe:	bd10      	pop	{r4, pc}
    4ac0:	000032dd 	.word	0x000032dd
    4ac4:	40000c02 	.word	0x40000c02
    4ac8:	40000c00 	.word	0x40000c00
    4acc:	0000331d 	.word	0x0000331d
    4ad0:	0000496d 	.word	0x0000496d

00004ad4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4ad4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4ad6:	78d3      	ldrb	r3, [r2, #3]
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d11e      	bne.n	4b1a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4adc:	7813      	ldrb	r3, [r2, #0]
    4ade:	2b80      	cmp	r3, #128	; 0x80
    4ae0:	d004      	beq.n	4aec <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4ae2:	061b      	lsls	r3, r3, #24
    4ae4:	2480      	movs	r4, #128	; 0x80
    4ae6:	0264      	lsls	r4, r4, #9
    4ae8:	4323      	orrs	r3, r4
    4aea:	e000      	b.n	4aee <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4aec:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4aee:	7854      	ldrb	r4, [r2, #1]
    4af0:	2502      	movs	r5, #2
    4af2:	43ac      	bics	r4, r5
    4af4:	d10a      	bne.n	4b0c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4af6:	7894      	ldrb	r4, [r2, #2]
    4af8:	2c00      	cmp	r4, #0
    4afa:	d103      	bne.n	4b04 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4afc:	2480      	movs	r4, #128	; 0x80
    4afe:	02a4      	lsls	r4, r4, #10
    4b00:	4323      	orrs	r3, r4
    4b02:	e002      	b.n	4b0a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b04:	24c0      	movs	r4, #192	; 0xc0
    4b06:	02e4      	lsls	r4, r4, #11
    4b08:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b0a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b0c:	7854      	ldrb	r4, [r2, #1]
    4b0e:	3c01      	subs	r4, #1
    4b10:	2c01      	cmp	r4, #1
    4b12:	d812      	bhi.n	4b3a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b14:	4c18      	ldr	r4, [pc, #96]	; (4b78 <_system_pinmux_config+0xa4>)
    4b16:	4023      	ands	r3, r4
    4b18:	e00f      	b.n	4b3a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4b1a:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b1c:	040b      	lsls	r3, r1, #16
    4b1e:	0c1b      	lsrs	r3, r3, #16
    4b20:	24a0      	movs	r4, #160	; 0xa0
    4b22:	05e4      	lsls	r4, r4, #23
    4b24:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b26:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b28:	0c0b      	lsrs	r3, r1, #16
    4b2a:	24d0      	movs	r4, #208	; 0xd0
    4b2c:	0624      	lsls	r4, r4, #24
    4b2e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b30:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b32:	78d3      	ldrb	r3, [r2, #3]
    4b34:	2b00      	cmp	r3, #0
    4b36:	d018      	beq.n	4b6a <_system_pinmux_config+0x96>
    4b38:	e01c      	b.n	4b74 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b3a:	040c      	lsls	r4, r1, #16
    4b3c:	0c24      	lsrs	r4, r4, #16
    4b3e:	25a0      	movs	r5, #160	; 0xa0
    4b40:	05ed      	lsls	r5, r5, #23
    4b42:	432c      	orrs	r4, r5
    4b44:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b46:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b48:	0c0c      	lsrs	r4, r1, #16
    4b4a:	25d0      	movs	r5, #208	; 0xd0
    4b4c:	062d      	lsls	r5, r5, #24
    4b4e:	432c      	orrs	r4, r5
    4b50:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b52:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b54:	78d4      	ldrb	r4, [r2, #3]
    4b56:	2c00      	cmp	r4, #0
    4b58:	d10c      	bne.n	4b74 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4b5a:	035b      	lsls	r3, r3, #13
    4b5c:	d505      	bpl.n	4b6a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4b5e:	7893      	ldrb	r3, [r2, #2]
    4b60:	2b01      	cmp	r3, #1
    4b62:	d101      	bne.n	4b68 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    4b64:	6181      	str	r1, [r0, #24]
    4b66:	e000      	b.n	4b6a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    4b68:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b6a:	7853      	ldrb	r3, [r2, #1]
    4b6c:	3b01      	subs	r3, #1
    4b6e:	2b01      	cmp	r3, #1
    4b70:	d800      	bhi.n	4b74 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4b72:	6081      	str	r1, [r0, #8]
		}
	}
}
    4b74:	bd30      	pop	{r4, r5, pc}
    4b76:	46c0      	nop			; (mov r8, r8)
    4b78:	fffbffff 	.word	0xfffbffff

00004b7c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4b7c:	b510      	push	{r4, lr}
    4b7e:	0003      	movs	r3, r0
    4b80:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4b82:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4b84:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4b86:	2900      	cmp	r1, #0
    4b88:	d104      	bne.n	4b94 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    4b8a:	0958      	lsrs	r0, r3, #5
    4b8c:	01c0      	lsls	r0, r0, #7
    4b8e:	4905      	ldr	r1, [pc, #20]	; (4ba4 <system_pinmux_pin_set_config+0x28>)
    4b90:	468c      	mov	ip, r1
    4b92:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    4b94:	211f      	movs	r1, #31
    4b96:	400b      	ands	r3, r1
    4b98:	391e      	subs	r1, #30
    4b9a:	4099      	lsls	r1, r3
    4b9c:	4b02      	ldr	r3, [pc, #8]	; (4ba8 <system_pinmux_pin_set_config+0x2c>)
    4b9e:	4798      	blx	r3
}
    4ba0:	bd10      	pop	{r4, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	41004400 	.word	0x41004400
    4ba8:	00004ad5 	.word	0x00004ad5

00004bac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4bac:	4770      	bx	lr
    4bae:	46c0      	nop			; (mov r8, r8)

00004bb0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4bb0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4bb2:	4b05      	ldr	r3, [pc, #20]	; (4bc8 <system_init+0x18>)
    4bb4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4bb6:	4b05      	ldr	r3, [pc, #20]	; (4bcc <system_init+0x1c>)
    4bb8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4bba:	4b05      	ldr	r3, [pc, #20]	; (4bd0 <system_init+0x20>)
    4bbc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4bbe:	4b05      	ldr	r3, [pc, #20]	; (4bd4 <system_init+0x24>)
    4bc0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4bc2:	4b05      	ldr	r3, [pc, #20]	; (4bd8 <system_init+0x28>)
    4bc4:	4798      	blx	r3
}
    4bc6:	bd10      	pop	{r4, pc}
    4bc8:	000046ed 	.word	0x000046ed
    4bcc:	0000334d 	.word	0x0000334d
    4bd0:	00004bad 	.word	0x00004bad
    4bd4:	00003471 	.word	0x00003471
    4bd8:	00004bad 	.word	0x00004bad

00004bdc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4bdc:	e7fe      	b.n	4bdc <Dummy_Handler>
    4bde:	46c0      	nop			; (mov r8, r8)

00004be0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4be0:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    4be2:	4b2e      	ldr	r3, [pc, #184]	; (4c9c <Reset_Handler+0xbc>)
    4be4:	4a2e      	ldr	r2, [pc, #184]	; (4ca0 <Reset_Handler+0xc0>)
    4be6:	429a      	cmp	r2, r3
    4be8:	d003      	beq.n	4bf2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4bea:	4b2e      	ldr	r3, [pc, #184]	; (4ca4 <Reset_Handler+0xc4>)
    4bec:	4a2b      	ldr	r2, [pc, #172]	; (4c9c <Reset_Handler+0xbc>)
    4bee:	429a      	cmp	r2, r3
    4bf0:	d304      	bcc.n	4bfc <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4bf2:	4b2d      	ldr	r3, [pc, #180]	; (4ca8 <Reset_Handler+0xc8>)
    4bf4:	4a2d      	ldr	r2, [pc, #180]	; (4cac <Reset_Handler+0xcc>)
    4bf6:	429a      	cmp	r2, r3
    4bf8:	d310      	bcc.n	4c1c <Reset_Handler+0x3c>
    4bfa:	e01e      	b.n	4c3a <Reset_Handler+0x5a>
    4bfc:	4a2c      	ldr	r2, [pc, #176]	; (4cb0 <Reset_Handler+0xd0>)
    4bfe:	4b29      	ldr	r3, [pc, #164]	; (4ca4 <Reset_Handler+0xc4>)
    4c00:	3303      	adds	r3, #3
    4c02:	1a9b      	subs	r3, r3, r2
    4c04:	089b      	lsrs	r3, r3, #2
    4c06:	3301      	adds	r3, #1
    4c08:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4c0a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4c0c:	4823      	ldr	r0, [pc, #140]	; (4c9c <Reset_Handler+0xbc>)
    4c0e:	4924      	ldr	r1, [pc, #144]	; (4ca0 <Reset_Handler+0xc0>)
    4c10:	588c      	ldr	r4, [r1, r2]
    4c12:	5084      	str	r4, [r0, r2]
    4c14:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4c16:	429a      	cmp	r2, r3
    4c18:	d1fa      	bne.n	4c10 <Reset_Handler+0x30>
    4c1a:	e7ea      	b.n	4bf2 <Reset_Handler+0x12>
    4c1c:	4a25      	ldr	r2, [pc, #148]	; (4cb4 <Reset_Handler+0xd4>)
    4c1e:	4b22      	ldr	r3, [pc, #136]	; (4ca8 <Reset_Handler+0xc8>)
    4c20:	3303      	adds	r3, #3
    4c22:	1a9b      	subs	r3, r3, r2
    4c24:	089b      	lsrs	r3, r3, #2
    4c26:	3301      	adds	r3, #1
    4c28:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4c2a:	2200      	movs	r2, #0
                *pDest++ = 0;
    4c2c:	481f      	ldr	r0, [pc, #124]	; (4cac <Reset_Handler+0xcc>)
    4c2e:	2100      	movs	r1, #0
    4c30:	1814      	adds	r4, r2, r0
    4c32:	6021      	str	r1, [r4, #0]
    4c34:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4c36:	429a      	cmp	r2, r3
    4c38:	d1fa      	bne.n	4c30 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4c3a:	4a1f      	ldr	r2, [pc, #124]	; (4cb8 <Reset_Handler+0xd8>)
    4c3c:	21ff      	movs	r1, #255	; 0xff
    4c3e:	4b1f      	ldr	r3, [pc, #124]	; (4cbc <Reset_Handler+0xdc>)
    4c40:	438b      	bics	r3, r1
    4c42:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4c44:	39fd      	subs	r1, #253	; 0xfd
    4c46:	2390      	movs	r3, #144	; 0x90
    4c48:	005b      	lsls	r3, r3, #1
    4c4a:	4a1d      	ldr	r2, [pc, #116]	; (4cc0 <Reset_Handler+0xe0>)
    4c4c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4c4e:	481d      	ldr	r0, [pc, #116]	; (4cc4 <Reset_Handler+0xe4>)
    4c50:	78c3      	ldrb	r3, [r0, #3]
    4c52:	2403      	movs	r4, #3
    4c54:	43a3      	bics	r3, r4
    4c56:	2202      	movs	r2, #2
    4c58:	4313      	orrs	r3, r2
    4c5a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4c5c:	78c3      	ldrb	r3, [r0, #3]
    4c5e:	260c      	movs	r6, #12
    4c60:	43b3      	bics	r3, r6
    4c62:	2108      	movs	r1, #8
    4c64:	430b      	orrs	r3, r1
    4c66:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4c68:	4b17      	ldr	r3, [pc, #92]	; (4cc8 <Reset_Handler+0xe8>)
    4c6a:	7b98      	ldrb	r0, [r3, #14]
    4c6c:	2530      	movs	r5, #48	; 0x30
    4c6e:	43a8      	bics	r0, r5
    4c70:	0005      	movs	r5, r0
    4c72:	2020      	movs	r0, #32
    4c74:	4328      	orrs	r0, r5
    4c76:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4c78:	7b98      	ldrb	r0, [r3, #14]
    4c7a:	43b0      	bics	r0, r6
    4c7c:	4301      	orrs	r1, r0
    4c7e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4c80:	7b99      	ldrb	r1, [r3, #14]
    4c82:	43a1      	bics	r1, r4
    4c84:	430a      	orrs	r2, r1
    4c86:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4c88:	4a10      	ldr	r2, [pc, #64]	; (4ccc <Reset_Handler+0xec>)
    4c8a:	6851      	ldr	r1, [r2, #4]
    4c8c:	2380      	movs	r3, #128	; 0x80
    4c8e:	430b      	orrs	r3, r1
    4c90:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4c92:	4b0f      	ldr	r3, [pc, #60]	; (4cd0 <Reset_Handler+0xf0>)
    4c94:	4798      	blx	r3

        /* Branch to main function */
        main();
    4c96:	4b0f      	ldr	r3, [pc, #60]	; (4cd4 <Reset_Handler+0xf4>)
    4c98:	4798      	blx	r3
    4c9a:	e7fe      	b.n	4c9a <Reset_Handler+0xba>
    4c9c:	20000000 	.word	0x20000000
    4ca0:	00008780 	.word	0x00008780
    4ca4:	20000078 	.word	0x20000078
    4ca8:	200003d8 	.word	0x200003d8
    4cac:	20000078 	.word	0x20000078
    4cb0:	20000004 	.word	0x20000004
    4cb4:	2000007c 	.word	0x2000007c
    4cb8:	e000ed00 	.word	0xe000ed00
    4cbc:	00000000 	.word	0x00000000
    4cc0:	41007000 	.word	0x41007000
    4cc4:	41005000 	.word	0x41005000
    4cc8:	41004800 	.word	0x41004800
    4ccc:	41004000 	.word	0x41004000
    4cd0:	00005c7d 	.word	0x00005c7d
    4cd4:	000058f1 	.word	0x000058f1

00004cd8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cda:	4647      	mov	r7, r8
    4cdc:	b480      	push	{r7}
    4cde:	000c      	movs	r4, r1
    4ce0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d10d      	bne.n	4d02 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    4ce6:	2a00      	cmp	r2, #0
    4ce8:	dd0e      	ble.n	4d08 <_read+0x30>
    4cea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4cec:	4e08      	ldr	r6, [pc, #32]	; (4d10 <_read+0x38>)
    4cee:	4d09      	ldr	r5, [pc, #36]	; (4d14 <_read+0x3c>)
    4cf0:	6830      	ldr	r0, [r6, #0]
    4cf2:	0021      	movs	r1, r4
    4cf4:	682b      	ldr	r3, [r5, #0]
    4cf6:	4798      	blx	r3
		ptr++;
    4cf8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    4cfa:	42a7      	cmp	r7, r4
    4cfc:	d1f8      	bne.n	4cf0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    4cfe:	4640      	mov	r0, r8
    4d00:	e003      	b.n	4d0a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    4d02:	2001      	movs	r0, #1
    4d04:	4240      	negs	r0, r0
    4d06:	e000      	b.n	4d0a <_read+0x32>
	}

	for (; len > 0; --len) {
    4d08:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    4d0a:	bc04      	pop	{r2}
    4d0c:	4690      	mov	r8, r2
    4d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d10:	20000360 	.word	0x20000360
    4d14:	20000358 	.word	0x20000358

00004d18 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d1a:	4647      	mov	r7, r8
    4d1c:	b480      	push	{r7}
    4d1e:	000e      	movs	r6, r1
    4d20:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4d22:	3801      	subs	r0, #1
    4d24:	2802      	cmp	r0, #2
    4d26:	d811      	bhi.n	4d4c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    4d28:	2a00      	cmp	r2, #0
    4d2a:	d012      	beq.n	4d52 <_write+0x3a>
    4d2c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4d2e:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <_write+0x48>)
    4d30:	4698      	mov	r8, r3
    4d32:	4f0c      	ldr	r7, [pc, #48]	; (4d64 <_write+0x4c>)
    4d34:	4643      	mov	r3, r8
    4d36:	6818      	ldr	r0, [r3, #0]
    4d38:	5d31      	ldrb	r1, [r6, r4]
    4d3a:	683b      	ldr	r3, [r7, #0]
    4d3c:	4798      	blx	r3
    4d3e:	2800      	cmp	r0, #0
    4d40:	db09      	blt.n	4d56 <_write+0x3e>
			return -1;
		}
		++nChars;
    4d42:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    4d44:	42a5      	cmp	r5, r4
    4d46:	d1f5      	bne.n	4d34 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    4d48:	0020      	movs	r0, r4
    4d4a:	e006      	b.n	4d5a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    4d4c:	2001      	movs	r0, #1
    4d4e:	4240      	negs	r0, r0
    4d50:	e003      	b.n	4d5a <_write+0x42>
	}

	for (; len != 0; --len) {
    4d52:	2000      	movs	r0, #0
    4d54:	e001      	b.n	4d5a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    4d56:	2001      	movs	r0, #1
    4d58:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    4d5a:	bc04      	pop	{r2}
    4d5c:	4690      	mov	r8, r2
    4d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d60:	20000360 	.word	0x20000360
    4d64:	2000035c 	.word	0x2000035c

00004d68 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4d68:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4d6a:	4a06      	ldr	r2, [pc, #24]	; (4d84 <_sbrk+0x1c>)
    4d6c:	6812      	ldr	r2, [r2, #0]
    4d6e:	2a00      	cmp	r2, #0
    4d70:	d102      	bne.n	4d78 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    4d72:	4905      	ldr	r1, [pc, #20]	; (4d88 <_sbrk+0x20>)
    4d74:	4a03      	ldr	r2, [pc, #12]	; (4d84 <_sbrk+0x1c>)
    4d76:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    4d78:	4a02      	ldr	r2, [pc, #8]	; (4d84 <_sbrk+0x1c>)
    4d7a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4d7c:	18c3      	adds	r3, r0, r3
    4d7e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4d80:	4770      	bx	lr
    4d82:	46c0      	nop			; (mov r8, r8)
    4d84:	2000010c 	.word	0x2000010c
    4d88:	200023d8 	.word	0x200023d8

00004d8c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4d8c:	2001      	movs	r0, #1
    4d8e:	4240      	negs	r0, r0
    4d90:	4770      	bx	lr
    4d92:	46c0      	nop			; (mov r8, r8)

00004d94 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4d94:	2380      	movs	r3, #128	; 0x80
    4d96:	019b      	lsls	r3, r3, #6
    4d98:	604b      	str	r3, [r1, #4]

	return 0;
}
    4d9a:	2000      	movs	r0, #0
    4d9c:	4770      	bx	lr
    4d9e:	46c0      	nop			; (mov r8, r8)

00004da0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4da0:	2001      	movs	r0, #1
    4da2:	4770      	bx	lr

00004da4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4da4:	2000      	movs	r0, #0
    4da6:	4770      	bx	lr

00004da8 <AppServerCb>:
Version: 1.0

Date: 4 June 2012
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
    4da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4daa:	b085      	sub	sp, #20
    4dac:	0006      	movs	r6, r0
    4dae:	000d      	movs	r5, r1
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
	uint8					u8ClientID = 0;

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
    4db0:	492a      	ldr	r1, [pc, #168]	; (4e5c <AppServerCb+0xb4>)
    4db2:	4b2b      	ldr	r3, [pc, #172]	; (4e60 <AppServerCb+0xb8>)
    4db4:	4798      	blx	r3
    4db6:	2800      	cmp	r0, #0
    4db8:	d108      	bne.n	4dcc <AppServerCb+0x24>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
    4dba:	492a      	ldr	r1, [pc, #168]	; (4e64 <AppServerCb+0xbc>)
    4dbc:	0030      	movs	r0, r6
    4dbe:	4b28      	ldr	r3, [pc, #160]	; (4e60 <AppServerCb+0xb8>)
    4dc0:	4798      	blx	r3
    4dc2:	2800      	cmp	r0, #0
    4dc4:	d005      	beq.n	4dd2 <AppServerCb+0x2a>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		u8ClientID = PROWL_CLIENT;
    4dc6:	2701      	movs	r7, #1
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    4dc8:	4c27      	ldr	r4, [pc, #156]	; (4e68 <AppServerCb+0xc0>)
    4dca:	e004      	b.n	4dd6 <AppServerCb+0x2e>
	uint8					u8ClientID = 0;

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
    4dcc:	2702      	movs	r7, #2
	tstrNotification		*pstrNotification = NULL;
	uint8					u8ClientID = 0;

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    4dce:	4c27      	ldr	r4, [pc, #156]	; (4e6c <AppServerCb+0xc4>)
    4dd0:	e001      	b.n	4dd6 <AppServerCb+0x2e>
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
	uint8					u8ClientID = 0;
    4dd2:	2700      	movs	r7, #0
Date: 4 June 2012
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
    4dd4:	2400      	movs	r4, #0
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		u8ClientID = PROWL_CLIENT;
	}

	if(u32ServerIP != 0)
    4dd6:	2d00      	cmp	r5, #0
    4dd8:	d014      	beq.n	4e04 <AppServerCb+0x5c>
	{

		if(pstrNotification->u32ServerIPAddress == 0)
    4dda:	6823      	ldr	r3, [r4, #0]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d100      	bne.n	4de2 <AppServerCb+0x3a>
		{
			pstrNotification->u32ServerIPAddress = u32ServerIP;
    4de0:	6025      	str	r5, [r4, #0]
		}

		strAddr.sin_family = AF_INET;
    4de2:	2302      	movs	r3, #2
    4de4:	466a      	mov	r2, sp
    4de6:	8013      	strh	r3, [r2, #0]
		strAddr.sin_port = _htons(pstrNotification->u16Port);
    4de8:	88a3      	ldrh	r3, [r4, #4]
    4dea:	021a      	lsls	r2, r3, #8
    4dec:	0a1b      	lsrs	r3, r3, #8
    4dee:	4313      	orrs	r3, r2
    4df0:	466a      	mov	r2, sp
    4df2:	8053      	strh	r3, [r2, #2]
		strAddr.sin_addr.s_addr = u32ServerIP;
    4df4:	9501      	str	r5, [sp, #4]

		connect(pstrNotification->Socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
    4df6:	2006      	movs	r0, #6
    4df8:	5620      	ldrsb	r0, [r4, r0]
    4dfa:	2210      	movs	r2, #16
    4dfc:	4669      	mov	r1, sp
    4dfe:	4b1c      	ldr	r3, [pc, #112]	; (4e70 <AppServerCb+0xc8>)
    4e00:	4798      	blx	r3
    4e02:	e028      	b.n	4e56 <AppServerCb+0xae>
	}
	else
	{
		static uint8	u8Retry = GROWL_DNS_RETRY;
		if(u8Retry--)
    4e04:	4a1b      	ldr	r2, [pc, #108]	; (4e74 <AppServerCb+0xcc>)
    4e06:	7813      	ldrb	r3, [r2, #0]
    4e08:	1e59      	subs	r1, r3, #1
    4e0a:	7011      	strb	r1, [r2, #0]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d013      	beq.n	4e38 <AppServerCb+0x90>
		{
			M2M_DBG("Retry Resolving DNS\n");
			if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
    4e10:	4912      	ldr	r1, [pc, #72]	; (4e5c <AppServerCb+0xb4>)
    4e12:	0030      	movs	r0, r6
    4e14:	4b12      	ldr	r3, [pc, #72]	; (4e60 <AppServerCb+0xb8>)
    4e16:	4798      	blx	r3
    4e18:	2800      	cmp	r0, #0
    4e1a:	d003      	beq.n	4e24 <AppServerCb+0x7c>
				gethostbyname((uint8*)NMA_DOMAIN_NAME);
    4e1c:	4816      	ldr	r0, [pc, #88]	; (4e78 <AppServerCb+0xd0>)
    4e1e:	4b17      	ldr	r3, [pc, #92]	; (4e7c <AppServerCb+0xd4>)
    4e20:	4798      	blx	r3
    4e22:	e018      	b.n	4e56 <AppServerCb+0xae>
			else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
    4e24:	490f      	ldr	r1, [pc, #60]	; (4e64 <AppServerCb+0xbc>)
    4e26:	0030      	movs	r0, r6
    4e28:	4b0d      	ldr	r3, [pc, #52]	; (4e60 <AppServerCb+0xb8>)
    4e2a:	4798      	blx	r3
    4e2c:	2800      	cmp	r0, #0
    4e2e:	d012      	beq.n	4e56 <AppServerCb+0xae>
				gethostbyname((uint8*)PROWL_DOMAIN_NAME);
    4e30:	4813      	ldr	r0, [pc, #76]	; (4e80 <AppServerCb+0xd8>)
    4e32:	4b12      	ldr	r3, [pc, #72]	; (4e7c <AppServerCb+0xd4>)
    4e34:	4798      	blx	r3
    4e36:	e00e      	b.n	4e56 <AppServerCb+0xae>

		}
		else
		{
			close(pstrNotification->Socket);
    4e38:	2006      	movs	r0, #6
    4e3a:	5620      	ldrsb	r0, [r4, r0]
    4e3c:	4b11      	ldr	r3, [pc, #68]	; (4e84 <AppServerCb+0xdc>)
    4e3e:	4798      	blx	r3
			pstrNotification->Socket = 0xFF;
    4e40:	23ff      	movs	r3, #255	; 0xff
    4e42:	71a3      	strb	r3, [r4, #6]
			pstrNotification->u8State = GROWL_STATE_IDLE;
    4e44:	2300      	movs	r3, #0
    4e46:	71e3      	strb	r3, [r4, #7]
			u8Retry = GROWL_DNS_RETRY;
    4e48:	2203      	movs	r2, #3
    4e4a:	4b0a      	ldr	r3, [pc, #40]	; (4e74 <AppServerCb+0xcc>)
    4e4c:	701a      	strb	r2, [r3, #0]
			M2M_DBG("Failed to Resolve DNS\n\r");
			GrowlCb(GROWL_ERR_RESOLVE_DNS,u8ClientID);
    4e4e:	0039      	movs	r1, r7
    4e50:	200b      	movs	r0, #11
    4e52:	4b0d      	ldr	r3, [pc, #52]	; (4e88 <AppServerCb+0xe0>)
    4e54:	4798      	blx	r3
		}
	}
}
    4e56:	b005      	add	sp, #20
    4e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	00008140 	.word	0x00008140
    4e60:	000009f9 	.word	0x000009f9
    4e64:	00008150 	.word	0x00008150
    4e68:	2000012c 	.word	0x2000012c
    4e6c:	20000114 	.word	0x20000114
    4e70:	00002f81 	.word	0x00002f81
    4e74:	20000012 	.word	0x20000012
    4e78:	00008158 	.word	0x00008158
    4e7c:	000031b5 	.word	0x000031b5
    4e80:	00008170 	.word	0x00008170
    4e84:	0000313d 	.word	0x0000313d
    4e88:	00005795 	.word	0x00005795

00004e8c <Encode>:
Version: 1.0

Date:
*********************************************************************/
uint16 Encode(uint8 *pcStr,uint8 *pcEncoded)
{
    4e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e8e:	0002      	movs	r2, r0
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
    4e90:	7803      	ldrb	r3, [r0, #0]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d02b      	beq.n	4eee <Encode+0x62>
    4e96:	2000      	movs	r0, #0
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    4e98:	2520      	movs	r5, #32
		{
			*pcbuf++ = *pcTmp;
		}
		else
		{
			*pcbuf++ = '%';
    4e9a:	2725      	movs	r7, #37	; 0x25
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    4e9c:	260f      	movs	r6, #15
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
	{
		if (
    4e9e:	001c      	movs	r4, r3
    4ea0:	3c30      	subs	r4, #48	; 0x30
    4ea2:	2c09      	cmp	r4, #9
    4ea4:	d90c      	bls.n	4ec0 <Encode+0x34>
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    4ea6:	001c      	movs	r4, r3
    4ea8:	43ac      	bics	r4, r5
    4eaa:	3c41      	subs	r4, #65	; 0x41
    4eac:	2c19      	cmp	r4, #25
    4eae:	d907      	bls.n	4ec0 <Encode+0x34>
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
    4eb0:	001c      	movs	r4, r3
    4eb2:	3c2d      	subs	r4, #45	; 0x2d
    4eb4:	2c01      	cmp	r4, #1
    4eb6:	d903      	bls.n	4ec0 <Encode+0x34>
			(*pcTmp == '-') ||
    4eb8:	2b5f      	cmp	r3, #95	; 0x5f
    4eba:	d001      	beq.n	4ec0 <Encode+0x34>
			(*pcTmp == '_') ||
			(*pcTmp == '.') ||
    4ebc:	2b7e      	cmp	r3, #126	; 0x7e
    4ebe:	d102      	bne.n	4ec6 <Encode+0x3a>
			(*pcTmp == '~')
			)
		{
			*pcbuf++ = *pcTmp;
    4ec0:	700b      	strb	r3, [r1, #0]
    4ec2:	3101      	adds	r1, #1
    4ec4:	e00c      	b.n	4ee0 <Encode+0x54>
		}
		else
		{
			*pcbuf++ = '%';
    4ec6:	700f      	strb	r7, [r1, #0]
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
    4ec8:	7813      	ldrb	r3, [r2, #0]
    4eca:	091b      	lsrs	r3, r3, #4
    4ecc:	4c09      	ldr	r4, [pc, #36]	; (4ef4 <Encode+0x68>)
    4ece:	5ce3      	ldrb	r3, [r4, r3]
    4ed0:	704b      	strb	r3, [r1, #1]
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    4ed2:	7813      	ldrb	r3, [r2, #0]
    4ed4:	4033      	ands	r3, r6
    4ed6:	5ce3      	ldrb	r3, [r4, r3]
    4ed8:	708b      	strb	r3, [r1, #2]
			u16Count += 2;
    4eda:	3002      	adds	r0, #2
    4edc:	b280      	uxth	r0, r0
		}
		else
		{
			*pcbuf++ = '%';
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    4ede:	3103      	adds	r1, #3
			u16Count += 2;
		}
		pcTmp++;
    4ee0:	3201      	adds	r2, #1
		u16Count ++;
    4ee2:	3001      	adds	r0, #1
    4ee4:	b280      	uxth	r0, r0
{
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
    4ee6:	7813      	ldrb	r3, [r2, #0]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d1d8      	bne.n	4e9e <Encode+0x12>
    4eec:	e000      	b.n	4ef0 <Encode+0x64>
*********************************************************************/
uint16 Encode(uint8 *pcStr,uint8 *pcEncoded)
{
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;
    4eee:	2000      	movs	r0, #0
		}
		pcTmp++;
		u16Count ++;
	}
	return u16Count;
}
    4ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	0000812c 	.word	0x0000812c

00004ef8 <FormatMsg>:
Version: 1.0

Date:
*********************************************************************/
uint16 FormatMsg(uint8 u8clientName, uint8 *pu8Msg)
{
    4ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efa:	464f      	mov	r7, r9
    4efc:	4646      	mov	r6, r8
    4efe:	b4c0      	push	{r6, r7}
    4f00:	0006      	movs	r6, r0
    4f02:	000d      	movs	r5, r1
	uint16	u16Tmp;
	uint16	u16MsgOffset = 0;
	tstrNotification* strNotification;

	if (u8clientName == NMA_CLIENT)
    4f04:	2802      	cmp	r0, #2
    4f06:	d10e      	bne.n	4f26 <FormatMsg+0x2e>
	{
		strNotification = (tstrNotification*)(&gstrNotificationNMA);
		/* Put the start of the HTTP Request message. */
		u16Tmp = sizeof("GET /publicapi/notify?apikey=") - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/notify?apikey=",u16Tmp);
    4f08:	221d      	movs	r2, #29
    4f0a:	4938      	ldr	r1, [pc, #224]	; (4fec <FormatMsg+0xf4>)
    4f0c:	0028      	movs	r0, r5
    4f0e:	4c38      	ldr	r4, [pc, #224]	; (4ff0 <FormatMsg+0xf8>)
    4f10:	47a0      	blx	r4
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
    4f12:	4b38      	ldr	r3, [pc, #224]	; (4ff4 <FormatMsg+0xfc>)
    4f14:	6819      	ldr	r1, [r3, #0]
    4f16:	2230      	movs	r2, #48	; 0x30
    4f18:	0028      	movs	r0, r5
    4f1a:	301d      	adds	r0, #29
    4f1c:	47a0      	blx	r4
	uint16	u16MsgOffset = 0;
	tstrNotification* strNotification;

	if (u8clientName == NMA_CLIENT)
	{
		strNotification = (tstrNotification*)(&gstrNotificationNMA);
    4f1e:	4b36      	ldr	r3, [pc, #216]	; (4ff8 <FormatMsg+0x100>)
    4f20:	4699      	mov	r9, r3
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/notify?apikey=",u16Tmp);
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
		u16MsgOffset+= NMA_API_KEY_SIZE;
    4f22:	244d      	movs	r4, #77	; 0x4d
    4f24:	e010      	b.n	4f48 <FormatMsg+0x50>
		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
		u16MsgOffset+= PROWL_API_KEY_SIZE;
	}
	else
		return 0;
    4f26:	2000      	movs	r0, #0

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
		u16MsgOffset+= NMA_API_KEY_SIZE;
	}
	else if (u8clientName == PROWL_CLIENT)
    4f28:	2e01      	cmp	r6, #1
    4f2a:	d15b      	bne.n	4fe4 <FormatMsg+0xec>
	{
		strNotification = (tstrNotification*)(&gstrNotificationProwl);

		/* Put the start of the HTTP Request message. */
		u16Tmp = sizeof("GET /publicapi/add?apikey=") - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/add?apikey=",u16Tmp);
    4f2c:	221a      	movs	r2, #26
    4f2e:	4933      	ldr	r1, [pc, #204]	; (4ffc <FormatMsg+0x104>)
    4f30:	0028      	movs	r0, r5
    4f32:	4c2f      	ldr	r4, [pc, #188]	; (4ff0 <FormatMsg+0xf8>)
    4f34:	47a0      	blx	r4
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
    4f36:	4b32      	ldr	r3, [pc, #200]	; (5000 <FormatMsg+0x108>)
    4f38:	6819      	ldr	r1, [r3, #0]
    4f3a:	2228      	movs	r2, #40	; 0x28
    4f3c:	0028      	movs	r0, r5
    4f3e:	301a      	adds	r0, #26
    4f40:	47a0      	blx	r4
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
		u16MsgOffset+= NMA_API_KEY_SIZE;
	}
	else if (u8clientName == PROWL_CLIENT)
	{
		strNotification = (tstrNotification*)(&gstrNotificationProwl);
    4f42:	4b30      	ldr	r3, [pc, #192]	; (5004 <FormatMsg+0x10c>)
    4f44:	4699      	mov	r9, r3
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/add?apikey=",u16Tmp);
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
		u16MsgOffset+= PROWL_API_KEY_SIZE;
    4f46:	2442      	movs	r4, #66	; 0x42
	else
		return 0;

	/* Encode the Application name and append it to the message. */
	u16Tmp = sizeof("&application=") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&application=",u16Tmp);
    4f48:	1928      	adds	r0, r5, r4
    4f4a:	220d      	movs	r2, #13
    4f4c:	492e      	ldr	r1, [pc, #184]	; (5008 <FormatMsg+0x110>)
    4f4e:	4f28      	ldr	r7, [pc, #160]	; (4ff0 <FormatMsg+0xf8>)
    4f50:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4f52:	340d      	adds	r4, #13
	u16Tmp = Encode((uint8*)strNotification->pu8App,&pu8Msg[u16MsgOffset]);
    4f54:	1929      	adds	r1, r5, r4
    4f56:	464b      	mov	r3, r9
    4f58:	6898      	ldr	r0, [r3, #8]
    4f5a:	4b2c      	ldr	r3, [pc, #176]	; (500c <FormatMsg+0x114>)
    4f5c:	4698      	mov	r8, r3
    4f5e:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    4f60:	1820      	adds	r0, r4, r0
    4f62:	b284      	uxth	r4, r0

	/* Encode the Event name and append it to the message. */
	u16Tmp = sizeof("&event=") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&event=",u16Tmp);
    4f64:	1928      	adds	r0, r5, r4
    4f66:	2207      	movs	r2, #7
    4f68:	4929      	ldr	r1, [pc, #164]	; (5010 <FormatMsg+0x118>)
    4f6a:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4f6c:	3407      	adds	r4, #7
    4f6e:	b2a4      	uxth	r4, r4
	u16Tmp = Encode((uint8*)strNotification->pu8Event,&pu8Msg[u16MsgOffset]);
    4f70:	1929      	adds	r1, r5, r4
    4f72:	464b      	mov	r3, r9
    4f74:	68d8      	ldr	r0, [r3, #12]
    4f76:	47c0      	blx	r8
	u16MsgOffset += u16Tmp;
    4f78:	1824      	adds	r4, r4, r0
    4f7a:	b2a4      	uxth	r4, r4

	/* Encode the Description message and append it to the message. */
	u16Tmp = sizeof("&description=") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&description=",u16Tmp);
    4f7c:	1928      	adds	r0, r5, r4
    4f7e:	220d      	movs	r2, #13
    4f80:	4924      	ldr	r1, [pc, #144]	; (5014 <FormatMsg+0x11c>)
    4f82:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4f84:	340d      	adds	r4, #13
    4f86:	b2a4      	uxth	r4, r4
	u16Tmp = Encode((uint8*)strNotification->pu8Msg,&pu8Msg[u16MsgOffset]);
    4f88:	1929      	adds	r1, r5, r4
    4f8a:	464b      	mov	r3, r9
    4f8c:	6918      	ldr	r0, [r3, #16]
    4f8e:	47c0      	blx	r8
	u16MsgOffset += u16Tmp;
    4f90:	1824      	adds	r4, r4, r0
    4f92:	b2a3      	uxth	r3, r4
    4f94:	4698      	mov	r8, r3

	u16Tmp = sizeof(" HTTP/1.1\r\nHost: ") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)" HTTP/1.1\r\nHost: ",u16Tmp);
    4f96:	18e8      	adds	r0, r5, r3
    4f98:	2211      	movs	r2, #17
    4f9a:	491f      	ldr	r1, [pc, #124]	; (5018 <FormatMsg+0x120>)
    4f9c:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4f9e:	4640      	mov	r0, r8
    4fa0:	3011      	adds	r0, #17
    4fa2:	b284      	uxth	r4, r0

	if (u8clientName == NMA_CLIENT)
    4fa4:	2e02      	cmp	r6, #2
    4fa6:	d108      	bne.n	4fba <FormatMsg+0xc2>
	{
		u16Tmp = sizeof(NMA_DOMAIN_NAME) - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)NMA_DOMAIN_NAME,u16Tmp);
    4fa8:	1928      	adds	r0, r5, r4
    4faa:	2217      	movs	r2, #23
    4fac:	491b      	ldr	r1, [pc, #108]	; (501c <FormatMsg+0x124>)
    4fae:	4b10      	ldr	r3, [pc, #64]	; (4ff0 <FormatMsg+0xf8>)
    4fb0:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    4fb2:	4644      	mov	r4, r8
    4fb4:	3428      	adds	r4, #40	; 0x28
    4fb6:	b2a4      	uxth	r4, r4
    4fb8:	e009      	b.n	4fce <FormatMsg+0xd6>
	}
	else if (u8clientName == PROWL_CLIENT)
    4fba:	2e01      	cmp	r6, #1
    4fbc:	d107      	bne.n	4fce <FormatMsg+0xd6>
	{
		u16Tmp = sizeof(PROWL_DOMAIN_NAME) - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)PROWL_DOMAIN_NAME,u16Tmp);
    4fbe:	1928      	adds	r0, r5, r4
    4fc0:	2210      	movs	r2, #16
    4fc2:	4917      	ldr	r1, [pc, #92]	; (5020 <FormatMsg+0x128>)
    4fc4:	4b0a      	ldr	r3, [pc, #40]	; (4ff0 <FormatMsg+0xf8>)
    4fc6:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    4fc8:	4644      	mov	r4, r8
    4fca:	3421      	adds	r4, #33	; 0x21
    4fcc:	b2a4      	uxth	r4, r4

	}

	u16Tmp = sizeof("\r\n\r\n") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"\r\n\r\n",u16Tmp);
    4fce:	1928      	adds	r0, r5, r4
    4fd0:	2204      	movs	r2, #4
    4fd2:	4914      	ldr	r1, [pc, #80]	; (5024 <FormatMsg+0x12c>)
    4fd4:	4b06      	ldr	r3, [pc, #24]	; (4ff0 <FormatMsg+0xf8>)
    4fd6:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
	pu8Msg[u16MsgOffset] = '\0';
    4fd8:	1d23      	adds	r3, r4, #4
    4fda:	b29b      	uxth	r3, r3
    4fdc:	2200      	movs	r2, #0
    4fde:	54ea      	strb	r2, [r5, r3]
	u16MsgOffset ++;
    4fe0:	1d60      	adds	r0, r4, #5
    4fe2:	b280      	uxth	r0, r0

	return u16MsgOffset;
}
    4fe4:	bc0c      	pop	{r2, r3}
    4fe6:	4690      	mov	r8, r2
    4fe8:	4699      	mov	r9, r3
    4fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fec:	00008184 	.word	0x00008184
    4ff0:	00000971 	.word	0x00000971
    4ff4:	20000128 	.word	0x20000128
    4ff8:	20000114 	.word	0x20000114
    4ffc:	000081a4 	.word	0x000081a4
    5000:	20000110 	.word	0x20000110
    5004:	2000012c 	.word	0x2000012c
    5008:	000081c0 	.word	0x000081c0
    500c:	00004e8d 	.word	0x00004e8d
    5010:	000081d0 	.word	0x000081d0
    5014:	000081d8 	.word	0x000081d8
    5018:	000081e8 	.word	0x000081e8
    501c:	00008158 	.word	0x00008158
    5020:	00008170 	.word	0x00008170
    5024:	000081fc 	.word	0x000081fc

00005028 <GetResponseCode>:
uint8 GetResponseCode
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
    5028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    502a:	1e06      	subs	r6, r0, #0
	uint8	u8Code = 0xFF;
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
    502c:	d04c      	beq.n	50c8 <GetResponseCode+0xa0>
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
	uint8	u8Code = 0xFF;
    502e:	20ff      	movs	r0, #255	; 0xff
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
    5030:	2900      	cmp	r1, #0
    5032:	d04a      	beq.n	50ca <GetResponseCode+0xa2>
    5034:	2400      	movs	r4, #0
	{
		uint16	u16Offset = 0;
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
    5036:	4d25      	ldr	r5, [pc, #148]	; (50cc <GetResponseCode+0xa4>)
					u8Code = 50;
				}
				break;
			}
			u16Offset ++;
		}while(u16Offset < (u16BufferSize - 9));
    5038:	3909      	subs	r1, #9
    503a:	000f      	movs	r7, r1
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
	{
		uint16	u16Offset = 0;
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
    503c:	1930      	adds	r0, r6, r4
    503e:	2209      	movs	r2, #9
    5040:	4923      	ldr	r1, [pc, #140]	; (50d0 <GetResponseCode+0xa8>)
    5042:	47a8      	blx	r5
    5044:	2800      	cmp	r0, #0
    5046:	d139      	bne.n	50bc <GetResponseCode+0x94>
			{
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
    5048:	3409      	adds	r4, #9
    504a:	b2a4      	uxth	r4, r4
    504c:	1934      	adds	r4, r6, r4
    504e:	2203      	movs	r2, #3
    5050:	4920      	ldr	r1, [pc, #128]	; (50d4 <GetResponseCode+0xac>)
    5052:	0020      	movs	r0, r4
    5054:	4b1d      	ldr	r3, [pc, #116]	; (50cc <GetResponseCode+0xa4>)
    5056:	4798      	blx	r3
    5058:	0003      	movs	r3, r0
				{
					u8Code = 20;
    505a:	2014      	movs	r0, #20
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
			{
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
    505c:	2b00      	cmp	r3, #0
    505e:	d034      	beq.n	50ca <GetResponseCode+0xa2>
				{
					u8Code = 20;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
    5060:	2203      	movs	r2, #3
    5062:	491d      	ldr	r1, [pc, #116]	; (50d8 <GetResponseCode+0xb0>)
    5064:	0020      	movs	r0, r4
    5066:	4b19      	ldr	r3, [pc, #100]	; (50cc <GetResponseCode+0xa4>)
    5068:	4798      	blx	r3
    506a:	0003      	movs	r3, r0
				{
					u8Code = 40;
    506c:	2028      	movs	r0, #40	; 0x28
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
				{
					u8Code = 20;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
    506e:	2b00      	cmp	r3, #0
    5070:	d02b      	beq.n	50ca <GetResponseCode+0xa2>
				{
					u8Code = 40;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
    5072:	2203      	movs	r2, #3
    5074:	4919      	ldr	r1, [pc, #100]	; (50dc <GetResponseCode+0xb4>)
    5076:	0020      	movs	r0, r4
    5078:	4b14      	ldr	r3, [pc, #80]	; (50cc <GetResponseCode+0xa4>)
    507a:	4798      	blx	r3
    507c:	0003      	movs	r3, r0
				{
					u8Code = 41;
    507e:	2029      	movs	r0, #41	; 0x29
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
				{
					u8Code = 40;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
    5080:	2b00      	cmp	r3, #0
    5082:	d022      	beq.n	50ca <GetResponseCode+0xa2>
				{
					u8Code = 41;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
    5084:	2203      	movs	r2, #3
    5086:	4916      	ldr	r1, [pc, #88]	; (50e0 <GetResponseCode+0xb8>)
    5088:	0020      	movs	r0, r4
    508a:	4b10      	ldr	r3, [pc, #64]	; (50cc <GetResponseCode+0xa4>)
    508c:	4798      	blx	r3
    508e:	0003      	movs	r3, r0
				{
					u8Code = 42;
    5090:	202a      	movs	r0, #42	; 0x2a
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
				{
					u8Code = 41;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
    5092:	2b00      	cmp	r3, #0
    5094:	d019      	beq.n	50ca <GetResponseCode+0xa2>
				{
					u8Code = 42;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"406", 3))
    5096:	2203      	movs	r2, #3
    5098:	4912      	ldr	r1, [pc, #72]	; (50e4 <GetResponseCode+0xbc>)
    509a:	0020      	movs	r0, r4
    509c:	4b0b      	ldr	r3, [pc, #44]	; (50cc <GetResponseCode+0xa4>)
    509e:	4798      	blx	r3
    50a0:	0003      	movs	r3, r0
				{
					u8Code = 46;
    50a2:	202e      	movs	r0, #46	; 0x2e
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
				{
					u8Code = 42;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"406", 3))
    50a4:	2b00      	cmp	r3, #0
    50a6:	d010      	beq.n	50ca <GetResponseCode+0xa2>
				{
					u8Code = 46;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"409", 3))
    50a8:	2203      	movs	r2, #3
    50aa:	490f      	ldr	r1, [pc, #60]	; (50e8 <GetResponseCode+0xc0>)
    50ac:	0020      	movs	r0, r4
    50ae:	4b07      	ldr	r3, [pc, #28]	; (50cc <GetResponseCode+0xa4>)
    50b0:	4798      	blx	r3
				{
					u8Code = 49;
				}
				else
				{
					u8Code = 50;
    50b2:	4243      	negs	r3, r0
    50b4:	4143      	adcs	r3, r0
    50b6:	2032      	movs	r0, #50	; 0x32
    50b8:	1ac0      	subs	r0, r0, r3
    50ba:	e006      	b.n	50ca <GetResponseCode+0xa2>
				}
				break;
			}
			u16Offset ++;
    50bc:	3401      	adds	r4, #1
    50be:	b2a4      	uxth	r4, r4
		}while(u16Offset < (u16BufferSize - 9));
    50c0:	42bc      	cmp	r4, r7
    50c2:	dbbb      	blt.n	503c <GetResponseCode+0x14>
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
	uint8	u8Code = 0xFF;
    50c4:	20ff      	movs	r0, #255	; 0xff
    50c6:	e000      	b.n	50ca <GetResponseCode+0xa2>
    50c8:	20ff      	movs	r0, #255	; 0xff
			}
			u16Offset ++;
		}while(u16Offset < (u16BufferSize - 9));
	}
	return u8Code;
}
    50ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50cc:	00000a41 	.word	0x00000a41
    50d0:	00008204 	.word	0x00008204
    50d4:	00008210 	.word	0x00008210
    50d8:	00008214 	.word	0x00008214
    50dc:	00008218 	.word	0x00008218
    50e0:	0000821c 	.word	0x0000821c
    50e4:	00008220 	.word	0x00008220
    50e8:	00008224 	.word	0x00008224

000050ec <GROWL_APPSocketEventHandler>:
Version: 1.0

Date:
*********************************************************************/
static void GROWL_APPSocketEventHandler(SOCKET sock, uint8 u8Msg, void * pvMsg)
{
    50ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ee:	b0c1      	sub	sp, #260	; 0x104
    50f0:	0004      	movs	r4, r0
    50f2:	0015      	movs	r5, r2
	tstrNotification	*pstrNotification;
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
    50f4:	4b45      	ldr	r3, [pc, #276]	; (520c <GROWL_APPSocketEventHandler+0x120>)
    50f6:	799b      	ldrb	r3, [r3, #6]
    50f8:	b25b      	sxtb	r3, r3
    50fa:	4283      	cmp	r3, r0
    50fc:	d008      	beq.n	5110 <GROWL_APPSocketEventHandler+0x24>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(sock == gstrNotificationProwl.Socket)
    50fe:	4b44      	ldr	r3, [pc, #272]	; (5210 <GROWL_APPSocketEventHandler+0x124>)
    5100:	799b      	ldrb	r3, [r3, #6]
    5102:	b25b      	sxtb	r3, r3
    5104:	4298      	cmp	r0, r3
    5106:	d000      	beq.n	510a <GROWL_APPSocketEventHandler+0x1e>
    5108:	e07d      	b.n	5206 <GROWL_APPSocketEventHandler+0x11a>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		u8ClientID = PROWL_CLIENT;
    510a:	2601      	movs	r6, #1
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(sock == gstrNotificationProwl.Socket)
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    510c:	4f40      	ldr	r7, [pc, #256]	; (5210 <GROWL_APPSocketEventHandler+0x124>)
    510e:	e001      	b.n	5114 <GROWL_APPSocketEventHandler+0x28>
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
    5110:	2602      	movs	r6, #2
	tstrNotification	*pstrNotification;
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    5112:	4f3e      	ldr	r7, [pc, #248]	; (520c <GROWL_APPSocketEventHandler+0x120>)
	else
	{
		return;
	}

	if(u8Msg == SOCKET_MSG_CONNECT)
    5114:	2905      	cmp	r1, #5
    5116:	d13c      	bne.n	5192 <GROWL_APPSocketEventHandler+0xa6>
	{
		static uint8			u8Retry = GROWL_CONNECT_RETRY;
		tstrSocketConnectMsg	*pstrConnect = (tstrSocketConnectMsg*)pvMsg;
		if(pstrConnect->s8Error == 0)
    5118:	2301      	movs	r3, #1
    511a:	56eb      	ldrsb	r3, [r5, r3]
    511c:	2b00      	cmp	r3, #0
    511e:	d114      	bne.n	514a <GROWL_APPSocketEventHandler+0x5e>
		{
			uint8	acBuffer[GROWL_MSG_SIZE];
			uint16	u16MsgSize;

			u16MsgSize = FormatMsg(u8ClientID, acBuffer);
    5120:	4669      	mov	r1, sp
    5122:	0030      	movs	r0, r6
    5124:	4b3b      	ldr	r3, [pc, #236]	; (5214 <GROWL_APPSocketEventHandler+0x128>)
    5126:	4798      	blx	r3
    5128:	0002      	movs	r2, r0
			send(sock, acBuffer, u16MsgSize, 0);
    512a:	2300      	movs	r3, #0
    512c:	4669      	mov	r1, sp
    512e:	0020      	movs	r0, r4
    5130:	4c39      	ldr	r4, [pc, #228]	; (5218 <GROWL_APPSocketEventHandler+0x12c>)
    5132:	47a0      	blx	r4
			recv(pstrNotification->Socket, (void*)au8Msg,GROWL_DESCRIPTION_MAX_LENGTH, GROWL_RX_TIMEOUT);
    5134:	2006      	movs	r0, #6
    5136:	5638      	ldrsb	r0, [r7, r0]
    5138:	4b38      	ldr	r3, [pc, #224]	; (521c <GROWL_APPSocketEventHandler+0x130>)
    513a:	2248      	movs	r2, #72	; 0x48
    513c:	4938      	ldr	r1, [pc, #224]	; (5220 <GROWL_APPSocketEventHandler+0x134>)
    513e:	4c39      	ldr	r4, [pc, #228]	; (5224 <GROWL_APPSocketEventHandler+0x138>)
    5140:	47a0      	blx	r4
			u8Retry = GROWL_CONNECT_RETRY;
    5142:	2203      	movs	r2, #3
    5144:	4b38      	ldr	r3, [pc, #224]	; (5228 <GROWL_APPSocketEventHandler+0x13c>)
    5146:	701a      	strb	r2, [r3, #0]
    5148:	e05d      	b.n	5206 <GROWL_APPSocketEventHandler+0x11a>
		}
		else
		{
			if((u8Retry--) > 0)
    514a:	4a37      	ldr	r2, [pc, #220]	; (5228 <GROWL_APPSocketEventHandler+0x13c>)
    514c:	7813      	ldrb	r3, [r2, #0]
    514e:	1e59      	subs	r1, r3, #1
    5150:	7011      	strb	r1, [r2, #0]
    5152:	2b00      	cmp	r3, #0
    5154:	d00d      	beq.n	5172 <GROWL_APPSocketEventHandler+0x86>
			{
				M2M_DBG("Retry %s\n",(u8ClientID == NMA_CLIENT) ? "NMA" : "PROWL");
				if (u8ClientID == NMA_CLIENT)
    5156:	2e02      	cmp	r6, #2
    5158:	d104      	bne.n	5164 <GROWL_APPSocketEventHandler+0x78>
					AppServerCb((uint8*)NMA_DOMAIN_NAME, pstrNotification->u32ServerIPAddress);
    515a:	6839      	ldr	r1, [r7, #0]
    515c:	4833      	ldr	r0, [pc, #204]	; (522c <GROWL_APPSocketEventHandler+0x140>)
    515e:	4b34      	ldr	r3, [pc, #208]	; (5230 <GROWL_APPSocketEventHandler+0x144>)
    5160:	4798      	blx	r3
    5162:	e050      	b.n	5206 <GROWL_APPSocketEventHandler+0x11a>
				else if (u8ClientID == PROWL_CLIENT)
    5164:	2e01      	cmp	r6, #1
    5166:	d14e      	bne.n	5206 <GROWL_APPSocketEventHandler+0x11a>
					AppServerCb((uint8*)PROWL_DOMAIN_NAME, pstrNotification->u32ServerIPAddress);
    5168:	6839      	ldr	r1, [r7, #0]
    516a:	4832      	ldr	r0, [pc, #200]	; (5234 <GROWL_APPSocketEventHandler+0x148>)
    516c:	4b30      	ldr	r3, [pc, #192]	; (5230 <GROWL_APPSocketEventHandler+0x144>)
    516e:	4798      	blx	r3
    5170:	e049      	b.n	5206 <GROWL_APPSocketEventHandler+0x11a>
			}
			else
			{
				M2M_DBG("%s Connection Failed\n",(u8ClientID == NMA_CLIENT) ? "NMA" : "PROWL");
				close(pstrNotification->Socket);
    5172:	2006      	movs	r0, #6
    5174:	5638      	ldrsb	r0, [r7, r0]
    5176:	4b30      	ldr	r3, [pc, #192]	; (5238 <GROWL_APPSocketEventHandler+0x14c>)
    5178:	4798      	blx	r3
				pstrNotification->Socket = 0xFF;
    517a:	23ff      	movs	r3, #255	; 0xff
    517c:	71bb      	strb	r3, [r7, #6]
				pstrNotification->u8State = GROWL_STATE_IDLE;
    517e:	2300      	movs	r3, #0
    5180:	71fb      	strb	r3, [r7, #7]
				GrowlCb(GROWL_ERR_CONN_FAILED,u8ClientID);
    5182:	0031      	movs	r1, r6
    5184:	200a      	movs	r0, #10
    5186:	4b2d      	ldr	r3, [pc, #180]	; (523c <GROWL_APPSocketEventHandler+0x150>)
    5188:	4798      	blx	r3
				u8Retry = GROWL_CONNECT_RETRY;
    518a:	2203      	movs	r2, #3
    518c:	4b26      	ldr	r3, [pc, #152]	; (5228 <GROWL_APPSocketEventHandler+0x13c>)
    518e:	701a      	strb	r2, [r3, #0]
    5190:	e039      	b.n	5206 <GROWL_APPSocketEventHandler+0x11a>
			}
		}
	}
	else if(u8Msg == SOCKET_MSG_RECV)
    5192:	2906      	cmp	r1, #6
    5194:	d125      	bne.n	51e2 <GROWL_APPSocketEventHandler+0xf6>
	{
		tstrSocketRecvMsg		*pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
		static uint8			u8Error = 0xFF;
		uint8				    u8Reset = 1;

		if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
    5196:	6828      	ldr	r0, [r5, #0]
    5198:	2800      	cmp	r0, #0
    519a:	d00c      	beq.n	51b6 <GROWL_APPSocketEventHandler+0xca>
    519c:	2304      	movs	r3, #4
    519e:	5ee9      	ldrsh	r1, [r5, r3]
    51a0:	2900      	cmp	r1, #0
    51a2:	dd0f      	ble.n	51c4 <GROWL_APPSocketEventHandler+0xd8>
		{
			if(u8Error == 0xFF)
    51a4:	4b26      	ldr	r3, [pc, #152]	; (5240 <GROWL_APPSocketEventHandler+0x154>)
    51a6:	781b      	ldrb	r3, [r3, #0]
    51a8:	2bff      	cmp	r3, #255	; 0xff
    51aa:	d108      	bne.n	51be <GROWL_APPSocketEventHandler+0xd2>
			{
				u8Error = GetResponseCode(pstrRecvMsg->pu8Buffer,pstrRecvMsg->s16BufferSize);
    51ac:	b289      	uxth	r1, r1
    51ae:	4b25      	ldr	r3, [pc, #148]	; (5244 <GROWL_APPSocketEventHandler+0x158>)
    51b0:	4798      	blx	r3
    51b2:	4b23      	ldr	r3, [pc, #140]	; (5240 <GROWL_APPSocketEventHandler+0x154>)
    51b4:	7018      	strb	r0, [r3, #0]
			}
		}
		if((pstrRecvMsg->s16BufferSize > 0) && (pstrRecvMsg->u16RemainingSize != 0))
    51b6:	2204      	movs	r2, #4
    51b8:	5eab      	ldrsh	r3, [r5, r2]
    51ba:	2b00      	cmp	r3, #0
    51bc:	dd02      	ble.n	51c4 <GROWL_APPSocketEventHandler+0xd8>
		{
			u8Reset = 0;
		}
		if(u8Reset)
    51be:	88eb      	ldrh	r3, [r5, #6]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d120      	bne.n	5206 <GROWL_APPSocketEventHandler+0x11a>
		{
			close(pstrNotification->Socket);
    51c4:	2006      	movs	r0, #6
    51c6:	5638      	ldrsb	r0, [r7, r0]
    51c8:	4b1b      	ldr	r3, [pc, #108]	; (5238 <GROWL_APPSocketEventHandler+0x14c>)
    51ca:	4798      	blx	r3
			pstrNotification->Socket	= 0xFF;
    51cc:	25ff      	movs	r5, #255	; 0xff
    51ce:	71bd      	strb	r5, [r7, #6]
			pstrNotification->u8State	= GROWL_STATE_IDLE;
    51d0:	2300      	movs	r3, #0
    51d2:	71fb      	strb	r3, [r7, #7]
			GrowlCb(u8Error,u8ClientID);
    51d4:	4c1a      	ldr	r4, [pc, #104]	; (5240 <GROWL_APPSocketEventHandler+0x154>)
    51d6:	7820      	ldrb	r0, [r4, #0]
    51d8:	0031      	movs	r1, r6
    51da:	4b18      	ldr	r3, [pc, #96]	; (523c <GROWL_APPSocketEventHandler+0x150>)
    51dc:	4798      	blx	r3
			u8Error = 0xFF;
    51de:	7025      	strb	r5, [r4, #0]
    51e0:	e011      	b.n	5206 <GROWL_APPSocketEventHandler+0x11a>
		}
	}
	else if(u8Msg == SOCKET_MSG_SEND)
    51e2:	2907      	cmp	r1, #7
    51e4:	d10f      	bne.n	5206 <GROWL_APPSocketEventHandler+0x11a>
	{
		sint16	s16Sent = *((sint16*)pvMsg);
    51e6:	2300      	movs	r3, #0
    51e8:	5eec      	ldrsh	r4, [r5, r3]
		if(s16Sent <= 0)
    51ea:	2c00      	cmp	r4, #0
    51ec:	dc0b      	bgt.n	5206 <GROWL_APPSocketEventHandler+0x11a>
		{
			M2M_ERR("GROWL Send Error %d\n",s16Sent);
    51ee:	22d4      	movs	r2, #212	; 0xd4
    51f0:	0052      	lsls	r2, r2, #1
    51f2:	4915      	ldr	r1, [pc, #84]	; (5248 <GROWL_APPSocketEventHandler+0x15c>)
    51f4:	4815      	ldr	r0, [pc, #84]	; (524c <GROWL_APPSocketEventHandler+0x160>)
    51f6:	4d16      	ldr	r5, [pc, #88]	; (5250 <GROWL_APPSocketEventHandler+0x164>)
    51f8:	47a8      	blx	r5
    51fa:	0021      	movs	r1, r4
    51fc:	4815      	ldr	r0, [pc, #84]	; (5254 <GROWL_APPSocketEventHandler+0x168>)
    51fe:	47a8      	blx	r5
    5200:	200d      	movs	r0, #13
    5202:	4b15      	ldr	r3, [pc, #84]	; (5258 <GROWL_APPSocketEventHandler+0x16c>)
    5204:	4798      	blx	r3
		}
	}
}
    5206:	b041      	add	sp, #260	; 0x104
    5208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	20000114 	.word	0x20000114
    5210:	2000012c 	.word	0x2000012c
    5214:	00004ef9 	.word	0x00004ef9
    5218:	00003011 	.word	0x00003011
    521c:	000061a8 	.word	0x000061a8
    5220:	20000140 	.word	0x20000140
    5224:	000030a9 	.word	0x000030a9
    5228:	20000011 	.word	0x20000011
    522c:	00008158 	.word	0x00008158
    5230:	00004da9 	.word	0x00004da9
    5234:	00008170 	.word	0x00008170
    5238:	0000313d 	.word	0x0000313d
    523c:	00005795 	.word	0x00005795
    5240:	20000013 	.word	0x20000013
    5244:	00005029 	.word	0x00005029
    5248:	000082dc 	.word	0x000082dc
    524c:	000071f4 	.word	0x000071f4
    5250:	00005ced 	.word	0x00005ced
    5254:	00008228 	.word	0x00008228
    5258:	00005d21 	.word	0x00005d21

0000525c <NMI_GrowlInit>:
Version: 1.0

Date:
*********************************************************************/
void NMI_GrowlInit(uint8 *pu8PrwKey,uint8 *pu8NmaKey)
{
    525c:	b570      	push	{r4, r5, r6, lr}
    525e:	0004      	movs	r4, r0
    5260:	000d      	movs	r5, r1
	socketInit();
    5262:	4b18      	ldr	r3, [pc, #96]	; (52c4 <NMI_GrowlInit+0x68>)
    5264:	4798      	blx	r3
	registerSocketCallback(GROWL_APPSocketEventHandler, AppServerCb);
    5266:	4918      	ldr	r1, [pc, #96]	; (52c8 <NMI_GrowlInit+0x6c>)
    5268:	4818      	ldr	r0, [pc, #96]	; (52cc <NMI_GrowlInit+0x70>)
    526a:	4b19      	ldr	r3, [pc, #100]	; (52d0 <NMI_GrowlInit+0x74>)
    526c:	4798      	blx	r3
	if(pu8PrwKey)
    526e:	2c00      	cmp	r4, #0
    5270:	d002      	beq.n	5278 <NMI_GrowlInit+0x1c>
	{
		gau8PrwKey = pu8PrwKey;
    5272:	4b18      	ldr	r3, [pc, #96]	; (52d4 <NMI_GrowlInit+0x78>)
    5274:	601c      	str	r4, [r3, #0]
    5276:	e008      	b.n	528a <NMI_GrowlInit+0x2e>
	}
	else
	{
		M2M_INFO("Prowl key Not Vaild\n");
    5278:	4817      	ldr	r0, [pc, #92]	; (52d8 <NMI_GrowlInit+0x7c>)
    527a:	4b18      	ldr	r3, [pc, #96]	; (52dc <NMI_GrowlInit+0x80>)
    527c:	4798      	blx	r3
    527e:	4818      	ldr	r0, [pc, #96]	; (52e0 <NMI_GrowlInit+0x84>)
    5280:	4b18      	ldr	r3, [pc, #96]	; (52e4 <NMI_GrowlInit+0x88>)
    5282:	4798      	blx	r3
    5284:	200d      	movs	r0, #13
    5286:	4b18      	ldr	r3, [pc, #96]	; (52e8 <NMI_GrowlInit+0x8c>)
    5288:	4798      	blx	r3
	}
	if(pu8NmaKey)
    528a:	2d00      	cmp	r5, #0
    528c:	d002      	beq.n	5294 <NMI_GrowlInit+0x38>
	{

		gau8NmaKey = pu8NmaKey;
    528e:	4b17      	ldr	r3, [pc, #92]	; (52ec <NMI_GrowlInit+0x90>)
    5290:	601d      	str	r5, [r3, #0]
    5292:	e008      	b.n	52a6 <NMI_GrowlInit+0x4a>
	}
	else
	{
		M2M_INFO("NMA key Not Vaild\n");
    5294:	4810      	ldr	r0, [pc, #64]	; (52d8 <NMI_GrowlInit+0x7c>)
    5296:	4b11      	ldr	r3, [pc, #68]	; (52dc <NMI_GrowlInit+0x80>)
    5298:	4798      	blx	r3
    529a:	4815      	ldr	r0, [pc, #84]	; (52f0 <NMI_GrowlInit+0x94>)
    529c:	4b11      	ldr	r3, [pc, #68]	; (52e4 <NMI_GrowlInit+0x88>)
    529e:	4798      	blx	r3
    52a0:	200d      	movs	r0, #13
    52a2:	4b11      	ldr	r3, [pc, #68]	; (52e8 <NMI_GrowlInit+0x8c>)
    52a4:	4798      	blx	r3
	}
	m2m_memset((uint8*)&gstrNotificationProwl, 0, sizeof(tstrNotification));
    52a6:	4d13      	ldr	r5, [pc, #76]	; (52f4 <NMI_GrowlInit+0x98>)
    52a8:	2214      	movs	r2, #20
    52aa:	2100      	movs	r1, #0
    52ac:	0028      	movs	r0, r5
    52ae:	4e12      	ldr	r6, [pc, #72]	; (52f8 <NMI_GrowlInit+0x9c>)
    52b0:	47b0      	blx	r6
	m2m_memset((uint8*)&gstrNotificationNMA, 0, sizeof(tstrNotification));
    52b2:	4c12      	ldr	r4, [pc, #72]	; (52fc <NMI_GrowlInit+0xa0>)
    52b4:	2214      	movs	r2, #20
    52b6:	2100      	movs	r1, #0
    52b8:	0020      	movs	r0, r4
    52ba:	47b0      	blx	r6
	gstrNotificationProwl.Socket = 0xFF;
    52bc:	23ff      	movs	r3, #255	; 0xff
    52be:	71ab      	strb	r3, [r5, #6]
	gstrNotificationNMA.Socket = 0xFF;
    52c0:	71a3      	strb	r3, [r4, #6]
}
    52c2:	bd70      	pop	{r4, r5, r6, pc}
    52c4:	00002e59 	.word	0x00002e59
    52c8:	00004da9 	.word	0x00004da9
    52cc:	000050ed 	.word	0x000050ed
    52d0:	00002e9d 	.word	0x00002e9d
    52d4:	20000110 	.word	0x20000110
    52d8:	000074d4 	.word	0x000074d4
    52dc:	00005ced 	.word	0x00005ced
    52e0:	00008240 	.word	0x00008240
    52e4:	00005e0d 	.word	0x00005e0d
    52e8:	00005d21 	.word	0x00005d21
    52ec:	20000128 	.word	0x20000128
    52f0:	00008254 	.word	0x00008254
    52f4:	2000012c 	.word	0x2000012c
    52f8:	00000985 	.word	0x00000985
    52fc:	20000114 	.word	0x20000114

00005300 <NMI_GrowlSendNotification>:

Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
    5300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5302:	464f      	mov	r7, r9
    5304:	4646      	mov	r6, r8
    5306:	b4c0      	push	{r6, r7}
    5308:	0005      	movs	r5, r0
    530a:	000f      	movs	r7, r1
    530c:	4690      	mov	r8, r2
    530e:	001e      	movs	r6, r3
    5310:	ab08      	add	r3, sp, #32
    5312:	781b      	ldrb	r3, [r3, #0]
    5314:	4699      	mov	r9, r3
	sint8		retVal = 0;
	uint8		u8Flags = 0;

	if((u8ClientName > 0) && (pu8App != NULL) && (pu8Event != NULL) && (pu8Description != NULL))
    5316:	2800      	cmp	r0, #0
    5318:	d100      	bne.n	531c <NMI_GrowlSendNotification+0x1c>
    531a:	e08d      	b.n	5438 <NMI_GrowlSendNotification+0x138>
    531c:	2900      	cmp	r1, #0
    531e:	d100      	bne.n	5322 <NMI_GrowlSendNotification+0x22>
    5320:	e08d      	b.n	543e <NMI_GrowlSendNotification+0x13e>
    5322:	2a00      	cmp	r2, #0
    5324:	d100      	bne.n	5328 <NMI_GrowlSendNotification+0x28>
    5326:	e08d      	b.n	5444 <NMI_GrowlSendNotification+0x144>
    5328:	2e00      	cmp	r6, #0
    532a:	d100      	bne.n	532e <NMI_GrowlSendNotification+0x2e>
    532c:	e08d      	b.n	544a <NMI_GrowlSendNotification+0x14a>
	{
		tstrNotification* pstrNotification;
		if((u8ClientName == NMA_CLIENT))
    532e:	2802      	cmp	r0, #2
    5330:	d110      	bne.n	5354 <NMI_GrowlSendNotification+0x54>
		{
			if(gau8NmaKey == NULL)
    5332:	4b57      	ldr	r3, [pc, #348]	; (5490 <NMI_GrowlSendNotification+0x190>)
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	2b00      	cmp	r3, #0
    5338:	d000      	beq.n	533c <NMI_GrowlSendNotification+0x3c>
    533a:	e09f      	b.n	547c <NMI_GrowlSendNotification+0x17c>
			{
				M2M_INFO("NMA key Not Vaild\n");
    533c:	4855      	ldr	r0, [pc, #340]	; (5494 <NMI_GrowlSendNotification+0x194>)
    533e:	4b56      	ldr	r3, [pc, #344]	; (5498 <NMI_GrowlSendNotification+0x198>)
    5340:	4798      	blx	r3
    5342:	4856      	ldr	r0, [pc, #344]	; (549c <NMI_GrowlSendNotification+0x19c>)
    5344:	4b56      	ldr	r3, [pc, #344]	; (54a0 <NMI_GrowlSendNotification+0x1a0>)
    5346:	4798      	blx	r3
    5348:	200d      	movs	r0, #13
    534a:	4b56      	ldr	r3, [pc, #344]	; (54a4 <NMI_GrowlSendNotification+0x1a4>)
    534c:	4798      	blx	r3
				return -1;
    534e:	2001      	movs	r0, #1
    5350:	4240      	negs	r0, r0
    5352:	e099      	b.n	5488 <NMI_GrowlSendNotification+0x188>
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		}
		else if((u8ClientName == PROWL_CLIENT))
    5354:	2801      	cmp	r0, #1
    5356:	d17b      	bne.n	5450 <NMI_GrowlSendNotification+0x150>
		{
			if(gau8PrwKey == NULL)
    5358:	4b53      	ldr	r3, [pc, #332]	; (54a8 <NMI_GrowlSendNotification+0x1a8>)
    535a:	681b      	ldr	r3, [r3, #0]
    535c:	2b00      	cmp	r3, #0
    535e:	d000      	beq.n	5362 <NMI_GrowlSendNotification+0x62>
    5360:	e080      	b.n	5464 <NMI_GrowlSendNotification+0x164>
			{
				M2M_INFO("Prowl key Not Vaild\n");
    5362:	484c      	ldr	r0, [pc, #304]	; (5494 <NMI_GrowlSendNotification+0x194>)
    5364:	4b4c      	ldr	r3, [pc, #304]	; (5498 <NMI_GrowlSendNotification+0x198>)
    5366:	4798      	blx	r3
    5368:	4850      	ldr	r0, [pc, #320]	; (54ac <NMI_GrowlSendNotification+0x1ac>)
    536a:	4b4d      	ldr	r3, [pc, #308]	; (54a0 <NMI_GrowlSendNotification+0x1a0>)
    536c:	4798      	blx	r3
    536e:	200d      	movs	r0, #13
    5370:	4b4c      	ldr	r3, [pc, #304]	; (54a4 <NMI_GrowlSendNotification+0x1a4>)
    5372:	4798      	blx	r3
				return -1;
    5374:	2001      	movs	r0, #1
    5376:	4240      	negs	r0, r0
    5378:	e086      	b.n	5488 <NMI_GrowlSendNotification+0x188>
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    537a:	4c4d      	ldr	r4, [pc, #308]	; (54b0 <NMI_GrowlSendNotification+0x1b0>)
    537c:	e000      	b.n	5380 <NMI_GrowlSendNotification+0x80>
			if(gau8NmaKey == NULL)
			{
				M2M_INFO("NMA key Not Vaild\n");
				return -1;
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    537e:	4c4d      	ldr	r4, [pc, #308]	; (54b4 <NMI_GrowlSendNotification+0x1b4>)
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
    5380:	0030      	movs	r0, r6
    5382:	4b4d      	ldr	r3, [pc, #308]	; (54b8 <NMI_GrowlSendNotification+0x1b8>)
    5384:	4798      	blx	r3
    5386:	2847      	cmp	r0, #71	; 0x47
    5388:	d83e      	bhi.n	5408 <NMI_GrowlSendNotification+0x108>
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
    538a:	0038      	movs	r0, r7
    538c:	4b4a      	ldr	r3, [pc, #296]	; (54b8 <NMI_GrowlSendNotification+0x1b8>)
    538e:	4798      	blx	r3
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
    5390:	280f      	cmp	r0, #15
    5392:	d839      	bhi.n	5408 <NMI_GrowlSendNotification+0x108>
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
    5394:	4640      	mov	r0, r8
    5396:	4b48      	ldr	r3, [pc, #288]	; (54b8 <NMI_GrowlSendNotification+0x1b8>)
    5398:	4798      	blx	r3
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
    539a:	280f      	cmp	r0, #15
    539c:	d834      	bhi.n	5408 <NMI_GrowlSendNotification+0x108>
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
			{
				pstrNotification->pu8App = pu8App;
    539e:	60a7      	str	r7, [r4, #8]
				pstrNotification->pu8Event = pu8Event;
    53a0:	4643      	mov	r3, r8
    53a2:	60e3      	str	r3, [r4, #12]
				pstrNotification->pu8Msg = pu8Description;
    53a4:	6126      	str	r6, [r4, #16]
				pstrNotification->u16Port = GROWL_HTTP_PORT;

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
    53a6:	464b      	mov	r3, r9
    53a8:	2b00      	cmp	r3, #0
    53aa:	d103      	bne.n	53b4 <NMI_GrowlSendNotification+0xb4>
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
			{
				pstrNotification->pu8App = pu8App;
				pstrNotification->pu8Event = pu8Event;
				pstrNotification->pu8Msg = pu8Description;
				pstrNotification->u16Port = GROWL_HTTP_PORT;
    53ac:	3350      	adds	r3, #80	; 0x50
    53ae:	80a3      	strh	r3, [r4, #4]
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
	sint8		retVal = 0;
	uint8		u8Flags = 0;
    53b0:	2200      	movs	r2, #0
    53b2:	e003      	b.n	53bc <NMI_GrowlSendNotification+0xbc>

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
				{
					u8Flags = SOCKET_FLAGS_SSL;
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
    53b4:	23bc      	movs	r3, #188	; 0xbc
    53b6:	33ff      	adds	r3, #255	; 0xff
    53b8:	80a3      	strh	r3, [r4, #4]
				pstrNotification->u16Port = GROWL_HTTP_PORT;

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
				{
					u8Flags = SOCKET_FLAGS_SSL;
    53ba:	2201      	movs	r2, #1
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
    53bc:	2101      	movs	r1, #1
    53be:	2002      	movs	r0, #2
    53c0:	4b3e      	ldr	r3, [pc, #248]	; (54bc <NMI_GrowlSendNotification+0x1bc>)
    53c2:	4798      	blx	r3
    53c4:	71a0      	strb	r0, [r4, #6]
				if(pstrNotification->Socket >= 0)
    53c6:	2800      	cmp	r0, #0
    53c8:	db10      	blt.n	53ec <NMI_GrowlSendNotification+0xec>
				{
					pstrNotification->u8State = GROWL_STATE_REQ_PENDING;
    53ca:	2301      	movs	r3, #1
    53cc:	71e3      	strb	r3, [r4, #7]
					if(u8ClientName == NMA_CLIENT)
    53ce:	2d02      	cmp	r5, #2
    53d0:	d104      	bne.n	53dc <NMI_GrowlSendNotification+0xdc>
						gethostbyname((uint8*)NMA_DOMAIN_NAME);
    53d2:	483b      	ldr	r0, [pc, #236]	; (54c0 <NMI_GrowlSendNotification+0x1c0>)
    53d4:	4b3b      	ldr	r3, [pc, #236]	; (54c4 <NMI_GrowlSendNotification+0x1c4>)
    53d6:	4798      	blx	r3
Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
	sint8		retVal = 0;
    53d8:	2000      	movs	r0, #0
    53da:	e055      	b.n	5488 <NMI_GrowlSendNotification+0x188>
    53dc:	2000      	movs	r0, #0
				if(pstrNotification->Socket >= 0)
				{
					pstrNotification->u8State = GROWL_STATE_REQ_PENDING;
					if(u8ClientName == NMA_CLIENT)
						gethostbyname((uint8*)NMA_DOMAIN_NAME);
					else if(u8ClientName == PROWL_CLIENT)
    53de:	2d01      	cmp	r5, #1
    53e0:	d152      	bne.n	5488 <NMI_GrowlSendNotification+0x188>
						gethostbyname((uint8*)PROWL_DOMAIN_NAME);
    53e2:	4839      	ldr	r0, [pc, #228]	; (54c8 <NMI_GrowlSendNotification+0x1c8>)
    53e4:	4b37      	ldr	r3, [pc, #220]	; (54c4 <NMI_GrowlSendNotification+0x1c4>)
    53e6:	4798      	blx	r3
Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
	sint8		retVal = 0;
    53e8:	2000      	movs	r0, #0
    53ea:	e04d      	b.n	5488 <NMI_GrowlSendNotification+0x188>
					else if(u8ClientName == PROWL_CLIENT)
						gethostbyname((uint8*)PROWL_DOMAIN_NAME);
				}
				else
				{
					M2M_ERR("No sockets available for the current request\n");
    53ec:	4a37      	ldr	r2, [pc, #220]	; (54cc <NMI_GrowlSendNotification+0x1cc>)
    53ee:	4938      	ldr	r1, [pc, #224]	; (54d0 <NMI_GrowlSendNotification+0x1d0>)
    53f0:	4838      	ldr	r0, [pc, #224]	; (54d4 <NMI_GrowlSendNotification+0x1d4>)
    53f2:	4b29      	ldr	r3, [pc, #164]	; (5498 <NMI_GrowlSendNotification+0x198>)
    53f4:	4798      	blx	r3
    53f6:	4838      	ldr	r0, [pc, #224]	; (54d8 <NMI_GrowlSendNotification+0x1d8>)
    53f8:	4b29      	ldr	r3, [pc, #164]	; (54a0 <NMI_GrowlSendNotification+0x1a0>)
    53fa:	4798      	blx	r3
    53fc:	200d      	movs	r0, #13
    53fe:	4b29      	ldr	r3, [pc, #164]	; (54a4 <NMI_GrowlSendNotification+0x1a4>)
    5400:	4798      	blx	r3
					retVal = -1;
    5402:	2001      	movs	r0, #1
    5404:	4240      	negs	r0, r0
    5406:	e03f      	b.n	5488 <NMI_GrowlSendNotification+0x188>
				}
			}
			else
			{
				M2M_ERR("Msg size is too long\n");
    5408:	229d      	movs	r2, #157	; 0x9d
    540a:	0092      	lsls	r2, r2, #2
    540c:	4930      	ldr	r1, [pc, #192]	; (54d0 <NMI_GrowlSendNotification+0x1d0>)
    540e:	4831      	ldr	r0, [pc, #196]	; (54d4 <NMI_GrowlSendNotification+0x1d4>)
    5410:	4b21      	ldr	r3, [pc, #132]	; (5498 <NMI_GrowlSendNotification+0x198>)
    5412:	4798      	blx	r3
    5414:	4831      	ldr	r0, [pc, #196]	; (54dc <NMI_GrowlSendNotification+0x1dc>)
    5416:	4b22      	ldr	r3, [pc, #136]	; (54a0 <NMI_GrowlSendNotification+0x1a0>)
    5418:	4798      	blx	r3
    541a:	200d      	movs	r0, #13
    541c:	4b21      	ldr	r3, [pc, #132]	; (54a4 <NMI_GrowlSendNotification+0x1a4>)
    541e:	4798      	blx	r3
				retVal = -1;
    5420:	2001      	movs	r0, #1
    5422:	4240      	negs	r0, r0
    5424:	e030      	b.n	5488 <NMI_GrowlSendNotification+0x188>
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    5426:	482e      	ldr	r0, [pc, #184]	; (54e0 <NMI_GrowlSendNotification+0x1e0>)
    5428:	4b1b      	ldr	r3, [pc, #108]	; (5498 <NMI_GrowlSendNotification+0x198>)
    542a:	4798      	blx	r3
    542c:	200d      	movs	r0, #13
    542e:	4b1d      	ldr	r3, [pc, #116]	; (54a4 <NMI_GrowlSendNotification+0x1a4>)
    5430:	4798      	blx	r3
			retVal = -1;
    5432:	2001      	movs	r0, #1
    5434:	4240      	negs	r0, r0
    5436:	e027      	b.n	5488 <NMI_GrowlSendNotification+0x188>
		}
	}
	else
	{
		retVal = -1;
    5438:	2001      	movs	r0, #1
    543a:	4240      	negs	r0, r0
    543c:	e024      	b.n	5488 <NMI_GrowlSendNotification+0x188>
    543e:	2001      	movs	r0, #1
    5440:	4240      	negs	r0, r0
    5442:	e021      	b.n	5488 <NMI_GrowlSendNotification+0x188>
    5444:	2001      	movs	r0, #1
    5446:	4240      	negs	r0, r0
    5448:	e01e      	b.n	5488 <NMI_GrowlSendNotification+0x188>
    544a:	2001      	movs	r0, #1
    544c:	4240      	negs	r0, r0
    544e:	e01b      	b.n	5488 <NMI_GrowlSendNotification+0x188>
				return -1;
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		}
		else
			return M2M_ERR_FAIL;
    5450:	200c      	movs	r0, #12
    5452:	4240      	negs	r0, r0
    5454:	e018      	b.n	5488 <NMI_GrowlSendNotification+0x188>
				retVal = -1;
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    5456:	4a23      	ldr	r2, [pc, #140]	; (54e4 <NMI_GrowlSendNotification+0x1e4>)
    5458:	491d      	ldr	r1, [pc, #116]	; (54d0 <NMI_GrowlSendNotification+0x1d0>)
    545a:	481e      	ldr	r0, [pc, #120]	; (54d4 <NMI_GrowlSendNotification+0x1d4>)
    545c:	4b0e      	ldr	r3, [pc, #56]	; (5498 <NMI_GrowlSendNotification+0x198>)
    545e:	4798      	blx	r3
    5460:	4921      	ldr	r1, [pc, #132]	; (54e8 <NMI_GrowlSendNotification+0x1e8>)
    5462:	e7e0      	b.n	5426 <NMI_GrowlSendNotification+0x126>
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		}
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
    5464:	4b12      	ldr	r3, [pc, #72]	; (54b0 <NMI_GrowlSendNotification+0x1b0>)
    5466:	79db      	ldrb	r3, [r3, #7]
    5468:	2b00      	cmp	r3, #0
    546a:	d086      	beq.n	537a <NMI_GrowlSendNotification+0x7a>
    546c:	e7f3      	b.n	5456 <NMI_GrowlSendNotification+0x156>
				retVal = -1;
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    546e:	4a1d      	ldr	r2, [pc, #116]	; (54e4 <NMI_GrowlSendNotification+0x1e4>)
    5470:	4917      	ldr	r1, [pc, #92]	; (54d0 <NMI_GrowlSendNotification+0x1d0>)
    5472:	4818      	ldr	r0, [pc, #96]	; (54d4 <NMI_GrowlSendNotification+0x1d4>)
    5474:	4b08      	ldr	r3, [pc, #32]	; (5498 <NMI_GrowlSendNotification+0x198>)
    5476:	4798      	blx	r3
    5478:	491c      	ldr	r1, [pc, #112]	; (54ec <NMI_GrowlSendNotification+0x1ec>)
    547a:	e7d4      	b.n	5426 <NMI_GrowlSendNotification+0x126>
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		}
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
    547c:	4b0d      	ldr	r3, [pc, #52]	; (54b4 <NMI_GrowlSendNotification+0x1b4>)
    547e:	79db      	ldrb	r3, [r3, #7]
    5480:	2b00      	cmp	r3, #0
    5482:	d100      	bne.n	5486 <NMI_GrowlSendNotification+0x186>
    5484:	e77b      	b.n	537e <NMI_GrowlSendNotification+0x7e>
    5486:	e7f2      	b.n	546e <NMI_GrowlSendNotification+0x16e>
	else
	{
		retVal = -1;
	}
	return retVal;
}
    5488:	bc0c      	pop	{r2, r3}
    548a:	4690      	mov	r8, r2
    548c:	4699      	mov	r9, r3
    548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5490:	20000128 	.word	0x20000128
    5494:	000074d4 	.word	0x000074d4
    5498:	00005ced 	.word	0x00005ced
    549c:	00008254 	.word	0x00008254
    54a0:	00005e0d 	.word	0x00005e0d
    54a4:	00005d21 	.word	0x00005d21
    54a8:	20000110 	.word	0x20000110
    54ac:	00008240 	.word	0x00008240
    54b0:	2000012c 	.word	0x2000012c
    54b4:	20000114 	.word	0x20000114
    54b8:	00000995 	.word	0x00000995
    54bc:	00002eb1 	.word	0x00002eb1
    54c0:	00008158 	.word	0x00008158
    54c4:	000031b5 	.word	0x000031b5
    54c8:	00008170 	.word	0x00008170
    54cc:	0000026e 	.word	0x0000026e
    54d0:	00008110 	.word	0x00008110
    54d4:	000071f4 	.word	0x000071f4
    54d8:	00008274 	.word	0x00008274
    54dc:	000082a4 	.word	0x000082a4
    54e0:	000082bc 	.word	0x000082bc
    54e4:	0000027a 	.word	0x0000027a
    54e8:	0000826c 	.word	0x0000826c
    54ec:	00008268 	.word	0x00008268

000054f0 <extint_detection_callback>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    54f0:	4b03      	ldr	r3, [pc, #12]	; (5500 <extint_detection_callback+0x10>)
    54f2:	6a1b      	ldr	r3, [r3, #32]
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void extint_detection_callback(void)
{
	pin_state = port_pin_get_input_level(BUTTON_0_PIN);
    54f4:	021b      	lsls	r3, r3, #8
    54f6:	0fdb      	lsrs	r3, r3, #31
    54f8:	4a02      	ldr	r2, [pc, #8]	; (5504 <extint_detection_callback+0x14>)
    54fa:	7013      	strb	r3, [r2, #0]
}
    54fc:	4770      	bx	lr
    54fe:	46c0      	nop			; (mov r8, r8)
    5500:	41004480 	.word	0x41004480
    5504:	20000368 	.word	0x20000368

00005508 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5508:	b570      	push	{r4, r5, r6, lr}
    550a:	b082      	sub	sp, #8
    550c:	0005      	movs	r5, r0
    550e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5510:	2200      	movs	r2, #0
    5512:	466b      	mov	r3, sp
    5514:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5516:	4c06      	ldr	r4, [pc, #24]	; (5530 <usart_serial_getchar+0x28>)
    5518:	466b      	mov	r3, sp
    551a:	1d99      	adds	r1, r3, #6
    551c:	0028      	movs	r0, r5
    551e:	47a0      	blx	r4
    5520:	2800      	cmp	r0, #0
    5522:	d1f9      	bne.n	5518 <usart_serial_getchar+0x10>

	*c = temp;
    5524:	466b      	mov	r3, sp
    5526:	3306      	adds	r3, #6
    5528:	881b      	ldrh	r3, [r3, #0]
    552a:	7033      	strb	r3, [r6, #0]
}
    552c:	b002      	add	sp, #8
    552e:	bd70      	pop	{r4, r5, r6, pc}
    5530:	00004221 	.word	0x00004221

00005534 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    5534:	b570      	push	{r4, r5, r6, lr}
    5536:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5538:	b28c      	uxth	r4, r1
    553a:	4e03      	ldr	r6, [pc, #12]	; (5548 <usart_serial_putchar+0x14>)
    553c:	0021      	movs	r1, r4
    553e:	0028      	movs	r0, r5
    5540:	47b0      	blx	r6
    5542:	2800      	cmp	r0, #0
    5544:	d1fa      	bne.n	553c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    5546:	bd70      	pop	{r4, r5, r6, pc}
    5548:	000041f5 	.word	0x000041f5

0000554c <configure_extint_channel>:

char event_msg_buf[GROWL_DESCRIPTION_MAX_LENGTH + MAX_TIME_STAMP_LEN];

//! [setup]
void configure_extint_channel(void)
{
    554c:	b510      	push	{r4, lr}
    554e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    5550:	ac01      	add	r4, sp, #4
    5552:	0020      	movs	r0, r4
    5554:	4b07      	ldr	r3, [pc, #28]	; (5574 <configure_extint_channel+0x28>)
    5556:	4798      	blx	r3
	config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    5558:	2337      	movs	r3, #55	; 0x37
    555a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    555c:	2300      	movs	r3, #0
    555e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    5560:	3301      	adds	r3, #1
    5562:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    5564:	3302      	adds	r3, #2
    5566:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    5568:	0021      	movs	r1, r4
    556a:	2007      	movs	r0, #7
    556c:	4b02      	ldr	r3, [pc, #8]	; (5578 <configure_extint_channel+0x2c>)
    556e:	4798      	blx	r3
}
    5570:	b004      	add	sp, #16
    5572:	bd10      	pop	{r4, pc}
    5574:	000034dd 	.word	0x000034dd
    5578:	000034f1 	.word	0x000034f1

0000557c <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
    557c:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    557e:	2200      	movs	r2, #0
    5580:	2107      	movs	r1, #7
    5582:	4804      	ldr	r0, [pc, #16]	; (5594 <configure_extint_callbacks+0x18>)
    5584:	4b04      	ldr	r3, [pc, #16]	; (5598 <configure_extint_callbacks+0x1c>)
    5586:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5588:	2100      	movs	r1, #0
    558a:	2007      	movs	r0, #7
    558c:	4b03      	ldr	r3, [pc, #12]	; (559c <configure_extint_callbacks+0x20>)
    558e:	4798      	blx	r3
}
    5590:	bd10      	pop	{r4, pc}
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	000054f1 	.word	0x000054f1
    5598:	00003385 	.word	0x00003385
    559c:	000033b1 	.word	0x000033b1

000055a0 <ConvertSeconds2Timestamp>:
	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}

void ConvertSeconds2Timestamp(uint32 seconds, timestamp_t* my_time)
{
    55a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55a2:	0007      	movs	r7, r0
    55a4:	000c      	movs	r4, r1
	uint32 remainder;
	my_time->days = seconds / (60 * 60 * 24);
    55a6:	4e0e      	ldr	r6, [pc, #56]	; (55e0 <ConvertSeconds2Timestamp+0x40>)
    55a8:	490e      	ldr	r1, [pc, #56]	; (55e4 <ConvertSeconds2Timestamp+0x44>)
    55aa:	47b0      	blx	r6
    55ac:	6020      	str	r0, [r4, #0]
	remainder = seconds % (60 * 60 * 24); //remainder of hours
    55ae:	4d0e      	ldr	r5, [pc, #56]	; (55e8 <ConvertSeconds2Timestamp+0x48>)
    55b0:	490c      	ldr	r1, [pc, #48]	; (55e4 <ConvertSeconds2Timestamp+0x44>)
    55b2:	0038      	movs	r0, r7
    55b4:	47a8      	blx	r5
    55b6:	000f      	movs	r7, r1
	my_time->hours = remainder / (60 * 60);
    55b8:	21e1      	movs	r1, #225	; 0xe1
    55ba:	0109      	lsls	r1, r1, #4
    55bc:	0038      	movs	r0, r7
    55be:	47b0      	blx	r6
    55c0:	6060      	str	r0, [r4, #4]
	remainder = remainder % (60 * 60); //remainder of minutes
    55c2:	21e1      	movs	r1, #225	; 0xe1
    55c4:	0109      	lsls	r1, r1, #4
    55c6:	0038      	movs	r0, r7
    55c8:	47a8      	blx	r5
    55ca:	000f      	movs	r7, r1
	my_time->minutes = remainder / 60;
    55cc:	213c      	movs	r1, #60	; 0x3c
    55ce:	0038      	movs	r0, r7
    55d0:	47b0      	blx	r6
    55d2:	60a0      	str	r0, [r4, #8]
	my_time->seconds = remainder % 60;
    55d4:	213c      	movs	r1, #60	; 0x3c
    55d6:	0038      	movs	r0, r7
    55d8:	47a8      	blx	r5
    55da:	60e1      	str	r1, [r4, #12]
}
    55dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	00005b0d 	.word	0x00005b0d
    55e4:	00015180 	.word	0x00015180
    55e8:	00005c19 	.word	0x00005c19

000055ec <growl_send_message_handler>:

/**
 * \brief Send a specific notification to a registered Android(NMA) or IOS(PROWL)
 */
int growl_send_message_handler(const char* app_name, const char* event_name, const char* event_msg)
{
    55ec:	b570      	push	{r4, r5, r6, lr}
    55ee:	b082      	sub	sp, #8
    55f0:	0005      	movs	r5, r0
    55f2:	000e      	movs	r6, r1
    55f4:	0014      	movs	r4, r2
	printf("Sending Prowl: %s => ", event_msg);
    55f6:	0011      	movs	r1, r2
    55f8:	4808      	ldr	r0, [pc, #32]	; (561c <growl_send_message_handler+0x30>)
    55fa:	4b09      	ldr	r3, [pc, #36]	; (5620 <growl_send_message_handler+0x34>)
    55fc:	4798      	blx	r3
	growl_msg_tmr = 119;
    55fe:	2277      	movs	r2, #119	; 0x77
    5600:	4b08      	ldr	r3, [pc, #32]	; (5624 <growl_send_message_handler+0x38>)
    5602:	601a      	str	r2, [r3, #0]
	NMI_GrowlSendNotification(PROWL_CLIENT, (uint8*) app_name, (uint8*) event_name, (uint8*) event_msg,PROWL_CONNECTION_TYPE); // send by PROWL */
    5604:	2300      	movs	r3, #0
    5606:	9300      	str	r3, [sp, #0]
    5608:	0023      	movs	r3, r4
    560a:	0032      	movs	r2, r6
    560c:	0029      	movs	r1, r5
    560e:	2001      	movs	r0, #1
    5610:	4c05      	ldr	r4, [pc, #20]	; (5628 <growl_send_message_handler+0x3c>)
    5612:	47a0      	blx	r4
	//NMI_GrowlSendNotification(NMA_CLIENT, (uint8_t *)"Growl_Sample", (uint8_t *)"Growl_Event", (uint8_t *)"growl_test", NMA_CONNECTION_TYPE);           /* send by NMA */
	return 0;
}
    5614:	2000      	movs	r0, #0
    5616:	b002      	add	sp, #8
    5618:	bd70      	pop	{r4, r5, r6, pc}
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	000082f8 	.word	0x000082f8
    5620:	00005ced 	.word	0x00005ced
    5624:	200003cc 	.word	0x200003cc
    5628:	00005301 	.word	0x00005301

0000562c <send_prowl>:
	my_time->minutes = remainder / 60;
	my_time->seconds = remainder % 60;
}

int send_prowl(const char* event_name, const char* event_msg)
{
    562c:	b5f0      	push	{r4, r5, r6, r7, lr}
    562e:	b089      	sub	sp, #36	; 0x24
    5630:	0005      	movs	r5, r0
    5632:	000e      	movs	r6, r1
	timestamp_t time_stamp;
	ConvertSeconds2Timestamp(seconds_alive_cnt, &time_stamp);
    5634:	4b0d      	ldr	r3, [pc, #52]	; (566c <send_prowl+0x40>)
    5636:	6818      	ldr	r0, [r3, #0]
    5638:	a904      	add	r1, sp, #16
    563a:	4b0d      	ldr	r3, [pc, #52]	; (5670 <send_prowl+0x44>)
    563c:	4798      	blx	r3
	sprintf(event_msg_buf, "%01ld:%02ld:%02ld:%02ld ", time_stamp.days, time_stamp.hours, time_stamp.minutes, time_stamp.seconds);
    563e:	9b05      	ldr	r3, [sp, #20]
    5640:	4c0c      	ldr	r4, [pc, #48]	; (5674 <send_prowl+0x48>)
    5642:	9a07      	ldr	r2, [sp, #28]
    5644:	9203      	str	r2, [sp, #12]
    5646:	9201      	str	r2, [sp, #4]
    5648:	9a06      	ldr	r2, [sp, #24]
    564a:	9200      	str	r2, [sp, #0]
    564c:	9a04      	ldr	r2, [sp, #16]
    564e:	490a      	ldr	r1, [pc, #40]	; (5678 <send_prowl+0x4c>)
    5650:	0020      	movs	r0, r4
    5652:	4f0a      	ldr	r7, [pc, #40]	; (567c <send_prowl+0x50>)
    5654:	47b8      	blx	r7
	strcat(event_msg_buf, event_msg);
    5656:	0031      	movs	r1, r6
    5658:	0020      	movs	r0, r4
    565a:	4b09      	ldr	r3, [pc, #36]	; (5680 <send_prowl+0x54>)
    565c:	4798      	blx	r3
	return growl_send_message_handler(app_string, event_name, event_msg_buf); // msg_buffer);
    565e:	0022      	movs	r2, r4
    5660:	0029      	movs	r1, r5
    5662:	4808      	ldr	r0, [pc, #32]	; (5684 <send_prowl+0x58>)
    5664:	4b08      	ldr	r3, [pc, #32]	; (5688 <send_prowl+0x5c>)
    5666:	4798      	blx	r3
}
    5668:	b009      	add	sp, #36	; 0x24
    566a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    566c:	20000370 	.word	0x20000370
    5670:	000055a1 	.word	0x000055a1
    5674:	20000374 	.word	0x20000374
    5678:	00008310 	.word	0x00008310
    567c:	00005f95 	.word	0x00005f95
    5680:	00005fd9 	.word	0x00005fd9
    5684:	000086b8 	.word	0x000086b8
    5688:	000055ed 	.word	0x000055ed

0000568c <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    568c:	b510      	push	{r4, lr}
    568e:	b082      	sub	sp, #8
    5690:	000c      	movs	r4, r1
	switch (u8MsgType) {
    5692:	282c      	cmp	r0, #44	; 0x2c
    5694:	d004      	beq.n	56a0 <wifi_cb+0x14>
    5696:	2832      	cmp	r0, #50	; 0x32
    5698:	d017      	beq.n	56ca <wifi_cb+0x3e>
    569a:	2809      	cmp	r0, #9
    569c:	d14d      	bne.n	573a <wifi_cb+0xae>
    569e:	e031      	b.n	5704 <wifi_cb+0x78>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    56a0:	780b      	ldrb	r3, [r1, #0]
    56a2:	2b01      	cmp	r3, #1
    56a4:	d105      	bne.n	56b2 <wifi_cb+0x26>
			printf("Wi-Fi connected\r\n");
    56a6:	4826      	ldr	r0, [pc, #152]	; (5740 <wifi_cb+0xb4>)
    56a8:	4b26      	ldr	r3, [pc, #152]	; (5744 <wifi_cb+0xb8>)
    56aa:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    56ac:	4b26      	ldr	r3, [pc, #152]	; (5748 <wifi_cb+0xbc>)
    56ae:	4798      	blx	r3
    56b0:	e043      	b.n	573a <wifi_cb+0xae>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    56b2:	2b00      	cmp	r3, #0
    56b4:	d141      	bne.n	573a <wifi_cb+0xae>
			printf("Wi-Fi disconnected - Will try to reconnect in 30 seconds...\r\n");
    56b6:	4825      	ldr	r0, [pc, #148]	; (574c <wifi_cb+0xc0>)
    56b8:	4b22      	ldr	r3, [pc, #136]	; (5744 <wifi_cb+0xb8>)
    56ba:	4798      	blx	r3
			reconnect_tmr = 30;
    56bc:	221e      	movs	r2, #30
    56be:	4b24      	ldr	r3, [pc, #144]	; (5750 <wifi_cb+0xc4>)
    56c0:	601a      	str	r2, [r3, #0]
			connection_state = WIFI_NOT_CONNECTED;
    56c2:	2200      	movs	r2, #0
    56c4:	4b23      	ldr	r3, [pc, #140]	; (5754 <wifi_cb+0xc8>)
    56c6:	701a      	strb	r2, [r3, #0]
    56c8:	e037      	b.n	573a <wifi_cb+0xae>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
    56ca:	788b      	ldrb	r3, [r1, #2]
    56cc:	784a      	ldrb	r2, [r1, #1]
    56ce:	7809      	ldrb	r1, [r1, #0]
    56d0:	78e0      	ldrb	r0, [r4, #3]
    56d2:	9000      	str	r0, [sp, #0]
    56d4:	4820      	ldr	r0, [pc, #128]	; (5758 <wifi_cb+0xcc>)
    56d6:	4c21      	ldr	r4, [pc, #132]	; (575c <wifi_cb+0xd0>)
    56d8:	47a0      	blx	r4
			/** init growl */
			NMI_GrowlInit((uint8_t *)PROWL_API_KEY, (uint8_t *)NMA_API_KEY);
			send_prowl("Status Update", "Connection Established");
		}
#else
		NMI_GrowlInit((uint8_t *)PROWL_API_KEY, (uint8_t *)NMA_API_KEY);
    56da:	4921      	ldr	r1, [pc, #132]	; (5760 <wifi_cb+0xd4>)
    56dc:	4821      	ldr	r0, [pc, #132]	; (5764 <wifi_cb+0xd8>)
    56de:	4b22      	ldr	r3, [pc, #136]	; (5768 <wifi_cb+0xdc>)
    56e0:	4798      	blx	r3
		if(reconnect_cnt)
    56e2:	4b22      	ldr	r3, [pc, #136]	; (576c <wifi_cb+0xe0>)
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d004      	beq.n	56f4 <wifi_cb+0x68>
		{
			send_prowl("Status Update", "Connection Re-established.");
    56ea:	4921      	ldr	r1, [pc, #132]	; (5770 <wifi_cb+0xe4>)
    56ec:	4821      	ldr	r0, [pc, #132]	; (5774 <wifi_cb+0xe8>)
    56ee:	4b22      	ldr	r3, [pc, #136]	; (5778 <wifi_cb+0xec>)
    56f0:	4798      	blx	r3
    56f2:	e003      	b.n	56fc <wifi_cb+0x70>
		}
		else
			send_prowl("Status Update", "Connection Established");
    56f4:	4921      	ldr	r1, [pc, #132]	; (577c <wifi_cb+0xf0>)
    56f6:	481f      	ldr	r0, [pc, #124]	; (5774 <wifi_cb+0xe8>)
    56f8:	4b1f      	ldr	r3, [pc, #124]	; (5778 <wifi_cb+0xec>)
    56fa:	4798      	blx	r3
#endif
		connection_state = WIFI_CONNECTED;
    56fc:	2201      	movs	r2, #1
    56fe:	4b15      	ldr	r3, [pc, #84]	; (5754 <wifi_cb+0xc8>)
    5700:	701a      	strb	r2, [r3, #0]
		break;
    5702:	e01a      	b.n	573a <wifi_cb+0xae>
	}

	case M2M_WIFI_RESP_PROVISION_INFO:
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    5704:	481e      	ldr	r0, [pc, #120]	; (5780 <wifi_cb+0xf4>)
    5706:	4b0f      	ldr	r3, [pc, #60]	; (5744 <wifi_cb+0xb8>)
    5708:	4798      	blx	r3

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    570a:	2363      	movs	r3, #99	; 0x63
    570c:	5ce3      	ldrb	r3, [r4, r3]
    570e:	2b00      	cmp	r3, #0
    5710:	d110      	bne.n	5734 <wifi_cb+0xa8>
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    5712:	0020      	movs	r0, r4
    5714:	4b1b      	ldr	r3, [pc, #108]	; (5784 <wifi_cb+0xf8>)
    5716:	4798      	blx	r3
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    5718:	0023      	movs	r3, r4
    571a:	3321      	adds	r3, #33	; 0x21
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    571c:	2262      	movs	r2, #98	; 0x62
    571e:	5ca2      	ldrb	r2, [r4, r2]
    5720:	b2c1      	uxtb	r1, r0
    5722:	20ff      	movs	r0, #255	; 0xff
    5724:	9000      	str	r0, [sp, #0]
    5726:	0020      	movs	r0, r4
    5728:	4c17      	ldr	r4, [pc, #92]	; (5788 <wifi_cb+0xfc>)
    572a:	47a0      	blx	r4
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
			gbRespProvInfo = true;
    572c:	2201      	movs	r2, #1
    572e:	4b17      	ldr	r3, [pc, #92]	; (578c <wifi_cb+0x100>)
    5730:	701a      	strb	r2, [r3, #0]
    5732:	e002      	b.n	573a <wifi_cb+0xae>
		} else {
			printf("wifi_cb: Provision failed.\r\n");
    5734:	4816      	ldr	r0, [pc, #88]	; (5790 <wifi_cb+0x104>)
    5736:	4b03      	ldr	r3, [pc, #12]	; (5744 <wifi_cb+0xb8>)
    5738:	4798      	blx	r3
	}

	default:
		break;
	}
}
    573a:	b002      	add	sp, #8
    573c:	bd10      	pop	{r4, pc}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	0000832c 	.word	0x0000832c
    5744:	00005e0d 	.word	0x00005e0d
    5748:	000018f1 	.word	0x000018f1
    574c:	00008340 	.word	0x00008340
    5750:	20000364 	.word	0x20000364
    5754:	200003d1 	.word	0x200003d1
    5758:	00008380 	.word	0x00008380
    575c:	00005ced 	.word	0x00005ced
    5760:	000083ac 	.word	0x000083ac
    5764:	000083e0 	.word	0x000083e0
    5768:	0000525d 	.word	0x0000525d
    576c:	2000036c 	.word	0x2000036c
    5770:	0000840c 	.word	0x0000840c
    5774:	00008428 	.word	0x00008428
    5778:	0000562d 	.word	0x0000562d
    577c:	00008438 	.word	0x00008438
    5780:	00008450 	.word	0x00008450
    5784:	00005ff3 	.word	0x00005ff3
    5788:	000018d5 	.word	0x000018d5
    578c:	200001c4 	.word	0x200001c4
    5790:	00008478 	.word	0x00008478

00005794 <GrowlCb>:
 *  - [11] GROWL_ERR_RESOLVE_DNS (@GROWL_ERR_RESOLVE_DNS GROWL_RETRY)
 *  - [12] GROWL_RETRY (@ref GROWL_RETRY)
 *	\param	[u8ClientID] client id returned by the nma server.
 */
void GrowlCb(uint8_t u8Code, uint8_t u8ClientID)
{
    5794:	b510      	push	{r4, lr}
	if(u8Code == 20)
    5796:	2814      	cmp	r0, #20
    5798:	d106      	bne.n	57a8 <GrowlCb+0x14>
		printf("Growl msg sent successfully.\r\n");
    579a:	480a      	ldr	r0, [pc, #40]	; (57c4 <GrowlCb+0x30>)
    579c:	4b0a      	ldr	r3, [pc, #40]	; (57c8 <GrowlCb+0x34>)
    579e:	4798      	blx	r3
	else	
	{
		printf("ERROR: Growl CB Code: %d \r\n", u8Code);
		system_reset();
	}
	growl_msg_tmr = 0; //reset msg timer for growl response
    57a0:	2200      	movs	r2, #0
    57a2:	4b0a      	ldr	r3, [pc, #40]	; (57cc <GrowlCb+0x38>)
    57a4:	601a      	str	r2, [r3, #0]
}
    57a6:	e00b      	b.n	57c0 <GrowlCb+0x2c>
{
	if(u8Code == 20)
		printf("Growl msg sent successfully.\r\n");
	else	
	{
		printf("ERROR: Growl CB Code: %d \r\n", u8Code);
    57a8:	0001      	movs	r1, r0
    57aa:	4809      	ldr	r0, [pc, #36]	; (57d0 <GrowlCb+0x3c>)
    57ac:	4b09      	ldr	r3, [pc, #36]	; (57d4 <GrowlCb+0x40>)
    57ae:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    57b0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    57b4:	4a08      	ldr	r2, [pc, #32]	; (57d8 <GrowlCb+0x44>)
    57b6:	4b09      	ldr	r3, [pc, #36]	; (57dc <GrowlCb+0x48>)
    57b8:	60da      	str	r2, [r3, #12]
    57ba:	f3bf 8f4f 	dsb	sy
    57be:	e7fe      	b.n	57be <GrowlCb+0x2a>
		system_reset();
	}
	growl_msg_tmr = 0; //reset msg timer for growl response
}
    57c0:	bd10      	pop	{r4, pc}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	00008494 	.word	0x00008494
    57c8:	00005e0d 	.word	0x00005e0d
    57cc:	200003cc 	.word	0x200003cc
    57d0:	000084b4 	.word	0x000084b4
    57d4:	00005ced 	.word	0x00005ced
    57d8:	05fa0004 	.word	0x05fa0004
    57dc:	e000ed00 	.word	0xe000ed00

000057e0 <Service_1hr>:

void Service_1hr(void)
{
	static uint32 hour_cntr = 0;
	if(hour_cntr == 0)
    57e0:	4b05      	ldr	r3, [pc, #20]	; (57f8 <Service_1hr+0x18>)
    57e2:	681b      	ldr	r3, [r3, #0]
    57e4:	2b00      	cmp	r3, #0
    57e6:	d102      	bne.n	57ee <Service_1hr+0xe>
	{
		hour_cntr = 23;
    57e8:	2217      	movs	r2, #23
    57ea:	4b03      	ldr	r3, [pc, #12]	; (57f8 <Service_1hr+0x18>)
    57ec:	601a      	str	r2, [r3, #0]
#ifdef HEARTBEAT_ENABLED
		if(connection_state == WIFI_CONNECTED)
			send_prowl("Heartbeat", "24Hr Heartbeat Ping");
#endif
	}
	hour_cntr--;
    57ee:	4a02      	ldr	r2, [pc, #8]	; (57f8 <Service_1hr+0x18>)
    57f0:	6813      	ldr	r3, [r2, #0]
    57f2:	3b01      	subs	r3, #1
    57f4:	6013      	str	r3, [r2, #0]
}
    57f6:	4770      	bx	lr
    57f8:	2000018c 	.word	0x2000018c

000057fc <Service_1s>:

void Service_1s(void)
{
    57fc:	b510      	push	{r4, lr}
    57fe:	b082      	sub	sp, #8
	static uint16 hour_tmr;
	seconds_alive_cnt++;
    5800:	4a15      	ldr	r2, [pc, #84]	; (5858 <Service_1s+0x5c>)
    5802:	6813      	ldr	r3, [r2, #0]
    5804:	3301      	adds	r3, #1
    5806:	6013      	str	r3, [r2, #0]
	
	if(reconnect_tmr > 0)
    5808:	4b14      	ldr	r3, [pc, #80]	; (585c <Service_1s+0x60>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	2b00      	cmp	r3, #0
    580e:	d013      	beq.n	5838 <Service_1s+0x3c>
	{
		reconnect_tmr--;
    5810:	3b01      	subs	r3, #1
    5812:	4a12      	ldr	r2, [pc, #72]	; (585c <Service_1s+0x60>)
    5814:	6013      	str	r3, [r2, #0]
		if(reconnect_tmr == 0)
    5816:	2b00      	cmp	r3, #0
    5818:	d10e      	bne.n	5838 <Service_1s+0x3c>
		{
			reconnect_cnt++;
    581a:	4a11      	ldr	r2, [pc, #68]	; (5860 <Service_1s+0x64>)
    581c:	6813      	ldr	r3, [r2, #0]
    581e:	3301      	adds	r3, #1
    5820:	6013      	str	r3, [r2, #0]
			printf("Trying to re-connect.\r\n");
    5822:	4810      	ldr	r0, [pc, #64]	; (5864 <Service_1s+0x68>)
    5824:	4b10      	ldr	r3, [pc, #64]	; (5868 <Service_1s+0x6c>)
    5826:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    5828:	23ff      	movs	r3, #255	; 0xff
    582a:	9300      	str	r3, [sp, #0]
    582c:	4b0f      	ldr	r3, [pc, #60]	; (586c <Service_1s+0x70>)
    582e:	2202      	movs	r2, #2
    5830:	2109      	movs	r1, #9
    5832:	480f      	ldr	r0, [pc, #60]	; (5870 <Service_1s+0x74>)
    5834:	4c0f      	ldr	r4, [pc, #60]	; (5874 <Service_1s+0x78>)
    5836:	47a0      	blx	r4
		}
	}
	
	if(hour_tmr)
    5838:	4b0f      	ldr	r3, [pc, #60]	; (5878 <Service_1s+0x7c>)
    583a:	881b      	ldrh	r3, [r3, #0]
    583c:	2b00      	cmp	r3, #0
    583e:	d003      	beq.n	5848 <Service_1s+0x4c>
	{
		hour_tmr--;
    5840:	3b01      	subs	r3, #1
    5842:	4a0d      	ldr	r2, [pc, #52]	; (5878 <Service_1s+0x7c>)
    5844:	8013      	strh	r3, [r2, #0]
    5846:	e004      	b.n	5852 <Service_1s+0x56>
	}
	else
	{
		hour_tmr = 60 * 60 - 1;
    5848:	4a0c      	ldr	r2, [pc, #48]	; (587c <Service_1s+0x80>)
    584a:	4b0b      	ldr	r3, [pc, #44]	; (5878 <Service_1s+0x7c>)
    584c:	801a      	strh	r2, [r3, #0]
		Service_1hr();
    584e:	4b0c      	ldr	r3, [pc, #48]	; (5880 <Service_1s+0x84>)
    5850:	4798      	blx	r3
	}
}
    5852:	b002      	add	sp, #8
    5854:	bd10      	pop	{r4, pc}
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	20000370 	.word	0x20000370
    585c:	20000364 	.word	0x20000364
    5860:	2000036c 	.word	0x2000036c
    5864:	000084d0 	.word	0x000084d0
    5868:	00005e0d 	.word	0x00005e0d
    586c:	000084e8 	.word	0x000084e8
    5870:	000084f4 	.word	0x000084f4
    5874:	000018d5 	.word	0x000018d5
    5878:	2000018a 	.word	0x2000018a
    587c:	00000e0f 	.word	0x00000e0f
    5880:	000057e1 	.word	0x000057e1

00005884 <TimerCallback>:

void TimerCallback(void) //called every .25s
{
    5884:	b510      	push	{r4, lr}
	static uint8_t second_tmr;
	if(second_tmr)
    5886:	4b15      	ldr	r3, [pc, #84]	; (58dc <TimerCallback+0x58>)
    5888:	781b      	ldrb	r3, [r3, #0]
    588a:	2b00      	cmp	r3, #0
    588c:	d003      	beq.n	5896 <TimerCallback+0x12>
	{
		second_tmr--;
    588e:	3b01      	subs	r3, #1
    5890:	4a12      	ldr	r2, [pc, #72]	; (58dc <TimerCallback+0x58>)
    5892:	7013      	strb	r3, [r2, #0]
    5894:	e005      	b.n	58a2 <TimerCallback+0x1e>
	}
	else
	{
		second_tmr = 3;
    5896:	2203      	movs	r2, #3
    5898:	4b10      	ldr	r3, [pc, #64]	; (58dc <TimerCallback+0x58>)
    589a:	701a      	strb	r2, [r3, #0]
		service_1s_flag = 1; //let main thread know to call Service1s()	
    589c:	3a02      	subs	r2, #2
    589e:	4b10      	ldr	r3, [pc, #64]	; (58e0 <TimerCallback+0x5c>)
    58a0:	701a      	strb	r2, [r3, #0]
	}
	//Place any code that needs to be serviced at this interval here:
	if(growl_msg_tmr)
    58a2:	4b10      	ldr	r3, [pc, #64]	; (58e4 <TimerCallback+0x60>)
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d016      	beq.n	58d8 <TimerCallback+0x54>
	{
		growl_msg_tmr--;
    58aa:	3b01      	subs	r3, #1
    58ac:	4a0d      	ldr	r2, [pc, #52]	; (58e4 <TimerCallback+0x60>)
    58ae:	6013      	str	r3, [r2, #0]
		putchar('.');
    58b0:	4b0d      	ldr	r3, [pc, #52]	; (58e8 <TimerCallback+0x64>)
    58b2:	6818      	ldr	r0, [r3, #0]
    58b4:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    58b6:	6893      	ldr	r3, [r2, #8]
    58b8:	3b01      	subs	r3, #1
    58ba:	6093      	str	r3, [r2, #8]
    58bc:	2b00      	cmp	r3, #0
    58be:	da02      	bge.n	58c6 <TimerCallback+0x42>
    58c0:	6991      	ldr	r1, [r2, #24]
    58c2:	428b      	cmp	r3, r1
    58c4:	db05      	blt.n	58d2 <TimerCallback+0x4e>
		return (*_p->_p++ = _c);
    58c6:	6813      	ldr	r3, [r2, #0]
    58c8:	1c59      	adds	r1, r3, #1
    58ca:	6011      	str	r1, [r2, #0]
    58cc:	222e      	movs	r2, #46	; 0x2e
    58ce:	701a      	strb	r2, [r3, #0]
    58d0:	e002      	b.n	58d8 <TimerCallback+0x54>
	else
		return (__swbuf_r(_ptr, _c, _p));
    58d2:	212e      	movs	r1, #46	; 0x2e
    58d4:	4b05      	ldr	r3, [pc, #20]	; (58ec <TimerCallback+0x68>)
    58d6:	4798      	blx	r3
	}
}
    58d8:	bd10      	pop	{r4, pc}
    58da:	46c0      	nop			; (mov r8, r8)
    58dc:	20000188 	.word	0x20000188
    58e0:	200003d0 	.word	0x200003d0
    58e4:	200003cc 	.word	0x200003cc
    58e8:	20000074 	.word	0x20000074
    58ec:	00006001 	.word	0x00006001

000058f0 <main>:
 * \brief Main application function.
 *
 * \return program return value.
 */
int main(void)
{
    58f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58f2:	4647      	mov	r7, r8
    58f4:	b480      	push	{r7}
    58f6:	b098      	sub	sp, #96	; 0x60
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
#endif

	/* Initialize the board. */
	system_init();
    58f8:	4b5a      	ldr	r3, [pc, #360]	; (5a64 <main+0x174>)
    58fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    58fc:	aa02      	add	r2, sp, #8
    58fe:	2380      	movs	r3, #128	; 0x80
    5900:	05db      	lsls	r3, r3, #23
    5902:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5904:	2300      	movs	r3, #0
    5906:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    5908:	21ff      	movs	r1, #255	; 0xff
    590a:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    590c:	2100      	movs	r1, #0
    590e:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5910:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5912:	2401      	movs	r4, #1
    5914:	2024      	movs	r0, #36	; 0x24
    5916:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    5918:	3001      	adds	r0, #1
    591a:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    591c:	3001      	adds	r0, #1
    591e:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    5920:	3001      	adds	r0, #1
    5922:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    5924:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5926:	3005      	adds	r0, #5
    5928:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    592a:	3001      	adds	r0, #1
    592c:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    592e:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5930:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5932:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5934:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5936:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5938:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    593a:	2313      	movs	r3, #19
    593c:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    593e:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5940:	23c4      	movs	r3, #196	; 0xc4
    5942:	039b      	lsls	r3, r3, #14
    5944:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5946:	2301      	movs	r3, #1
    5948:	425b      	negs	r3, r3
    594a:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    594c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    594e:	4b46      	ldr	r3, [pc, #280]	; (5a68 <main+0x178>)
    5950:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5952:	4b46      	ldr	r3, [pc, #280]	; (5a6c <main+0x17c>)
    5954:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    5956:	23e1      	movs	r3, #225	; 0xe1
    5958:	025b      	lsls	r3, r3, #9
    595a:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    595c:	4d44      	ldr	r5, [pc, #272]	; (5a70 <main+0x180>)
    595e:	4b45      	ldr	r3, [pc, #276]	; (5a74 <main+0x184>)
    5960:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5962:	4945      	ldr	r1, [pc, #276]	; (5a78 <main+0x188>)
    5964:	4b45      	ldr	r3, [pc, #276]	; (5a7c <main+0x18c>)
    5966:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5968:	4945      	ldr	r1, [pc, #276]	; (5a80 <main+0x190>)
    596a:	4b46      	ldr	r3, [pc, #280]	; (5a84 <main+0x194>)
    596c:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    596e:	4946      	ldr	r1, [pc, #280]	; (5a88 <main+0x198>)
    5970:	0028      	movs	r0, r5
    5972:	4b46      	ldr	r3, [pc, #280]	; (5a8c <main+0x19c>)
    5974:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5976:	4f46      	ldr	r7, [pc, #280]	; (5a90 <main+0x1a0>)
    5978:	683b      	ldr	r3, [r7, #0]
    597a:	6898      	ldr	r0, [r3, #8]
    597c:	2100      	movs	r1, #0
    597e:	4e45      	ldr	r6, [pc, #276]	; (5a94 <main+0x1a4>)
    5980:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5982:	683b      	ldr	r3, [r7, #0]
    5984:	6858      	ldr	r0, [r3, #4]
    5986:	2100      	movs	r1, #0
    5988:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    598a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    598c:	0030      	movs	r0, r6
    598e:	4b42      	ldr	r3, [pc, #264]	; (5a98 <main+0x1a8>)
    5990:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5992:	231f      	movs	r3, #31
    5994:	4018      	ands	r0, r3
    5996:	4084      	lsls	r4, r0
    5998:	4b40      	ldr	r3, [pc, #256]	; (5a9c <main+0x1ac>)
    599a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    599c:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    599e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    59a0:	2a00      	cmp	r2, #0
    59a2:	d1fc      	bne.n	599e <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    59a4:	6832      	ldr	r2, [r6, #0]
    59a6:	2302      	movs	r3, #2
    59a8:	4313      	orrs	r3, r2
    59aa:	6033      	str	r3, [r6, #0]
	/* Initialize the board. */
	system_init();

	/* Initialize the UART console. */
	configure_console();
	printf(PROWLER_STR);
    59ac:	483c      	ldr	r0, [pc, #240]	; (5aa0 <main+0x1b0>)
    59ae:	4c3d      	ldr	r4, [pc, #244]	; (5aa4 <main+0x1b4>)
    59b0:	47a0      	blx	r4
	printf(STRING_HEADER);
    59b2:	483d      	ldr	r0, [pc, #244]	; (5aa8 <main+0x1b8>)
    59b4:	47a0      	blx	r4
	
	configure_tc();
    59b6:	4b3d      	ldr	r3, [pc, #244]	; (5aac <main+0x1bc>)
    59b8:	4798      	blx	r3
	configure_tc_callbacks();
    59ba:	4b3d      	ldr	r3, [pc, #244]	; (5ab0 <main+0x1c0>)
    59bc:	4798      	blx	r3
    59be:	4b3d      	ldr	r3, [pc, #244]	; (5ab4 <main+0x1c4>)
    59c0:	6a1e      	ldr	r6, [r3, #32]

	//port_pin_set_output_level(LED0_PIN, 1);
	pin_state = port_pin_get_input_level(BUTTON_0_PIN);
    59c2:	0236      	lsls	r6, r6, #8
    59c4:	0ff6      	lsrs	r6, r6, #31
    59c6:	4b3c      	ldr	r3, [pc, #240]	; (5ab8 <main+0x1c8>)
    59c8:	701e      	strb	r6, [r3, #0]
	prev_pin_state = pin_state;
	//Configure interupt for SW0
	configure_extint_channel();
    59ca:	4b3c      	ldr	r3, [pc, #240]	; (5abc <main+0x1cc>)
    59cc:	4798      	blx	r3
	configure_extint_callbacks();
    59ce:	4b3c      	ldr	r3, [pc, #240]	; (5ac0 <main+0x1d0>)
    59d0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    59d2:	4b3c      	ldr	r3, [pc, #240]	; (5ac4 <main+0x1d4>)
    59d4:	2201      	movs	r2, #1
    59d6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    59d8:	f3bf 8f5f 	dmb	sy
    59dc:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	/* Initialize the BSP. */
	nm_bsp_init();
    59de:	4b3a      	ldr	r3, [pc, #232]	; (5ac8 <main+0x1d8>)
    59e0:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    59e2:	2218      	movs	r2, #24
    59e4:	2100      	movs	r1, #0
    59e6:	a812      	add	r0, sp, #72	; 0x48
    59e8:	4b38      	ldr	r3, [pc, #224]	; (5acc <main+0x1dc>)
    59ea:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    59ec:	4b38      	ldr	r3, [pc, #224]	; (5ad0 <main+0x1e0>)
    59ee:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    59f0:	a812      	add	r0, sp, #72	; 0x48
    59f2:	4b38      	ldr	r3, [pc, #224]	; (5ad4 <main+0x1e4>)
    59f4:	4798      	blx	r3
    59f6:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
    59f8:	d003      	beq.n	5a02 <main+0x112>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    59fa:	4837      	ldr	r0, [pc, #220]	; (5ad8 <main+0x1e8>)
    59fc:	4b37      	ldr	r3, [pc, #220]	; (5adc <main+0x1ec>)
    59fe:	4798      	blx	r3
    5a00:	e7fe      	b.n	5a00 <main+0x110>

	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
	printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
#else
	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    5a02:	23ff      	movs	r3, #255	; 0xff
    5a04:	9300      	str	r3, [sp, #0]
    5a06:	4b36      	ldr	r3, [pc, #216]	; (5ae0 <main+0x1f0>)
    5a08:	2202      	movs	r2, #2
    5a0a:	2109      	movs	r1, #9
    5a0c:	4835      	ldr	r0, [pc, #212]	; (5ae4 <main+0x1f4>)
    5a0e:	4c36      	ldr	r4, [pc, #216]	; (5ae8 <main+0x1f8>)
    5a10:	47a0      	blx	r4
#endif

	while (1) 
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
    5a12:	4c36      	ldr	r4, [pc, #216]	; (5aec <main+0x1fc>)
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
    5a14:	4f28      	ldr	r7, [pc, #160]	; (5ab8 <main+0x1c8>)
    5a16:	4b36      	ldr	r3, [pc, #216]	; (5af0 <main+0x200>)
    5a18:	4698      	mov	r8, r3
#endif

	while (1) 
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
    5a1a:	2000      	movs	r0, #0
    5a1c:	47a0      	blx	r4
    5a1e:	2800      	cmp	r0, #0
    5a20:	d1fb      	bne.n	5a1a <main+0x12a>
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
    5a22:	783d      	ldrb	r5, [r7, #0]
    5a24:	42ae      	cmp	r6, r5
    5a26:	d011      	beq.n	5a4c <main+0x15c>
    5a28:	4643      	mov	r3, r8
    5a2a:	681b      	ldr	r3, [r3, #0]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d10e      	bne.n	5a4e <main+0x15e>
		{
			prev_pin_state = pin_state;
			if(pin_state)
    5a30:	2d00      	cmp	r5, #0
    5a32:	d005      	beq.n	5a40 <main+0x150>
			{
				send_prowl("State Change", "Opened");
    5a34:	492f      	ldr	r1, [pc, #188]	; (5af4 <main+0x204>)
    5a36:	4830      	ldr	r0, [pc, #192]	; (5af8 <main+0x208>)
    5a38:	4b30      	ldr	r3, [pc, #192]	; (5afc <main+0x20c>)
    5a3a:	4798      	blx	r3
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
		{
			prev_pin_state = pin_state;
    5a3c:	002e      	movs	r6, r5
    5a3e:	e006      	b.n	5a4e <main+0x15e>
			{
				send_prowl("State Change", "Opened");
			}
			else
			{
				send_prowl("State Change", "Closed");
    5a40:	492f      	ldr	r1, [pc, #188]	; (5b00 <main+0x210>)
    5a42:	482d      	ldr	r0, [pc, #180]	; (5af8 <main+0x208>)
    5a44:	4b2d      	ldr	r3, [pc, #180]	; (5afc <main+0x20c>)
    5a46:	4798      	blx	r3
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
		{
			prev_pin_state = pin_state;
    5a48:	002e      	movs	r6, r5
    5a4a:	e000      	b.n	5a4e <main+0x15e>
    5a4c:	002e      	movs	r6, r5
			else
			{
				send_prowl("State Change", "Closed");
			}
		}
		if(service_1s_flag)
    5a4e:	4b2d      	ldr	r3, [pc, #180]	; (5b04 <main+0x214>)
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d0e1      	beq.n	5a1a <main+0x12a>
		{
			service_1s_flag = 0;
    5a56:	2200      	movs	r2, #0
    5a58:	4b2a      	ldr	r3, [pc, #168]	; (5b04 <main+0x214>)
    5a5a:	701a      	strb	r2, [r3, #0]
			Service_1s();
    5a5c:	4b2a      	ldr	r3, [pc, #168]	; (5b08 <main+0x218>)
    5a5e:	4798      	blx	r3
    5a60:	e7db      	b.n	5a1a <main+0x12a>
    5a62:	46c0      	nop			; (mov r8, r8)
    5a64:	00004bb1 	.word	0x00004bb1
    5a68:	002a0003 	.word	0x002a0003
    5a6c:	002b0003 	.word	0x002b0003
    5a70:	20000190 	.word	0x20000190
    5a74:	20000360 	.word	0x20000360
    5a78:	00005535 	.word	0x00005535
    5a7c:	2000035c 	.word	0x2000035c
    5a80:	00005509 	.word	0x00005509
    5a84:	20000358 	.word	0x20000358
    5a88:	42001800 	.word	0x42001800
    5a8c:	00003ebd 	.word	0x00003ebd
    5a90:	20000074 	.word	0x20000074
    5a94:	00005e21 	.word	0x00005e21
    5a98:	000039c9 	.word	0x000039c9
    5a9c:	e000e100 	.word	0xe000e100
    5aa0:	00008500 	.word	0x00008500
    5aa4:	00005e0d 	.word	0x00005e0d
    5aa8:	00008614 	.word	0x00008614
    5aac:	000003d5 	.word	0x000003d5
    5ab0:	0000044d 	.word	0x0000044d
    5ab4:	41004480 	.word	0x41004480
    5ab8:	20000368 	.word	0x20000368
    5abc:	0000554d 	.word	0x0000554d
    5ac0:	0000557d 	.word	0x0000557d
    5ac4:	20000010 	.word	0x20000010
    5ac8:	0000061d 	.word	0x0000061d
    5acc:	00005cdb 	.word	0x00005cdb
    5ad0:	0000568d 	.word	0x0000568d
    5ad4:	00001555 	.word	0x00001555
    5ad8:	00008670 	.word	0x00008670
    5adc:	00005ced 	.word	0x00005ced
    5ae0:	000084e8 	.word	0x000084e8
    5ae4:	000084f4 	.word	0x000084f4
    5ae8:	000018d5 	.word	0x000018d5
    5aec:	0000164d 	.word	0x0000164d
    5af0:	200003cc 	.word	0x200003cc
    5af4:	00008698 	.word	0x00008698
    5af8:	000086a0 	.word	0x000086a0
    5afc:	0000562d 	.word	0x0000562d
    5b00:	000086b0 	.word	0x000086b0
    5b04:	200003d0 	.word	0x200003d0
    5b08:	000057fd 	.word	0x000057fd

00005b0c <__aeabi_uidiv>:
    5b0c:	2200      	movs	r2, #0
    5b0e:	0843      	lsrs	r3, r0, #1
    5b10:	428b      	cmp	r3, r1
    5b12:	d374      	bcc.n	5bfe <__aeabi_uidiv+0xf2>
    5b14:	0903      	lsrs	r3, r0, #4
    5b16:	428b      	cmp	r3, r1
    5b18:	d35f      	bcc.n	5bda <__aeabi_uidiv+0xce>
    5b1a:	0a03      	lsrs	r3, r0, #8
    5b1c:	428b      	cmp	r3, r1
    5b1e:	d344      	bcc.n	5baa <__aeabi_uidiv+0x9e>
    5b20:	0b03      	lsrs	r3, r0, #12
    5b22:	428b      	cmp	r3, r1
    5b24:	d328      	bcc.n	5b78 <__aeabi_uidiv+0x6c>
    5b26:	0c03      	lsrs	r3, r0, #16
    5b28:	428b      	cmp	r3, r1
    5b2a:	d30d      	bcc.n	5b48 <__aeabi_uidiv+0x3c>
    5b2c:	22ff      	movs	r2, #255	; 0xff
    5b2e:	0209      	lsls	r1, r1, #8
    5b30:	ba12      	rev	r2, r2
    5b32:	0c03      	lsrs	r3, r0, #16
    5b34:	428b      	cmp	r3, r1
    5b36:	d302      	bcc.n	5b3e <__aeabi_uidiv+0x32>
    5b38:	1212      	asrs	r2, r2, #8
    5b3a:	0209      	lsls	r1, r1, #8
    5b3c:	d065      	beq.n	5c0a <__aeabi_uidiv+0xfe>
    5b3e:	0b03      	lsrs	r3, r0, #12
    5b40:	428b      	cmp	r3, r1
    5b42:	d319      	bcc.n	5b78 <__aeabi_uidiv+0x6c>
    5b44:	e000      	b.n	5b48 <__aeabi_uidiv+0x3c>
    5b46:	0a09      	lsrs	r1, r1, #8
    5b48:	0bc3      	lsrs	r3, r0, #15
    5b4a:	428b      	cmp	r3, r1
    5b4c:	d301      	bcc.n	5b52 <__aeabi_uidiv+0x46>
    5b4e:	03cb      	lsls	r3, r1, #15
    5b50:	1ac0      	subs	r0, r0, r3
    5b52:	4152      	adcs	r2, r2
    5b54:	0b83      	lsrs	r3, r0, #14
    5b56:	428b      	cmp	r3, r1
    5b58:	d301      	bcc.n	5b5e <__aeabi_uidiv+0x52>
    5b5a:	038b      	lsls	r3, r1, #14
    5b5c:	1ac0      	subs	r0, r0, r3
    5b5e:	4152      	adcs	r2, r2
    5b60:	0b43      	lsrs	r3, r0, #13
    5b62:	428b      	cmp	r3, r1
    5b64:	d301      	bcc.n	5b6a <__aeabi_uidiv+0x5e>
    5b66:	034b      	lsls	r3, r1, #13
    5b68:	1ac0      	subs	r0, r0, r3
    5b6a:	4152      	adcs	r2, r2
    5b6c:	0b03      	lsrs	r3, r0, #12
    5b6e:	428b      	cmp	r3, r1
    5b70:	d301      	bcc.n	5b76 <__aeabi_uidiv+0x6a>
    5b72:	030b      	lsls	r3, r1, #12
    5b74:	1ac0      	subs	r0, r0, r3
    5b76:	4152      	adcs	r2, r2
    5b78:	0ac3      	lsrs	r3, r0, #11
    5b7a:	428b      	cmp	r3, r1
    5b7c:	d301      	bcc.n	5b82 <__aeabi_uidiv+0x76>
    5b7e:	02cb      	lsls	r3, r1, #11
    5b80:	1ac0      	subs	r0, r0, r3
    5b82:	4152      	adcs	r2, r2
    5b84:	0a83      	lsrs	r3, r0, #10
    5b86:	428b      	cmp	r3, r1
    5b88:	d301      	bcc.n	5b8e <__aeabi_uidiv+0x82>
    5b8a:	028b      	lsls	r3, r1, #10
    5b8c:	1ac0      	subs	r0, r0, r3
    5b8e:	4152      	adcs	r2, r2
    5b90:	0a43      	lsrs	r3, r0, #9
    5b92:	428b      	cmp	r3, r1
    5b94:	d301      	bcc.n	5b9a <__aeabi_uidiv+0x8e>
    5b96:	024b      	lsls	r3, r1, #9
    5b98:	1ac0      	subs	r0, r0, r3
    5b9a:	4152      	adcs	r2, r2
    5b9c:	0a03      	lsrs	r3, r0, #8
    5b9e:	428b      	cmp	r3, r1
    5ba0:	d301      	bcc.n	5ba6 <__aeabi_uidiv+0x9a>
    5ba2:	020b      	lsls	r3, r1, #8
    5ba4:	1ac0      	subs	r0, r0, r3
    5ba6:	4152      	adcs	r2, r2
    5ba8:	d2cd      	bcs.n	5b46 <__aeabi_uidiv+0x3a>
    5baa:	09c3      	lsrs	r3, r0, #7
    5bac:	428b      	cmp	r3, r1
    5bae:	d301      	bcc.n	5bb4 <__aeabi_uidiv+0xa8>
    5bb0:	01cb      	lsls	r3, r1, #7
    5bb2:	1ac0      	subs	r0, r0, r3
    5bb4:	4152      	adcs	r2, r2
    5bb6:	0983      	lsrs	r3, r0, #6
    5bb8:	428b      	cmp	r3, r1
    5bba:	d301      	bcc.n	5bc0 <__aeabi_uidiv+0xb4>
    5bbc:	018b      	lsls	r3, r1, #6
    5bbe:	1ac0      	subs	r0, r0, r3
    5bc0:	4152      	adcs	r2, r2
    5bc2:	0943      	lsrs	r3, r0, #5
    5bc4:	428b      	cmp	r3, r1
    5bc6:	d301      	bcc.n	5bcc <__aeabi_uidiv+0xc0>
    5bc8:	014b      	lsls	r3, r1, #5
    5bca:	1ac0      	subs	r0, r0, r3
    5bcc:	4152      	adcs	r2, r2
    5bce:	0903      	lsrs	r3, r0, #4
    5bd0:	428b      	cmp	r3, r1
    5bd2:	d301      	bcc.n	5bd8 <__aeabi_uidiv+0xcc>
    5bd4:	010b      	lsls	r3, r1, #4
    5bd6:	1ac0      	subs	r0, r0, r3
    5bd8:	4152      	adcs	r2, r2
    5bda:	08c3      	lsrs	r3, r0, #3
    5bdc:	428b      	cmp	r3, r1
    5bde:	d301      	bcc.n	5be4 <__aeabi_uidiv+0xd8>
    5be0:	00cb      	lsls	r3, r1, #3
    5be2:	1ac0      	subs	r0, r0, r3
    5be4:	4152      	adcs	r2, r2
    5be6:	0883      	lsrs	r3, r0, #2
    5be8:	428b      	cmp	r3, r1
    5bea:	d301      	bcc.n	5bf0 <__aeabi_uidiv+0xe4>
    5bec:	008b      	lsls	r3, r1, #2
    5bee:	1ac0      	subs	r0, r0, r3
    5bf0:	4152      	adcs	r2, r2
    5bf2:	0843      	lsrs	r3, r0, #1
    5bf4:	428b      	cmp	r3, r1
    5bf6:	d301      	bcc.n	5bfc <__aeabi_uidiv+0xf0>
    5bf8:	004b      	lsls	r3, r1, #1
    5bfa:	1ac0      	subs	r0, r0, r3
    5bfc:	4152      	adcs	r2, r2
    5bfe:	1a41      	subs	r1, r0, r1
    5c00:	d200      	bcs.n	5c04 <__aeabi_uidiv+0xf8>
    5c02:	4601      	mov	r1, r0
    5c04:	4152      	adcs	r2, r2
    5c06:	4610      	mov	r0, r2
    5c08:	4770      	bx	lr
    5c0a:	e7ff      	b.n	5c0c <__aeabi_uidiv+0x100>
    5c0c:	b501      	push	{r0, lr}
    5c0e:	2000      	movs	r0, #0
    5c10:	f000 f806 	bl	5c20 <__aeabi_idiv0>
    5c14:	bd02      	pop	{r1, pc}
    5c16:	46c0      	nop			; (mov r8, r8)

00005c18 <__aeabi_uidivmod>:
    5c18:	2900      	cmp	r1, #0
    5c1a:	d0f7      	beq.n	5c0c <__aeabi_uidiv+0x100>
    5c1c:	e776      	b.n	5b0c <__aeabi_uidiv>
    5c1e:	4770      	bx	lr

00005c20 <__aeabi_idiv0>:
    5c20:	4770      	bx	lr
    5c22:	46c0      	nop			; (mov r8, r8)

00005c24 <__aeabi_lmul>:
    5c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c26:	464f      	mov	r7, r9
    5c28:	4646      	mov	r6, r8
    5c2a:	b4c0      	push	{r6, r7}
    5c2c:	0416      	lsls	r6, r2, #16
    5c2e:	0c36      	lsrs	r6, r6, #16
    5c30:	4699      	mov	r9, r3
    5c32:	0033      	movs	r3, r6
    5c34:	0405      	lsls	r5, r0, #16
    5c36:	0c2c      	lsrs	r4, r5, #16
    5c38:	0c07      	lsrs	r7, r0, #16
    5c3a:	0c15      	lsrs	r5, r2, #16
    5c3c:	4363      	muls	r3, r4
    5c3e:	437e      	muls	r6, r7
    5c40:	436f      	muls	r7, r5
    5c42:	4365      	muls	r5, r4
    5c44:	0c1c      	lsrs	r4, r3, #16
    5c46:	19ad      	adds	r5, r5, r6
    5c48:	1964      	adds	r4, r4, r5
    5c4a:	469c      	mov	ip, r3
    5c4c:	42a6      	cmp	r6, r4
    5c4e:	d903      	bls.n	5c58 <__aeabi_lmul+0x34>
    5c50:	2380      	movs	r3, #128	; 0x80
    5c52:	025b      	lsls	r3, r3, #9
    5c54:	4698      	mov	r8, r3
    5c56:	4447      	add	r7, r8
    5c58:	4663      	mov	r3, ip
    5c5a:	0c25      	lsrs	r5, r4, #16
    5c5c:	19ef      	adds	r7, r5, r7
    5c5e:	041d      	lsls	r5, r3, #16
    5c60:	464b      	mov	r3, r9
    5c62:	434a      	muls	r2, r1
    5c64:	4343      	muls	r3, r0
    5c66:	0c2d      	lsrs	r5, r5, #16
    5c68:	0424      	lsls	r4, r4, #16
    5c6a:	1964      	adds	r4, r4, r5
    5c6c:	1899      	adds	r1, r3, r2
    5c6e:	19c9      	adds	r1, r1, r7
    5c70:	0020      	movs	r0, r4
    5c72:	bc0c      	pop	{r2, r3}
    5c74:	4690      	mov	r8, r2
    5c76:	4699      	mov	r9, r3
    5c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7a:	46c0      	nop			; (mov r8, r8)

00005c7c <__libc_init_array>:
    5c7c:	4b0e      	ldr	r3, [pc, #56]	; (5cb8 <__libc_init_array+0x3c>)
    5c7e:	b570      	push	{r4, r5, r6, lr}
    5c80:	2500      	movs	r5, #0
    5c82:	001e      	movs	r6, r3
    5c84:	4c0d      	ldr	r4, [pc, #52]	; (5cbc <__libc_init_array+0x40>)
    5c86:	1ae4      	subs	r4, r4, r3
    5c88:	10a4      	asrs	r4, r4, #2
    5c8a:	42a5      	cmp	r5, r4
    5c8c:	d004      	beq.n	5c98 <__libc_init_array+0x1c>
    5c8e:	00ab      	lsls	r3, r5, #2
    5c90:	58f3      	ldr	r3, [r6, r3]
    5c92:	4798      	blx	r3
    5c94:	3501      	adds	r5, #1
    5c96:	e7f8      	b.n	5c8a <__libc_init_array+0xe>
    5c98:	f002 fd62 	bl	8760 <_init>
    5c9c:	4b08      	ldr	r3, [pc, #32]	; (5cc0 <__libc_init_array+0x44>)
    5c9e:	2500      	movs	r5, #0
    5ca0:	001e      	movs	r6, r3
    5ca2:	4c08      	ldr	r4, [pc, #32]	; (5cc4 <__libc_init_array+0x48>)
    5ca4:	1ae4      	subs	r4, r4, r3
    5ca6:	10a4      	asrs	r4, r4, #2
    5ca8:	42a5      	cmp	r5, r4
    5caa:	d004      	beq.n	5cb6 <__libc_init_array+0x3a>
    5cac:	00ab      	lsls	r3, r5, #2
    5cae:	58f3      	ldr	r3, [r6, r3]
    5cb0:	4798      	blx	r3
    5cb2:	3501      	adds	r5, #1
    5cb4:	e7f8      	b.n	5ca8 <__libc_init_array+0x2c>
    5cb6:	bd70      	pop	{r4, r5, r6, pc}
    5cb8:	0000876c 	.word	0x0000876c
    5cbc:	0000876c 	.word	0x0000876c
    5cc0:	0000876c 	.word	0x0000876c
    5cc4:	00008770 	.word	0x00008770

00005cc8 <memcpy>:
    5cc8:	2300      	movs	r3, #0
    5cca:	b510      	push	{r4, lr}
    5ccc:	429a      	cmp	r2, r3
    5cce:	d003      	beq.n	5cd8 <memcpy+0x10>
    5cd0:	5ccc      	ldrb	r4, [r1, r3]
    5cd2:	54c4      	strb	r4, [r0, r3]
    5cd4:	3301      	adds	r3, #1
    5cd6:	e7f9      	b.n	5ccc <memcpy+0x4>
    5cd8:	bd10      	pop	{r4, pc}

00005cda <memset>:
    5cda:	0003      	movs	r3, r0
    5cdc:	1882      	adds	r2, r0, r2
    5cde:	4293      	cmp	r3, r2
    5ce0:	d002      	beq.n	5ce8 <memset+0xe>
    5ce2:	7019      	strb	r1, [r3, #0]
    5ce4:	3301      	adds	r3, #1
    5ce6:	e7fa      	b.n	5cde <memset+0x4>
    5ce8:	4770      	bx	lr
	...

00005cec <iprintf>:
    5cec:	b40f      	push	{r0, r1, r2, r3}
    5cee:	4b0b      	ldr	r3, [pc, #44]	; (5d1c <iprintf+0x30>)
    5cf0:	b513      	push	{r0, r1, r4, lr}
    5cf2:	681c      	ldr	r4, [r3, #0]
    5cf4:	2c00      	cmp	r4, #0
    5cf6:	d005      	beq.n	5d04 <iprintf+0x18>
    5cf8:	69a3      	ldr	r3, [r4, #24]
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d102      	bne.n	5d04 <iprintf+0x18>
    5cfe:	0020      	movs	r0, r4
    5d00:	f000 fb40 	bl	6384 <__sinit>
    5d04:	ab05      	add	r3, sp, #20
    5d06:	9a04      	ldr	r2, [sp, #16]
    5d08:	68a1      	ldr	r1, [r4, #8]
    5d0a:	0020      	movs	r0, r4
    5d0c:	9301      	str	r3, [sp, #4]
    5d0e:	f000 fe5f 	bl	69d0 <_vfiprintf_r>
    5d12:	bc16      	pop	{r1, r2, r4}
    5d14:	bc08      	pop	{r3}
    5d16:	b004      	add	sp, #16
    5d18:	4718      	bx	r3
    5d1a:	46c0      	nop			; (mov r8, r8)
    5d1c:	20000074 	.word	0x20000074

00005d20 <putchar>:
    5d20:	4b08      	ldr	r3, [pc, #32]	; (5d44 <putchar+0x24>)
    5d22:	b570      	push	{r4, r5, r6, lr}
    5d24:	681c      	ldr	r4, [r3, #0]
    5d26:	0005      	movs	r5, r0
    5d28:	2c00      	cmp	r4, #0
    5d2a:	d005      	beq.n	5d38 <putchar+0x18>
    5d2c:	69a3      	ldr	r3, [r4, #24]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d102      	bne.n	5d38 <putchar+0x18>
    5d32:	0020      	movs	r0, r4
    5d34:	f000 fb26 	bl	6384 <__sinit>
    5d38:	0029      	movs	r1, r5
    5d3a:	68a2      	ldr	r2, [r4, #8]
    5d3c:	0020      	movs	r0, r4
    5d3e:	f001 f8f3 	bl	6f28 <_putc_r>
    5d42:	bd70      	pop	{r4, r5, r6, pc}
    5d44:	20000074 	.word	0x20000074

00005d48 <_puts_r>:
    5d48:	b570      	push	{r4, r5, r6, lr}
    5d4a:	0005      	movs	r5, r0
    5d4c:	000e      	movs	r6, r1
    5d4e:	2800      	cmp	r0, #0
    5d50:	d004      	beq.n	5d5c <_puts_r+0x14>
    5d52:	6983      	ldr	r3, [r0, #24]
    5d54:	2b00      	cmp	r3, #0
    5d56:	d101      	bne.n	5d5c <_puts_r+0x14>
    5d58:	f000 fb14 	bl	6384 <__sinit>
    5d5c:	69ab      	ldr	r3, [r5, #24]
    5d5e:	68ac      	ldr	r4, [r5, #8]
    5d60:	2b00      	cmp	r3, #0
    5d62:	d102      	bne.n	5d6a <_puts_r+0x22>
    5d64:	0028      	movs	r0, r5
    5d66:	f000 fb0d 	bl	6384 <__sinit>
    5d6a:	4b25      	ldr	r3, [pc, #148]	; (5e00 <_puts_r+0xb8>)
    5d6c:	429c      	cmp	r4, r3
    5d6e:	d101      	bne.n	5d74 <_puts_r+0x2c>
    5d70:	686c      	ldr	r4, [r5, #4]
    5d72:	e008      	b.n	5d86 <_puts_r+0x3e>
    5d74:	4b23      	ldr	r3, [pc, #140]	; (5e04 <_puts_r+0xbc>)
    5d76:	429c      	cmp	r4, r3
    5d78:	d101      	bne.n	5d7e <_puts_r+0x36>
    5d7a:	68ac      	ldr	r4, [r5, #8]
    5d7c:	e003      	b.n	5d86 <_puts_r+0x3e>
    5d7e:	4b22      	ldr	r3, [pc, #136]	; (5e08 <_puts_r+0xc0>)
    5d80:	429c      	cmp	r4, r3
    5d82:	d100      	bne.n	5d86 <_puts_r+0x3e>
    5d84:	68ec      	ldr	r4, [r5, #12]
    5d86:	89a3      	ldrh	r3, [r4, #12]
    5d88:	071b      	lsls	r3, r3, #28
    5d8a:	d502      	bpl.n	5d92 <_puts_r+0x4a>
    5d8c:	6923      	ldr	r3, [r4, #16]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d111      	bne.n	5db6 <_puts_r+0x6e>
    5d92:	0021      	movs	r1, r4
    5d94:	0028      	movs	r0, r5
    5d96:	f000 f98b 	bl	60b0 <__swsetup_r>
    5d9a:	2800      	cmp	r0, #0
    5d9c:	d00b      	beq.n	5db6 <_puts_r+0x6e>
    5d9e:	2001      	movs	r0, #1
    5da0:	4240      	negs	r0, r0
    5da2:	e02b      	b.n	5dfc <_puts_r+0xb4>
    5da4:	3b01      	subs	r3, #1
    5da6:	3601      	adds	r6, #1
    5da8:	60a3      	str	r3, [r4, #8]
    5daa:	2b00      	cmp	r3, #0
    5dac:	db08      	blt.n	5dc0 <_puts_r+0x78>
    5dae:	6823      	ldr	r3, [r4, #0]
    5db0:	1c5a      	adds	r2, r3, #1
    5db2:	6022      	str	r2, [r4, #0]
    5db4:	7019      	strb	r1, [r3, #0]
    5db6:	7831      	ldrb	r1, [r6, #0]
    5db8:	68a3      	ldr	r3, [r4, #8]
    5dba:	2900      	cmp	r1, #0
    5dbc:	d1f2      	bne.n	5da4 <_puts_r+0x5c>
    5dbe:	e00b      	b.n	5dd8 <_puts_r+0x90>
    5dc0:	69a2      	ldr	r2, [r4, #24]
    5dc2:	4293      	cmp	r3, r2
    5dc4:	db01      	blt.n	5dca <_puts_r+0x82>
    5dc6:	290a      	cmp	r1, #10
    5dc8:	d1f1      	bne.n	5dae <_puts_r+0x66>
    5dca:	0022      	movs	r2, r4
    5dcc:	0028      	movs	r0, r5
    5dce:	f000 f917 	bl	6000 <__swbuf_r>
    5dd2:	1c43      	adds	r3, r0, #1
    5dd4:	d1ef      	bne.n	5db6 <_puts_r+0x6e>
    5dd6:	e7e2      	b.n	5d9e <_puts_r+0x56>
    5dd8:	3b01      	subs	r3, #1
    5dda:	60a3      	str	r3, [r4, #8]
    5ddc:	2b00      	cmp	r3, #0
    5dde:	da08      	bge.n	5df2 <_puts_r+0xaa>
    5de0:	0022      	movs	r2, r4
    5de2:	310a      	adds	r1, #10
    5de4:	0028      	movs	r0, r5
    5de6:	f000 f90b 	bl	6000 <__swbuf_r>
    5dea:	1c43      	adds	r3, r0, #1
    5dec:	d0d7      	beq.n	5d9e <_puts_r+0x56>
    5dee:	200a      	movs	r0, #10
    5df0:	e004      	b.n	5dfc <_puts_r+0xb4>
    5df2:	200a      	movs	r0, #10
    5df4:	6823      	ldr	r3, [r4, #0]
    5df6:	1c5a      	adds	r2, r3, #1
    5df8:	6022      	str	r2, [r4, #0]
    5dfa:	7018      	strb	r0, [r3, #0]
    5dfc:	bd70      	pop	{r4, r5, r6, pc}
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	000086cc 	.word	0x000086cc
    5e04:	000086ec 	.word	0x000086ec
    5e08:	0000870c 	.word	0x0000870c

00005e0c <puts>:
    5e0c:	b510      	push	{r4, lr}
    5e0e:	4b03      	ldr	r3, [pc, #12]	; (5e1c <puts+0x10>)
    5e10:	0001      	movs	r1, r0
    5e12:	6818      	ldr	r0, [r3, #0]
    5e14:	f7ff ff98 	bl	5d48 <_puts_r>
    5e18:	bd10      	pop	{r4, pc}
    5e1a:	46c0      	nop			; (mov r8, r8)
    5e1c:	20000074 	.word	0x20000074

00005e20 <setbuf>:
    5e20:	424a      	negs	r2, r1
    5e22:	414a      	adcs	r2, r1
    5e24:	2380      	movs	r3, #128	; 0x80
    5e26:	b510      	push	{r4, lr}
    5e28:	0052      	lsls	r2, r2, #1
    5e2a:	00db      	lsls	r3, r3, #3
    5e2c:	f000 f802 	bl	5e34 <setvbuf>
    5e30:	bd10      	pop	{r4, pc}
	...

00005e34 <setvbuf>:
    5e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e36:	001d      	movs	r5, r3
    5e38:	4b51      	ldr	r3, [pc, #324]	; (5f80 <setvbuf+0x14c>)
    5e3a:	b085      	sub	sp, #20
    5e3c:	681e      	ldr	r6, [r3, #0]
    5e3e:	0004      	movs	r4, r0
    5e40:	000f      	movs	r7, r1
    5e42:	9200      	str	r2, [sp, #0]
    5e44:	2e00      	cmp	r6, #0
    5e46:	d005      	beq.n	5e54 <setvbuf+0x20>
    5e48:	69b3      	ldr	r3, [r6, #24]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d102      	bne.n	5e54 <setvbuf+0x20>
    5e4e:	0030      	movs	r0, r6
    5e50:	f000 fa98 	bl	6384 <__sinit>
    5e54:	4b4b      	ldr	r3, [pc, #300]	; (5f84 <setvbuf+0x150>)
    5e56:	429c      	cmp	r4, r3
    5e58:	d101      	bne.n	5e5e <setvbuf+0x2a>
    5e5a:	6874      	ldr	r4, [r6, #4]
    5e5c:	e008      	b.n	5e70 <setvbuf+0x3c>
    5e5e:	4b4a      	ldr	r3, [pc, #296]	; (5f88 <setvbuf+0x154>)
    5e60:	429c      	cmp	r4, r3
    5e62:	d101      	bne.n	5e68 <setvbuf+0x34>
    5e64:	68b4      	ldr	r4, [r6, #8]
    5e66:	e003      	b.n	5e70 <setvbuf+0x3c>
    5e68:	4b48      	ldr	r3, [pc, #288]	; (5f8c <setvbuf+0x158>)
    5e6a:	429c      	cmp	r4, r3
    5e6c:	d100      	bne.n	5e70 <setvbuf+0x3c>
    5e6e:	68f4      	ldr	r4, [r6, #12]
    5e70:	9b00      	ldr	r3, [sp, #0]
    5e72:	2b02      	cmp	r3, #2
    5e74:	d005      	beq.n	5e82 <setvbuf+0x4e>
    5e76:	2b01      	cmp	r3, #1
    5e78:	d900      	bls.n	5e7c <setvbuf+0x48>
    5e7a:	e07c      	b.n	5f76 <setvbuf+0x142>
    5e7c:	2d00      	cmp	r5, #0
    5e7e:	da00      	bge.n	5e82 <setvbuf+0x4e>
    5e80:	e079      	b.n	5f76 <setvbuf+0x142>
    5e82:	0021      	movs	r1, r4
    5e84:	0030      	movs	r0, r6
    5e86:	f000 fa0f 	bl	62a8 <_fflush_r>
    5e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5e8c:	2900      	cmp	r1, #0
    5e8e:	d008      	beq.n	5ea2 <setvbuf+0x6e>
    5e90:	0023      	movs	r3, r4
    5e92:	3344      	adds	r3, #68	; 0x44
    5e94:	4299      	cmp	r1, r3
    5e96:	d002      	beq.n	5e9e <setvbuf+0x6a>
    5e98:	0030      	movs	r0, r6
    5e9a:	f000 fb75 	bl	6588 <_free_r>
    5e9e:	2300      	movs	r3, #0
    5ea0:	6363      	str	r3, [r4, #52]	; 0x34
    5ea2:	2300      	movs	r3, #0
    5ea4:	61a3      	str	r3, [r4, #24]
    5ea6:	6063      	str	r3, [r4, #4]
    5ea8:	89a3      	ldrh	r3, [r4, #12]
    5eaa:	061b      	lsls	r3, r3, #24
    5eac:	d503      	bpl.n	5eb6 <setvbuf+0x82>
    5eae:	6921      	ldr	r1, [r4, #16]
    5eb0:	0030      	movs	r0, r6
    5eb2:	f000 fb69 	bl	6588 <_free_r>
    5eb6:	89a2      	ldrh	r2, [r4, #12]
    5eb8:	4b35      	ldr	r3, [pc, #212]	; (5f90 <setvbuf+0x15c>)
    5eba:	4013      	ands	r3, r2
    5ebc:	81a3      	strh	r3, [r4, #12]
    5ebe:	9b00      	ldr	r3, [sp, #0]
    5ec0:	2b02      	cmp	r3, #2
    5ec2:	d021      	beq.n	5f08 <setvbuf+0xd4>
    5ec4:	ab03      	add	r3, sp, #12
    5ec6:	aa02      	add	r2, sp, #8
    5ec8:	0021      	movs	r1, r4
    5eca:	0030      	movs	r0, r6
    5ecc:	f000 faee 	bl	64ac <__swhatbuf_r>
    5ed0:	89a3      	ldrh	r3, [r4, #12]
    5ed2:	4318      	orrs	r0, r3
    5ed4:	81a0      	strh	r0, [r4, #12]
    5ed6:	2d00      	cmp	r5, #0
    5ed8:	d101      	bne.n	5ede <setvbuf+0xaa>
    5eda:	9d02      	ldr	r5, [sp, #8]
    5edc:	e001      	b.n	5ee2 <setvbuf+0xae>
    5ede:	2f00      	cmp	r7, #0
    5ee0:	d125      	bne.n	5f2e <setvbuf+0xfa>
    5ee2:	0028      	movs	r0, r5
    5ee4:	f000 fb46 	bl	6574 <malloc>
    5ee8:	9501      	str	r5, [sp, #4]
    5eea:	1e07      	subs	r7, r0, #0
    5eec:	d11a      	bne.n	5f24 <setvbuf+0xf0>
    5eee:	9b02      	ldr	r3, [sp, #8]
    5ef0:	9301      	str	r3, [sp, #4]
    5ef2:	42ab      	cmp	r3, r5
    5ef4:	d102      	bne.n	5efc <setvbuf+0xc8>
    5ef6:	2001      	movs	r0, #1
    5ef8:	4240      	negs	r0, r0
    5efa:	e006      	b.n	5f0a <setvbuf+0xd6>
    5efc:	9801      	ldr	r0, [sp, #4]
    5efe:	f000 fb39 	bl	6574 <malloc>
    5f02:	1e07      	subs	r7, r0, #0
    5f04:	d10e      	bne.n	5f24 <setvbuf+0xf0>
    5f06:	e7f6      	b.n	5ef6 <setvbuf+0xc2>
    5f08:	2000      	movs	r0, #0
    5f0a:	2202      	movs	r2, #2
    5f0c:	89a3      	ldrh	r3, [r4, #12]
    5f0e:	4313      	orrs	r3, r2
    5f10:	81a3      	strh	r3, [r4, #12]
    5f12:	2300      	movs	r3, #0
    5f14:	60a3      	str	r3, [r4, #8]
    5f16:	0023      	movs	r3, r4
    5f18:	3347      	adds	r3, #71	; 0x47
    5f1a:	6023      	str	r3, [r4, #0]
    5f1c:	6123      	str	r3, [r4, #16]
    5f1e:	2301      	movs	r3, #1
    5f20:	6163      	str	r3, [r4, #20]
    5f22:	e02a      	b.n	5f7a <setvbuf+0x146>
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	89a3      	ldrh	r3, [r4, #12]
    5f28:	9d01      	ldr	r5, [sp, #4]
    5f2a:	4313      	orrs	r3, r2
    5f2c:	81a3      	strh	r3, [r4, #12]
    5f2e:	69b3      	ldr	r3, [r6, #24]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d102      	bne.n	5f3a <setvbuf+0x106>
    5f34:	0030      	movs	r0, r6
    5f36:	f000 fa25 	bl	6384 <__sinit>
    5f3a:	9b00      	ldr	r3, [sp, #0]
    5f3c:	2b01      	cmp	r3, #1
    5f3e:	d103      	bne.n	5f48 <setvbuf+0x114>
    5f40:	89a3      	ldrh	r3, [r4, #12]
    5f42:	9a00      	ldr	r2, [sp, #0]
    5f44:	431a      	orrs	r2, r3
    5f46:	81a2      	strh	r2, [r4, #12]
    5f48:	2308      	movs	r3, #8
    5f4a:	89a2      	ldrh	r2, [r4, #12]
    5f4c:	6027      	str	r7, [r4, #0]
    5f4e:	4013      	ands	r3, r2
    5f50:	6127      	str	r7, [r4, #16]
    5f52:	6165      	str	r5, [r4, #20]
    5f54:	1e18      	subs	r0, r3, #0
    5f56:	d00c      	beq.n	5f72 <setvbuf+0x13e>
    5f58:	2301      	movs	r3, #1
    5f5a:	401a      	ands	r2, r3
    5f5c:	2300      	movs	r3, #0
    5f5e:	1e10      	subs	r0, r2, #0
    5f60:	4298      	cmp	r0, r3
    5f62:	d004      	beq.n	5f6e <setvbuf+0x13a>
    5f64:	426d      	negs	r5, r5
    5f66:	60a3      	str	r3, [r4, #8]
    5f68:	61a5      	str	r5, [r4, #24]
    5f6a:	0018      	movs	r0, r3
    5f6c:	e005      	b.n	5f7a <setvbuf+0x146>
    5f6e:	60a5      	str	r5, [r4, #8]
    5f70:	e003      	b.n	5f7a <setvbuf+0x146>
    5f72:	60a3      	str	r3, [r4, #8]
    5f74:	e001      	b.n	5f7a <setvbuf+0x146>
    5f76:	2001      	movs	r0, #1
    5f78:	4240      	negs	r0, r0
    5f7a:	b005      	add	sp, #20
    5f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f7e:	46c0      	nop			; (mov r8, r8)
    5f80:	20000074 	.word	0x20000074
    5f84:	000086cc 	.word	0x000086cc
    5f88:	000086ec 	.word	0x000086ec
    5f8c:	0000870c 	.word	0x0000870c
    5f90:	fffff35c 	.word	0xfffff35c

00005f94 <siprintf>:
    5f94:	b40e      	push	{r1, r2, r3}
    5f96:	b510      	push	{r4, lr}
    5f98:	b09d      	sub	sp, #116	; 0x74
    5f9a:	a902      	add	r1, sp, #8
    5f9c:	9002      	str	r0, [sp, #8]
    5f9e:	6108      	str	r0, [r1, #16]
    5fa0:	480b      	ldr	r0, [pc, #44]	; (5fd0 <siprintf+0x3c>)
    5fa2:	2482      	movs	r4, #130	; 0x82
    5fa4:	6088      	str	r0, [r1, #8]
    5fa6:	6148      	str	r0, [r1, #20]
    5fa8:	2001      	movs	r0, #1
    5faa:	4240      	negs	r0, r0
    5fac:	ab1f      	add	r3, sp, #124	; 0x7c
    5fae:	81c8      	strh	r0, [r1, #14]
    5fb0:	4808      	ldr	r0, [pc, #32]	; (5fd4 <siprintf+0x40>)
    5fb2:	cb04      	ldmia	r3!, {r2}
    5fb4:	00a4      	lsls	r4, r4, #2
    5fb6:	6800      	ldr	r0, [r0, #0]
    5fb8:	9301      	str	r3, [sp, #4]
    5fba:	818c      	strh	r4, [r1, #12]
    5fbc:	f000 fbe2 	bl	6784 <_svfiprintf_r>
    5fc0:	2300      	movs	r3, #0
    5fc2:	9a02      	ldr	r2, [sp, #8]
    5fc4:	7013      	strb	r3, [r2, #0]
    5fc6:	b01d      	add	sp, #116	; 0x74
    5fc8:	bc10      	pop	{r4}
    5fca:	bc08      	pop	{r3}
    5fcc:	b003      	add	sp, #12
    5fce:	4718      	bx	r3
    5fd0:	7fffffff 	.word	0x7fffffff
    5fd4:	20000074 	.word	0x20000074

00005fd8 <strcat>:
    5fd8:	0002      	movs	r2, r0
    5fda:	b510      	push	{r4, lr}
    5fdc:	7813      	ldrb	r3, [r2, #0]
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d001      	beq.n	5fe6 <strcat+0xe>
    5fe2:	3201      	adds	r2, #1
    5fe4:	e7fa      	b.n	5fdc <strcat+0x4>
    5fe6:	5ccc      	ldrb	r4, [r1, r3]
    5fe8:	54d4      	strb	r4, [r2, r3]
    5fea:	3301      	adds	r3, #1
    5fec:	2c00      	cmp	r4, #0
    5fee:	d1fa      	bne.n	5fe6 <strcat+0xe>
    5ff0:	bd10      	pop	{r4, pc}

00005ff2 <strlen>:
    5ff2:	2300      	movs	r3, #0
    5ff4:	5cc2      	ldrb	r2, [r0, r3]
    5ff6:	3301      	adds	r3, #1
    5ff8:	2a00      	cmp	r2, #0
    5ffa:	d1fb      	bne.n	5ff4 <strlen+0x2>
    5ffc:	1e58      	subs	r0, r3, #1
    5ffe:	4770      	bx	lr

00006000 <__swbuf_r>:
    6000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6002:	0005      	movs	r5, r0
    6004:	000f      	movs	r7, r1
    6006:	0014      	movs	r4, r2
    6008:	2800      	cmp	r0, #0
    600a:	d004      	beq.n	6016 <__swbuf_r+0x16>
    600c:	6983      	ldr	r3, [r0, #24]
    600e:	2b00      	cmp	r3, #0
    6010:	d101      	bne.n	6016 <__swbuf_r+0x16>
    6012:	f000 f9b7 	bl	6384 <__sinit>
    6016:	4b23      	ldr	r3, [pc, #140]	; (60a4 <__swbuf_r+0xa4>)
    6018:	429c      	cmp	r4, r3
    601a:	d101      	bne.n	6020 <__swbuf_r+0x20>
    601c:	686c      	ldr	r4, [r5, #4]
    601e:	e008      	b.n	6032 <__swbuf_r+0x32>
    6020:	4b21      	ldr	r3, [pc, #132]	; (60a8 <__swbuf_r+0xa8>)
    6022:	429c      	cmp	r4, r3
    6024:	d101      	bne.n	602a <__swbuf_r+0x2a>
    6026:	68ac      	ldr	r4, [r5, #8]
    6028:	e003      	b.n	6032 <__swbuf_r+0x32>
    602a:	4b20      	ldr	r3, [pc, #128]	; (60ac <__swbuf_r+0xac>)
    602c:	429c      	cmp	r4, r3
    602e:	d100      	bne.n	6032 <__swbuf_r+0x32>
    6030:	68ec      	ldr	r4, [r5, #12]
    6032:	69a3      	ldr	r3, [r4, #24]
    6034:	60a3      	str	r3, [r4, #8]
    6036:	89a3      	ldrh	r3, [r4, #12]
    6038:	071b      	lsls	r3, r3, #28
    603a:	d50a      	bpl.n	6052 <__swbuf_r+0x52>
    603c:	6923      	ldr	r3, [r4, #16]
    603e:	2b00      	cmp	r3, #0
    6040:	d007      	beq.n	6052 <__swbuf_r+0x52>
    6042:	6823      	ldr	r3, [r4, #0]
    6044:	6922      	ldr	r2, [r4, #16]
    6046:	b2fe      	uxtb	r6, r7
    6048:	1a98      	subs	r0, r3, r2
    604a:	6963      	ldr	r3, [r4, #20]
    604c:	4298      	cmp	r0, r3
    604e:	db0f      	blt.n	6070 <__swbuf_r+0x70>
    6050:	e008      	b.n	6064 <__swbuf_r+0x64>
    6052:	0021      	movs	r1, r4
    6054:	0028      	movs	r0, r5
    6056:	f000 f82b 	bl	60b0 <__swsetup_r>
    605a:	2800      	cmp	r0, #0
    605c:	d0f1      	beq.n	6042 <__swbuf_r+0x42>
    605e:	2001      	movs	r0, #1
    6060:	4240      	negs	r0, r0
    6062:	e01d      	b.n	60a0 <__swbuf_r+0xa0>
    6064:	0021      	movs	r1, r4
    6066:	0028      	movs	r0, r5
    6068:	f000 f91e 	bl	62a8 <_fflush_r>
    606c:	2800      	cmp	r0, #0
    606e:	d1f6      	bne.n	605e <__swbuf_r+0x5e>
    6070:	68a3      	ldr	r3, [r4, #8]
    6072:	3001      	adds	r0, #1
    6074:	3b01      	subs	r3, #1
    6076:	60a3      	str	r3, [r4, #8]
    6078:	6823      	ldr	r3, [r4, #0]
    607a:	1c5a      	adds	r2, r3, #1
    607c:	6022      	str	r2, [r4, #0]
    607e:	701f      	strb	r7, [r3, #0]
    6080:	6963      	ldr	r3, [r4, #20]
    6082:	4298      	cmp	r0, r3
    6084:	d005      	beq.n	6092 <__swbuf_r+0x92>
    6086:	89a3      	ldrh	r3, [r4, #12]
    6088:	0030      	movs	r0, r6
    608a:	07db      	lsls	r3, r3, #31
    608c:	d508      	bpl.n	60a0 <__swbuf_r+0xa0>
    608e:	2e0a      	cmp	r6, #10
    6090:	d106      	bne.n	60a0 <__swbuf_r+0xa0>
    6092:	0021      	movs	r1, r4
    6094:	0028      	movs	r0, r5
    6096:	f000 f907 	bl	62a8 <_fflush_r>
    609a:	2800      	cmp	r0, #0
    609c:	d1df      	bne.n	605e <__swbuf_r+0x5e>
    609e:	0030      	movs	r0, r6
    60a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60a2:	46c0      	nop			; (mov r8, r8)
    60a4:	000086cc 	.word	0x000086cc
    60a8:	000086ec 	.word	0x000086ec
    60ac:	0000870c 	.word	0x0000870c

000060b0 <__swsetup_r>:
    60b0:	4b36      	ldr	r3, [pc, #216]	; (618c <__swsetup_r+0xdc>)
    60b2:	b570      	push	{r4, r5, r6, lr}
    60b4:	681d      	ldr	r5, [r3, #0]
    60b6:	0006      	movs	r6, r0
    60b8:	000c      	movs	r4, r1
    60ba:	2d00      	cmp	r5, #0
    60bc:	d005      	beq.n	60ca <__swsetup_r+0x1a>
    60be:	69ab      	ldr	r3, [r5, #24]
    60c0:	2b00      	cmp	r3, #0
    60c2:	d102      	bne.n	60ca <__swsetup_r+0x1a>
    60c4:	0028      	movs	r0, r5
    60c6:	f000 f95d 	bl	6384 <__sinit>
    60ca:	4b31      	ldr	r3, [pc, #196]	; (6190 <__swsetup_r+0xe0>)
    60cc:	429c      	cmp	r4, r3
    60ce:	d101      	bne.n	60d4 <__swsetup_r+0x24>
    60d0:	686c      	ldr	r4, [r5, #4]
    60d2:	e008      	b.n	60e6 <__swsetup_r+0x36>
    60d4:	4b2f      	ldr	r3, [pc, #188]	; (6194 <__swsetup_r+0xe4>)
    60d6:	429c      	cmp	r4, r3
    60d8:	d101      	bne.n	60de <__swsetup_r+0x2e>
    60da:	68ac      	ldr	r4, [r5, #8]
    60dc:	e003      	b.n	60e6 <__swsetup_r+0x36>
    60de:	4b2e      	ldr	r3, [pc, #184]	; (6198 <__swsetup_r+0xe8>)
    60e0:	429c      	cmp	r4, r3
    60e2:	d100      	bne.n	60e6 <__swsetup_r+0x36>
    60e4:	68ec      	ldr	r4, [r5, #12]
    60e6:	220c      	movs	r2, #12
    60e8:	5ea3      	ldrsh	r3, [r4, r2]
    60ea:	b29a      	uxth	r2, r3
    60ec:	0711      	lsls	r1, r2, #28
    60ee:	d423      	bmi.n	6138 <__swsetup_r+0x88>
    60f0:	06d1      	lsls	r1, r2, #27
    60f2:	d407      	bmi.n	6104 <__swsetup_r+0x54>
    60f4:	2209      	movs	r2, #9
    60f6:	2001      	movs	r0, #1
    60f8:	6032      	str	r2, [r6, #0]
    60fa:	3237      	adds	r2, #55	; 0x37
    60fc:	4313      	orrs	r3, r2
    60fe:	81a3      	strh	r3, [r4, #12]
    6100:	4240      	negs	r0, r0
    6102:	e042      	b.n	618a <__swsetup_r+0xda>
    6104:	0753      	lsls	r3, r2, #29
    6106:	d513      	bpl.n	6130 <__swsetup_r+0x80>
    6108:	6b61      	ldr	r1, [r4, #52]	; 0x34
    610a:	2900      	cmp	r1, #0
    610c:	d008      	beq.n	6120 <__swsetup_r+0x70>
    610e:	0023      	movs	r3, r4
    6110:	3344      	adds	r3, #68	; 0x44
    6112:	4299      	cmp	r1, r3
    6114:	d002      	beq.n	611c <__swsetup_r+0x6c>
    6116:	0030      	movs	r0, r6
    6118:	f000 fa36 	bl	6588 <_free_r>
    611c:	2300      	movs	r3, #0
    611e:	6363      	str	r3, [r4, #52]	; 0x34
    6120:	2224      	movs	r2, #36	; 0x24
    6122:	89a3      	ldrh	r3, [r4, #12]
    6124:	4393      	bics	r3, r2
    6126:	81a3      	strh	r3, [r4, #12]
    6128:	2300      	movs	r3, #0
    612a:	6063      	str	r3, [r4, #4]
    612c:	6923      	ldr	r3, [r4, #16]
    612e:	6023      	str	r3, [r4, #0]
    6130:	2208      	movs	r2, #8
    6132:	89a3      	ldrh	r3, [r4, #12]
    6134:	4313      	orrs	r3, r2
    6136:	81a3      	strh	r3, [r4, #12]
    6138:	6923      	ldr	r3, [r4, #16]
    613a:	2b00      	cmp	r3, #0
    613c:	d10b      	bne.n	6156 <__swsetup_r+0xa6>
    613e:	23a0      	movs	r3, #160	; 0xa0
    6140:	89a2      	ldrh	r2, [r4, #12]
    6142:	009b      	lsls	r3, r3, #2
    6144:	4013      	ands	r3, r2
    6146:	2280      	movs	r2, #128	; 0x80
    6148:	0092      	lsls	r2, r2, #2
    614a:	4293      	cmp	r3, r2
    614c:	d003      	beq.n	6156 <__swsetup_r+0xa6>
    614e:	0021      	movs	r1, r4
    6150:	0030      	movs	r0, r6
    6152:	f000 f9d1 	bl	64f8 <__smakebuf_r>
    6156:	2301      	movs	r3, #1
    6158:	89a2      	ldrh	r2, [r4, #12]
    615a:	4013      	ands	r3, r2
    615c:	d005      	beq.n	616a <__swsetup_r+0xba>
    615e:	2300      	movs	r3, #0
    6160:	60a3      	str	r3, [r4, #8]
    6162:	6963      	ldr	r3, [r4, #20]
    6164:	425b      	negs	r3, r3
    6166:	61a3      	str	r3, [r4, #24]
    6168:	e003      	b.n	6172 <__swsetup_r+0xc2>
    616a:	0792      	lsls	r2, r2, #30
    616c:	d400      	bmi.n	6170 <__swsetup_r+0xc0>
    616e:	6963      	ldr	r3, [r4, #20]
    6170:	60a3      	str	r3, [r4, #8]
    6172:	2000      	movs	r0, #0
    6174:	6923      	ldr	r3, [r4, #16]
    6176:	4283      	cmp	r3, r0
    6178:	d107      	bne.n	618a <__swsetup_r+0xda>
    617a:	220c      	movs	r2, #12
    617c:	5ea3      	ldrsh	r3, [r4, r2]
    617e:	061a      	lsls	r2, r3, #24
    6180:	d503      	bpl.n	618a <__swsetup_r+0xda>
    6182:	2240      	movs	r2, #64	; 0x40
    6184:	4313      	orrs	r3, r2
    6186:	81a3      	strh	r3, [r4, #12]
    6188:	3801      	subs	r0, #1
    618a:	bd70      	pop	{r4, r5, r6, pc}
    618c:	20000074 	.word	0x20000074
    6190:	000086cc 	.word	0x000086cc
    6194:	000086ec 	.word	0x000086ec
    6198:	0000870c 	.word	0x0000870c

0000619c <__sflush_r>:
    619c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    619e:	898a      	ldrh	r2, [r1, #12]
    61a0:	0005      	movs	r5, r0
    61a2:	000c      	movs	r4, r1
    61a4:	0713      	lsls	r3, r2, #28
    61a6:	d45a      	bmi.n	625e <__sflush_r+0xc2>
    61a8:	684b      	ldr	r3, [r1, #4]
    61aa:	2b00      	cmp	r3, #0
    61ac:	dc02      	bgt.n	61b4 <__sflush_r+0x18>
    61ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    61b0:	2b00      	cmp	r3, #0
    61b2:	dd19      	ble.n	61e8 <__sflush_r+0x4c>
    61b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    61b6:	2f00      	cmp	r7, #0
    61b8:	d016      	beq.n	61e8 <__sflush_r+0x4c>
    61ba:	2300      	movs	r3, #0
    61bc:	682e      	ldr	r6, [r5, #0]
    61be:	602b      	str	r3, [r5, #0]
    61c0:	2380      	movs	r3, #128	; 0x80
    61c2:	015b      	lsls	r3, r3, #5
    61c4:	401a      	ands	r2, r3
    61c6:	d001      	beq.n	61cc <__sflush_r+0x30>
    61c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    61ca:	e014      	b.n	61f6 <__sflush_r+0x5a>
    61cc:	2301      	movs	r3, #1
    61ce:	6a21      	ldr	r1, [r4, #32]
    61d0:	0028      	movs	r0, r5
    61d2:	47b8      	blx	r7
    61d4:	1c43      	adds	r3, r0, #1
    61d6:	d10e      	bne.n	61f6 <__sflush_r+0x5a>
    61d8:	682b      	ldr	r3, [r5, #0]
    61da:	2b00      	cmp	r3, #0
    61dc:	d00b      	beq.n	61f6 <__sflush_r+0x5a>
    61de:	2b1d      	cmp	r3, #29
    61e0:	d001      	beq.n	61e6 <__sflush_r+0x4a>
    61e2:	2b16      	cmp	r3, #22
    61e4:	d102      	bne.n	61ec <__sflush_r+0x50>
    61e6:	602e      	str	r6, [r5, #0]
    61e8:	2000      	movs	r0, #0
    61ea:	e05a      	b.n	62a2 <__sflush_r+0x106>
    61ec:	2240      	movs	r2, #64	; 0x40
    61ee:	89a3      	ldrh	r3, [r4, #12]
    61f0:	4313      	orrs	r3, r2
    61f2:	81a3      	strh	r3, [r4, #12]
    61f4:	e055      	b.n	62a2 <__sflush_r+0x106>
    61f6:	89a3      	ldrh	r3, [r4, #12]
    61f8:	075b      	lsls	r3, r3, #29
    61fa:	d506      	bpl.n	620a <__sflush_r+0x6e>
    61fc:	6863      	ldr	r3, [r4, #4]
    61fe:	1ac0      	subs	r0, r0, r3
    6200:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6202:	2b00      	cmp	r3, #0
    6204:	d001      	beq.n	620a <__sflush_r+0x6e>
    6206:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6208:	1ac0      	subs	r0, r0, r3
    620a:	2300      	movs	r3, #0
    620c:	0002      	movs	r2, r0
    620e:	6a21      	ldr	r1, [r4, #32]
    6210:	0028      	movs	r0, r5
    6212:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6214:	47b8      	blx	r7
    6216:	89a3      	ldrh	r3, [r4, #12]
    6218:	1c42      	adds	r2, r0, #1
    621a:	d106      	bne.n	622a <__sflush_r+0x8e>
    621c:	6829      	ldr	r1, [r5, #0]
    621e:	291d      	cmp	r1, #29
    6220:	d83a      	bhi.n	6298 <__sflush_r+0xfc>
    6222:	4a20      	ldr	r2, [pc, #128]	; (62a4 <__sflush_r+0x108>)
    6224:	40ca      	lsrs	r2, r1
    6226:	07d2      	lsls	r2, r2, #31
    6228:	d536      	bpl.n	6298 <__sflush_r+0xfc>
    622a:	2200      	movs	r2, #0
    622c:	6062      	str	r2, [r4, #4]
    622e:	6922      	ldr	r2, [r4, #16]
    6230:	6022      	str	r2, [r4, #0]
    6232:	04db      	lsls	r3, r3, #19
    6234:	d505      	bpl.n	6242 <__sflush_r+0xa6>
    6236:	1c43      	adds	r3, r0, #1
    6238:	d102      	bne.n	6240 <__sflush_r+0xa4>
    623a:	682b      	ldr	r3, [r5, #0]
    623c:	2b00      	cmp	r3, #0
    623e:	d100      	bne.n	6242 <__sflush_r+0xa6>
    6240:	6560      	str	r0, [r4, #84]	; 0x54
    6242:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6244:	602e      	str	r6, [r5, #0]
    6246:	2900      	cmp	r1, #0
    6248:	d0ce      	beq.n	61e8 <__sflush_r+0x4c>
    624a:	0023      	movs	r3, r4
    624c:	3344      	adds	r3, #68	; 0x44
    624e:	4299      	cmp	r1, r3
    6250:	d002      	beq.n	6258 <__sflush_r+0xbc>
    6252:	0028      	movs	r0, r5
    6254:	f000 f998 	bl	6588 <_free_r>
    6258:	2000      	movs	r0, #0
    625a:	6360      	str	r0, [r4, #52]	; 0x34
    625c:	e021      	b.n	62a2 <__sflush_r+0x106>
    625e:	690f      	ldr	r7, [r1, #16]
    6260:	2f00      	cmp	r7, #0
    6262:	d0c1      	beq.n	61e8 <__sflush_r+0x4c>
    6264:	680b      	ldr	r3, [r1, #0]
    6266:	600f      	str	r7, [r1, #0]
    6268:	1bdb      	subs	r3, r3, r7
    626a:	9301      	str	r3, [sp, #4]
    626c:	2300      	movs	r3, #0
    626e:	0792      	lsls	r2, r2, #30
    6270:	d100      	bne.n	6274 <__sflush_r+0xd8>
    6272:	694b      	ldr	r3, [r1, #20]
    6274:	60a3      	str	r3, [r4, #8]
    6276:	e003      	b.n	6280 <__sflush_r+0xe4>
    6278:	9b01      	ldr	r3, [sp, #4]
    627a:	183f      	adds	r7, r7, r0
    627c:	1a1b      	subs	r3, r3, r0
    627e:	9301      	str	r3, [sp, #4]
    6280:	9b01      	ldr	r3, [sp, #4]
    6282:	2b00      	cmp	r3, #0
    6284:	ddb0      	ble.n	61e8 <__sflush_r+0x4c>
    6286:	9b01      	ldr	r3, [sp, #4]
    6288:	003a      	movs	r2, r7
    628a:	6a21      	ldr	r1, [r4, #32]
    628c:	0028      	movs	r0, r5
    628e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6290:	47b0      	blx	r6
    6292:	2800      	cmp	r0, #0
    6294:	dcf0      	bgt.n	6278 <__sflush_r+0xdc>
    6296:	89a3      	ldrh	r3, [r4, #12]
    6298:	2240      	movs	r2, #64	; 0x40
    629a:	2001      	movs	r0, #1
    629c:	4313      	orrs	r3, r2
    629e:	81a3      	strh	r3, [r4, #12]
    62a0:	4240      	negs	r0, r0
    62a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    62a4:	20400001 	.word	0x20400001

000062a8 <_fflush_r>:
    62a8:	690b      	ldr	r3, [r1, #16]
    62aa:	b570      	push	{r4, r5, r6, lr}
    62ac:	0005      	movs	r5, r0
    62ae:	000c      	movs	r4, r1
    62b0:	2b00      	cmp	r3, #0
    62b2:	d101      	bne.n	62b8 <_fflush_r+0x10>
    62b4:	2000      	movs	r0, #0
    62b6:	e01c      	b.n	62f2 <_fflush_r+0x4a>
    62b8:	2800      	cmp	r0, #0
    62ba:	d004      	beq.n	62c6 <_fflush_r+0x1e>
    62bc:	6983      	ldr	r3, [r0, #24]
    62be:	2b00      	cmp	r3, #0
    62c0:	d101      	bne.n	62c6 <_fflush_r+0x1e>
    62c2:	f000 f85f 	bl	6384 <__sinit>
    62c6:	4b0b      	ldr	r3, [pc, #44]	; (62f4 <_fflush_r+0x4c>)
    62c8:	429c      	cmp	r4, r3
    62ca:	d101      	bne.n	62d0 <_fflush_r+0x28>
    62cc:	686c      	ldr	r4, [r5, #4]
    62ce:	e008      	b.n	62e2 <_fflush_r+0x3a>
    62d0:	4b09      	ldr	r3, [pc, #36]	; (62f8 <_fflush_r+0x50>)
    62d2:	429c      	cmp	r4, r3
    62d4:	d101      	bne.n	62da <_fflush_r+0x32>
    62d6:	68ac      	ldr	r4, [r5, #8]
    62d8:	e003      	b.n	62e2 <_fflush_r+0x3a>
    62da:	4b08      	ldr	r3, [pc, #32]	; (62fc <_fflush_r+0x54>)
    62dc:	429c      	cmp	r4, r3
    62de:	d100      	bne.n	62e2 <_fflush_r+0x3a>
    62e0:	68ec      	ldr	r4, [r5, #12]
    62e2:	220c      	movs	r2, #12
    62e4:	5ea3      	ldrsh	r3, [r4, r2]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d0e4      	beq.n	62b4 <_fflush_r+0xc>
    62ea:	0021      	movs	r1, r4
    62ec:	0028      	movs	r0, r5
    62ee:	f7ff ff55 	bl	619c <__sflush_r>
    62f2:	bd70      	pop	{r4, r5, r6, pc}
    62f4:	000086cc 	.word	0x000086cc
    62f8:	000086ec 	.word	0x000086ec
    62fc:	0000870c 	.word	0x0000870c

00006300 <_cleanup_r>:
    6300:	b510      	push	{r4, lr}
    6302:	4902      	ldr	r1, [pc, #8]	; (630c <_cleanup_r+0xc>)
    6304:	f000 f8b0 	bl	6468 <_fwalk_reent>
    6308:	bd10      	pop	{r4, pc}
    630a:	46c0      	nop			; (mov r8, r8)
    630c:	000062a9 	.word	0x000062a9

00006310 <std.isra.0>:
    6310:	2300      	movs	r3, #0
    6312:	b510      	push	{r4, lr}
    6314:	0004      	movs	r4, r0
    6316:	6003      	str	r3, [r0, #0]
    6318:	6043      	str	r3, [r0, #4]
    631a:	6083      	str	r3, [r0, #8]
    631c:	8181      	strh	r1, [r0, #12]
    631e:	6643      	str	r3, [r0, #100]	; 0x64
    6320:	81c2      	strh	r2, [r0, #14]
    6322:	6103      	str	r3, [r0, #16]
    6324:	6143      	str	r3, [r0, #20]
    6326:	6183      	str	r3, [r0, #24]
    6328:	0019      	movs	r1, r3
    632a:	2208      	movs	r2, #8
    632c:	305c      	adds	r0, #92	; 0x5c
    632e:	f7ff fcd4 	bl	5cda <memset>
    6332:	4b05      	ldr	r3, [pc, #20]	; (6348 <std.isra.0+0x38>)
    6334:	6224      	str	r4, [r4, #32]
    6336:	6263      	str	r3, [r4, #36]	; 0x24
    6338:	4b04      	ldr	r3, [pc, #16]	; (634c <std.isra.0+0x3c>)
    633a:	62a3      	str	r3, [r4, #40]	; 0x28
    633c:	4b04      	ldr	r3, [pc, #16]	; (6350 <std.isra.0+0x40>)
    633e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6340:	4b04      	ldr	r3, [pc, #16]	; (6354 <std.isra.0+0x44>)
    6342:	6323      	str	r3, [r4, #48]	; 0x30
    6344:	bd10      	pop	{r4, pc}
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	00006fb9 	.word	0x00006fb9
    634c:	00006fe1 	.word	0x00006fe1
    6350:	00007019 	.word	0x00007019
    6354:	00007045 	.word	0x00007045

00006358 <__sfmoreglue>:
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	2568      	movs	r5, #104	; 0x68
    635c:	1e4b      	subs	r3, r1, #1
    635e:	435d      	muls	r5, r3
    6360:	000e      	movs	r6, r1
    6362:	0029      	movs	r1, r5
    6364:	3174      	adds	r1, #116	; 0x74
    6366:	f000 f955 	bl	6614 <_malloc_r>
    636a:	1e04      	subs	r4, r0, #0
    636c:	d008      	beq.n	6380 <__sfmoreglue+0x28>
    636e:	2100      	movs	r1, #0
    6370:	002a      	movs	r2, r5
    6372:	6001      	str	r1, [r0, #0]
    6374:	6046      	str	r6, [r0, #4]
    6376:	300c      	adds	r0, #12
    6378:	60a0      	str	r0, [r4, #8]
    637a:	3268      	adds	r2, #104	; 0x68
    637c:	f7ff fcad 	bl	5cda <memset>
    6380:	0020      	movs	r0, r4
    6382:	bd70      	pop	{r4, r5, r6, pc}

00006384 <__sinit>:
    6384:	6983      	ldr	r3, [r0, #24]
    6386:	b513      	push	{r0, r1, r4, lr}
    6388:	0004      	movs	r4, r0
    638a:	2b00      	cmp	r3, #0
    638c:	d128      	bne.n	63e0 <__sinit+0x5c>
    638e:	6483      	str	r3, [r0, #72]	; 0x48
    6390:	64c3      	str	r3, [r0, #76]	; 0x4c
    6392:	6503      	str	r3, [r0, #80]	; 0x50
    6394:	4b13      	ldr	r3, [pc, #76]	; (63e4 <__sinit+0x60>)
    6396:	4a14      	ldr	r2, [pc, #80]	; (63e8 <__sinit+0x64>)
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	6282      	str	r2, [r0, #40]	; 0x28
    639c:	9301      	str	r3, [sp, #4]
    639e:	4298      	cmp	r0, r3
    63a0:	d101      	bne.n	63a6 <__sinit+0x22>
    63a2:	2301      	movs	r3, #1
    63a4:	6183      	str	r3, [r0, #24]
    63a6:	0020      	movs	r0, r4
    63a8:	f000 f820 	bl	63ec <__sfp>
    63ac:	6060      	str	r0, [r4, #4]
    63ae:	0020      	movs	r0, r4
    63b0:	f000 f81c 	bl	63ec <__sfp>
    63b4:	60a0      	str	r0, [r4, #8]
    63b6:	0020      	movs	r0, r4
    63b8:	f000 f818 	bl	63ec <__sfp>
    63bc:	2200      	movs	r2, #0
    63be:	60e0      	str	r0, [r4, #12]
    63c0:	2104      	movs	r1, #4
    63c2:	6860      	ldr	r0, [r4, #4]
    63c4:	f7ff ffa4 	bl	6310 <std.isra.0>
    63c8:	2201      	movs	r2, #1
    63ca:	2109      	movs	r1, #9
    63cc:	68a0      	ldr	r0, [r4, #8]
    63ce:	f7ff ff9f 	bl	6310 <std.isra.0>
    63d2:	2202      	movs	r2, #2
    63d4:	2112      	movs	r1, #18
    63d6:	68e0      	ldr	r0, [r4, #12]
    63d8:	f7ff ff9a 	bl	6310 <std.isra.0>
    63dc:	2301      	movs	r3, #1
    63de:	61a3      	str	r3, [r4, #24]
    63e0:	bd13      	pop	{r0, r1, r4, pc}
    63e2:	46c0      	nop			; (mov r8, r8)
    63e4:	000086c8 	.word	0x000086c8
    63e8:	00006301 	.word	0x00006301

000063ec <__sfp>:
    63ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ee:	4b1d      	ldr	r3, [pc, #116]	; (6464 <__sfp+0x78>)
    63f0:	0006      	movs	r6, r0
    63f2:	681d      	ldr	r5, [r3, #0]
    63f4:	69ab      	ldr	r3, [r5, #24]
    63f6:	2b00      	cmp	r3, #0
    63f8:	d102      	bne.n	6400 <__sfp+0x14>
    63fa:	0028      	movs	r0, r5
    63fc:	f7ff ffc2 	bl	6384 <__sinit>
    6400:	3548      	adds	r5, #72	; 0x48
    6402:	68ac      	ldr	r4, [r5, #8]
    6404:	686b      	ldr	r3, [r5, #4]
    6406:	3b01      	subs	r3, #1
    6408:	d405      	bmi.n	6416 <__sfp+0x2a>
    640a:	220c      	movs	r2, #12
    640c:	5ea7      	ldrsh	r7, [r4, r2]
    640e:	2f00      	cmp	r7, #0
    6410:	d010      	beq.n	6434 <__sfp+0x48>
    6412:	3468      	adds	r4, #104	; 0x68
    6414:	e7f7      	b.n	6406 <__sfp+0x1a>
    6416:	682b      	ldr	r3, [r5, #0]
    6418:	2b00      	cmp	r3, #0
    641a:	d001      	beq.n	6420 <__sfp+0x34>
    641c:	682d      	ldr	r5, [r5, #0]
    641e:	e7f0      	b.n	6402 <__sfp+0x16>
    6420:	2104      	movs	r1, #4
    6422:	0030      	movs	r0, r6
    6424:	f7ff ff98 	bl	6358 <__sfmoreglue>
    6428:	6028      	str	r0, [r5, #0]
    642a:	2800      	cmp	r0, #0
    642c:	d1f6      	bne.n	641c <__sfp+0x30>
    642e:	230c      	movs	r3, #12
    6430:	6033      	str	r3, [r6, #0]
    6432:	e016      	b.n	6462 <__sfp+0x76>
    6434:	2301      	movs	r3, #1
    6436:	0020      	movs	r0, r4
    6438:	425b      	negs	r3, r3
    643a:	81e3      	strh	r3, [r4, #14]
    643c:	3302      	adds	r3, #2
    643e:	81a3      	strh	r3, [r4, #12]
    6440:	6667      	str	r7, [r4, #100]	; 0x64
    6442:	6027      	str	r7, [r4, #0]
    6444:	60a7      	str	r7, [r4, #8]
    6446:	6067      	str	r7, [r4, #4]
    6448:	6127      	str	r7, [r4, #16]
    644a:	6167      	str	r7, [r4, #20]
    644c:	61a7      	str	r7, [r4, #24]
    644e:	305c      	adds	r0, #92	; 0x5c
    6450:	2208      	movs	r2, #8
    6452:	0039      	movs	r1, r7
    6454:	f7ff fc41 	bl	5cda <memset>
    6458:	0020      	movs	r0, r4
    645a:	6367      	str	r7, [r4, #52]	; 0x34
    645c:	63a7      	str	r7, [r4, #56]	; 0x38
    645e:	64a7      	str	r7, [r4, #72]	; 0x48
    6460:	64e7      	str	r7, [r4, #76]	; 0x4c
    6462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6464:	000086c8 	.word	0x000086c8

00006468 <_fwalk_reent>:
    6468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    646a:	0004      	movs	r4, r0
    646c:	0007      	movs	r7, r0
    646e:	2600      	movs	r6, #0
    6470:	9101      	str	r1, [sp, #4]
    6472:	3448      	adds	r4, #72	; 0x48
    6474:	2c00      	cmp	r4, #0
    6476:	d016      	beq.n	64a6 <_fwalk_reent+0x3e>
    6478:	6863      	ldr	r3, [r4, #4]
    647a:	68a5      	ldr	r5, [r4, #8]
    647c:	9300      	str	r3, [sp, #0]
    647e:	9b00      	ldr	r3, [sp, #0]
    6480:	3b01      	subs	r3, #1
    6482:	9300      	str	r3, [sp, #0]
    6484:	d40d      	bmi.n	64a2 <_fwalk_reent+0x3a>
    6486:	89ab      	ldrh	r3, [r5, #12]
    6488:	2b01      	cmp	r3, #1
    648a:	d908      	bls.n	649e <_fwalk_reent+0x36>
    648c:	220e      	movs	r2, #14
    648e:	5eab      	ldrsh	r3, [r5, r2]
    6490:	3301      	adds	r3, #1
    6492:	d004      	beq.n	649e <_fwalk_reent+0x36>
    6494:	0029      	movs	r1, r5
    6496:	0038      	movs	r0, r7
    6498:	9b01      	ldr	r3, [sp, #4]
    649a:	4798      	blx	r3
    649c:	4306      	orrs	r6, r0
    649e:	3568      	adds	r5, #104	; 0x68
    64a0:	e7ed      	b.n	647e <_fwalk_reent+0x16>
    64a2:	6824      	ldr	r4, [r4, #0]
    64a4:	e7e6      	b.n	6474 <_fwalk_reent+0xc>
    64a6:	0030      	movs	r0, r6
    64a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000064ac <__swhatbuf_r>:
    64ac:	b570      	push	{r4, r5, r6, lr}
    64ae:	000e      	movs	r6, r1
    64b0:	001d      	movs	r5, r3
    64b2:	230e      	movs	r3, #14
    64b4:	5ec9      	ldrsh	r1, [r1, r3]
    64b6:	b090      	sub	sp, #64	; 0x40
    64b8:	0014      	movs	r4, r2
    64ba:	2900      	cmp	r1, #0
    64bc:	da06      	bge.n	64cc <__swhatbuf_r+0x20>
    64be:	2300      	movs	r3, #0
    64c0:	602b      	str	r3, [r5, #0]
    64c2:	89b3      	ldrh	r3, [r6, #12]
    64c4:	061b      	lsls	r3, r3, #24
    64c6:	d50f      	bpl.n	64e8 <__swhatbuf_r+0x3c>
    64c8:	2340      	movs	r3, #64	; 0x40
    64ca:	e00f      	b.n	64ec <__swhatbuf_r+0x40>
    64cc:	aa01      	add	r2, sp, #4
    64ce:	f000 fde5 	bl	709c <_fstat_r>
    64d2:	2800      	cmp	r0, #0
    64d4:	dbf3      	blt.n	64be <__swhatbuf_r+0x12>
    64d6:	23f0      	movs	r3, #240	; 0xf0
    64d8:	9a02      	ldr	r2, [sp, #8]
    64da:	021b      	lsls	r3, r3, #8
    64dc:	4013      	ands	r3, r2
    64de:	4a05      	ldr	r2, [pc, #20]	; (64f4 <__swhatbuf_r+0x48>)
    64e0:	189b      	adds	r3, r3, r2
    64e2:	425a      	negs	r2, r3
    64e4:	4153      	adcs	r3, r2
    64e6:	602b      	str	r3, [r5, #0]
    64e8:	2380      	movs	r3, #128	; 0x80
    64ea:	00db      	lsls	r3, r3, #3
    64ec:	2000      	movs	r0, #0
    64ee:	6023      	str	r3, [r4, #0]
    64f0:	b010      	add	sp, #64	; 0x40
    64f2:	bd70      	pop	{r4, r5, r6, pc}
    64f4:	ffffe000 	.word	0xffffe000

000064f8 <__smakebuf_r>:
    64f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64fa:	2602      	movs	r6, #2
    64fc:	898b      	ldrh	r3, [r1, #12]
    64fe:	0005      	movs	r5, r0
    6500:	000c      	movs	r4, r1
    6502:	4233      	tst	r3, r6
    6504:	d110      	bne.n	6528 <__smakebuf_r+0x30>
    6506:	ab01      	add	r3, sp, #4
    6508:	466a      	mov	r2, sp
    650a:	f7ff ffcf 	bl	64ac <__swhatbuf_r>
    650e:	9900      	ldr	r1, [sp, #0]
    6510:	0007      	movs	r7, r0
    6512:	0028      	movs	r0, r5
    6514:	f000 f87e 	bl	6614 <_malloc_r>
    6518:	2800      	cmp	r0, #0
    651a:	d10c      	bne.n	6536 <__smakebuf_r+0x3e>
    651c:	220c      	movs	r2, #12
    651e:	5ea3      	ldrsh	r3, [r4, r2]
    6520:	059a      	lsls	r2, r3, #22
    6522:	d423      	bmi.n	656c <__smakebuf_r+0x74>
    6524:	4333      	orrs	r3, r6
    6526:	81a3      	strh	r3, [r4, #12]
    6528:	0023      	movs	r3, r4
    652a:	3347      	adds	r3, #71	; 0x47
    652c:	6023      	str	r3, [r4, #0]
    652e:	6123      	str	r3, [r4, #16]
    6530:	2301      	movs	r3, #1
    6532:	6163      	str	r3, [r4, #20]
    6534:	e01a      	b.n	656c <__smakebuf_r+0x74>
    6536:	2280      	movs	r2, #128	; 0x80
    6538:	4b0d      	ldr	r3, [pc, #52]	; (6570 <__smakebuf_r+0x78>)
    653a:	62ab      	str	r3, [r5, #40]	; 0x28
    653c:	89a3      	ldrh	r3, [r4, #12]
    653e:	6020      	str	r0, [r4, #0]
    6540:	4313      	orrs	r3, r2
    6542:	81a3      	strh	r3, [r4, #12]
    6544:	9b00      	ldr	r3, [sp, #0]
    6546:	6120      	str	r0, [r4, #16]
    6548:	6163      	str	r3, [r4, #20]
    654a:	9b01      	ldr	r3, [sp, #4]
    654c:	2b00      	cmp	r3, #0
    654e:	d00a      	beq.n	6566 <__smakebuf_r+0x6e>
    6550:	230e      	movs	r3, #14
    6552:	5ee1      	ldrsh	r1, [r4, r3]
    6554:	0028      	movs	r0, r5
    6556:	f000 fdb3 	bl	70c0 <_isatty_r>
    655a:	2800      	cmp	r0, #0
    655c:	d003      	beq.n	6566 <__smakebuf_r+0x6e>
    655e:	2201      	movs	r2, #1
    6560:	89a3      	ldrh	r3, [r4, #12]
    6562:	4313      	orrs	r3, r2
    6564:	81a3      	strh	r3, [r4, #12]
    6566:	89a3      	ldrh	r3, [r4, #12]
    6568:	431f      	orrs	r7, r3
    656a:	81a7      	strh	r7, [r4, #12]
    656c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    656e:	46c0      	nop			; (mov r8, r8)
    6570:	00006301 	.word	0x00006301

00006574 <malloc>:
    6574:	b510      	push	{r4, lr}
    6576:	4b03      	ldr	r3, [pc, #12]	; (6584 <malloc+0x10>)
    6578:	0001      	movs	r1, r0
    657a:	6818      	ldr	r0, [r3, #0]
    657c:	f000 f84a 	bl	6614 <_malloc_r>
    6580:	bd10      	pop	{r4, pc}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	20000074 	.word	0x20000074

00006588 <_free_r>:
    6588:	b530      	push	{r4, r5, lr}
    658a:	2900      	cmp	r1, #0
    658c:	d03e      	beq.n	660c <_free_r+0x84>
    658e:	3904      	subs	r1, #4
    6590:	680b      	ldr	r3, [r1, #0]
    6592:	2b00      	cmp	r3, #0
    6594:	da00      	bge.n	6598 <_free_r+0x10>
    6596:	18c9      	adds	r1, r1, r3
    6598:	4a1d      	ldr	r2, [pc, #116]	; (6610 <_free_r+0x88>)
    659a:	6813      	ldr	r3, [r2, #0]
    659c:	0014      	movs	r4, r2
    659e:	2b00      	cmp	r3, #0
    65a0:	d102      	bne.n	65a8 <_free_r+0x20>
    65a2:	604b      	str	r3, [r1, #4]
    65a4:	6011      	str	r1, [r2, #0]
    65a6:	e031      	b.n	660c <_free_r+0x84>
    65a8:	428b      	cmp	r3, r1
    65aa:	d90d      	bls.n	65c8 <_free_r+0x40>
    65ac:	680a      	ldr	r2, [r1, #0]
    65ae:	1888      	adds	r0, r1, r2
    65b0:	4283      	cmp	r3, r0
    65b2:	d103      	bne.n	65bc <_free_r+0x34>
    65b4:	6818      	ldr	r0, [r3, #0]
    65b6:	685b      	ldr	r3, [r3, #4]
    65b8:	1882      	adds	r2, r0, r2
    65ba:	600a      	str	r2, [r1, #0]
    65bc:	604b      	str	r3, [r1, #4]
    65be:	6021      	str	r1, [r4, #0]
    65c0:	e024      	b.n	660c <_free_r+0x84>
    65c2:	428a      	cmp	r2, r1
    65c4:	d803      	bhi.n	65ce <_free_r+0x46>
    65c6:	0013      	movs	r3, r2
    65c8:	685a      	ldr	r2, [r3, #4]
    65ca:	2a00      	cmp	r2, #0
    65cc:	d1f9      	bne.n	65c2 <_free_r+0x3a>
    65ce:	681d      	ldr	r5, [r3, #0]
    65d0:	195c      	adds	r4, r3, r5
    65d2:	428c      	cmp	r4, r1
    65d4:	d10b      	bne.n	65ee <_free_r+0x66>
    65d6:	6809      	ldr	r1, [r1, #0]
    65d8:	1869      	adds	r1, r5, r1
    65da:	1858      	adds	r0, r3, r1
    65dc:	6019      	str	r1, [r3, #0]
    65de:	4282      	cmp	r2, r0
    65e0:	d114      	bne.n	660c <_free_r+0x84>
    65e2:	6810      	ldr	r0, [r2, #0]
    65e4:	6852      	ldr	r2, [r2, #4]
    65e6:	1841      	adds	r1, r0, r1
    65e8:	6019      	str	r1, [r3, #0]
    65ea:	605a      	str	r2, [r3, #4]
    65ec:	e00e      	b.n	660c <_free_r+0x84>
    65ee:	428c      	cmp	r4, r1
    65f0:	d902      	bls.n	65f8 <_free_r+0x70>
    65f2:	230c      	movs	r3, #12
    65f4:	6003      	str	r3, [r0, #0]
    65f6:	e009      	b.n	660c <_free_r+0x84>
    65f8:	6808      	ldr	r0, [r1, #0]
    65fa:	180c      	adds	r4, r1, r0
    65fc:	42a2      	cmp	r2, r4
    65fe:	d103      	bne.n	6608 <_free_r+0x80>
    6600:	6814      	ldr	r4, [r2, #0]
    6602:	6852      	ldr	r2, [r2, #4]
    6604:	1820      	adds	r0, r4, r0
    6606:	6008      	str	r0, [r1, #0]
    6608:	604a      	str	r2, [r1, #4]
    660a:	6059      	str	r1, [r3, #4]
    660c:	bd30      	pop	{r4, r5, pc}
    660e:	46c0      	nop			; (mov r8, r8)
    6610:	200001cc 	.word	0x200001cc

00006614 <_malloc_r>:
    6614:	2303      	movs	r3, #3
    6616:	b570      	push	{r4, r5, r6, lr}
    6618:	1ccd      	adds	r5, r1, #3
    661a:	439d      	bics	r5, r3
    661c:	3508      	adds	r5, #8
    661e:	0006      	movs	r6, r0
    6620:	2d0c      	cmp	r5, #12
    6622:	d201      	bcs.n	6628 <_malloc_r+0x14>
    6624:	250c      	movs	r5, #12
    6626:	e005      	b.n	6634 <_malloc_r+0x20>
    6628:	2d00      	cmp	r5, #0
    662a:	da03      	bge.n	6634 <_malloc_r+0x20>
    662c:	230c      	movs	r3, #12
    662e:	2000      	movs	r0, #0
    6630:	6033      	str	r3, [r6, #0]
    6632:	e040      	b.n	66b6 <_malloc_r+0xa2>
    6634:	42a9      	cmp	r1, r5
    6636:	d8f9      	bhi.n	662c <_malloc_r+0x18>
    6638:	4b1f      	ldr	r3, [pc, #124]	; (66b8 <_malloc_r+0xa4>)
    663a:	681c      	ldr	r4, [r3, #0]
    663c:	001a      	movs	r2, r3
    663e:	0021      	movs	r1, r4
    6640:	2900      	cmp	r1, #0
    6642:	d013      	beq.n	666c <_malloc_r+0x58>
    6644:	680b      	ldr	r3, [r1, #0]
    6646:	1b5b      	subs	r3, r3, r5
    6648:	d40d      	bmi.n	6666 <_malloc_r+0x52>
    664a:	2b0b      	cmp	r3, #11
    664c:	d902      	bls.n	6654 <_malloc_r+0x40>
    664e:	600b      	str	r3, [r1, #0]
    6650:	18cc      	adds	r4, r1, r3
    6652:	e01e      	b.n	6692 <_malloc_r+0x7e>
    6654:	428c      	cmp	r4, r1
    6656:	d102      	bne.n	665e <_malloc_r+0x4a>
    6658:	6863      	ldr	r3, [r4, #4]
    665a:	6013      	str	r3, [r2, #0]
    665c:	e01a      	b.n	6694 <_malloc_r+0x80>
    665e:	684b      	ldr	r3, [r1, #4]
    6660:	6063      	str	r3, [r4, #4]
    6662:	000c      	movs	r4, r1
    6664:	e016      	b.n	6694 <_malloc_r+0x80>
    6666:	000c      	movs	r4, r1
    6668:	6849      	ldr	r1, [r1, #4]
    666a:	e7e9      	b.n	6640 <_malloc_r+0x2c>
    666c:	4c13      	ldr	r4, [pc, #76]	; (66bc <_malloc_r+0xa8>)
    666e:	6823      	ldr	r3, [r4, #0]
    6670:	2b00      	cmp	r3, #0
    6672:	d103      	bne.n	667c <_malloc_r+0x68>
    6674:	0030      	movs	r0, r6
    6676:	f000 fc8d 	bl	6f94 <_sbrk_r>
    667a:	6020      	str	r0, [r4, #0]
    667c:	0029      	movs	r1, r5
    667e:	0030      	movs	r0, r6
    6680:	f000 fc88 	bl	6f94 <_sbrk_r>
    6684:	1c43      	adds	r3, r0, #1
    6686:	d0d1      	beq.n	662c <_malloc_r+0x18>
    6688:	2303      	movs	r3, #3
    668a:	1cc4      	adds	r4, r0, #3
    668c:	439c      	bics	r4, r3
    668e:	42a0      	cmp	r0, r4
    6690:	d10a      	bne.n	66a8 <_malloc_r+0x94>
    6692:	6025      	str	r5, [r4, #0]
    6694:	0020      	movs	r0, r4
    6696:	2207      	movs	r2, #7
    6698:	300b      	adds	r0, #11
    669a:	1d23      	adds	r3, r4, #4
    669c:	4390      	bics	r0, r2
    669e:	1ac3      	subs	r3, r0, r3
    66a0:	d009      	beq.n	66b6 <_malloc_r+0xa2>
    66a2:	425a      	negs	r2, r3
    66a4:	50e2      	str	r2, [r4, r3]
    66a6:	e006      	b.n	66b6 <_malloc_r+0xa2>
    66a8:	1a21      	subs	r1, r4, r0
    66aa:	0030      	movs	r0, r6
    66ac:	f000 fc72 	bl	6f94 <_sbrk_r>
    66b0:	1c43      	adds	r3, r0, #1
    66b2:	d1ee      	bne.n	6692 <_malloc_r+0x7e>
    66b4:	e7ba      	b.n	662c <_malloc_r+0x18>
    66b6:	bd70      	pop	{r4, r5, r6, pc}
    66b8:	200001cc 	.word	0x200001cc
    66bc:	200001c8 	.word	0x200001c8

000066c0 <__ssputs_r>:
    66c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66c2:	688e      	ldr	r6, [r1, #8]
    66c4:	b085      	sub	sp, #20
    66c6:	0007      	movs	r7, r0
    66c8:	000c      	movs	r4, r1
    66ca:	9203      	str	r2, [sp, #12]
    66cc:	9301      	str	r3, [sp, #4]
    66ce:	429e      	cmp	r6, r3
    66d0:	d843      	bhi.n	675a <__ssputs_r+0x9a>
    66d2:	2390      	movs	r3, #144	; 0x90
    66d4:	898a      	ldrh	r2, [r1, #12]
    66d6:	00db      	lsls	r3, r3, #3
    66d8:	421a      	tst	r2, r3
    66da:	d03e      	beq.n	675a <__ssputs_r+0x9a>
    66dc:	2503      	movs	r5, #3
    66de:	6909      	ldr	r1, [r1, #16]
    66e0:	6823      	ldr	r3, [r4, #0]
    66e2:	9801      	ldr	r0, [sp, #4]
    66e4:	1a5b      	subs	r3, r3, r1
    66e6:	9302      	str	r3, [sp, #8]
    66e8:	6963      	ldr	r3, [r4, #20]
    66ea:	435d      	muls	r5, r3
    66ec:	0feb      	lsrs	r3, r5, #31
    66ee:	195d      	adds	r5, r3, r5
    66f0:	9b02      	ldr	r3, [sp, #8]
    66f2:	106d      	asrs	r5, r5, #1
    66f4:	3301      	adds	r3, #1
    66f6:	181b      	adds	r3, r3, r0
    66f8:	42ab      	cmp	r3, r5
    66fa:	d900      	bls.n	66fe <__ssputs_r+0x3e>
    66fc:	001d      	movs	r5, r3
    66fe:	0553      	lsls	r3, r2, #21
    6700:	d510      	bpl.n	6724 <__ssputs_r+0x64>
    6702:	0029      	movs	r1, r5
    6704:	0038      	movs	r0, r7
    6706:	f7ff ff85 	bl	6614 <_malloc_r>
    670a:	1e06      	subs	r6, r0, #0
    670c:	d014      	beq.n	6738 <__ssputs_r+0x78>
    670e:	9a02      	ldr	r2, [sp, #8]
    6710:	6921      	ldr	r1, [r4, #16]
    6712:	f7ff fad9 	bl	5cc8 <memcpy>
    6716:	89a2      	ldrh	r2, [r4, #12]
    6718:	4b19      	ldr	r3, [pc, #100]	; (6780 <__ssputs_r+0xc0>)
    671a:	4013      	ands	r3, r2
    671c:	2280      	movs	r2, #128	; 0x80
    671e:	4313      	orrs	r3, r2
    6720:	81a3      	strh	r3, [r4, #12]
    6722:	e012      	b.n	674a <__ssputs_r+0x8a>
    6724:	002a      	movs	r2, r5
    6726:	0038      	movs	r0, r7
    6728:	f000 fd10 	bl	714c <_realloc_r>
    672c:	1e06      	subs	r6, r0, #0
    672e:	d10c      	bne.n	674a <__ssputs_r+0x8a>
    6730:	6921      	ldr	r1, [r4, #16]
    6732:	0038      	movs	r0, r7
    6734:	f7ff ff28 	bl	6588 <_free_r>
    6738:	230c      	movs	r3, #12
    673a:	2240      	movs	r2, #64	; 0x40
    673c:	2001      	movs	r0, #1
    673e:	603b      	str	r3, [r7, #0]
    6740:	89a3      	ldrh	r3, [r4, #12]
    6742:	4240      	negs	r0, r0
    6744:	4313      	orrs	r3, r2
    6746:	81a3      	strh	r3, [r4, #12]
    6748:	e017      	b.n	677a <__ssputs_r+0xba>
    674a:	9b02      	ldr	r3, [sp, #8]
    674c:	6126      	str	r6, [r4, #16]
    674e:	18f6      	adds	r6, r6, r3
    6750:	6026      	str	r6, [r4, #0]
    6752:	6165      	str	r5, [r4, #20]
    6754:	9e01      	ldr	r6, [sp, #4]
    6756:	1aed      	subs	r5, r5, r3
    6758:	60a5      	str	r5, [r4, #8]
    675a:	9b01      	ldr	r3, [sp, #4]
    675c:	42b3      	cmp	r3, r6
    675e:	d200      	bcs.n	6762 <__ssputs_r+0xa2>
    6760:	001e      	movs	r6, r3
    6762:	0032      	movs	r2, r6
    6764:	9903      	ldr	r1, [sp, #12]
    6766:	6820      	ldr	r0, [r4, #0]
    6768:	f000 fcdb 	bl	7122 <memmove>
    676c:	2000      	movs	r0, #0
    676e:	68a3      	ldr	r3, [r4, #8]
    6770:	1b9b      	subs	r3, r3, r6
    6772:	60a3      	str	r3, [r4, #8]
    6774:	6823      	ldr	r3, [r4, #0]
    6776:	199e      	adds	r6, r3, r6
    6778:	6026      	str	r6, [r4, #0]
    677a:	b005      	add	sp, #20
    677c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	fffffb7f 	.word	0xfffffb7f

00006784 <_svfiprintf_r>:
    6784:	b5f0      	push	{r4, r5, r6, r7, lr}
    6786:	b09f      	sub	sp, #124	; 0x7c
    6788:	9002      	str	r0, [sp, #8]
    678a:	9305      	str	r3, [sp, #20]
    678c:	898b      	ldrh	r3, [r1, #12]
    678e:	000f      	movs	r7, r1
    6790:	0016      	movs	r6, r2
    6792:	061b      	lsls	r3, r3, #24
    6794:	d510      	bpl.n	67b8 <_svfiprintf_r+0x34>
    6796:	690b      	ldr	r3, [r1, #16]
    6798:	2b00      	cmp	r3, #0
    679a:	d10d      	bne.n	67b8 <_svfiprintf_r+0x34>
    679c:	2140      	movs	r1, #64	; 0x40
    679e:	f7ff ff39 	bl	6614 <_malloc_r>
    67a2:	6038      	str	r0, [r7, #0]
    67a4:	6138      	str	r0, [r7, #16]
    67a6:	2800      	cmp	r0, #0
    67a8:	d104      	bne.n	67b4 <_svfiprintf_r+0x30>
    67aa:	230c      	movs	r3, #12
    67ac:	9a02      	ldr	r2, [sp, #8]
    67ae:	3801      	subs	r0, #1
    67b0:	6013      	str	r3, [r2, #0]
    67b2:	e0d8      	b.n	6966 <_svfiprintf_r+0x1e2>
    67b4:	2340      	movs	r3, #64	; 0x40
    67b6:	617b      	str	r3, [r7, #20]
    67b8:	2300      	movs	r3, #0
    67ba:	ad06      	add	r5, sp, #24
    67bc:	616b      	str	r3, [r5, #20]
    67be:	3320      	adds	r3, #32
    67c0:	766b      	strb	r3, [r5, #25]
    67c2:	3310      	adds	r3, #16
    67c4:	76ab      	strb	r3, [r5, #26]
    67c6:	0034      	movs	r4, r6
    67c8:	7823      	ldrb	r3, [r4, #0]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d103      	bne.n	67d6 <_svfiprintf_r+0x52>
    67ce:	1ba3      	subs	r3, r4, r6
    67d0:	9304      	str	r3, [sp, #16]
    67d2:	d012      	beq.n	67fa <_svfiprintf_r+0x76>
    67d4:	e003      	b.n	67de <_svfiprintf_r+0x5a>
    67d6:	2b25      	cmp	r3, #37	; 0x25
    67d8:	d0f9      	beq.n	67ce <_svfiprintf_r+0x4a>
    67da:	3401      	adds	r4, #1
    67dc:	e7f4      	b.n	67c8 <_svfiprintf_r+0x44>
    67de:	1ba3      	subs	r3, r4, r6
    67e0:	0032      	movs	r2, r6
    67e2:	0039      	movs	r1, r7
    67e4:	9802      	ldr	r0, [sp, #8]
    67e6:	f7ff ff6b 	bl	66c0 <__ssputs_r>
    67ea:	1c43      	adds	r3, r0, #1
    67ec:	d100      	bne.n	67f0 <_svfiprintf_r+0x6c>
    67ee:	e0b4      	b.n	695a <_svfiprintf_r+0x1d6>
    67f0:	696a      	ldr	r2, [r5, #20]
    67f2:	9b04      	ldr	r3, [sp, #16]
    67f4:	4694      	mov	ip, r2
    67f6:	4463      	add	r3, ip
    67f8:	616b      	str	r3, [r5, #20]
    67fa:	7823      	ldrb	r3, [r4, #0]
    67fc:	2b00      	cmp	r3, #0
    67fe:	d100      	bne.n	6802 <_svfiprintf_r+0x7e>
    6800:	e0ab      	b.n	695a <_svfiprintf_r+0x1d6>
    6802:	2201      	movs	r2, #1
    6804:	2300      	movs	r3, #0
    6806:	4252      	negs	r2, r2
    6808:	606a      	str	r2, [r5, #4]
    680a:	a902      	add	r1, sp, #8
    680c:	3254      	adds	r2, #84	; 0x54
    680e:	1852      	adds	r2, r2, r1
    6810:	3401      	adds	r4, #1
    6812:	602b      	str	r3, [r5, #0]
    6814:	60eb      	str	r3, [r5, #12]
    6816:	60ab      	str	r3, [r5, #8]
    6818:	7013      	strb	r3, [r2, #0]
    681a:	65ab      	str	r3, [r5, #88]	; 0x58
    681c:	4e53      	ldr	r6, [pc, #332]	; (696c <_svfiprintf_r+0x1e8>)
    681e:	7821      	ldrb	r1, [r4, #0]
    6820:	2205      	movs	r2, #5
    6822:	0030      	movs	r0, r6
    6824:	f000 fc72 	bl	710c <memchr>
    6828:	2800      	cmp	r0, #0
    682a:	d007      	beq.n	683c <_svfiprintf_r+0xb8>
    682c:	2301      	movs	r3, #1
    682e:	1b80      	subs	r0, r0, r6
    6830:	4083      	lsls	r3, r0
    6832:	682a      	ldr	r2, [r5, #0]
    6834:	3401      	adds	r4, #1
    6836:	4313      	orrs	r3, r2
    6838:	602b      	str	r3, [r5, #0]
    683a:	e7ef      	b.n	681c <_svfiprintf_r+0x98>
    683c:	682b      	ldr	r3, [r5, #0]
    683e:	06da      	lsls	r2, r3, #27
    6840:	d504      	bpl.n	684c <_svfiprintf_r+0xc8>
    6842:	2253      	movs	r2, #83	; 0x53
    6844:	2120      	movs	r1, #32
    6846:	a802      	add	r0, sp, #8
    6848:	1812      	adds	r2, r2, r0
    684a:	7011      	strb	r1, [r2, #0]
    684c:	071a      	lsls	r2, r3, #28
    684e:	d504      	bpl.n	685a <_svfiprintf_r+0xd6>
    6850:	2253      	movs	r2, #83	; 0x53
    6852:	212b      	movs	r1, #43	; 0x2b
    6854:	a802      	add	r0, sp, #8
    6856:	1812      	adds	r2, r2, r0
    6858:	7011      	strb	r1, [r2, #0]
    685a:	7822      	ldrb	r2, [r4, #0]
    685c:	2a2a      	cmp	r2, #42	; 0x2a
    685e:	d003      	beq.n	6868 <_svfiprintf_r+0xe4>
    6860:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6862:	2000      	movs	r0, #0
    6864:	210a      	movs	r1, #10
    6866:	e00e      	b.n	6886 <_svfiprintf_r+0x102>
    6868:	9a05      	ldr	r2, [sp, #20]
    686a:	1d11      	adds	r1, r2, #4
    686c:	6812      	ldr	r2, [r2, #0]
    686e:	9105      	str	r1, [sp, #20]
    6870:	2a00      	cmp	r2, #0
    6872:	db01      	blt.n	6878 <_svfiprintf_r+0xf4>
    6874:	9209      	str	r2, [sp, #36]	; 0x24
    6876:	e004      	b.n	6882 <_svfiprintf_r+0xfe>
    6878:	4252      	negs	r2, r2
    687a:	60ea      	str	r2, [r5, #12]
    687c:	2202      	movs	r2, #2
    687e:	4313      	orrs	r3, r2
    6880:	602b      	str	r3, [r5, #0]
    6882:	3401      	adds	r4, #1
    6884:	e00b      	b.n	689e <_svfiprintf_r+0x11a>
    6886:	7822      	ldrb	r2, [r4, #0]
    6888:	3a30      	subs	r2, #48	; 0x30
    688a:	2a09      	cmp	r2, #9
    688c:	d804      	bhi.n	6898 <_svfiprintf_r+0x114>
    688e:	434b      	muls	r3, r1
    6890:	3401      	adds	r4, #1
    6892:	189b      	adds	r3, r3, r2
    6894:	2001      	movs	r0, #1
    6896:	e7f6      	b.n	6886 <_svfiprintf_r+0x102>
    6898:	2800      	cmp	r0, #0
    689a:	d000      	beq.n	689e <_svfiprintf_r+0x11a>
    689c:	9309      	str	r3, [sp, #36]	; 0x24
    689e:	7823      	ldrb	r3, [r4, #0]
    68a0:	2b2e      	cmp	r3, #46	; 0x2e
    68a2:	d11e      	bne.n	68e2 <_svfiprintf_r+0x15e>
    68a4:	7863      	ldrb	r3, [r4, #1]
    68a6:	2b2a      	cmp	r3, #42	; 0x2a
    68a8:	d10a      	bne.n	68c0 <_svfiprintf_r+0x13c>
    68aa:	9b05      	ldr	r3, [sp, #20]
    68ac:	3402      	adds	r4, #2
    68ae:	1d1a      	adds	r2, r3, #4
    68b0:	681b      	ldr	r3, [r3, #0]
    68b2:	9205      	str	r2, [sp, #20]
    68b4:	2b00      	cmp	r3, #0
    68b6:	da01      	bge.n	68bc <_svfiprintf_r+0x138>
    68b8:	2301      	movs	r3, #1
    68ba:	425b      	negs	r3, r3
    68bc:	9307      	str	r3, [sp, #28]
    68be:	e010      	b.n	68e2 <_svfiprintf_r+0x15e>
    68c0:	2300      	movs	r3, #0
    68c2:	200a      	movs	r0, #10
    68c4:	001a      	movs	r2, r3
    68c6:	3401      	adds	r4, #1
    68c8:	606b      	str	r3, [r5, #4]
    68ca:	7821      	ldrb	r1, [r4, #0]
    68cc:	3930      	subs	r1, #48	; 0x30
    68ce:	2909      	cmp	r1, #9
    68d0:	d804      	bhi.n	68dc <_svfiprintf_r+0x158>
    68d2:	4342      	muls	r2, r0
    68d4:	3401      	adds	r4, #1
    68d6:	1852      	adds	r2, r2, r1
    68d8:	2301      	movs	r3, #1
    68da:	e7f6      	b.n	68ca <_svfiprintf_r+0x146>
    68dc:	2b00      	cmp	r3, #0
    68de:	d000      	beq.n	68e2 <_svfiprintf_r+0x15e>
    68e0:	9207      	str	r2, [sp, #28]
    68e2:	4e23      	ldr	r6, [pc, #140]	; (6970 <_svfiprintf_r+0x1ec>)
    68e4:	7821      	ldrb	r1, [r4, #0]
    68e6:	2203      	movs	r2, #3
    68e8:	0030      	movs	r0, r6
    68ea:	f000 fc0f 	bl	710c <memchr>
    68ee:	2800      	cmp	r0, #0
    68f0:	d006      	beq.n	6900 <_svfiprintf_r+0x17c>
    68f2:	2340      	movs	r3, #64	; 0x40
    68f4:	1b80      	subs	r0, r0, r6
    68f6:	4083      	lsls	r3, r0
    68f8:	682a      	ldr	r2, [r5, #0]
    68fa:	3401      	adds	r4, #1
    68fc:	4313      	orrs	r3, r2
    68fe:	602b      	str	r3, [r5, #0]
    6900:	7821      	ldrb	r1, [r4, #0]
    6902:	2206      	movs	r2, #6
    6904:	481b      	ldr	r0, [pc, #108]	; (6974 <_svfiprintf_r+0x1f0>)
    6906:	1c66      	adds	r6, r4, #1
    6908:	7629      	strb	r1, [r5, #24]
    690a:	f000 fbff 	bl	710c <memchr>
    690e:	2800      	cmp	r0, #0
    6910:	d012      	beq.n	6938 <_svfiprintf_r+0x1b4>
    6912:	4b19      	ldr	r3, [pc, #100]	; (6978 <_svfiprintf_r+0x1f4>)
    6914:	2b00      	cmp	r3, #0
    6916:	d106      	bne.n	6926 <_svfiprintf_r+0x1a2>
    6918:	2207      	movs	r2, #7
    691a:	9b05      	ldr	r3, [sp, #20]
    691c:	3307      	adds	r3, #7
    691e:	4393      	bics	r3, r2
    6920:	3308      	adds	r3, #8
    6922:	9305      	str	r3, [sp, #20]
    6924:	e014      	b.n	6950 <_svfiprintf_r+0x1cc>
    6926:	ab05      	add	r3, sp, #20
    6928:	9300      	str	r3, [sp, #0]
    692a:	003a      	movs	r2, r7
    692c:	4b13      	ldr	r3, [pc, #76]	; (697c <_svfiprintf_r+0x1f8>)
    692e:	0029      	movs	r1, r5
    6930:	9802      	ldr	r0, [sp, #8]
    6932:	e000      	b.n	6936 <_svfiprintf_r+0x1b2>
    6934:	bf00      	nop
    6936:	e007      	b.n	6948 <_svfiprintf_r+0x1c4>
    6938:	ab05      	add	r3, sp, #20
    693a:	9300      	str	r3, [sp, #0]
    693c:	003a      	movs	r2, r7
    693e:	4b0f      	ldr	r3, [pc, #60]	; (697c <_svfiprintf_r+0x1f8>)
    6940:	0029      	movs	r1, r5
    6942:	9802      	ldr	r0, [sp, #8]
    6944:	f000 f9ce 	bl	6ce4 <_printf_i>
    6948:	9003      	str	r0, [sp, #12]
    694a:	9b03      	ldr	r3, [sp, #12]
    694c:	3301      	adds	r3, #1
    694e:	d004      	beq.n	695a <_svfiprintf_r+0x1d6>
    6950:	696b      	ldr	r3, [r5, #20]
    6952:	9a03      	ldr	r2, [sp, #12]
    6954:	189b      	adds	r3, r3, r2
    6956:	616b      	str	r3, [r5, #20]
    6958:	e735      	b.n	67c6 <_svfiprintf_r+0x42>
    695a:	89bb      	ldrh	r3, [r7, #12]
    695c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    695e:	065b      	lsls	r3, r3, #25
    6960:	d501      	bpl.n	6966 <_svfiprintf_r+0x1e2>
    6962:	2001      	movs	r0, #1
    6964:	4240      	negs	r0, r0
    6966:	b01f      	add	sp, #124	; 0x7c
    6968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    696a:	46c0      	nop			; (mov r8, r8)
    696c:	0000872c 	.word	0x0000872c
    6970:	00008732 	.word	0x00008732
    6974:	00008736 	.word	0x00008736
    6978:	00000000 	.word	0x00000000
    697c:	000066c1 	.word	0x000066c1

00006980 <__sfputc_r>:
    6980:	6893      	ldr	r3, [r2, #8]
    6982:	b510      	push	{r4, lr}
    6984:	3b01      	subs	r3, #1
    6986:	6093      	str	r3, [r2, #8]
    6988:	2b00      	cmp	r3, #0
    698a:	da05      	bge.n	6998 <__sfputc_r+0x18>
    698c:	6994      	ldr	r4, [r2, #24]
    698e:	42a3      	cmp	r3, r4
    6990:	db08      	blt.n	69a4 <__sfputc_r+0x24>
    6992:	b2cb      	uxtb	r3, r1
    6994:	2b0a      	cmp	r3, #10
    6996:	d005      	beq.n	69a4 <__sfputc_r+0x24>
    6998:	6813      	ldr	r3, [r2, #0]
    699a:	1c58      	adds	r0, r3, #1
    699c:	6010      	str	r0, [r2, #0]
    699e:	7019      	strb	r1, [r3, #0]
    69a0:	b2c8      	uxtb	r0, r1
    69a2:	e001      	b.n	69a8 <__sfputc_r+0x28>
    69a4:	f7ff fb2c 	bl	6000 <__swbuf_r>
    69a8:	bd10      	pop	{r4, pc}

000069aa <__sfputs_r>:
    69aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69ac:	0006      	movs	r6, r0
    69ae:	000f      	movs	r7, r1
    69b0:	0014      	movs	r4, r2
    69b2:	18d5      	adds	r5, r2, r3
    69b4:	42ac      	cmp	r4, r5
    69b6:	d008      	beq.n	69ca <__sfputs_r+0x20>
    69b8:	7821      	ldrb	r1, [r4, #0]
    69ba:	003a      	movs	r2, r7
    69bc:	0030      	movs	r0, r6
    69be:	f7ff ffdf 	bl	6980 <__sfputc_r>
    69c2:	3401      	adds	r4, #1
    69c4:	1c43      	adds	r3, r0, #1
    69c6:	d1f5      	bne.n	69b4 <__sfputs_r+0xa>
    69c8:	e000      	b.n	69cc <__sfputs_r+0x22>
    69ca:	2000      	movs	r0, #0
    69cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000069d0 <_vfiprintf_r>:
    69d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69d2:	b09f      	sub	sp, #124	; 0x7c
    69d4:	0006      	movs	r6, r0
    69d6:	000f      	movs	r7, r1
    69d8:	9202      	str	r2, [sp, #8]
    69da:	9305      	str	r3, [sp, #20]
    69dc:	2800      	cmp	r0, #0
    69de:	d004      	beq.n	69ea <_vfiprintf_r+0x1a>
    69e0:	6983      	ldr	r3, [r0, #24]
    69e2:	2b00      	cmp	r3, #0
    69e4:	d101      	bne.n	69ea <_vfiprintf_r+0x1a>
    69e6:	f7ff fccd 	bl	6384 <__sinit>
    69ea:	4b7f      	ldr	r3, [pc, #508]	; (6be8 <_vfiprintf_r+0x218>)
    69ec:	429f      	cmp	r7, r3
    69ee:	d101      	bne.n	69f4 <_vfiprintf_r+0x24>
    69f0:	6877      	ldr	r7, [r6, #4]
    69f2:	e008      	b.n	6a06 <_vfiprintf_r+0x36>
    69f4:	4b7d      	ldr	r3, [pc, #500]	; (6bec <_vfiprintf_r+0x21c>)
    69f6:	429f      	cmp	r7, r3
    69f8:	d101      	bne.n	69fe <_vfiprintf_r+0x2e>
    69fa:	68b7      	ldr	r7, [r6, #8]
    69fc:	e003      	b.n	6a06 <_vfiprintf_r+0x36>
    69fe:	4b7c      	ldr	r3, [pc, #496]	; (6bf0 <_vfiprintf_r+0x220>)
    6a00:	429f      	cmp	r7, r3
    6a02:	d100      	bne.n	6a06 <_vfiprintf_r+0x36>
    6a04:	68f7      	ldr	r7, [r6, #12]
    6a06:	89bb      	ldrh	r3, [r7, #12]
    6a08:	071b      	lsls	r3, r3, #28
    6a0a:	d50a      	bpl.n	6a22 <_vfiprintf_r+0x52>
    6a0c:	693b      	ldr	r3, [r7, #16]
    6a0e:	2b00      	cmp	r3, #0
    6a10:	d007      	beq.n	6a22 <_vfiprintf_r+0x52>
    6a12:	2300      	movs	r3, #0
    6a14:	ad06      	add	r5, sp, #24
    6a16:	616b      	str	r3, [r5, #20]
    6a18:	3320      	adds	r3, #32
    6a1a:	766b      	strb	r3, [r5, #25]
    6a1c:	3310      	adds	r3, #16
    6a1e:	76ab      	strb	r3, [r5, #26]
    6a20:	e03d      	b.n	6a9e <_vfiprintf_r+0xce>
    6a22:	0039      	movs	r1, r7
    6a24:	0030      	movs	r0, r6
    6a26:	f7ff fb43 	bl	60b0 <__swsetup_r>
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d0f1      	beq.n	6a12 <_vfiprintf_r+0x42>
    6a2e:	2001      	movs	r0, #1
    6a30:	4240      	negs	r0, r0
    6a32:	e0d6      	b.n	6be2 <_vfiprintf_r+0x212>
    6a34:	9a05      	ldr	r2, [sp, #20]
    6a36:	1d11      	adds	r1, r2, #4
    6a38:	6812      	ldr	r2, [r2, #0]
    6a3a:	9105      	str	r1, [sp, #20]
    6a3c:	2a00      	cmp	r2, #0
    6a3e:	da00      	bge.n	6a42 <_vfiprintf_r+0x72>
    6a40:	e07f      	b.n	6b42 <_vfiprintf_r+0x172>
    6a42:	9209      	str	r2, [sp, #36]	; 0x24
    6a44:	3401      	adds	r4, #1
    6a46:	7823      	ldrb	r3, [r4, #0]
    6a48:	2b2e      	cmp	r3, #46	; 0x2e
    6a4a:	d100      	bne.n	6a4e <_vfiprintf_r+0x7e>
    6a4c:	e08d      	b.n	6b6a <_vfiprintf_r+0x19a>
    6a4e:	7821      	ldrb	r1, [r4, #0]
    6a50:	2203      	movs	r2, #3
    6a52:	4868      	ldr	r0, [pc, #416]	; (6bf4 <_vfiprintf_r+0x224>)
    6a54:	f000 fb5a 	bl	710c <memchr>
    6a58:	2800      	cmp	r0, #0
    6a5a:	d007      	beq.n	6a6c <_vfiprintf_r+0x9c>
    6a5c:	4b65      	ldr	r3, [pc, #404]	; (6bf4 <_vfiprintf_r+0x224>)
    6a5e:	682a      	ldr	r2, [r5, #0]
    6a60:	1ac0      	subs	r0, r0, r3
    6a62:	2340      	movs	r3, #64	; 0x40
    6a64:	4083      	lsls	r3, r0
    6a66:	4313      	orrs	r3, r2
    6a68:	602b      	str	r3, [r5, #0]
    6a6a:	3401      	adds	r4, #1
    6a6c:	7821      	ldrb	r1, [r4, #0]
    6a6e:	1c63      	adds	r3, r4, #1
    6a70:	2206      	movs	r2, #6
    6a72:	4861      	ldr	r0, [pc, #388]	; (6bf8 <_vfiprintf_r+0x228>)
    6a74:	9302      	str	r3, [sp, #8]
    6a76:	7629      	strb	r1, [r5, #24]
    6a78:	f000 fb48 	bl	710c <memchr>
    6a7c:	2800      	cmp	r0, #0
    6a7e:	d100      	bne.n	6a82 <_vfiprintf_r+0xb2>
    6a80:	e09d      	b.n	6bbe <_vfiprintf_r+0x1ee>
    6a82:	4b5e      	ldr	r3, [pc, #376]	; (6bfc <_vfiprintf_r+0x22c>)
    6a84:	2b00      	cmp	r3, #0
    6a86:	d000      	beq.n	6a8a <_vfiprintf_r+0xba>
    6a88:	e090      	b.n	6bac <_vfiprintf_r+0x1dc>
    6a8a:	2207      	movs	r2, #7
    6a8c:	9b05      	ldr	r3, [sp, #20]
    6a8e:	3307      	adds	r3, #7
    6a90:	4393      	bics	r3, r2
    6a92:	3308      	adds	r3, #8
    6a94:	9305      	str	r3, [sp, #20]
    6a96:	696b      	ldr	r3, [r5, #20]
    6a98:	9a03      	ldr	r2, [sp, #12]
    6a9a:	189b      	adds	r3, r3, r2
    6a9c:	616b      	str	r3, [r5, #20]
    6a9e:	9c02      	ldr	r4, [sp, #8]
    6aa0:	7823      	ldrb	r3, [r4, #0]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d104      	bne.n	6ab0 <_vfiprintf_r+0xe0>
    6aa6:	9b02      	ldr	r3, [sp, #8]
    6aa8:	1ae3      	subs	r3, r4, r3
    6aaa:	9304      	str	r3, [sp, #16]
    6aac:	d012      	beq.n	6ad4 <_vfiprintf_r+0x104>
    6aae:	e003      	b.n	6ab8 <_vfiprintf_r+0xe8>
    6ab0:	2b25      	cmp	r3, #37	; 0x25
    6ab2:	d0f8      	beq.n	6aa6 <_vfiprintf_r+0xd6>
    6ab4:	3401      	adds	r4, #1
    6ab6:	e7f3      	b.n	6aa0 <_vfiprintf_r+0xd0>
    6ab8:	9b04      	ldr	r3, [sp, #16]
    6aba:	9a02      	ldr	r2, [sp, #8]
    6abc:	0039      	movs	r1, r7
    6abe:	0030      	movs	r0, r6
    6ac0:	f7ff ff73 	bl	69aa <__sfputs_r>
    6ac4:	1c43      	adds	r3, r0, #1
    6ac6:	d100      	bne.n	6aca <_vfiprintf_r+0xfa>
    6ac8:	e086      	b.n	6bd8 <_vfiprintf_r+0x208>
    6aca:	696a      	ldr	r2, [r5, #20]
    6acc:	9b04      	ldr	r3, [sp, #16]
    6ace:	4694      	mov	ip, r2
    6ad0:	4463      	add	r3, ip
    6ad2:	616b      	str	r3, [r5, #20]
    6ad4:	7823      	ldrb	r3, [r4, #0]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d07e      	beq.n	6bd8 <_vfiprintf_r+0x208>
    6ada:	2201      	movs	r2, #1
    6adc:	2300      	movs	r3, #0
    6ade:	4252      	negs	r2, r2
    6ae0:	606a      	str	r2, [r5, #4]
    6ae2:	a902      	add	r1, sp, #8
    6ae4:	3254      	adds	r2, #84	; 0x54
    6ae6:	1852      	adds	r2, r2, r1
    6ae8:	3401      	adds	r4, #1
    6aea:	602b      	str	r3, [r5, #0]
    6aec:	60eb      	str	r3, [r5, #12]
    6aee:	60ab      	str	r3, [r5, #8]
    6af0:	7013      	strb	r3, [r2, #0]
    6af2:	65ab      	str	r3, [r5, #88]	; 0x58
    6af4:	7821      	ldrb	r1, [r4, #0]
    6af6:	2205      	movs	r2, #5
    6af8:	4841      	ldr	r0, [pc, #260]	; (6c00 <_vfiprintf_r+0x230>)
    6afa:	f000 fb07 	bl	710c <memchr>
    6afe:	2800      	cmp	r0, #0
    6b00:	d008      	beq.n	6b14 <_vfiprintf_r+0x144>
    6b02:	4b3f      	ldr	r3, [pc, #252]	; (6c00 <_vfiprintf_r+0x230>)
    6b04:	682a      	ldr	r2, [r5, #0]
    6b06:	1ac0      	subs	r0, r0, r3
    6b08:	2301      	movs	r3, #1
    6b0a:	4083      	lsls	r3, r0
    6b0c:	4313      	orrs	r3, r2
    6b0e:	602b      	str	r3, [r5, #0]
    6b10:	3401      	adds	r4, #1
    6b12:	e7ef      	b.n	6af4 <_vfiprintf_r+0x124>
    6b14:	682b      	ldr	r3, [r5, #0]
    6b16:	06da      	lsls	r2, r3, #27
    6b18:	d504      	bpl.n	6b24 <_vfiprintf_r+0x154>
    6b1a:	2253      	movs	r2, #83	; 0x53
    6b1c:	2120      	movs	r1, #32
    6b1e:	a802      	add	r0, sp, #8
    6b20:	1812      	adds	r2, r2, r0
    6b22:	7011      	strb	r1, [r2, #0]
    6b24:	071a      	lsls	r2, r3, #28
    6b26:	d504      	bpl.n	6b32 <_vfiprintf_r+0x162>
    6b28:	2253      	movs	r2, #83	; 0x53
    6b2a:	212b      	movs	r1, #43	; 0x2b
    6b2c:	a802      	add	r0, sp, #8
    6b2e:	1812      	adds	r2, r2, r0
    6b30:	7011      	strb	r1, [r2, #0]
    6b32:	7822      	ldrb	r2, [r4, #0]
    6b34:	2a2a      	cmp	r2, #42	; 0x2a
    6b36:	d100      	bne.n	6b3a <_vfiprintf_r+0x16a>
    6b38:	e77c      	b.n	6a34 <_vfiprintf_r+0x64>
    6b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b3c:	2000      	movs	r0, #0
    6b3e:	210a      	movs	r1, #10
    6b40:	e005      	b.n	6b4e <_vfiprintf_r+0x17e>
    6b42:	4252      	negs	r2, r2
    6b44:	60ea      	str	r2, [r5, #12]
    6b46:	2202      	movs	r2, #2
    6b48:	4313      	orrs	r3, r2
    6b4a:	602b      	str	r3, [r5, #0]
    6b4c:	e77a      	b.n	6a44 <_vfiprintf_r+0x74>
    6b4e:	7822      	ldrb	r2, [r4, #0]
    6b50:	3a30      	subs	r2, #48	; 0x30
    6b52:	2a09      	cmp	r2, #9
    6b54:	d804      	bhi.n	6b60 <_vfiprintf_r+0x190>
    6b56:	434b      	muls	r3, r1
    6b58:	3401      	adds	r4, #1
    6b5a:	189b      	adds	r3, r3, r2
    6b5c:	2001      	movs	r0, #1
    6b5e:	e7f6      	b.n	6b4e <_vfiprintf_r+0x17e>
    6b60:	2800      	cmp	r0, #0
    6b62:	d100      	bne.n	6b66 <_vfiprintf_r+0x196>
    6b64:	e76f      	b.n	6a46 <_vfiprintf_r+0x76>
    6b66:	9309      	str	r3, [sp, #36]	; 0x24
    6b68:	e76d      	b.n	6a46 <_vfiprintf_r+0x76>
    6b6a:	7863      	ldrb	r3, [r4, #1]
    6b6c:	2b2a      	cmp	r3, #42	; 0x2a
    6b6e:	d10a      	bne.n	6b86 <_vfiprintf_r+0x1b6>
    6b70:	9b05      	ldr	r3, [sp, #20]
    6b72:	3402      	adds	r4, #2
    6b74:	1d1a      	adds	r2, r3, #4
    6b76:	681b      	ldr	r3, [r3, #0]
    6b78:	9205      	str	r2, [sp, #20]
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	da01      	bge.n	6b82 <_vfiprintf_r+0x1b2>
    6b7e:	2301      	movs	r3, #1
    6b80:	425b      	negs	r3, r3
    6b82:	9307      	str	r3, [sp, #28]
    6b84:	e763      	b.n	6a4e <_vfiprintf_r+0x7e>
    6b86:	2300      	movs	r3, #0
    6b88:	200a      	movs	r0, #10
    6b8a:	001a      	movs	r2, r3
    6b8c:	3401      	adds	r4, #1
    6b8e:	606b      	str	r3, [r5, #4]
    6b90:	7821      	ldrb	r1, [r4, #0]
    6b92:	3930      	subs	r1, #48	; 0x30
    6b94:	2909      	cmp	r1, #9
    6b96:	d804      	bhi.n	6ba2 <_vfiprintf_r+0x1d2>
    6b98:	4342      	muls	r2, r0
    6b9a:	3401      	adds	r4, #1
    6b9c:	1852      	adds	r2, r2, r1
    6b9e:	2301      	movs	r3, #1
    6ba0:	e7f6      	b.n	6b90 <_vfiprintf_r+0x1c0>
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d100      	bne.n	6ba8 <_vfiprintf_r+0x1d8>
    6ba6:	e752      	b.n	6a4e <_vfiprintf_r+0x7e>
    6ba8:	9207      	str	r2, [sp, #28]
    6baa:	e750      	b.n	6a4e <_vfiprintf_r+0x7e>
    6bac:	ab05      	add	r3, sp, #20
    6bae:	9300      	str	r3, [sp, #0]
    6bb0:	003a      	movs	r2, r7
    6bb2:	4b14      	ldr	r3, [pc, #80]	; (6c04 <_vfiprintf_r+0x234>)
    6bb4:	0029      	movs	r1, r5
    6bb6:	0030      	movs	r0, r6
    6bb8:	e000      	b.n	6bbc <_vfiprintf_r+0x1ec>
    6bba:	bf00      	nop
    6bbc:	e007      	b.n	6bce <_vfiprintf_r+0x1fe>
    6bbe:	ab05      	add	r3, sp, #20
    6bc0:	9300      	str	r3, [sp, #0]
    6bc2:	003a      	movs	r2, r7
    6bc4:	4b0f      	ldr	r3, [pc, #60]	; (6c04 <_vfiprintf_r+0x234>)
    6bc6:	0029      	movs	r1, r5
    6bc8:	0030      	movs	r0, r6
    6bca:	f000 f88b 	bl	6ce4 <_printf_i>
    6bce:	9003      	str	r0, [sp, #12]
    6bd0:	9b03      	ldr	r3, [sp, #12]
    6bd2:	3301      	adds	r3, #1
    6bd4:	d000      	beq.n	6bd8 <_vfiprintf_r+0x208>
    6bd6:	e75e      	b.n	6a96 <_vfiprintf_r+0xc6>
    6bd8:	89bb      	ldrh	r3, [r7, #12]
    6bda:	065b      	lsls	r3, r3, #25
    6bdc:	d500      	bpl.n	6be0 <_vfiprintf_r+0x210>
    6bde:	e726      	b.n	6a2e <_vfiprintf_r+0x5e>
    6be0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6be2:	b01f      	add	sp, #124	; 0x7c
    6be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	000086cc 	.word	0x000086cc
    6bec:	000086ec 	.word	0x000086ec
    6bf0:	0000870c 	.word	0x0000870c
    6bf4:	00008732 	.word	0x00008732
    6bf8:	00008736 	.word	0x00008736
    6bfc:	00000000 	.word	0x00000000
    6c00:	0000872c 	.word	0x0000872c
    6c04:	000069ab 	.word	0x000069ab

00006c08 <_printf_common>:
    6c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c0a:	0017      	movs	r7, r2
    6c0c:	9301      	str	r3, [sp, #4]
    6c0e:	688a      	ldr	r2, [r1, #8]
    6c10:	690b      	ldr	r3, [r1, #16]
    6c12:	9000      	str	r0, [sp, #0]
    6c14:	000c      	movs	r4, r1
    6c16:	4293      	cmp	r3, r2
    6c18:	da00      	bge.n	6c1c <_printf_common+0x14>
    6c1a:	0013      	movs	r3, r2
    6c1c:	0022      	movs	r2, r4
    6c1e:	603b      	str	r3, [r7, #0]
    6c20:	3243      	adds	r2, #67	; 0x43
    6c22:	7812      	ldrb	r2, [r2, #0]
    6c24:	2a00      	cmp	r2, #0
    6c26:	d001      	beq.n	6c2c <_printf_common+0x24>
    6c28:	3301      	adds	r3, #1
    6c2a:	603b      	str	r3, [r7, #0]
    6c2c:	6823      	ldr	r3, [r4, #0]
    6c2e:	069b      	lsls	r3, r3, #26
    6c30:	d502      	bpl.n	6c38 <_printf_common+0x30>
    6c32:	683b      	ldr	r3, [r7, #0]
    6c34:	3302      	adds	r3, #2
    6c36:	603b      	str	r3, [r7, #0]
    6c38:	2506      	movs	r5, #6
    6c3a:	6823      	ldr	r3, [r4, #0]
    6c3c:	401d      	ands	r5, r3
    6c3e:	d01e      	beq.n	6c7e <_printf_common+0x76>
    6c40:	0023      	movs	r3, r4
    6c42:	3343      	adds	r3, #67	; 0x43
    6c44:	781b      	ldrb	r3, [r3, #0]
    6c46:	1e5a      	subs	r2, r3, #1
    6c48:	4193      	sbcs	r3, r2
    6c4a:	6822      	ldr	r2, [r4, #0]
    6c4c:	0692      	lsls	r2, r2, #26
    6c4e:	d51c      	bpl.n	6c8a <_printf_common+0x82>
    6c50:	2030      	movs	r0, #48	; 0x30
    6c52:	18e1      	adds	r1, r4, r3
    6c54:	3143      	adds	r1, #67	; 0x43
    6c56:	7008      	strb	r0, [r1, #0]
    6c58:	0021      	movs	r1, r4
    6c5a:	1c5a      	adds	r2, r3, #1
    6c5c:	3145      	adds	r1, #69	; 0x45
    6c5e:	7809      	ldrb	r1, [r1, #0]
    6c60:	18a2      	adds	r2, r4, r2
    6c62:	3243      	adds	r2, #67	; 0x43
    6c64:	3302      	adds	r3, #2
    6c66:	7011      	strb	r1, [r2, #0]
    6c68:	e00f      	b.n	6c8a <_printf_common+0x82>
    6c6a:	0022      	movs	r2, r4
    6c6c:	2301      	movs	r3, #1
    6c6e:	3219      	adds	r2, #25
    6c70:	9901      	ldr	r1, [sp, #4]
    6c72:	9800      	ldr	r0, [sp, #0]
    6c74:	9e08      	ldr	r6, [sp, #32]
    6c76:	47b0      	blx	r6
    6c78:	1c43      	adds	r3, r0, #1
    6c7a:	d00e      	beq.n	6c9a <_printf_common+0x92>
    6c7c:	3501      	adds	r5, #1
    6c7e:	68e3      	ldr	r3, [r4, #12]
    6c80:	683a      	ldr	r2, [r7, #0]
    6c82:	1a9b      	subs	r3, r3, r2
    6c84:	429d      	cmp	r5, r3
    6c86:	dbf0      	blt.n	6c6a <_printf_common+0x62>
    6c88:	e7da      	b.n	6c40 <_printf_common+0x38>
    6c8a:	0022      	movs	r2, r4
    6c8c:	9901      	ldr	r1, [sp, #4]
    6c8e:	3243      	adds	r2, #67	; 0x43
    6c90:	9800      	ldr	r0, [sp, #0]
    6c92:	9d08      	ldr	r5, [sp, #32]
    6c94:	47a8      	blx	r5
    6c96:	1c43      	adds	r3, r0, #1
    6c98:	d102      	bne.n	6ca0 <_printf_common+0x98>
    6c9a:	2001      	movs	r0, #1
    6c9c:	4240      	negs	r0, r0
    6c9e:	e020      	b.n	6ce2 <_printf_common+0xda>
    6ca0:	2306      	movs	r3, #6
    6ca2:	6820      	ldr	r0, [r4, #0]
    6ca4:	68e1      	ldr	r1, [r4, #12]
    6ca6:	683a      	ldr	r2, [r7, #0]
    6ca8:	4003      	ands	r3, r0
    6caa:	2500      	movs	r5, #0
    6cac:	2b04      	cmp	r3, #4
    6cae:	d103      	bne.n	6cb8 <_printf_common+0xb0>
    6cb0:	1a8d      	subs	r5, r1, r2
    6cb2:	43eb      	mvns	r3, r5
    6cb4:	17db      	asrs	r3, r3, #31
    6cb6:	401d      	ands	r5, r3
    6cb8:	68a3      	ldr	r3, [r4, #8]
    6cba:	6922      	ldr	r2, [r4, #16]
    6cbc:	4293      	cmp	r3, r2
    6cbe:	dd01      	ble.n	6cc4 <_printf_common+0xbc>
    6cc0:	1a9b      	subs	r3, r3, r2
    6cc2:	18ed      	adds	r5, r5, r3
    6cc4:	2700      	movs	r7, #0
    6cc6:	42bd      	cmp	r5, r7
    6cc8:	d00a      	beq.n	6ce0 <_printf_common+0xd8>
    6cca:	0022      	movs	r2, r4
    6ccc:	2301      	movs	r3, #1
    6cce:	321a      	adds	r2, #26
    6cd0:	9901      	ldr	r1, [sp, #4]
    6cd2:	9800      	ldr	r0, [sp, #0]
    6cd4:	9e08      	ldr	r6, [sp, #32]
    6cd6:	47b0      	blx	r6
    6cd8:	1c43      	adds	r3, r0, #1
    6cda:	d0de      	beq.n	6c9a <_printf_common+0x92>
    6cdc:	3701      	adds	r7, #1
    6cde:	e7f2      	b.n	6cc6 <_printf_common+0xbe>
    6ce0:	2000      	movs	r0, #0
    6ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006ce4 <_printf_i>:
    6ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ce6:	b08b      	sub	sp, #44	; 0x2c
    6ce8:	9206      	str	r2, [sp, #24]
    6cea:	000a      	movs	r2, r1
    6cec:	3243      	adds	r2, #67	; 0x43
    6cee:	9307      	str	r3, [sp, #28]
    6cf0:	9005      	str	r0, [sp, #20]
    6cf2:	9204      	str	r2, [sp, #16]
    6cf4:	7e0a      	ldrb	r2, [r1, #24]
    6cf6:	000c      	movs	r4, r1
    6cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6cfa:	2a6e      	cmp	r2, #110	; 0x6e
    6cfc:	d100      	bne.n	6d00 <_printf_i+0x1c>
    6cfe:	e0ab      	b.n	6e58 <_printf_i+0x174>
    6d00:	d811      	bhi.n	6d26 <_printf_i+0x42>
    6d02:	2a63      	cmp	r2, #99	; 0x63
    6d04:	d022      	beq.n	6d4c <_printf_i+0x68>
    6d06:	d809      	bhi.n	6d1c <_printf_i+0x38>
    6d08:	2a00      	cmp	r2, #0
    6d0a:	d100      	bne.n	6d0e <_printf_i+0x2a>
    6d0c:	e0b5      	b.n	6e7a <_printf_i+0x196>
    6d0e:	2a58      	cmp	r2, #88	; 0x58
    6d10:	d000      	beq.n	6d14 <_printf_i+0x30>
    6d12:	e0c5      	b.n	6ea0 <_printf_i+0x1bc>
    6d14:	3145      	adds	r1, #69	; 0x45
    6d16:	700a      	strb	r2, [r1, #0]
    6d18:	4a81      	ldr	r2, [pc, #516]	; (6f20 <_printf_i+0x23c>)
    6d1a:	e04f      	b.n	6dbc <_printf_i+0xd8>
    6d1c:	2a64      	cmp	r2, #100	; 0x64
    6d1e:	d01d      	beq.n	6d5c <_printf_i+0x78>
    6d20:	2a69      	cmp	r2, #105	; 0x69
    6d22:	d01b      	beq.n	6d5c <_printf_i+0x78>
    6d24:	e0bc      	b.n	6ea0 <_printf_i+0x1bc>
    6d26:	2a73      	cmp	r2, #115	; 0x73
    6d28:	d100      	bne.n	6d2c <_printf_i+0x48>
    6d2a:	e0aa      	b.n	6e82 <_printf_i+0x19e>
    6d2c:	d809      	bhi.n	6d42 <_printf_i+0x5e>
    6d2e:	2a6f      	cmp	r2, #111	; 0x6f
    6d30:	d029      	beq.n	6d86 <_printf_i+0xa2>
    6d32:	2a70      	cmp	r2, #112	; 0x70
    6d34:	d000      	beq.n	6d38 <_printf_i+0x54>
    6d36:	e0b3      	b.n	6ea0 <_printf_i+0x1bc>
    6d38:	2220      	movs	r2, #32
    6d3a:	6809      	ldr	r1, [r1, #0]
    6d3c:	430a      	orrs	r2, r1
    6d3e:	6022      	str	r2, [r4, #0]
    6d40:	e037      	b.n	6db2 <_printf_i+0xce>
    6d42:	2a75      	cmp	r2, #117	; 0x75
    6d44:	d01f      	beq.n	6d86 <_printf_i+0xa2>
    6d46:	2a78      	cmp	r2, #120	; 0x78
    6d48:	d033      	beq.n	6db2 <_printf_i+0xce>
    6d4a:	e0a9      	b.n	6ea0 <_printf_i+0x1bc>
    6d4c:	000e      	movs	r6, r1
    6d4e:	681a      	ldr	r2, [r3, #0]
    6d50:	3642      	adds	r6, #66	; 0x42
    6d52:	1d11      	adds	r1, r2, #4
    6d54:	6019      	str	r1, [r3, #0]
    6d56:	6813      	ldr	r3, [r2, #0]
    6d58:	7033      	strb	r3, [r6, #0]
    6d5a:	e0a4      	b.n	6ea6 <_printf_i+0x1c2>
    6d5c:	6821      	ldr	r1, [r4, #0]
    6d5e:	681a      	ldr	r2, [r3, #0]
    6d60:	0608      	lsls	r0, r1, #24
    6d62:	d406      	bmi.n	6d72 <_printf_i+0x8e>
    6d64:	0649      	lsls	r1, r1, #25
    6d66:	d504      	bpl.n	6d72 <_printf_i+0x8e>
    6d68:	1d11      	adds	r1, r2, #4
    6d6a:	6019      	str	r1, [r3, #0]
    6d6c:	2300      	movs	r3, #0
    6d6e:	5ed5      	ldrsh	r5, [r2, r3]
    6d70:	e002      	b.n	6d78 <_printf_i+0x94>
    6d72:	1d11      	adds	r1, r2, #4
    6d74:	6019      	str	r1, [r3, #0]
    6d76:	6815      	ldr	r5, [r2, #0]
    6d78:	2d00      	cmp	r5, #0
    6d7a:	da3b      	bge.n	6df4 <_printf_i+0x110>
    6d7c:	232d      	movs	r3, #45	; 0x2d
    6d7e:	9a04      	ldr	r2, [sp, #16]
    6d80:	426d      	negs	r5, r5
    6d82:	7013      	strb	r3, [r2, #0]
    6d84:	e036      	b.n	6df4 <_printf_i+0x110>
    6d86:	6821      	ldr	r1, [r4, #0]
    6d88:	681a      	ldr	r2, [r3, #0]
    6d8a:	0608      	lsls	r0, r1, #24
    6d8c:	d406      	bmi.n	6d9c <_printf_i+0xb8>
    6d8e:	0649      	lsls	r1, r1, #25
    6d90:	d504      	bpl.n	6d9c <_printf_i+0xb8>
    6d92:	6815      	ldr	r5, [r2, #0]
    6d94:	1d11      	adds	r1, r2, #4
    6d96:	6019      	str	r1, [r3, #0]
    6d98:	b2ad      	uxth	r5, r5
    6d9a:	e002      	b.n	6da2 <_printf_i+0xbe>
    6d9c:	1d11      	adds	r1, r2, #4
    6d9e:	6019      	str	r1, [r3, #0]
    6da0:	6815      	ldr	r5, [r2, #0]
    6da2:	4b5f      	ldr	r3, [pc, #380]	; (6f20 <_printf_i+0x23c>)
    6da4:	7e22      	ldrb	r2, [r4, #24]
    6da6:	9303      	str	r3, [sp, #12]
    6da8:	2708      	movs	r7, #8
    6daa:	2a6f      	cmp	r2, #111	; 0x6f
    6dac:	d01d      	beq.n	6dea <_printf_i+0x106>
    6dae:	270a      	movs	r7, #10
    6db0:	e01b      	b.n	6dea <_printf_i+0x106>
    6db2:	0022      	movs	r2, r4
    6db4:	2178      	movs	r1, #120	; 0x78
    6db6:	3245      	adds	r2, #69	; 0x45
    6db8:	7011      	strb	r1, [r2, #0]
    6dba:	4a5a      	ldr	r2, [pc, #360]	; (6f24 <_printf_i+0x240>)
    6dbc:	6819      	ldr	r1, [r3, #0]
    6dbe:	9203      	str	r2, [sp, #12]
    6dc0:	1d08      	adds	r0, r1, #4
    6dc2:	6822      	ldr	r2, [r4, #0]
    6dc4:	6018      	str	r0, [r3, #0]
    6dc6:	680d      	ldr	r5, [r1, #0]
    6dc8:	0610      	lsls	r0, r2, #24
    6dca:	d402      	bmi.n	6dd2 <_printf_i+0xee>
    6dcc:	0650      	lsls	r0, r2, #25
    6dce:	d500      	bpl.n	6dd2 <_printf_i+0xee>
    6dd0:	b2ad      	uxth	r5, r5
    6dd2:	07d3      	lsls	r3, r2, #31
    6dd4:	d502      	bpl.n	6ddc <_printf_i+0xf8>
    6dd6:	2320      	movs	r3, #32
    6dd8:	431a      	orrs	r2, r3
    6dda:	6022      	str	r2, [r4, #0]
    6ddc:	2710      	movs	r7, #16
    6dde:	2d00      	cmp	r5, #0
    6de0:	d103      	bne.n	6dea <_printf_i+0x106>
    6de2:	2320      	movs	r3, #32
    6de4:	6822      	ldr	r2, [r4, #0]
    6de6:	439a      	bics	r2, r3
    6de8:	6022      	str	r2, [r4, #0]
    6dea:	0023      	movs	r3, r4
    6dec:	2200      	movs	r2, #0
    6dee:	3343      	adds	r3, #67	; 0x43
    6df0:	701a      	strb	r2, [r3, #0]
    6df2:	e002      	b.n	6dfa <_printf_i+0x116>
    6df4:	270a      	movs	r7, #10
    6df6:	4b4a      	ldr	r3, [pc, #296]	; (6f20 <_printf_i+0x23c>)
    6df8:	9303      	str	r3, [sp, #12]
    6dfa:	6863      	ldr	r3, [r4, #4]
    6dfc:	60a3      	str	r3, [r4, #8]
    6dfe:	2b00      	cmp	r3, #0
    6e00:	db09      	blt.n	6e16 <_printf_i+0x132>
    6e02:	2204      	movs	r2, #4
    6e04:	6821      	ldr	r1, [r4, #0]
    6e06:	4391      	bics	r1, r2
    6e08:	6021      	str	r1, [r4, #0]
    6e0a:	2d00      	cmp	r5, #0
    6e0c:	d105      	bne.n	6e1a <_printf_i+0x136>
    6e0e:	9e04      	ldr	r6, [sp, #16]
    6e10:	2b00      	cmp	r3, #0
    6e12:	d011      	beq.n	6e38 <_printf_i+0x154>
    6e14:	e07b      	b.n	6f0e <_printf_i+0x22a>
    6e16:	2d00      	cmp	r5, #0
    6e18:	d079      	beq.n	6f0e <_printf_i+0x22a>
    6e1a:	9e04      	ldr	r6, [sp, #16]
    6e1c:	0028      	movs	r0, r5
    6e1e:	0039      	movs	r1, r7
    6e20:	f7fe fefa 	bl	5c18 <__aeabi_uidivmod>
    6e24:	9b03      	ldr	r3, [sp, #12]
    6e26:	3e01      	subs	r6, #1
    6e28:	5c5b      	ldrb	r3, [r3, r1]
    6e2a:	0028      	movs	r0, r5
    6e2c:	7033      	strb	r3, [r6, #0]
    6e2e:	0039      	movs	r1, r7
    6e30:	f7fe fe6c 	bl	5b0c <__aeabi_uidiv>
    6e34:	1e05      	subs	r5, r0, #0
    6e36:	d1f1      	bne.n	6e1c <_printf_i+0x138>
    6e38:	2f08      	cmp	r7, #8
    6e3a:	d109      	bne.n	6e50 <_printf_i+0x16c>
    6e3c:	6823      	ldr	r3, [r4, #0]
    6e3e:	07db      	lsls	r3, r3, #31
    6e40:	d506      	bpl.n	6e50 <_printf_i+0x16c>
    6e42:	6863      	ldr	r3, [r4, #4]
    6e44:	6922      	ldr	r2, [r4, #16]
    6e46:	4293      	cmp	r3, r2
    6e48:	dc02      	bgt.n	6e50 <_printf_i+0x16c>
    6e4a:	2330      	movs	r3, #48	; 0x30
    6e4c:	3e01      	subs	r6, #1
    6e4e:	7033      	strb	r3, [r6, #0]
    6e50:	9b04      	ldr	r3, [sp, #16]
    6e52:	1b9b      	subs	r3, r3, r6
    6e54:	6123      	str	r3, [r4, #16]
    6e56:	e02b      	b.n	6eb0 <_printf_i+0x1cc>
    6e58:	6809      	ldr	r1, [r1, #0]
    6e5a:	681a      	ldr	r2, [r3, #0]
    6e5c:	0608      	lsls	r0, r1, #24
    6e5e:	d407      	bmi.n	6e70 <_printf_i+0x18c>
    6e60:	0649      	lsls	r1, r1, #25
    6e62:	d505      	bpl.n	6e70 <_printf_i+0x18c>
    6e64:	1d11      	adds	r1, r2, #4
    6e66:	6019      	str	r1, [r3, #0]
    6e68:	6813      	ldr	r3, [r2, #0]
    6e6a:	8aa2      	ldrh	r2, [r4, #20]
    6e6c:	801a      	strh	r2, [r3, #0]
    6e6e:	e004      	b.n	6e7a <_printf_i+0x196>
    6e70:	1d11      	adds	r1, r2, #4
    6e72:	6019      	str	r1, [r3, #0]
    6e74:	6813      	ldr	r3, [r2, #0]
    6e76:	6962      	ldr	r2, [r4, #20]
    6e78:	601a      	str	r2, [r3, #0]
    6e7a:	2300      	movs	r3, #0
    6e7c:	9e04      	ldr	r6, [sp, #16]
    6e7e:	6123      	str	r3, [r4, #16]
    6e80:	e016      	b.n	6eb0 <_printf_i+0x1cc>
    6e82:	681a      	ldr	r2, [r3, #0]
    6e84:	1d11      	adds	r1, r2, #4
    6e86:	6019      	str	r1, [r3, #0]
    6e88:	6816      	ldr	r6, [r2, #0]
    6e8a:	2100      	movs	r1, #0
    6e8c:	6862      	ldr	r2, [r4, #4]
    6e8e:	0030      	movs	r0, r6
    6e90:	f000 f93c 	bl	710c <memchr>
    6e94:	2800      	cmp	r0, #0
    6e96:	d001      	beq.n	6e9c <_printf_i+0x1b8>
    6e98:	1b80      	subs	r0, r0, r6
    6e9a:	6060      	str	r0, [r4, #4]
    6e9c:	6863      	ldr	r3, [r4, #4]
    6e9e:	e003      	b.n	6ea8 <_printf_i+0x1c4>
    6ea0:	0026      	movs	r6, r4
    6ea2:	3642      	adds	r6, #66	; 0x42
    6ea4:	7032      	strb	r2, [r6, #0]
    6ea6:	2301      	movs	r3, #1
    6ea8:	6123      	str	r3, [r4, #16]
    6eaa:	2300      	movs	r3, #0
    6eac:	9a04      	ldr	r2, [sp, #16]
    6eae:	7013      	strb	r3, [r2, #0]
    6eb0:	9b07      	ldr	r3, [sp, #28]
    6eb2:	aa09      	add	r2, sp, #36	; 0x24
    6eb4:	9300      	str	r3, [sp, #0]
    6eb6:	0021      	movs	r1, r4
    6eb8:	9b06      	ldr	r3, [sp, #24]
    6eba:	9805      	ldr	r0, [sp, #20]
    6ebc:	f7ff fea4 	bl	6c08 <_printf_common>
    6ec0:	1c43      	adds	r3, r0, #1
    6ec2:	d102      	bne.n	6eca <_printf_i+0x1e6>
    6ec4:	2001      	movs	r0, #1
    6ec6:	4240      	negs	r0, r0
    6ec8:	e027      	b.n	6f1a <_printf_i+0x236>
    6eca:	6923      	ldr	r3, [r4, #16]
    6ecc:	0032      	movs	r2, r6
    6ece:	9906      	ldr	r1, [sp, #24]
    6ed0:	9805      	ldr	r0, [sp, #20]
    6ed2:	9d07      	ldr	r5, [sp, #28]
    6ed4:	47a8      	blx	r5
    6ed6:	1c43      	adds	r3, r0, #1
    6ed8:	d0f4      	beq.n	6ec4 <_printf_i+0x1e0>
    6eda:	6823      	ldr	r3, [r4, #0]
    6edc:	2500      	movs	r5, #0
    6ede:	079b      	lsls	r3, r3, #30
    6ee0:	d40f      	bmi.n	6f02 <_printf_i+0x21e>
    6ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ee4:	68e0      	ldr	r0, [r4, #12]
    6ee6:	4298      	cmp	r0, r3
    6ee8:	da17      	bge.n	6f1a <_printf_i+0x236>
    6eea:	0018      	movs	r0, r3
    6eec:	e015      	b.n	6f1a <_printf_i+0x236>
    6eee:	0022      	movs	r2, r4
    6ef0:	2301      	movs	r3, #1
    6ef2:	3219      	adds	r2, #25
    6ef4:	9906      	ldr	r1, [sp, #24]
    6ef6:	9805      	ldr	r0, [sp, #20]
    6ef8:	9e07      	ldr	r6, [sp, #28]
    6efa:	47b0      	blx	r6
    6efc:	1c43      	adds	r3, r0, #1
    6efe:	d0e1      	beq.n	6ec4 <_printf_i+0x1e0>
    6f00:	3501      	adds	r5, #1
    6f02:	68e3      	ldr	r3, [r4, #12]
    6f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f06:	1a9b      	subs	r3, r3, r2
    6f08:	429d      	cmp	r5, r3
    6f0a:	dbf0      	blt.n	6eee <_printf_i+0x20a>
    6f0c:	e7e9      	b.n	6ee2 <_printf_i+0x1fe>
    6f0e:	0026      	movs	r6, r4
    6f10:	9b03      	ldr	r3, [sp, #12]
    6f12:	3642      	adds	r6, #66	; 0x42
    6f14:	781b      	ldrb	r3, [r3, #0]
    6f16:	7033      	strb	r3, [r6, #0]
    6f18:	e78e      	b.n	6e38 <_printf_i+0x154>
    6f1a:	b00b      	add	sp, #44	; 0x2c
    6f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	0000873d 	.word	0x0000873d
    6f24:	0000874e 	.word	0x0000874e

00006f28 <_putc_r>:
    6f28:	b570      	push	{r4, r5, r6, lr}
    6f2a:	0006      	movs	r6, r0
    6f2c:	000d      	movs	r5, r1
    6f2e:	0014      	movs	r4, r2
    6f30:	2800      	cmp	r0, #0
    6f32:	d004      	beq.n	6f3e <_putc_r+0x16>
    6f34:	6983      	ldr	r3, [r0, #24]
    6f36:	2b00      	cmp	r3, #0
    6f38:	d101      	bne.n	6f3e <_putc_r+0x16>
    6f3a:	f7ff fa23 	bl	6384 <__sinit>
    6f3e:	4b12      	ldr	r3, [pc, #72]	; (6f88 <_putc_r+0x60>)
    6f40:	429c      	cmp	r4, r3
    6f42:	d101      	bne.n	6f48 <_putc_r+0x20>
    6f44:	6874      	ldr	r4, [r6, #4]
    6f46:	e008      	b.n	6f5a <_putc_r+0x32>
    6f48:	4b10      	ldr	r3, [pc, #64]	; (6f8c <_putc_r+0x64>)
    6f4a:	429c      	cmp	r4, r3
    6f4c:	d101      	bne.n	6f52 <_putc_r+0x2a>
    6f4e:	68b4      	ldr	r4, [r6, #8]
    6f50:	e003      	b.n	6f5a <_putc_r+0x32>
    6f52:	4b0f      	ldr	r3, [pc, #60]	; (6f90 <_putc_r+0x68>)
    6f54:	429c      	cmp	r4, r3
    6f56:	d100      	bne.n	6f5a <_putc_r+0x32>
    6f58:	68f4      	ldr	r4, [r6, #12]
    6f5a:	68a3      	ldr	r3, [r4, #8]
    6f5c:	3b01      	subs	r3, #1
    6f5e:	60a3      	str	r3, [r4, #8]
    6f60:	2b00      	cmp	r3, #0
    6f62:	da05      	bge.n	6f70 <_putc_r+0x48>
    6f64:	69a2      	ldr	r2, [r4, #24]
    6f66:	4293      	cmp	r3, r2
    6f68:	db08      	blt.n	6f7c <_putc_r+0x54>
    6f6a:	b2eb      	uxtb	r3, r5
    6f6c:	2b0a      	cmp	r3, #10
    6f6e:	d005      	beq.n	6f7c <_putc_r+0x54>
    6f70:	6823      	ldr	r3, [r4, #0]
    6f72:	b2e8      	uxtb	r0, r5
    6f74:	1c5a      	adds	r2, r3, #1
    6f76:	6022      	str	r2, [r4, #0]
    6f78:	701d      	strb	r5, [r3, #0]
    6f7a:	e004      	b.n	6f86 <_putc_r+0x5e>
    6f7c:	0022      	movs	r2, r4
    6f7e:	0029      	movs	r1, r5
    6f80:	0030      	movs	r0, r6
    6f82:	f7ff f83d 	bl	6000 <__swbuf_r>
    6f86:	bd70      	pop	{r4, r5, r6, pc}
    6f88:	000086cc 	.word	0x000086cc
    6f8c:	000086ec 	.word	0x000086ec
    6f90:	0000870c 	.word	0x0000870c

00006f94 <_sbrk_r>:
    6f94:	2300      	movs	r3, #0
    6f96:	b570      	push	{r4, r5, r6, lr}
    6f98:	4c06      	ldr	r4, [pc, #24]	; (6fb4 <_sbrk_r+0x20>)
    6f9a:	0005      	movs	r5, r0
    6f9c:	0008      	movs	r0, r1
    6f9e:	6023      	str	r3, [r4, #0]
    6fa0:	f7fd fee2 	bl	4d68 <_sbrk>
    6fa4:	1c43      	adds	r3, r0, #1
    6fa6:	d103      	bne.n	6fb0 <_sbrk_r+0x1c>
    6fa8:	6823      	ldr	r3, [r4, #0]
    6faa:	2b00      	cmp	r3, #0
    6fac:	d000      	beq.n	6fb0 <_sbrk_r+0x1c>
    6fae:	602b      	str	r3, [r5, #0]
    6fb0:	bd70      	pop	{r4, r5, r6, pc}
    6fb2:	46c0      	nop			; (mov r8, r8)
    6fb4:	200003d4 	.word	0x200003d4

00006fb8 <__sread>:
    6fb8:	b570      	push	{r4, r5, r6, lr}
    6fba:	000c      	movs	r4, r1
    6fbc:	250e      	movs	r5, #14
    6fbe:	5f49      	ldrsh	r1, [r1, r5]
    6fc0:	f000 f8ea 	bl	7198 <_read_r>
    6fc4:	2800      	cmp	r0, #0
    6fc6:	db03      	blt.n	6fd0 <__sread+0x18>
    6fc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6fca:	181b      	adds	r3, r3, r0
    6fcc:	6563      	str	r3, [r4, #84]	; 0x54
    6fce:	e003      	b.n	6fd8 <__sread+0x20>
    6fd0:	89a2      	ldrh	r2, [r4, #12]
    6fd2:	4b02      	ldr	r3, [pc, #8]	; (6fdc <__sread+0x24>)
    6fd4:	4013      	ands	r3, r2
    6fd6:	81a3      	strh	r3, [r4, #12]
    6fd8:	bd70      	pop	{r4, r5, r6, pc}
    6fda:	46c0      	nop			; (mov r8, r8)
    6fdc:	ffffefff 	.word	0xffffefff

00006fe0 <__swrite>:
    6fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fe2:	001f      	movs	r7, r3
    6fe4:	898b      	ldrh	r3, [r1, #12]
    6fe6:	0005      	movs	r5, r0
    6fe8:	000c      	movs	r4, r1
    6fea:	0016      	movs	r6, r2
    6fec:	05db      	lsls	r3, r3, #23
    6fee:	d505      	bpl.n	6ffc <__swrite+0x1c>
    6ff0:	230e      	movs	r3, #14
    6ff2:	5ec9      	ldrsh	r1, [r1, r3]
    6ff4:	2200      	movs	r2, #0
    6ff6:	2302      	movs	r3, #2
    6ff8:	f000 f874 	bl	70e4 <_lseek_r>
    6ffc:	89a2      	ldrh	r2, [r4, #12]
    6ffe:	4b05      	ldr	r3, [pc, #20]	; (7014 <__swrite+0x34>)
    7000:	0028      	movs	r0, r5
    7002:	4013      	ands	r3, r2
    7004:	81a3      	strh	r3, [r4, #12]
    7006:	0032      	movs	r2, r6
    7008:	230e      	movs	r3, #14
    700a:	5ee1      	ldrsh	r1, [r4, r3]
    700c:	003b      	movs	r3, r7
    700e:	f000 f81f 	bl	7050 <_write_r>
    7012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7014:	ffffefff 	.word	0xffffefff

00007018 <__sseek>:
    7018:	b570      	push	{r4, r5, r6, lr}
    701a:	000c      	movs	r4, r1
    701c:	250e      	movs	r5, #14
    701e:	5f49      	ldrsh	r1, [r1, r5]
    7020:	f000 f860 	bl	70e4 <_lseek_r>
    7024:	89a3      	ldrh	r3, [r4, #12]
    7026:	1c42      	adds	r2, r0, #1
    7028:	d103      	bne.n	7032 <__sseek+0x1a>
    702a:	4a05      	ldr	r2, [pc, #20]	; (7040 <__sseek+0x28>)
    702c:	4013      	ands	r3, r2
    702e:	81a3      	strh	r3, [r4, #12]
    7030:	e004      	b.n	703c <__sseek+0x24>
    7032:	2280      	movs	r2, #128	; 0x80
    7034:	0152      	lsls	r2, r2, #5
    7036:	4313      	orrs	r3, r2
    7038:	81a3      	strh	r3, [r4, #12]
    703a:	6560      	str	r0, [r4, #84]	; 0x54
    703c:	bd70      	pop	{r4, r5, r6, pc}
    703e:	46c0      	nop			; (mov r8, r8)
    7040:	ffffefff 	.word	0xffffefff

00007044 <__sclose>:
    7044:	b510      	push	{r4, lr}
    7046:	230e      	movs	r3, #14
    7048:	5ec9      	ldrsh	r1, [r1, r3]
    704a:	f000 f815 	bl	7078 <_close_r>
    704e:	bd10      	pop	{r4, pc}

00007050 <_write_r>:
    7050:	b570      	push	{r4, r5, r6, lr}
    7052:	0005      	movs	r5, r0
    7054:	0008      	movs	r0, r1
    7056:	0011      	movs	r1, r2
    7058:	2200      	movs	r2, #0
    705a:	4c06      	ldr	r4, [pc, #24]	; (7074 <_write_r+0x24>)
    705c:	6022      	str	r2, [r4, #0]
    705e:	001a      	movs	r2, r3
    7060:	f7fd fe5a 	bl	4d18 <_write>
    7064:	1c43      	adds	r3, r0, #1
    7066:	d103      	bne.n	7070 <_write_r+0x20>
    7068:	6823      	ldr	r3, [r4, #0]
    706a:	2b00      	cmp	r3, #0
    706c:	d000      	beq.n	7070 <_write_r+0x20>
    706e:	602b      	str	r3, [r5, #0]
    7070:	bd70      	pop	{r4, r5, r6, pc}
    7072:	46c0      	nop			; (mov r8, r8)
    7074:	200003d4 	.word	0x200003d4

00007078 <_close_r>:
    7078:	2300      	movs	r3, #0
    707a:	b570      	push	{r4, r5, r6, lr}
    707c:	4c06      	ldr	r4, [pc, #24]	; (7098 <_close_r+0x20>)
    707e:	0005      	movs	r5, r0
    7080:	0008      	movs	r0, r1
    7082:	6023      	str	r3, [r4, #0]
    7084:	f7fd fe82 	bl	4d8c <_close>
    7088:	1c43      	adds	r3, r0, #1
    708a:	d103      	bne.n	7094 <_close_r+0x1c>
    708c:	6823      	ldr	r3, [r4, #0]
    708e:	2b00      	cmp	r3, #0
    7090:	d000      	beq.n	7094 <_close_r+0x1c>
    7092:	602b      	str	r3, [r5, #0]
    7094:	bd70      	pop	{r4, r5, r6, pc}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	200003d4 	.word	0x200003d4

0000709c <_fstat_r>:
    709c:	2300      	movs	r3, #0
    709e:	b570      	push	{r4, r5, r6, lr}
    70a0:	4c06      	ldr	r4, [pc, #24]	; (70bc <_fstat_r+0x20>)
    70a2:	0005      	movs	r5, r0
    70a4:	0008      	movs	r0, r1
    70a6:	0011      	movs	r1, r2
    70a8:	6023      	str	r3, [r4, #0]
    70aa:	f7fd fe73 	bl	4d94 <_fstat>
    70ae:	1c43      	adds	r3, r0, #1
    70b0:	d103      	bne.n	70ba <_fstat_r+0x1e>
    70b2:	6823      	ldr	r3, [r4, #0]
    70b4:	2b00      	cmp	r3, #0
    70b6:	d000      	beq.n	70ba <_fstat_r+0x1e>
    70b8:	602b      	str	r3, [r5, #0]
    70ba:	bd70      	pop	{r4, r5, r6, pc}
    70bc:	200003d4 	.word	0x200003d4

000070c0 <_isatty_r>:
    70c0:	2300      	movs	r3, #0
    70c2:	b570      	push	{r4, r5, r6, lr}
    70c4:	4c06      	ldr	r4, [pc, #24]	; (70e0 <_isatty_r+0x20>)
    70c6:	0005      	movs	r5, r0
    70c8:	0008      	movs	r0, r1
    70ca:	6023      	str	r3, [r4, #0]
    70cc:	f7fd fe68 	bl	4da0 <_isatty>
    70d0:	1c43      	adds	r3, r0, #1
    70d2:	d103      	bne.n	70dc <_isatty_r+0x1c>
    70d4:	6823      	ldr	r3, [r4, #0]
    70d6:	2b00      	cmp	r3, #0
    70d8:	d000      	beq.n	70dc <_isatty_r+0x1c>
    70da:	602b      	str	r3, [r5, #0]
    70dc:	bd70      	pop	{r4, r5, r6, pc}
    70de:	46c0      	nop			; (mov r8, r8)
    70e0:	200003d4 	.word	0x200003d4

000070e4 <_lseek_r>:
    70e4:	b570      	push	{r4, r5, r6, lr}
    70e6:	0005      	movs	r5, r0
    70e8:	0008      	movs	r0, r1
    70ea:	0011      	movs	r1, r2
    70ec:	2200      	movs	r2, #0
    70ee:	4c06      	ldr	r4, [pc, #24]	; (7108 <_lseek_r+0x24>)
    70f0:	6022      	str	r2, [r4, #0]
    70f2:	001a      	movs	r2, r3
    70f4:	f7fd fe56 	bl	4da4 <_lseek>
    70f8:	1c43      	adds	r3, r0, #1
    70fa:	d103      	bne.n	7104 <_lseek_r+0x20>
    70fc:	6823      	ldr	r3, [r4, #0]
    70fe:	2b00      	cmp	r3, #0
    7100:	d000      	beq.n	7104 <_lseek_r+0x20>
    7102:	602b      	str	r3, [r5, #0]
    7104:	bd70      	pop	{r4, r5, r6, pc}
    7106:	46c0      	nop			; (mov r8, r8)
    7108:	200003d4 	.word	0x200003d4

0000710c <memchr>:
    710c:	b2c9      	uxtb	r1, r1
    710e:	1882      	adds	r2, r0, r2
    7110:	4290      	cmp	r0, r2
    7112:	d004      	beq.n	711e <memchr+0x12>
    7114:	7803      	ldrb	r3, [r0, #0]
    7116:	428b      	cmp	r3, r1
    7118:	d002      	beq.n	7120 <memchr+0x14>
    711a:	3001      	adds	r0, #1
    711c:	e7f8      	b.n	7110 <memchr+0x4>
    711e:	2000      	movs	r0, #0
    7120:	4770      	bx	lr

00007122 <memmove>:
    7122:	b510      	push	{r4, lr}
    7124:	4288      	cmp	r0, r1
    7126:	d902      	bls.n	712e <memmove+0xc>
    7128:	188b      	adds	r3, r1, r2
    712a:	4298      	cmp	r0, r3
    712c:	d301      	bcc.n	7132 <memmove+0x10>
    712e:	2300      	movs	r3, #0
    7130:	e005      	b.n	713e <memmove+0x1c>
    7132:	1a9b      	subs	r3, r3, r2
    7134:	3a01      	subs	r2, #1
    7136:	d308      	bcc.n	714a <memmove+0x28>
    7138:	5c99      	ldrb	r1, [r3, r2]
    713a:	5481      	strb	r1, [r0, r2]
    713c:	e7fa      	b.n	7134 <memmove+0x12>
    713e:	4293      	cmp	r3, r2
    7140:	d003      	beq.n	714a <memmove+0x28>
    7142:	5ccc      	ldrb	r4, [r1, r3]
    7144:	54c4      	strb	r4, [r0, r3]
    7146:	3301      	adds	r3, #1
    7148:	e7f9      	b.n	713e <memmove+0x1c>
    714a:	bd10      	pop	{r4, pc}

0000714c <_realloc_r>:
    714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    714e:	0006      	movs	r6, r0
    7150:	000c      	movs	r4, r1
    7152:	0015      	movs	r5, r2
    7154:	2900      	cmp	r1, #0
    7156:	d104      	bne.n	7162 <_realloc_r+0x16>
    7158:	0011      	movs	r1, r2
    715a:	f7ff fa5b 	bl	6614 <_malloc_r>
    715e:	0004      	movs	r4, r0
    7160:	e018      	b.n	7194 <_realloc_r+0x48>
    7162:	2a00      	cmp	r2, #0
    7164:	d103      	bne.n	716e <_realloc_r+0x22>
    7166:	f7ff fa0f 	bl	6588 <_free_r>
    716a:	002c      	movs	r4, r5
    716c:	e012      	b.n	7194 <_realloc_r+0x48>
    716e:	f000 f827 	bl	71c0 <_malloc_usable_size_r>
    7172:	4285      	cmp	r5, r0
    7174:	d90e      	bls.n	7194 <_realloc_r+0x48>
    7176:	0029      	movs	r1, r5
    7178:	0030      	movs	r0, r6
    717a:	f7ff fa4b 	bl	6614 <_malloc_r>
    717e:	1e07      	subs	r7, r0, #0
    7180:	d007      	beq.n	7192 <_realloc_r+0x46>
    7182:	0021      	movs	r1, r4
    7184:	002a      	movs	r2, r5
    7186:	f7fe fd9f 	bl	5cc8 <memcpy>
    718a:	0021      	movs	r1, r4
    718c:	0030      	movs	r0, r6
    718e:	f7ff f9fb 	bl	6588 <_free_r>
    7192:	003c      	movs	r4, r7
    7194:	0020      	movs	r0, r4
    7196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007198 <_read_r>:
    7198:	b570      	push	{r4, r5, r6, lr}
    719a:	0005      	movs	r5, r0
    719c:	0008      	movs	r0, r1
    719e:	0011      	movs	r1, r2
    71a0:	2200      	movs	r2, #0
    71a2:	4c06      	ldr	r4, [pc, #24]	; (71bc <_read_r+0x24>)
    71a4:	6022      	str	r2, [r4, #0]
    71a6:	001a      	movs	r2, r3
    71a8:	f7fd fd96 	bl	4cd8 <_read>
    71ac:	1c43      	adds	r3, r0, #1
    71ae:	d103      	bne.n	71b8 <_read_r+0x20>
    71b0:	6823      	ldr	r3, [r4, #0]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d000      	beq.n	71b8 <_read_r+0x20>
    71b6:	602b      	str	r3, [r5, #0]
    71b8:	bd70      	pop	{r4, r5, r6, pc}
    71ba:	46c0      	nop			; (mov r8, r8)
    71bc:	200003d4 	.word	0x200003d4

000071c0 <_malloc_usable_size_r>:
    71c0:	1f0b      	subs	r3, r1, #4
    71c2:	681a      	ldr	r2, [r3, #0]
    71c4:	1f10      	subs	r0, r2, #4
    71c6:	2a00      	cmp	r2, #0
    71c8:	da04      	bge.n	71d4 <_malloc_usable_size_r+0x14>
    71ca:	1889      	adds	r1, r1, r2
    71cc:	3904      	subs	r1, #4
    71ce:	680b      	ldr	r3, [r1, #0]
    71d0:	18d0      	adds	r0, r2, r3
    71d2:	3804      	subs	r0, #4
    71d4:	4770      	bx	lr
    71d6:	0000      	movs	r0, r0
    71d8:	42002c00 	.word	0x42002c00
    71dc:	42003000 	.word	0x42003000
    71e0:	42003400 	.word	0x42003400
    71e4:	001c1c1b 	.word	0x001c1c1b
    71e8:	10000800 	.word	0x10000800
    71ec:	00002000 	.word	0x00002000

000071f0 <tc_interrupt_vectors.13156>:
    71f0:	00141312 50504128 52452829 255b2952     ....(APP)(ERR)[%
    7200:	255b5d73 00005d64 61766e69 6564696c     s][%d]..invalide
    7210:	636f6920 6320746c 0000646d               ioclt cmd..

0000721c <__FUNCTION__.13296>:
    721c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    722c:	0000121c 000011f4 000011ec 00001204     ................
    723c:	000011fc 0000121c 0000120c 00001214     ................

0000724c <__FUNCTION__.12478>:
    724c:	5f666968 646e6573 00000000              hif_send....

00007258 <__FUNCTION__.12494>:
    7258:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00007268 <__FUNCTION__.12488>:
    7268:	5f666968 00727369 46494828 69614629     hif_isr.(HIF)Fai
    7278:	6f74206c 6b617720 74207075 63206568     l to wakup the c
    7288:	00706968 66696828 49572029 485f4946     hip.(hif) WIFI_H
    7298:	5f54534f 5f564352 4c525443 6220315f     OST_RCV_CTRL_1 b
    72a8:	66207375 006c6961 66696828 64612029     us fail.(hif) ad
    72b8:	73657264 75622073 61662073 00006c69     dress bus fail..
    72c8:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
    72d8:	6b636170 53207465 20657a69 7525203d     packet Size = %u
    72e8:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
    72f8:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
    7308:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
    7318:	2070756f 00004449 66696828 6f682029     oup ID..(hif) ho
    7328:	61207473 64207070 276e6469 65732074     st app didn't se
    7338:	58522074 6e6f4420 00000065 66696828     t RX Done...(hif
    7348:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    7358:	66696828 61462029 2065736c 65746e69     (hif) False inte
    7368:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    7378:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    7388:	7265746e 74707572 67657220 00000000     nterrupt reg....
    7398:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
    73a8:	7075656b 65687420 69686320 00000070     keup the chip...
    73b8:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    73c8:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    73d8:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    73e8:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    73f8:	696c6176 72612064 656d7567 0000746e     valid argument..
    7408:	20505041 75716552 65747365 69532064     APP Requested Si
    7418:	6920657a 616c2073 72656772 61687420     ze is larger tha
    7428:	6874206e 65722065 65766963 75622064     n the recived bu
    7438:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
    7448:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
    7458:	64412064 73657264 65622073 646e6f79     d Address beyond
    7468:	65687420 63657220 64657669 66756220      the recived buf
    7478:	20726566 72646461 20737365 20646e61     fer address and 
    7488:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
    7498:	0000000a                                ....

0000749c <__FUNCTION__.12509>:
    749c:	5f666968 65636572 00657669              hif_receive.

000074a8 <__FUNCTION__.12524>:
    74a8:	5f666968 69676572 72657473 0062635f     hif_register_cb.

000074b8 <__FUNCTION__.12475>:
    74b8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000074c8 <__FUNCTION__.12451>:
    74c8:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
    74d8:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
    74e8:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
    74f8:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
    7508:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
    7518:	2044494c 4e494f50 00524554 41564e49     LID POINTER.INVA
    7528:	2044494c 44495353 00000000 41564e49     LID SSID....INVA
    7538:	2044494c 00004843 41564e49 2044494c     LID CH..INVALID 
    7548:	50434844 52455320 20524556 00005049     DHCP SERVER IP..
    7558:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
    7568:	00000058 41564e49 2044494c 2059454b     X...INVALID KEY 
    7578:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    7588:	20504557 0059454b 41564e49 2044494c     WEP KEY.INVALID 
    7598:	48545541 49544e45 49544143 4d204e4f     AUTHENTICATION M
    75a8:	0045444f 6d726946 65726177 72657620     ODE.Firmware ver
    75b8:	3a202020 2e752520 252e7525 00000a75        : %u.%u.%u...
    75c8:	206e694d 76697264 76207265 3a207265     Min driver ver :
    75d8:	2e752520 252e7525 00000a75 72727543      %u.%u.%u...Curr
    75e8:	69726420 20726576 3a726576 2e752520      driver ver: %u.
    75f8:	252e7525 00000a75 6d73694d 68637461     %u.%u...Mismatch
    7608:	72694620 7277616d 65562065 6f697372      Firmawre Versio
    7618:	0000006e 2079654b 6e207369 7620746f     n...Key is not v
    7628:	64696c61 00000000 61766e49 2064696c     alid....Invalid 
    7638:	0079654b 44495353 4e454c20 564e4920     Key.SSID LEN INV
    7648:	44494c41 00000000 49204843 4c41564e     ALID....CH INVAL
    7658:	00004449 61766e49 2064696c 20706557     ID..Invalid Wep 
    7668:	2079656b 65646e69 64252078 0000000a     key index %d....
    7678:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    7688:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
    7698:	63657272 53502074 656b204b 656c2079     rrect PSK key le
    76a8:	6874676e 00000000 65646e75 656e6966     ngth....undefine
    76b8:	65732064 79742063 00006570 41564e49     d sec type..INVA
    76c8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    76d8:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
    76e8:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
    76f8:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
    7708:	2065626f 75716572 73747365 72657020     obe requests per
    7718:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
    7728:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
    7738:	2520646c 000a2064 5f53505f 56524553     ld %d .._PS_SERV
    7748:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    7758:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    7768:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    7778:	2c312065 6f203620 31312072 00000000     e 1, 6 or 11....
    7788:	45574f50 41532052 25204556 00000a64     POWER SAVE %d...
    7798:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
    77a8:	00454d41 474e5250 66754220 20726566     AME.PRNG Buffer 
    77b8:	65637865 64656465 78616d20 6d756d69     exceeded maximum
    77c8:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
    77d8:	66754220 0a726566 00000000               Buffer.....

000077e4 <__FUNCTION__.12503>:
    77e4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    77f4:	0063735f                                _sc.

000077f8 <__FUNCTION__.12382>:
    77f8:	70696863 6965645f 0074696e 20737542     chip_deinit.Bus 
    7808:	6f727265 31282072 57202e29 20656b61     error (1). Wake 
    7818:	66207075 656c6961 00000064 20737542     up failed...Bus 
    7828:	6f727265 32282072 57202e29 20656b61     error (2). Wake 
    7838:	66207075 656c6961 00000064 636f6c63     up failed...cloc
    7848:	7320736b 6c6c6974 46464f20 6157202e     ks still OFF. Wa
    7858:	7520656b 61662070 64656c69 00000000     ke up failed....
    7868:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    7878:	6572206c 72206461 30206765 31313178     l read reg 0x111
    7888:	2e2e2038 0000002e 6c696166 74206465     8 ......failed t
    7898:	6564206f 696e692d 6c616974 00657a69     o de-initialize.
    78a8:	6f727245 68772072 20656c69 74697277     Error while writ
    78b8:	20676e69 00676572 6f727245 68772072     ing reg.Error wh
    78c8:	20656c69 64616572 20676e69 00676572     ile reading reg.
    78d8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    78e8:	656c6961 6f742064 61657220 00000064     ailed to read...
    78f8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    7908:	656c6961 6f742064 69727720 00006574     ailed to write..

00007918 <__FUNCTION__.12288>:
    7918:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00007928 <__FUNCTION__.12369>:
    7928:	645f6d6e 695f7672 0074696e              nm_drv_init.

00007934 <__FUNCTION__.12376>:
    7934:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    7944:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    7954:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    7964:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
    7974:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    7984:	75727265 2e737470 0000002e 696d6e5b     errupts.....[nmi
    7994:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    79a4:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    79b4:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
    79c4:	69642068 6c626173 61662065 00006c69     h disable fail..
    79d4:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
    79e4:	696e6920 75622074 00000073 000023d4      init bus....#..
    79f4:	000023d4 00002404 00002386 000023aa     .#...$...#...#..
    7a04:	000023b8 000023ea 000023ea 00002432     .#...#...#..2$..
    7a14:	00002376 00002494 00002494 00002494     v#...$...$...$..
    7a24:	00002494 000023c6                       .$...#..

00007a2c <__FUNCTION__.11810>:
    7a2c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00007a3c <__FUNCTION__.11761>:
    7a3c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00007a48 <__FUNCTION__.11819>:
    7a48:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00007a58 <__FUNCTION__.11777>:
    7a58:	5f697073 61746164 6165725f 00000064     spi_data_read...

00007a68 <__FUNCTION__.11792>:
    7a68:	5f697073 61746164 6972775f 00006574     spi_data_write..
    7a78:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7a88:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    7a98:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    7aa8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    7ab8:	656c6961 61642064 72206174 6f707365     ailed data respo
    7ac8:	2065736e 64616572 7562202c 72652073     nse read, bus er
    7ad8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    7ae8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    7af8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    7b08:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    7b18:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    7b28:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    7b38:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    7b48:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    7b58:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    7b68:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    7b78:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    7b88:	72772064 2c657469 73756220 72726520     d write, bus err
    7b98:	2e2e726f 0000002e 696d6e5b 69707320     or......[nmi spi
    7ba8:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
    7bb8:	65746972 67657220 30252820 2e297838     rite reg (%08x).
    7bc8:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    7bd8:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    7be8:	202c6573 74697277 65722065 25282067     se, write reg (%
    7bf8:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
    7c08:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    7c18:	72202c64 20646165 20676572 38302528     d, read reg (%08
    7c28:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    7c38:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    7c48:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    7c58:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    7c68:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    7c78:	72206174 2e646165 00002e2e 696d6e5b     ta read.....[nmi
    7c88:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    7c98:	6e726574 72206c61 20646165 746f7270     ternal read prot
    7ca8:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
    7cb8:	6572202c 69727974 7720676e 20687469     , retyring with 
    7cc8:	20435243 2e66666f 00002e2e 696d6e5b     CRC off.....[nmi
    7cd8:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    7ce8:	6e726574 72206c61 20646165 746f7270     ternal read prot
    7cf8:	6c6f636f 002e2e2e 696d6e5b 69707320     ocol....[nmi spi
    7d08:	46203a5d 656c6961 6e692064 6e726574     ]: Failed intern
    7d18:	77206c61 65746972 6f727020 6f636f74     al write protoco
    7d28:	6572206c 2e2e2e67 00000000 696d6e5b     l reg.......[nmi
    7d38:	69707320 46203a5d 206c6961 20646d63      spi]: Fail cmd 
    7d48:	64616572 69686320 64692070 002e2e2e     read chip id....
    7d58:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7d68:	6d632064 72202c64 20646165 636f6c62     d cmd, read bloc
    7d78:	2528206b 29783830 0a2e2e2e 00000000     k (%08x)........
    7d88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7d98:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    7da8:	64616572 6f6c6220 28206b63 78383025     read block (%08x
    7db8:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
    7dc8:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
    7dd8:	61746164 61657220 2e2e2e64 00000000     data read.......
    7de8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7df8:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    7e08:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    7e18:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    7e28:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    7e38:	69727720 62206574 6b636f6c 30252820      write block (%0
    7e48:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    7e58:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    7e68:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    7e78:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    7e88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7e98:	61642064 62206174 6b636f6c 69727720     d data block wri
    7ea8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    7eb8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    7ec8:	656c6961 61642064 62206174 6b636f6c     ailed data block
    7ed8:	63726320 69727720 202c6574 20737562      crc write, bus 
    7ee8:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    7ef8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    7f08:	206b636f 61746164 69727720 2e2e6574     ock data write..
    7f18:	0000002e                                ....

00007f1c <__FUNCTION__.11844>:
    7f1c:	735f6d6e 695f6970 0074696e              nm_spi_init.

00007f28 <__FUNCTION__.11827>:
    7f28:	735f6d6e 725f6970 00646165              nm_spi_read.

00007f34 <crc7_syndrome_table>:
    7f34:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    7f44:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    7f54:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    7f64:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    7f74:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    7f84:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    7f94:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    7fa4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    7fb4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    7fc4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    7fd4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    7fe4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    7ff4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    8004:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    8014:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    8024:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

00008034 <__FUNCTION__.11802>:
    8034:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00008044 <__FUNCTION__.11753>:
    8044:	5f697073 00646d63 52524528 75432952     spi_cmd.(ERRR)Cu
    8054:	6e657272 253c2074 000a3e64 20494e53     rrent <%d>..SNI 
    8064:	65637845 20736465 2078614d 676e654c     Exceeds Max Leng
    8074:	00006874 6e6b6e55 206e776f 204c5353     th..Unknown SSL 
    8084:	6b636f53 4f207465 6f697470 6425206e     Socket Option %d
    8094:	0000000a 20746f4e 204c5353 6b636f53     ....Not SSL Sock
    80a4:	00007465 42000800 42000c00 42001000     et.....B...B...B
    80b4:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    80c4:	00000e0d 0000442e 0000442a 0000442a     .....D..*D..*D..
    80d4:	00004488 00004488 00004442 00004434     .D...D..BD..4D..
    80e4:	00004448 00004476 00004670 00004650     HD..vD..pF..PF..
    80f4:	00004650 000046dc 00004662 0000467e     PF...F..bF..~F..
    8104:	00004654 0000468c 000046cc              TF...F...F..

00008110 <__FUNCTION__.11885>:
    8110:	5f494d4e 776f7247 6e65536c 746f4e64     NMI_GrowlSendNot
    8120:	63696669 6f697461 0000006e              ification...

0000812c <gau8HexDigits>:
    812c:	33323130 37363534 62613938 66656463     0123456789abcdef
    813c:	00000000 69746f6e 796d7966 72646e61     ....notifymyandr
    814c:	0064696f 776f7270 0000006c 2e777777     oid.prowl...www.
    815c:	69746f6e 796d7966 72646e61 2e64696f     notifymyandroid.
    816c:	006d6f63 2e697061 776f7270 7070616c     com.api.prowlapp
    817c:	6d6f632e 00000000 20544547 6275702f     .com....GET /pub
    818c:	6163696c 6e2f6970 6669746f 70613f79     licapi/notify?ap
    819c:	79656b69 0000003d 20544547 6275702f     ikey=...GET /pub
    81ac:	6163696c 612f6970 613f6464 656b6970     licapi/add?apike
    81bc:	00003d79 70706126 6163696c 6e6f6974     y=..&application
    81cc:	0000003d 65766526 003d746e 73656426     =...&event=.&des
    81dc:	70697263 6e6f6974 0000003d 54544820     cription=... HTT
    81ec:	2e312f50 480a0d31 3a74736f 00000020     P/1.1..Host: ...
    81fc:	0a0d0a0d 00000000 50545448 312e312f     ........HTTP/1.1
    820c:	00000020 00303032 00303034 00313034      ...200.400.401.
    821c:	00323034 00363034 00393034 574f5247     402.406.409.GROW
    822c:	6553204c 4520646e 726f7272 0a642520     L Send Error %d.
    823c:	00000000 776f7250 656b206c 6f4e2079     ....Prowl key No
    824c:	61562074 00646c69 20414d4e 2079656b     t Vaild.NMA key 
    825c:	20746f4e 6c696156 00000064 00414d4e     Not Vaild...NMA.
    826c:	574f5250 0000004c 73206f4e 656b636f     PROWL...No socke
    827c:	61207374 6c696176 656c6261 726f6620     ts available for
    828c:	65687420 72756320 746e6572 71657220      the current req
    829c:	74736575 00000000 2067734d 657a6973     uest....Msg size
    82ac:	20736920 206f6f74 676e6f6c 00000000      is too long....
    82bc:	746f6e41 20726568 52207325 65757165     Another %s Reque
    82cc:	69207473 65702073 6e69646e 00000a67     st is pending...

000082dc <__FUNCTION__.11859>:
    82dc:	574f5247 50415f4c 636f5350 4574656b     GROWL_APPSocketE
    82ec:	746e6576 646e6148 0072656c 646e6553     ventHandler.Send
    82fc:	20676e69 776f7250 25203a6c 3e3d2073     ing Prowl: %s =>
    830c:	00000020 6c313025 30253a64 3a646c32      ...%01ld:%02ld:
    831c:	6c323025 30253a64 20646c32 00000000     %02ld:%02ld ....
    832c:	462d6957 6f632069 63656e6e 0d646574     Wi-Fi connected.
    833c:	00000000 462d6957 69642069 6e6f6373     ....Wi-Fi discon
    834c:	7463656e 2d206465 6c695720 7274206c     nected - Will tr
    835c:	6f742079 63657220 656e6e6f 69207463     y to reconnect i
    836c:	3033206e 63657320 73646e6f 0d2e2e2e     n 30 seconds....
    837c:	00000000 50434844 6d6f6320 74656c70     ....DHCP complet
    838c:	202d2065 462d6957 50492069 20736920     e - Wi-Fi IP is 
    839c:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
    83ac:	38373139 34303637 30356465 66633661     91787604ed50a6cf
    83bc:	33643263 64333866 31656531 62633639     c2d3f83d1ee196cb
    83cc:	61303363 30626333 65376138 30613936     c30a3cb08a7e69a0
    83dc:	00000000 35336364 64663839 66343636     ....dc3598fd664f
    83ec:	38303536 30303666 65316462 65666466     6508f600bd1efdfe
    83fc:	35616334 66303434 38303362 00000000     4ca5440fb308....
    840c:	6e6e6f43 69746365 52206e6f 73652d65     Connection Re-es
    841c:	6c626174 65687369 00002e64 74617453     tablished...Stat
    842c:	55207375 74616470 00000065 6e6e6f43     us Update...Conn
    843c:	69746365 45206e6f 62617473 6873696c     ection Establish
    844c:	00006465 69666977 3a62635f 4d324d20     ed..wifi_cb: M2M
    845c:	4649575f 45525f49 505f5053 49564f52     _WIFI_RESP_PROVI
    846c:	4e4f4953 464e495f 000d2e4f 69666977     SION_INFO...wifi
    847c:	3a62635f 6f725020 69736976 66206e6f     _cb: Provision f
    848c:	656c6961 000d2e64 776f7247 736d206c     ailed...Growl ms
    849c:	65732067 7320746e 65636375 75667373     g sent successfu
    84ac:	2e796c6c 0000000d 4f525245 47203a52     lly.....ERROR: G
    84bc:	6c776f72 20424320 65646f43 6425203a     rowl CB Code: %d
    84cc:	000a0d20 69797254 7420676e 6572206f      ...Trying to re
    84dc:	6e6f632d 7463656e 00000d2e 34333231     -connect....1234
    84ec:	38373635 00000000 69646153 74654e65     5678....SadieNet
    84fc:	00000000 5f200a0d 5f5f5f5f 20205f20     ...... _____ _  
    850c:	20202020 20202020 5f5f2020 20205f5f               ____  
    851c:	20202020 20202020 20202020 20202020                     
    852c:	0d5f2020 205f7c0a 7c5f2020 5f5f7c20       _..|_   _| |__
    853c:	5f202020 20205f5f 5f20207c 5f205c20        ___  |  _ \ _
    854c:	205f5f20 5f5f5f5f 2020205f 5f202020      __ _____      _
    855c:	207c207c 205f5f5f 5f5f205f 20200a0d     | | ___ _ __..  
    856c:	207c207c 5f27207c 2f205c20 5c205f20     | | | '_ \ / _ \
    857c:	7c207c20 7c20295f 5f5f2720 205f202f      | |_) | '__/ _ 
    858c:	205c205c 2f205c2f 7c202f20 205f202f     \ \ /\ / / |/ _ 
    859c:	5f27205c 0a0d7c5f 207c2020 207c207c     \ '__|..  | | | 
    85ac:	207c207c 5f20207c 7c202f5f 5f5f2020     | | |  __/ |  __
    85bc:	7c207c2f 28207c20 5c20295f 20205620     /| | | (_) \ V  
    85cc:	7c2f2056 20207c20 202f5f5f 200a0d7c     V /| |  __/ |.. 
    85dc:	7c5f7c20 7c5f7c20 7c5f7c20 5f5f5f5c      |_| |_| |_|\___
    85ec:	5f7c207c 2020207c 207c5f7c 5f5f5c20     | |_|   |_|  \__
    85fc:	5c202f5f 5f5c2f5f 5f7c202f 5f5f5c7c     _/ \_/\_/ |_|\__
    860c:	7c5f7c5f 0000000d 776f7250 61622d6c     _|_|....Prowl-ba
    861c:	20646573 74697773 6d206863 74696e6f     sed switch monit
    862c:	0a0d726f 72616f42 41533a64 3532574d     or..Board:SAMW25
    863c:	4c50585f 454e4941 52505f44 430a0d4f     _XPLAINED_PRO..C
    864c:	69706d6f 3a64656c 74634f20 20383120     ompiled: Oct 18 
    865c:	36313032 3a383120 353a3434 2d2d2033     2016 18:44:53 --
    866c:	0000000d 6e69616d 326d203a 69775f6d     ....main: m2m_wi
    867c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
    868c:	2821726f 0d296425 0000000a 6e65704f     or!(%d).....Open
    869c:	00006465 74617453 68432065 65676e61     ed..State Change
    86ac:	00000000 736f6c43 00006465              ....Closed..

000086b8 <app_string>:
    86b8:	20353257 776f7250 0072656c 00000043     W25 Prowler.C...

000086c8 <_global_impure_ptr>:
    86c8:	20000014                                ... 

000086cc <__sf_fake_stdin>:
	...

000086ec <__sf_fake_stdout>:
	...

0000870c <__sf_fake_stderr>:
	...
    872c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    873c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    874c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    875c:	00006665                                ef..

00008760 <_init>:
    8760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8762:	46c0      	nop			; (mov r8, r8)
    8764:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8766:	bc08      	pop	{r3}
    8768:	469e      	mov	lr, r3
    876a:	4770      	bx	lr

0000876c <__init_array_start>:
    876c:	000000dd 	.word	0x000000dd

00008770 <_fini>:
    8770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8772:	46c0      	nop			; (mov r8, r8)
    8774:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8776:	bc08      	pop	{r3}
    8778:	469e      	mov	lr, r3
    877a:	4770      	bx	lr

0000877c <__fini_array_start>:
    877c:	000000b5 	.word	0x000000b5
