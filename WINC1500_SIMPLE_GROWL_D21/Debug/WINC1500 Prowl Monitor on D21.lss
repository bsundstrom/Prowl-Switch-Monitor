
WINC1500 Prowl Monitor on D21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dbb0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  20000000  0000dbb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000358  20000080  0000dc30  00020080  2**2
                  ALLOC
  3 .stack        00002000  200003d8  0000df88  00020080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035aa2  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005005  00000000  00000000  00055ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000061a4  00000000  00000000  0005aba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011a8  00000000  00000000  00060d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001078  00000000  00000000  00061ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002247a  00000000  00000000  00062f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ac7b  00000000  00000000  000853e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096225  00000000  00000000  000a0061  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000454c  00000000  00000000  00136288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200023d8 	.word	0x200023d8
       4:	00009479 	.word	0x00009479
       8:	00009571 	.word	0x00009571
       c:	00009571 	.word	0x00009571
	...
      2c:	00009571 	.word	0x00009571
	...
      38:	00009571 	.word	0x00009571
      3c:	00009571 	.word	0x00009571
      40:	00009571 	.word	0x00009571
      44:	00009571 	.word	0x00009571
      48:	00009571 	.word	0x00009571
      4c:	00009571 	.word	0x00009571
      50:	00006275 	.word	0x00006275
      54:	00009571 	.word	0x00009571
      58:	00009571 	.word	0x00009571
      5c:	00009571 	.word	0x00009571
      60:	00009571 	.word	0x00009571
      64:	00006dfd 	.word	0x00006dfd
      68:	00006e15 	.word	0x00006e15
      6c:	00006e2d 	.word	0x00006e2d
      70:	00006e45 	.word	0x00006e45
      74:	00006e5d 	.word	0x00006e5d
      78:	00006e75 	.word	0x00006e75
      7c:	00009571 	.word	0x00009571
      80:	00009571 	.word	0x00009571
      84:	00009571 	.word	0x00009571
      88:	00000189 	.word	0x00000189
      8c:	0000019d 	.word	0x0000019d
      90:	000001b1 	.word	0x000001b1
      94:	000001c5 	.word	0x000001c5
      98:	000001d9 	.word	0x000001d9
      9c:	00009571 	.word	0x00009571
      a0:	00009571 	.word	0x00009571
      a4:	00009571 	.word	0x00009571
      a8:	00009571 	.word	0x00009571
      ac:	00009571 	.word	0x00009571
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000080 	.word	0x20000080
      d4:	00000000 	.word	0x00000000
      d8:	0000dbb0 	.word	0x0000dbb0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000084 	.word	0x20000084
     108:	0000dbb0 	.word	0x0000dbb0
     10c:	0000dbb0 	.word	0x0000dbb0
     110:	00000000 	.word	0x00000000

00000114 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	60b9      	str	r1, [r7, #8]
     11e:	1dfb      	adds	r3, r7, #7
     120:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     122:	1dfb      	adds	r3, r7, #7
     124:	781a      	ldrb	r2, [r3, #0]
     126:	68fb      	ldr	r3, [r7, #12]
     128:	3202      	adds	r2, #2
     12a:	0092      	lsls	r2, r2, #2
     12c:	68b9      	ldr	r1, [r7, #8]
     12e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     130:	1dfb      	adds	r3, r7, #7
     132:	781b      	ldrb	r3, [r3, #0]
     134:	2b02      	cmp	r3, #2
     136:	d107      	bne.n	148 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     138:	68fb      	ldr	r3, [r7, #12]
     13a:	7e1b      	ldrb	r3, [r3, #24]
     13c:	2210      	movs	r2, #16
     13e:	4313      	orrs	r3, r2
     140:	b2da      	uxtb	r2, r3
     142:	68fb      	ldr	r3, [r7, #12]
     144:	761a      	strb	r2, [r3, #24]
     146:	e019      	b.n	17c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     148:	1dfb      	adds	r3, r7, #7
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	2b03      	cmp	r3, #3
     14e:	d107      	bne.n	160 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     150:	68fb      	ldr	r3, [r7, #12]
     152:	7e1b      	ldrb	r3, [r3, #24]
     154:	2220      	movs	r2, #32
     156:	4313      	orrs	r3, r2
     158:	b2da      	uxtb	r2, r3
     15a:	68fb      	ldr	r3, [r7, #12]
     15c:	761a      	strb	r2, [r3, #24]
     15e:	e00d      	b.n	17c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     160:	68fb      	ldr	r3, [r7, #12]
     162:	7e1b      	ldrb	r3, [r3, #24]
     164:	b25a      	sxtb	r2, r3
     166:	1dfb      	adds	r3, r7, #7
     168:	781b      	ldrb	r3, [r3, #0]
     16a:	2101      	movs	r1, #1
     16c:	4099      	lsls	r1, r3
     16e:	000b      	movs	r3, r1
     170:	b25b      	sxtb	r3, r3
     172:	4313      	orrs	r3, r2
     174:	b25b      	sxtb	r3, r3
     176:	b2da      	uxtb	r2, r3
     178:	68fb      	ldr	r3, [r7, #12]
     17a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
     17c:	2300      	movs	r3, #0
}
     17e:	0018      	movs	r0, r3
     180:	46bd      	mov	sp, r7
     182:	b004      	add	sp, #16
     184:	bd80      	pop	{r7, pc}
     186:	46c0      	nop			; (mov r8, r8)

00000188 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     188:	b580      	push	{r7, lr}
     18a:	af00      	add	r7, sp, #0
     18c:	2000      	movs	r0, #0
     18e:	4b02      	ldr	r3, [pc, #8]	; (198 <TC3_Handler+0x10>)
     190:	4798      	blx	r3
     192:	46c0      	nop			; (mov r8, r8)
     194:	46bd      	mov	sp, r7
     196:	bd80      	pop	{r7, pc}
     198:	000001ed 	.word	0x000001ed

0000019c <TC4_Handler>:
     19c:	b580      	push	{r7, lr}
     19e:	af00      	add	r7, sp, #0
     1a0:	2001      	movs	r0, #1
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <TC4_Handler+0x10>)
     1a4:	4798      	blx	r3
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	46bd      	mov	sp, r7
     1aa:	bd80      	pop	{r7, pc}
     1ac:	000001ed 	.word	0x000001ed

000001b0 <TC5_Handler>:
     1b0:	b580      	push	{r7, lr}
     1b2:	af00      	add	r7, sp, #0
     1b4:	2002      	movs	r0, #2
     1b6:	4b02      	ldr	r3, [pc, #8]	; (1c0 <TC5_Handler+0x10>)
     1b8:	4798      	blx	r3
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	46bd      	mov	sp, r7
     1be:	bd80      	pop	{r7, pc}
     1c0:	000001ed 	.word	0x000001ed

000001c4 <TC6_Handler>:
     1c4:	b580      	push	{r7, lr}
     1c6:	af00      	add	r7, sp, #0
     1c8:	2003      	movs	r0, #3
     1ca:	4b02      	ldr	r3, [pc, #8]	; (1d4 <TC6_Handler+0x10>)
     1cc:	4798      	blx	r3
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	46bd      	mov	sp, r7
     1d2:	bd80      	pop	{r7, pc}
     1d4:	000001ed 	.word	0x000001ed

000001d8 <TC7_Handler>:
     1d8:	b580      	push	{r7, lr}
     1da:	af00      	add	r7, sp, #0
     1dc:	2004      	movs	r0, #4
     1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <TC7_Handler+0x10>)
     1e0:	4798      	blx	r3
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	46bd      	mov	sp, r7
     1e6:	bd80      	pop	{r7, pc}
     1e8:	000001ed 	.word	0x000001ed

000001ec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b084      	sub	sp, #16
     1f0:	af00      	add	r7, sp, #0
     1f2:	0002      	movs	r2, r0
     1f4:	1dfb      	adds	r3, r7, #7
     1f6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     1fc:	4b28      	ldr	r3, [pc, #160]	; (2a0 <_tc_interrupt_handler+0xb4>)
     1fe:	0092      	lsls	r2, r2, #2
     200:	58d3      	ldr	r3, [r2, r3]
     202:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     204:	68fb      	ldr	r3, [r7, #12]
     206:	681b      	ldr	r3, [r3, #0]
     208:	7b9b      	ldrb	r3, [r3, #14]
     20a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     20c:	68fa      	ldr	r2, [r7, #12]
     20e:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     210:	4013      	ands	r3, r2
     212:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     214:	68fb      	ldr	r3, [r7, #12]
     216:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     218:	230b      	movs	r3, #11
     21a:	18fb      	adds	r3, r7, r3
     21c:	400a      	ands	r2, r1
     21e:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     220:	230b      	movs	r3, #11
     222:	18fb      	adds	r3, r7, r3
     224:	781b      	ldrb	r3, [r3, #0]
     226:	2201      	movs	r2, #1
     228:	4013      	ands	r3, r2
     22a:	d008      	beq.n	23e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	689b      	ldr	r3, [r3, #8]
     230:	68fa      	ldr	r2, [r7, #12]
     232:	0010      	movs	r0, r2
     234:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     236:	68fb      	ldr	r3, [r7, #12]
     238:	681b      	ldr	r3, [r3, #0]
     23a:	2201      	movs	r2, #1
     23c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     23e:	230b      	movs	r3, #11
     240:	18fb      	adds	r3, r7, r3
     242:	781b      	ldrb	r3, [r3, #0]
     244:	2202      	movs	r2, #2
     246:	4013      	ands	r3, r2
     248:	d008      	beq.n	25c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	68db      	ldr	r3, [r3, #12]
     24e:	68fa      	ldr	r2, [r7, #12]
     250:	0010      	movs	r0, r2
     252:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     254:	68fb      	ldr	r3, [r7, #12]
     256:	681b      	ldr	r3, [r3, #0]
     258:	2202      	movs	r2, #2
     25a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     25c:	230b      	movs	r3, #11
     25e:	18fb      	adds	r3, r7, r3
     260:	781b      	ldrb	r3, [r3, #0]
     262:	2210      	movs	r2, #16
     264:	4013      	ands	r3, r2
     266:	d008      	beq.n	27a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	691b      	ldr	r3, [r3, #16]
     26c:	68fa      	ldr	r2, [r7, #12]
     26e:	0010      	movs	r0, r2
     270:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2210      	movs	r2, #16
     278:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     27a:	230b      	movs	r3, #11
     27c:	18fb      	adds	r3, r7, r3
     27e:	781b      	ldrb	r3, [r3, #0]
     280:	2220      	movs	r2, #32
     282:	4013      	ands	r3, r2
     284:	d008      	beq.n	298 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     286:	68fb      	ldr	r3, [r7, #12]
     288:	695b      	ldr	r3, [r3, #20]
     28a:	68fa      	ldr	r2, [r7, #12]
     28c:	0010      	movs	r0, r2
     28e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     290:	68fb      	ldr	r3, [r7, #12]
     292:	681b      	ldr	r3, [r3, #0]
     294:	2220      	movs	r2, #32
     296:	739a      	strb	r2, [r3, #14]
	}
}
     298:	46c0      	nop			; (mov r8, r8)
     29a:	46bd      	mov	sp, r7
     29c:	b004      	add	sp, #16
     29e:	bd80      	pop	{r7, pc}
     2a0:	200001d0 	.word	0x200001d0

000002a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b082      	sub	sp, #8
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	2200      	movs	r2, #0
     2b0:	701a      	strb	r2, [r3, #0]
}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	46bd      	mov	sp, r7
     2b6:	b002      	add	sp, #8
     2b8:	bd80      	pop	{r7, pc}
     2ba:	46c0      	nop			; (mov r8, r8)

000002bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	6039      	str	r1, [r7, #0]
     2c6:	1dfb      	adds	r3, r7, #7
     2c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2ca:	1dfb      	adds	r3, r7, #7
     2cc:	781b      	ldrb	r3, [r3, #0]
     2ce:	2b01      	cmp	r3, #1
     2d0:	d00a      	beq.n	2e8 <system_apb_clock_set_mask+0x2c>
     2d2:	2b02      	cmp	r3, #2
     2d4:	d00f      	beq.n	2f6 <system_apb_clock_set_mask+0x3a>
     2d6:	2b00      	cmp	r3, #0
     2d8:	d114      	bne.n	304 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     2da:	4b0e      	ldr	r3, [pc, #56]	; (314 <system_apb_clock_set_mask+0x58>)
     2dc:	4a0d      	ldr	r2, [pc, #52]	; (314 <system_apb_clock_set_mask+0x58>)
     2de:	6991      	ldr	r1, [r2, #24]
     2e0:	683a      	ldr	r2, [r7, #0]
     2e2:	430a      	orrs	r2, r1
     2e4:	619a      	str	r2, [r3, #24]
			break;
     2e6:	e00f      	b.n	308 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     2e8:	4b0a      	ldr	r3, [pc, #40]	; (314 <system_apb_clock_set_mask+0x58>)
     2ea:	4a0a      	ldr	r2, [pc, #40]	; (314 <system_apb_clock_set_mask+0x58>)
     2ec:	69d1      	ldr	r1, [r2, #28]
     2ee:	683a      	ldr	r2, [r7, #0]
     2f0:	430a      	orrs	r2, r1
     2f2:	61da      	str	r2, [r3, #28]
			break;
     2f4:	e008      	b.n	308 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2f6:	4b07      	ldr	r3, [pc, #28]	; (314 <system_apb_clock_set_mask+0x58>)
     2f8:	4a06      	ldr	r2, [pc, #24]	; (314 <system_apb_clock_set_mask+0x58>)
     2fa:	6a11      	ldr	r1, [r2, #32]
     2fc:	683a      	ldr	r2, [r7, #0]
     2fe:	430a      	orrs	r2, r1
     300:	621a      	str	r2, [r3, #32]
			break;
     302:	e001      	b.n	308 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     304:	2317      	movs	r3, #23
     306:	e000      	b.n	30a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     308:	2300      	movs	r3, #0
}
     30a:	0018      	movs	r0, r3
     30c:	46bd      	mov	sp, r7
     30e:	b002      	add	sp, #8
     310:	bd80      	pop	{r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	40000400 	.word	0x40000400

00000318 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     318:	b580      	push	{r7, lr}
     31a:	b082      	sub	sp, #8
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     320:	687b      	ldr	r3, [r7, #4]
     322:	2280      	movs	r2, #128	; 0x80
     324:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     326:	687b      	ldr	r3, [r7, #4]
     328:	2200      	movs	r2, #0
     32a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2201      	movs	r2, #1
     330:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     332:	687b      	ldr	r3, [r7, #4]
     334:	2200      	movs	r2, #0
     336:	70da      	strb	r2, [r3, #3]
}
     338:	46c0      	nop			; (mov r8, r8)
     33a:	46bd      	mov	sp, r7
     33c:	b002      	add	sp, #8
     33e:	bd80      	pop	{r7, pc}

00000340 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     340:	b580      	push	{r7, lr}
     342:	b084      	sub	sp, #16
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     348:	687b      	ldr	r3, [r7, #4]
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     34e:	68fb      	ldr	r3, [r7, #12]
     350:	7bdb      	ldrb	r3, [r3, #15]
     352:	b2db      	uxtb	r3, r3
     354:	001a      	movs	r2, r3
     356:	2380      	movs	r3, #128	; 0x80
     358:	4013      	ands	r3, r2
     35a:	1e5a      	subs	r2, r3, #1
     35c:	4193      	sbcs	r3, r2
     35e:	b2db      	uxtb	r3, r3
#endif
}
     360:	0018      	movs	r0, r3
     362:	46bd      	mov	sp, r7
     364:	b004      	add	sp, #16
     366:	bd80      	pop	{r7, pc}

00000368 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     368:	b590      	push	{r4, r7, lr}
     36a:	b089      	sub	sp, #36	; 0x24
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     370:	2308      	movs	r3, #8
     372:	18fb      	adds	r3, r7, r3
     374:	4a0e      	ldr	r2, [pc, #56]	; (3b0 <_tc_get_inst_index+0x48>)
     376:	ca13      	ldmia	r2!, {r0, r1, r4}
     378:	c313      	stmia	r3!, {r0, r1, r4}
     37a:	ca03      	ldmia	r2!, {r0, r1}
     37c:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     37e:	2300      	movs	r3, #0
     380:	61fb      	str	r3, [r7, #28]
     382:	e00d      	b.n	3a0 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
     384:	2308      	movs	r3, #8
     386:	18fb      	adds	r3, r7, r3
     388:	69fa      	ldr	r2, [r7, #28]
     38a:	0092      	lsls	r2, r2, #2
     38c:	58d2      	ldr	r2, [r2, r3]
     38e:	687b      	ldr	r3, [r7, #4]
     390:	429a      	cmp	r2, r3
     392:	d102      	bne.n	39a <_tc_get_inst_index+0x32>
			return i;
     394:	69fb      	ldr	r3, [r7, #28]
     396:	b2db      	uxtb	r3, r3
     398:	e006      	b.n	3a8 <_tc_get_inst_index+0x40>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     39a:	69fb      	ldr	r3, [r7, #28]
     39c:	3301      	adds	r3, #1
     39e:	61fb      	str	r3, [r7, #28]
     3a0:	69fb      	ldr	r3, [r7, #28]
     3a2:	2b04      	cmp	r3, #4
     3a4:	d9ee      	bls.n	384 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     3a6:	2300      	movs	r3, #0
}
     3a8:	0018      	movs	r0, r3
     3aa:	46bd      	mov	sp, r7
     3ac:	b009      	add	sp, #36	; 0x24
     3ae:	bd90      	pop	{r4, r7, pc}
     3b0:	0000c56c 	.word	0x0000c56c

000003b4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     3b4:	b590      	push	{r4, r7, lr}
     3b6:	b08d      	sub	sp, #52	; 0x34
     3b8:	af00      	add	r7, sp, #0
     3ba:	60f8      	str	r0, [r7, #12]
     3bc:	60b9      	str	r1, [r7, #8]
     3be:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     3c0:	232e      	movs	r3, #46	; 0x2e
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	2200      	movs	r2, #0
     3c6:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     3c8:	232d      	movs	r3, #45	; 0x2d
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	2200      	movs	r2, #0
     3ce:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     3d0:	232c      	movs	r3, #44	; 0x2c
     3d2:	18fb      	adds	r3, r7, r3
     3d4:	2200      	movs	r2, #0
     3d6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     3d8:	2329      	movs	r3, #41	; 0x29
     3da:	18fc      	adds	r4, r7, r3
     3dc:	68bb      	ldr	r3, [r7, #8]
     3de:	0018      	movs	r0, r3
     3e0:	4bbf      	ldr	r3, [pc, #764]	; (6e0 <tc_init+0x32c>)
     3e2:	4798      	blx	r3
     3e4:	0003      	movs	r3, r0
     3e6:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     3e8:	2324      	movs	r3, #36	; 0x24
     3ea:	18fa      	adds	r2, r7, r3
     3ec:	4bbd      	ldr	r3, [pc, #756]	; (6e4 <tc_init+0x330>)
     3ee:	0010      	movs	r0, r2
     3f0:	0019      	movs	r1, r3
     3f2:	2305      	movs	r3, #5
     3f4:	001a      	movs	r2, r3
     3f6:	4bbc      	ldr	r3, [pc, #752]	; (6e8 <tc_init+0x334>)
     3f8:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     3fa:	2318      	movs	r3, #24
     3fc:	18fa      	adds	r2, r7, r3
     3fe:	4bbb      	ldr	r3, [pc, #748]	; (6ec <tc_init+0x338>)
     400:	0010      	movs	r0, r2
     402:	0019      	movs	r1, r3
     404:	230a      	movs	r3, #10
     406:	001a      	movs	r2, r3
     408:	4bb7      	ldr	r3, [pc, #732]	; (6e8 <tc_init+0x334>)
     40a:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     40c:	232b      	movs	r3, #43	; 0x2b
     40e:	18fb      	adds	r3, r7, r3
     410:	2200      	movs	r2, #0
     412:	701a      	strb	r2, [r3, #0]
     414:	e00e      	b.n	434 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
     416:	232b      	movs	r3, #43	; 0x2b
     418:	18fb      	adds	r3, r7, r3
     41a:	781a      	ldrb	r2, [r3, #0]
     41c:	68fb      	ldr	r3, [r7, #12]
     41e:	3202      	adds	r2, #2
     420:	0092      	lsls	r2, r2, #2
     422:	2100      	movs	r1, #0
     424:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     426:	232b      	movs	r3, #43	; 0x2b
     428:	18fb      	adds	r3, r7, r3
     42a:	781a      	ldrb	r2, [r3, #0]
     42c:	232b      	movs	r3, #43	; 0x2b
     42e:	18fb      	adds	r3, r7, r3
     430:	3201      	adds	r2, #1
     432:	701a      	strb	r2, [r3, #0]
     434:	232b      	movs	r3, #43	; 0x2b
     436:	18fb      	adds	r3, r7, r3
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b03      	cmp	r3, #3
     43c:	d9eb      	bls.n	416 <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
     43e:	68fb      	ldr	r3, [r7, #12]
     440:	2200      	movs	r2, #0
     442:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     444:	68fb      	ldr	r3, [r7, #12]
     446:	2200      	movs	r2, #0
     448:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     44a:	2329      	movs	r3, #41	; 0x29
     44c:	18fb      	adds	r3, r7, r3
     44e:	781a      	ldrb	r2, [r3, #0]
     450:	4ba7      	ldr	r3, [pc, #668]	; (6f0 <tc_init+0x33c>)
     452:	0092      	lsls	r2, r2, #2
     454:	68f9      	ldr	r1, [r7, #12]
     456:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     458:	68fb      	ldr	r3, [r7, #12]
     45a:	68ba      	ldr	r2, [r7, #8]
     45c:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     45e:	687b      	ldr	r3, [r7, #4]
     460:	789b      	ldrb	r3, [r3, #2]
     462:	2b08      	cmp	r3, #8
     464:	d108      	bne.n	478 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     466:	2329      	movs	r3, #41	; 0x29
     468:	18fb      	adds	r3, r7, r3
     46a:	781b      	ldrb	r3, [r3, #0]
     46c:	3303      	adds	r3, #3
     46e:	2201      	movs	r2, #1
     470:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     472:	d001      	beq.n	478 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     474:	2317      	movs	r3, #23
     476:	e1c4      	b.n	802 <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     478:	687b      	ldr	r3, [r7, #4]
     47a:	789a      	ldrb	r2, [r3, #2]
     47c:	68fb      	ldr	r3, [r7, #12]
     47e:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     480:	68bb      	ldr	r3, [r7, #8]
     482:	881b      	ldrh	r3, [r3, #0]
     484:	b29b      	uxth	r3, r3
     486:	001a      	movs	r2, r3
     488:	2301      	movs	r3, #1
     48a:	4013      	ands	r3, r2
     48c:	d001      	beq.n	492 <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     48e:	2305      	movs	r3, #5
     490:	e1b7      	b.n	802 <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     492:	68bb      	ldr	r3, [r7, #8]
     494:	7bdb      	ldrb	r3, [r3, #15]
     496:	b2db      	uxtb	r3, r3
     498:	001a      	movs	r2, r3
     49a:	2310      	movs	r3, #16
     49c:	4013      	ands	r3, r2
     49e:	d001      	beq.n	4a4 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     4a0:	231c      	movs	r3, #28
     4a2:	e1ae      	b.n	802 <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     4a4:	68bb      	ldr	r3, [r7, #8]
     4a6:	881b      	ldrh	r3, [r3, #0]
     4a8:	b29b      	uxth	r3, r3
     4aa:	001a      	movs	r2, r3
     4ac:	2302      	movs	r3, #2
     4ae:	4013      	ands	r3, r2
     4b0:	d001      	beq.n	4b6 <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     4b2:	231c      	movs	r3, #28
     4b4:	e1a5      	b.n	802 <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	7c1b      	ldrb	r3, [r3, #16]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d017      	beq.n	4ee <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
     4be:	2314      	movs	r3, #20
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	0018      	movs	r0, r3
     4c4:	4b8b      	ldr	r3, [pc, #556]	; (6f4 <tc_init+0x340>)
     4c6:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	699b      	ldr	r3, [r3, #24]
     4cc:	b2da      	uxtb	r2, r3
     4ce:	2314      	movs	r3, #20
     4d0:	18fb      	adds	r3, r7, r3
     4d2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     4d4:	2314      	movs	r3, #20
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	2201      	movs	r2, #1
     4da:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     4e0:	b2db      	uxtb	r3, r3
     4e2:	2214      	movs	r2, #20
     4e4:	18ba      	adds	r2, r7, r2
     4e6:	0011      	movs	r1, r2
     4e8:	0018      	movs	r0, r3
     4ea:	4b83      	ldr	r3, [pc, #524]	; (6f8 <tc_init+0x344>)
     4ec:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	7f1b      	ldrb	r3, [r3, #28]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d017      	beq.n	526 <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
     4f6:	2314      	movs	r3, #20
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	0018      	movs	r0, r3
     4fc:	4b7d      	ldr	r3, [pc, #500]	; (6f4 <tc_init+0x340>)
     4fe:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     500:	687b      	ldr	r3, [r7, #4]
     502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     504:	b2da      	uxtb	r2, r3
     506:	2314      	movs	r3, #20
     508:	18fb      	adds	r3, r7, r3
     50a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     50c:	2314      	movs	r3, #20
     50e:	18fb      	adds	r3, r7, r3
     510:	2201      	movs	r2, #1
     512:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     514:	687b      	ldr	r3, [r7, #4]
     516:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     518:	b2db      	uxtb	r3, r3
     51a:	2214      	movs	r2, #20
     51c:	18ba      	adds	r2, r7, r2
     51e:	0011      	movs	r1, r2
     520:	0018      	movs	r0, r3
     522:	4b75      	ldr	r3, [pc, #468]	; (6f8 <tc_init+0x344>)
     524:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     526:	2329      	movs	r3, #41	; 0x29
     528:	18fb      	adds	r3, r7, r3
     52a:	781a      	ldrb	r2, [r3, #0]
     52c:	2318      	movs	r3, #24
     52e:	18fb      	adds	r3, r7, r3
     530:	0052      	lsls	r2, r2, #1
     532:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     534:	0019      	movs	r1, r3
     536:	2002      	movs	r0, #2
     538:	4b70      	ldr	r3, [pc, #448]	; (6fc <tc_init+0x348>)
     53a:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	789b      	ldrb	r3, [r3, #2]
     540:	2b08      	cmp	r3, #8
     542:	d10b      	bne.n	55c <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     544:	2329      	movs	r3, #41	; 0x29
     546:	18fb      	adds	r3, r7, r3
     548:	781b      	ldrb	r3, [r3, #0]
     54a:	1c5a      	adds	r2, r3, #1
     54c:	2318      	movs	r3, #24
     54e:	18fb      	adds	r3, r7, r3
     550:	0052      	lsls	r2, r2, #1
     552:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     554:	0019      	movs	r1, r3
     556:	2002      	movs	r0, #2
     558:	4b68      	ldr	r3, [pc, #416]	; (6fc <tc_init+0x348>)
     55a:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     55c:	2310      	movs	r3, #16
     55e:	18fb      	adds	r3, r7, r3
     560:	0018      	movs	r0, r3
     562:	4b67      	ldr	r3, [pc, #412]	; (700 <tc_init+0x34c>)
     564:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     566:	687b      	ldr	r3, [r7, #4]
     568:	781a      	ldrb	r2, [r3, #0]
     56a:	2310      	movs	r3, #16
     56c:	18fb      	adds	r3, r7, r3
     56e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     570:	2329      	movs	r3, #41	; 0x29
     572:	18fb      	adds	r3, r7, r3
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2224      	movs	r2, #36	; 0x24
     578:	18ba      	adds	r2, r7, r2
     57a:	5cd3      	ldrb	r3, [r2, r3]
     57c:	2210      	movs	r2, #16
     57e:	18ba      	adds	r2, r7, r2
     580:	0011      	movs	r1, r2
     582:	0018      	movs	r0, r3
     584:	4b5f      	ldr	r3, [pc, #380]	; (704 <tc_init+0x350>)
     586:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     588:	2329      	movs	r3, #41	; 0x29
     58a:	18fb      	adds	r3, r7, r3
     58c:	781b      	ldrb	r3, [r3, #0]
     58e:	2224      	movs	r2, #36	; 0x24
     590:	18ba      	adds	r2, r7, r2
     592:	5cd3      	ldrb	r3, [r2, r3]
     594:	0018      	movs	r0, r3
     596:	4b5c      	ldr	r3, [pc, #368]	; (708 <tc_init+0x354>)
     598:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     5a2:	4313      	orrs	r3, r2
     5a4:	b2db      	uxtb	r3, r3
     5a6:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     5ac:	4313      	orrs	r3, r2
     5ae:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     5b4:	232e      	movs	r3, #46	; 0x2e
     5b6:	18fb      	adds	r3, r7, r3
     5b8:	430a      	orrs	r2, r1
     5ba:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	785b      	ldrb	r3, [r3, #1]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d008      	beq.n	5d6 <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     5c4:	232e      	movs	r3, #46	; 0x2e
     5c6:	18fb      	adds	r3, r7, r3
     5c8:	222e      	movs	r2, #46	; 0x2e
     5ca:	18ba      	adds	r2, r7, r2
     5cc:	8812      	ldrh	r2, [r2, #0]
     5ce:	2180      	movs	r1, #128	; 0x80
     5d0:	0109      	lsls	r1, r1, #4
     5d2:	430a      	orrs	r2, r1
     5d4:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	68fb      	ldr	r3, [r7, #12]
     5da:	0018      	movs	r0, r3
     5dc:	4b4b      	ldr	r3, [pc, #300]	; (70c <tc_init+0x358>)
     5de:	4798      	blx	r3
     5e0:	1e03      	subs	r3, r0, #0
     5e2:	d1f9      	bne.n	5d8 <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     5e4:	68bb      	ldr	r3, [r7, #8]
     5e6:	222e      	movs	r2, #46	; 0x2e
     5e8:	18ba      	adds	r2, r7, r2
     5ea:	8812      	ldrh	r2, [r2, #0]
     5ec:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	7b5b      	ldrb	r3, [r3, #13]
     5f2:	2b00      	cmp	r3, #0
     5f4:	d003      	beq.n	5fe <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     5f6:	232d      	movs	r3, #45	; 0x2d
     5f8:	18fb      	adds	r3, r7, r3
     5fa:	2204      	movs	r2, #4
     5fc:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	7b9b      	ldrb	r3, [r3, #14]
     602:	2b00      	cmp	r3, #0
     604:	d007      	beq.n	616 <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     606:	232d      	movs	r3, #45	; 0x2d
     608:	18fb      	adds	r3, r7, r3
     60a:	222d      	movs	r2, #45	; 0x2d
     60c:	18ba      	adds	r2, r7, r2
     60e:	7812      	ldrb	r2, [r2, #0]
     610:	2101      	movs	r1, #1
     612:	430a      	orrs	r2, r1
     614:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     616:	46c0      	nop			; (mov r8, r8)
     618:	68fb      	ldr	r3, [r7, #12]
     61a:	0018      	movs	r0, r3
     61c:	4b3b      	ldr	r3, [pc, #236]	; (70c <tc_init+0x358>)
     61e:	4798      	blx	r3
     620:	1e03      	subs	r3, r0, #0
     622:	d1f9      	bne.n	618 <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     624:	68bb      	ldr	r3, [r7, #8]
     626:	22ff      	movs	r2, #255	; 0xff
     628:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     62a:	232d      	movs	r3, #45	; 0x2d
     62c:	18fb      	adds	r3, r7, r3
     62e:	781b      	ldrb	r3, [r3, #0]
     630:	2b00      	cmp	r3, #0
     632:	d00b      	beq.n	64c <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
     634:	46c0      	nop			; (mov r8, r8)
     636:	68fb      	ldr	r3, [r7, #12]
     638:	0018      	movs	r0, r3
     63a:	4b34      	ldr	r3, [pc, #208]	; (70c <tc_init+0x358>)
     63c:	4798      	blx	r3
     63e:	1e03      	subs	r3, r0, #0
     640:	d1f9      	bne.n	636 <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     642:	68bb      	ldr	r3, [r7, #8]
     644:	222d      	movs	r2, #45	; 0x2d
     646:	18ba      	adds	r2, r7, r2
     648:	7812      	ldrb	r2, [r2, #0]
     64a:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     64c:	232c      	movs	r3, #44	; 0x2c
     64e:	18fb      	adds	r3, r7, r3
     650:	687a      	ldr	r2, [r7, #4]
     652:	7a92      	ldrb	r2, [r2, #10]
     654:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     656:	232a      	movs	r3, #42	; 0x2a
     658:	18fb      	adds	r3, r7, r3
     65a:	2200      	movs	r2, #0
     65c:	701a      	strb	r2, [r3, #0]
     65e:	e01c      	b.n	69a <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
     660:	232a      	movs	r3, #42	; 0x2a
     662:	18fb      	adds	r3, r7, r3
     664:	781b      	ldrb	r3, [r3, #0]
     666:	687a      	ldr	r2, [r7, #4]
     668:	18d3      	adds	r3, r2, r3
     66a:	7adb      	ldrb	r3, [r3, #11]
     66c:	2b00      	cmp	r3, #0
     66e:	d00d      	beq.n	68c <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     670:	232a      	movs	r3, #42	; 0x2a
     672:	18fb      	adds	r3, r7, r3
     674:	781b      	ldrb	r3, [r3, #0]
     676:	2210      	movs	r2, #16
     678:	409a      	lsls	r2, r3
     67a:	0013      	movs	r3, r2
     67c:	b2d9      	uxtb	r1, r3
     67e:	232c      	movs	r3, #44	; 0x2c
     680:	18fb      	adds	r3, r7, r3
     682:	222c      	movs	r2, #44	; 0x2c
     684:	18ba      	adds	r2, r7, r2
     686:	7812      	ldrb	r2, [r2, #0]
     688:	430a      	orrs	r2, r1
     68a:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     68c:	232a      	movs	r3, #42	; 0x2a
     68e:	18fb      	adds	r3, r7, r3
     690:	781a      	ldrb	r2, [r3, #0]
     692:	232a      	movs	r3, #42	; 0x2a
     694:	18fb      	adds	r3, r7, r3
     696:	3201      	adds	r2, #1
     698:	701a      	strb	r2, [r3, #0]
     69a:	232a      	movs	r3, #42	; 0x2a
     69c:	18fb      	adds	r3, r7, r3
     69e:	781b      	ldrb	r3, [r3, #0]
     6a0:	2b01      	cmp	r3, #1
     6a2:	d9dd      	bls.n	660 <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     6a4:	46c0      	nop			; (mov r8, r8)
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	0018      	movs	r0, r3
     6aa:	4b18      	ldr	r3, [pc, #96]	; (70c <tc_init+0x358>)
     6ac:	4798      	blx	r3
     6ae:	1e03      	subs	r3, r0, #0
     6b0:	d1f9      	bne.n	6a6 <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     6b2:	68bb      	ldr	r3, [r7, #8]
     6b4:	222c      	movs	r2, #44	; 0x2c
     6b6:	18ba      	adds	r2, r7, r2
     6b8:	7812      	ldrb	r2, [r2, #0]
     6ba:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     6bc:	46c0      	nop			; (mov r8, r8)
     6be:	68fb      	ldr	r3, [r7, #12]
     6c0:	0018      	movs	r0, r3
     6c2:	4b12      	ldr	r3, [pc, #72]	; (70c <tc_init+0x358>)
     6c4:	4798      	blx	r3
     6c6:	1e03      	subs	r3, r0, #0
     6c8:	d1f9      	bne.n	6be <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     6ca:	68fb      	ldr	r3, [r7, #12]
     6cc:	791b      	ldrb	r3, [r3, #4]
     6ce:	2b04      	cmp	r3, #4
     6d0:	d01e      	beq.n	710 <tc_init+0x35c>
     6d2:	2b08      	cmp	r3, #8
     6d4:	d100      	bne.n	6d8 <tc_init+0x324>
     6d6:	e070      	b.n	7ba <tc_init+0x406>
     6d8:	2b00      	cmp	r3, #0
     6da:	d04b      	beq.n	774 <tc_init+0x3c0>
     6dc:	e090      	b.n	800 <tc_init+0x44c>
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	00000369 	.word	0x00000369
     6e4:	0000c580 	.word	0x0000c580
     6e8:	0000b05d 	.word	0x0000b05d
     6ec:	0000c588 	.word	0x0000c588
     6f0:	200001d0 	.word	0x200001d0
     6f4:	00000319 	.word	0x00000319
     6f8:	000093f1 	.word	0x000093f1
     6fc:	000002bd 	.word	0x000002bd
     700:	000002a5 	.word	0x000002a5
     704:	00009105 	.word	0x00009105
     708:	00009149 	.word	0x00009149
     70c:	00000341 	.word	0x00000341
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     710:	46c0      	nop			; (mov r8, r8)
     712:	68fb      	ldr	r3, [r7, #12]
     714:	0018      	movs	r0, r3
     716:	4b3d      	ldr	r3, [pc, #244]	; (80c <tc_init+0x458>)
     718:	4798      	blx	r3
     71a:	1e03      	subs	r3, r0, #0
     71c:	d1f9      	bne.n	712 <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     71e:	687b      	ldr	r3, [r7, #4]
     720:	2228      	movs	r2, #40	; 0x28
     722:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     724:	68bb      	ldr	r3, [r7, #8]
     726:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     728:	46c0      	nop			; (mov r8, r8)
     72a:	68fb      	ldr	r3, [r7, #12]
     72c:	0018      	movs	r0, r3
     72e:	4b37      	ldr	r3, [pc, #220]	; (80c <tc_init+0x458>)
     730:	4798      	blx	r3
     732:	1e03      	subs	r3, r0, #0
     734:	d1f9      	bne.n	72a <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     736:	687b      	ldr	r3, [r7, #4]
     738:	2229      	movs	r2, #41	; 0x29
     73a:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     73c:	68bb      	ldr	r3, [r7, #8]
     73e:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     740:	46c0      	nop			; (mov r8, r8)
     742:	68fb      	ldr	r3, [r7, #12]
     744:	0018      	movs	r0, r3
     746:	4b31      	ldr	r3, [pc, #196]	; (80c <tc_init+0x458>)
     748:	4798      	blx	r3
     74a:	1e03      	subs	r3, r0, #0
     74c:	d1f9      	bne.n	742 <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     74e:	687b      	ldr	r3, [r7, #4]
     750:	222a      	movs	r2, #42	; 0x2a
     752:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     754:	68bb      	ldr	r3, [r7, #8]
     756:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     758:	46c0      	nop			; (mov r8, r8)
     75a:	68fb      	ldr	r3, [r7, #12]
     75c:	0018      	movs	r0, r3
     75e:	4b2b      	ldr	r3, [pc, #172]	; (80c <tc_init+0x458>)
     760:	4798      	blx	r3
     762:	1e03      	subs	r3, r0, #0
     764:	d1f9      	bne.n	75a <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     766:	687b      	ldr	r3, [r7, #4]
     768:	222b      	movs	r2, #43	; 0x2b
     76a:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     76c:	68bb      	ldr	r3, [r7, #8]
     76e:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     770:	2300      	movs	r3, #0
     772:	e046      	b.n	802 <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     774:	46c0      	nop			; (mov r8, r8)
     776:	68fb      	ldr	r3, [r7, #12]
     778:	0018      	movs	r0, r3
     77a:	4b24      	ldr	r3, [pc, #144]	; (80c <tc_init+0x458>)
     77c:	4798      	blx	r3
     77e:	1e03      	subs	r3, r0, #0
     780:	d1f9      	bne.n	776 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     782:	687b      	ldr	r3, [r7, #4]
     784:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     786:	68bb      	ldr	r3, [r7, #8]
     788:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	68fb      	ldr	r3, [r7, #12]
     78e:	0018      	movs	r0, r3
     790:	4b1e      	ldr	r3, [pc, #120]	; (80c <tc_init+0x458>)
     792:	4798      	blx	r3
     794:	1e03      	subs	r3, r0, #0
     796:	d1f9      	bne.n	78c <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     798:	687b      	ldr	r3, [r7, #4]
     79a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     79c:	68bb      	ldr	r3, [r7, #8]
     79e:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     7a0:	46c0      	nop			; (mov r8, r8)
     7a2:	68fb      	ldr	r3, [r7, #12]
     7a4:	0018      	movs	r0, r3
     7a6:	4b19      	ldr	r3, [pc, #100]	; (80c <tc_init+0x458>)
     7a8:	4798      	blx	r3
     7aa:	1e03      	subs	r3, r0, #0
     7ac:	d1f9      	bne.n	7a2 <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     7b2:	68bb      	ldr	r3, [r7, #8]
     7b4:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     7b6:	2300      	movs	r3, #0
     7b8:	e023      	b.n	802 <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	68fb      	ldr	r3, [r7, #12]
     7be:	0018      	movs	r0, r3
     7c0:	4b12      	ldr	r3, [pc, #72]	; (80c <tc_init+0x458>)
     7c2:	4798      	blx	r3
     7c4:	1e03      	subs	r3, r0, #0
     7c6:	d1f9      	bne.n	7bc <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     7cc:	68bb      	ldr	r3, [r7, #8]
     7ce:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	0018      	movs	r0, r3
     7d6:	4b0d      	ldr	r3, [pc, #52]	; (80c <tc_init+0x458>)
     7d8:	4798      	blx	r3
     7da:	1e03      	subs	r3, r0, #0
     7dc:	d1f9      	bne.n	7d2 <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     7e2:	68bb      	ldr	r3, [r7, #8]
     7e4:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	0018      	movs	r0, r3
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <tc_init+0x458>)
     7ee:	4798      	blx	r3
     7f0:	1e03      	subs	r3, r0, #0
     7f2:	d1f9      	bne.n	7e8 <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     7f4:	687b      	ldr	r3, [r7, #4]
     7f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     7f8:	68bb      	ldr	r3, [r7, #8]
     7fa:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     7fc:	2300      	movs	r3, #0
     7fe:	e000      	b.n	802 <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     800:	2317      	movs	r3, #23
}
     802:	0018      	movs	r0, r3
     804:	46bd      	mov	sp, r7
     806:	b00d      	add	sp, #52	; 0x34
     808:	bd90      	pop	{r4, r7, pc}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	00000341 	.word	0x00000341

00000810 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     810:	b580      	push	{r7, lr}
     812:	b082      	sub	sp, #8
     814:	af00      	add	r7, sp, #0
     816:	0002      	movs	r2, r0
     818:	1dfb      	adds	r3, r7, #7
     81a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     81c:	4b06      	ldr	r3, [pc, #24]	; (838 <system_interrupt_enable+0x28>)
     81e:	1dfa      	adds	r2, r7, #7
     820:	7812      	ldrb	r2, [r2, #0]
     822:	0011      	movs	r1, r2
     824:	221f      	movs	r2, #31
     826:	400a      	ands	r2, r1
     828:	2101      	movs	r1, #1
     82a:	4091      	lsls	r1, r2
     82c:	000a      	movs	r2, r1
     82e:	601a      	str	r2, [r3, #0]
}
     830:	46c0      	nop			; (mov r8, r8)
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}
     838:	e000e100 	.word	0xe000e100

0000083c <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     844:	687b      	ldr	r3, [r7, #4]
     846:	681b      	ldr	r3, [r3, #0]
     848:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	7bdb      	ldrb	r3, [r3, #15]
     84e:	b2db      	uxtb	r3, r3
     850:	001a      	movs	r2, r3
     852:	2380      	movs	r3, #128	; 0x80
     854:	4013      	ands	r3, r2
     856:	1e5a      	subs	r2, r3, #1
     858:	4193      	sbcs	r3, r2
     85a:	b2db      	uxtb	r3, r3
#endif
}
     85c:	0018      	movs	r0, r3
     85e:	46bd      	mov	sp, r7
     860:	b004      	add	sp, #16
     862:	bd80      	pop	{r7, pc}

00000864 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
     864:	b580      	push	{r7, lr}
     866:	b082      	sub	sp, #8
     868:	af00      	add	r7, sp, #0
     86a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	2200      	movs	r2, #0
     870:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     872:	687b      	ldr	r3, [r7, #4]
     874:	2200      	movs	r2, #0
     876:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     878:	687b      	ldr	r3, [r7, #4]
     87a:	2200      	movs	r2, #0
     87c:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	2200      	movs	r2, #0
     882:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     884:	687b      	ldr	r3, [r7, #4]
     886:	2200      	movs	r2, #0
     888:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	2200      	movs	r2, #0
     88e:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     890:	687b      	ldr	r3, [r7, #4]
     892:	2200      	movs	r2, #0
     894:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     896:	687b      	ldr	r3, [r7, #4]
     898:	2200      	movs	r2, #0
     89a:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	2200      	movs	r2, #0
     8a6:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	2200      	movs	r2, #0
     8ac:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	2200      	movs	r2, #0
     8b2:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	2200      	movs	r2, #0
     8b8:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	2200      	movs	r2, #0
     8be:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	2200      	movs	r2, #0
     8c4:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	2200      	movs	r2, #0
     8ca:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	2200      	movs	r2, #0
     8d0:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	2200      	movs	r2, #0
     8d6:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	2200      	movs	r2, #0
     8dc:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	2200      	movs	r2, #0
     8e2:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
     8e4:	46c0      	nop			; (mov r8, r8)
     8e6:	46bd      	mov	sp, r7
     8e8:	b002      	add	sp, #8
     8ea:	bd80      	pop	{r7, pc}

000008ec <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
     8ec:	b580      	push	{r7, lr}
     8ee:	b084      	sub	sp, #16
     8f0:	af00      	add	r7, sp, #0
     8f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	0018      	movs	r0, r3
     900:	4b07      	ldr	r3, [pc, #28]	; (920 <tc_enable+0x34>)
     902:	4798      	blx	r3
     904:	1e03      	subs	r3, r0, #0
     906:	d1f9      	bne.n	8fc <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     908:	68fb      	ldr	r3, [r7, #12]
     90a:	881b      	ldrh	r3, [r3, #0]
     90c:	b29b      	uxth	r3, r3
     90e:	2202      	movs	r2, #2
     910:	4313      	orrs	r3, r2
     912:	b29a      	uxth	r2, r3
     914:	68fb      	ldr	r3, [r7, #12]
     916:	801a      	strh	r2, [r3, #0]
}
     918:	46c0      	nop			; (mov r8, r8)
     91a:	46bd      	mov	sp, r7
     91c:	b004      	add	sp, #16
     91e:	bd80      	pop	{r7, pc}
     920:	0000083d 	.word	0x0000083d

00000924 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
     924:	b580      	push	{r7, lr}
     926:	b082      	sub	sp, #8
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     92c:	4a04      	ldr	r2, [pc, #16]	; (940 <_tc_interrupt_get_interrupt_vector+0x1c>)
     92e:	687b      	ldr	r3, [r7, #4]
     930:	18d3      	adds	r3, r2, r3
     932:	781b      	ldrb	r3, [r3, #0]
     934:	b25b      	sxtb	r3, r3
}
     936:	0018      	movs	r0, r3
     938:	46bd      	mov	sp, r7
     93a:	b002      	add	sp, #8
     93c:	bd80      	pop	{r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	20000000 	.word	0x20000000

00000944 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
     944:	b580      	push	{r7, lr}
     946:	b082      	sub	sp, #8
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	000a      	movs	r2, r1
     94e:	1cfb      	adds	r3, r7, #3
     950:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     952:	687b      	ldr	r3, [r7, #4]
     954:	681b      	ldr	r3, [r3, #0]
     956:	0018      	movs	r0, r3
     958:	4b22      	ldr	r3, [pc, #136]	; (9e4 <tc_enable_callback+0xa0>)
     95a:	4798      	blx	r3
     95c:	0003      	movs	r3, r0
     95e:	0018      	movs	r0, r3
     960:	4b21      	ldr	r3, [pc, #132]	; (9e8 <tc_enable_callback+0xa4>)
     962:	4798      	blx	r3
     964:	0003      	movs	r3, r0
     966:	0018      	movs	r0, r3
     968:	4b20      	ldr	r3, [pc, #128]	; (9ec <tc_enable_callback+0xa8>)
     96a:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     96c:	1cfb      	adds	r3, r7, #3
     96e:	781b      	ldrb	r3, [r3, #0]
     970:	2b02      	cmp	r3, #2
     972:	d10b      	bne.n	98c <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
     974:	687b      	ldr	r3, [r7, #4]
     976:	7e5b      	ldrb	r3, [r3, #25]
     978:	2210      	movs	r2, #16
     97a:	4313      	orrs	r3, r2
     97c:	b2da      	uxtb	r2, r3
     97e:	687b      	ldr	r3, [r7, #4]
     980:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
     982:	687b      	ldr	r3, [r7, #4]
     984:	681b      	ldr	r3, [r3, #0]
     986:	2210      	movs	r2, #16
     988:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
     98a:	e026      	b.n	9da <tc_enable_callback+0x96>
	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     98c:	1cfb      	adds	r3, r7, #3
     98e:	781b      	ldrb	r3, [r3, #0]
     990:	2b03      	cmp	r3, #3
     992:	d10b      	bne.n	9ac <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
     994:	687b      	ldr	r3, [r7, #4]
     996:	7e5b      	ldrb	r3, [r3, #25]
     998:	2220      	movs	r2, #32
     99a:	4313      	orrs	r3, r2
     99c:	b2da      	uxtb	r2, r3
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	2220      	movs	r2, #32
     9a8:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
     9aa:	e016      	b.n	9da <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	7e5b      	ldrb	r3, [r3, #25]
     9b0:	b25a      	sxtb	r2, r3
     9b2:	1cfb      	adds	r3, r7, #3
     9b4:	781b      	ldrb	r3, [r3, #0]
     9b6:	2101      	movs	r1, #1
     9b8:	4099      	lsls	r1, r3
     9ba:	000b      	movs	r3, r1
     9bc:	b25b      	sxtb	r3, r3
     9be:	4313      	orrs	r3, r2
     9c0:	b25b      	sxtb	r3, r3
     9c2:	b2da      	uxtb	r2, r3
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	1cfa      	adds	r2, r7, #3
     9ce:	7812      	ldrb	r2, [r2, #0]
     9d0:	2101      	movs	r1, #1
     9d2:	4091      	lsls	r1, r2
     9d4:	000a      	movs	r2, r1
     9d6:	b2d2      	uxtb	r2, r2
     9d8:	735a      	strb	r2, [r3, #13]
	}
}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	46bd      	mov	sp, r7
     9de:	b002      	add	sp, #8
     9e0:	bd80      	pop	{r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	00000369 	.word	0x00000369
     9e8:	00000925 	.word	0x00000925
     9ec:	00000811 	.word	0x00000811

000009f0 <tc_callback>:
#include "main.h"

struct tc_module tc_instance;

void tc_callback(struct tc_module *const module_inst)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b082      	sub	sp, #8
     9f4:	af00      	add	r7, sp, #0
     9f6:	6078      	str	r0, [r7, #4]
	TimerCallback();
     9f8:	4b02      	ldr	r3, [pc, #8]	; (a04 <tc_callback+0x14>)
     9fa:	4798      	blx	r3
}
     9fc:	46c0      	nop			; (mov r8, r8)
     9fe:	46bd      	mov	sp, r7
     a00:	b002      	add	sp, #8
     a02:	bd80      	pop	{r7, pc}
     a04:	0000acb9 	.word	0x0000acb9

00000a08 <configure_tc>:

void configure_tc(void)
{
     a08:	b580      	push	{r7, lr}
     a0a:	b08e      	sub	sp, #56	; 0x38
     a0c:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
     a0e:	1d3b      	adds	r3, r7, #4
     a10:	0018      	movs	r0, r3
     a12:	4b13      	ldr	r3, [pc, #76]	; (a60 <configure_tc+0x58>)
     a14:	4798      	blx	r3
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     a16:	1d3b      	adds	r3, r7, #4
     a18:	2204      	movs	r2, #4
     a1a:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
     a1c:	1d3b      	adds	r3, r7, #4
     a1e:	2201      	movs	r2, #1
     a20:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
     a22:	1d3b      	adds	r3, r7, #4
     a24:	22c0      	movs	r2, #192	; 0xc0
     a26:	00d2      	lsls	r2, r2, #3
     a28:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 32; //This sets interrupt time - 128cnts/sec - 32 =.25sec
     a2a:	1d3b      	adds	r3, r7, #4
     a2c:	2229      	movs	r2, #41	; 0x29
     a2e:	2120      	movs	r1, #32
     a30:	5499      	strb	r1, [r3, r2]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
     a32:	1d3b      	adds	r3, r7, #4
     a34:	222a      	movs	r2, #42	; 0x2a
     a36:	2132      	movs	r1, #50	; 0x32
     a38:	5499      	strb	r1, [r3, r2]
	config_tc.counter_8_bit.compare_capture_channel[1] = 99;
     a3a:	1d3b      	adds	r3, r7, #4
     a3c:	222b      	movs	r2, #43	; 0x2b
     a3e:	2163      	movs	r1, #99	; 0x63
     a40:	5499      	strb	r1, [r3, r2]

	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     a42:	1d3a      	adds	r2, r7, #4
     a44:	4907      	ldr	r1, [pc, #28]	; (a64 <configure_tc+0x5c>)
     a46:	4b08      	ldr	r3, [pc, #32]	; (a68 <configure_tc+0x60>)
     a48:	0018      	movs	r0, r3
     a4a:	4b08      	ldr	r3, [pc, #32]	; (a6c <configure_tc+0x64>)
     a4c:	4798      	blx	r3
	tc_enable(&tc_instance);
     a4e:	4b06      	ldr	r3, [pc, #24]	; (a68 <configure_tc+0x60>)
     a50:	0018      	movs	r0, r3
     a52:	4b07      	ldr	r3, [pc, #28]	; (a70 <configure_tc+0x68>)
     a54:	4798      	blx	r3
}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	46bd      	mov	sp, r7
     a5a:	b00e      	add	sp, #56	; 0x38
     a5c:	bd80      	pop	{r7, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00000865 	.word	0x00000865
     a64:	42002c00 	.word	0x42002c00
     a68:	200001e4 	.word	0x200001e4
     a6c:	000003b5 	.word	0x000003b5
     a70:	000008ed 	.word	0x000008ed

00000a74 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
     a74:	b580      	push	{r7, lr}
     a76:	af00      	add	r7, sp, #0
	tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_OVERFLOW);
     a78:	4906      	ldr	r1, [pc, #24]	; (a94 <configure_tc_callbacks+0x20>)
     a7a:	4b07      	ldr	r3, [pc, #28]	; (a98 <configure_tc_callbacks+0x24>)
     a7c:	2200      	movs	r2, #0
     a7e:	0018      	movs	r0, r3
     a80:	4b06      	ldr	r3, [pc, #24]	; (a9c <configure_tc_callbacks+0x28>)
     a82:	4798      	blx	r3
	//tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_CC_CHANNEL0);
	//tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_CC_CHANNEL1);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
     a84:	4b04      	ldr	r3, [pc, #16]	; (a98 <configure_tc_callbacks+0x24>)
     a86:	2100      	movs	r1, #0
     a88:	0018      	movs	r0, r3
     a8a:	4b05      	ldr	r3, [pc, #20]	; (aa0 <configure_tc_callbacks+0x2c>)
     a8c:	4798      	blx	r3
	//tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL1);
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	46bd      	mov	sp, r7
     a92:	bd80      	pop	{r7, pc}
     a94:	000009f1 	.word	0x000009f1
     a98:	200001e4 	.word	0x200001e4
     a9c:	00000115 	.word	0x00000115
     aa0:	00000945 	.word	0x00000945

00000aa4 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     aa4:	b580      	push	{r7, lr}
     aa6:	b082      	sub	sp, #8
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	2b00      	cmp	r3, #0
     ab0:	d00c      	beq.n	acc <delay_cycles+0x28>
		SysTick->LOAD = n;
     ab2:	4b08      	ldr	r3, [pc, #32]	; (ad4 <delay_cycles+0x30>)
     ab4:	687a      	ldr	r2, [r7, #4]
     ab6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     ab8:	4b06      	ldr	r3, [pc, #24]	; (ad4 <delay_cycles+0x30>)
     aba:	2200      	movs	r2, #0
     abc:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	4b04      	ldr	r3, [pc, #16]	; (ad4 <delay_cycles+0x30>)
     ac2:	681a      	ldr	r2, [r3, #0]
     ac4:	2380      	movs	r3, #128	; 0x80
     ac6:	025b      	lsls	r3, r3, #9
     ac8:	4013      	ands	r3, r2
     aca:	d0f9      	beq.n	ac0 <delay_cycles+0x1c>
		};
	}
}
     acc:	46c0      	nop			; (mov r8, r8)
     ace:	46bd      	mov	sp, r7
     ad0:	b002      	add	sp, #8
     ad2:	bd80      	pop	{r7, pc}
     ad4:	e000e010 	.word	0xe000e010

00000ad8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     adc:	2000      	movs	r0, #0
     ade:	4b0f      	ldr	r3, [pc, #60]	; (b1c <delay_init+0x44>)
     ae0:	4798      	blx	r3
     ae2:	0002      	movs	r2, r0
     ae4:	4b0e      	ldr	r3, [pc, #56]	; (b20 <delay_init+0x48>)
     ae6:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     ae8:	4b0d      	ldr	r3, [pc, #52]	; (b20 <delay_init+0x48>)
     aea:	6818      	ldr	r0, [r3, #0]
     aec:	4b0d      	ldr	r3, [pc, #52]	; (b24 <delay_init+0x4c>)
     aee:	22fa      	movs	r2, #250	; 0xfa
     af0:	0091      	lsls	r1, r2, #2
     af2:	4798      	blx	r3
     af4:	0003      	movs	r3, r0
     af6:	001a      	movs	r2, r3
     af8:	4b09      	ldr	r3, [pc, #36]	; (b20 <delay_init+0x48>)
     afa:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     afc:	4b08      	ldr	r3, [pc, #32]	; (b20 <delay_init+0x48>)
     afe:	6818      	ldr	r0, [r3, #0]
     b00:	4b08      	ldr	r3, [pc, #32]	; (b24 <delay_init+0x4c>)
     b02:	22fa      	movs	r2, #250	; 0xfa
     b04:	0091      	lsls	r1, r2, #2
     b06:	4798      	blx	r3
     b08:	0003      	movs	r3, r0
     b0a:	001a      	movs	r2, r3
     b0c:	4b06      	ldr	r3, [pc, #24]	; (b28 <delay_init+0x50>)
     b0e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <delay_init+0x54>)
     b12:	2205      	movs	r2, #5
     b14:	601a      	str	r2, [r3, #0]
}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	46bd      	mov	sp, r7
     b1a:	bd80      	pop	{r7, pc}
     b1c:	0000902d 	.word	0x0000902d
     b20:	20000008 	.word	0x20000008
     b24:	0000aea1 	.word	0x0000aea1
     b28:	2000000c 	.word	0x2000000c
     b2c:	e000e010 	.word	0xe000e010

00000b30 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     b30:	b580      	push	{r7, lr}
     b32:	b082      	sub	sp, #8
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
	while (n--) {
     b38:	e004      	b.n	b44 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     b3a:	4b07      	ldr	r3, [pc, #28]	; (b58 <delay_cycles_ms+0x28>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	0018      	movs	r0, r3
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <delay_cycles_ms+0x2c>)
     b42:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	1e5a      	subs	r2, r3, #1
     b48:	607a      	str	r2, [r7, #4]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d1f5      	bne.n	b3a <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	46bd      	mov	sp, r7
     b52:	b002      	add	sp, #8
     b54:	bd80      	pop	{r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	20000008 	.word	0x20000008
     b5c:	00000aa5 	.word	0x00000aa5

00000b60 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     b60:	b580      	push	{r7, lr}
     b62:	b084      	sub	sp, #16
     b64:	af00      	add	r7, sp, #0
     b66:	0002      	movs	r2, r0
     b68:	1dfb      	adds	r3, r7, #7
     b6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     b6c:	230f      	movs	r3, #15
     b6e:	18fb      	adds	r3, r7, r3
     b70:	1dfa      	adds	r2, r7, #7
     b72:	7812      	ldrb	r2, [r2, #0]
     b74:	09d2      	lsrs	r2, r2, #7
     b76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     b78:	230e      	movs	r3, #14
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	1dfa      	adds	r2, r7, #7
     b7e:	7812      	ldrb	r2, [r2, #0]
     b80:	0952      	lsrs	r2, r2, #5
     b82:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     b84:	4b0d      	ldr	r3, [pc, #52]	; (bbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
     b86:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     b88:	230f      	movs	r3, #15
     b8a:	18fb      	adds	r3, r7, r3
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	2b00      	cmp	r3, #0
     b90:	d10f      	bne.n	bb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     b92:	230f      	movs	r3, #15
     b94:	18fb      	adds	r3, r7, r3
     b96:	781b      	ldrb	r3, [r3, #0]
     b98:	009b      	lsls	r3, r3, #2
     b9a:	2210      	movs	r2, #16
     b9c:	4694      	mov	ip, r2
     b9e:	44bc      	add	ip, r7
     ba0:	4463      	add	r3, ip
     ba2:	3b08      	subs	r3, #8
     ba4:	681a      	ldr	r2, [r3, #0]
     ba6:	230e      	movs	r3, #14
     ba8:	18fb      	adds	r3, r7, r3
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	01db      	lsls	r3, r3, #7
     bae:	18d3      	adds	r3, r2, r3
     bb0:	e000      	b.n	bb4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     bb2:	2300      	movs	r3, #0
	}
}
     bb4:	0018      	movs	r0, r3
     bb6:	46bd      	mov	sp, r7
     bb8:	b004      	add	sp, #16
     bba:	bd80      	pop	{r7, pc}
     bbc:	41004400 	.word	0x41004400

00000bc0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	0002      	movs	r2, r0
     bc8:	1dfb      	adds	r3, r7, #7
     bca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     bcc:	1dfb      	adds	r3, r7, #7
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	0018      	movs	r0, r3
     bd2:	4b03      	ldr	r3, [pc, #12]	; (be0 <port_get_group_from_gpio_pin+0x20>)
     bd4:	4798      	blx	r3
     bd6:	0003      	movs	r3, r0
}
     bd8:	0018      	movs	r0, r3
     bda:	46bd      	mov	sp, r7
     bdc:	b002      	add	sp, #8
     bde:	bd80      	pop	{r7, pc}
     be0:	00000b61 	.word	0x00000b61

00000be4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
     bea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	2200      	movs	r2, #0
     bf0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     bf2:	687b      	ldr	r3, [r7, #4]
     bf4:	2201      	movs	r2, #1
     bf6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     bf8:	687b      	ldr	r3, [r7, #4]
     bfa:	2200      	movs	r2, #0
     bfc:	709a      	strb	r2, [r3, #2]
}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	46bd      	mov	sp, r7
     c02:	b002      	add	sp, #8
     c04:	bd80      	pop	{r7, pc}
     c06:	46c0      	nop			; (mov r8, r8)

00000c08 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     c08:	b580      	push	{r7, lr}
     c0a:	b084      	sub	sp, #16
     c0c:	af00      	add	r7, sp, #0
     c0e:	0002      	movs	r2, r0
     c10:	1dfb      	adds	r3, r7, #7
     c12:	701a      	strb	r2, [r3, #0]
     c14:	1dbb      	adds	r3, r7, #6
     c16:	1c0a      	adds	r2, r1, #0
     c18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     c1a:	1dfb      	adds	r3, r7, #7
     c1c:	781b      	ldrb	r3, [r3, #0]
     c1e:	0018      	movs	r0, r3
     c20:	4b0d      	ldr	r3, [pc, #52]	; (c58 <port_pin_set_output_level+0x50>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c28:	1dfb      	adds	r3, r7, #7
     c2a:	781b      	ldrb	r3, [r3, #0]
     c2c:	221f      	movs	r2, #31
     c2e:	4013      	ands	r3, r2
     c30:	2201      	movs	r2, #1
     c32:	409a      	lsls	r2, r3
     c34:	0013      	movs	r3, r2
     c36:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     c38:	1dbb      	adds	r3, r7, #6
     c3a:	781b      	ldrb	r3, [r3, #0]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d003      	beq.n	c48 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     c40:	68fb      	ldr	r3, [r7, #12]
     c42:	68ba      	ldr	r2, [r7, #8]
     c44:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     c46:	e002      	b.n	c4e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c48:	68fb      	ldr	r3, [r7, #12]
     c4a:	68ba      	ldr	r2, [r7, #8]
     c4c:	615a      	str	r2, [r3, #20]
	}
}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46bd      	mov	sp, r7
     c52:	b004      	add	sp, #16
     c54:	bd80      	pop	{r7, pc}
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	00000bc1 	.word	0x00000bc1

00000c5c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     c60:	4b04      	ldr	r3, [pc, #16]	; (c74 <system_interrupt_enable_global+0x18>)
     c62:	2201      	movs	r2, #1
     c64:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c66:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     c6a:	b662      	cpsie	i
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	20000018 	.word	0x20000018

00000c78 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     c78:	b580      	push	{r7, lr}
     c7a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     c7c:	4b04      	ldr	r3, [pc, #16]	; (c90 <chip_isr+0x18>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	2b00      	cmp	r3, #0
     c82:	d002      	beq.n	c8a <chip_isr+0x12>
		gpfIsr();
     c84:	4b02      	ldr	r3, [pc, #8]	; (c90 <chip_isr+0x18>)
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	4798      	blx	r3
	}
}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	46bd      	mov	sp, r7
     c8e:	bd80      	pop	{r7, pc}
     c90:	2000009c 	.word	0x2000009c

00000c94 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     c94:	b580      	push	{r7, lr}
     c96:	b082      	sub	sp, #8
     c98:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     c9a:	1d3b      	adds	r3, r7, #4
     c9c:	0018      	movs	r0, r3
     c9e:	4b0c      	ldr	r3, [pc, #48]	; (cd0 <init_chip_pins+0x3c>)
     ca0:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     ca2:	1d3b      	adds	r3, r7, #4
     ca4:	2201      	movs	r2, #1
     ca6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     ca8:	1d3b      	adds	r3, r7, #4
     caa:	0019      	movs	r1, r3
     cac:	2026      	movs	r0, #38	; 0x26
     cae:	4b09      	ldr	r3, [pc, #36]	; (cd4 <init_chip_pins+0x40>)
     cb0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     cb2:	1d3b      	adds	r3, r7, #4
     cb4:	0019      	movs	r1, r3
     cb6:	2025      	movs	r0, #37	; 0x25
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <init_chip_pins+0x40>)
     cba:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     cbc:	1d3b      	adds	r3, r7, #4
     cbe:	0019      	movs	r1, r3
     cc0:	2027      	movs	r0, #39	; 0x27
     cc2:	4b04      	ldr	r3, [pc, #16]	; (cd4 <init_chip_pins+0x40>)
     cc4:	4798      	blx	r3
}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	46bd      	mov	sp, r7
     cca:	b002      	add	sp, #8
     ccc:	bd80      	pop	{r7, pc}
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	00000be5 	.word	0x00000be5
     cd4:	000066d9 	.word	0x000066d9

00000cd8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     cd8:	b580      	push	{r7, lr}
     cda:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     cdc:	4b0c      	ldr	r3, [pc, #48]	; (d10 <nm_bsp_init+0x38>)
     cde:	2200      	movs	r2, #0
     ce0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     ce2:	4b0c      	ldr	r3, [pc, #48]	; (d14 <nm_bsp_init+0x3c>)
     ce4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     ce6:	4b0c      	ldr	r3, [pc, #48]	; (d18 <nm_bsp_init+0x40>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	2201      	movs	r2, #1
     cec:	4013      	ands	r3, r2
     cee:	d004      	beq.n	cfa <nm_bsp_init+0x22>
     cf0:	4b09      	ldr	r3, [pc, #36]	; (d18 <nm_bsp_init+0x40>)
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	2202      	movs	r2, #2
     cf6:	4013      	ands	r3, r2
     cf8:	d101      	bne.n	cfe <nm_bsp_init+0x26>
	    delay_init();
     cfa:	4b08      	ldr	r3, [pc, #32]	; (d1c <nm_bsp_init+0x44>)
     cfc:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     cfe:	4b08      	ldr	r3, [pc, #32]	; (d20 <nm_bsp_init+0x48>)
     d00:	4798      	blx	r3

	system_interrupt_enable_global();
     d02:	4b08      	ldr	r3, [pc, #32]	; (d24 <nm_bsp_init+0x4c>)
     d04:	4798      	blx	r3

	return M2M_SUCCESS;
     d06:	2300      	movs	r3, #0
}
     d08:	0018      	movs	r0, r3
     d0a:	46bd      	mov	sp, r7
     d0c:	bd80      	pop	{r7, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	2000009c 	.word	0x2000009c
     d14:	00000c95 	.word	0x00000c95
     d18:	e000e010 	.word	0xe000e010
     d1c:	00000ad9 	.word	0x00000ad9
     d20:	00000d29 	.word	0x00000d29
     d24:	00000c5d 	.word	0x00000c5d

00000d28 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     d28:	b580      	push	{r7, lr}
     d2a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     d2c:	2100      	movs	r1, #0
     d2e:	2025      	movs	r0, #37	; 0x25
     d30:	4b0c      	ldr	r3, [pc, #48]	; (d64 <nm_bsp_reset+0x3c>)
     d32:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     d34:	2100      	movs	r1, #0
     d36:	2026      	movs	r0, #38	; 0x26
     d38:	4b0a      	ldr	r3, [pc, #40]	; (d64 <nm_bsp_reset+0x3c>)
     d3a:	4798      	blx	r3
	nm_bsp_sleep(100);
     d3c:	2064      	movs	r0, #100	; 0x64
     d3e:	4b0a      	ldr	r3, [pc, #40]	; (d68 <nm_bsp_reset+0x40>)
     d40:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     d42:	2101      	movs	r1, #1
     d44:	2025      	movs	r0, #37	; 0x25
     d46:	4b07      	ldr	r3, [pc, #28]	; (d64 <nm_bsp_reset+0x3c>)
     d48:	4798      	blx	r3
	nm_bsp_sleep(10);
     d4a:	200a      	movs	r0, #10
     d4c:	4b06      	ldr	r3, [pc, #24]	; (d68 <nm_bsp_reset+0x40>)
     d4e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     d50:	2101      	movs	r1, #1
     d52:	2026      	movs	r0, #38	; 0x26
     d54:	4b03      	ldr	r3, [pc, #12]	; (d64 <nm_bsp_reset+0x3c>)
     d56:	4798      	blx	r3
	nm_bsp_sleep(10);
     d58:	200a      	movs	r0, #10
     d5a:	4b03      	ldr	r3, [pc, #12]	; (d68 <nm_bsp_reset+0x40>)
     d5c:	4798      	blx	r3
}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	46bd      	mov	sp, r7
     d62:	bd80      	pop	{r7, pc}
     d64:	00000c09 	.word	0x00000c09
     d68:	00000d6d 	.word	0x00000d6d

00000d6c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b082      	sub	sp, #8
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     d74:	e002      	b.n	d7c <nm_bsp_sleep+0x10>
		delay_ms(1);
     d76:	2001      	movs	r0, #1
     d78:	4b05      	ldr	r3, [pc, #20]	; (d90 <nm_bsp_sleep+0x24>)
     d7a:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	1e5a      	subs	r2, r3, #1
     d80:	607a      	str	r2, [r7, #4]
     d82:	2b00      	cmp	r3, #0
     d84:	d1f7      	bne.n	d76 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	46bd      	mov	sp, r7
     d8a:	b002      	add	sp, #8
     d8c:	bd80      	pop	{r7, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00000b31 	.word	0x00000b31

00000d94 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     d94:	b580      	push	{r7, lr}
     d96:	b086      	sub	sp, #24
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     d9c:	4b15      	ldr	r3, [pc, #84]	; (df4 <nm_bsp_register_isr+0x60>)
     d9e:	687a      	ldr	r2, [r7, #4]
     da0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     da2:	230c      	movs	r3, #12
     da4:	18fb      	adds	r3, r7, r3
     da6:	0018      	movs	r0, r3
     da8:	4b13      	ldr	r3, [pc, #76]	; (df8 <nm_bsp_register_isr+0x64>)
     daa:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     dac:	230c      	movs	r3, #12
     dae:	18fb      	adds	r3, r7, r3
     db0:	2224      	movs	r2, #36	; 0x24
     db2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     db4:	230c      	movs	r3, #12
     db6:	18fb      	adds	r3, r7, r3
     db8:	2200      	movs	r2, #0
     dba:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     dbc:	230c      	movs	r3, #12
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	2201      	movs	r2, #1
     dc2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     dc4:	230c      	movs	r3, #12
     dc6:	18fb      	adds	r3, r7, r3
     dc8:	2202      	movs	r2, #2
     dca:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     dcc:	230c      	movs	r3, #12
     dce:	18fb      	adds	r3, r7, r3
     dd0:	0019      	movs	r1, r3
     dd2:	2004      	movs	r0, #4
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <nm_bsp_register_isr+0x68>)
     dd6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     dd8:	4b09      	ldr	r3, [pc, #36]	; (e00 <nm_bsp_register_isr+0x6c>)
     dda:	2200      	movs	r2, #0
     ddc:	2104      	movs	r1, #4
     dde:	0018      	movs	r0, r3
     de0:	4b08      	ldr	r3, [pc, #32]	; (e04 <nm_bsp_register_isr+0x70>)
     de2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     de4:	2100      	movs	r1, #0
     de6:	2004      	movs	r0, #4
     de8:	4b07      	ldr	r3, [pc, #28]	; (e08 <nm_bsp_register_isr+0x74>)
     dea:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     dec:	46c0      	nop			; (mov r8, r8)
     dee:	46bd      	mov	sp, r7
     df0:	b006      	add	sp, #24
     df2:	bd80      	pop	{r7, pc}
     df4:	2000009c 	.word	0x2000009c
     df8:	00006581 	.word	0x00006581
     dfc:	000065b5 	.word	0x000065b5
     e00:	00000c79 	.word	0x00000c79
     e04:	00006181 	.word	0x00006181
     e08:	000061e5 	.word	0x000061e5

00000e0c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     e0c:	b580      	push	{r7, lr}
     e0e:	b082      	sub	sp, #8
     e10:	af00      	add	r7, sp, #0
     e12:	0002      	movs	r2, r0
     e14:	1dfb      	adds	r3, r7, #7
     e16:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     e18:	1dfb      	adds	r3, r7, #7
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d004      	beq.n	e2a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     e20:	2100      	movs	r1, #0
     e22:	2004      	movs	r0, #4
     e24:	4b05      	ldr	r3, [pc, #20]	; (e3c <nm_bsp_interrupt_ctrl+0x30>)
     e26:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     e28:	e003      	b.n	e32 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     e2a:	2100      	movs	r1, #0
     e2c:	2004      	movs	r0, #4
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <nm_bsp_interrupt_ctrl+0x34>)
     e30:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	46bd      	mov	sp, r7
     e36:	b002      	add	sp, #8
     e38:	bd80      	pop	{r7, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	000061e5 	.word	0x000061e5
     e40:	0000622d 	.word	0x0000622d

00000e44 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     e44:	b580      	push	{r7, lr}
     e46:	b084      	sub	sp, #16
     e48:	af00      	add	r7, sp, #0
     e4a:	0002      	movs	r2, r0
     e4c:	1dfb      	adds	r3, r7, #7
     e4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e50:	230f      	movs	r3, #15
     e52:	18fb      	adds	r3, r7, r3
     e54:	1dfa      	adds	r2, r7, #7
     e56:	7812      	ldrb	r2, [r2, #0]
     e58:	09d2      	lsrs	r2, r2, #7
     e5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     e5c:	230e      	movs	r3, #14
     e5e:	18fb      	adds	r3, r7, r3
     e60:	1dfa      	adds	r2, r7, #7
     e62:	7812      	ldrb	r2, [r2, #0]
     e64:	0952      	lsrs	r2, r2, #5
     e66:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     e68:	4b0d      	ldr	r3, [pc, #52]	; (ea0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     e6a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     e6c:	230f      	movs	r3, #15
     e6e:	18fb      	adds	r3, r7, r3
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	2b00      	cmp	r3, #0
     e74:	d10f      	bne.n	e96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     e76:	230f      	movs	r3, #15
     e78:	18fb      	adds	r3, r7, r3
     e7a:	781b      	ldrb	r3, [r3, #0]
     e7c:	009b      	lsls	r3, r3, #2
     e7e:	2210      	movs	r2, #16
     e80:	4694      	mov	ip, r2
     e82:	44bc      	add	ip, r7
     e84:	4463      	add	r3, ip
     e86:	3b08      	subs	r3, #8
     e88:	681a      	ldr	r2, [r3, #0]
     e8a:	230e      	movs	r3, #14
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	01db      	lsls	r3, r3, #7
     e92:	18d3      	adds	r3, r2, r3
     e94:	e000      	b.n	e98 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     e96:	2300      	movs	r3, #0
	}
}
     e98:	0018      	movs	r0, r3
     e9a:	46bd      	mov	sp, r7
     e9c:	b004      	add	sp, #16
     e9e:	bd80      	pop	{r7, pc}
     ea0:	41004400 	.word	0x41004400

00000ea4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b082      	sub	sp, #8
     ea8:	af00      	add	r7, sp, #0
     eaa:	0002      	movs	r2, r0
     eac:	1dfb      	adds	r3, r7, #7
     eae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     eb0:	1dfb      	adds	r3, r7, #7
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	0018      	movs	r0, r3
     eb6:	4b03      	ldr	r3, [pc, #12]	; (ec4 <port_get_group_from_gpio_pin+0x20>)
     eb8:	4798      	blx	r3
     eba:	0003      	movs	r3, r0
}
     ebc:	0018      	movs	r0, r3
     ebe:	46bd      	mov	sp, r7
     ec0:	b002      	add	sp, #8
     ec2:	bd80      	pop	{r7, pc}
     ec4:	00000e45 	.word	0x00000e45

00000ec8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     ec8:	b580      	push	{r7, lr}
     eca:	b082      	sub	sp, #8
     ecc:	af00      	add	r7, sp, #0
     ece:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     ed0:	687b      	ldr	r3, [r7, #4]
     ed2:	2200      	movs	r2, #0
     ed4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	2201      	movs	r2, #1
     eda:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	2200      	movs	r2, #0
     ee0:	709a      	strb	r2, [r3, #2]
}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	46bd      	mov	sp, r7
     ee6:	b002      	add	sp, #8
     ee8:	bd80      	pop	{r7, pc}
     eea:	46c0      	nop			; (mov r8, r8)

00000eec <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     eec:	b580      	push	{r7, lr}
     eee:	b084      	sub	sp, #16
     ef0:	af00      	add	r7, sp, #0
     ef2:	0002      	movs	r2, r0
     ef4:	1dfb      	adds	r3, r7, #7
     ef6:	701a      	strb	r2, [r3, #0]
     ef8:	1dbb      	adds	r3, r7, #6
     efa:	1c0a      	adds	r2, r1, #0
     efc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     efe:	1dfb      	adds	r3, r7, #7
     f00:	781b      	ldrb	r3, [r3, #0]
     f02:	0018      	movs	r0, r3
     f04:	4b0d      	ldr	r3, [pc, #52]	; (f3c <port_pin_set_output_level+0x50>)
     f06:	4798      	blx	r3
     f08:	0003      	movs	r3, r0
     f0a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f0c:	1dfb      	adds	r3, r7, #7
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	221f      	movs	r2, #31
     f12:	4013      	ands	r3, r2
     f14:	2201      	movs	r2, #1
     f16:	409a      	lsls	r2, r3
     f18:	0013      	movs	r3, r2
     f1a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     f1c:	1dbb      	adds	r3, r7, #6
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	2b00      	cmp	r3, #0
     f22:	d003      	beq.n	f2c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	68ba      	ldr	r2, [r7, #8]
     f28:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     f2a:	e002      	b.n	f32 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	68ba      	ldr	r2, [r7, #8]
     f30:	615a      	str	r2, [r3, #20]
	}
}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	46bd      	mov	sp, r7
     f36:	b004      	add	sp, #16
     f38:	bd80      	pop	{r7, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00000ea5 	.word	0x00000ea5

00000f40 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     f40:	b580      	push	{r7, lr}
     f42:	b082      	sub	sp, #8
     f44:	af00      	add	r7, sp, #0
     f46:	0002      	movs	r2, r0
     f48:	1dfb      	adds	r3, r7, #7
     f4a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <system_interrupt_enable+0x28>)
     f4e:	1dfa      	adds	r2, r7, #7
     f50:	7812      	ldrb	r2, [r2, #0]
     f52:	0011      	movs	r1, r2
     f54:	221f      	movs	r2, #31
     f56:	400a      	ands	r2, r1
     f58:	2101      	movs	r1, #1
     f5a:	4091      	lsls	r1, r2
     f5c:	000a      	movs	r2, r1
     f5e:	601a      	str	r2, [r3, #0]
}
     f60:	46c0      	nop			; (mov r8, r8)
     f62:	46bd      	mov	sp, r7
     f64:	b002      	add	sp, #8
     f66:	bd80      	pop	{r7, pc}
     f68:	e000e100 	.word	0xe000e100

00000f6c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     f6c:	b580      	push	{r7, lr}
     f6e:	b082      	sub	sp, #8
     f70:	af00      	add	r7, sp, #0
     f72:	0002      	movs	r2, r0
     f74:	1dfb      	adds	r3, r7, #7
     f76:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f78:	4a07      	ldr	r2, [pc, #28]	; (f98 <system_interrupt_disable+0x2c>)
     f7a:	1dfb      	adds	r3, r7, #7
     f7c:	781b      	ldrb	r3, [r3, #0]
     f7e:	0019      	movs	r1, r3
     f80:	231f      	movs	r3, #31
     f82:	400b      	ands	r3, r1
     f84:	2101      	movs	r1, #1
     f86:	4099      	lsls	r1, r3
     f88:	000b      	movs	r3, r1
     f8a:	0019      	movs	r1, r3
     f8c:	2380      	movs	r3, #128	; 0x80
     f8e:	50d1      	str	r1, [r2, r3]
}
     f90:	46c0      	nop			; (mov r8, r8)
     f92:	46bd      	mov	sp, r7
     f94:	b002      	add	sp, #8
     f96:	bd80      	pop	{r7, pc}
     f98:	e000e100 	.word	0xe000e100

00000f9c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     f9c:	b580      	push	{r7, lr}
     f9e:	b084      	sub	sp, #16
     fa0:	af00      	add	r7, sp, #0
     fa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	69db      	ldr	r3, [r3, #28]
     fae:	1e5a      	subs	r2, r3, #1
     fb0:	4193      	sbcs	r3, r2
     fb2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     fb4:	0018      	movs	r0, r3
     fb6:	46bd      	mov	sp, r7
     fb8:	b004      	add	sp, #16
     fba:	bd80      	pop	{r7, pc}

00000fbc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     fbc:	b580      	push	{r7, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     fc4:	687b      	ldr	r3, [r7, #4]
     fc6:	2201      	movs	r2, #1
     fc8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2200      	movs	r2, #0
     fce:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     fd0:	687b      	ldr	r3, [r7, #4]
     fd2:	2200      	movs	r2, #0
     fd4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	22c0      	movs	r2, #192	; 0xc0
     fda:	0392      	lsls	r2, r2, #14
     fdc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	2200      	movs	r2, #0
     fe2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	2200      	movs	r2, #0
     fe8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	2201      	movs	r2, #1
     fee:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	2201      	movs	r2, #1
     ff4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	2200      	movs	r2, #0
     ffa:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	2224      	movs	r2, #36	; 0x24
    1000:	2100      	movs	r1, #0
    1002:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	3318      	adds	r3, #24
    1008:	220c      	movs	r2, #12
    100a:	2100      	movs	r1, #0
    100c:	0018      	movs	r0, r3
    100e:	4b0a      	ldr	r3, [pc, #40]	; (1038 <spi_get_config_defaults+0x7c>)
    1010:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	4a09      	ldr	r2, [pc, #36]	; (103c <spi_get_config_defaults+0x80>)
    1016:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	2200      	movs	r2, #0
    101c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	2200      	movs	r2, #0
    1022:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	2200      	movs	r2, #0
    1028:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	2200      	movs	r2, #0
    102e:	635a      	str	r2, [r3, #52]	; 0x34

};
    1030:	46c0      	nop			; (mov r8, r8)
    1032:	46bd      	mov	sp, r7
    1034:	b002      	add	sp, #8
    1036:	bd80      	pop	{r7, pc}
    1038:	0000b06f 	.word	0x0000b06f
    103c:	000186a0 	.word	0x000186a0

00001040 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1040:	b580      	push	{r7, lr}
    1042:	b082      	sub	sp, #8
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	220a      	movs	r2, #10
    104c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	2200      	movs	r2, #0
    1052:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	2200      	movs	r2, #0
    1058:	709a      	strb	r2, [r3, #2]
}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	46bd      	mov	sp, r7
    105e:	b002      	add	sp, #8
    1060:	bd80      	pop	{r7, pc}
    1062:	46c0      	nop			; (mov r8, r8)

00001064 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    1064:	b580      	push	{r7, lr}
    1066:	b084      	sub	sp, #16
    1068:	af00      	add	r7, sp, #0
    106a:	6078      	str	r0, [r7, #4]
    106c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	781a      	ldrb	r2, [r3, #0]
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1076:	683b      	ldr	r3, [r7, #0]
    1078:	785a      	ldrb	r2, [r3, #1]
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    107e:	683b      	ldr	r3, [r7, #0]
    1080:	789a      	ldrb	r2, [r3, #2]
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1086:	230c      	movs	r3, #12
    1088:	18fb      	adds	r3, r7, r3
    108a:	0018      	movs	r0, r3
    108c:	4b0b      	ldr	r3, [pc, #44]	; (10bc <spi_attach_slave+0x58>)
    108e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1090:	230c      	movs	r3, #12
    1092:	18fb      	adds	r3, r7, r3
    1094:	2201      	movs	r2, #1
    1096:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	220c      	movs	r2, #12
    109e:	18ba      	adds	r2, r7, r2
    10a0:	0011      	movs	r1, r2
    10a2:	0018      	movs	r0, r3
    10a4:	4b06      	ldr	r3, [pc, #24]	; (10c0 <spi_attach_slave+0x5c>)
    10a6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    10a8:	687b      	ldr	r3, [r7, #4]
    10aa:	781b      	ldrb	r3, [r3, #0]
    10ac:	2101      	movs	r1, #1
    10ae:	0018      	movs	r0, r3
    10b0:	4b04      	ldr	r3, [pc, #16]	; (10c4 <spi_attach_slave+0x60>)
    10b2:	4798      	blx	r3
}
    10b4:	46c0      	nop			; (mov r8, r8)
    10b6:	46bd      	mov	sp, r7
    10b8:	b004      	add	sp, #16
    10ba:	bd80      	pop	{r7, pc}
    10bc:	00000ec9 	.word	0x00000ec9
    10c0:	000066d9 	.word	0x000066d9
    10c4:	00000eed 	.word	0x00000eed

000010c8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b084      	sub	sp, #16
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	0018      	movs	r0, r3
    10dc:	4b0b      	ldr	r3, [pc, #44]	; (110c <spi_enable+0x44>)
    10de:	4798      	blx	r3
    10e0:	0003      	movs	r3, r0
    10e2:	0018      	movs	r0, r3
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <spi_enable+0x48>)
    10e6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    10e8:	46c0      	nop			; (mov r8, r8)
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	0018      	movs	r0, r3
    10ee:	4b09      	ldr	r3, [pc, #36]	; (1114 <spi_enable+0x4c>)
    10f0:	4798      	blx	r3
    10f2:	1e03      	subs	r3, r0, #0
    10f4:	d1f9      	bne.n	10ea <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	681b      	ldr	r3, [r3, #0]
    10fa:	2202      	movs	r2, #2
    10fc:	431a      	orrs	r2, r3
    10fe:	68fb      	ldr	r3, [r7, #12]
    1100:	601a      	str	r2, [r3, #0]
}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	46bd      	mov	sp, r7
    1106:	b004      	add	sp, #16
    1108:	bd80      	pop	{r7, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	00006db1 	.word	0x00006db1
    1110:	00000f41 	.word	0x00000f41
    1114:	00000f9d 	.word	0x00000f9d

00001118 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    1118:	b580      	push	{r7, lr}
    111a:	b084      	sub	sp, #16
    111c:	af00      	add	r7, sp, #0
    111e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	681b      	ldr	r3, [r3, #0]
    1124:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	0018      	movs	r0, r3
    112c:	4b0b      	ldr	r3, [pc, #44]	; (115c <spi_disable+0x44>)
    112e:	4798      	blx	r3
    1130:	0003      	movs	r3, r0
    1132:	0018      	movs	r0, r3
    1134:	4b0a      	ldr	r3, [pc, #40]	; (1160 <spi_disable+0x48>)
    1136:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1138:	46c0      	nop			; (mov r8, r8)
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	0018      	movs	r0, r3
    113e:	4b09      	ldr	r3, [pc, #36]	; (1164 <spi_disable+0x4c>)
    1140:	4798      	blx	r3
    1142:	1e03      	subs	r3, r0, #0
    1144:	d1f9      	bne.n	113a <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1146:	68fb      	ldr	r3, [r7, #12]
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	2202      	movs	r2, #2
    114c:	4393      	bics	r3, r2
    114e:	001a      	movs	r2, r3
    1150:	68fb      	ldr	r3, [r7, #12]
    1152:	601a      	str	r2, [r3, #0]
}
    1154:	46c0      	nop			; (mov r8, r8)
    1156:	46bd      	mov	sp, r7
    1158:	b004      	add	sp, #16
    115a:	bd80      	pop	{r7, pc}
    115c:	00006db1 	.word	0x00006db1
    1160:	00000f6d 	.word	0x00000f6d
    1164:	00000f9d 	.word	0x00000f9d

00001168 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1168:	b580      	push	{r7, lr}
    116a:	b084      	sub	sp, #16
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	7e1b      	ldrb	r3, [r3, #24]
    117a:	b2db      	uxtb	r3, r3
    117c:	001a      	movs	r2, r3
    117e:	2302      	movs	r3, #2
    1180:	4013      	ands	r3, r2
    1182:	1e5a      	subs	r2, r3, #1
    1184:	4193      	sbcs	r3, r2
    1186:	b2db      	uxtb	r3, r3
}
    1188:	0018      	movs	r0, r3
    118a:	46bd      	mov	sp, r7
    118c:	b004      	add	sp, #16
    118e:	bd80      	pop	{r7, pc}

00001190 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1190:	b580      	push	{r7, lr}
    1192:	b084      	sub	sp, #16
    1194:	af00      	add	r7, sp, #0
    1196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1198:	687b      	ldr	r3, [r7, #4]
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    119e:	68fb      	ldr	r3, [r7, #12]
    11a0:	7e1b      	ldrb	r3, [r3, #24]
    11a2:	b2db      	uxtb	r3, r3
    11a4:	001a      	movs	r2, r3
    11a6:	2301      	movs	r3, #1
    11a8:	4013      	ands	r3, r2
    11aa:	1e5a      	subs	r2, r3, #1
    11ac:	4193      	sbcs	r3, r2
    11ae:	b2db      	uxtb	r3, r3
}
    11b0:	0018      	movs	r0, r3
    11b2:	46bd      	mov	sp, r7
    11b4:	b004      	add	sp, #16
    11b6:	bd80      	pop	{r7, pc}

000011b8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    11b8:	b580      	push	{r7, lr}
    11ba:	b084      	sub	sp, #16
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11c0:	687b      	ldr	r3, [r7, #4]
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11c6:	68fb      	ldr	r3, [r7, #12]
    11c8:	7e1b      	ldrb	r3, [r3, #24]
    11ca:	b2db      	uxtb	r3, r3
    11cc:	001a      	movs	r2, r3
    11ce:	2304      	movs	r3, #4
    11d0:	4013      	ands	r3, r2
    11d2:	1e5a      	subs	r2, r3, #1
    11d4:	4193      	sbcs	r3, r2
    11d6:	b2db      	uxtb	r3, r3
}
    11d8:	0018      	movs	r0, r3
    11da:	46bd      	mov	sp, r7
    11dc:	b004      	add	sp, #16
    11de:	bd80      	pop	{r7, pc}

000011e0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b084      	sub	sp, #16
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
    11e8:	000a      	movs	r2, r1
    11ea:	1cbb      	adds	r3, r7, #2
    11ec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11ee:	687b      	ldr	r3, [r7, #4]
    11f0:	681b      	ldr	r3, [r3, #0]
    11f2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    11f4:	687b      	ldr	r3, [r7, #4]
    11f6:	0018      	movs	r0, r3
    11f8:	4b0a      	ldr	r3, [pc, #40]	; (1224 <spi_write+0x44>)
    11fa:	4798      	blx	r3
    11fc:	0003      	movs	r3, r0
    11fe:	001a      	movs	r2, r3
    1200:	2301      	movs	r3, #1
    1202:	4053      	eors	r3, r2
    1204:	b2db      	uxtb	r3, r3
    1206:	2b00      	cmp	r3, #0
    1208:	d001      	beq.n	120e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    120a:	2305      	movs	r3, #5
    120c:	e006      	b.n	121c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    120e:	1cbb      	adds	r3, r7, #2
    1210:	881b      	ldrh	r3, [r3, #0]
    1212:	05db      	lsls	r3, r3, #23
    1214:	0dda      	lsrs	r2, r3, #23
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    121a:	2300      	movs	r3, #0
}
    121c:	0018      	movs	r0, r3
    121e:	46bd      	mov	sp, r7
    1220:	b004      	add	sp, #16
    1222:	bd80      	pop	{r7, pc}
    1224:	00001191 	.word	0x00001191

00001228 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1228:	b580      	push	{r7, lr}
    122a:	b084      	sub	sp, #16
    122c:	af00      	add	r7, sp, #0
    122e:	6078      	str	r0, [r7, #4]
    1230:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1232:	687b      	ldr	r3, [r7, #4]
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	0018      	movs	r0, r3
    123c:	4b1b      	ldr	r3, [pc, #108]	; (12ac <spi_read+0x84>)
    123e:	4798      	blx	r3
    1240:	0003      	movs	r3, r0
    1242:	001a      	movs	r2, r3
    1244:	2301      	movs	r3, #1
    1246:	4053      	eors	r3, r2
    1248:	b2db      	uxtb	r3, r3
    124a:	2b00      	cmp	r3, #0
    124c:	d001      	beq.n	1252 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    124e:	2310      	movs	r3, #16
    1250:	e027      	b.n	12a2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1252:	230f      	movs	r3, #15
    1254:	18fb      	adds	r3, r7, r3
    1256:	2200      	movs	r2, #0
    1258:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    125a:	68bb      	ldr	r3, [r7, #8]
    125c:	8b5b      	ldrh	r3, [r3, #26]
    125e:	b29b      	uxth	r3, r3
    1260:	001a      	movs	r2, r3
    1262:	2304      	movs	r3, #4
    1264:	4013      	ands	r3, r2
    1266:	d006      	beq.n	1276 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1268:	230f      	movs	r3, #15
    126a:	18fb      	adds	r3, r7, r3
    126c:	221e      	movs	r2, #30
    126e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1270:	68bb      	ldr	r3, [r7, #8]
    1272:	2204      	movs	r2, #4
    1274:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	799b      	ldrb	r3, [r3, #6]
    127a:	2b01      	cmp	r3, #1
    127c:	d108      	bne.n	1290 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    127e:	68bb      	ldr	r3, [r7, #8]
    1280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1282:	b29b      	uxth	r3, r3
    1284:	05db      	lsls	r3, r3, #23
    1286:	0ddb      	lsrs	r3, r3, #23
    1288:	b29a      	uxth	r2, r3
    128a:	683b      	ldr	r3, [r7, #0]
    128c:	801a      	strh	r2, [r3, #0]
    128e:	e005      	b.n	129c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1290:	68bb      	ldr	r3, [r7, #8]
    1292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1294:	b2db      	uxtb	r3, r3
    1296:	b29a      	uxth	r2, r3
    1298:	683b      	ldr	r3, [r7, #0]
    129a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    129c:	230f      	movs	r3, #15
    129e:	18fb      	adds	r3, r7, r3
    12a0:	781b      	ldrb	r3, [r3, #0]
}
    12a2:	0018      	movs	r0, r3
    12a4:	46bd      	mov	sp, r7
    12a6:	b004      	add	sp, #16
    12a8:	bd80      	pop	{r7, pc}
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	000011b9 	.word	0x000011b9

000012b0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	b086      	sub	sp, #24
    12b4:	af00      	add	r7, sp, #0
    12b6:	60f8      	str	r0, [r7, #12]
    12b8:	60b9      	str	r1, [r7, #8]
    12ba:	1dbb      	adds	r3, r7, #6
    12bc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    12be:	2313      	movs	r3, #19
    12c0:	18fb      	adds	r3, r7, r3
    12c2:	2200      	movs	r2, #0
    12c4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    12c6:	2317      	movs	r3, #23
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	2200      	movs	r2, #0
    12cc:	701a      	strb	r2, [r3, #0]
    12ce:	2316      	movs	r3, #22
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	2200      	movs	r2, #0
    12d4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    12d6:	2314      	movs	r3, #20
    12d8:	18fb      	adds	r3, r7, r3
    12da:	2200      	movs	r2, #0
    12dc:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    12de:	2310      	movs	r3, #16
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	2200      	movs	r2, #0
    12e4:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d107      	bne.n	12fc <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    12ec:	2313      	movs	r3, #19
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    12f2:	2317      	movs	r3, #23
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	2201      	movs	r2, #1
    12f8:	701a      	strb	r2, [r3, #0]
    12fa:	e00d      	b.n	1318 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    12fc:	68bb      	ldr	r3, [r7, #8]
    12fe:	2b00      	cmp	r3, #0
    1300:	d107      	bne.n	1312 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    1302:	2313      	movs	r3, #19
    1304:	18fb      	adds	r3, r7, r3
    1306:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    1308:	2316      	movs	r3, #22
    130a:	18fb      	adds	r3, r7, r3
    130c:	2201      	movs	r2, #1
    130e:	701a      	strb	r2, [r3, #0]
    1310:	e002      	b.n	1318 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    1312:	2306      	movs	r3, #6
    1314:	425b      	negs	r3, r3
    1316:	e06a      	b.n	13ee <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    1318:	4937      	ldr	r1, [pc, #220]	; (13f8 <spi_rw+0x148>)
    131a:	4b38      	ldr	r3, [pc, #224]	; (13fc <spi_rw+0x14c>)
    131c:	2201      	movs	r2, #1
    131e:	0018      	movs	r0, r3
    1320:	4b37      	ldr	r3, [pc, #220]	; (1400 <spi_rw+0x150>)
    1322:	4798      	blx	r3

	while (u16Sz) {
    1324:	e04c      	b.n	13c0 <spi_rw+0x110>
		txd_data = *pu8Mosi;
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	781a      	ldrb	r2, [r3, #0]
    132a:	2314      	movs	r3, #20
    132c:	18fb      	adds	r3, r7, r3
    132e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    1330:	46c0      	nop			; (mov r8, r8)
    1332:	4b32      	ldr	r3, [pc, #200]	; (13fc <spi_rw+0x14c>)
    1334:	0018      	movs	r0, r3
    1336:	4b33      	ldr	r3, [pc, #204]	; (1404 <spi_rw+0x154>)
    1338:	4798      	blx	r3
    133a:	0003      	movs	r3, r0
    133c:	001a      	movs	r2, r3
    133e:	2301      	movs	r3, #1
    1340:	4053      	eors	r3, r2
    1342:	b2db      	uxtb	r3, r3
    1344:	2b00      	cmp	r3, #0
    1346:	d1f4      	bne.n	1332 <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    1348:	46c0      	nop			; (mov r8, r8)
    134a:	2314      	movs	r3, #20
    134c:	18fb      	adds	r3, r7, r3
    134e:	881a      	ldrh	r2, [r3, #0]
    1350:	4b2a      	ldr	r3, [pc, #168]	; (13fc <spi_rw+0x14c>)
    1352:	0011      	movs	r1, r2
    1354:	0018      	movs	r0, r3
    1356:	4b2c      	ldr	r3, [pc, #176]	; (1408 <spi_rw+0x158>)
    1358:	4798      	blx	r3
    135a:	1e03      	subs	r3, r0, #0
    135c:	d1f5      	bne.n	134a <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	4b26      	ldr	r3, [pc, #152]	; (13fc <spi_rw+0x14c>)
    1362:	0018      	movs	r0, r3
    1364:	4b29      	ldr	r3, [pc, #164]	; (140c <spi_rw+0x15c>)
    1366:	4798      	blx	r3
    1368:	0003      	movs	r3, r0
    136a:	001a      	movs	r2, r3
    136c:	2301      	movs	r3, #1
    136e:	4053      	eors	r3, r2
    1370:	b2db      	uxtb	r3, r3
    1372:	2b00      	cmp	r3, #0
    1374:	d1f4      	bne.n	1360 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	2310      	movs	r3, #16
    137a:	18fa      	adds	r2, r7, r3
    137c:	4b1f      	ldr	r3, [pc, #124]	; (13fc <spi_rw+0x14c>)
    137e:	0011      	movs	r1, r2
    1380:	0018      	movs	r0, r3
    1382:	4b23      	ldr	r3, [pc, #140]	; (1410 <spi_rw+0x160>)
    1384:	4798      	blx	r3
    1386:	1e03      	subs	r3, r0, #0
    1388:	d1f6      	bne.n	1378 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    138a:	2310      	movs	r3, #16
    138c:	18fb      	adds	r3, r7, r3
    138e:	881b      	ldrh	r3, [r3, #0]
    1390:	b2da      	uxtb	r2, r3
    1392:	68bb      	ldr	r3, [r7, #8]
    1394:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    1396:	1dbb      	adds	r3, r7, #6
    1398:	881a      	ldrh	r2, [r3, #0]
    139a:	1dbb      	adds	r3, r7, #6
    139c:	3a01      	subs	r2, #1
    139e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    13a0:	2316      	movs	r3, #22
    13a2:	18fb      	adds	r3, r7, r3
    13a4:	781b      	ldrb	r3, [r3, #0]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d102      	bne.n	13b0 <spi_rw+0x100>
			pu8Miso++;
    13aa:	68bb      	ldr	r3, [r7, #8]
    13ac:	3301      	adds	r3, #1
    13ae:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    13b0:	2317      	movs	r3, #23
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	781b      	ldrb	r3, [r3, #0]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d102      	bne.n	13c0 <spi_rw+0x110>
			pu8Mosi++;
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	3301      	adds	r3, #1
    13be:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    13c0:	1dbb      	adds	r3, r7, #6
    13c2:	881b      	ldrh	r3, [r3, #0]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d1ae      	bne.n	1326 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    13c8:	46c0      	nop			; (mov r8, r8)
    13ca:	4b0c      	ldr	r3, [pc, #48]	; (13fc <spi_rw+0x14c>)
    13cc:	0018      	movs	r0, r3
    13ce:	4b11      	ldr	r3, [pc, #68]	; (1414 <spi_rw+0x164>)
    13d0:	4798      	blx	r3
    13d2:	0003      	movs	r3, r0
    13d4:	001a      	movs	r2, r3
    13d6:	2301      	movs	r3, #1
    13d8:	4053      	eors	r3, r2
    13da:	b2db      	uxtb	r3, r3
    13dc:	2b00      	cmp	r3, #0
    13de:	d1f4      	bne.n	13ca <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    13e0:	4905      	ldr	r1, [pc, #20]	; (13f8 <spi_rw+0x148>)
    13e2:	4b06      	ldr	r3, [pc, #24]	; (13fc <spi_rw+0x14c>)
    13e4:	2200      	movs	r2, #0
    13e6:	0018      	movs	r0, r3
    13e8:	4b05      	ldr	r3, [pc, #20]	; (1400 <spi_rw+0x150>)
    13ea:	4798      	blx	r3

	return M2M_SUCCESS;
    13ec:	2300      	movs	r3, #0
}
    13ee:	0018      	movs	r0, r3
    13f0:	46bd      	mov	sp, r7
    13f2:	b006      	add	sp, #24
    13f4:	bd80      	pop	{r7, pc}
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	20000200 	.word	0x20000200
    13fc:	20000204 	.word	0x20000204
    1400:	000074e1 	.word	0x000074e1
    1404:	00001191 	.word	0x00001191
    1408:	000011e1 	.word	0x000011e1
    140c:	000011b9 	.word	0x000011b9
    1410:	00001229 	.word	0x00001229
    1414:	00001169 	.word	0x00001169

00001418 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1418:	b580      	push	{r7, lr}
    141a:	b092      	sub	sp, #72	; 0x48
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    1420:	2347      	movs	r3, #71	; 0x47
    1422:	18fb      	adds	r3, r7, r3
    1424:	2200      	movs	r2, #0
    1426:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    1428:	2308      	movs	r3, #8
    142a:	18fb      	adds	r3, r7, r3
    142c:	0018      	movs	r0, r3
    142e:	4b26      	ldr	r3, [pc, #152]	; (14c8 <nm_bus_init+0xb0>)
    1430:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    1432:	2308      	movs	r3, #8
    1434:	18fb      	adds	r3, r7, r3
    1436:	2205      	movs	r2, #5
    1438:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    143a:	2308      	movs	r3, #8
    143c:	18fa      	adds	r2, r7, r3
    143e:	4b23      	ldr	r3, [pc, #140]	; (14cc <nm_bus_init+0xb4>)
    1440:	0011      	movs	r1, r2
    1442:	0018      	movs	r0, r3
    1444:	4b22      	ldr	r3, [pc, #136]	; (14d0 <nm_bus_init+0xb8>)
    1446:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    1448:	230c      	movs	r3, #12
    144a:	18fb      	adds	r3, r7, r3
    144c:	0018      	movs	r0, r3
    144e:	4b21      	ldr	r3, [pc, #132]	; (14d4 <nm_bus_init+0xbc>)
    1450:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    1452:	230c      	movs	r3, #12
    1454:	18fb      	adds	r3, r7, r3
    1456:	2280      	movs	r2, #128	; 0x80
    1458:	0252      	lsls	r2, r2, #9
    145a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    145c:	230c      	movs	r3, #12
    145e:	18fb      	adds	r3, r7, r3
    1460:	4a1d      	ldr	r2, [pc, #116]	; (14d8 <nm_bus_init+0xc0>)
    1462:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    1464:	230c      	movs	r3, #12
    1466:	18fb      	adds	r3, r7, r3
    1468:	2201      	movs	r2, #1
    146a:	4252      	negs	r2, r2
    146c:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    146e:	230c      	movs	r3, #12
    1470:	18fb      	adds	r3, r7, r3
    1472:	4a1a      	ldr	r2, [pc, #104]	; (14dc <nm_bus_init+0xc4>)
    1474:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    1476:	230c      	movs	r3, #12
    1478:	18fb      	adds	r3, r7, r3
    147a:	4a19      	ldr	r2, [pc, #100]	; (14e0 <nm_bus_init+0xc8>)
    147c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    147e:	230c      	movs	r3, #12
    1480:	18fb      	adds	r3, r7, r3
    1482:	2200      	movs	r2, #0
    1484:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    1486:	230c      	movs	r3, #12
    1488:	18fb      	adds	r3, r7, r3
    148a:	4a16      	ldr	r2, [pc, #88]	; (14e4 <nm_bus_init+0xcc>)
    148c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    148e:	230c      	movs	r3, #12
    1490:	18fa      	adds	r2, r7, r3
    1492:	4915      	ldr	r1, [pc, #84]	; (14e8 <nm_bus_init+0xd0>)
    1494:	4b15      	ldr	r3, [pc, #84]	; (14ec <nm_bus_init+0xd4>)
    1496:	0018      	movs	r0, r3
    1498:	4b15      	ldr	r3, [pc, #84]	; (14f0 <nm_bus_init+0xd8>)
    149a:	4798      	blx	r3
    149c:	1e03      	subs	r3, r0, #0
    149e:	d002      	beq.n	14a6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    14a0:	2306      	movs	r3, #6
    14a2:	425b      	negs	r3, r3
    14a4:	e00c      	b.n	14c0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    14a6:	4b11      	ldr	r3, [pc, #68]	; (14ec <nm_bus_init+0xd4>)
    14a8:	0018      	movs	r0, r3
    14aa:	4b12      	ldr	r3, [pc, #72]	; (14f4 <nm_bus_init+0xdc>)
    14ac:	4798      	blx	r3

	nm_bsp_reset();
    14ae:	4b12      	ldr	r3, [pc, #72]	; (14f8 <nm_bus_init+0xe0>)
    14b0:	4798      	blx	r3
	nm_bsp_sleep(1);
    14b2:	2001      	movs	r0, #1
    14b4:	4b11      	ldr	r3, [pc, #68]	; (14fc <nm_bus_init+0xe4>)
    14b6:	4798      	blx	r3
#endif
	return result;
    14b8:	2347      	movs	r3, #71	; 0x47
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	b25b      	sxtb	r3, r3
}
    14c0:	0018      	movs	r0, r3
    14c2:	46bd      	mov	sp, r7
    14c4:	b012      	add	sp, #72	; 0x48
    14c6:	bd80      	pop	{r7, pc}
    14c8:	00001041 	.word	0x00001041
    14cc:	20000200 	.word	0x20000200
    14d0:	00001065 	.word	0x00001065
    14d4:	00000fbd 	.word	0x00000fbd
    14d8:	00040003 	.word	0x00040003
    14dc:	00060003 	.word	0x00060003
    14e0:	00070003 	.word	0x00070003
    14e4:	00b71b00 	.word	0x00b71b00
    14e8:	42000800 	.word	0x42000800
    14ec:	20000204 	.word	0x20000204
    14f0:	00007351 	.word	0x00007351
    14f4:	000010c9 	.word	0x000010c9
    14f8:	00000d29 	.word	0x00000d29
    14fc:	00000d6d 	.word	0x00000d6d

00001500 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1500:	b590      	push	{r4, r7, lr}
    1502:	b085      	sub	sp, #20
    1504:	af00      	add	r7, sp, #0
    1506:	0002      	movs	r2, r0
    1508:	6039      	str	r1, [r7, #0]
    150a:	1dfb      	adds	r3, r7, #7
    150c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    150e:	230f      	movs	r3, #15
    1510:	18fb      	adds	r3, r7, r3
    1512:	2200      	movs	r2, #0
    1514:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    1516:	1dfb      	adds	r3, r7, #7
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	2b03      	cmp	r3, #3
    151c:	d10f      	bne.n	153e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    151e:	683b      	ldr	r3, [r7, #0]
    1520:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    1522:	68bb      	ldr	r3, [r7, #8]
    1524:	6818      	ldr	r0, [r3, #0]
    1526:	68bb      	ldr	r3, [r7, #8]
    1528:	6859      	ldr	r1, [r3, #4]
    152a:	68bb      	ldr	r3, [r7, #8]
    152c:	891b      	ldrh	r3, [r3, #8]
    152e:	220f      	movs	r2, #15
    1530:	18bc      	adds	r4, r7, r2
    1532:	001a      	movs	r2, r3
    1534:	4b0f      	ldr	r3, [pc, #60]	; (1574 <nm_bus_ioctl+0x74>)
    1536:	4798      	blx	r3
    1538:	0003      	movs	r3, r0
    153a:	7023      	strb	r3, [r4, #0]
		}
		break;
    153c:	e012      	b.n	1564 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    153e:	230f      	movs	r3, #15
    1540:	18fb      	adds	r3, r7, r3
    1542:	22ff      	movs	r2, #255	; 0xff
    1544:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    1546:	2386      	movs	r3, #134	; 0x86
    1548:	005a      	lsls	r2, r3, #1
    154a:	490b      	ldr	r1, [pc, #44]	; (1578 <nm_bus_ioctl+0x78>)
    154c:	4b0b      	ldr	r3, [pc, #44]	; (157c <nm_bus_ioctl+0x7c>)
    154e:	0018      	movs	r0, r3
    1550:	4b0b      	ldr	r3, [pc, #44]	; (1580 <nm_bus_ioctl+0x80>)
    1552:	4798      	blx	r3
    1554:	4b0b      	ldr	r3, [pc, #44]	; (1584 <nm_bus_ioctl+0x84>)
    1556:	0018      	movs	r0, r3
    1558:	4b0b      	ldr	r3, [pc, #44]	; (1588 <nm_bus_ioctl+0x88>)
    155a:	4798      	blx	r3
    155c:	200d      	movs	r0, #13
    155e:	4b0b      	ldr	r3, [pc, #44]	; (158c <nm_bus_ioctl+0x8c>)
    1560:	4798      	blx	r3
			break;
    1562:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    1564:	230f      	movs	r3, #15
    1566:	18fb      	adds	r3, r7, r3
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	b25b      	sxtb	r3, r3
}
    156c:	0018      	movs	r0, r3
    156e:	46bd      	mov	sp, r7
    1570:	b005      	add	sp, #20
    1572:	bd90      	pop	{r4, r7, pc}
    1574:	000012b1 	.word	0x000012b1
    1578:	0000c5bc 	.word	0x0000c5bc
    157c:	0000c594 	.word	0x0000c594
    1580:	0000b081 	.word	0x0000b081
    1584:	0000c5a8 	.word	0x0000c5a8
    1588:	0000b1a1 	.word	0x0000b1a1
    158c:	0000b0b5 	.word	0x0000b0b5

00001590 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    1590:	b580      	push	{r7, lr}
    1592:	b082      	sub	sp, #8
    1594:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    1596:	1dfb      	adds	r3, r7, #7
    1598:	2200      	movs	r2, #0
    159a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    159c:	1d3b      	adds	r3, r7, #4
    159e:	0018      	movs	r0, r3
    15a0:	4b09      	ldr	r3, [pc, #36]	; (15c8 <nm_bus_deinit+0x38>)
    15a2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    15a4:	1d3b      	adds	r3, r7, #4
    15a6:	2200      	movs	r2, #0
    15a8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    15aa:	1d3b      	adds	r3, r7, #4
    15ac:	2200      	movs	r2, #0
    15ae:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	
    15b0:	4b06      	ldr	r3, [pc, #24]	; (15cc <nm_bus_deinit+0x3c>)
    15b2:	0018      	movs	r0, r3
    15b4:	4b06      	ldr	r3, [pc, #24]	; (15d0 <nm_bus_deinit+0x40>)
    15b6:	4798      	blx	r3

#endif /* CONF_WINC_USE_SPI */
	return result;
    15b8:	1dfb      	adds	r3, r7, #7
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	b25b      	sxtb	r3, r3
}
    15be:	0018      	movs	r0, r3
    15c0:	46bd      	mov	sp, r7
    15c2:	b002      	add	sp, #8
    15c4:	bd80      	pop	{r7, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	00000ec9 	.word	0x00000ec9
    15cc:	20000204 	.word	0x20000204
    15d0:	00001119 	.word	0x00001119

000015d4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    15d4:	b580      	push	{r7, lr}
    15d6:	b084      	sub	sp, #16
    15d8:	af00      	add	r7, sp, #0
    15da:	60f8      	str	r0, [r7, #12]
    15dc:	60b9      	str	r1, [r7, #8]
    15de:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    15e0:	687b      	ldr	r3, [r7, #4]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d010      	beq.n	1608 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    15e6:	68bb      	ldr	r3, [r7, #8]
    15e8:	781a      	ldrb	r2, [r3, #0]
    15ea:	68fb      	ldr	r3, [r7, #12]
    15ec:	701a      	strb	r2, [r3, #0]
		pDst++;
    15ee:	68fb      	ldr	r3, [r7, #12]
    15f0:	3301      	adds	r3, #1
    15f2:	60fb      	str	r3, [r7, #12]
		pSrc++;
    15f4:	68bb      	ldr	r3, [r7, #8]
    15f6:	3301      	adds	r3, #1
    15f8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	3b01      	subs	r3, #1
    15fe:	607b      	str	r3, [r7, #4]
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	2b00      	cmp	r3, #0
    1604:	d1ef      	bne.n	15e6 <m2m_memcpy+0x12>
    1606:	e000      	b.n	160a <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1608:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    160a:	46bd      	mov	sp, r7
    160c:	b004      	add	sp, #16
    160e:	bd80      	pop	{r7, pc}

00001610 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    1610:	b580      	push	{r7, lr}
    1612:	b084      	sub	sp, #16
    1614:	af00      	add	r7, sp, #0
    1616:	60f8      	str	r0, [r7, #12]
    1618:	607a      	str	r2, [r7, #4]
    161a:	230b      	movs	r3, #11
    161c:	18fb      	adds	r3, r7, r3
    161e:	1c0a      	adds	r2, r1, #0
    1620:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	2b00      	cmp	r3, #0
    1626:	d00e      	beq.n	1646 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	220b      	movs	r2, #11
    162c:	18ba      	adds	r2, r7, r2
    162e:	7812      	ldrb	r2, [r2, #0]
    1630:	701a      	strb	r2, [r3, #0]
		pBuf++;
    1632:	68fb      	ldr	r3, [r7, #12]
    1634:	3301      	adds	r3, #1
    1636:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	3b01      	subs	r3, #1
    163c:	607b      	str	r3, [r7, #4]
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	2b00      	cmp	r3, #0
    1642:	d1f1      	bne.n	1628 <m2m_memset+0x18>
    1644:	e000      	b.n	1648 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1646:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    1648:	46bd      	mov	sp, r7
    164a:	b004      	add	sp, #16
    164c:	bd80      	pop	{r7, pc}
    164e:	46c0      	nop			; (mov r8, r8)

00001650 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1650:	b580      	push	{r7, lr}
    1652:	b084      	sub	sp, #16
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    1658:	230e      	movs	r3, #14
    165a:	18fb      	adds	r3, r7, r3
    165c:	2200      	movs	r2, #0
    165e:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    1660:	e009      	b.n	1676 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    1662:	230e      	movs	r3, #14
    1664:	18fb      	adds	r3, r7, r3
    1666:	881a      	ldrh	r2, [r3, #0]
    1668:	230e      	movs	r3, #14
    166a:	18fb      	adds	r3, r7, r3
    166c:	3201      	adds	r2, #1
    166e:	801a      	strh	r2, [r3, #0]
		pcStr++;
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	3301      	adds	r3, #1
    1674:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	781b      	ldrb	r3, [r3, #0]
    167a:	2b00      	cmp	r3, #0
    167c:	d1f1      	bne.n	1662 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    167e:	230e      	movs	r3, #14
    1680:	18fb      	adds	r3, r7, r3
    1682:	881b      	ldrh	r3, [r3, #0]
}
    1684:	0018      	movs	r0, r3
    1686:	46bd      	mov	sp, r7
    1688:	b004      	add	sp, #16
    168a:	bd80      	pop	{r7, pc}

0000168c <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    168c:	b580      	push	{r7, lr}
    168e:	b084      	sub	sp, #16
    1690:	af00      	add	r7, sp, #0
    1692:	60f8      	str	r0, [r7, #12]
    1694:	60b9      	str	r1, [r7, #8]
    1696:	1dbb      	adds	r3, r7, #6
    1698:	801a      	strh	r2, [r3, #0]
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    169a:	e020      	b.n	16de <m2m_strncmp+0x52>
	if (*pcS1 != *pcS2)
    169c:	68fb      	ldr	r3, [r7, #12]
    169e:	781a      	ldrb	r2, [r3, #0]
    16a0:	68bb      	ldr	r3, [r7, #8]
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	429a      	cmp	r2, r3
    16a6:	d009      	beq.n	16bc <m2m_strncmp+0x30>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    16a8:	68fb      	ldr	r3, [r7, #12]
    16aa:	781a      	ldrb	r2, [r3, #0]
    16ac:	68bb      	ldr	r3, [r7, #8]
    16ae:	781b      	ldrb	r3, [r3, #0]
    16b0:	429a      	cmp	r2, r3
    16b2:	d201      	bcs.n	16b8 <m2m_strncmp+0x2c>
    16b4:	23ff      	movs	r3, #255	; 0xff
    16b6:	e017      	b.n	16e8 <m2m_strncmp+0x5c>
    16b8:	2301      	movs	r3, #1
    16ba:	e015      	b.n	16e8 <m2m_strncmp+0x5c>
	else if (*pcS1 == '\0')
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	781b      	ldrb	r3, [r3, #0]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d101      	bne.n	16c8 <m2m_strncmp+0x3c>
	    return 0;
    16c4:	2300      	movs	r3, #0
    16c6:	e00f      	b.n	16e8 <m2m_strncmp+0x5c>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    16c8:	68fb      	ldr	r3, [r7, #12]
    16ca:	3301      	adds	r3, #1
    16cc:	60fb      	str	r3, [r7, #12]
    16ce:	68bb      	ldr	r3, [r7, #8]
    16d0:	3301      	adds	r3, #1
    16d2:	60bb      	str	r3, [r7, #8]
    16d4:	1dbb      	adds	r3, r7, #6
    16d6:	1dba      	adds	r2, r7, #6
    16d8:	8812      	ldrh	r2, [r2, #0]
    16da:	3a01      	subs	r2, #1
    16dc:	801a      	strh	r2, [r3, #0]
    16de:	1dbb      	adds	r3, r7, #6
    16e0:	881b      	ldrh	r3, [r3, #0]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d1da      	bne.n	169c <m2m_strncmp+0x10>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
    16e6:	2300      	movs	r3, #0
}
    16e8:	0018      	movs	r0, r3
    16ea:	46bd      	mov	sp, r7
    16ec:	b004      	add	sp, #16
    16ee:	bd80      	pop	{r7, pc}

000016f0 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    16f0:	b590      	push	{r4, r7, lr}
    16f2:	b085      	sub	sp, #20
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
    16f8:	6039      	str	r1, [r7, #0]
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    16fa:	683b      	ldr	r3, [r7, #0]
    16fc:	1c5a      	adds	r2, r3, #1
    16fe:	603a      	str	r2, [r7, #0]
    1700:	220f      	movs	r2, #15
    1702:	18ba      	adds	r2, r7, r2
    1704:	781b      	ldrb	r3, [r3, #0]
    1706:	7013      	strb	r3, [r2, #0]
    if (!u8c)
    1708:	230f      	movs	r3, #15
    170a:	18fb      	adds	r3, r7, r3
    170c:	781b      	ldrb	r3, [r3, #0]
    170e:	2b00      	cmp	r3, #0
    1710:	d101      	bne.n	1716 <m2m_strstr+0x26>
        return (uint8 *) pcIn;	// Trivial empty string case
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	e029      	b.n	176a <m2m_strstr+0x7a>

    u16StrLen = m2m_strlen(pcStr);
    1716:	230c      	movs	r3, #12
    1718:	18fc      	adds	r4, r7, r3
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	0018      	movs	r0, r3
    171e:	4b15      	ldr	r3, [pc, #84]	; (1774 <m2m_strstr+0x84>)
    1720:	4798      	blx	r3
    1722:	0003      	movs	r3, r0
    1724:	8023      	strh	r3, [r4, #0]
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	1c5a      	adds	r2, r3, #1
    172a:	607a      	str	r2, [r7, #4]
    172c:	220b      	movs	r2, #11
    172e:	18ba      	adds	r2, r7, r2
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	7013      	strb	r3, [r2, #0]
            if (!u8Sc)
    1734:	230b      	movs	r3, #11
    1736:	18fb      	adds	r3, r7, r3
    1738:	781b      	ldrb	r3, [r3, #0]
    173a:	2b00      	cmp	r3, #0
    173c:	d101      	bne.n	1742 <m2m_strstr+0x52>
                return (uint8 *) 0;
    173e:	2300      	movs	r3, #0
    1740:	e013      	b.n	176a <m2m_strstr+0x7a>
        } while (u8Sc != u8c);
    1742:	230b      	movs	r3, #11
    1744:	18fa      	adds	r2, r7, r3
    1746:	230f      	movs	r3, #15
    1748:	18fb      	adds	r3, r7, r3
    174a:	7812      	ldrb	r2, [r2, #0]
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	429a      	cmp	r2, r3
    1750:	d1e9      	bne.n	1726 <m2m_strstr+0x36>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
    1752:	230c      	movs	r3, #12
    1754:	18fb      	adds	r3, r7, r3
    1756:	881a      	ldrh	r2, [r3, #0]
    1758:	6839      	ldr	r1, [r7, #0]
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	0018      	movs	r0, r3
    175e:	4b06      	ldr	r3, [pc, #24]	; (1778 <m2m_strstr+0x88>)
    1760:	4798      	blx	r3
    1762:	1e03      	subs	r3, r0, #0
    1764:	d1df      	bne.n	1726 <m2m_strstr+0x36>

    return (uint8 *) (pcIn - 1);
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	3b01      	subs	r3, #1
}
    176a:	0018      	movs	r0, r3
    176c:	46bd      	mov	sp, r7
    176e:	b005      	add	sp, #20
    1770:	bd90      	pop	{r4, r7, pc}
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	00001651 	.word	0x00001651
    1778:	0000168d 	.word	0x0000168d

0000177c <m2m_memcmp>:

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
    177c:	b580      	push	{r7, lr}
    177e:	b086      	sub	sp, #24
    1780:	af00      	add	r7, sp, #0
    1782:	60f8      	str	r0, [r7, #12]
    1784:	60b9      	str	r1, [r7, #8]
    1786:	607a      	str	r2, [r7, #4]
	uint32	i;
	sint8		s8Result = 0;
    1788:	2313      	movs	r3, #19
    178a:	18fb      	adds	r3, r7, r3
    178c:	2200      	movs	r2, #0
    178e:	701a      	strb	r2, [r3, #0]
	for(i	 = 0 ; i < u32Size ; i++)
    1790:	2300      	movs	r3, #0
    1792:	617b      	str	r3, [r7, #20]
    1794:	e011      	b.n	17ba <m2m_memcmp+0x3e>
	{
		if(pu8Buff1[i] != pu8Buff2[i])
    1796:	68fa      	ldr	r2, [r7, #12]
    1798:	697b      	ldr	r3, [r7, #20]
    179a:	18d3      	adds	r3, r2, r3
    179c:	781a      	ldrb	r2, [r3, #0]
    179e:	68b9      	ldr	r1, [r7, #8]
    17a0:	697b      	ldr	r3, [r7, #20]
    17a2:	18cb      	adds	r3, r1, r3
    17a4:	781b      	ldrb	r3, [r3, #0]
    17a6:	429a      	cmp	r2, r3
    17a8:	d004      	beq.n	17b4 <m2m_memcmp+0x38>
		{
			s8Result = 1;
    17aa:	2313      	movs	r3, #19
    17ac:	18fb      	adds	r3, r7, r3
    17ae:	2201      	movs	r2, #1
    17b0:	701a      	strb	r2, [r3, #0]
			break;
    17b2:	e006      	b.n	17c2 <m2m_memcmp+0x46>

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
	uint32	i;
	sint8		s8Result = 0;
	for(i	 = 0 ; i < u32Size ; i++)
    17b4:	697b      	ldr	r3, [r7, #20]
    17b6:	3301      	adds	r3, #1
    17b8:	617b      	str	r3, [r7, #20]
    17ba:	697a      	ldr	r2, [r7, #20]
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	429a      	cmp	r2, r3
    17c0:	d3e9      	bcc.n	1796 <m2m_memcmp+0x1a>
		{
			s8Result = 1;
			break;
		}
	}
	return s8Result;
    17c2:	2313      	movs	r3, #19
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	b25b      	sxtb	r3, r3
}
    17ca:	0018      	movs	r0, r3
    17cc:	46bd      	mov	sp, r7
    17ce:	b006      	add	sp, #24
    17d0:	bd80      	pop	{r7, pc}
    17d2:	46c0      	nop			; (mov r8, r8)

000017d4 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
    17d4:	b580      	push	{r7, lr}
    17d6:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    17d8:	4b04      	ldr	r3, [pc, #16]	; (17ec <isr+0x18>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b2db      	uxtb	r3, r3
    17de:	3301      	adds	r3, #1
    17e0:	b2da      	uxtb	r2, r3
    17e2:	4b02      	ldr	r3, [pc, #8]	; (17ec <isr+0x18>)
    17e4:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	46bd      	mov	sp, r7
    17ea:	bd80      	pop	{r7, pc}
    17ec:	200000a3 	.word	0x200000a3

000017f0 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    17f0:	b590      	push	{r4, r7, lr}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    17f6:	1dfb      	adds	r3, r7, #7
    17f8:	2200      	movs	r2, #0
    17fa:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    17fc:	2001      	movs	r0, #1
    17fe:	4b13      	ldr	r3, [pc, #76]	; (184c <hif_set_rx_done+0x5c>)
    1800:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1802:	1dfc      	adds	r4, r7, #7
    1804:	003b      	movs	r3, r7
    1806:	4a12      	ldr	r2, [pc, #72]	; (1850 <hif_set_rx_done+0x60>)
    1808:	0019      	movs	r1, r3
    180a:	0010      	movs	r0, r2
    180c:	4b11      	ldr	r3, [pc, #68]	; (1854 <hif_set_rx_done+0x64>)
    180e:	4798      	blx	r3
    1810:	0003      	movs	r3, r0
    1812:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1814:	1dfb      	adds	r3, r7, #7
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	b25b      	sxtb	r3, r3
    181a:	2b00      	cmp	r3, #0
    181c:	d10d      	bne.n	183a <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    181e:	683b      	ldr	r3, [r7, #0]
    1820:	2202      	movs	r2, #2
    1822:	4313      	orrs	r3, r2
    1824:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1826:	683b      	ldr	r3, [r7, #0]
    1828:	1dfc      	adds	r4, r7, #7
    182a:	4a09      	ldr	r2, [pc, #36]	; (1850 <hif_set_rx_done+0x60>)
    182c:	0019      	movs	r1, r3
    182e:	0010      	movs	r0, r2
    1830:	4b09      	ldr	r3, [pc, #36]	; (1858 <hif_set_rx_done+0x68>)
    1832:	4798      	blx	r3
    1834:	0003      	movs	r3, r0
    1836:	7023      	strb	r3, [r4, #0]
    1838:	e000      	b.n	183c <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    183a:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    183c:	1dfb      	adds	r3, r7, #7
    183e:	781b      	ldrb	r3, [r3, #0]
    1840:	b25b      	sxtb	r3, r3

}
    1842:	0018      	movs	r0, r3
    1844:	46bd      	mov	sp, r7
    1846:	b003      	add	sp, #12
    1848:	bd90      	pop	{r4, r7, pc}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	00000e0d 	.word	0x00000e0d
    1850:	00001070 	.word	0x00001070
    1854:	000036dd 	.word	0x000036dd
    1858:	00003701 	.word	0x00003701

0000185c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	603a      	str	r2, [r7, #0]
    1864:	1dfb      	adds	r3, r7, #7
    1866:	1c02      	adds	r2, r0, #0
    1868:	701a      	strb	r2, [r3, #0]
    186a:	1d3b      	adds	r3, r7, #4
    186c:	1c0a      	adds	r2, r1, #0
    186e:	801a      	strh	r2, [r3, #0]


}
    1870:	46c0      	nop			; (mov r8, r8)
    1872:	46bd      	mov	sp, r7
    1874:	b002      	add	sp, #8
    1876:	bd80      	pop	{r7, pc}

00001878 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1878:	b590      	push	{r4, r7, lr}
    187a:	b083      	sub	sp, #12
    187c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    187e:	1dfb      	adds	r3, r7, #7
    1880:	2200      	movs	r2, #0
    1882:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    1884:	4b1c      	ldr	r3, [pc, #112]	; (18f8 <hif_chip_wake+0x80>)
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	b2db      	uxtb	r3, r3
    188a:	2b00      	cmp	r3, #0
    188c:	d121      	bne.n	18d2 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    188e:	4b1b      	ldr	r3, [pc, #108]	; (18fc <hif_chip_wake+0x84>)
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	b2db      	uxtb	r3, r3
    1894:	2b03      	cmp	r3, #3
    1896:	d004      	beq.n	18a2 <hif_chip_wake+0x2a>
    1898:	4b18      	ldr	r3, [pc, #96]	; (18fc <hif_chip_wake+0x84>)
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	b2db      	uxtb	r3, r3
    189e:	2b04      	cmp	r3, #4
    18a0:	d117      	bne.n	18d2 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    18a2:	1dfc      	adds	r4, r7, #7
    18a4:	4b16      	ldr	r3, [pc, #88]	; (1900 <hif_chip_wake+0x88>)
    18a6:	4798      	blx	r3
    18a8:	0003      	movs	r3, r0
    18aa:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    18ac:	1dfb      	adds	r3, r7, #7
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	b25b      	sxtb	r3, r3
    18b2:	2b00      	cmp	r3, #0
    18b4:	d115      	bne.n	18e2 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    18b6:	1dfc      	adds	r4, r7, #7
    18b8:	4a12      	ldr	r2, [pc, #72]	; (1904 <hif_chip_wake+0x8c>)
    18ba:	4b13      	ldr	r3, [pc, #76]	; (1908 <hif_chip_wake+0x90>)
    18bc:	0011      	movs	r1, r2
    18be:	0018      	movs	r0, r3
    18c0:	4b12      	ldr	r3, [pc, #72]	; (190c <hif_chip_wake+0x94>)
    18c2:	4798      	blx	r3
    18c4:	0003      	movs	r3, r0
    18c6:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    18c8:	1dfb      	adds	r3, r7, #7
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	b25b      	sxtb	r3, r3
    18ce:	2b00      	cmp	r3, #0
    18d0:	d109      	bne.n	18e6 <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    18d2:	4b09      	ldr	r3, [pc, #36]	; (18f8 <hif_chip_wake+0x80>)
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	b2db      	uxtb	r3, r3
    18d8:	3301      	adds	r3, #1
    18da:	b2da      	uxtb	r2, r3
    18dc:	4b06      	ldr	r3, [pc, #24]	; (18f8 <hif_chip_wake+0x80>)
    18de:	701a      	strb	r2, [r3, #0]
    18e0:	e002      	b.n	18e8 <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	e000      	b.n	18e8 <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    18e6:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    18e8:	1dfb      	adds	r3, r7, #7
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	b25b      	sxtb	r3, r3
}
    18ee:	0018      	movs	r0, r3
    18f0:	46bd      	mov	sp, r7
    18f2:	b003      	add	sp, #12
    18f4:	bd90      	pop	{r4, r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	200000a1 	.word	0x200000a1
    18fc:	200000a0 	.word	0x200000a0
    1900:	00002f85 	.word	0x00002f85
    1904:	00005678 	.word	0x00005678
    1908:	00001074 	.word	0x00001074
    190c:	00003701 	.word	0x00003701

00001910 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1910:	b590      	push	{r4, r7, lr}
    1912:	b083      	sub	sp, #12
    1914:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1916:	1dfb      	adds	r3, r7, #7
    1918:	2200      	movs	r2, #0
    191a:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    191c:	4b29      	ldr	r3, [pc, #164]	; (19c4 <hif_chip_sleep+0xb4>)
    191e:	781b      	ldrb	r3, [r3, #0]
    1920:	b2db      	uxtb	r3, r3
    1922:	2b00      	cmp	r3, #0
    1924:	d006      	beq.n	1934 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    1926:	4b27      	ldr	r3, [pc, #156]	; (19c4 <hif_chip_sleep+0xb4>)
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	b2db      	uxtb	r3, r3
    192c:	3b01      	subs	r3, #1
    192e:	b2da      	uxtb	r2, r3
    1930:	4b24      	ldr	r3, [pc, #144]	; (19c4 <hif_chip_sleep+0xb4>)
    1932:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    1934:	4b23      	ldr	r3, [pc, #140]	; (19c4 <hif_chip_sleep+0xb4>)
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	b2db      	uxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	d13a      	bne.n	19b4 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    193e:	4b22      	ldr	r3, [pc, #136]	; (19c8 <hif_chip_sleep+0xb8>)
    1940:	781b      	ldrb	r3, [r3, #0]
    1942:	b2db      	uxtb	r3, r3
    1944:	2b03      	cmp	r3, #3
    1946:	d004      	beq.n	1952 <hif_chip_sleep+0x42>
    1948:	4b1f      	ldr	r3, [pc, #124]	; (19c8 <hif_chip_sleep+0xb8>)
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	b2db      	uxtb	r3, r3
    194e:	2b04      	cmp	r3, #4
    1950:	d130      	bne.n	19b4 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    1952:	2300      	movs	r3, #0
    1954:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    1956:	1dfc      	adds	r4, r7, #7
    1958:	4a1c      	ldr	r2, [pc, #112]	; (19cc <hif_chip_sleep+0xbc>)
    195a:	4b1d      	ldr	r3, [pc, #116]	; (19d0 <hif_chip_sleep+0xc0>)
    195c:	0011      	movs	r1, r2
    195e:	0018      	movs	r0, r3
    1960:	4b1c      	ldr	r3, [pc, #112]	; (19d4 <hif_chip_sleep+0xc4>)
    1962:	4798      	blx	r3
    1964:	0003      	movs	r3, r0
    1966:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1968:	1dfb      	adds	r3, r7, #7
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	b25b      	sxtb	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	d11d      	bne.n	19ae <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    1972:	1dfc      	adds	r4, r7, #7
    1974:	003b      	movs	r3, r7
    1976:	0019      	movs	r1, r3
    1978:	2001      	movs	r0, #1
    197a:	4b17      	ldr	r3, [pc, #92]	; (19d8 <hif_chip_sleep+0xc8>)
    197c:	4798      	blx	r3
    197e:	0003      	movs	r3, r0
    1980:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1982:	1dfb      	adds	r3, r7, #7
    1984:	781b      	ldrb	r3, [r3, #0]
    1986:	b25b      	sxtb	r3, r3
    1988:	2b00      	cmp	r3, #0
    198a:	d112      	bne.n	19b2 <hif_chip_sleep+0xa2>
			if(reg&0x2)
    198c:	683b      	ldr	r3, [r7, #0]
    198e:	2202      	movs	r2, #2
    1990:	4013      	ands	r3, r2
    1992:	d00f      	beq.n	19b4 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    1994:	683b      	ldr	r3, [r7, #0]
    1996:	2202      	movs	r2, #2
    1998:	4393      	bics	r3, r2
    199a:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    199c:	683b      	ldr	r3, [r7, #0]
    199e:	1dfc      	adds	r4, r7, #7
    19a0:	0019      	movs	r1, r3
    19a2:	2001      	movs	r0, #1
    19a4:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <hif_chip_sleep+0xc4>)
    19a6:	4798      	blx	r3
    19a8:	0003      	movs	r3, r0
    19aa:	7023      	strb	r3, [r4, #0]
    19ac:	e002      	b.n	19b4 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	e000      	b.n	19b4 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    19b2:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    19b4:	1dfb      	adds	r3, r7, #7
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	b25b      	sxtb	r3, r3
}
    19ba:	0018      	movs	r0, r3
    19bc:	46bd      	mov	sp, r7
    19be:	b003      	add	sp, #12
    19c0:	bd90      	pop	{r4, r7, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	200000a1 	.word	0x200000a1
    19c8:	200000a0 	.word	0x200000a0
    19cc:	00004321 	.word	0x00004321
    19d0:	00001074 	.word	0x00001074
    19d4:	00003701 	.word	0x00003701
    19d8:	000036dd 	.word	0x000036dd

000019dc <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    19dc:	b580      	push	{r7, lr}
    19de:	b082      	sub	sp, #8
    19e0:	af00      	add	r7, sp, #0
    19e2:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    19e4:	4b0e      	ldr	r3, [pc, #56]	; (1a20 <hif_init+0x44>)
    19e6:	2200      	movs	r2, #0
    19e8:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    19ea:	4b0e      	ldr	r3, [pc, #56]	; (1a24 <hif_init+0x48>)
    19ec:	2200      	movs	r2, #0
    19ee:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    19f0:	4b0d      	ldr	r3, [pc, #52]	; (1a28 <hif_init+0x4c>)
    19f2:	2200      	movs	r2, #0
    19f4:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    19f6:	4b0d      	ldr	r3, [pc, #52]	; (1a2c <hif_init+0x50>)
    19f8:	2200      	movs	r2, #0
    19fa:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    19fc:	4b0c      	ldr	r3, [pc, #48]	; (1a30 <hif_init+0x54>)
    19fe:	2200      	movs	r2, #0
    1a00:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    1a02:	4b0c      	ldr	r3, [pc, #48]	; (1a34 <hif_init+0x58>)
    1a04:	0018      	movs	r0, r3
    1a06:	4b0c      	ldr	r3, [pc, #48]	; (1a38 <hif_init+0x5c>)
    1a08:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1a0a:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <hif_init+0x60>)
    1a0c:	0019      	movs	r1, r3
    1a0e:	2003      	movs	r0, #3
    1a10:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <hif_init+0x64>)
    1a12:	4798      	blx	r3

	return M2M_SUCCESS;
    1a14:	2300      	movs	r3, #0
}
    1a16:	0018      	movs	r0, r3
    1a18:	46bd      	mov	sp, r7
    1a1a:	b002      	add	sp, #8
    1a1c:	bd80      	pop	{r7, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	200000a4 	.word	0x200000a4
    1a24:	200000a8 	.word	0x200000a8
    1a28:	200000a1 	.word	0x200000a1
    1a2c:	200000a0 	.word	0x200000a0
    1a30:	200000a3 	.word	0x200000a3
    1a34:	000017d5 	.word	0x000017d5
    1a38:	00000d95 	.word	0x00000d95
    1a3c:	0000185d 	.word	0x0000185d
    1a40:	0000241d 	.word	0x0000241d

00001a44 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1a44:	b590      	push	{r4, r7, lr}
    1a46:	b089      	sub	sp, #36	; 0x24
    1a48:	af00      	add	r7, sp, #0
    1a4a:	0004      	movs	r4, r0
    1a4c:	0008      	movs	r0, r1
    1a4e:	603a      	str	r2, [r7, #0]
    1a50:	0019      	movs	r1, r3
    1a52:	1dfb      	adds	r3, r7, #7
    1a54:	1c22      	adds	r2, r4, #0
    1a56:	701a      	strb	r2, [r3, #0]
    1a58:	1dbb      	adds	r3, r7, #6
    1a5a:	1c02      	adds	r2, r0, #0
    1a5c:	701a      	strb	r2, [r3, #0]
    1a5e:	1d3b      	adds	r3, r7, #4
    1a60:	1c0a      	adds	r2, r1, #0
    1a62:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    1a64:	231f      	movs	r3, #31
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	22ff      	movs	r2, #255	; 0xff
    1a6a:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1a6c:	1dbb      	adds	r3, r7, #6
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	227f      	movs	r2, #127	; 0x7f
    1a72:	4013      	ands	r3, r2
    1a74:	b2da      	uxtb	r2, r3
    1a76:	2318      	movs	r3, #24
    1a78:	18fb      	adds	r3, r7, r3
    1a7a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1a7c:	2318      	movs	r3, #24
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	1dfa      	adds	r2, r7, #7
    1a82:	7812      	ldrb	r2, [r2, #0]
    1a84:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1a86:	2318      	movs	r3, #24
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	2208      	movs	r2, #8
    1a8c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    1a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1a90:	2b00      	cmp	r3, #0
    1a92:	d011      	beq.n	1ab8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1a94:	2318      	movs	r3, #24
    1a96:	18fb      	adds	r3, r7, r3
    1a98:	885b      	ldrh	r3, [r3, #2]
    1a9a:	b29a      	uxth	r2, r3
    1a9c:	2338      	movs	r3, #56	; 0x38
    1a9e:	18f9      	adds	r1, r7, r3
    1aa0:	2334      	movs	r3, #52	; 0x34
    1aa2:	18fb      	adds	r3, r7, r3
    1aa4:	8809      	ldrh	r1, [r1, #0]
    1aa6:	881b      	ldrh	r3, [r3, #0]
    1aa8:	18cb      	adds	r3, r1, r3
    1aaa:	b29b      	uxth	r3, r3
    1aac:	18d3      	adds	r3, r2, r3
    1aae:	b29a      	uxth	r2, r3
    1ab0:	2318      	movs	r3, #24
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	805a      	strh	r2, [r3, #2]
    1ab6:	e00a      	b.n	1ace <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    1ab8:	2318      	movs	r3, #24
    1aba:	18fb      	adds	r3, r7, r3
    1abc:	885b      	ldrh	r3, [r3, #2]
    1abe:	b29a      	uxth	r2, r3
    1ac0:	1d3b      	adds	r3, r7, #4
    1ac2:	881b      	ldrh	r3, [r3, #0]
    1ac4:	18d3      	adds	r3, r2, r3
    1ac6:	b29a      	uxth	r2, r3
    1ac8:	2318      	movs	r3, #24
    1aca:	18fb      	adds	r3, r7, r3
    1acc:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    1ace:	231f      	movs	r3, #31
    1ad0:	18fc      	adds	r4, r7, r3
    1ad2:	4b9b      	ldr	r3, [pc, #620]	; (1d40 <hif_send+0x2fc>)
    1ad4:	4798      	blx	r3
    1ad6:	0003      	movs	r3, r0
    1ad8:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    1ada:	231f      	movs	r3, #31
    1adc:	18fb      	adds	r3, r7, r3
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	b25b      	sxtb	r3, r3
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d000      	beq.n	1ae8 <hif_send+0xa4>
    1ae6:	e103      	b.n	1cf0 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    1ae8:	2300      	movs	r3, #0
    1aea:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    1aec:	230e      	movs	r3, #14
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	2200      	movs	r2, #0
    1af2:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    1af4:	2300      	movs	r3, #0
    1af6:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    1af8:	1dfb      	adds	r3, r7, #7
    1afa:	781a      	ldrb	r2, [r3, #0]
    1afc:	697b      	ldr	r3, [r7, #20]
    1afe:	4313      	orrs	r3, r2
    1b00:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    1b02:	1dbb      	adds	r3, r7, #6
    1b04:	781b      	ldrb	r3, [r3, #0]
    1b06:	021a      	lsls	r2, r3, #8
    1b08:	697b      	ldr	r3, [r7, #20]
    1b0a:	4313      	orrs	r3, r2
    1b0c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    1b0e:	2318      	movs	r3, #24
    1b10:	18fb      	adds	r3, r7, r3
    1b12:	885b      	ldrh	r3, [r3, #2]
    1b14:	b29b      	uxth	r3, r3
    1b16:	041a      	lsls	r2, r3, #16
    1b18:	697b      	ldr	r3, [r7, #20]
    1b1a:	4313      	orrs	r3, r2
    1b1c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1b1e:	697b      	ldr	r3, [r7, #20]
    1b20:	221f      	movs	r2, #31
    1b22:	18bc      	adds	r4, r7, r2
    1b24:	4a87      	ldr	r2, [pc, #540]	; (1d44 <hif_send+0x300>)
    1b26:	0019      	movs	r1, r3
    1b28:	0010      	movs	r0, r2
    1b2a:	4b87      	ldr	r3, [pc, #540]	; (1d48 <hif_send+0x304>)
    1b2c:	4798      	blx	r3
    1b2e:	0003      	movs	r3, r0
    1b30:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1b32:	231f      	movs	r3, #31
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	b25b      	sxtb	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d000      	beq.n	1b40 <hif_send+0xfc>
    1b3e:	e0ee      	b.n	1d1e <hif_send+0x2da>


		reg = 0;
    1b40:	2300      	movs	r3, #0
    1b42:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    1b44:	697b      	ldr	r3, [r7, #20]
    1b46:	2202      	movs	r2, #2
    1b48:	4313      	orrs	r3, r2
    1b4a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1b4c:	697b      	ldr	r3, [r7, #20]
    1b4e:	221f      	movs	r2, #31
    1b50:	18bc      	adds	r4, r7, r2
    1b52:	4a7e      	ldr	r2, [pc, #504]	; (1d4c <hif_send+0x308>)
    1b54:	0019      	movs	r1, r3
    1b56:	0010      	movs	r0, r2
    1b58:	4b7b      	ldr	r3, [pc, #492]	; (1d48 <hif_send+0x304>)
    1b5a:	4798      	blx	r3
    1b5c:	0003      	movs	r3, r0
    1b5e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1b60:	231f      	movs	r3, #31
    1b62:	18fb      	adds	r3, r7, r3
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	b25b      	sxtb	r3, r3
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d000      	beq.n	1b6e <hif_send+0x12a>
    1b6c:	e0d9      	b.n	1d22 <hif_send+0x2de>
		dma_addr = 0;
    1b6e:	2300      	movs	r3, #0
    1b70:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    1b72:	230e      	movs	r3, #14
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	2200      	movs	r2, #0
    1b78:	801a      	strh	r2, [r3, #0]
    1b7a:	e031      	b.n	1be0 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1b7c:	231f      	movs	r3, #31
    1b7e:	18fc      	adds	r4, r7, r3
    1b80:	2314      	movs	r3, #20
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	4a71      	ldr	r2, [pc, #452]	; (1d4c <hif_send+0x308>)
    1b86:	0019      	movs	r1, r3
    1b88:	0010      	movs	r0, r2
    1b8a:	4b71      	ldr	r3, [pc, #452]	; (1d50 <hif_send+0x30c>)
    1b8c:	4798      	blx	r3
    1b8e:	0003      	movs	r3, r0
    1b90:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    1b92:	231f      	movs	r3, #31
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	b25b      	sxtb	r3, r3
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d128      	bne.n	1bf0 <hif_send+0x1ac>
			if (!(reg & 0x2))
    1b9e:	697b      	ldr	r3, [r7, #20]
    1ba0:	2202      	movs	r2, #2
    1ba2:	4013      	ands	r3, r2
    1ba4:	d113      	bne.n	1bce <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    1ba6:	231f      	movs	r3, #31
    1ba8:	18fc      	adds	r4, r7, r3
    1baa:	2310      	movs	r3, #16
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	4a69      	ldr	r2, [pc, #420]	; (1d54 <hif_send+0x310>)
    1bb0:	0019      	movs	r1, r3
    1bb2:	0010      	movs	r0, r2
    1bb4:	4b66      	ldr	r3, [pc, #408]	; (1d50 <hif_send+0x30c>)
    1bb6:	4798      	blx	r3
    1bb8:	0003      	movs	r3, r0
    1bba:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    1bbc:	231f      	movs	r3, #31
    1bbe:	18fb      	adds	r3, r7, r3
    1bc0:	781b      	ldrb	r3, [r3, #0]
    1bc2:	b25b      	sxtb	r3, r3
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d015      	beq.n	1bf4 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    1bc8:	2300      	movs	r3, #0
    1bca:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    1bcc:	e012      	b.n	1bf4 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    1bce:	230e      	movs	r3, #14
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	881b      	ldrh	r3, [r3, #0]
    1bd4:	b29b      	uxth	r3, r3
    1bd6:	3301      	adds	r3, #1
    1bd8:	b29a      	uxth	r2, r3
    1bda:	230e      	movs	r3, #14
    1bdc:	18fb      	adds	r3, r7, r3
    1bde:	801a      	strh	r2, [r3, #0]
    1be0:	230e      	movs	r3, #14
    1be2:	18fb      	adds	r3, r7, r3
    1be4:	881b      	ldrh	r3, [r3, #0]
    1be6:	b29b      	uxth	r3, r3
    1be8:	4a5b      	ldr	r2, [pc, #364]	; (1d58 <hif_send+0x314>)
    1bea:	4293      	cmp	r3, r2
    1bec:	d9c6      	bls.n	1b7c <hif_send+0x138>
    1bee:	e002      	b.n	1bf6 <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    1bf0:	46c0      	nop			; (mov r8, r8)
    1bf2:	e000      	b.n	1bf6 <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    1bf4:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    1bf6:	693b      	ldr	r3, [r7, #16]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d100      	bne.n	1bfe <hif_send+0x1ba>
    1bfc:	e073      	b.n	1ce6 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1bfe:	693b      	ldr	r3, [r7, #16]
    1c00:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1c02:	2318      	movs	r3, #24
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	885b      	ldrh	r3, [r3, #2]
    1c08:	b29a      	uxth	r2, r3
    1c0a:	2318      	movs	r3, #24
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1c10:	68bb      	ldr	r3, [r7, #8]
    1c12:	221f      	movs	r2, #31
    1c14:	18bc      	adds	r4, r7, r2
    1c16:	2218      	movs	r2, #24
    1c18:	18b9      	adds	r1, r7, r2
    1c1a:	2208      	movs	r2, #8
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b4f      	ldr	r3, [pc, #316]	; (1d5c <hif_send+0x318>)
    1c20:	4798      	blx	r3
    1c22:	0003      	movs	r3, r0
    1c24:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    1c26:	231f      	movs	r3, #31
    1c28:	18fb      	adds	r3, r7, r3
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	b25b      	sxtb	r3, r3
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d000      	beq.n	1c34 <hif_send+0x1f0>
    1c32:	e078      	b.n	1d26 <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1c34:	68bb      	ldr	r3, [r7, #8]
    1c36:	3308      	adds	r3, #8
    1c38:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    1c3a:	683b      	ldr	r3, [r7, #0]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d015      	beq.n	1c6c <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1c40:	68b8      	ldr	r0, [r7, #8]
    1c42:	1d3b      	adds	r3, r7, #4
    1c44:	881a      	ldrh	r2, [r3, #0]
    1c46:	231f      	movs	r3, #31
    1c48:	18fc      	adds	r4, r7, r3
    1c4a:	683b      	ldr	r3, [r7, #0]
    1c4c:	0019      	movs	r1, r3
    1c4e:	4b43      	ldr	r3, [pc, #268]	; (1d5c <hif_send+0x318>)
    1c50:	4798      	blx	r3
    1c52:	0003      	movs	r3, r0
    1c54:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1c56:	231f      	movs	r3, #31
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	b25b      	sxtb	r3, r3
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d163      	bne.n	1d2a <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    1c62:	1d3b      	adds	r3, r7, #4
    1c64:	881a      	ldrh	r2, [r3, #0]
    1c66:	68bb      	ldr	r3, [r7, #8]
    1c68:	18d3      	adds	r3, r2, r3
    1c6a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    1c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d021      	beq.n	1cb6 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1c72:	2338      	movs	r3, #56	; 0x38
    1c74:	18fb      	adds	r3, r7, r3
    1c76:	881a      	ldrh	r2, [r3, #0]
    1c78:	1d3b      	adds	r3, r7, #4
    1c7a:	881b      	ldrh	r3, [r3, #0]
    1c7c:	1ad3      	subs	r3, r2, r3
    1c7e:	001a      	movs	r2, r3
    1c80:	68bb      	ldr	r3, [r7, #8]
    1c82:	18d3      	adds	r3, r2, r3
    1c84:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1c86:	68b8      	ldr	r0, [r7, #8]
    1c88:	2334      	movs	r3, #52	; 0x34
    1c8a:	18fb      	adds	r3, r7, r3
    1c8c:	881a      	ldrh	r2, [r3, #0]
    1c8e:	231f      	movs	r3, #31
    1c90:	18fc      	adds	r4, r7, r3
    1c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1c94:	0019      	movs	r1, r3
    1c96:	4b31      	ldr	r3, [pc, #196]	; (1d5c <hif_send+0x318>)
    1c98:	4798      	blx	r3
    1c9a:	0003      	movs	r3, r0
    1c9c:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1c9e:	231f      	movs	r3, #31
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	b25b      	sxtb	r3, r3
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d141      	bne.n	1d2e <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    1caa:	2334      	movs	r3, #52	; 0x34
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	881a      	ldrh	r2, [r3, #0]
    1cb0:	68bb      	ldr	r3, [r7, #8]
    1cb2:	18d3      	adds	r3, r2, r3
    1cb4:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    1cb6:	693b      	ldr	r3, [r7, #16]
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    1cbc:	697b      	ldr	r3, [r7, #20]
    1cbe:	2202      	movs	r2, #2
    1cc0:	4313      	orrs	r3, r2
    1cc2:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1cc4:	697b      	ldr	r3, [r7, #20]
    1cc6:	221f      	movs	r2, #31
    1cc8:	18bc      	adds	r4, r7, r2
    1cca:	4a25      	ldr	r2, [pc, #148]	; (1d60 <hif_send+0x31c>)
    1ccc:	0019      	movs	r1, r3
    1cce:	0010      	movs	r0, r2
    1cd0:	4b1d      	ldr	r3, [pc, #116]	; (1d48 <hif_send+0x304>)
    1cd2:	4798      	blx	r3
    1cd4:	0003      	movs	r3, r0
    1cd6:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1cd8:	231f      	movs	r3, #31
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	b25b      	sxtb	r3, r3
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d015      	beq.n	1d10 <hif_send+0x2cc>
    1ce4:	e024      	b.n	1d30 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    1ce6:	231f      	movs	r3, #31
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	22fd      	movs	r2, #253	; 0xfd
    1cec:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1cee:	e01f      	b.n	1d30 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1cf0:	23a0      	movs	r3, #160	; 0xa0
    1cf2:	33ff      	adds	r3, #255	; 0xff
    1cf4:	001a      	movs	r2, r3
    1cf6:	491b      	ldr	r1, [pc, #108]	; (1d64 <hif_send+0x320>)
    1cf8:	4b1b      	ldr	r3, [pc, #108]	; (1d68 <hif_send+0x324>)
    1cfa:	0018      	movs	r0, r3
    1cfc:	4b1b      	ldr	r3, [pc, #108]	; (1d6c <hif_send+0x328>)
    1cfe:	4798      	blx	r3
    1d00:	4b1b      	ldr	r3, [pc, #108]	; (1d70 <hif_send+0x32c>)
    1d02:	0018      	movs	r0, r3
    1d04:	4b1b      	ldr	r3, [pc, #108]	; (1d74 <hif_send+0x330>)
    1d06:	4798      	blx	r3
    1d08:	200d      	movs	r0, #13
    1d0a:	4b1b      	ldr	r3, [pc, #108]	; (1d78 <hif_send+0x334>)
    1d0c:	4798      	blx	r3
		goto ERR1;
    1d0e:	e00f      	b.n	1d30 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    1d10:	231f      	movs	r3, #31
    1d12:	18fc      	adds	r4, r7, r3
    1d14:	4b19      	ldr	r3, [pc, #100]	; (1d7c <hif_send+0x338>)
    1d16:	4798      	blx	r3
    1d18:	0003      	movs	r3, r0
    1d1a:	7023      	strb	r3, [r4, #0]
    1d1c:	e008      	b.n	1d30 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	e006      	b.n	1d30 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	e004      	b.n	1d30 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	e002      	b.n	1d30 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	e000      	b.n	1d30 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1d2e:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    1d30:	231f      	movs	r3, #31
    1d32:	18fb      	adds	r3, r7, r3
    1d34:	781b      	ldrb	r3, [r3, #0]
    1d36:	b25b      	sxtb	r3, r3
}
    1d38:	0018      	movs	r0, r3
    1d3a:	46bd      	mov	sp, r7
    1d3c:	b009      	add	sp, #36	; 0x24
    1d3e:	bd90      	pop	{r4, r7, pc}
    1d40:	00001879 	.word	0x00001879
    1d44:	0000108c 	.word	0x0000108c
    1d48:	00003701 	.word	0x00003701
    1d4c:	00001078 	.word	0x00001078
    1d50:	000036dd 	.word	0x000036dd
    1d54:	00150400 	.word	0x00150400
    1d58:	000003e7 	.word	0x000003e7
    1d5c:	00003849 	.word	0x00003849
    1d60:	0000106c 	.word	0x0000106c
    1d64:	0000c82c 	.word	0x0000c82c
    1d68:	0000c5cc 	.word	0x0000c5cc
    1d6c:	0000b081 	.word	0x0000b081
    1d70:	0000c5e0 	.word	0x0000c5e0
    1d74:	0000b1a1 	.word	0x0000b1a1
    1d78:	0000b0b5 	.word	0x0000b0b5
    1d7c:	00001911 	.word	0x00001911

00001d80 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1d80:	b590      	push	{r4, r7, lr}
    1d82:	b087      	sub	sp, #28
    1d84:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    1d86:	230f      	movs	r3, #15
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	22fa      	movs	r2, #250	; 0xfa
    1d8c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    1d8e:	230f      	movs	r3, #15
    1d90:	18fc      	adds	r4, r7, r3
    1d92:	4bda      	ldr	r3, [pc, #872]	; (20fc <STACK_SIZE+0xfc>)
    1d94:	4798      	blx	r3
    1d96:	0003      	movs	r3, r0
    1d98:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    1d9a:	230f      	movs	r3, #15
    1d9c:	18fb      	adds	r3, r7, r3
    1d9e:	781b      	ldrb	r3, [r3, #0]
    1da0:	b25b      	sxtb	r3, r3
    1da2:	2b00      	cmp	r3, #0
    1da4:	d000      	beq.n	1da8 <hif_isr+0x28>
    1da6:	e192      	b.n	20ce <STACK_SIZE+0xce>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1da8:	230f      	movs	r3, #15
    1daa:	18fc      	adds	r4, r7, r3
    1dac:	2308      	movs	r3, #8
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	4ad3      	ldr	r2, [pc, #844]	; (2100 <STACK_SIZE+0x100>)
    1db2:	0019      	movs	r1, r3
    1db4:	0010      	movs	r0, r2
    1db6:	4bd3      	ldr	r3, [pc, #844]	; (2104 <STACK_SIZE+0x104>)
    1db8:	4798      	blx	r3
    1dba:	0003      	movs	r3, r0
    1dbc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    1dbe:	230f      	movs	r3, #15
    1dc0:	18fb      	adds	r3, r7, r3
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	b25b      	sxtb	r3, r3
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d000      	beq.n	1dcc <hif_isr+0x4c>
    1dca:	e172      	b.n	20b2 <STACK_SIZE+0xb2>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    1dcc:	68bb      	ldr	r3, [r7, #8]
    1dce:	2201      	movs	r2, #1
    1dd0:	4013      	ands	r3, r2
    1dd2:	d100      	bne.n	1dd6 <hif_isr+0x56>
    1dd4:	e15c      	b.n	2090 <STACK_SIZE+0x90>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    1dd6:	2000      	movs	r0, #0
    1dd8:	4bcb      	ldr	r3, [pc, #812]	; (2108 <STACK_SIZE+0x108>)
    1dda:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    1ddc:	68bb      	ldr	r3, [r7, #8]
    1dde:	2201      	movs	r2, #1
    1de0:	4393      	bics	r3, r2
    1de2:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1de4:	68bb      	ldr	r3, [r7, #8]
    1de6:	220f      	movs	r2, #15
    1de8:	18bc      	adds	r4, r7, r2
    1dea:	4ac5      	ldr	r2, [pc, #788]	; (2100 <STACK_SIZE+0x100>)
    1dec:	0019      	movs	r1, r3
    1dee:	0010      	movs	r0, r2
    1df0:	4bc6      	ldr	r3, [pc, #792]	; (210c <STACK_SIZE+0x10c>)
    1df2:	4798      	blx	r3
    1df4:	0003      	movs	r3, r0
    1df6:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    1df8:	230f      	movs	r3, #15
    1dfa:	18fb      	adds	r3, r7, r3
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	b25b      	sxtb	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	d000      	beq.n	1e06 <hif_isr+0x86>
    1e04:	e1bc      	b.n	2180 <STACK_SIZE+0x180>
				gu8HifSizeDone = 0;
    1e06:	4bc2      	ldr	r3, [pc, #776]	; (2110 <STACK_SIZE+0x110>)
    1e08:	2200      	movs	r2, #0
    1e0a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    1e0c:	68bb      	ldr	r3, [r7, #8]
    1e0e:	089b      	lsrs	r3, r3, #2
    1e10:	b29a      	uxth	r2, r3
    1e12:	230c      	movs	r3, #12
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	0512      	lsls	r2, r2, #20
    1e18:	0d12      	lsrs	r2, r2, #20
    1e1a:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    1e1c:	230c      	movs	r3, #12
    1e1e:	18fb      	adds	r3, r7, r3
    1e20:	881b      	ldrh	r3, [r3, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d100      	bne.n	1e28 <hif_isr+0xa8>
    1e26:	e121      	b.n	206c <STACK_SIZE+0x6c>
					uint32 address = 0;
    1e28:	2300      	movs	r3, #0
    1e2a:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1e2c:	230f      	movs	r3, #15
    1e2e:	18fc      	adds	r4, r7, r3
    1e30:	003b      	movs	r3, r7
    1e32:	4ab8      	ldr	r2, [pc, #736]	; (2114 <STACK_SIZE+0x114>)
    1e34:	0019      	movs	r1, r3
    1e36:	0010      	movs	r0, r2
    1e38:	4bb2      	ldr	r3, [pc, #712]	; (2104 <STACK_SIZE+0x104>)
    1e3a:	4798      	blx	r3
    1e3c:	0003      	movs	r3, r0
    1e3e:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    1e40:	230f      	movs	r3, #15
    1e42:	18fb      	adds	r3, r7, r3
    1e44:	781b      	ldrb	r3, [r3, #0]
    1e46:	b25b      	sxtb	r3, r3
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d011      	beq.n	1e70 <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1e4c:	23e7      	movs	r3, #231	; 0xe7
    1e4e:	005a      	lsls	r2, r3, #1
    1e50:	49b1      	ldr	r1, [pc, #708]	; (2118 <STACK_SIZE+0x118>)
    1e52:	4bb2      	ldr	r3, [pc, #712]	; (211c <STACK_SIZE+0x11c>)
    1e54:	0018      	movs	r0, r3
    1e56:	4bb2      	ldr	r3, [pc, #712]	; (2120 <STACK_SIZE+0x120>)
    1e58:	4798      	blx	r3
    1e5a:	4bb2      	ldr	r3, [pc, #712]	; (2124 <STACK_SIZE+0x124>)
    1e5c:	0018      	movs	r0, r3
    1e5e:	4bb2      	ldr	r3, [pc, #712]	; (2128 <STACK_SIZE+0x128>)
    1e60:	4798      	blx	r3
    1e62:	200d      	movs	r0, #13
    1e64:	4bb1      	ldr	r3, [pc, #708]	; (212c <STACK_SIZE+0x12c>)
    1e66:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1e68:	2001      	movs	r0, #1
    1e6a:	4ba7      	ldr	r3, [pc, #668]	; (2108 <STACK_SIZE+0x108>)
    1e6c:	4798      	blx	r3
						goto ERR1;
    1e6e:	e188      	b.n	2182 <STACK_SIZE+0x182>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1e70:	683b      	ldr	r3, [r7, #0]
    1e72:	220f      	movs	r2, #15
    1e74:	18bc      	adds	r4, r7, r2
    1e76:	1d39      	adds	r1, r7, #4
    1e78:	2204      	movs	r2, #4
    1e7a:	0018      	movs	r0, r3
    1e7c:	4bac      	ldr	r3, [pc, #688]	; (2130 <STACK_SIZE+0x130>)
    1e7e:	4798      	blx	r3
    1e80:	0003      	movs	r3, r0
    1e82:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1e84:	1d3b      	adds	r3, r7, #4
    1e86:	885b      	ldrh	r3, [r3, #2]
    1e88:	b29a      	uxth	r2, r3
    1e8a:	1d3b      	adds	r3, r7, #4
    1e8c:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    1e8e:	230f      	movs	r3, #15
    1e90:	18fb      	adds	r3, r7, r3
    1e92:	781b      	ldrb	r3, [r3, #0]
    1e94:	b25b      	sxtb	r3, r3
    1e96:	2b00      	cmp	r3, #0
    1e98:	d011      	beq.n	1ebe <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    1e9a:	23eb      	movs	r3, #235	; 0xeb
    1e9c:	005a      	lsls	r2, r3, #1
    1e9e:	499e      	ldr	r1, [pc, #632]	; (2118 <STACK_SIZE+0x118>)
    1ea0:	4b9e      	ldr	r3, [pc, #632]	; (211c <STACK_SIZE+0x11c>)
    1ea2:	0018      	movs	r0, r3
    1ea4:	4b9e      	ldr	r3, [pc, #632]	; (2120 <STACK_SIZE+0x120>)
    1ea6:	4798      	blx	r3
    1ea8:	4ba2      	ldr	r3, [pc, #648]	; (2134 <STACK_SIZE+0x134>)
    1eaa:	0018      	movs	r0, r3
    1eac:	4b9e      	ldr	r3, [pc, #632]	; (2128 <STACK_SIZE+0x128>)
    1eae:	4798      	blx	r3
    1eb0:	200d      	movs	r0, #13
    1eb2:	4b9e      	ldr	r3, [pc, #632]	; (212c <STACK_SIZE+0x12c>)
    1eb4:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1eb6:	2001      	movs	r0, #1
    1eb8:	4b93      	ldr	r3, [pc, #588]	; (2108 <STACK_SIZE+0x108>)
    1eba:	4798      	blx	r3
						goto ERR1;
    1ebc:	e161      	b.n	2182 <STACK_SIZE+0x182>
					}
					if(strHif.u16Length != size)
    1ebe:	1d3b      	adds	r3, r7, #4
    1ec0:	885b      	ldrh	r3, [r3, #2]
    1ec2:	b29b      	uxth	r3, r3
    1ec4:	220c      	movs	r2, #12
    1ec6:	18ba      	adds	r2, r7, r2
    1ec8:	8812      	ldrh	r2, [r2, #0]
    1eca:	429a      	cmp	r2, r3
    1ecc:	d02e      	beq.n	1f2c <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    1ece:	230c      	movs	r3, #12
    1ed0:	18fb      	adds	r3, r7, r3
    1ed2:	881b      	ldrh	r3, [r3, #0]
    1ed4:	1d3a      	adds	r2, r7, #4
    1ed6:	8852      	ldrh	r2, [r2, #2]
    1ed8:	b292      	uxth	r2, r2
    1eda:	1a9b      	subs	r3, r3, r2
    1edc:	2b04      	cmp	r3, #4
    1ede:	dd25      	ble.n	1f2c <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1ee0:	23e0      	movs	r3, #224	; 0xe0
    1ee2:	33ff      	adds	r3, #255	; 0xff
    1ee4:	001a      	movs	r2, r3
    1ee6:	498c      	ldr	r1, [pc, #560]	; (2118 <STACK_SIZE+0x118>)
    1ee8:	4b8c      	ldr	r3, [pc, #560]	; (211c <STACK_SIZE+0x11c>)
    1eea:	0018      	movs	r0, r3
    1eec:	4b8c      	ldr	r3, [pc, #560]	; (2120 <STACK_SIZE+0x120>)
    1eee:	4798      	blx	r3
    1ef0:	230c      	movs	r3, #12
    1ef2:	18fb      	adds	r3, r7, r3
    1ef4:	8819      	ldrh	r1, [r3, #0]
    1ef6:	1d3b      	adds	r3, r7, #4
    1ef8:	885b      	ldrh	r3, [r3, #2]
    1efa:	b29b      	uxth	r3, r3
    1efc:	001a      	movs	r2, r3
    1efe:	1d3b      	adds	r3, r7, #4
    1f00:	781b      	ldrb	r3, [r3, #0]
    1f02:	b2db      	uxtb	r3, r3
    1f04:	001c      	movs	r4, r3
    1f06:	1d3b      	adds	r3, r7, #4
    1f08:	785b      	ldrb	r3, [r3, #1]
    1f0a:	b2db      	uxtb	r3, r3
    1f0c:	488a      	ldr	r0, [pc, #552]	; (2138 <STACK_SIZE+0x138>)
    1f0e:	9300      	str	r3, [sp, #0]
    1f10:	0023      	movs	r3, r4
    1f12:	4c83      	ldr	r4, [pc, #524]	; (2120 <STACK_SIZE+0x120>)
    1f14:	47a0      	blx	r4
    1f16:	200d      	movs	r0, #13
    1f18:	4b84      	ldr	r3, [pc, #528]	; (212c <STACK_SIZE+0x12c>)
    1f1a:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    1f1c:	2001      	movs	r0, #1
    1f1e:	4b7a      	ldr	r3, [pc, #488]	; (2108 <STACK_SIZE+0x108>)
    1f20:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    1f22:	230f      	movs	r3, #15
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	22fa      	movs	r2, #250	; 0xfa
    1f28:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    1f2a:	e12a      	b.n	2182 <STACK_SIZE+0x182>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1f2c:	1d3b      	adds	r3, r7, #4
    1f2e:	781b      	ldrb	r3, [r3, #0]
    1f30:	b2db      	uxtb	r3, r3
    1f32:	2b01      	cmp	r3, #1
    1f34:	d112      	bne.n	1f5c <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    1f36:	4b81      	ldr	r3, [pc, #516]	; (213c <STACK_SIZE+0x13c>)
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d100      	bne.n	1f40 <hif_isr+0x1c0>
    1f3e:	e07c      	b.n	203a <STACK_SIZE+0x3a>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1f40:	4b7e      	ldr	r3, [pc, #504]	; (213c <STACK_SIZE+0x13c>)
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	1d3a      	adds	r2, r7, #4
    1f46:	7852      	ldrb	r2, [r2, #1]
    1f48:	b2d0      	uxtb	r0, r2
    1f4a:	1d3a      	adds	r2, r7, #4
    1f4c:	8852      	ldrh	r2, [r2, #2]
    1f4e:	b292      	uxth	r2, r2
    1f50:	3a08      	subs	r2, #8
    1f52:	b291      	uxth	r1, r2
    1f54:	683a      	ldr	r2, [r7, #0]
    1f56:	3208      	adds	r2, #8
    1f58:	4798      	blx	r3
    1f5a:	e06e      	b.n	203a <STACK_SIZE+0x3a>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1f5c:	1d3b      	adds	r3, r7, #4
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	b2db      	uxtb	r3, r3
    1f62:	2b02      	cmp	r3, #2
    1f64:	d111      	bne.n	1f8a <hif_isr+0x20a>
					{
						if(pfIpCb)
    1f66:	4b76      	ldr	r3, [pc, #472]	; (2140 <STACK_SIZE+0x140>)
    1f68:	681b      	ldr	r3, [r3, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d065      	beq.n	203a <STACK_SIZE+0x3a>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1f6e:	4b74      	ldr	r3, [pc, #464]	; (2140 <STACK_SIZE+0x140>)
    1f70:	681b      	ldr	r3, [r3, #0]
    1f72:	1d3a      	adds	r2, r7, #4
    1f74:	7852      	ldrb	r2, [r2, #1]
    1f76:	b2d0      	uxtb	r0, r2
    1f78:	1d3a      	adds	r2, r7, #4
    1f7a:	8852      	ldrh	r2, [r2, #2]
    1f7c:	b292      	uxth	r2, r2
    1f7e:	3a08      	subs	r2, #8
    1f80:	b291      	uxth	r1, r2
    1f82:	683a      	ldr	r2, [r7, #0]
    1f84:	3208      	adds	r2, #8
    1f86:	4798      	blx	r3
    1f88:	e057      	b.n	203a <STACK_SIZE+0x3a>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1f8a:	1d3b      	adds	r3, r7, #4
    1f8c:	781b      	ldrb	r3, [r3, #0]
    1f8e:	b2db      	uxtb	r3, r3
    1f90:	2b04      	cmp	r3, #4
    1f92:	d111      	bne.n	1fb8 <hif_isr+0x238>
					{
						if(pfOtaCb)
    1f94:	4b6b      	ldr	r3, [pc, #428]	; (2144 <STACK_SIZE+0x144>)
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d04e      	beq.n	203a <STACK_SIZE+0x3a>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1f9c:	4b69      	ldr	r3, [pc, #420]	; (2144 <STACK_SIZE+0x144>)
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	1d3a      	adds	r2, r7, #4
    1fa2:	7852      	ldrb	r2, [r2, #1]
    1fa4:	b2d0      	uxtb	r0, r2
    1fa6:	1d3a      	adds	r2, r7, #4
    1fa8:	8852      	ldrh	r2, [r2, #2]
    1faa:	b292      	uxth	r2, r2
    1fac:	3a08      	subs	r2, #8
    1fae:	b291      	uxth	r1, r2
    1fb0:	683a      	ldr	r2, [r7, #0]
    1fb2:	3208      	adds	r2, #8
    1fb4:	4798      	blx	r3
    1fb6:	e040      	b.n	203a <STACK_SIZE+0x3a>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1fb8:	1d3b      	adds	r3, r7, #4
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	b2db      	uxtb	r3, r3
    1fbe:	2b06      	cmp	r3, #6
    1fc0:	d111      	bne.n	1fe6 <hif_isr+0x266>
					{
						if(pfCryptoCb)
    1fc2:	4b61      	ldr	r3, [pc, #388]	; (2148 <STACK_SIZE+0x148>)
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d037      	beq.n	203a <STACK_SIZE+0x3a>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1fca:	4b5f      	ldr	r3, [pc, #380]	; (2148 <STACK_SIZE+0x148>)
    1fcc:	681b      	ldr	r3, [r3, #0]
    1fce:	1d3a      	adds	r2, r7, #4
    1fd0:	7852      	ldrb	r2, [r2, #1]
    1fd2:	b2d0      	uxtb	r0, r2
    1fd4:	1d3a      	adds	r2, r7, #4
    1fd6:	8852      	ldrh	r2, [r2, #2]
    1fd8:	b292      	uxth	r2, r2
    1fda:	3a08      	subs	r2, #8
    1fdc:	b291      	uxth	r1, r2
    1fde:	683a      	ldr	r2, [r7, #0]
    1fe0:	3208      	adds	r2, #8
    1fe2:	4798      	blx	r3
    1fe4:	e029      	b.n	203a <STACK_SIZE+0x3a>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1fe6:	1d3b      	adds	r3, r7, #4
    1fe8:	781b      	ldrb	r3, [r3, #0]
    1fea:	b2db      	uxtb	r3, r3
    1fec:	2b07      	cmp	r3, #7
    1fee:	d111      	bne.n	2014 <STACK_SIZE+0x14>
					{
						if(pfSigmaCb)
    1ff0:	4b56      	ldr	r3, [pc, #344]	; (214c <STACK_SIZE+0x14c>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d020      	beq.n	203a <STACK_SIZE+0x3a>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1ff8:	4b54      	ldr	r3, [pc, #336]	; (214c <STACK_SIZE+0x14c>)
    1ffa:	681b      	ldr	r3, [r3, #0]
    1ffc:	1d3a      	adds	r2, r7, #4
    1ffe:	7852      	ldrb	r2, [r2, #1]
    2000:	b2d0      	uxtb	r0, r2
    2002:	1d3a      	adds	r2, r7, #4
    2004:	8852      	ldrh	r2, [r2, #2]
    2006:	b292      	uxth	r2, r2
    2008:	3a08      	subs	r2, #8
    200a:	b291      	uxth	r1, r2
    200c:	683a      	ldr	r2, [r7, #0]
    200e:	3208      	adds	r2, #8
    2010:	4798      	blx	r3
    2012:	e012      	b.n	203a <STACK_SIZE+0x3a>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    2014:	4a4e      	ldr	r2, [pc, #312]	; (2150 <STACK_SIZE+0x150>)
    2016:	4940      	ldr	r1, [pc, #256]	; (2118 <STACK_SIZE+0x118>)
    2018:	4b40      	ldr	r3, [pc, #256]	; (211c <STACK_SIZE+0x11c>)
    201a:	0018      	movs	r0, r3
    201c:	4b40      	ldr	r3, [pc, #256]	; (2120 <STACK_SIZE+0x120>)
    201e:	4798      	blx	r3
    2020:	4b4c      	ldr	r3, [pc, #304]	; (2154 <STACK_SIZE+0x154>)
    2022:	0018      	movs	r0, r3
    2024:	4b40      	ldr	r3, [pc, #256]	; (2128 <STACK_SIZE+0x128>)
    2026:	4798      	blx	r3
    2028:	200d      	movs	r0, #13
    202a:	4b40      	ldr	r3, [pc, #256]	; (212c <STACK_SIZE+0x12c>)
    202c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    202e:	230f      	movs	r3, #15
    2030:	18fb      	adds	r3, r7, r3
    2032:	22fa      	movs	r2, #250	; 0xfa
    2034:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	e0a3      	b.n	2182 <STACK_SIZE+0x182>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    203a:	4b35      	ldr	r3, [pc, #212]	; (2110 <STACK_SIZE+0x110>)
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	b2db      	uxtb	r3, r3
    2040:	2b00      	cmp	r3, #0
    2042:	d153      	bne.n	20ec <STACK_SIZE+0xec>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    2044:	4a44      	ldr	r2, [pc, #272]	; (2158 <STACK_SIZE+0x158>)
    2046:	4934      	ldr	r1, [pc, #208]	; (2118 <STACK_SIZE+0x118>)
    2048:	4b34      	ldr	r3, [pc, #208]	; (211c <STACK_SIZE+0x11c>)
    204a:	0018      	movs	r0, r3
    204c:	4b34      	ldr	r3, [pc, #208]	; (2120 <STACK_SIZE+0x120>)
    204e:	4798      	blx	r3
    2050:	4b42      	ldr	r3, [pc, #264]	; (215c <STACK_SIZE+0x15c>)
    2052:	0018      	movs	r0, r3
    2054:	4b34      	ldr	r3, [pc, #208]	; (2128 <STACK_SIZE+0x128>)
    2056:	4798      	blx	r3
    2058:	200d      	movs	r0, #13
    205a:	4b34      	ldr	r3, [pc, #208]	; (212c <STACK_SIZE+0x12c>)
    205c:	4798      	blx	r3
						ret = hif_set_rx_done();
    205e:	230f      	movs	r3, #15
    2060:	18fc      	adds	r4, r7, r3
    2062:	4b3f      	ldr	r3, [pc, #252]	; (2160 <STACK_SIZE+0x160>)
    2064:	4798      	blx	r3
    2066:	0003      	movs	r3, r0
    2068:	7023      	strb	r3, [r4, #0]
    206a:	e03f      	b.n	20ec <STACK_SIZE+0xec>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    206c:	230f      	movs	r3, #15
    206e:	18fb      	adds	r3, r7, r3
    2070:	22fe      	movs	r2, #254	; 0xfe
    2072:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    2074:	4a3b      	ldr	r2, [pc, #236]	; (2164 <STACK_SIZE+0x164>)
    2076:	4928      	ldr	r1, [pc, #160]	; (2118 <STACK_SIZE+0x118>)
    2078:	4b28      	ldr	r3, [pc, #160]	; (211c <STACK_SIZE+0x11c>)
    207a:	0018      	movs	r0, r3
    207c:	4b28      	ldr	r3, [pc, #160]	; (2120 <STACK_SIZE+0x120>)
    207e:	4798      	blx	r3
    2080:	4b39      	ldr	r3, [pc, #228]	; (2168 <STACK_SIZE+0x168>)
    2082:	0018      	movs	r0, r3
    2084:	4b28      	ldr	r3, [pc, #160]	; (2128 <STACK_SIZE+0x128>)
    2086:	4798      	blx	r3
    2088:	200d      	movs	r0, #13
    208a:	4b28      	ldr	r3, [pc, #160]	; (212c <STACK_SIZE+0x12c>)
    208c:	4798      	blx	r3
					goto ERR1;
    208e:	e078      	b.n	2182 <STACK_SIZE+0x182>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    2090:	2386      	movs	r3, #134	; 0x86
    2092:	009a      	lsls	r2, r3, #2
    2094:	4920      	ldr	r1, [pc, #128]	; (2118 <STACK_SIZE+0x118>)
    2096:	4b21      	ldr	r3, [pc, #132]	; (211c <STACK_SIZE+0x11c>)
    2098:	0018      	movs	r0, r3
    209a:	4b21      	ldr	r3, [pc, #132]	; (2120 <STACK_SIZE+0x120>)
    209c:	4798      	blx	r3
    209e:	68ba      	ldr	r2, [r7, #8]
    20a0:	4b32      	ldr	r3, [pc, #200]	; (216c <STACK_SIZE+0x16c>)
    20a2:	0011      	movs	r1, r2
    20a4:	0018      	movs	r0, r3
    20a6:	4b1e      	ldr	r3, [pc, #120]	; (2120 <STACK_SIZE+0x120>)
    20a8:	4798      	blx	r3
    20aa:	200d      	movs	r0, #13
    20ac:	4b1f      	ldr	r3, [pc, #124]	; (212c <STACK_SIZE+0x12c>)
    20ae:	4798      	blx	r3
    20b0:	e01c      	b.n	20ec <STACK_SIZE+0xec>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    20b2:	4a2f      	ldr	r2, [pc, #188]	; (2170 <STACK_SIZE+0x170>)
    20b4:	4918      	ldr	r1, [pc, #96]	; (2118 <STACK_SIZE+0x118>)
    20b6:	4b19      	ldr	r3, [pc, #100]	; (211c <STACK_SIZE+0x11c>)
    20b8:	0018      	movs	r0, r3
    20ba:	4b19      	ldr	r3, [pc, #100]	; (2120 <STACK_SIZE+0x120>)
    20bc:	4798      	blx	r3
    20be:	4b2d      	ldr	r3, [pc, #180]	; (2174 <STACK_SIZE+0x174>)
    20c0:	0018      	movs	r0, r3
    20c2:	4b19      	ldr	r3, [pc, #100]	; (2128 <STACK_SIZE+0x128>)
    20c4:	4798      	blx	r3
    20c6:	200d      	movs	r0, #13
    20c8:	4b18      	ldr	r3, [pc, #96]	; (212c <STACK_SIZE+0x12c>)
    20ca:	4798      	blx	r3
			goto ERR1;
    20cc:	e059      	b.n	2182 <STACK_SIZE+0x182>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    20ce:	2389      	movs	r3, #137	; 0x89
    20d0:	009a      	lsls	r2, r3, #2
    20d2:	4911      	ldr	r1, [pc, #68]	; (2118 <STACK_SIZE+0x118>)
    20d4:	4b11      	ldr	r3, [pc, #68]	; (211c <STACK_SIZE+0x11c>)
    20d6:	0018      	movs	r0, r3
    20d8:	4b11      	ldr	r3, [pc, #68]	; (2120 <STACK_SIZE+0x120>)
    20da:	4798      	blx	r3
    20dc:	4b26      	ldr	r3, [pc, #152]	; (2178 <STACK_SIZE+0x178>)
    20de:	0018      	movs	r0, r3
    20e0:	4b11      	ldr	r3, [pc, #68]	; (2128 <STACK_SIZE+0x128>)
    20e2:	4798      	blx	r3
    20e4:	200d      	movs	r0, #13
    20e6:	4b11      	ldr	r3, [pc, #68]	; (212c <STACK_SIZE+0x12c>)
    20e8:	4798      	blx	r3
		goto ERR1;
    20ea:	e04a      	b.n	2182 <STACK_SIZE+0x182>
	}

	ret = hif_chip_sleep();
    20ec:	230f      	movs	r3, #15
    20ee:	18fc      	adds	r4, r7, r3
    20f0:	4b22      	ldr	r3, [pc, #136]	; (217c <STACK_SIZE+0x17c>)
    20f2:	4798      	blx	r3
    20f4:	0003      	movs	r3, r0
    20f6:	7023      	strb	r3, [r4, #0]
    20f8:	e043      	b.n	2182 <STACK_SIZE+0x182>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	00001879 	.word	0x00001879
    2100:	00001070 	.word	0x00001070
    2104:	000036dd 	.word	0x000036dd
    2108:	00000e0d 	.word	0x00000e0d
    210c:	00003701 	.word	0x00003701
    2110:	200000a2 	.word	0x200000a2
    2114:	00001084 	.word	0x00001084
    2118:	0000c838 	.word	0x0000c838
    211c:	0000c5cc 	.word	0x0000c5cc
    2120:	0000b081 	.word	0x0000b081
    2124:	0000c5fc 	.word	0x0000c5fc
    2128:	0000b1a1 	.word	0x0000b1a1
    212c:	0000b0b5 	.word	0x0000b0b5
    2130:	00003751 	.word	0x00003751
    2134:	0000c620 	.word	0x0000c620
    2138:	0000c638 	.word	0x0000c638
    213c:	200000a4 	.word	0x200000a4
    2140:	200000a8 	.word	0x200000a8
    2144:	200000ac 	.word	0x200000ac
    2148:	200000b8 	.word	0x200000b8
    214c:	200000b0 	.word	0x200000b0
    2150:	00000202 	.word	0x00000202
    2154:	0000c678 	.word	0x0000c678
    2158:	00000209 	.word	0x00000209
    215c:	0000c690 	.word	0x0000c690
    2160:	000017f1 	.word	0x000017f1
    2164:	00000211 	.word	0x00000211
    2168:	0000c6b4 	.word	0x0000c6b4
    216c:	0000c6c8 	.word	0x0000c6c8
    2170:	0000021e 	.word	0x0000021e
    2174:	0000c6e4 	.word	0x0000c6e4
    2178:	0000c708 	.word	0x0000c708
    217c:	00001911 	.word	0x00001911

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    2180:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    2182:	230f      	movs	r3, #15
    2184:	18fb      	adds	r3, r7, r3
    2186:	781b      	ldrb	r3, [r3, #0]
    2188:	b25b      	sxtb	r3, r3
}
    218a:	0018      	movs	r0, r3
    218c:	46bd      	mov	sp, r7
    218e:	b005      	add	sp, #20
    2190:	bd90      	pop	{r4, r7, pc}
    2192:	46c0      	nop			; (mov r8, r8)

00002194 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    2194:	b590      	push	{r4, r7, lr}
    2196:	b083      	sub	sp, #12
    2198:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    219a:	1dfb      	adds	r3, r7, #7
    219c:	2200      	movs	r2, #0
    219e:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    21a0:	e023      	b.n	21ea <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    21a2:	4b18      	ldr	r3, [pc, #96]	; (2204 <hif_handle_isr+0x70>)
    21a4:	781b      	ldrb	r3, [r3, #0]
    21a6:	b2db      	uxtb	r3, r3
    21a8:	3b01      	subs	r3, #1
    21aa:	b2da      	uxtb	r2, r3
    21ac:	4b15      	ldr	r3, [pc, #84]	; (2204 <hif_handle_isr+0x70>)
    21ae:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    21b0:	1dfc      	adds	r4, r7, #7
    21b2:	4b15      	ldr	r3, [pc, #84]	; (2208 <hif_handle_isr+0x74>)
    21b4:	4798      	blx	r3
    21b6:	0003      	movs	r3, r0
    21b8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    21ba:	1dfb      	adds	r3, r7, #7
    21bc:	781b      	ldrb	r3, [r3, #0]
    21be:	b25b      	sxtb	r3, r3
    21c0:	2b00      	cmp	r3, #0
    21c2:	d100      	bne.n	21c6 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    21c4:	e011      	b.n	21ea <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    21c6:	4a11      	ldr	r2, [pc, #68]	; (220c <hif_handle_isr+0x78>)
    21c8:	4911      	ldr	r1, [pc, #68]	; (2210 <hif_handle_isr+0x7c>)
    21ca:	4b12      	ldr	r3, [pc, #72]	; (2214 <hif_handle_isr+0x80>)
    21cc:	0018      	movs	r0, r3
    21ce:	4b12      	ldr	r3, [pc, #72]	; (2218 <hif_handle_isr+0x84>)
    21d0:	4798      	blx	r3
    21d2:	1dfb      	adds	r3, r7, #7
    21d4:	2200      	movs	r2, #0
    21d6:	569a      	ldrsb	r2, [r3, r2]
    21d8:	4b10      	ldr	r3, [pc, #64]	; (221c <hif_handle_isr+0x88>)
    21da:	0011      	movs	r1, r2
    21dc:	0018      	movs	r0, r3
    21de:	4b0e      	ldr	r3, [pc, #56]	; (2218 <hif_handle_isr+0x84>)
    21e0:	4798      	blx	r3
    21e2:	200d      	movs	r0, #13
    21e4:	4b0e      	ldr	r3, [pc, #56]	; (2220 <hif_handle_isr+0x8c>)
    21e6:	4798      	blx	r3
			}
		}
    21e8:	e7e2      	b.n	21b0 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    21ea:	4b06      	ldr	r3, [pc, #24]	; (2204 <hif_handle_isr+0x70>)
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	b2db      	uxtb	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d1d6      	bne.n	21a2 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    21f4:	1dfb      	adds	r3, r7, #7
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	b25b      	sxtb	r3, r3
}
    21fa:	0018      	movs	r0, r3
    21fc:	46bd      	mov	sp, r7
    21fe:	b003      	add	sp, #12
    2200:	bd90      	pop	{r4, r7, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	200000a3 	.word	0x200000a3
    2208:	00001d81 	.word	0x00001d81
    220c:	00000243 	.word	0x00000243
    2210:	0000c840 	.word	0x0000c840
    2214:	0000c5cc 	.word	0x0000c5cc
    2218:	0000b081 	.word	0x0000b081
    221c:	0000c728 	.word	0x0000c728
    2220:	0000b0b5 	.word	0x0000b0b5

00002224 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    2224:	b590      	push	{r4, r7, lr}
    2226:	b089      	sub	sp, #36	; 0x24
    2228:	af00      	add	r7, sp, #0
    222a:	60f8      	str	r0, [r7, #12]
    222c:	60b9      	str	r1, [r7, #8]
    222e:	0019      	movs	r1, r3
    2230:	1dbb      	adds	r3, r7, #6
    2232:	801a      	strh	r2, [r3, #0]
    2234:	1d7b      	adds	r3, r7, #5
    2236:	1c0a      	adds	r2, r1, #0
    2238:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    223a:	231f      	movs	r3, #31
    223c:	18fb      	adds	r3, r7, r3
    223e:	2200      	movs	r2, #0
    2240:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    2242:	68fb      	ldr	r3, [r7, #12]
    2244:	2b00      	cmp	r3, #0
    2246:	d006      	beq.n	2256 <hif_receive+0x32>
    2248:	68bb      	ldr	r3, [r7, #8]
    224a:	2b00      	cmp	r3, #0
    224c:	d003      	beq.n	2256 <hif_receive+0x32>
    224e:	1dbb      	adds	r3, r7, #6
    2250:	881b      	ldrh	r3, [r3, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d11f      	bne.n	2296 <hif_receive+0x72>
	{
		if(isDone)
    2256:	1d7b      	adds	r3, r7, #5
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	2b00      	cmp	r3, #0
    225c:	d009      	beq.n	2272 <hif_receive+0x4e>
		{
			gu8HifSizeDone = 1;
    225e:	4b5f      	ldr	r3, [pc, #380]	; (23dc <hif_receive+0x1b8>)
    2260:	2201      	movs	r2, #1
    2262:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    2264:	231f      	movs	r3, #31
    2266:	18fc      	adds	r4, r7, r3
    2268:	4b5d      	ldr	r3, [pc, #372]	; (23e0 <hif_receive+0x1bc>)
    226a:	4798      	blx	r3
    226c:	0003      	movs	r3, r0
    226e:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    2270:	e0ac      	b.n	23cc <hif_receive+0x1a8>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    2272:	231f      	movs	r3, #31
    2274:	18fb      	adds	r3, r7, r3
    2276:	22f4      	movs	r2, #244	; 0xf4
    2278:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    227a:	4a5a      	ldr	r2, [pc, #360]	; (23e4 <hif_receive+0x1c0>)
    227c:	495a      	ldr	r1, [pc, #360]	; (23e8 <hif_receive+0x1c4>)
    227e:	4b5b      	ldr	r3, [pc, #364]	; (23ec <hif_receive+0x1c8>)
    2280:	0018      	movs	r0, r3
    2282:	4b5b      	ldr	r3, [pc, #364]	; (23f0 <hif_receive+0x1cc>)
    2284:	4798      	blx	r3
    2286:	4b5b      	ldr	r3, [pc, #364]	; (23f4 <hif_receive+0x1d0>)
    2288:	0018      	movs	r0, r3
    228a:	4b5b      	ldr	r3, [pc, #364]	; (23f8 <hif_receive+0x1d4>)
    228c:	4798      	blx	r3
    228e:	200d      	movs	r0, #13
    2290:	4b5a      	ldr	r3, [pc, #360]	; (23fc <hif_receive+0x1d8>)
    2292:	4798      	blx	r3
		}
		goto ERR1;
    2294:	e09a      	b.n	23cc <hif_receive+0x1a8>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    2296:	231f      	movs	r3, #31
    2298:	18fc      	adds	r4, r7, r3
    229a:	2314      	movs	r3, #20
    229c:	18fb      	adds	r3, r7, r3
    229e:	4a58      	ldr	r2, [pc, #352]	; (2400 <hif_receive+0x1dc>)
    22a0:	0019      	movs	r1, r3
    22a2:	0010      	movs	r0, r2
    22a4:	4b57      	ldr	r3, [pc, #348]	; (2404 <hif_receive+0x1e0>)
    22a6:	4798      	blx	r3
    22a8:	0003      	movs	r3, r0
    22aa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    22ac:	231f      	movs	r3, #31
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	781b      	ldrb	r3, [r3, #0]
    22b2:	b25b      	sxtb	r3, r3
    22b4:	2b00      	cmp	r3, #0
    22b6:	d000      	beq.n	22ba <hif_receive+0x96>
    22b8:	e083      	b.n	23c2 <hif_receive+0x19e>


	size = (uint16)((reg >> 2) & 0xfff);
    22ba:	697b      	ldr	r3, [r7, #20]
    22bc:	089b      	lsrs	r3, r3, #2
    22be:	b29a      	uxth	r2, r3
    22c0:	231c      	movs	r3, #28
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	0512      	lsls	r2, r2, #20
    22c6:	0d12      	lsrs	r2, r2, #20
    22c8:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    22ca:	231f      	movs	r3, #31
    22cc:	18fc      	adds	r4, r7, r3
    22ce:	2318      	movs	r3, #24
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	4a4d      	ldr	r2, [pc, #308]	; (2408 <hif_receive+0x1e4>)
    22d4:	0019      	movs	r1, r3
    22d6:	0010      	movs	r0, r2
    22d8:	4b4a      	ldr	r3, [pc, #296]	; (2404 <hif_receive+0x1e0>)
    22da:	4798      	blx	r3
    22dc:	0003      	movs	r3, r0
    22de:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    22e0:	231f      	movs	r3, #31
    22e2:	18fb      	adds	r3, r7, r3
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	b25b      	sxtb	r3, r3
    22e8:	2b00      	cmp	r3, #0
    22ea:	d000      	beq.n	22ee <hif_receive+0xca>
    22ec:	e06b      	b.n	23c6 <hif_receive+0x1a2>


	if(u16Sz > size)
    22ee:	1dba      	adds	r2, r7, #6
    22f0:	231c      	movs	r3, #28
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	8812      	ldrh	r2, [r2, #0]
    22f6:	881b      	ldrh	r3, [r3, #0]
    22f8:	429a      	cmp	r2, r3
    22fa:	d916      	bls.n	232a <hif_receive+0x106>
	{
		ret = M2M_ERR_FAIL;
    22fc:	231f      	movs	r3, #31
    22fe:	18fb      	adds	r3, r7, r3
    2300:	22f4      	movs	r2, #244	; 0xf4
    2302:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    2304:	4a41      	ldr	r2, [pc, #260]	; (240c <hif_receive+0x1e8>)
    2306:	4938      	ldr	r1, [pc, #224]	; (23e8 <hif_receive+0x1c4>)
    2308:	4b38      	ldr	r3, [pc, #224]	; (23ec <hif_receive+0x1c8>)
    230a:	0018      	movs	r0, r3
    230c:	4b38      	ldr	r3, [pc, #224]	; (23f0 <hif_receive+0x1cc>)
    230e:	4798      	blx	r3
    2310:	1dbb      	adds	r3, r7, #6
    2312:	8819      	ldrh	r1, [r3, #0]
    2314:	231c      	movs	r3, #28
    2316:	18fb      	adds	r3, r7, r3
    2318:	881a      	ldrh	r2, [r3, #0]
    231a:	4b3d      	ldr	r3, [pc, #244]	; (2410 <hif_receive+0x1ec>)
    231c:	0018      	movs	r0, r3
    231e:	4b34      	ldr	r3, [pc, #208]	; (23f0 <hif_receive+0x1cc>)
    2320:	4798      	blx	r3
    2322:	200d      	movs	r0, #13
    2324:	4b35      	ldr	r3, [pc, #212]	; (23fc <hif_receive+0x1d8>)
    2326:	4798      	blx	r3
		goto ERR1;
    2328:	e050      	b.n	23cc <hif_receive+0x1a8>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    232a:	69bb      	ldr	r3, [r7, #24]
    232c:	68fa      	ldr	r2, [r7, #12]
    232e:	429a      	cmp	r2, r3
    2330:	d30a      	bcc.n	2348 <hif_receive+0x124>
    2332:	1dbb      	adds	r3, r7, #6
    2334:	881a      	ldrh	r2, [r3, #0]
    2336:	68fb      	ldr	r3, [r7, #12]
    2338:	18d2      	adds	r2, r2, r3
    233a:	231c      	movs	r3, #28
    233c:	18fb      	adds	r3, r7, r3
    233e:	8819      	ldrh	r1, [r3, #0]
    2340:	69bb      	ldr	r3, [r7, #24]
    2342:	18cb      	adds	r3, r1, r3
    2344:	429a      	cmp	r2, r3
    2346:	d912      	bls.n	236e <hif_receive+0x14a>
	{
		ret = M2M_ERR_FAIL;
    2348:	231f      	movs	r3, #31
    234a:	18fb      	adds	r3, r7, r3
    234c:	22f4      	movs	r2, #244	; 0xf4
    234e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    2350:	23a0      	movs	r3, #160	; 0xa0
    2352:	009a      	lsls	r2, r3, #2
    2354:	4924      	ldr	r1, [pc, #144]	; (23e8 <hif_receive+0x1c4>)
    2356:	4b25      	ldr	r3, [pc, #148]	; (23ec <hif_receive+0x1c8>)
    2358:	0018      	movs	r0, r3
    235a:	4b25      	ldr	r3, [pc, #148]	; (23f0 <hif_receive+0x1cc>)
    235c:	4798      	blx	r3
    235e:	4b2d      	ldr	r3, [pc, #180]	; (2414 <hif_receive+0x1f0>)
    2360:	0018      	movs	r0, r3
    2362:	4b25      	ldr	r3, [pc, #148]	; (23f8 <hif_receive+0x1d4>)
    2364:	4798      	blx	r3
    2366:	200d      	movs	r0, #13
    2368:	4b24      	ldr	r3, [pc, #144]	; (23fc <hif_receive+0x1d8>)
    236a:	4798      	blx	r3
		goto ERR1;
    236c:	e02e      	b.n	23cc <hif_receive+0x1a8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    236e:	1dbb      	adds	r3, r7, #6
    2370:	881a      	ldrh	r2, [r3, #0]
    2372:	231f      	movs	r3, #31
    2374:	18fc      	adds	r4, r7, r3
    2376:	68b9      	ldr	r1, [r7, #8]
    2378:	68fb      	ldr	r3, [r7, #12]
    237a:	0018      	movs	r0, r3
    237c:	4b26      	ldr	r3, [pc, #152]	; (2418 <hif_receive+0x1f4>)
    237e:	4798      	blx	r3
    2380:	0003      	movs	r3, r0
    2382:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2384:	231f      	movs	r3, #31
    2386:	18fb      	adds	r3, r7, r3
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	b25b      	sxtb	r3, r3
    238c:	2b00      	cmp	r3, #0
    238e:	d11c      	bne.n	23ca <hif_receive+0x1a6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    2390:	231c      	movs	r3, #28
    2392:	18fb      	adds	r3, r7, r3
    2394:	881a      	ldrh	r2, [r3, #0]
    2396:	69bb      	ldr	r3, [r7, #24]
    2398:	18d2      	adds	r2, r2, r3
    239a:	1dbb      	adds	r3, r7, #6
    239c:	8819      	ldrh	r1, [r3, #0]
    239e:	68fb      	ldr	r3, [r7, #12]
    23a0:	18cb      	adds	r3, r1, r3
    23a2:	429a      	cmp	r2, r3
    23a4:	d003      	beq.n	23ae <hif_receive+0x18a>
    23a6:	1d7b      	adds	r3, r7, #5
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d00e      	beq.n	23cc <hif_receive+0x1a8>
	{
		gu8HifSizeDone = 1;
    23ae:	4b0b      	ldr	r3, [pc, #44]	; (23dc <hif_receive+0x1b8>)
    23b0:	2201      	movs	r2, #1
    23b2:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    23b4:	231f      	movs	r3, #31
    23b6:	18fc      	adds	r4, r7, r3
    23b8:	4b09      	ldr	r3, [pc, #36]	; (23e0 <hif_receive+0x1bc>)
    23ba:	4798      	blx	r3
    23bc:	0003      	movs	r3, r0
    23be:	7023      	strb	r3, [r4, #0]
    23c0:	e004      	b.n	23cc <hif_receive+0x1a8>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	e002      	b.n	23cc <hif_receive+0x1a8>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	e000      	b.n	23cc <hif_receive+0x1a8>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    23ca:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    23cc:	231f      	movs	r3, #31
    23ce:	18fb      	adds	r3, r7, r3
    23d0:	781b      	ldrb	r3, [r3, #0]
    23d2:	b25b      	sxtb	r3, r3
}
    23d4:	0018      	movs	r0, r3
    23d6:	46bd      	mov	sp, r7
    23d8:	b009      	add	sp, #36	; 0x24
    23da:	bd90      	pop	{r4, r7, pc}
    23dc:	200000a2 	.word	0x200000a2
    23e0:	000017f1 	.word	0x000017f1
    23e4:	00000269 	.word	0x00000269
    23e8:	0000c850 	.word	0x0000c850
    23ec:	0000c5cc 	.word	0x0000c5cc
    23f0:	0000b081 	.word	0x0000b081
    23f4:	0000c758 	.word	0x0000c758
    23f8:	0000b1a1 	.word	0x0000b1a1
    23fc:	0000b0b5 	.word	0x0000b0b5
    2400:	00001070 	.word	0x00001070
    2404:	000036dd 	.word	0x000036dd
    2408:	00001084 	.word	0x00001084
    240c:	0000027a 	.word	0x0000027a
    2410:	0000c778 	.word	0x0000c778
    2414:	0000c7bc 	.word	0x0000c7bc
    2418:	00003751 	.word	0x00003751

0000241c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    241c:	b580      	push	{r7, lr}
    241e:	b084      	sub	sp, #16
    2420:	af00      	add	r7, sp, #0
    2422:	0002      	movs	r2, r0
    2424:	6039      	str	r1, [r7, #0]
    2426:	1dfb      	adds	r3, r7, #7
    2428:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    242a:	230f      	movs	r3, #15
    242c:	18fb      	adds	r3, r7, r3
    242e:	2200      	movs	r2, #0
    2430:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    2432:	1dfb      	adds	r3, r7, #7
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	2b07      	cmp	r3, #7
    2438:	d81c      	bhi.n	2474 <hif_register_cb+0x58>
    243a:	009a      	lsls	r2, r3, #2
    243c:	4b1c      	ldr	r3, [pc, #112]	; (24b0 <hif_register_cb+0x94>)
    243e:	18d3      	adds	r3, r2, r3
    2440:	681b      	ldr	r3, [r3, #0]
    2442:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    2444:	4b1b      	ldr	r3, [pc, #108]	; (24b4 <hif_register_cb+0x98>)
    2446:	683a      	ldr	r2, [r7, #0]
    2448:	601a      	str	r2, [r3, #0]
			break;
    244a:	e028      	b.n	249e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    244c:	4b1a      	ldr	r3, [pc, #104]	; (24b8 <hif_register_cb+0x9c>)
    244e:	683a      	ldr	r2, [r7, #0]
    2450:	601a      	str	r2, [r3, #0]
			break;
    2452:	e024      	b.n	249e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    2454:	4b19      	ldr	r3, [pc, #100]	; (24bc <hif_register_cb+0xa0>)
    2456:	683a      	ldr	r2, [r7, #0]
    2458:	601a      	str	r2, [r3, #0]
			break;
    245a:	e020      	b.n	249e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    245c:	4b18      	ldr	r3, [pc, #96]	; (24c0 <hif_register_cb+0xa4>)
    245e:	683a      	ldr	r2, [r7, #0]
    2460:	601a      	str	r2, [r3, #0]
			break;
    2462:	e01c      	b.n	249e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    2464:	4b17      	ldr	r3, [pc, #92]	; (24c4 <hif_register_cb+0xa8>)
    2466:	683a      	ldr	r2, [r7, #0]
    2468:	601a      	str	r2, [r3, #0]
			break;
    246a:	e018      	b.n	249e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    246c:	4b16      	ldr	r3, [pc, #88]	; (24c8 <hif_register_cb+0xac>)
    246e:	683a      	ldr	r2, [r7, #0]
    2470:	601a      	str	r2, [r3, #0]
			break;
    2472:	e014      	b.n	249e <hif_register_cb+0x82>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    2474:	4a15      	ldr	r2, [pc, #84]	; (24cc <hif_register_cb+0xb0>)
    2476:	4916      	ldr	r1, [pc, #88]	; (24d0 <hif_register_cb+0xb4>)
    2478:	4b16      	ldr	r3, [pc, #88]	; (24d4 <hif_register_cb+0xb8>)
    247a:	0018      	movs	r0, r3
    247c:	4b16      	ldr	r3, [pc, #88]	; (24d8 <hif_register_cb+0xbc>)
    247e:	4798      	blx	r3
    2480:	1dfb      	adds	r3, r7, #7
    2482:	781a      	ldrb	r2, [r3, #0]
    2484:	4b15      	ldr	r3, [pc, #84]	; (24dc <hif_register_cb+0xc0>)
    2486:	0011      	movs	r1, r2
    2488:	0018      	movs	r0, r3
    248a:	4b13      	ldr	r3, [pc, #76]	; (24d8 <hif_register_cb+0xbc>)
    248c:	4798      	blx	r3
    248e:	200d      	movs	r0, #13
    2490:	4b13      	ldr	r3, [pc, #76]	; (24e0 <hif_register_cb+0xc4>)
    2492:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2494:	230f      	movs	r3, #15
    2496:	18fb      	adds	r3, r7, r3
    2498:	22f4      	movs	r2, #244	; 0xf4
    249a:	701a      	strb	r2, [r3, #0]
			break;
    249c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    249e:	230f      	movs	r3, #15
    24a0:	18fb      	adds	r3, r7, r3
    24a2:	781b      	ldrb	r3, [r3, #0]
    24a4:	b25b      	sxtb	r3, r3
}
    24a6:	0018      	movs	r0, r3
    24a8:	46bd      	mov	sp, r7
    24aa:	b004      	add	sp, #16
    24ac:	bd80      	pop	{r7, pc}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	0000c80c 	.word	0x0000c80c
    24b4:	200000a8 	.word	0x200000a8
    24b8:	200000a4 	.word	0x200000a4
    24bc:	200000ac 	.word	0x200000ac
    24c0:	200000b4 	.word	0x200000b4
    24c4:	200000b8 	.word	0x200000b8
    24c8:	200000b0 	.word	0x200000b0
    24cc:	000002b9 	.word	0x000002b9
    24d0:	0000c85c 	.word	0x0000c85c
    24d4:	0000c5cc 	.word	0x0000c5cc
    24d8:	0000b081 	.word	0x0000b081
    24dc:	0000c800 	.word	0x0000c800
    24e0:	0000b0b5 	.word	0x0000b0b5

000024e4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    24e4:	b590      	push	{r4, r7, lr}
    24e6:	b0ad      	sub	sp, #180	; 0xb4
    24e8:	af02      	add	r7, sp, #8
    24ea:	603a      	str	r2, [r7, #0]
    24ec:	1dfb      	adds	r3, r7, #7
    24ee:	1c02      	adds	r2, r0, #0
    24f0:	701a      	strb	r2, [r3, #0]
    24f2:	1d3b      	adds	r3, r7, #4
    24f4:	1c0a      	adds	r2, r1, #0
    24f6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    24f8:	1dfb      	adds	r3, r7, #7
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	2b2c      	cmp	r3, #44	; 0x2c
    24fe:	d116      	bne.n	252e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    2500:	239c      	movs	r3, #156	; 0x9c
    2502:	18f9      	adds	r1, r7, r3
    2504:	6838      	ldr	r0, [r7, #0]
    2506:	2300      	movs	r3, #0
    2508:	2204      	movs	r2, #4
    250a:	4ccc      	ldr	r4, [pc, #816]	; (283c <m2m_wifi_cb+0x358>)
    250c:	47a0      	blx	r4
    250e:	1e03      	subs	r3, r0, #0
    2510:	d000      	beq.n	2514 <m2m_wifi_cb+0x30>
    2512:	e1b6      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    2514:	4bca      	ldr	r3, [pc, #808]	; (2840 <m2m_wifi_cb+0x35c>)
    2516:	681b      	ldr	r3, [r3, #0]
    2518:	2b00      	cmp	r3, #0
    251a:	d100      	bne.n	251e <m2m_wifi_cb+0x3a>
    251c:	e1b1      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    251e:	4bc8      	ldr	r3, [pc, #800]	; (2840 <m2m_wifi_cb+0x35c>)
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	229c      	movs	r2, #156	; 0x9c
    2524:	18ba      	adds	r2, r7, r2
    2526:	0011      	movs	r1, r2
    2528:	202c      	movs	r0, #44	; 0x2c
    252a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    252c:	e1a9      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    252e:	1dfb      	adds	r3, r7, #7
    2530:	781b      	ldrb	r3, [r3, #0]
    2532:	2b1b      	cmp	r3, #27
    2534:	d116      	bne.n	2564 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    2536:	2394      	movs	r3, #148	; 0x94
    2538:	18f9      	adds	r1, r7, r3
    253a:	6838      	ldr	r0, [r7, #0]
    253c:	2300      	movs	r3, #0
    253e:	2208      	movs	r2, #8
    2540:	4cbe      	ldr	r4, [pc, #760]	; (283c <m2m_wifi_cb+0x358>)
    2542:	47a0      	blx	r4
    2544:	1e03      	subs	r3, r0, #0
    2546:	d000      	beq.n	254a <m2m_wifi_cb+0x66>
    2548:	e19b      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    254a:	4bbd      	ldr	r3, [pc, #756]	; (2840 <m2m_wifi_cb+0x35c>)
    254c:	681b      	ldr	r3, [r3, #0]
    254e:	2b00      	cmp	r3, #0
    2550:	d100      	bne.n	2554 <m2m_wifi_cb+0x70>
    2552:	e196      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    2554:	4bba      	ldr	r3, [pc, #744]	; (2840 <m2m_wifi_cb+0x35c>)
    2556:	681b      	ldr	r3, [r3, #0]
    2558:	2294      	movs	r2, #148	; 0x94
    255a:	18ba      	adds	r2, r7, r2
    255c:	0011      	movs	r1, r2
    255e:	201b      	movs	r0, #27
    2560:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    2562:	e18e      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    2564:	1dfb      	adds	r3, r7, #7
    2566:	781b      	ldrb	r3, [r3, #0]
    2568:	2b06      	cmp	r3, #6
    256a:	d116      	bne.n	259a <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    256c:	230c      	movs	r3, #12
    256e:	18f9      	adds	r1, r7, r3
    2570:	6838      	ldr	r0, [r7, #0]
    2572:	2301      	movs	r3, #1
    2574:	2230      	movs	r2, #48	; 0x30
    2576:	4cb1      	ldr	r4, [pc, #708]	; (283c <m2m_wifi_cb+0x358>)
    2578:	47a0      	blx	r4
    257a:	1e03      	subs	r3, r0, #0
    257c:	d000      	beq.n	2580 <m2m_wifi_cb+0x9c>
    257e:	e180      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    2580:	4baf      	ldr	r3, [pc, #700]	; (2840 <m2m_wifi_cb+0x35c>)
    2582:	681b      	ldr	r3, [r3, #0]
    2584:	2b00      	cmp	r3, #0
    2586:	d100      	bne.n	258a <m2m_wifi_cb+0xa6>
    2588:	e17b      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    258a:	4bad      	ldr	r3, [pc, #692]	; (2840 <m2m_wifi_cb+0x35c>)
    258c:	681b      	ldr	r3, [r3, #0]
    258e:	220c      	movs	r2, #12
    2590:	18ba      	adds	r2, r7, r2
    2592:	0011      	movs	r1, r2
    2594:	2006      	movs	r0, #6
    2596:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    2598:	e173      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    259a:	1dfb      	adds	r3, r7, #7
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b0e      	cmp	r3, #14
    25a0:	d100      	bne.n	25a4 <m2m_wifi_cb+0xc0>
    25a2:	e16e      	b.n	2882 <m2m_wifi_cb+0x39e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    25a4:	1dfb      	adds	r3, r7, #7
    25a6:	781b      	ldrb	r3, [r3, #0]
    25a8:	2b32      	cmp	r3, #50	; 0x32
    25aa:	d116      	bne.n	25da <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    25ac:	2384      	movs	r3, #132	; 0x84
    25ae:	18f9      	adds	r1, r7, r3
    25b0:	6838      	ldr	r0, [r7, #0]
    25b2:	2300      	movs	r3, #0
    25b4:	2210      	movs	r2, #16
    25b6:	4ca1      	ldr	r4, [pc, #644]	; (283c <m2m_wifi_cb+0x358>)
    25b8:	47a0      	blx	r4
    25ba:	1e03      	subs	r3, r0, #0
    25bc:	d000      	beq.n	25c0 <m2m_wifi_cb+0xdc>
    25be:	e160      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    25c0:	4b9f      	ldr	r3, [pc, #636]	; (2840 <m2m_wifi_cb+0x35c>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d100      	bne.n	25ca <m2m_wifi_cb+0xe6>
    25c8:	e15b      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    25ca:	4b9d      	ldr	r3, [pc, #628]	; (2840 <m2m_wifi_cb+0x35c>)
    25cc:	681b      	ldr	r3, [r3, #0]
    25ce:	2284      	movs	r2, #132	; 0x84
    25d0:	18ba      	adds	r2, r7, r2
    25d2:	0011      	movs	r1, r2
    25d4:	2032      	movs	r0, #50	; 0x32
    25d6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    25d8:	e153      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    25da:	1dfb      	adds	r3, r7, #7
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	2b2f      	cmp	r3, #47	; 0x2f
    25e0:	d11d      	bne.n	261e <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    25e2:	230c      	movs	r3, #12
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	2264      	movs	r2, #100	; 0x64
    25e8:	2100      	movs	r1, #0
    25ea:	0018      	movs	r0, r3
    25ec:	4b95      	ldr	r3, [pc, #596]	; (2844 <m2m_wifi_cb+0x360>)
    25ee:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    25f0:	230c      	movs	r3, #12
    25f2:	18f9      	adds	r1, r7, r3
    25f4:	6838      	ldr	r0, [r7, #0]
    25f6:	2300      	movs	r3, #0
    25f8:	2264      	movs	r2, #100	; 0x64
    25fa:	4c90      	ldr	r4, [pc, #576]	; (283c <m2m_wifi_cb+0x358>)
    25fc:	47a0      	blx	r4
    25fe:	1e03      	subs	r3, r0, #0
    2600:	d000      	beq.n	2604 <m2m_wifi_cb+0x120>
    2602:	e13e      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    2604:	4b8e      	ldr	r3, [pc, #568]	; (2840 <m2m_wifi_cb+0x35c>)
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	2b00      	cmp	r3, #0
    260a:	d100      	bne.n	260e <m2m_wifi_cb+0x12a>
    260c:	e139      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    260e:	4b8c      	ldr	r3, [pc, #560]	; (2840 <m2m_wifi_cb+0x35c>)
    2610:	681b      	ldr	r3, [r3, #0]
    2612:	220c      	movs	r2, #12
    2614:	18ba      	adds	r2, r7, r2
    2616:	0011      	movs	r1, r2
    2618:	202f      	movs	r0, #47	; 0x2f
    261a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    261c:	e131      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    261e:	1dfb      	adds	r3, r7, #7
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	2b34      	cmp	r3, #52	; 0x34
    2624:	d13a      	bne.n	269c <m2m_wifi_cb+0x1b8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    2626:	2380      	movs	r3, #128	; 0x80
    2628:	18f9      	adds	r1, r7, r3
    262a:	6838      	ldr	r0, [r7, #0]
    262c:	2300      	movs	r3, #0
    262e:	2204      	movs	r2, #4
    2630:	4c82      	ldr	r4, [pc, #520]	; (283c <m2m_wifi_cb+0x358>)
    2632:	47a0      	blx	r4
    2634:	1e03      	subs	r3, r0, #0
    2636:	d000      	beq.n	263a <m2m_wifi_cb+0x156>
    2638:	e123      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    263a:	4b83      	ldr	r3, [pc, #524]	; (2848 <m2m_wifi_cb+0x364>)
    263c:	0018      	movs	r0, r3
    263e:	4b83      	ldr	r3, [pc, #524]	; (284c <m2m_wifi_cb+0x368>)
    2640:	4798      	blx	r3
    2642:	2380      	movs	r3, #128	; 0x80
    2644:	18fb      	adds	r3, r7, r3
    2646:	681b      	ldr	r3, [r3, #0]
    2648:	001a      	movs	r2, r3
    264a:	23ff      	movs	r3, #255	; 0xff
    264c:	401a      	ands	r2, r3
    264e:	0011      	movs	r1, r2
    2650:	2380      	movs	r3, #128	; 0x80
    2652:	18fb      	adds	r3, r7, r3
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	0a1b      	lsrs	r3, r3, #8
    2658:	001a      	movs	r2, r3
    265a:	23ff      	movs	r3, #255	; 0xff
    265c:	401a      	ands	r2, r3
    265e:	2380      	movs	r3, #128	; 0x80
    2660:	18fb      	adds	r3, r7, r3
    2662:	681b      	ldr	r3, [r3, #0]
    2664:	0c1b      	lsrs	r3, r3, #16
    2666:	0018      	movs	r0, r3
    2668:	23ff      	movs	r3, #255	; 0xff
    266a:	4018      	ands	r0, r3
    266c:	0004      	movs	r4, r0
    266e:	2380      	movs	r3, #128	; 0x80
    2670:	18fb      	adds	r3, r7, r3
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	0e1b      	lsrs	r3, r3, #24
    2676:	4876      	ldr	r0, [pc, #472]	; (2850 <m2m_wifi_cb+0x36c>)
    2678:	9300      	str	r3, [sp, #0]
    267a:	0023      	movs	r3, r4
    267c:	4c73      	ldr	r4, [pc, #460]	; (284c <m2m_wifi_cb+0x368>)
    267e:	47a0      	blx	r4
    2680:	200d      	movs	r0, #13
    2682:	4b74      	ldr	r3, [pc, #464]	; (2854 <m2m_wifi_cb+0x370>)
    2684:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    2686:	4b6e      	ldr	r3, [pc, #440]	; (2840 <m2m_wifi_cb+0x35c>)
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	2b00      	cmp	r3, #0
    268c:	d100      	bne.n	2690 <m2m_wifi_cb+0x1ac>
    268e:	e0f8      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    2690:	4b6b      	ldr	r3, [pc, #428]	; (2840 <m2m_wifi_cb+0x35c>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	2100      	movs	r1, #0
    2696:	2034      	movs	r0, #52	; 0x34
    2698:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    269a:	e0f2      	b.n	2882 <m2m_wifi_cb+0x39e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    269c:	1dfb      	adds	r3, r7, #7
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	2b11      	cmp	r3, #17
    26a2:	d11e      	bne.n	26e2 <m2m_wifi_cb+0x1fe>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    26a4:	4b6c      	ldr	r3, [pc, #432]	; (2858 <m2m_wifi_cb+0x374>)
    26a6:	2200      	movs	r2, #0
    26a8:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    26aa:	237c      	movs	r3, #124	; 0x7c
    26ac:	18f9      	adds	r1, r7, r3
    26ae:	6838      	ldr	r0, [r7, #0]
    26b0:	2300      	movs	r3, #0
    26b2:	2204      	movs	r2, #4
    26b4:	4c61      	ldr	r4, [pc, #388]	; (283c <m2m_wifi_cb+0x358>)
    26b6:	47a0      	blx	r4
    26b8:	1e03      	subs	r3, r0, #0
    26ba:	d000      	beq.n	26be <m2m_wifi_cb+0x1da>
    26bc:	e0e1      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			gu8ChNum = strState.u8NumofCh;
    26be:	237c      	movs	r3, #124	; 0x7c
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	781a      	ldrb	r2, [r3, #0]
    26c4:	4b65      	ldr	r3, [pc, #404]	; (285c <m2m_wifi_cb+0x378>)
    26c6:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    26c8:	4b5d      	ldr	r3, [pc, #372]	; (2840 <m2m_wifi_cb+0x35c>)
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d100      	bne.n	26d2 <m2m_wifi_cb+0x1ee>
    26d0:	e0d7      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    26d2:	4b5b      	ldr	r3, [pc, #364]	; (2840 <m2m_wifi_cb+0x35c>)
    26d4:	681b      	ldr	r3, [r3, #0]
    26d6:	227c      	movs	r2, #124	; 0x7c
    26d8:	18ba      	adds	r2, r7, r2
    26da:	0011      	movs	r1, r2
    26dc:	2011      	movs	r0, #17
    26de:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    26e0:	e0cf      	b.n	2882 <m2m_wifi_cb+0x39e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    26e2:	1dfb      	adds	r3, r7, #7
    26e4:	781b      	ldrb	r3, [r3, #0]
    26e6:	2b13      	cmp	r3, #19
    26e8:	d116      	bne.n	2718 <m2m_wifi_cb+0x234>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    26ea:	230c      	movs	r3, #12
    26ec:	18f9      	adds	r1, r7, r3
    26ee:	6838      	ldr	r0, [r7, #0]
    26f0:	2300      	movs	r3, #0
    26f2:	222c      	movs	r2, #44	; 0x2c
    26f4:	4c51      	ldr	r4, [pc, #324]	; (283c <m2m_wifi_cb+0x358>)
    26f6:	47a0      	blx	r4
    26f8:	1e03      	subs	r3, r0, #0
    26fa:	d000      	beq.n	26fe <m2m_wifi_cb+0x21a>
    26fc:	e0c1      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    26fe:	4b50      	ldr	r3, [pc, #320]	; (2840 <m2m_wifi_cb+0x35c>)
    2700:	681b      	ldr	r3, [r3, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d100      	bne.n	2708 <m2m_wifi_cb+0x224>
    2706:	e0bc      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    2708:	4b4d      	ldr	r3, [pc, #308]	; (2840 <m2m_wifi_cb+0x35c>)
    270a:	681b      	ldr	r3, [r3, #0]
    270c:	220c      	movs	r2, #12
    270e:	18ba      	adds	r2, r7, r2
    2710:	0011      	movs	r1, r2
    2712:	2013      	movs	r0, #19
    2714:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    2716:	e0b4      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    2718:	1dfb      	adds	r3, r7, #7
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	2b04      	cmp	r3, #4
    271e:	d116      	bne.n	274e <m2m_wifi_cb+0x26a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2720:	23a0      	movs	r3, #160	; 0xa0
    2722:	18f9      	adds	r1, r7, r3
    2724:	6838      	ldr	r0, [r7, #0]
    2726:	2300      	movs	r3, #0
    2728:	2204      	movs	r2, #4
    272a:	4c44      	ldr	r4, [pc, #272]	; (283c <m2m_wifi_cb+0x358>)
    272c:	47a0      	blx	r4
    272e:	1e03      	subs	r3, r0, #0
    2730:	d000      	beq.n	2734 <m2m_wifi_cb+0x250>
    2732:	e0a6      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    2734:	4b42      	ldr	r3, [pc, #264]	; (2840 <m2m_wifi_cb+0x35c>)
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	2b00      	cmp	r3, #0
    273a:	d100      	bne.n	273e <m2m_wifi_cb+0x25a>
    273c:	e0a1      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    273e:	4b40      	ldr	r3, [pc, #256]	; (2840 <m2m_wifi_cb+0x35c>)
    2740:	681b      	ldr	r3, [r3, #0]
    2742:	22a0      	movs	r2, #160	; 0xa0
    2744:	18ba      	adds	r2, r7, r2
    2746:	0011      	movs	r1, r2
    2748:	2004      	movs	r0, #4
    274a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    274c:	e099      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    274e:	1dfb      	adds	r3, r7, #7
    2750:	781b      	ldrb	r3, [r3, #0]
    2752:	2b65      	cmp	r3, #101	; 0x65
    2754:	d116      	bne.n	2784 <m2m_wifi_cb+0x2a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2756:	23a0      	movs	r3, #160	; 0xa0
    2758:	18f9      	adds	r1, r7, r3
    275a:	6838      	ldr	r0, [r7, #0]
    275c:	2300      	movs	r3, #0
    275e:	2204      	movs	r2, #4
    2760:	4c36      	ldr	r4, [pc, #216]	; (283c <m2m_wifi_cb+0x358>)
    2762:	47a0      	blx	r4
    2764:	1e03      	subs	r3, r0, #0
    2766:	d000      	beq.n	276a <m2m_wifi_cb+0x286>
    2768:	e08b      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    276a:	4b35      	ldr	r3, [pc, #212]	; (2840 <m2m_wifi_cb+0x35c>)
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	2b00      	cmp	r3, #0
    2770:	d100      	bne.n	2774 <m2m_wifi_cb+0x290>
    2772:	e086      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2774:	4b32      	ldr	r3, [pc, #200]	; (2840 <m2m_wifi_cb+0x35c>)
    2776:	681b      	ldr	r3, [r3, #0]
    2778:	22a0      	movs	r2, #160	; 0xa0
    277a:	18ba      	adds	r2, r7, r2
    277c:	0011      	movs	r1, r2
    277e:	2065      	movs	r0, #101	; 0x65
    2780:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    2782:	e07e      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    2784:	1dfb      	adds	r3, r7, #7
    2786:	781b      	ldrb	r3, [r3, #0]
    2788:	2b09      	cmp	r3, #9
    278a:	d116      	bne.n	27ba <m2m_wifi_cb+0x2d6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    278c:	230c      	movs	r3, #12
    278e:	18f9      	adds	r1, r7, r3
    2790:	6838      	ldr	r0, [r7, #0]
    2792:	2301      	movs	r3, #1
    2794:	2264      	movs	r2, #100	; 0x64
    2796:	4c29      	ldr	r4, [pc, #164]	; (283c <m2m_wifi_cb+0x358>)
    2798:	47a0      	blx	r4
    279a:	1e03      	subs	r3, r0, #0
    279c:	d000      	beq.n	27a0 <m2m_wifi_cb+0x2bc>
    279e:	e070      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    27a0:	4b27      	ldr	r3, [pc, #156]	; (2840 <m2m_wifi_cb+0x35c>)
    27a2:	681b      	ldr	r3, [r3, #0]
    27a4:	2b00      	cmp	r3, #0
    27a6:	d100      	bne.n	27aa <m2m_wifi_cb+0x2c6>
    27a8:	e06b      	b.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    27aa:	4b25      	ldr	r3, [pc, #148]	; (2840 <m2m_wifi_cb+0x35c>)
    27ac:	681b      	ldr	r3, [r3, #0]
    27ae:	220c      	movs	r2, #12
    27b0:	18ba      	adds	r2, r7, r2
    27b2:	0011      	movs	r1, r2
    27b4:	2009      	movs	r0, #9
    27b6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    27b8:	e063      	b.n	2882 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    27ba:	1dfb      	adds	r3, r7, #7
    27bc:	781b      	ldrb	r3, [r3, #0]
    27be:	2b2a      	cmp	r3, #42	; 0x2a
    27c0:	d114      	bne.n	27ec <m2m_wifi_cb+0x308>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    27c2:	2378      	movs	r3, #120	; 0x78
    27c4:	18f9      	adds	r1, r7, r3
    27c6:	6838      	ldr	r0, [r7, #0]
    27c8:	2301      	movs	r3, #1
    27ca:	2204      	movs	r2, #4
    27cc:	4c1b      	ldr	r4, [pc, #108]	; (283c <m2m_wifi_cb+0x358>)
    27ce:	47a0      	blx	r4
    27d0:	1e03      	subs	r3, r0, #0
    27d2:	d156      	bne.n	2882 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    27d4:	4b1a      	ldr	r3, [pc, #104]	; (2840 <m2m_wifi_cb+0x35c>)
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	2b00      	cmp	r3, #0
    27da:	d052      	beq.n	2882 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    27dc:	4b18      	ldr	r3, [pc, #96]	; (2840 <m2m_wifi_cb+0x35c>)
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	2278      	movs	r2, #120	; 0x78
    27e2:	18ba      	adds	r2, r7, r2
    27e4:	0011      	movs	r1, r2
    27e6:	202a      	movs	r0, #42	; 0x2a
    27e8:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    27ea:	e04a      	b.n	2882 <m2m_wifi_cb+0x39e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    27ec:	1dfb      	adds	r3, r7, #7
    27ee:	781b      	ldrb	r3, [r3, #0]
    27f0:	2b20      	cmp	r3, #32
    27f2:	d135      	bne.n	2860 <m2m_wifi_cb+0x37c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    27f4:	2370      	movs	r3, #112	; 0x70
    27f6:	18f9      	adds	r1, r7, r3
    27f8:	6838      	ldr	r0, [r7, #0]
    27fa:	2300      	movs	r3, #0
    27fc:	2208      	movs	r2, #8
    27fe:	4c0f      	ldr	r4, [pc, #60]	; (283c <m2m_wifi_cb+0x358>)
    2800:	47a0      	blx	r4
    2802:	1e03      	subs	r3, r0, #0
    2804:	d13d      	bne.n	2882 <m2m_wifi_cb+0x39e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2806:	683b      	ldr	r3, [r7, #0]
    2808:	3308      	adds	r3, #8
    280a:	0018      	movs	r0, r3
    280c:	2370      	movs	r3, #112	; 0x70
    280e:	18fb      	adds	r3, r7, r3
    2810:	6819      	ldr	r1, [r3, #0]
    2812:	2370      	movs	r3, #112	; 0x70
    2814:	18fb      	adds	r3, r7, r3
    2816:	889a      	ldrh	r2, [r3, #4]
    2818:	2301      	movs	r3, #1
    281a:	4c08      	ldr	r4, [pc, #32]	; (283c <m2m_wifi_cb+0x358>)
    281c:	47a0      	blx	r4
    281e:	1e03      	subs	r3, r0, #0
    2820:	d12f      	bne.n	2882 <m2m_wifi_cb+0x39e>
			{
				if(gpfAppWifiCb)
    2822:	4b07      	ldr	r3, [pc, #28]	; (2840 <m2m_wifi_cb+0x35c>)
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	2b00      	cmp	r3, #0
    2828:	d02b      	beq.n	2882 <m2m_wifi_cb+0x39e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    282a:	4b05      	ldr	r3, [pc, #20]	; (2840 <m2m_wifi_cb+0x35c>)
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	2270      	movs	r2, #112	; 0x70
    2830:	18ba      	adds	r2, r7, r2
    2832:	0011      	movs	r1, r2
    2834:	2020      	movs	r0, #32
    2836:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    2838:	e023      	b.n	2882 <m2m_wifi_cb+0x39e>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	00002225 	.word	0x00002225
    2840:	200000c0 	.word	0x200000c0
    2844:	00001611 	.word	0x00001611
    2848:	0000c86c 	.word	0x0000c86c
    284c:	0000b081 	.word	0x0000b081
    2850:	0000c878 	.word	0x0000c878
    2854:	0000b0b5 	.word	0x0000b0b5
    2858:	200000bd 	.word	0x200000bd
    285c:	200000bc 	.word	0x200000bc
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    2860:	2392      	movs	r3, #146	; 0x92
    2862:	005a      	lsls	r2, r3, #1
    2864:	4909      	ldr	r1, [pc, #36]	; (288c <m2m_wifi_cb+0x3a8>)
    2866:	4b0a      	ldr	r3, [pc, #40]	; (2890 <m2m_wifi_cb+0x3ac>)
    2868:	0018      	movs	r0, r3
    286a:	4b0a      	ldr	r3, [pc, #40]	; (2894 <m2m_wifi_cb+0x3b0>)
    286c:	4798      	blx	r3
    286e:	1dfb      	adds	r3, r7, #7
    2870:	781a      	ldrb	r2, [r3, #0]
    2872:	4b09      	ldr	r3, [pc, #36]	; (2898 <m2m_wifi_cb+0x3b4>)
    2874:	0011      	movs	r1, r2
    2876:	0018      	movs	r0, r3
    2878:	4b06      	ldr	r3, [pc, #24]	; (2894 <m2m_wifi_cb+0x3b0>)
    287a:	4798      	blx	r3
    287c:	200d      	movs	r0, #13
    287e:	4b07      	ldr	r3, [pc, #28]	; (289c <m2m_wifi_cb+0x3b8>)
    2880:	4798      	blx	r3
	}
}
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	46bd      	mov	sp, r7
    2886:	b02b      	add	sp, #172	; 0xac
    2888:	bd90      	pop	{r4, r7, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	0000cb90 	.word	0x0000cb90
    2890:	0000c898 	.word	0x0000c898
    2894:	0000b081 	.word	0x0000b081
    2898:	0000c8ac 	.word	0x0000c8ac
    289c:	0000b0b5 	.word	0x0000b0b5

000028a0 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    28a0:	b590      	push	{r4, r7, lr}
    28a2:	b08d      	sub	sp, #52	; 0x34
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    28a8:	232f      	movs	r3, #47	; 0x2f
    28aa:	18fb      	adds	r3, r7, r3
    28ac:	2200      	movs	r2, #0
    28ae:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    28b0:	230b      	movs	r3, #11
    28b2:	18fb      	adds	r3, r7, r3
    28b4:	2201      	movs	r2, #1
    28b6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	2b00      	cmp	r3, #0
    28bc:	d104      	bne.n	28c8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    28be:	232f      	movs	r3, #47	; 0x2f
    28c0:	18fb      	adds	r3, r7, r3
    28c2:	22f4      	movs	r2, #244	; 0xf4
    28c4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    28c6:	e085      	b.n	29d4 <m2m_wifi_init+0x134>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	681a      	ldr	r2, [r3, #0]
    28cc:	4b45      	ldr	r3, [pc, #276]	; (29e4 <m2m_wifi_init+0x144>)
    28ce:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    28d0:	4b45      	ldr	r3, [pc, #276]	; (29e8 <m2m_wifi_init+0x148>)
    28d2:	2200      	movs	r2, #0
    28d4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    28d6:	232f      	movs	r3, #47	; 0x2f
    28d8:	18fc      	adds	r4, r7, r3
    28da:	230b      	movs	r3, #11
    28dc:	18fb      	adds	r3, r7, r3
    28de:	0018      	movs	r0, r3
    28e0:	4b42      	ldr	r3, [pc, #264]	; (29ec <m2m_wifi_init+0x14c>)
    28e2:	4798      	blx	r3
    28e4:	0003      	movs	r3, r0
    28e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    28e8:	232f      	movs	r3, #47	; 0x2f
    28ea:	18fb      	adds	r3, r7, r3
    28ec:	781b      	ldrb	r3, [r3, #0]
    28ee:	b25b      	sxtb	r3, r3
    28f0:	2b00      	cmp	r3, #0
    28f2:	d16c      	bne.n	29ce <m2m_wifi_init+0x12e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    28f4:	232f      	movs	r3, #47	; 0x2f
    28f6:	18fc      	adds	r4, r7, r3
    28f8:	2000      	movs	r0, #0
    28fa:	4b3d      	ldr	r3, [pc, #244]	; (29f0 <m2m_wifi_init+0x150>)
    28fc:	4798      	blx	r3
    28fe:	0003      	movs	r3, r0
    2900:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2902:	232f      	movs	r3, #47	; 0x2f
    2904:	18fb      	adds	r3, r7, r3
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	b25b      	sxtb	r3, r3
    290a:	2b00      	cmp	r3, #0
    290c:	d15a      	bne.n	29c4 <m2m_wifi_init+0x124>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    290e:	4b39      	ldr	r3, [pc, #228]	; (29f4 <m2m_wifi_init+0x154>)
    2910:	0019      	movs	r1, r3
    2912:	2001      	movs	r0, #1
    2914:	4b38      	ldr	r3, [pc, #224]	; (29f8 <m2m_wifi_init+0x158>)
    2916:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    2918:	232f      	movs	r3, #47	; 0x2f
    291a:	18fc      	adds	r4, r7, r3
    291c:	230c      	movs	r3, #12
    291e:	18fb      	adds	r3, r7, r3
    2920:	0018      	movs	r0, r3
    2922:	4b36      	ldr	r3, [pc, #216]	; (29fc <m2m_wifi_init+0x15c>)
    2924:	4798      	blx	r3
    2926:	0003      	movs	r3, r0
    2928:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    292a:	4b35      	ldr	r3, [pc, #212]	; (2a00 <m2m_wifi_init+0x160>)
    292c:	0018      	movs	r0, r3
    292e:	4b35      	ldr	r3, [pc, #212]	; (2a04 <m2m_wifi_init+0x164>)
    2930:	4798      	blx	r3
    2932:	230c      	movs	r3, #12
    2934:	18fb      	adds	r3, r7, r3
    2936:	791b      	ldrb	r3, [r3, #4]
    2938:	0019      	movs	r1, r3
    293a:	230c      	movs	r3, #12
    293c:	18fb      	adds	r3, r7, r3
    293e:	795b      	ldrb	r3, [r3, #5]
    2940:	001a      	movs	r2, r3
    2942:	230c      	movs	r3, #12
    2944:	18fb      	adds	r3, r7, r3
    2946:	799b      	ldrb	r3, [r3, #6]
    2948:	482f      	ldr	r0, [pc, #188]	; (2a08 <m2m_wifi_init+0x168>)
    294a:	4c2e      	ldr	r4, [pc, #184]	; (2a04 <m2m_wifi_init+0x164>)
    294c:	47a0      	blx	r4
    294e:	200d      	movs	r0, #13
    2950:	4b2e      	ldr	r3, [pc, #184]	; (2a0c <m2m_wifi_init+0x16c>)
    2952:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2954:	4b2a      	ldr	r3, [pc, #168]	; (2a00 <m2m_wifi_init+0x160>)
    2956:	0018      	movs	r0, r3
    2958:	4b2a      	ldr	r3, [pc, #168]	; (2a04 <m2m_wifi_init+0x164>)
    295a:	4798      	blx	r3
    295c:	230c      	movs	r3, #12
    295e:	18fb      	adds	r3, r7, r3
    2960:	79db      	ldrb	r3, [r3, #7]
    2962:	0019      	movs	r1, r3
    2964:	230c      	movs	r3, #12
    2966:	18fb      	adds	r3, r7, r3
    2968:	7a1b      	ldrb	r3, [r3, #8]
    296a:	001a      	movs	r2, r3
    296c:	230c      	movs	r3, #12
    296e:	18fb      	adds	r3, r7, r3
    2970:	7a5b      	ldrb	r3, [r3, #9]
    2972:	4827      	ldr	r0, [pc, #156]	; (2a10 <m2m_wifi_init+0x170>)
    2974:	4c23      	ldr	r4, [pc, #140]	; (2a04 <m2m_wifi_init+0x164>)
    2976:	47a0      	blx	r4
    2978:	200d      	movs	r0, #13
    297a:	4b24      	ldr	r3, [pc, #144]	; (2a0c <m2m_wifi_init+0x16c>)
    297c:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    297e:	4b20      	ldr	r3, [pc, #128]	; (2a00 <m2m_wifi_init+0x160>)
    2980:	0018      	movs	r0, r3
    2982:	4b20      	ldr	r3, [pc, #128]	; (2a04 <m2m_wifi_init+0x164>)
    2984:	4798      	blx	r3
    2986:	4823      	ldr	r0, [pc, #140]	; (2a14 <m2m_wifi_init+0x174>)
    2988:	2300      	movs	r3, #0
    298a:	2203      	movs	r2, #3
    298c:	2113      	movs	r1, #19
    298e:	4c1d      	ldr	r4, [pc, #116]	; (2a04 <m2m_wifi_init+0x164>)
    2990:	47a0      	blx	r4
    2992:	200d      	movs	r0, #13
    2994:	4b1d      	ldr	r3, [pc, #116]	; (2a0c <m2m_wifi_init+0x16c>)
    2996:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    2998:	232f      	movs	r3, #47	; 0x2f
    299a:	18fb      	adds	r3, r7, r3
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	b25b      	sxtb	r3, r3
    29a0:	330d      	adds	r3, #13
    29a2:	d116      	bne.n	29d2 <m2m_wifi_init+0x132>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    29a4:	23d0      	movs	r3, #208	; 0xd0
    29a6:	33ff      	adds	r3, #255	; 0xff
    29a8:	001a      	movs	r2, r3
    29aa:	491b      	ldr	r1, [pc, #108]	; (2a18 <m2m_wifi_init+0x178>)
    29ac:	4b1b      	ldr	r3, [pc, #108]	; (2a1c <m2m_wifi_init+0x17c>)
    29ae:	0018      	movs	r0, r3
    29b0:	4b14      	ldr	r3, [pc, #80]	; (2a04 <m2m_wifi_init+0x164>)
    29b2:	4798      	blx	r3
    29b4:	4b1a      	ldr	r3, [pc, #104]	; (2a20 <m2m_wifi_init+0x180>)
    29b6:	0018      	movs	r0, r3
    29b8:	4b1a      	ldr	r3, [pc, #104]	; (2a24 <m2m_wifi_init+0x184>)
    29ba:	4798      	blx	r3
    29bc:	200d      	movs	r0, #13
    29be:	4b13      	ldr	r3, [pc, #76]	; (2a0c <m2m_wifi_init+0x16c>)
    29c0:	4798      	blx	r3
	}

	goto _EXIT0;
    29c2:	e006      	b.n	29d2 <m2m_wifi_init+0x132>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    29c4:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    29c6:	2000      	movs	r0, #0
    29c8:	4b17      	ldr	r3, [pc, #92]	; (2a28 <m2m_wifi_init+0x188>)
    29ca:	4798      	blx	r3
    29cc:	e002      	b.n	29d4 <m2m_wifi_init+0x134>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	e000      	b.n	29d4 <m2m_wifi_init+0x134>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    29d2:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    29d4:	232f      	movs	r3, #47	; 0x2f
    29d6:	18fb      	adds	r3, r7, r3
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	b25b      	sxtb	r3, r3
}
    29dc:	0018      	movs	r0, r3
    29de:	46bd      	mov	sp, r7
    29e0:	b00d      	add	sp, #52	; 0x34
    29e2:	bd90      	pop	{r4, r7, pc}
    29e4:	200000c0 	.word	0x200000c0
    29e8:	200000bd 	.word	0x200000bd
    29ec:	00003a7d 	.word	0x00003a7d
    29f0:	000019dd 	.word	0x000019dd
    29f4:	000024e5 	.word	0x000024e5
    29f8:	0000241d 	.word	0x0000241d
    29fc:	00003915 	.word	0x00003915
    2a00:	0000c86c 	.word	0x0000c86c
    2a04:	0000b081 	.word	0x0000b081
    2a08:	0000c9d4 	.word	0x0000c9d4
    2a0c:	0000b0b5 	.word	0x0000b0b5
    2a10:	0000c9f0 	.word	0x0000c9f0
    2a14:	0000ca0c 	.word	0x0000ca0c
    2a18:	0000cb9c 	.word	0x0000cb9c
    2a1c:	0000c898 	.word	0x0000c898
    2a20:	0000ca28 	.word	0x0000ca28
    2a24:	0000b1a1 	.word	0x0000b1a1
    2a28:	00003c0d 	.word	0x00003c0d

00002a2c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	b082      	sub	sp, #8
    2a30:	af00      	add	r7, sp, #0
    2a32:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2a34:	4b03      	ldr	r3, [pc, #12]	; (2a44 <m2m_wifi_handle_events+0x18>)
    2a36:	4798      	blx	r3
    2a38:	0003      	movs	r3, r0
}
    2a3a:	0018      	movs	r0, r3
    2a3c:	46bd      	mov	sp, r7
    2a3e:	b002      	add	sp, #8
    2a40:	bd80      	pop	{r7, pc}
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	00002195 	.word	0x00002195

00002a48 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    2a48:	b590      	push	{r4, r7, lr}
    2a4a:	b087      	sub	sp, #28
    2a4c:	af02      	add	r7, sp, #8
    2a4e:	60f8      	str	r0, [r7, #12]
    2a50:	0008      	movs	r0, r1
    2a52:	0011      	movs	r1, r2
    2a54:	607b      	str	r3, [r7, #4]
    2a56:	230b      	movs	r3, #11
    2a58:	18fb      	adds	r3, r7, r3
    2a5a:	1c02      	adds	r2, r0, #0
    2a5c:	701a      	strb	r2, [r3, #0]
    2a5e:	230a      	movs	r3, #10
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	1c0a      	adds	r2, r1, #0
    2a64:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2a66:	687c      	ldr	r4, [r7, #4]
    2a68:	230a      	movs	r3, #10
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	781a      	ldrb	r2, [r3, #0]
    2a6e:	230b      	movs	r3, #11
    2a70:	18fb      	adds	r3, r7, r3
    2a72:	7819      	ldrb	r1, [r3, #0]
    2a74:	68f8      	ldr	r0, [r7, #12]
    2a76:	2300      	movs	r3, #0
    2a78:	9301      	str	r3, [sp, #4]
    2a7a:	2320      	movs	r3, #32
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	881b      	ldrh	r3, [r3, #0]
    2a80:	9300      	str	r3, [sp, #0]
    2a82:	0023      	movs	r3, r4
    2a84:	4c03      	ldr	r4, [pc, #12]	; (2a94 <m2m_wifi_connect+0x4c>)
    2a86:	47a0      	blx	r4
    2a88:	0003      	movs	r3, r0
}
    2a8a:	0018      	movs	r0, r3
    2a8c:	46bd      	mov	sp, r7
    2a8e:	b005      	add	sp, #20
    2a90:	bd90      	pop	{r4, r7, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	00002a99 	.word	0x00002a99

00002a98 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2a98:	b5b0      	push	{r4, r5, r7, lr}
    2a9a:	b0aa      	sub	sp, #168	; 0xa8
    2a9c:	af04      	add	r7, sp, #16
    2a9e:	60f8      	str	r0, [r7, #12]
    2aa0:	0008      	movs	r0, r1
    2aa2:	0011      	movs	r1, r2
    2aa4:	607b      	str	r3, [r7, #4]
    2aa6:	230b      	movs	r3, #11
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	1c02      	adds	r2, r0, #0
    2aac:	701a      	strb	r2, [r3, #0]
    2aae:	230a      	movs	r3, #10
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	1c0a      	adds	r2, r1, #0
    2ab4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    2ab6:	2397      	movs	r3, #151	; 0x97
    2ab8:	18fb      	adds	r3, r7, r3
    2aba:	2200      	movs	r2, #0
    2abc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    2abe:	230a      	movs	r3, #10
    2ac0:	18fb      	adds	r3, r7, r3
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	2b01      	cmp	r3, #1
    2ac6:	d100      	bne.n	2aca <m2m_wifi_connect_sc+0x32>
    2ac8:	e085      	b.n	2bd6 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d113      	bne.n	2af8 <m2m_wifi_connect_sc+0x60>
		{
			M2M_ERR("Key is not valid\n");
    2ad0:	23fe      	movs	r3, #254	; 0xfe
    2ad2:	33ff      	adds	r3, #255	; 0xff
    2ad4:	001a      	movs	r2, r3
    2ad6:	49d8      	ldr	r1, [pc, #864]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2ad8:	4bd8      	ldr	r3, [pc, #864]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2ada:	0018      	movs	r0, r3
    2adc:	4bd8      	ldr	r3, [pc, #864]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2ade:	4798      	blx	r3
    2ae0:	4bd8      	ldr	r3, [pc, #864]	; (2e44 <m2m_wifi_connect_sc+0x3ac>)
    2ae2:	0018      	movs	r0, r3
    2ae4:	4bd8      	ldr	r3, [pc, #864]	; (2e48 <m2m_wifi_connect_sc+0x3b0>)
    2ae6:	4798      	blx	r3
    2ae8:	200d      	movs	r0, #13
    2aea:	4bd8      	ldr	r3, [pc, #864]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2aec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2aee:	2397      	movs	r3, #151	; 0x97
    2af0:	18fb      	adds	r3, r7, r3
    2af2:	22f4      	movs	r2, #244	; 0xf4
    2af4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2af6:	e1ed      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2af8:	230a      	movs	r3, #10
    2afa:	18fb      	adds	r3, r7, r3
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	2b02      	cmp	r3, #2
    2b00:	d169      	bne.n	2bd6 <m2m_wifi_connect_sc+0x13e>
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	0018      	movs	r0, r3
    2b06:	4bd2      	ldr	r3, [pc, #840]	; (2e50 <m2m_wifi_connect_sc+0x3b8>)
    2b08:	4798      	blx	r3
    2b0a:	1e03      	subs	r3, r0, #0
    2b0c:	2b40      	cmp	r3, #64	; 0x40
    2b0e:	d162      	bne.n	2bd6 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
    2b10:	2396      	movs	r3, #150	; 0x96
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	2200      	movs	r2, #0
    2b16:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	2290      	movs	r2, #144	; 0x90
    2b1c:	18ba      	adds	r2, r7, r2
    2b1e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2b20:	e054      	b.n	2bcc <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    2b22:	2396      	movs	r3, #150	; 0x96
    2b24:	18fb      	adds	r3, r7, r3
    2b26:	781b      	ldrb	r3, [r3, #0]
    2b28:	2290      	movs	r2, #144	; 0x90
    2b2a:	18ba      	adds	r2, r7, r2
    2b2c:	6812      	ldr	r2, [r2, #0]
    2b2e:	18d3      	adds	r3, r2, r3
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	2b2f      	cmp	r3, #47	; 0x2f
    2b34:	d931      	bls.n	2b9a <m2m_wifi_connect_sc+0x102>
    2b36:	2396      	movs	r3, #150	; 0x96
    2b38:	18fb      	adds	r3, r7, r3
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	2290      	movs	r2, #144	; 0x90
    2b3e:	18ba      	adds	r2, r7, r2
    2b40:	6812      	ldr	r2, [r2, #0]
    2b42:	18d3      	adds	r3, r2, r3
    2b44:	781b      	ldrb	r3, [r3, #0]
    2b46:	2b39      	cmp	r3, #57	; 0x39
    2b48:	d909      	bls.n	2b5e <m2m_wifi_connect_sc+0xc6>
    2b4a:	2396      	movs	r3, #150	; 0x96
    2b4c:	18fb      	adds	r3, r7, r3
    2b4e:	781b      	ldrb	r3, [r3, #0]
    2b50:	2290      	movs	r2, #144	; 0x90
    2b52:	18ba      	adds	r2, r7, r2
    2b54:	6812      	ldr	r2, [r2, #0]
    2b56:	18d3      	adds	r3, r2, r3
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	2b40      	cmp	r3, #64	; 0x40
    2b5c:	d91d      	bls.n	2b9a <m2m_wifi_connect_sc+0x102>
    2b5e:	2396      	movs	r3, #150	; 0x96
    2b60:	18fb      	adds	r3, r7, r3
    2b62:	781b      	ldrb	r3, [r3, #0]
    2b64:	2290      	movs	r2, #144	; 0x90
    2b66:	18ba      	adds	r2, r7, r2
    2b68:	6812      	ldr	r2, [r2, #0]
    2b6a:	18d3      	adds	r3, r2, r3
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	2b46      	cmp	r3, #70	; 0x46
    2b70:	d909      	bls.n	2b86 <m2m_wifi_connect_sc+0xee>
    2b72:	2396      	movs	r3, #150	; 0x96
    2b74:	18fb      	adds	r3, r7, r3
    2b76:	781b      	ldrb	r3, [r3, #0]
    2b78:	2290      	movs	r2, #144	; 0x90
    2b7a:	18ba      	adds	r2, r7, r2
    2b7c:	6812      	ldr	r2, [r2, #0]
    2b7e:	18d3      	adds	r3, r2, r3
    2b80:	781b      	ldrb	r3, [r3, #0]
    2b82:	2b60      	cmp	r3, #96	; 0x60
    2b84:	d909      	bls.n	2b9a <m2m_wifi_connect_sc+0x102>
    2b86:	2396      	movs	r3, #150	; 0x96
    2b88:	18fb      	adds	r3, r7, r3
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	2290      	movs	r2, #144	; 0x90
    2b8e:	18ba      	adds	r2, r7, r2
    2b90:	6812      	ldr	r2, [r2, #0]
    2b92:	18d3      	adds	r3, r2, r3
    2b94:	781b      	ldrb	r3, [r3, #0]
    2b96:	2b66      	cmp	r3, #102	; 0x66
    2b98:	d911      	bls.n	2bbe <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
    2b9a:	4aae      	ldr	r2, [pc, #696]	; (2e54 <m2m_wifi_connect_sc+0x3bc>)
    2b9c:	49a6      	ldr	r1, [pc, #664]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2b9e:	4ba7      	ldr	r3, [pc, #668]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2ba0:	0018      	movs	r0, r3
    2ba2:	4ba7      	ldr	r3, [pc, #668]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2ba4:	4798      	blx	r3
    2ba6:	4bac      	ldr	r3, [pc, #688]	; (2e58 <m2m_wifi_connect_sc+0x3c0>)
    2ba8:	0018      	movs	r0, r3
    2baa:	4ba7      	ldr	r3, [pc, #668]	; (2e48 <m2m_wifi_connect_sc+0x3b0>)
    2bac:	4798      	blx	r3
    2bae:	200d      	movs	r0, #13
    2bb0:	4ba6      	ldr	r3, [pc, #664]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2bb2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    2bb4:	2397      	movs	r3, #151	; 0x97
    2bb6:	18fb      	adds	r3, r7, r3
    2bb8:	22f4      	movs	r2, #244	; 0xf4
    2bba:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    2bbc:	e18a      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    2bbe:	2396      	movs	r3, #150	; 0x96
    2bc0:	18fb      	adds	r3, r7, r3
    2bc2:	781a      	ldrb	r2, [r3, #0]
    2bc4:	2396      	movs	r3, #150	; 0x96
    2bc6:	18fb      	adds	r3, r7, r3
    2bc8:	3201      	adds	r2, #1
    2bca:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    2bcc:	2396      	movs	r3, #150	; 0x96
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	781b      	ldrb	r3, [r3, #0]
    2bd2:	2b3f      	cmp	r3, #63	; 0x3f
    2bd4:	d9a5      	bls.n	2b22 <m2m_wifi_connect_sc+0x8a>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    2bd6:	230b      	movs	r3, #11
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	781b      	ldrb	r3, [r3, #0]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d004      	beq.n	2bea <m2m_wifi_connect_sc+0x152>
    2be0:	230b      	movs	r3, #11
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	781b      	ldrb	r3, [r3, #0]
    2be6:	2b20      	cmp	r3, #32
    2be8:	d911      	bls.n	2c0e <m2m_wifi_connect_sc+0x176>
	{
		M2M_ERR("SSID LEN INVALID\n");
    2bea:	4a9c      	ldr	r2, [pc, #624]	; (2e5c <m2m_wifi_connect_sc+0x3c4>)
    2bec:	4992      	ldr	r1, [pc, #584]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2bee:	4b93      	ldr	r3, [pc, #588]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2bf0:	0018      	movs	r0, r3
    2bf2:	4b93      	ldr	r3, [pc, #588]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2bf4:	4798      	blx	r3
    2bf6:	4b9a      	ldr	r3, [pc, #616]	; (2e60 <m2m_wifi_connect_sc+0x3c8>)
    2bf8:	0018      	movs	r0, r3
    2bfa:	4b93      	ldr	r3, [pc, #588]	; (2e48 <m2m_wifi_connect_sc+0x3b0>)
    2bfc:	4798      	blx	r3
    2bfe:	200d      	movs	r0, #13
    2c00:	4b92      	ldr	r3, [pc, #584]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2c02:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2c04:	2397      	movs	r3, #151	; 0x97
    2c06:	18fb      	adds	r3, r7, r3
    2c08:	22f4      	movs	r2, #244	; 0xf4
    2c0a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2c0c:	e162      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    2c0e:	23a8      	movs	r3, #168	; 0xa8
    2c10:	18fb      	adds	r3, r7, r3
    2c12:	881b      	ldrh	r3, [r3, #0]
    2c14:	2b0d      	cmp	r3, #13
    2c16:	d917      	bls.n	2c48 <m2m_wifi_connect_sc+0x1b0>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2c18:	23a8      	movs	r3, #168	; 0xa8
    2c1a:	18fb      	adds	r3, r7, r3
    2c1c:	881b      	ldrh	r3, [r3, #0]
    2c1e:	2bff      	cmp	r3, #255	; 0xff
    2c20:	d012      	beq.n	2c48 <m2m_wifi_connect_sc+0x1b0>
		{
			M2M_ERR("CH INVALID\n");
    2c22:	2387      	movs	r3, #135	; 0x87
    2c24:	009a      	lsls	r2, r3, #2
    2c26:	4984      	ldr	r1, [pc, #528]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2c28:	4b84      	ldr	r3, [pc, #528]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2c2a:	0018      	movs	r0, r3
    2c2c:	4b84      	ldr	r3, [pc, #528]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2c2e:	4798      	blx	r3
    2c30:	4b8c      	ldr	r3, [pc, #560]	; (2e64 <m2m_wifi_connect_sc+0x3cc>)
    2c32:	0018      	movs	r0, r3
    2c34:	4b84      	ldr	r3, [pc, #528]	; (2e48 <m2m_wifi_connect_sc+0x3b0>)
    2c36:	4798      	blx	r3
    2c38:	200d      	movs	r0, #13
    2c3a:	4b84      	ldr	r3, [pc, #528]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2c3c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2c3e:	2397      	movs	r3, #151	; 0x97
    2c40:	18fb      	adds	r3, r7, r3
    2c42:	22f4      	movs	r2, #244	; 0xf4
    2c44:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2c46:	e145      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2c48:	230b      	movs	r3, #11
    2c4a:	18fb      	adds	r3, r7, r3
    2c4c:	781a      	ldrb	r2, [r3, #0]
    2c4e:	68f9      	ldr	r1, [r7, #12]
    2c50:	2314      	movs	r3, #20
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	3346      	adds	r3, #70	; 0x46
    2c56:	0018      	movs	r0, r3
    2c58:	4b83      	ldr	r3, [pc, #524]	; (2e68 <m2m_wifi_connect_sc+0x3d0>)
    2c5a:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2c5c:	230b      	movs	r3, #11
    2c5e:	18fb      	adds	r3, r7, r3
    2c60:	781b      	ldrb	r3, [r3, #0]
    2c62:	2214      	movs	r2, #20
    2c64:	18ba      	adds	r2, r7, r2
    2c66:	2146      	movs	r1, #70	; 0x46
    2c68:	18d3      	adds	r3, r2, r3
    2c6a:	185b      	adds	r3, r3, r1
    2c6c:	2200      	movs	r2, #0
    2c6e:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2c70:	2314      	movs	r3, #20
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	22a8      	movs	r2, #168	; 0xa8
    2c76:	18ba      	adds	r2, r7, r2
    2c78:	2144      	movs	r1, #68	; 0x44
    2c7a:	8812      	ldrh	r2, [r2, #0]
    2c7c:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2c7e:	23ac      	movs	r3, #172	; 0xac
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	781b      	ldrb	r3, [r3, #0]
    2c84:	1e5a      	subs	r2, r3, #1
    2c86:	4193      	sbcs	r3, r2
    2c88:	b2db      	uxtb	r3, r3
    2c8a:	0019      	movs	r1, r3
    2c8c:	2314      	movs	r3, #20
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	2267      	movs	r2, #103	; 0x67
    2c92:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    2c94:	2314      	movs	r3, #20
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	228c      	movs	r2, #140	; 0x8c
    2c9a:	18ba      	adds	r2, r7, r2
    2c9c:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    2c9e:	238c      	movs	r3, #140	; 0x8c
    2ca0:	18fb      	adds	r3, r7, r3
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	220a      	movs	r2, #10
    2ca6:	18ba      	adds	r2, r7, r2
    2ca8:	2141      	movs	r1, #65	; 0x41
    2caa:	7812      	ldrb	r2, [r2, #0]
    2cac:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2cae:	230a      	movs	r3, #10
    2cb0:	18fb      	adds	r3, r7, r3
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	2b03      	cmp	r3, #3
    2cb6:	d000      	beq.n	2cba <m2m_wifi_connect_sc+0x222>
    2cb8:	e07a      	b.n	2db0 <m2m_wifi_connect_sc+0x318>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	2288      	movs	r2, #136	; 0x88
    2cbe:	18ba      	adds	r2, r7, r2
    2cc0:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    2cc2:	238c      	movs	r3, #140	; 0x8c
    2cc4:	18fb      	adds	r3, r7, r3
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	2284      	movs	r2, #132	; 0x84
    2cca:	18ba      	adds	r2, r7, r2
    2ccc:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    2cce:	2388      	movs	r3, #136	; 0x88
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	3b01      	subs	r3, #1
    2cd8:	b2da      	uxtb	r2, r3
    2cda:	2384      	movs	r3, #132	; 0x84
    2cdc:	18fb      	adds	r3, r7, r3
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2ce2:	2384      	movs	r3, #132	; 0x84
    2ce4:	18fb      	adds	r3, r7, r3
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	2b03      	cmp	r3, #3
    2cec:	d917      	bls.n	2d1e <m2m_wifi_connect_sc+0x286>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2cee:	4a5f      	ldr	r2, [pc, #380]	; (2e6c <m2m_wifi_connect_sc+0x3d4>)
    2cf0:	4951      	ldr	r1, [pc, #324]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2cf2:	4b52      	ldr	r3, [pc, #328]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2cf4:	0018      	movs	r0, r3
    2cf6:	4b52      	ldr	r3, [pc, #328]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2cf8:	4798      	blx	r3
    2cfa:	2384      	movs	r3, #132	; 0x84
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	001a      	movs	r2, r3
    2d04:	4b5a      	ldr	r3, [pc, #360]	; (2e70 <m2m_wifi_connect_sc+0x3d8>)
    2d06:	0011      	movs	r1, r2
    2d08:	0018      	movs	r0, r3
    2d0a:	4b4d      	ldr	r3, [pc, #308]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2d0c:	4798      	blx	r3
    2d0e:	200d      	movs	r0, #13
    2d10:	4b4e      	ldr	r3, [pc, #312]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2d12:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2d14:	2397      	movs	r3, #151	; 0x97
    2d16:	18fb      	adds	r3, r7, r3
    2d18:	22f4      	movs	r2, #244	; 0xf4
    2d1a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2d1c:	e0da      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2d1e:	2388      	movs	r3, #136	; 0x88
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	681b      	ldr	r3, [r3, #0]
    2d24:	785b      	ldrb	r3, [r3, #1]
    2d26:	3b01      	subs	r3, #1
    2d28:	b2da      	uxtb	r2, r3
    2d2a:	2384      	movs	r3, #132	; 0x84
    2d2c:	18fb      	adds	r3, r7, r3
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2d32:	2384      	movs	r3, #132	; 0x84
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	785b      	ldrb	r3, [r3, #1]
    2d3a:	2b0a      	cmp	r3, #10
    2d3c:	d01d      	beq.n	2d7a <m2m_wifi_connect_sc+0x2e2>
    2d3e:	2384      	movs	r3, #132	; 0x84
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	681b      	ldr	r3, [r3, #0]
    2d44:	785b      	ldrb	r3, [r3, #1]
    2d46:	2b1a      	cmp	r3, #26
    2d48:	d017      	beq.n	2d7a <m2m_wifi_connect_sc+0x2e2>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2d4a:	4a4a      	ldr	r2, [pc, #296]	; (2e74 <m2m_wifi_connect_sc+0x3dc>)
    2d4c:	493a      	ldr	r1, [pc, #232]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2d4e:	4b3b      	ldr	r3, [pc, #236]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2d50:	0018      	movs	r0, r3
    2d52:	4b3b      	ldr	r3, [pc, #236]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2d54:	4798      	blx	r3
    2d56:	2384      	movs	r3, #132	; 0x84
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	785b      	ldrb	r3, [r3, #1]
    2d5e:	001a      	movs	r2, r3
    2d60:	4b45      	ldr	r3, [pc, #276]	; (2e78 <m2m_wifi_connect_sc+0x3e0>)
    2d62:	0011      	movs	r1, r2
    2d64:	0018      	movs	r0, r3
    2d66:	4b36      	ldr	r3, [pc, #216]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2d68:	4798      	blx	r3
    2d6a:	200d      	movs	r0, #13
    2d6c:	4b37      	ldr	r3, [pc, #220]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2d6e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2d70:	2397      	movs	r3, #151	; 0x97
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	22f4      	movs	r2, #244	; 0xf4
    2d76:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2d78:	e0ac      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2d7a:	2384      	movs	r3, #132	; 0x84
    2d7c:	18fb      	adds	r3, r7, r3
    2d7e:	681b      	ldr	r3, [r3, #0]
    2d80:	1c98      	adds	r0, r3, #2
    2d82:	2388      	movs	r3, #136	; 0x88
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	1c99      	adds	r1, r3, #2
    2d8a:	2388      	movs	r3, #136	; 0x88
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	785b      	ldrb	r3, [r3, #1]
    2d92:	001a      	movs	r2, r3
    2d94:	4b34      	ldr	r3, [pc, #208]	; (2e68 <m2m_wifi_connect_sc+0x3d0>)
    2d96:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    2d98:	2388      	movs	r3, #136	; 0x88
    2d9a:	18fb      	adds	r3, r7, r3
    2d9c:	681b      	ldr	r3, [r3, #0]
    2d9e:	785b      	ldrb	r3, [r3, #1]
    2da0:	001a      	movs	r2, r3
    2da2:	2384      	movs	r3, #132	; 0x84
    2da4:	18fb      	adds	r3, r7, r3
    2da6:	681b      	ldr	r3, [r3, #0]
    2da8:	189b      	adds	r3, r3, r2
    2daa:	2200      	movs	r2, #0
    2dac:	709a      	strb	r2, [r3, #2]
    2dae:	e080      	b.n	2eb2 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2db0:	230a      	movs	r3, #10
    2db2:	18fb      	adds	r3, r7, r3
    2db4:	781b      	ldrb	r3, [r3, #0]
    2db6:	2b02      	cmp	r3, #2
    2db8:	d130      	bne.n	2e1c <m2m_wifi_connect_sc+0x384>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    2dba:	2382      	movs	r3, #130	; 0x82
    2dbc:	18fc      	adds	r4, r7, r3
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	0018      	movs	r0, r3
    2dc2:	4b23      	ldr	r3, [pc, #140]	; (2e50 <m2m_wifi_connect_sc+0x3b8>)
    2dc4:	4798      	blx	r3
    2dc6:	0003      	movs	r3, r0
    2dc8:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    2dca:	2382      	movs	r3, #130	; 0x82
    2dcc:	18fb      	adds	r3, r7, r3
    2dce:	881b      	ldrh	r3, [r3, #0]
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d004      	beq.n	2dde <m2m_wifi_connect_sc+0x346>
    2dd4:	2382      	movs	r3, #130	; 0x82
    2dd6:	18fb      	adds	r3, r7, r3
    2dd8:	881b      	ldrh	r3, [r3, #0]
    2dda:	2b40      	cmp	r3, #64	; 0x40
    2ddc:	d911      	bls.n	2e02 <m2m_wifi_connect_sc+0x36a>
		{
			M2M_ERR("Incorrect PSK key length\n");
    2dde:	4a27      	ldr	r2, [pc, #156]	; (2e7c <m2m_wifi_connect_sc+0x3e4>)
    2de0:	4915      	ldr	r1, [pc, #84]	; (2e38 <m2m_wifi_connect_sc+0x3a0>)
    2de2:	4b16      	ldr	r3, [pc, #88]	; (2e3c <m2m_wifi_connect_sc+0x3a4>)
    2de4:	0018      	movs	r0, r3
    2de6:	4b16      	ldr	r3, [pc, #88]	; (2e40 <m2m_wifi_connect_sc+0x3a8>)
    2de8:	4798      	blx	r3
    2dea:	4b25      	ldr	r3, [pc, #148]	; (2e80 <m2m_wifi_connect_sc+0x3e8>)
    2dec:	0018      	movs	r0, r3
    2dee:	4b16      	ldr	r3, [pc, #88]	; (2e48 <m2m_wifi_connect_sc+0x3b0>)
    2df0:	4798      	blx	r3
    2df2:	200d      	movs	r0, #13
    2df4:	4b15      	ldr	r3, [pc, #84]	; (2e4c <m2m_wifi_connect_sc+0x3b4>)
    2df6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2df8:	2397      	movs	r3, #151	; 0x97
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	22f4      	movs	r2, #244	; 0xf4
    2dfe:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2e00:	e068      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2e02:	238c      	movs	r3, #140	; 0x8c
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	6818      	ldr	r0, [r3, #0]
    2e08:	2382      	movs	r3, #130	; 0x82
    2e0a:	18fb      	adds	r3, r7, r3
    2e0c:	881b      	ldrh	r3, [r3, #0]
    2e0e:	3301      	adds	r3, #1
    2e10:	001a      	movs	r2, r3
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	0019      	movs	r1, r3
    2e16:	4b14      	ldr	r3, [pc, #80]	; (2e68 <m2m_wifi_connect_sc+0x3d0>)
    2e18:	4798      	blx	r3
    2e1a:	e04a      	b.n	2eb2 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2e1c:	230a      	movs	r3, #10
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	781b      	ldrb	r3, [r3, #0]
    2e22:	2b04      	cmp	r3, #4
    2e24:	d12e      	bne.n	2e84 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2e26:	238c      	movs	r3, #140	; 0x8c
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	6879      	ldr	r1, [r7, #4]
    2e2e:	223e      	movs	r2, #62	; 0x3e
    2e30:	0018      	movs	r0, r3
    2e32:	4b0d      	ldr	r3, [pc, #52]	; (2e68 <m2m_wifi_connect_sc+0x3d0>)
    2e34:	4798      	blx	r3
    2e36:	e03c      	b.n	2eb2 <m2m_wifi_connect_sc+0x41a>
    2e38:	0000cbac 	.word	0x0000cbac
    2e3c:	0000c898 	.word	0x0000c898
    2e40:	0000b081 	.word	0x0000b081
    2e44:	0000ca44 	.word	0x0000ca44
    2e48:	0000b1a1 	.word	0x0000b1a1
    2e4c:	0000b0b5 	.word	0x0000b0b5
    2e50:	00001651 	.word	0x00001651
    2e54:	00000209 	.word	0x00000209
    2e58:	0000ca58 	.word	0x0000ca58
    2e5c:	00000213 	.word	0x00000213
    2e60:	0000ca64 	.word	0x0000ca64
    2e64:	0000ca78 	.word	0x0000ca78
    2e68:	000015d5 	.word	0x000015d5
    2e6c:	00000233 	.word	0x00000233
    2e70:	0000ca84 	.word	0x0000ca84
    2e74:	0000023a 	.word	0x0000023a
    2e78:	0000caa0 	.word	0x0000caa0
    2e7c:	00000249 	.word	0x00000249
    2e80:	0000cabc 	.word	0x0000cabc
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2e84:	230a      	movs	r3, #10
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	781b      	ldrb	r3, [r3, #0]
    2e8a:	2b01      	cmp	r3, #1
    2e8c:	d011      	beq.n	2eb2 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    2e8e:	4a15      	ldr	r2, [pc, #84]	; (2ee4 <m2m_wifi_connect_sc+0x44c>)
    2e90:	4915      	ldr	r1, [pc, #84]	; (2ee8 <m2m_wifi_connect_sc+0x450>)
    2e92:	4b16      	ldr	r3, [pc, #88]	; (2eec <m2m_wifi_connect_sc+0x454>)
    2e94:	0018      	movs	r0, r3
    2e96:	4b16      	ldr	r3, [pc, #88]	; (2ef0 <m2m_wifi_connect_sc+0x458>)
    2e98:	4798      	blx	r3
    2e9a:	4b16      	ldr	r3, [pc, #88]	; (2ef4 <m2m_wifi_connect_sc+0x45c>)
    2e9c:	0018      	movs	r0, r3
    2e9e:	4b16      	ldr	r3, [pc, #88]	; (2ef8 <m2m_wifi_connect_sc+0x460>)
    2ea0:	4798      	blx	r3
    2ea2:	200d      	movs	r0, #13
    2ea4:	4b15      	ldr	r3, [pc, #84]	; (2efc <m2m_wifi_connect_sc+0x464>)
    2ea6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2ea8:	2397      	movs	r3, #151	; 0x97
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	22f4      	movs	r2, #244	; 0xf4
    2eae:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2eb0:	e010      	b.n	2ed4 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2eb2:	2397      	movs	r3, #151	; 0x97
    2eb4:	18fc      	adds	r4, r7, r3
    2eb6:	2314      	movs	r3, #20
    2eb8:	18fa      	adds	r2, r7, r3
    2eba:	2300      	movs	r3, #0
    2ebc:	9302      	str	r3, [sp, #8]
    2ebe:	2300      	movs	r3, #0
    2ec0:	9301      	str	r3, [sp, #4]
    2ec2:	2300      	movs	r3, #0
    2ec4:	9300      	str	r3, [sp, #0]
    2ec6:	236c      	movs	r3, #108	; 0x6c
    2ec8:	2128      	movs	r1, #40	; 0x28
    2eca:	2001      	movs	r0, #1
    2ecc:	4d0c      	ldr	r5, [pc, #48]	; (2f00 <m2m_wifi_connect_sc+0x468>)
    2ece:	47a8      	blx	r5
    2ed0:	0003      	movs	r3, r0
    2ed2:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    2ed4:	2397      	movs	r3, #151	; 0x97
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	781b      	ldrb	r3, [r3, #0]
    2eda:	b25b      	sxtb	r3, r3
}
    2edc:	0018      	movs	r0, r3
    2ede:	46bd      	mov	sp, r7
    2ee0:	b026      	add	sp, #152	; 0x98
    2ee2:	bdb0      	pop	{r4, r5, r7, pc}
    2ee4:	00000259 	.word	0x00000259
    2ee8:	0000cbac 	.word	0x0000cbac
    2eec:	0000c898 	.word	0x0000c898
    2ef0:	0000b081 	.word	0x0000b081
    2ef4:	0000cad8 	.word	0x0000cad8
    2ef8:	0000b1a1 	.word	0x0000b1a1
    2efc:	0000b0b5 	.word	0x0000b0b5
    2f00:	00001a45 	.word	0x00001a45

00002f04 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2f04:	b580      	push	{r7, lr}
    2f06:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    2f08:	2300      	movs	r3, #0
}
    2f0a:	0018      	movs	r0, r3
    2f0c:	46bd      	mov	sp, r7
    2f0e:	bd80      	pop	{r7, pc}

00002f10 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    2f10:	b590      	push	{r4, r7, lr}
    2f12:	b087      	sub	sp, #28
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2f18:	2317      	movs	r3, #23
    2f1a:	18fb      	adds	r3, r7, r3
    2f1c:	2200      	movs	r2, #0
    2f1e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2f24:	693a      	ldr	r2, [r7, #16]
    2f26:	23a5      	movs	r3, #165	; 0xa5
    2f28:	015b      	lsls	r3, r3, #5
    2f2a:	0011      	movs	r1, r2
    2f2c:	0018      	movs	r0, r3
    2f2e:	4b13      	ldr	r3, [pc, #76]	; (2f7c <chip_apply_conf+0x6c>)
    2f30:	4798      	blx	r3
		if(val32 != 0) {		
    2f32:	693b      	ldr	r3, [r7, #16]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d018      	beq.n	2f6a <chip_apply_conf+0x5a>
			uint32 reg = 0;
    2f38:	2300      	movs	r3, #0
    2f3a:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2f3c:	2317      	movs	r3, #23
    2f3e:	18fc      	adds	r4, r7, r3
    2f40:	230c      	movs	r3, #12
    2f42:	18fa      	adds	r2, r7, r3
    2f44:	23a5      	movs	r3, #165	; 0xa5
    2f46:	015b      	lsls	r3, r3, #5
    2f48:	0011      	movs	r1, r2
    2f4a:	0018      	movs	r0, r3
    2f4c:	4b0c      	ldr	r3, [pc, #48]	; (2f80 <chip_apply_conf+0x70>)
    2f4e:	4798      	blx	r3
    2f50:	0003      	movs	r3, r0
    2f52:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    2f54:	2317      	movs	r3, #23
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b25b      	sxtb	r3, r3
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d1e1      	bne.n	2f24 <chip_apply_conf+0x14>
				if(reg == val32)
    2f60:	68fa      	ldr	r2, [r7, #12]
    2f62:	693b      	ldr	r3, [r7, #16]
    2f64:	429a      	cmp	r2, r3
    2f66:	d002      	beq.n	2f6e <chip_apply_conf+0x5e>
					break;
			}
		} else {
			break;
		}
	} while(1);
    2f68:	e7dc      	b.n	2f24 <chip_apply_conf+0x14>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	e000      	b.n	2f70 <chip_apply_conf+0x60>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    2f6e:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    2f70:	2300      	movs	r3, #0
}
    2f72:	0018      	movs	r0, r3
    2f74:	46bd      	mov	sp, r7
    2f76:	b007      	add	sp, #28
    2f78:	bd90      	pop	{r4, r7, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	00003701 	.word	0x00003701
    2f80:	000036dd 	.word	0x000036dd

00002f84 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    2f84:	b590      	push	{r4, r7, lr}
    2f86:	b085      	sub	sp, #20
    2f88:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2f8a:	230f      	movs	r3, #15
    2f8c:	18fb      	adds	r3, r7, r3
    2f8e:	2200      	movs	r2, #0
    2f90:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    2f92:	2300      	movs	r3, #0
    2f94:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    2f96:	2001      	movs	r0, #1
    2f98:	4b64      	ldr	r3, [pc, #400]	; (312c <nm_clkless_wake+0x1a8>)
    2f9a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    2f9c:	230f      	movs	r3, #15
    2f9e:	18fc      	adds	r4, r7, r3
    2fa0:	1d3b      	adds	r3, r7, #4
    2fa2:	0019      	movs	r1, r3
    2fa4:	2001      	movs	r0, #1
    2fa6:	4b62      	ldr	r3, [pc, #392]	; (3130 <nm_clkless_wake+0x1ac>)
    2fa8:	4798      	blx	r3
    2faa:	0003      	movs	r3, r0
    2fac:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    2fae:	230f      	movs	r3, #15
    2fb0:	18fb      	adds	r3, r7, r3
    2fb2:	781b      	ldrb	r3, [r3, #0]
    2fb4:	b25b      	sxtb	r3, r3
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d00d      	beq.n	2fd6 <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    2fba:	495e      	ldr	r1, [pc, #376]	; (3134 <nm_clkless_wake+0x1b0>)
    2fbc:	4b5e      	ldr	r3, [pc, #376]	; (3138 <nm_clkless_wake+0x1b4>)
    2fbe:	2272      	movs	r2, #114	; 0x72
    2fc0:	0018      	movs	r0, r3
    2fc2:	4b5e      	ldr	r3, [pc, #376]	; (313c <nm_clkless_wake+0x1b8>)
    2fc4:	4798      	blx	r3
    2fc6:	4b5e      	ldr	r3, [pc, #376]	; (3140 <nm_clkless_wake+0x1bc>)
    2fc8:	0018      	movs	r0, r3
    2fca:	4b5e      	ldr	r3, [pc, #376]	; (3144 <nm_clkless_wake+0x1c0>)
    2fcc:	4798      	blx	r3
    2fce:	200d      	movs	r0, #13
    2fd0:	4b5d      	ldr	r3, [pc, #372]	; (3148 <nm_clkless_wake+0x1c4>)
    2fd2:	4798      	blx	r3
		goto _WAKE_EXIT;
    2fd4:	e0a1      	b.n	311a <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	2202      	movs	r2, #2
    2fda:	4313      	orrs	r3, r2
    2fdc:	0019      	movs	r1, r3
    2fde:	2001      	movs	r0, #1
    2fe0:	4b5a      	ldr	r3, [pc, #360]	; (314c <nm_clkless_wake+0x1c8>)
    2fe2:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    2fe4:	2001      	movs	r0, #1
    2fe6:	4b51      	ldr	r3, [pc, #324]	; (312c <nm_clkless_wake+0x1a8>)
    2fe8:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2fea:	4b59      	ldr	r3, [pc, #356]	; (3150 <nm_clkless_wake+0x1cc>)
    2fec:	681b      	ldr	r3, [r3, #0]
    2fee:	220f      	movs	r2, #15
    2ff0:	18bc      	adds	r4, r7, r2
    2ff2:	003a      	movs	r2, r7
    2ff4:	0011      	movs	r1, r2
    2ff6:	0018      	movs	r0, r3
    2ff8:	4b4d      	ldr	r3, [pc, #308]	; (3130 <nm_clkless_wake+0x1ac>)
    2ffa:	4798      	blx	r3
    2ffc:	0003      	movs	r3, r0
    2ffe:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    3000:	230f      	movs	r3, #15
    3002:	18fb      	adds	r3, r7, r3
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	b25b      	sxtb	r3, r3
    3008:	2b00      	cmp	r3, #0
    300a:	d108      	bne.n	301e <nm_clkless_wake+0x9a>
    300c:	230f      	movs	r3, #15
    300e:	18fb      	adds	r3, r7, r3
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	b25b      	sxtb	r3, r3
    3014:	2b00      	cmp	r3, #0
    3016:	d162      	bne.n	30de <nm_clkless_wake+0x15a>
    3018:	683b      	ldr	r3, [r7, #0]
    301a:	2b00      	cmp	r3, #0
    301c:	d15f      	bne.n	30de <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    301e:	4b4c      	ldr	r3, [pc, #304]	; (3150 <nm_clkless_wake+0x1cc>)
    3020:	220e      	movs	r2, #14
    3022:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    3024:	2001      	movs	r0, #1
    3026:	4b41      	ldr	r3, [pc, #260]	; (312c <nm_clkless_wake+0x1a8>)
    3028:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    302a:	4b49      	ldr	r3, [pc, #292]	; (3150 <nm_clkless_wake+0x1cc>)
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	220f      	movs	r2, #15
    3030:	18bc      	adds	r4, r7, r2
    3032:	003a      	movs	r2, r7
    3034:	0011      	movs	r1, r2
    3036:	0018      	movs	r0, r3
    3038:	4b3d      	ldr	r3, [pc, #244]	; (3130 <nm_clkless_wake+0x1ac>)
    303a:	4798      	blx	r3
    303c:	0003      	movs	r3, r0
    303e:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    3040:	230f      	movs	r3, #15
    3042:	18fb      	adds	r3, r7, r3
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	b25b      	sxtb	r3, r3
    3048:	2b00      	cmp	r3, #0
    304a:	d108      	bne.n	305e <nm_clkless_wake+0xda>
    304c:	230f      	movs	r3, #15
    304e:	18fb      	adds	r3, r7, r3
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	b25b      	sxtb	r3, r3
    3054:	2b00      	cmp	r3, #0
    3056:	d142      	bne.n	30de <nm_clkless_wake+0x15a>
    3058:	683b      	ldr	r3, [r7, #0]
    305a:	2b00      	cmp	r3, #0
    305c:	d13f      	bne.n	30de <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    305e:	4b3c      	ldr	r3, [pc, #240]	; (3150 <nm_clkless_wake+0x1cc>)
    3060:	2213      	movs	r2, #19
    3062:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    3064:	2001      	movs	r0, #1
    3066:	4b31      	ldr	r3, [pc, #196]	; (312c <nm_clkless_wake+0x1a8>)
    3068:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    306a:	4b39      	ldr	r3, [pc, #228]	; (3150 <nm_clkless_wake+0x1cc>)
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	220f      	movs	r2, #15
    3070:	18bc      	adds	r4, r7, r2
    3072:	003a      	movs	r2, r7
    3074:	0011      	movs	r1, r2
    3076:	0018      	movs	r0, r3
    3078:	4b2d      	ldr	r3, [pc, #180]	; (3130 <nm_clkless_wake+0x1ac>)
    307a:	4798      	blx	r3
    307c:	0003      	movs	r3, r0
    307e:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    3080:	230f      	movs	r3, #15
    3082:	18fb      	adds	r3, r7, r3
    3084:	781b      	ldrb	r3, [r3, #0]
    3086:	b25b      	sxtb	r3, r3
    3088:	2b00      	cmp	r3, #0
    308a:	d028      	beq.n	30de <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    308c:	4929      	ldr	r1, [pc, #164]	; (3134 <nm_clkless_wake+0x1b0>)
    308e:	4b2a      	ldr	r3, [pc, #168]	; (3138 <nm_clkless_wake+0x1b4>)
    3090:	2296      	movs	r2, #150	; 0x96
    3092:	0018      	movs	r0, r3
    3094:	4b29      	ldr	r3, [pc, #164]	; (313c <nm_clkless_wake+0x1b8>)
    3096:	4798      	blx	r3
    3098:	4b2e      	ldr	r3, [pc, #184]	; (3154 <nm_clkless_wake+0x1d0>)
    309a:	0018      	movs	r0, r3
    309c:	4b29      	ldr	r3, [pc, #164]	; (3144 <nm_clkless_wake+0x1c0>)
    309e:	4798      	blx	r3
    30a0:	200d      	movs	r0, #13
    30a2:	4b29      	ldr	r3, [pc, #164]	; (3148 <nm_clkless_wake+0x1c4>)
    30a4:	4798      	blx	r3
					goto _WAKE_EXIT;
    30a6:	e038      	b.n	311a <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    30a8:	2002      	movs	r0, #2
    30aa:	4b20      	ldr	r3, [pc, #128]	; (312c <nm_clkless_wake+0x1a8>)
    30ac:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    30ae:	4b28      	ldr	r3, [pc, #160]	; (3150 <nm_clkless_wake+0x1cc>)
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	003a      	movs	r2, r7
    30b4:	0011      	movs	r1, r2
    30b6:	0018      	movs	r0, r3
    30b8:	4b1d      	ldr	r3, [pc, #116]	; (3130 <nm_clkless_wake+0x1ac>)
    30ba:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    30bc:	683b      	ldr	r3, [r7, #0]
    30be:	2204      	movs	r2, #4
    30c0:	4013      	ands	r3, r2
    30c2:	d10c      	bne.n	30de <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    30c4:	491b      	ldr	r1, [pc, #108]	; (3134 <nm_clkless_wake+0x1b0>)
    30c6:	4b1c      	ldr	r3, [pc, #112]	; (3138 <nm_clkless_wake+0x1b4>)
    30c8:	22aa      	movs	r2, #170	; 0xaa
    30ca:	0018      	movs	r0, r3
    30cc:	4b1b      	ldr	r3, [pc, #108]	; (313c <nm_clkless_wake+0x1b8>)
    30ce:	4798      	blx	r3
    30d0:	4b21      	ldr	r3, [pc, #132]	; (3158 <nm_clkless_wake+0x1d4>)
    30d2:	0018      	movs	r0, r3
    30d4:	4b1b      	ldr	r3, [pc, #108]	; (3144 <nm_clkless_wake+0x1c0>)
    30d6:	4798      	blx	r3
    30d8:	200d      	movs	r0, #13
    30da:	4b1b      	ldr	r3, [pc, #108]	; (3148 <nm_clkless_wake+0x1c4>)
    30dc:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    30de:	683b      	ldr	r3, [r7, #0]
    30e0:	2204      	movs	r2, #4
    30e2:	4013      	ands	r3, r2
    30e4:	d109      	bne.n	30fa <nm_clkless_wake+0x176>
    30e6:	68bb      	ldr	r3, [r7, #8]
    30e8:	3301      	adds	r3, #1
    30ea:	60bb      	str	r3, [r7, #8]
    30ec:	68ba      	ldr	r2, [r7, #8]
    30ee:	4b1b      	ldr	r3, [pc, #108]	; (315c <nm_clkless_wake+0x1d8>)
    30f0:	2103      	movs	r1, #3
    30f2:	0010      	movs	r0, r2
    30f4:	4798      	blx	r3
    30f6:	1e0b      	subs	r3, r1, #0
    30f8:	d0d6      	beq.n	30a8 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    30fa:	683b      	ldr	r3, [r7, #0]
    30fc:	2204      	movs	r2, #4
    30fe:	4013      	ands	r3, r2
    3100:	d106      	bne.n	3110 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	2202      	movs	r2, #2
    3106:	4313      	orrs	r3, r2
    3108:	0019      	movs	r1, r3
    310a:	2001      	movs	r0, #1
    310c:	4b0f      	ldr	r3, [pc, #60]	; (314c <nm_clkless_wake+0x1c8>)
    310e:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    3110:	683b      	ldr	r3, [r7, #0]
    3112:	2204      	movs	r2, #4
    3114:	4013      	ands	r3, r2
    3116:	d100      	bne.n	311a <nm_clkless_wake+0x196>
    3118:	e75d      	b.n	2fd6 <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    311a:	230f      	movs	r3, #15
    311c:	18fb      	adds	r3, r7, r3
    311e:	781b      	ldrb	r3, [r3, #0]
    3120:	b25b      	sxtb	r3, r3
}
    3122:	0018      	movs	r0, r3
    3124:	46bd      	mov	sp, r7
    3126:	b005      	add	sp, #20
    3128:	bd90      	pop	{r4, r7, pc}
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	00000d6d 	.word	0x00000d6d
    3130:	000036dd 	.word	0x000036dd
    3134:	0000cce8 	.word	0x0000cce8
    3138:	0000cbc0 	.word	0x0000cbc0
    313c:	0000b081 	.word	0x0000b081
    3140:	0000cbd4 	.word	0x0000cbd4
    3144:	0000b1a1 	.word	0x0000b1a1
    3148:	0000b0b5 	.word	0x0000b0b5
    314c:	00003701 	.word	0x00003701
    3150:	20000014 	.word	0x20000014
    3154:	0000cbf4 	.word	0x0000cbf4
    3158:	0000cc14 	.word	0x0000cc14
    315c:	0000afad 	.word	0x0000afad

00003160 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    3160:	b590      	push	{r4, r7, lr}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    3166:	1dfc      	adds	r4, r7, #7
    3168:	003b      	movs	r3, r7
    316a:	4a29      	ldr	r2, [pc, #164]	; (3210 <enable_interrupts+0xb0>)
    316c:	0019      	movs	r1, r3
    316e:	0010      	movs	r0, r2
    3170:	4b28      	ldr	r3, [pc, #160]	; (3214 <enable_interrupts+0xb4>)
    3172:	4798      	blx	r3
    3174:	0003      	movs	r3, r0
    3176:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3178:	1dfb      	adds	r3, r7, #7
    317a:	781b      	ldrb	r3, [r3, #0]
    317c:	b25b      	sxtb	r3, r3
    317e:	2b00      	cmp	r3, #0
    3180:	d002      	beq.n	3188 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    3182:	2306      	movs	r3, #6
    3184:	425b      	negs	r3, r3
    3186:	e03f      	b.n	3208 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    3188:	683b      	ldr	r3, [r7, #0]
    318a:	2280      	movs	r2, #128	; 0x80
    318c:	0052      	lsls	r2, r2, #1
    318e:	4313      	orrs	r3, r2
    3190:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    3192:	683b      	ldr	r3, [r7, #0]
    3194:	1dfc      	adds	r4, r7, #7
    3196:	4a1e      	ldr	r2, [pc, #120]	; (3210 <enable_interrupts+0xb0>)
    3198:	0019      	movs	r1, r3
    319a:	0010      	movs	r0, r2
    319c:	4b1e      	ldr	r3, [pc, #120]	; (3218 <enable_interrupts+0xb8>)
    319e:	4798      	blx	r3
    31a0:	0003      	movs	r3, r0
    31a2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31a4:	1dfb      	adds	r3, r7, #7
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	b25b      	sxtb	r3, r3
    31aa:	2b00      	cmp	r3, #0
    31ac:	d002      	beq.n	31b4 <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    31ae:	2306      	movs	r3, #6
    31b0:	425b      	negs	r3, r3
    31b2:	e029      	b.n	3208 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    31b4:	1dfc      	adds	r4, r7, #7
    31b6:	003a      	movs	r2, r7
    31b8:	23d0      	movs	r3, #208	; 0xd0
    31ba:	015b      	lsls	r3, r3, #5
    31bc:	0011      	movs	r1, r2
    31be:	0018      	movs	r0, r3
    31c0:	4b14      	ldr	r3, [pc, #80]	; (3214 <enable_interrupts+0xb4>)
    31c2:	4798      	blx	r3
    31c4:	0003      	movs	r3, r0
    31c6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31c8:	1dfb      	adds	r3, r7, #7
    31ca:	781b      	ldrb	r3, [r3, #0]
    31cc:	b25b      	sxtb	r3, r3
    31ce:	2b00      	cmp	r3, #0
    31d0:	d002      	beq.n	31d8 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    31d2:	2306      	movs	r3, #6
    31d4:	425b      	negs	r3, r3
    31d6:	e017      	b.n	3208 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    31d8:	683b      	ldr	r3, [r7, #0]
    31da:	2280      	movs	r2, #128	; 0x80
    31dc:	0252      	lsls	r2, r2, #9
    31de:	4313      	orrs	r3, r2
    31e0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    31e2:	683a      	ldr	r2, [r7, #0]
    31e4:	1dfc      	adds	r4, r7, #7
    31e6:	23d0      	movs	r3, #208	; 0xd0
    31e8:	015b      	lsls	r3, r3, #5
    31ea:	0011      	movs	r1, r2
    31ec:	0018      	movs	r0, r3
    31ee:	4b0a      	ldr	r3, [pc, #40]	; (3218 <enable_interrupts+0xb8>)
    31f0:	4798      	blx	r3
    31f2:	0003      	movs	r3, r0
    31f4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31f6:	1dfb      	adds	r3, r7, #7
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	b25b      	sxtb	r3, r3
    31fc:	2b00      	cmp	r3, #0
    31fe:	d002      	beq.n	3206 <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    3200:	2306      	movs	r3, #6
    3202:	425b      	negs	r3, r3
    3204:	e000      	b.n	3208 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    3206:	2300      	movs	r3, #0
}
    3208:	0018      	movs	r0, r3
    320a:	46bd      	mov	sp, r7
    320c:	b003      	add	sp, #12
    320e:	bd90      	pop	{r4, r7, pc}
    3210:	00001408 	.word	0x00001408
    3214:	000036dd 	.word	0x000036dd
    3218:	00003701 	.word	0x00003701

0000321c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    321c:	b580      	push	{r7, lr}
    321e:	b082      	sub	sp, #8
    3220:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    3222:	4b32      	ldr	r3, [pc, #200]	; (32ec <nmi_get_chipid+0xd0>)
    3224:	681b      	ldr	r3, [r3, #0]
    3226:	2b00      	cmp	r3, #0
    3228:	d159      	bne.n	32de <nmi_get_chipid+0xc2>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    322a:	4a30      	ldr	r2, [pc, #192]	; (32ec <nmi_get_chipid+0xd0>)
    322c:	2380      	movs	r3, #128	; 0x80
    322e:	015b      	lsls	r3, r3, #5
    3230:	0011      	movs	r1, r2
    3232:	0018      	movs	r0, r3
    3234:	4b2e      	ldr	r3, [pc, #184]	; (32f0 <nmi_get_chipid+0xd4>)
    3236:	4798      	blx	r3
    3238:	1e03      	subs	r3, r0, #0
    323a:	d004      	beq.n	3246 <nmi_get_chipid+0x2a>
			chipid = 0;
    323c:	4b2b      	ldr	r3, [pc, #172]	; (32ec <nmi_get_chipid+0xd0>)
    323e:	2200      	movs	r2, #0
    3240:	601a      	str	r2, [r3, #0]
			return 0;
    3242:	2300      	movs	r3, #0
    3244:	e04d      	b.n	32e2 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    3246:	1d3b      	adds	r3, r7, #4
    3248:	4a2a      	ldr	r2, [pc, #168]	; (32f4 <nmi_get_chipid+0xd8>)
    324a:	0019      	movs	r1, r3
    324c:	0010      	movs	r0, r2
    324e:	4b28      	ldr	r3, [pc, #160]	; (32f0 <nmi_get_chipid+0xd4>)
    3250:	4798      	blx	r3
    3252:	1e03      	subs	r3, r0, #0
    3254:	d004      	beq.n	3260 <nmi_get_chipid+0x44>
			chipid = 0;
    3256:	4b25      	ldr	r3, [pc, #148]	; (32ec <nmi_get_chipid+0xd0>)
    3258:	2200      	movs	r2, #0
    325a:	601a      	str	r2, [r3, #0]
			return 0;
    325c:	2300      	movs	r3, #0
    325e:	e040      	b.n	32e2 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    3260:	4b22      	ldr	r3, [pc, #136]	; (32ec <nmi_get_chipid+0xd0>)
    3262:	681b      	ldr	r3, [r3, #0]
    3264:	4a24      	ldr	r2, [pc, #144]	; (32f8 <nmi_get_chipid+0xdc>)
    3266:	4293      	cmp	r3, r2
    3268:	d106      	bne.n	3278 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	2b01      	cmp	r3, #1
    326e:	d029      	beq.n	32c4 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    3270:	4b1e      	ldr	r3, [pc, #120]	; (32ec <nmi_get_chipid+0xd0>)
    3272:	4a22      	ldr	r2, [pc, #136]	; (32fc <nmi_get_chipid+0xe0>)
    3274:	601a      	str	r2, [r3, #0]
    3276:	e025      	b.n	32c4 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    3278:	4b1c      	ldr	r3, [pc, #112]	; (32ec <nmi_get_chipid+0xd0>)
    327a:	681b      	ldr	r3, [r3, #0]
    327c:	4a20      	ldr	r2, [pc, #128]	; (3300 <nmi_get_chipid+0xe4>)
    327e:	4293      	cmp	r3, r2
    3280:	d10d      	bne.n	329e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	2b03      	cmp	r3, #3
    3286:	d01d      	beq.n	32c4 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	2b04      	cmp	r3, #4
    328c:	d103      	bne.n	3296 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    328e:	4b17      	ldr	r3, [pc, #92]	; (32ec <nmi_get_chipid+0xd0>)
    3290:	4a1c      	ldr	r2, [pc, #112]	; (3304 <nmi_get_chipid+0xe8>)
    3292:	601a      	str	r2, [r3, #0]
    3294:	e016      	b.n	32c4 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    3296:	4b15      	ldr	r3, [pc, #84]	; (32ec <nmi_get_chipid+0xd0>)
    3298:	4a1b      	ldr	r2, [pc, #108]	; (3308 <nmi_get_chipid+0xec>)
    329a:	601a      	str	r2, [r3, #0]
    329c:	e012      	b.n	32c4 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1000F0) { 
    329e:	4b13      	ldr	r3, [pc, #76]	; (32ec <nmi_get_chipid+0xd0>)
    32a0:	681b      	ldr	r3, [r3, #0]
    32a2:	4a1a      	ldr	r2, [pc, #104]	; (330c <nmi_get_chipid+0xf0>)
    32a4:	4293      	cmp	r3, r2
    32a6:	d10d      	bne.n	32c4 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    32a8:	4a10      	ldr	r2, [pc, #64]	; (32ec <nmi_get_chipid+0xd0>)
    32aa:	23ec      	movs	r3, #236	; 0xec
    32ac:	039b      	lsls	r3, r3, #14
    32ae:	0011      	movs	r1, r2
    32b0:	0018      	movs	r0, r3
    32b2:	4b0f      	ldr	r3, [pc, #60]	; (32f0 <nmi_get_chipid+0xd4>)
    32b4:	4798      	blx	r3
    32b6:	1e03      	subs	r3, r0, #0
    32b8:	d004      	beq.n	32c4 <nmi_get_chipid+0xa8>
			chipid = 0;
    32ba:	4b0c      	ldr	r3, [pc, #48]	; (32ec <nmi_get_chipid+0xd0>)
    32bc:	2200      	movs	r2, #0
    32be:	601a      	str	r2, [r3, #0]
			return 0;
    32c0:	2300      	movs	r3, #0
    32c2:	e00e      	b.n	32e2 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    32c4:	4b09      	ldr	r3, [pc, #36]	; (32ec <nmi_get_chipid+0xd0>)
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	4a11      	ldr	r2, [pc, #68]	; (3310 <nmi_get_chipid+0xf4>)
    32ca:	401a      	ands	r2, r3
    32cc:	4b07      	ldr	r3, [pc, #28]	; (32ec <nmi_get_chipid+0xd0>)
    32ce:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    32d0:	4b06      	ldr	r3, [pc, #24]	; (32ec <nmi_get_chipid+0xd0>)
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	22a0      	movs	r2, #160	; 0xa0
    32d6:	02d2      	lsls	r2, r2, #11
    32d8:	431a      	orrs	r2, r3
    32da:	4b04      	ldr	r3, [pc, #16]	; (32ec <nmi_get_chipid+0xd0>)
    32dc:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    32de:	4b03      	ldr	r3, [pc, #12]	; (32ec <nmi_get_chipid+0xd0>)
    32e0:	681b      	ldr	r3, [r3, #0]
}
    32e2:	0018      	movs	r0, r3
    32e4:	46bd      	mov	sp, r7
    32e6:	b002      	add	sp, #8
    32e8:	bd80      	pop	{r7, pc}
    32ea:	46c0      	nop			; (mov r8, r8)
    32ec:	200000c4 	.word	0x200000c4
    32f0:	000036dd 	.word	0x000036dd
    32f4:	000013f4 	.word	0x000013f4
    32f8:	001002a0 	.word	0x001002a0
    32fc:	001002a1 	.word	0x001002a1
    3300:	001002b0 	.word	0x001002b0
    3304:	001002b1 	.word	0x001002b1
    3308:	001002b2 	.word	0x001002b2
    330c:	001000f0 	.word	0x001000f0
    3310:	fff0ffff 	.word	0xfff0ffff

00003314 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    3314:	b580      	push	{r7, lr}
    3316:	b086      	sub	sp, #24
    3318:	af00      	add	r7, sp, #0
    331a:	0002      	movs	r2, r0
    331c:	1dfb      	adds	r3, r7, #7
    331e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    3320:	230b      	movs	r3, #11
    3322:	18fb      	adds	r3, r7, r3
    3324:	2200      	movs	r2, #0
    3326:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    3328:	2300      	movs	r3, #0
    332a:	617b      	str	r3, [r7, #20]
    332c:	2300      	movs	r3, #0
    332e:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
    3330:	2300      	movs	r3, #0
    3332:	60fb      	str	r3, [r7, #12]

	reg = 0;
    3334:	2300      	movs	r3, #0
    3336:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    3338:	4b3b      	ldr	r3, [pc, #236]	; (3428 <wait_for_bootrom+0x114>)
    333a:	0018      	movs	r0, r3
    333c:	4b3b      	ldr	r3, [pc, #236]	; (342c <wait_for_bootrom+0x118>)
    333e:	4798      	blx	r3
    3340:	0003      	movs	r3, r0
    3342:	617b      	str	r3, [r7, #20]
		if (reg & 0x80000000) {
    3344:	697b      	ldr	r3, [r7, #20]
    3346:	2b00      	cmp	r3, #0
    3348:	db03      	blt.n	3352 <wait_for_bootrom+0x3e>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    334a:	2001      	movs	r0, #1
    334c:	4b38      	ldr	r3, [pc, #224]	; (3430 <wait_for_bootrom+0x11c>)
    334e:	4798      	blx	r3
	}
    3350:	e7f2      	b.n	3338 <wait_for_bootrom+0x24>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    3352:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    3354:	4b37      	ldr	r3, [pc, #220]	; (3434 <wait_for_bootrom+0x120>)
    3356:	0018      	movs	r0, r3
    3358:	4b34      	ldr	r3, [pc, #208]	; (342c <wait_for_bootrom+0x118>)
    335a:	4798      	blx	r3
    335c:	0003      	movs	r3, r0
    335e:	617b      	str	r3, [r7, #20]
	reg &= 0x1;
    3360:	697b      	ldr	r3, [r7, #20]
    3362:	2201      	movs	r2, #1
    3364:	4013      	ands	r3, r2
    3366:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    3368:	697b      	ldr	r3, [r7, #20]
    336a:	2b00      	cmp	r3, #0
    336c:	d112      	bne.n	3394 <wait_for_bootrom+0x80>
	{
		reg = 0;
    336e:	2300      	movs	r3, #0
    3370:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
    3372:	e00b      	b.n	338c <wait_for_bootrom+0x78>
		{
			nm_bsp_sleep(1);
    3374:	2001      	movs	r0, #1
    3376:	4b2e      	ldr	r3, [pc, #184]	; (3430 <wait_for_bootrom+0x11c>)
    3378:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    337a:	4b2f      	ldr	r3, [pc, #188]	; (3438 <wait_for_bootrom+0x124>)
    337c:	0018      	movs	r0, r3
    337e:	4b2b      	ldr	r3, [pc, #172]	; (342c <wait_for_bootrom+0x118>)
    3380:	4798      	blx	r3
    3382:	0003      	movs	r3, r0
    3384:	617b      	str	r3, [r7, #20]

			if(++cnt > TIMEOUT)
    3386:	693b      	ldr	r3, [r7, #16]
    3388:	3301      	adds	r3, #1
    338a:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    338c:	697b      	ldr	r3, [r7, #20]
    338e:	4a2b      	ldr	r2, [pc, #172]	; (343c <wait_for_bootrom+0x128>)
    3390:	4293      	cmp	r3, r2
    3392:	d1ef      	bne.n	3374 <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    3394:	1dfb      	adds	r3, r7, #7
    3396:	781b      	ldrb	r3, [r3, #0]
    3398:	2b02      	cmp	r3, #2
    339a:	d10d      	bne.n	33b8 <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    339c:	4a28      	ldr	r2, [pc, #160]	; (3440 <wait_for_bootrom+0x12c>)
    339e:	4b29      	ldr	r3, [pc, #164]	; (3444 <wait_for_bootrom+0x130>)
    33a0:	0011      	movs	r1, r2
    33a2:	0018      	movs	r0, r3
    33a4:	4b28      	ldr	r3, [pc, #160]	; (3448 <wait_for_bootrom+0x134>)
    33a6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    33a8:	2380      	movs	r3, #128	; 0x80
    33aa:	035b      	lsls	r3, r3, #13
    33ac:	4a27      	ldr	r2, [pc, #156]	; (344c <wait_for_bootrom+0x138>)
    33ae:	0019      	movs	r1, r3
    33b0:	0010      	movs	r0, r2
    33b2:	4b25      	ldr	r3, [pc, #148]	; (3448 <wait_for_bootrom+0x134>)
    33b4:	4798      	blx	r3
    33b6:	e015      	b.n	33e4 <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    33b8:	1dfb      	adds	r3, r7, #7
    33ba:	781b      	ldrb	r3, [r3, #0]
    33bc:	2b03      	cmp	r3, #3
    33be:	d10b      	bne.n	33d8 <wait_for_bootrom+0xc4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    33c0:	4a1f      	ldr	r2, [pc, #124]	; (3440 <wait_for_bootrom+0x12c>)
    33c2:	4b20      	ldr	r3, [pc, #128]	; (3444 <wait_for_bootrom+0x130>)
    33c4:	0011      	movs	r1, r2
    33c6:	0018      	movs	r0, r3
    33c8:	4b1f      	ldr	r3, [pc, #124]	; (3448 <wait_for_bootrom+0x134>)
    33ca:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    33cc:	4b1f      	ldr	r3, [pc, #124]	; (344c <wait_for_bootrom+0x138>)
    33ce:	2100      	movs	r1, #0
    33d0:	0018      	movs	r0, r3
    33d2:	4b1d      	ldr	r3, [pc, #116]	; (3448 <wait_for_bootrom+0x134>)
    33d4:	4798      	blx	r3
    33d6:	e005      	b.n	33e4 <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    33d8:	1dfb      	adds	r3, r7, #7
    33da:	781b      	ldrb	r3, [r3, #0]
    33dc:	2b04      	cmp	r3, #4
    33de:	d101      	bne.n	33e4 <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    33e0:	2380      	movs	r3, #128	; 0x80
    33e2:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    33e4:	4b1a      	ldr	r3, [pc, #104]	; (3450 <wait_for_bootrom+0x13c>)
    33e6:	4798      	blx	r3
    33e8:	0003      	movs	r3, r0
    33ea:	051b      	lsls	r3, r3, #20
    33ec:	0d1a      	lsrs	r2, r3, #20
    33ee:	23e8      	movs	r3, #232	; 0xe8
    33f0:	009b      	lsls	r3, r3, #2
    33f2:	429a      	cmp	r2, r3
    33f4:	d106      	bne.n	3404 <wait_for_bootrom+0xf0>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    33f6:	68fb      	ldr	r3, [r7, #12]
    33f8:	2202      	movs	r2, #2
    33fa:	4313      	orrs	r3, r2
    33fc:	0018      	movs	r0, r3
    33fe:	4b15      	ldr	r3, [pc, #84]	; (3454 <wait_for_bootrom+0x140>)
    3400:	4798      	blx	r3
    3402:	e003      	b.n	340c <wait_for_bootrom+0xf8>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	0018      	movs	r0, r3
    3408:	4b12      	ldr	r3, [pc, #72]	; (3454 <wait_for_bootrom+0x140>)
    340a:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    340c:	4a12      	ldr	r2, [pc, #72]	; (3458 <wait_for_bootrom+0x144>)
    340e:	4b0a      	ldr	r3, [pc, #40]	; (3438 <wait_for_bootrom+0x124>)
    3410:	0011      	movs	r1, r2
    3412:	0018      	movs	r0, r3
    3414:	4b0c      	ldr	r3, [pc, #48]	; (3448 <wait_for_bootrom+0x134>)
    3416:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    3418:	230b      	movs	r3, #11
    341a:	18fb      	adds	r3, r7, r3
    341c:	781b      	ldrb	r3, [r3, #0]
    341e:	b25b      	sxtb	r3, r3
}
    3420:	0018      	movs	r0, r3
    3422:	46bd      	mov	sp, r7
    3424:	b006      	add	sp, #24
    3426:	bd80      	pop	{r7, pc}
    3428:	00001014 	.word	0x00001014
    342c:	000036bd 	.word	0x000036bd
    3430:	00000d6d 	.word	0x00000d6d
    3434:	000207bc 	.word	0x000207bc
    3438:	000c000c 	.word	0x000c000c
    343c:	10add09e 	.word	0x10add09e
    3440:	3c1cd57d 	.word	0x3c1cd57d
    3444:	000207ac 	.word	0x000207ac
    3448:	00003701 	.word	0x00003701
    344c:	0000108c 	.word	0x0000108c
    3450:	0000321d 	.word	0x0000321d
    3454:	00002f11 	.word	0x00002f11
    3458:	ef522f61 	.word	0xef522f61

0000345c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    345c:	b580      	push	{r7, lr}
    345e:	b088      	sub	sp, #32
    3460:	af00      	add	r7, sp, #0
    3462:	0002      	movs	r2, r0
    3464:	1dfb      	adds	r3, r7, #7
    3466:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    3468:	231f      	movs	r3, #31
    346a:	18fb      	adds	r3, r7, r3
    346c:	2200      	movs	r2, #0
    346e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    3470:	2300      	movs	r3, #0
    3472:	61bb      	str	r3, [r7, #24]
    3474:	2300      	movs	r3, #0
    3476:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    3478:	2301      	movs	r3, #1
    347a:	425b      	negs	r3, r3
    347c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    347e:	4b1d      	ldr	r3, [pc, #116]	; (34f4 <wait_for_firmware_start+0x98>)
    3480:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    3482:	4b1d      	ldr	r3, [pc, #116]	; (34f8 <wait_for_firmware_start+0x9c>)
    3484:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    3486:	1dfb      	adds	r3, r7, #7
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	2b02      	cmp	r3, #2
    348c:	d003      	beq.n	3496 <wait_for_firmware_start+0x3a>
    348e:	1dfb      	adds	r3, r7, #7
    3490:	781b      	ldrb	r3, [r3, #0]
    3492:	2b03      	cmp	r3, #3
    3494:	d119      	bne.n	34ca <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    3496:	4b19      	ldr	r3, [pc, #100]	; (34fc <wait_for_firmware_start+0xa0>)
    3498:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    349a:	4b19      	ldr	r3, [pc, #100]	; (3500 <wait_for_firmware_start+0xa4>)
    349c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    349e:	e014      	b.n	34ca <wait_for_firmware_start+0x6e>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    34a0:	2002      	movs	r0, #2
    34a2:	4b18      	ldr	r3, [pc, #96]	; (3504 <wait_for_firmware_start+0xa8>)
    34a4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    34a6:	68fb      	ldr	r3, [r7, #12]
    34a8:	0018      	movs	r0, r3
    34aa:	4b17      	ldr	r3, [pc, #92]	; (3508 <wait_for_firmware_start+0xac>)
    34ac:	4798      	blx	r3
    34ae:	0003      	movs	r3, r0
    34b0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    34b2:	697b      	ldr	r3, [r7, #20]
    34b4:	3301      	adds	r3, #1
    34b6:	617b      	str	r3, [r7, #20]
    34b8:	697a      	ldr	r2, [r7, #20]
    34ba:	693b      	ldr	r3, [r7, #16]
    34bc:	429a      	cmp	r2, r3
    34be:	d304      	bcc.n	34ca <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    34c0:	231f      	movs	r3, #31
    34c2:	18fb      	adds	r3, r7, r3
    34c4:	22fb      	movs	r2, #251	; 0xfb
    34c6:	701a      	strb	r2, [r3, #0]
			goto ERR;
    34c8:	e00c      	b.n	34e4 <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    34ca:	68ba      	ldr	r2, [r7, #8]
    34cc:	69bb      	ldr	r3, [r7, #24]
    34ce:	429a      	cmp	r2, r3
    34d0:	d1e6      	bne.n	34a0 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    34d2:	68bb      	ldr	r3, [r7, #8]
    34d4:	4a08      	ldr	r2, [pc, #32]	; (34f8 <wait_for_firmware_start+0x9c>)
    34d6:	4293      	cmp	r3, r2
    34d8:	d104      	bne.n	34e4 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    34da:	4b06      	ldr	r3, [pc, #24]	; (34f4 <wait_for_firmware_start+0x98>)
    34dc:	2100      	movs	r1, #0
    34de:	0018      	movs	r0, r3
    34e0:	4b0a      	ldr	r3, [pc, #40]	; (350c <wait_for_firmware_start+0xb0>)
    34e2:	4798      	blx	r3
	}
ERR:
	return ret;
    34e4:	231f      	movs	r3, #31
    34e6:	18fb      	adds	r3, r7, r3
    34e8:	781b      	ldrb	r3, [r3, #0]
    34ea:	b25b      	sxtb	r3, r3
}
    34ec:	0018      	movs	r0, r3
    34ee:	46bd      	mov	sp, r7
    34f0:	b008      	add	sp, #32
    34f2:	bd80      	pop	{r7, pc}
    34f4:	0000108c 	.word	0x0000108c
    34f8:	02532636 	.word	0x02532636
    34fc:	000207ac 	.word	0x000207ac
    3500:	d75dc1c3 	.word	0xd75dc1c3
    3504:	00000d6d 	.word	0x00000d6d
    3508:	000036bd 	.word	0x000036bd
    350c:	00003701 	.word	0x00003701

00003510 <chip_deinit>:

sint8 chip_deinit(void)
{
    3510:	b590      	push	{r4, r7, lr}
    3512:	b083      	sub	sp, #12
    3514:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    3516:	2300      	movs	r3, #0
    3518:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    351a:	1dbb      	adds	r3, r7, #6
    351c:	220a      	movs	r2, #10
    351e:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    3520:	1dfc      	adds	r4, r7, #7
    3522:	003a      	movs	r2, r7
    3524:	23a0      	movs	r3, #160	; 0xa0
    3526:	015b      	lsls	r3, r3, #5
    3528:	0011      	movs	r1, r2
    352a:	0018      	movs	r0, r3
    352c:	4b3f      	ldr	r3, [pc, #252]	; (362c <chip_deinit+0x11c>)
    352e:	4798      	blx	r3
    3530:	0003      	movs	r3, r0
    3532:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    3534:	1dfb      	adds	r3, r7, #7
    3536:	781b      	ldrb	r3, [r3, #0]
    3538:	b25b      	sxtb	r3, r3
    353a:	2b00      	cmp	r3, #0
    353c:	d00c      	beq.n	3558 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    353e:	4a3c      	ldr	r2, [pc, #240]	; (3630 <chip_deinit+0x120>)
    3540:	493c      	ldr	r1, [pc, #240]	; (3634 <chip_deinit+0x124>)
    3542:	4b3d      	ldr	r3, [pc, #244]	; (3638 <chip_deinit+0x128>)
    3544:	0018      	movs	r0, r3
    3546:	4b3d      	ldr	r3, [pc, #244]	; (363c <chip_deinit+0x12c>)
    3548:	4798      	blx	r3
    354a:	4b3d      	ldr	r3, [pc, #244]	; (3640 <chip_deinit+0x130>)
    354c:	0018      	movs	r0, r3
    354e:	4b3d      	ldr	r3, [pc, #244]	; (3644 <chip_deinit+0x134>)
    3550:	4798      	blx	r3
    3552:	200d      	movs	r0, #13
    3554:	4b3c      	ldr	r3, [pc, #240]	; (3648 <chip_deinit+0x138>)
    3556:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    3558:	683b      	ldr	r3, [r7, #0]
    355a:	4a3c      	ldr	r2, [pc, #240]	; (364c <chip_deinit+0x13c>)
    355c:	4013      	ands	r3, r2
    355e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    3560:	683a      	ldr	r2, [r7, #0]
    3562:	1dfc      	adds	r4, r7, #7
    3564:	23a0      	movs	r3, #160	; 0xa0
    3566:	015b      	lsls	r3, r3, #5
    3568:	0011      	movs	r1, r2
    356a:	0018      	movs	r0, r3
    356c:	4b38      	ldr	r3, [pc, #224]	; (3650 <chip_deinit+0x140>)
    356e:	4798      	blx	r3
    3570:	0003      	movs	r3, r0
    3572:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    3574:	1dfb      	adds	r3, r7, #7
    3576:	781b      	ldrb	r3, [r3, #0]
    3578:	b25b      	sxtb	r3, r3
    357a:	2b00      	cmp	r3, #0
    357c:	d010      	beq.n	35a0 <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    357e:	4a35      	ldr	r2, [pc, #212]	; (3654 <chip_deinit+0x144>)
    3580:	492c      	ldr	r1, [pc, #176]	; (3634 <chip_deinit+0x124>)
    3582:	4b2d      	ldr	r3, [pc, #180]	; (3638 <chip_deinit+0x128>)
    3584:	0018      	movs	r0, r3
    3586:	4b2d      	ldr	r3, [pc, #180]	; (363c <chip_deinit+0x12c>)
    3588:	4798      	blx	r3
    358a:	4b33      	ldr	r3, [pc, #204]	; (3658 <chip_deinit+0x148>)
    358c:	0018      	movs	r0, r3
    358e:	4b2d      	ldr	r3, [pc, #180]	; (3644 <chip_deinit+0x134>)
    3590:	4798      	blx	r3
    3592:	200d      	movs	r0, #13
    3594:	4b2c      	ldr	r3, [pc, #176]	; (3648 <chip_deinit+0x138>)
    3596:	4798      	blx	r3
		return ret;
    3598:	1dfb      	adds	r3, r7, #7
    359a:	781b      	ldrb	r3, [r3, #0]
    359c:	b25b      	sxtb	r3, r3
    359e:	e041      	b.n	3624 <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    35a0:	1dfc      	adds	r4, r7, #7
    35a2:	003a      	movs	r2, r7
    35a4:	23a0      	movs	r3, #160	; 0xa0
    35a6:	015b      	lsls	r3, r3, #5
    35a8:	0011      	movs	r1, r2
    35aa:	0018      	movs	r0, r3
    35ac:	4b1f      	ldr	r3, [pc, #124]	; (362c <chip_deinit+0x11c>)
    35ae:	4798      	blx	r3
    35b0:	0003      	movs	r3, r0
    35b2:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    35b4:	1dfb      	adds	r3, r7, #7
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	b25b      	sxtb	r3, r3
    35ba:	2b00      	cmp	r3, #0
    35bc:	d011      	beq.n	35e2 <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    35be:	238f      	movs	r3, #143	; 0x8f
    35c0:	009a      	lsls	r2, r3, #2
    35c2:	491c      	ldr	r1, [pc, #112]	; (3634 <chip_deinit+0x124>)
    35c4:	4b1c      	ldr	r3, [pc, #112]	; (3638 <chip_deinit+0x128>)
    35c6:	0018      	movs	r0, r3
    35c8:	4b1c      	ldr	r3, [pc, #112]	; (363c <chip_deinit+0x12c>)
    35ca:	4798      	blx	r3
    35cc:	4b23      	ldr	r3, [pc, #140]	; (365c <chip_deinit+0x14c>)
    35ce:	0018      	movs	r0, r3
    35d0:	4b1c      	ldr	r3, [pc, #112]	; (3644 <chip_deinit+0x134>)
    35d2:	4798      	blx	r3
    35d4:	200d      	movs	r0, #13
    35d6:	4b1c      	ldr	r3, [pc, #112]	; (3648 <chip_deinit+0x138>)
    35d8:	4798      	blx	r3
			return ret;
    35da:	1dfb      	adds	r3, r7, #7
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	b25b      	sxtb	r3, r3
    35e0:	e020      	b.n	3624 <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    35e2:	683a      	ldr	r2, [r7, #0]
    35e4:	2380      	movs	r3, #128	; 0x80
    35e6:	00db      	lsls	r3, r3, #3
    35e8:	4013      	ands	r3, r2
    35ea:	d017      	beq.n	361c <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    35ec:	683b      	ldr	r3, [r7, #0]
    35ee:	4a17      	ldr	r2, [pc, #92]	; (364c <chip_deinit+0x13c>)
    35f0:	4013      	ands	r3, r2
    35f2:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    35f4:	683a      	ldr	r2, [r7, #0]
    35f6:	1dfc      	adds	r4, r7, #7
    35f8:	23a0      	movs	r3, #160	; 0xa0
    35fa:	015b      	lsls	r3, r3, #5
    35fc:	0011      	movs	r1, r2
    35fe:	0018      	movs	r0, r3
    3600:	4b13      	ldr	r3, [pc, #76]	; (3650 <chip_deinit+0x140>)
    3602:	4798      	blx	r3
    3604:	0003      	movs	r3, r0
    3606:	7023      	strb	r3, [r4, #0]
			timeout--;
    3608:	1dbb      	adds	r3, r7, #6
    360a:	781a      	ldrb	r2, [r3, #0]
    360c:	1dbb      	adds	r3, r7, #6
    360e:	3a01      	subs	r2, #1
    3610:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    3612:	1dbb      	adds	r3, r7, #6
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	2b00      	cmp	r3, #0
    3618:	d1c2      	bne.n	35a0 <chip_deinit+0x90>
    361a:	e000      	b.n	361e <chip_deinit+0x10e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    361c:	46c0      	nop			; (mov r8, r8)
		}

	} while (timeout);

	return ret;
    361e:	1dfb      	adds	r3, r7, #7
    3620:	781b      	ldrb	r3, [r3, #0]
    3622:	b25b      	sxtb	r3, r3
}
    3624:	0018      	movs	r0, r3
    3626:	46bd      	mov	sp, r7
    3628:	b003      	add	sp, #12
    362a:	bd90      	pop	{r4, r7, pc}
    362c:	000036dd 	.word	0x000036dd
    3630:	0000022f 	.word	0x0000022f
    3634:	0000ccf8 	.word	0x0000ccf8
    3638:	0000cbc0 	.word	0x0000cbc0
    363c:	0000b081 	.word	0x0000b081
    3640:	0000cc60 	.word	0x0000cc60
    3644:	0000b1a1 	.word	0x0000b1a1
    3648:	0000b0b5 	.word	0x0000b0b5
    364c:	fffffbff 	.word	0xfffffbff
    3650:	00003701 	.word	0x00003701
    3654:	00000235 	.word	0x00000235
    3658:	0000cc78 	.word	0x0000cc78
    365c:	0000cc90 	.word	0x0000cc90

00003660 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    3660:	b590      	push	{r4, r7, lr}
    3662:	b085      	sub	sp, #20
    3664:	af00      	add	r7, sp, #0
    3666:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3668:	230f      	movs	r3, #15
    366a:	18fb      	adds	r3, r7, r3
    366c:	2200      	movs	r2, #0
    366e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    3670:	230f      	movs	r3, #15
    3672:	18fc      	adds	r4, r7, r3
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	0018      	movs	r0, r3
    3678:	4b05      	ldr	r3, [pc, #20]	; (3690 <nm_bus_iface_init+0x30>)
    367a:	4798      	blx	r3
    367c:	0003      	movs	r3, r0
    367e:	7023      	strb	r3, [r4, #0]

	return ret;
    3680:	230f      	movs	r3, #15
    3682:	18fb      	adds	r3, r7, r3
    3684:	781b      	ldrb	r3, [r3, #0]
    3686:	b25b      	sxtb	r3, r3
}
    3688:	0018      	movs	r0, r3
    368a:	46bd      	mov	sp, r7
    368c:	b005      	add	sp, #20
    368e:	bd90      	pop	{r4, r7, pc}
    3690:	00001419 	.word	0x00001419

00003694 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    3694:	b590      	push	{r4, r7, lr}
    3696:	b083      	sub	sp, #12
    3698:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    369a:	1dfb      	adds	r3, r7, #7
    369c:	2200      	movs	r2, #0
    369e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    36a0:	1dfc      	adds	r4, r7, #7
    36a2:	4b05      	ldr	r3, [pc, #20]	; (36b8 <nm_bus_iface_deinit+0x24>)
    36a4:	4798      	blx	r3
    36a6:	0003      	movs	r3, r0
    36a8:	7023      	strb	r3, [r4, #0]

	return ret;
    36aa:	1dfb      	adds	r3, r7, #7
    36ac:	781b      	ldrb	r3, [r3, #0]
    36ae:	b25b      	sxtb	r3, r3
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b003      	add	sp, #12
    36b6:	bd90      	pop	{r4, r7, pc}
    36b8:	00001591 	.word	0x00001591

000036bc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    36bc:	b580      	push	{r7, lr}
    36be:	b082      	sub	sp, #8
    36c0:	af00      	add	r7, sp, #0
    36c2:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    36c4:	687b      	ldr	r3, [r7, #4]
    36c6:	0018      	movs	r0, r3
    36c8:	4b03      	ldr	r3, [pc, #12]	; (36d8 <nm_read_reg+0x1c>)
    36ca:	4798      	blx	r3
    36cc:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    36ce:	0018      	movs	r0, r3
    36d0:	46bd      	mov	sp, r7
    36d2:	b002      	add	sp, #8
    36d4:	bd80      	pop	{r7, pc}
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	00004d55 	.word	0x00004d55

000036dc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    36dc:	b580      	push	{r7, lr}
    36de:	b082      	sub	sp, #8
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
    36e4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    36e6:	683a      	ldr	r2, [r7, #0]
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	0011      	movs	r1, r2
    36ec:	0018      	movs	r0, r3
    36ee:	4b03      	ldr	r3, [pc, #12]	; (36fc <nm_read_reg_with_ret+0x20>)
    36f0:	4798      	blx	r3
    36f2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    36f4:	0018      	movs	r0, r3
    36f6:	46bd      	mov	sp, r7
    36f8:	b002      	add	sp, #8
    36fa:	bd80      	pop	{r7, pc}
    36fc:	00004d79 	.word	0x00004d79

00003700 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3700:	b580      	push	{r7, lr}
    3702:	b082      	sub	sp, #8
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
    3708:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    370a:	683a      	ldr	r2, [r7, #0]
    370c:	687b      	ldr	r3, [r7, #4]
    370e:	0011      	movs	r1, r2
    3710:	0018      	movs	r0, r3
    3712:	4b03      	ldr	r3, [pc, #12]	; (3720 <nm_write_reg+0x20>)
    3714:	4798      	blx	r3
    3716:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    3718:	0018      	movs	r0, r3
    371a:	46bd      	mov	sp, r7
    371c:	b002      	add	sp, #8
    371e:	bd80      	pop	{r7, pc}
    3720:	00004dc9 	.word	0x00004dc9

00003724 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3724:	b580      	push	{r7, lr}
    3726:	b084      	sub	sp, #16
    3728:	af00      	add	r7, sp, #0
    372a:	60f8      	str	r0, [r7, #12]
    372c:	60b9      	str	r1, [r7, #8]
    372e:	1dbb      	adds	r3, r7, #6
    3730:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    3732:	1dbb      	adds	r3, r7, #6
    3734:	881a      	ldrh	r2, [r3, #0]
    3736:	68b9      	ldr	r1, [r7, #8]
    3738:	68fb      	ldr	r3, [r7, #12]
    373a:	0018      	movs	r0, r3
    373c:	4b03      	ldr	r3, [pc, #12]	; (374c <p_nm_read_block+0x28>)
    373e:	4798      	blx	r3
    3740:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    3742:	0018      	movs	r0, r3
    3744:	46bd      	mov	sp, r7
    3746:	b004      	add	sp, #16
    3748:	bd80      	pop	{r7, pc}
    374a:	46c0      	nop			; (mov r8, r8)
    374c:	00004e19 	.word	0x00004e19

00003750 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3750:	b580      	push	{r7, lr}
    3752:	b086      	sub	sp, #24
    3754:	af00      	add	r7, sp, #0
    3756:	60f8      	str	r0, [r7, #12]
    3758:	60b9      	str	r1, [r7, #8]
    375a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    375c:	4b2d      	ldr	r3, [pc, #180]	; (3814 <nm_read_block+0xc4>)
    375e:	881a      	ldrh	r2, [r3, #0]
    3760:	2310      	movs	r3, #16
    3762:	18fb      	adds	r3, r7, r3
    3764:	3a08      	subs	r2, #8
    3766:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3768:	2300      	movs	r3, #0
    376a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    376c:	2313      	movs	r3, #19
    376e:	18fb      	adds	r3, r7, r3
    3770:	2200      	movs	r2, #0
    3772:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    3774:	2310      	movs	r3, #16
    3776:	18fb      	adds	r3, r7, r3
    3778:	881a      	ldrh	r2, [r3, #0]
    377a:	687b      	ldr	r3, [r7, #4]
    377c:	429a      	cmp	r2, r3
    377e:	d313      	bcc.n	37a8 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    3780:	68ba      	ldr	r2, [r7, #8]
    3782:	697b      	ldr	r3, [r7, #20]
    3784:	18d1      	adds	r1, r2, r3
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	b29a      	uxth	r2, r3
    378a:	68fb      	ldr	r3, [r7, #12]
    378c:	0018      	movs	r0, r3
    378e:	4b22      	ldr	r3, [pc, #136]	; (3818 <nm_read_block+0xc8>)
    3790:	4798      	blx	r3
    3792:	0003      	movs	r3, r0
    3794:	b2da      	uxtb	r2, r3
    3796:	2313      	movs	r3, #19
    3798:	18fb      	adds	r3, r7, r3
    379a:	781b      	ldrb	r3, [r3, #0]
    379c:	18d3      	adds	r3, r2, r3
    379e:	b2da      	uxtb	r2, r3
    37a0:	2313      	movs	r3, #19
    37a2:	18fb      	adds	r3, r7, r3
    37a4:	701a      	strb	r2, [r3, #0]
			break;
    37a6:	e02d      	b.n	3804 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    37a8:	68ba      	ldr	r2, [r7, #8]
    37aa:	697b      	ldr	r3, [r7, #20]
    37ac:	18d1      	adds	r1, r2, r3
    37ae:	2310      	movs	r3, #16
    37b0:	18fb      	adds	r3, r7, r3
    37b2:	881a      	ldrh	r2, [r3, #0]
    37b4:	68fb      	ldr	r3, [r7, #12]
    37b6:	0018      	movs	r0, r3
    37b8:	4b17      	ldr	r3, [pc, #92]	; (3818 <nm_read_block+0xc8>)
    37ba:	4798      	blx	r3
    37bc:	0003      	movs	r3, r0
    37be:	b2da      	uxtb	r2, r3
    37c0:	2313      	movs	r3, #19
    37c2:	18fb      	adds	r3, r7, r3
    37c4:	781b      	ldrb	r3, [r3, #0]
    37c6:	18d3      	adds	r3, r2, r3
    37c8:	b2da      	uxtb	r2, r3
    37ca:	2313      	movs	r3, #19
    37cc:	18fb      	adds	r3, r7, r3
    37ce:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    37d0:	2313      	movs	r3, #19
    37d2:	18fb      	adds	r3, r7, r3
    37d4:	781b      	ldrb	r3, [r3, #0]
    37d6:	b25b      	sxtb	r3, r3
    37d8:	2b00      	cmp	r3, #0
    37da:	d112      	bne.n	3802 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    37dc:	2310      	movs	r3, #16
    37de:	18fb      	adds	r3, r7, r3
    37e0:	881b      	ldrh	r3, [r3, #0]
    37e2:	687a      	ldr	r2, [r7, #4]
    37e4:	1ad3      	subs	r3, r2, r3
    37e6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    37e8:	2310      	movs	r3, #16
    37ea:	18fb      	adds	r3, r7, r3
    37ec:	881b      	ldrh	r3, [r3, #0]
    37ee:	697a      	ldr	r2, [r7, #20]
    37f0:	18d3      	adds	r3, r2, r3
    37f2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    37f4:	2310      	movs	r3, #16
    37f6:	18fb      	adds	r3, r7, r3
    37f8:	881b      	ldrh	r3, [r3, #0]
    37fa:	68fa      	ldr	r2, [r7, #12]
    37fc:	18d3      	adds	r3, r2, r3
    37fe:	60fb      	str	r3, [r7, #12]
		}
	}
    3800:	e7b8      	b.n	3774 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    3802:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    3804:	2313      	movs	r3, #19
    3806:	18fb      	adds	r3, r7, r3
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	b25b      	sxtb	r3, r3
}
    380c:	0018      	movs	r0, r3
    380e:	46bd      	mov	sp, r7
    3810:	b006      	add	sp, #24
    3812:	bd80      	pop	{r7, pc}
    3814:	20000010 	.word	0x20000010
    3818:	00003725 	.word	0x00003725

0000381c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    381c:	b580      	push	{r7, lr}
    381e:	b084      	sub	sp, #16
    3820:	af00      	add	r7, sp, #0
    3822:	60f8      	str	r0, [r7, #12]
    3824:	60b9      	str	r1, [r7, #8]
    3826:	1dbb      	adds	r3, r7, #6
    3828:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    382a:	1dbb      	adds	r3, r7, #6
    382c:	881a      	ldrh	r2, [r3, #0]
    382e:	68b9      	ldr	r1, [r7, #8]
    3830:	68fb      	ldr	r3, [r7, #12]
    3832:	0018      	movs	r0, r3
    3834:	4b03      	ldr	r3, [pc, #12]	; (3844 <p_nm_write_block+0x28>)
    3836:	4798      	blx	r3
    3838:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    383a:	0018      	movs	r0, r3
    383c:	46bd      	mov	sp, r7
    383e:	b004      	add	sp, #16
    3840:	bd80      	pop	{r7, pc}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	00004e71 	.word	0x00004e71

00003848 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3848:	b580      	push	{r7, lr}
    384a:	b086      	sub	sp, #24
    384c:	af00      	add	r7, sp, #0
    384e:	60f8      	str	r0, [r7, #12]
    3850:	60b9      	str	r1, [r7, #8]
    3852:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    3854:	4b2d      	ldr	r3, [pc, #180]	; (390c <nm_write_block+0xc4>)
    3856:	881a      	ldrh	r2, [r3, #0]
    3858:	2310      	movs	r3, #16
    385a:	18fb      	adds	r3, r7, r3
    385c:	3a08      	subs	r2, #8
    385e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3860:	2300      	movs	r3, #0
    3862:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    3864:	2313      	movs	r3, #19
    3866:	18fb      	adds	r3, r7, r3
    3868:	2200      	movs	r2, #0
    386a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    386c:	2310      	movs	r3, #16
    386e:	18fb      	adds	r3, r7, r3
    3870:	881a      	ldrh	r2, [r3, #0]
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	429a      	cmp	r2, r3
    3876:	d313      	bcc.n	38a0 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    3878:	68ba      	ldr	r2, [r7, #8]
    387a:	697b      	ldr	r3, [r7, #20]
    387c:	18d1      	adds	r1, r2, r3
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	b29a      	uxth	r2, r3
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	0018      	movs	r0, r3
    3886:	4b22      	ldr	r3, [pc, #136]	; (3910 <nm_write_block+0xc8>)
    3888:	4798      	blx	r3
    388a:	0003      	movs	r3, r0
    388c:	b2da      	uxtb	r2, r3
    388e:	2313      	movs	r3, #19
    3890:	18fb      	adds	r3, r7, r3
    3892:	781b      	ldrb	r3, [r3, #0]
    3894:	18d3      	adds	r3, r2, r3
    3896:	b2da      	uxtb	r2, r3
    3898:	2313      	movs	r3, #19
    389a:	18fb      	adds	r3, r7, r3
    389c:	701a      	strb	r2, [r3, #0]
			break;
    389e:	e02d      	b.n	38fc <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    38a0:	68ba      	ldr	r2, [r7, #8]
    38a2:	697b      	ldr	r3, [r7, #20]
    38a4:	18d1      	adds	r1, r2, r3
    38a6:	2310      	movs	r3, #16
    38a8:	18fb      	adds	r3, r7, r3
    38aa:	881a      	ldrh	r2, [r3, #0]
    38ac:	68fb      	ldr	r3, [r7, #12]
    38ae:	0018      	movs	r0, r3
    38b0:	4b17      	ldr	r3, [pc, #92]	; (3910 <nm_write_block+0xc8>)
    38b2:	4798      	blx	r3
    38b4:	0003      	movs	r3, r0
    38b6:	b2da      	uxtb	r2, r3
    38b8:	2313      	movs	r3, #19
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	18d3      	adds	r3, r2, r3
    38c0:	b2da      	uxtb	r2, r3
    38c2:	2313      	movs	r3, #19
    38c4:	18fb      	adds	r3, r7, r3
    38c6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    38c8:	2313      	movs	r3, #19
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	b25b      	sxtb	r3, r3
    38d0:	2b00      	cmp	r3, #0
    38d2:	d112      	bne.n	38fa <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    38d4:	2310      	movs	r3, #16
    38d6:	18fb      	adds	r3, r7, r3
    38d8:	881b      	ldrh	r3, [r3, #0]
    38da:	687a      	ldr	r2, [r7, #4]
    38dc:	1ad3      	subs	r3, r2, r3
    38de:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    38e0:	2310      	movs	r3, #16
    38e2:	18fb      	adds	r3, r7, r3
    38e4:	881b      	ldrh	r3, [r3, #0]
    38e6:	697a      	ldr	r2, [r7, #20]
    38e8:	18d3      	adds	r3, r2, r3
    38ea:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    38ec:	2310      	movs	r3, #16
    38ee:	18fb      	adds	r3, r7, r3
    38f0:	881b      	ldrh	r3, [r3, #0]
    38f2:	68fa      	ldr	r2, [r7, #12]
    38f4:	18d3      	adds	r3, r2, r3
    38f6:	60fb      	str	r3, [r7, #12]
		}
	}
    38f8:	e7b8      	b.n	386c <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    38fa:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    38fc:	2313      	movs	r3, #19
    38fe:	18fb      	adds	r3, r7, r3
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	b25b      	sxtb	r3, r3
}
    3904:	0018      	movs	r0, r3
    3906:	46bd      	mov	sp, r7
    3908:	b006      	add	sp, #24
    390a:	bd80      	pop	{r7, pc}
    390c:	20000010 	.word	0x20000010
    3910:	0000381d 	.word	0x0000381d

00003914 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    3914:	b590      	push	{r4, r7, lr}
    3916:	b087      	sub	sp, #28
    3918:	af00      	add	r7, sp, #0
    391a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    391c:	2300      	movs	r3, #0
    391e:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    3920:	2317      	movs	r3, #23
    3922:	18fb      	adds	r3, r7, r3
    3924:	2200      	movs	r2, #0
    3926:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    3928:	2317      	movs	r3, #23
    392a:	18fc      	adds	r4, r7, r3
    392c:	230c      	movs	r3, #12
    392e:	18fb      	adds	r3, r7, r3
    3930:	4a4c      	ldr	r2, [pc, #304]	; (3a64 <nm_get_firmware_info+0x150>)
    3932:	0019      	movs	r1, r3
    3934:	0010      	movs	r0, r2
    3936:	4b4c      	ldr	r3, [pc, #304]	; (3a68 <nm_get_firmware_info+0x154>)
    3938:	4798      	blx	r3
    393a:	0003      	movs	r3, r0
    393c:	7023      	strb	r3, [r4, #0]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    393e:	68fb      	ldr	r3, [r7, #12]
    3940:	4a4a      	ldr	r2, [pc, #296]	; (3a6c <nm_get_firmware_info+0x158>)
    3942:	4293      	cmp	r3, r2
    3944:	d10a      	bne.n	395c <nm_get_firmware_info+0x48>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    3946:	2317      	movs	r3, #23
    3948:	18fc      	adds	r4, r7, r3
    394a:	230c      	movs	r3, #12
    394c:	18fb      	adds	r3, r7, r3
    394e:	4a48      	ldr	r2, [pc, #288]	; (3a70 <nm_get_firmware_info+0x15c>)
    3950:	0019      	movs	r1, r3
    3952:	0010      	movs	r0, r2
    3954:	4b44      	ldr	r3, [pc, #272]	; (3a68 <nm_get_firmware_info+0x154>)
    3956:	4798      	blx	r3
    3958:	0003      	movs	r3, r0
    395a:	7023      	strb	r3, [r4, #0]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    395c:	68fb      	ldr	r3, [r7, #12]
    395e:	0c1b      	lsrs	r3, r3, #16
    3960:	121b      	asrs	r3, r3, #8
    3962:	b2da      	uxtb	r2, r3
    3964:	687b      	ldr	r3, [r7, #4]
    3966:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	0c1b      	lsrs	r3, r3, #16
    396c:	111b      	asrs	r3, r3, #4
    396e:	b2db      	uxtb	r3, r3
    3970:	220f      	movs	r2, #15
    3972:	4013      	ands	r3, r2
    3974:	b2da      	uxtb	r2, r3
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    397a:	68fb      	ldr	r3, [r7, #12]
    397c:	0c1b      	lsrs	r3, r3, #16
    397e:	b2db      	uxtb	r3, r3
    3980:	220f      	movs	r2, #15
    3982:	4013      	ands	r3, r2
    3984:	b2da      	uxtb	r2, r3
    3986:	687b      	ldr	r3, [r7, #4]
    3988:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    398a:	68fb      	ldr	r3, [r7, #12]
    398c:	121b      	asrs	r3, r3, #8
    398e:	b2da      	uxtb	r2, r3
    3990:	687b      	ldr	r3, [r7, #4]
    3992:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    3994:	68fb      	ldr	r3, [r7, #12]
    3996:	111b      	asrs	r3, r3, #4
    3998:	b2db      	uxtb	r3, r3
    399a:	220f      	movs	r2, #15
    399c:	4013      	ands	r3, r2
    399e:	b2da      	uxtb	r2, r3
    39a0:	687b      	ldr	r3, [r7, #4]
    39a2:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    39a4:	68fb      	ldr	r3, [r7, #12]
    39a6:	b2db      	uxtb	r3, r3
    39a8:	220f      	movs	r2, #15
    39aa:	4013      	ands	r3, r2
    39ac:	b2da      	uxtb	r2, r3
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    39b2:	4b30      	ldr	r3, [pc, #192]	; (3a74 <nm_get_firmware_info+0x160>)
    39b4:	4798      	blx	r3
    39b6:	0002      	movs	r2, r0
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	791b      	ldrb	r3, [r3, #4]
    39c0:	021b      	lsls	r3, r3, #8
    39c2:	b21a      	sxth	r2, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	795b      	ldrb	r3, [r3, #5]
    39c8:	011b      	lsls	r3, r3, #4
    39ca:	b21b      	sxth	r3, r3
    39cc:	21ff      	movs	r1, #255	; 0xff
    39ce:	400b      	ands	r3, r1
    39d0:	b21b      	sxth	r3, r3
    39d2:	4313      	orrs	r3, r2
    39d4:	b21a      	sxth	r2, r3
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	799b      	ldrb	r3, [r3, #6]
    39da:	b21b      	sxth	r3, r3
    39dc:	210f      	movs	r1, #15
    39de:	400b      	ands	r3, r1
    39e0:	b21b      	sxth	r3, r3
    39e2:	4313      	orrs	r3, r2
    39e4:	b21a      	sxth	r2, r3
    39e6:	2314      	movs	r3, #20
    39e8:	18fb      	adds	r3, r7, r3
    39ea:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    39ec:	2312      	movs	r3, #18
    39ee:	18fb      	adds	r3, r7, r3
    39f0:	4a21      	ldr	r2, [pc, #132]	; (3a78 <nm_get_firmware_info+0x164>)
    39f2:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    39f4:	687b      	ldr	r3, [r7, #4]
    39f6:	79db      	ldrb	r3, [r3, #7]
    39f8:	021b      	lsls	r3, r3, #8
    39fa:	b21a      	sxth	r2, r3
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	7a1b      	ldrb	r3, [r3, #8]
    3a00:	011b      	lsls	r3, r3, #4
    3a02:	b21b      	sxth	r3, r3
    3a04:	21ff      	movs	r1, #255	; 0xff
    3a06:	400b      	ands	r3, r1
    3a08:	b21b      	sxth	r3, r3
    3a0a:	4313      	orrs	r3, r2
    3a0c:	b21a      	sxth	r2, r3
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	7a5b      	ldrb	r3, [r3, #9]
    3a12:	b21b      	sxth	r3, r3
    3a14:	210f      	movs	r1, #15
    3a16:	400b      	ands	r3, r1
    3a18:	b21b      	sxth	r3, r3
    3a1a:	4313      	orrs	r3, r2
    3a1c:	b21a      	sxth	r2, r3
    3a1e:	2310      	movs	r3, #16
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    3a24:	2312      	movs	r3, #18
    3a26:	18fa      	adds	r2, r7, r3
    3a28:	2310      	movs	r3, #16
    3a2a:	18fb      	adds	r3, r7, r3
    3a2c:	8812      	ldrh	r2, [r2, #0]
    3a2e:	881b      	ldrh	r3, [r3, #0]
    3a30:	429a      	cmp	r2, r3
    3a32:	d203      	bcs.n	3a3c <nm_get_firmware_info+0x128>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    3a34:	2317      	movs	r3, #23
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	22f3      	movs	r2, #243	; 0xf3
    3a3a:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    3a3c:	2312      	movs	r3, #18
    3a3e:	18fa      	adds	r2, r7, r3
    3a40:	2314      	movs	r3, #20
    3a42:	18fb      	adds	r3, r7, r3
    3a44:	8812      	ldrh	r2, [r2, #0]
    3a46:	881b      	ldrh	r3, [r3, #0]
    3a48:	429a      	cmp	r2, r3
    3a4a:	d903      	bls.n	3a54 <nm_get_firmware_info+0x140>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    3a4c:	2317      	movs	r3, #23
    3a4e:	18fb      	adds	r3, r7, r3
    3a50:	22f3      	movs	r2, #243	; 0xf3
    3a52:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    3a54:	2317      	movs	r3, #23
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	b25b      	sxtb	r3, r3
}
    3a5c:	0018      	movs	r0, r3
    3a5e:	46bd      	mov	sp, r7
    3a60:	b007      	add	sp, #28
    3a62:	bd90      	pop	{r4, r7, pc}
    3a64:	000207ac 	.word	0x000207ac
    3a68:	000036dd 	.word	0x000036dd
    3a6c:	d75dc1c3 	.word	0xd75dc1c3
    3a70:	00001048 	.word	0x00001048
    3a74:	0000321d 	.word	0x0000321d
    3a78:	00001330 	.word	0x00001330

00003a7c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3a7c:	b590      	push	{r4, r7, lr}
    3a7e:	b085      	sub	sp, #20
    3a80:	af00      	add	r7, sp, #0
    3a82:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3a84:	230f      	movs	r3, #15
    3a86:	18fb      	adds	r3, r7, r3
    3a88:	2200      	movs	r2, #0
    3a8a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d013      	beq.n	3aba <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    3a92:	230e      	movs	r3, #14
    3a94:	18fb      	adds	r3, r7, r3
    3a96:	687a      	ldr	r2, [r7, #4]
    3a98:	7812      	ldrb	r2, [r2, #0]
    3a9a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3a9c:	230e      	movs	r3, #14
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d004      	beq.n	3ab0 <nm_drv_init+0x34>
    3aa6:	230e      	movs	r3, #14
    3aa8:	18fb      	adds	r3, r7, r3
    3aaa:	781b      	ldrb	r3, [r3, #0]
    3aac:	2b04      	cmp	r3, #4
    3aae:	d908      	bls.n	3ac2 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3ab0:	230e      	movs	r3, #14
    3ab2:	18fb      	adds	r3, r7, r3
    3ab4:	2201      	movs	r2, #1
    3ab6:	701a      	strb	r2, [r3, #0]
    3ab8:	e003      	b.n	3ac2 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    3aba:	230e      	movs	r3, #14
    3abc:	18fb      	adds	r3, r7, r3
    3abe:	2201      	movs	r2, #1
    3ac0:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    3ac2:	230f      	movs	r3, #15
    3ac4:	18fc      	adds	r4, r7, r3
    3ac6:	2000      	movs	r0, #0
    3ac8:	4b40      	ldr	r3, [pc, #256]	; (3bcc <nm_drv_init+0x150>)
    3aca:	4798      	blx	r3
    3acc:	0003      	movs	r3, r0
    3ace:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3ad0:	230f      	movs	r3, #15
    3ad2:	18fb      	adds	r3, r7, r3
    3ad4:	781b      	ldrb	r3, [r3, #0]
    3ad6:	b25b      	sxtb	r3, r3
    3ad8:	2b00      	cmp	r3, #0
    3ada:	d00e      	beq.n	3afa <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    3adc:	2392      	movs	r3, #146	; 0x92
    3ade:	005a      	lsls	r2, r3, #1
    3ae0:	493b      	ldr	r1, [pc, #236]	; (3bd0 <nm_drv_init+0x154>)
    3ae2:	4b3c      	ldr	r3, [pc, #240]	; (3bd4 <nm_drv_init+0x158>)
    3ae4:	0018      	movs	r0, r3
    3ae6:	4b3c      	ldr	r3, [pc, #240]	; (3bd8 <nm_drv_init+0x15c>)
    3ae8:	4798      	blx	r3
    3aea:	4b3c      	ldr	r3, [pc, #240]	; (3bdc <nm_drv_init+0x160>)
    3aec:	0018      	movs	r0, r3
    3aee:	4b3c      	ldr	r3, [pc, #240]	; (3be0 <nm_drv_init+0x164>)
    3af0:	4798      	blx	r3
    3af2:	200d      	movs	r0, #13
    3af4:	4b3b      	ldr	r3, [pc, #236]	; (3be4 <nm_drv_init+0x168>)
    3af6:	4798      	blx	r3
		goto ERR1;
    3af8:	e05f      	b.n	3bba <nm_drv_init+0x13e>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    3afa:	4b3b      	ldr	r3, [pc, #236]	; (3be8 <nm_drv_init+0x16c>)
    3afc:	0018      	movs	r0, r3
    3afe:	4b36      	ldr	r3, [pc, #216]	; (3bd8 <nm_drv_init+0x15c>)
    3b00:	4798      	blx	r3
    3b02:	4b3a      	ldr	r3, [pc, #232]	; (3bec <nm_drv_init+0x170>)
    3b04:	4798      	blx	r3
    3b06:	0002      	movs	r2, r0
    3b08:	4b39      	ldr	r3, [pc, #228]	; (3bf0 <nm_drv_init+0x174>)
    3b0a:	0011      	movs	r1, r2
    3b0c:	0018      	movs	r0, r3
    3b0e:	4b32      	ldr	r3, [pc, #200]	; (3bd8 <nm_drv_init+0x15c>)
    3b10:	4798      	blx	r3
    3b12:	200d      	movs	r0, #13
    3b14:	4b33      	ldr	r3, [pc, #204]	; (3be4 <nm_drv_init+0x168>)
    3b16:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    3b18:	4b36      	ldr	r3, [pc, #216]	; (3bf4 <nm_drv_init+0x178>)
    3b1a:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    3b1c:	230f      	movs	r3, #15
    3b1e:	18fc      	adds	r4, r7, r3
    3b20:	230e      	movs	r3, #14
    3b22:	18fb      	adds	r3, r7, r3
    3b24:	781b      	ldrb	r3, [r3, #0]
    3b26:	0018      	movs	r0, r3
    3b28:	4b33      	ldr	r3, [pc, #204]	; (3bf8 <nm_drv_init+0x17c>)
    3b2a:	4798      	blx	r3
    3b2c:	0003      	movs	r3, r0
    3b2e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3b30:	230f      	movs	r3, #15
    3b32:	18fb      	adds	r3, r7, r3
    3b34:	781b      	ldrb	r3, [r3, #0]
    3b36:	b25b      	sxtb	r3, r3
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d139      	bne.n	3bb0 <nm_drv_init+0x134>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    3b3c:	230f      	movs	r3, #15
    3b3e:	18fc      	adds	r4, r7, r3
    3b40:	230e      	movs	r3, #14
    3b42:	18fb      	adds	r3, r7, r3
    3b44:	781b      	ldrb	r3, [r3, #0]
    3b46:	0018      	movs	r0, r3
    3b48:	4b2c      	ldr	r3, [pc, #176]	; (3bfc <nm_drv_init+0x180>)
    3b4a:	4798      	blx	r3
    3b4c:	0003      	movs	r3, r0
    3b4e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3b50:	230f      	movs	r3, #15
    3b52:	18fb      	adds	r3, r7, r3
    3b54:	781b      	ldrb	r3, [r3, #0]
    3b56:	b25b      	sxtb	r3, r3
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d12b      	bne.n	3bb4 <nm_drv_init+0x138>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3b5c:	230e      	movs	r3, #14
    3b5e:	18fb      	adds	r3, r7, r3
    3b60:	781b      	ldrb	r3, [r3, #0]
    3b62:	2b02      	cmp	r3, #2
    3b64:	d029      	beq.n	3bba <nm_drv_init+0x13e>
    3b66:	230e      	movs	r3, #14
    3b68:	18fb      	adds	r3, r7, r3
    3b6a:	781b      	ldrb	r3, [r3, #0]
    3b6c:	2b03      	cmp	r3, #3
    3b6e:	d024      	beq.n	3bba <nm_drv_init+0x13e>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    3b70:	230f      	movs	r3, #15
    3b72:	18fc      	adds	r4, r7, r3
    3b74:	4b22      	ldr	r3, [pc, #136]	; (3c00 <nm_drv_init+0x184>)
    3b76:	4798      	blx	r3
    3b78:	0003      	movs	r3, r0
    3b7a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3b7c:	230f      	movs	r3, #15
    3b7e:	18fb      	adds	r3, r7, r3
    3b80:	781b      	ldrb	r3, [r3, #0]
    3b82:	b25b      	sxtb	r3, r3
    3b84:	2b00      	cmp	r3, #0
    3b86:	d00e      	beq.n	3ba6 <nm_drv_init+0x12a>
		M2M_ERR("failed to enable interrupts..\n");
    3b88:	23ae      	movs	r3, #174	; 0xae
    3b8a:	005a      	lsls	r2, r3, #1
    3b8c:	4910      	ldr	r1, [pc, #64]	; (3bd0 <nm_drv_init+0x154>)
    3b8e:	4b11      	ldr	r3, [pc, #68]	; (3bd4 <nm_drv_init+0x158>)
    3b90:	0018      	movs	r0, r3
    3b92:	4b11      	ldr	r3, [pc, #68]	; (3bd8 <nm_drv_init+0x15c>)
    3b94:	4798      	blx	r3
    3b96:	4b1b      	ldr	r3, [pc, #108]	; (3c04 <nm_drv_init+0x188>)
    3b98:	0018      	movs	r0, r3
    3b9a:	4b11      	ldr	r3, [pc, #68]	; (3be0 <nm_drv_init+0x164>)
    3b9c:	4798      	blx	r3
    3b9e:	200d      	movs	r0, #13
    3ba0:	4b10      	ldr	r3, [pc, #64]	; (3be4 <nm_drv_init+0x168>)
    3ba2:	4798      	blx	r3
		goto ERR2;
    3ba4:	e007      	b.n	3bb6 <nm_drv_init+0x13a>
	}
	
	return ret;
    3ba6:	230f      	movs	r3, #15
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	b25b      	sxtb	r3, r3
    3bae:	e008      	b.n	3bc2 <nm_drv_init+0x146>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    3bb0:	46c0      	nop			; (mov r8, r8)
    3bb2:	e000      	b.n	3bb6 <nm_drv_init+0x13a>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    3bb4:	46c0      	nop			; (mov r8, r8)
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    3bb6:	4b14      	ldr	r3, [pc, #80]	; (3c08 <nm_drv_init+0x18c>)
    3bb8:	4798      	blx	r3
ERR1:
	return ret;
    3bba:	230f      	movs	r3, #15
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	781b      	ldrb	r3, [r3, #0]
    3bc0:	b25b      	sxtb	r3, r3
}
    3bc2:	0018      	movs	r0, r3
    3bc4:	46bd      	mov	sp, r7
    3bc6:	b005      	add	sp, #20
    3bc8:	bd90      	pop	{r4, r7, pc}
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	00003661 	.word	0x00003661
    3bd0:	0000cdd0 	.word	0x0000cdd0
    3bd4:	0000cd04 	.word	0x0000cd04
    3bd8:	0000b081 	.word	0x0000b081
    3bdc:	0000cd18 	.word	0x0000cd18
    3be0:	0000b1a1 	.word	0x0000b1a1
    3be4:	0000b0b5 	.word	0x0000b0b5
    3be8:	0000cd34 	.word	0x0000cd34
    3bec:	0000321d 	.word	0x0000321d
    3bf0:	0000cd40 	.word	0x0000cd40
    3bf4:	00004bf5 	.word	0x00004bf5
    3bf8:	00003315 	.word	0x00003315
    3bfc:	0000345d 	.word	0x0000345d
    3c00:	00003161 	.word	0x00003161
    3c04:	0000cd50 	.word	0x0000cd50
    3c08:	00003695 	.word	0x00003695

00003c0c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    3c0c:	b590      	push	{r4, r7, lr}
    3c0e:	b085      	sub	sp, #20
    3c10:	af00      	add	r7, sp, #0
    3c12:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    3c14:	230f      	movs	r3, #15
    3c16:	18fc      	adds	r4, r7, r3
    3c18:	4b2d      	ldr	r3, [pc, #180]	; (3cd0 <nm_drv_deinit+0xc4>)
    3c1a:	4798      	blx	r3
    3c1c:	0003      	movs	r3, r0
    3c1e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3c20:	230f      	movs	r3, #15
    3c22:	18fb      	adds	r3, r7, r3
    3c24:	781b      	ldrb	r3, [r3, #0]
    3c26:	b25b      	sxtb	r3, r3
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d00e      	beq.n	3c4a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3c2c:	23ba      	movs	r3, #186	; 0xba
    3c2e:	005a      	lsls	r2, r3, #1
    3c30:	4928      	ldr	r1, [pc, #160]	; (3cd4 <nm_drv_deinit+0xc8>)
    3c32:	4b29      	ldr	r3, [pc, #164]	; (3cd8 <nm_drv_deinit+0xcc>)
    3c34:	0018      	movs	r0, r3
    3c36:	4b29      	ldr	r3, [pc, #164]	; (3cdc <nm_drv_deinit+0xd0>)
    3c38:	4798      	blx	r3
    3c3a:	4b29      	ldr	r3, [pc, #164]	; (3ce0 <nm_drv_deinit+0xd4>)
    3c3c:	0018      	movs	r0, r3
    3c3e:	4b29      	ldr	r3, [pc, #164]	; (3ce4 <nm_drv_deinit+0xd8>)
    3c40:	4798      	blx	r3
    3c42:	200d      	movs	r0, #13
    3c44:	4b28      	ldr	r3, [pc, #160]	; (3ce8 <nm_drv_deinit+0xdc>)
    3c46:	4798      	blx	r3
		goto ERR1;
    3c48:	e03a      	b.n	3cc0 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3c4a:	230f      	movs	r3, #15
    3c4c:	18fc      	adds	r4, r7, r3
    3c4e:	2000      	movs	r0, #0
    3c50:	4b26      	ldr	r3, [pc, #152]	; (3cec <nm_drv_deinit+0xe0>)
    3c52:	4798      	blx	r3
    3c54:	0003      	movs	r3, r0
    3c56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3c58:	230f      	movs	r3, #15
    3c5a:	18fb      	adds	r3, r7, r3
    3c5c:	781b      	ldrb	r3, [r3, #0]
    3c5e:	b25b      	sxtb	r3, r3
    3c60:	2b00      	cmp	r3, #0
    3c62:	d00f      	beq.n	3c84 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3c64:	237c      	movs	r3, #124	; 0x7c
    3c66:	33ff      	adds	r3, #255	; 0xff
    3c68:	001a      	movs	r2, r3
    3c6a:	491a      	ldr	r1, [pc, #104]	; (3cd4 <nm_drv_deinit+0xc8>)
    3c6c:	4b1a      	ldr	r3, [pc, #104]	; (3cd8 <nm_drv_deinit+0xcc>)
    3c6e:	0018      	movs	r0, r3
    3c70:	4b1a      	ldr	r3, [pc, #104]	; (3cdc <nm_drv_deinit+0xd0>)
    3c72:	4798      	blx	r3
    3c74:	4b1e      	ldr	r3, [pc, #120]	; (3cf0 <nm_drv_deinit+0xe4>)
    3c76:	0018      	movs	r0, r3
    3c78:	4b1a      	ldr	r3, [pc, #104]	; (3ce4 <nm_drv_deinit+0xd8>)
    3c7a:	4798      	blx	r3
    3c7c:	200d      	movs	r0, #13
    3c7e:	4b1a      	ldr	r3, [pc, #104]	; (3ce8 <nm_drv_deinit+0xdc>)
    3c80:	4798      	blx	r3
		goto ERR1;
    3c82:	e01d      	b.n	3cc0 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    3c84:	230f      	movs	r3, #15
    3c86:	18fc      	adds	r4, r7, r3
    3c88:	4b1a      	ldr	r3, [pc, #104]	; (3cf4 <nm_drv_deinit+0xe8>)
    3c8a:	4798      	blx	r3
    3c8c:	0003      	movs	r3, r0
    3c8e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3c90:	230f      	movs	r3, #15
    3c92:	18fb      	adds	r3, r7, r3
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	b25b      	sxtb	r3, r3
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d00f      	beq.n	3cbc <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3c9c:	2382      	movs	r3, #130	; 0x82
    3c9e:	33ff      	adds	r3, #255	; 0xff
    3ca0:	001a      	movs	r2, r3
    3ca2:	490c      	ldr	r1, [pc, #48]	; (3cd4 <nm_drv_deinit+0xc8>)
    3ca4:	4b0c      	ldr	r3, [pc, #48]	; (3cd8 <nm_drv_deinit+0xcc>)
    3ca6:	0018      	movs	r0, r3
    3ca8:	4b0c      	ldr	r3, [pc, #48]	; (3cdc <nm_drv_deinit+0xd0>)
    3caa:	4798      	blx	r3
    3cac:	4b12      	ldr	r3, [pc, #72]	; (3cf8 <nm_drv_deinit+0xec>)
    3cae:	0018      	movs	r0, r3
    3cb0:	4b0c      	ldr	r3, [pc, #48]	; (3ce4 <nm_drv_deinit+0xd8>)
    3cb2:	4798      	blx	r3
    3cb4:	200d      	movs	r0, #13
    3cb6:	4b0c      	ldr	r3, [pc, #48]	; (3ce8 <nm_drv_deinit+0xdc>)
    3cb8:	4798      	blx	r3
		goto ERR1;
    3cba:	e001      	b.n	3cc0 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    3cbc:	4b0f      	ldr	r3, [pc, #60]	; (3cfc <nm_drv_deinit+0xf0>)
    3cbe:	4798      	blx	r3
#endif

ERR1:
	return ret;
    3cc0:	230f      	movs	r3, #15
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	b25b      	sxtb	r3, r3
}
    3cc8:	0018      	movs	r0, r3
    3cca:	46bd      	mov	sp, r7
    3ccc:	b005      	add	sp, #20
    3cce:	bd90      	pop	{r4, r7, pc}
    3cd0:	00003511 	.word	0x00003511
    3cd4:	0000cddc 	.word	0x0000cddc
    3cd8:	0000cd04 	.word	0x0000cd04
    3cdc:	0000b081 	.word	0x0000b081
    3ce0:	0000cd70 	.word	0x0000cd70
    3ce4:	0000b1a1 	.word	0x0000b1a1
    3ce8:	0000b0b5 	.word	0x0000b0b5
    3cec:	00005e09 	.word	0x00005e09
    3cf0:	0000cd90 	.word	0x0000cd90
    3cf4:	00003695 	.word	0x00003695
    3cf8:	0000cdb4 	.word	0x0000cdb4
    3cfc:	00004d3d 	.word	0x00004d3d

00003d00 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    3d00:	b580      	push	{r7, lr}
    3d02:	b086      	sub	sp, #24
    3d04:	af00      	add	r7, sp, #0
    3d06:	6078      	str	r0, [r7, #4]
    3d08:	000a      	movs	r2, r1
    3d0a:	1cbb      	adds	r3, r7, #2
    3d0c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    3d0e:	230c      	movs	r3, #12
    3d10:	18fb      	adds	r3, r7, r3
    3d12:	2200      	movs	r2, #0
    3d14:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    3d16:	230c      	movs	r3, #12
    3d18:	18fb      	adds	r3, r7, r3
    3d1a:	687a      	ldr	r2, [r7, #4]
    3d1c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3d1e:	230c      	movs	r3, #12
    3d20:	18fb      	adds	r3, r7, r3
    3d22:	1cba      	adds	r2, r7, #2
    3d24:	8812      	ldrh	r2, [r2, #0]
    3d26:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3d28:	230c      	movs	r3, #12
    3d2a:	18fb      	adds	r3, r7, r3
    3d2c:	0019      	movs	r1, r3
    3d2e:	2003      	movs	r0, #3
    3d30:	4b03      	ldr	r3, [pc, #12]	; (3d40 <nmi_spi_read+0x40>)
    3d32:	4798      	blx	r3
    3d34:	0003      	movs	r3, r0
}
    3d36:	0018      	movs	r0, r3
    3d38:	46bd      	mov	sp, r7
    3d3a:	b006      	add	sp, #24
    3d3c:	bd80      	pop	{r7, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	00001501 	.word	0x00001501

00003d44 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b086      	sub	sp, #24
    3d48:	af00      	add	r7, sp, #0
    3d4a:	6078      	str	r0, [r7, #4]
    3d4c:	000a      	movs	r2, r1
    3d4e:	1cbb      	adds	r3, r7, #2
    3d50:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3d52:	230c      	movs	r3, #12
    3d54:	18fb      	adds	r3, r7, r3
    3d56:	687a      	ldr	r2, [r7, #4]
    3d58:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3d5a:	230c      	movs	r3, #12
    3d5c:	18fb      	adds	r3, r7, r3
    3d5e:	2200      	movs	r2, #0
    3d60:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3d62:	230c      	movs	r3, #12
    3d64:	18fb      	adds	r3, r7, r3
    3d66:	1cba      	adds	r2, r7, #2
    3d68:	8812      	ldrh	r2, [r2, #0]
    3d6a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3d6c:	230c      	movs	r3, #12
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	0019      	movs	r1, r3
    3d72:	2003      	movs	r0, #3
    3d74:	4b03      	ldr	r3, [pc, #12]	; (3d84 <nmi_spi_write+0x40>)
    3d76:	4798      	blx	r3
    3d78:	0003      	movs	r3, r0
}
    3d7a:	0018      	movs	r0, r3
    3d7c:	46bd      	mov	sp, r7
    3d7e:	b006      	add	sp, #24
    3d80:	bd80      	pop	{r7, pc}
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	00001501 	.word	0x00001501

00003d88 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	0002      	movs	r2, r0
    3d90:	1dfb      	adds	r3, r7, #7
    3d92:	701a      	strb	r2, [r3, #0]
    3d94:	1dbb      	adds	r3, r7, #6
    3d96:	1c0a      	adds	r2, r1, #0
    3d98:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    3d9a:	1dfb      	adds	r3, r7, #7
    3d9c:	781b      	ldrb	r3, [r3, #0]
    3d9e:	005a      	lsls	r2, r3, #1
    3da0:	1dbb      	adds	r3, r7, #6
    3da2:	781b      	ldrb	r3, [r3, #0]
    3da4:	4053      	eors	r3, r2
    3da6:	4a03      	ldr	r2, [pc, #12]	; (3db4 <crc7_byte+0x2c>)
    3da8:	5cd3      	ldrb	r3, [r2, r3]
}
    3daa:	0018      	movs	r0, r3
    3dac:	46bd      	mov	sp, r7
    3dae:	b002      	add	sp, #8
    3db0:	bd80      	pop	{r7, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	0000cdec 	.word	0x0000cdec

00003db8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    3db8:	b590      	push	{r4, r7, lr}
    3dba:	b085      	sub	sp, #20
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	60b9      	str	r1, [r7, #8]
    3dc0:	607a      	str	r2, [r7, #4]
    3dc2:	230f      	movs	r3, #15
    3dc4:	18fb      	adds	r3, r7, r3
    3dc6:	1c02      	adds	r2, r0, #0
    3dc8:	701a      	strb	r2, [r3, #0]
	while (len--)
    3dca:	e00e      	b.n	3dea <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    3dcc:	68bb      	ldr	r3, [r7, #8]
    3dce:	1c5a      	adds	r2, r3, #1
    3dd0:	60ba      	str	r2, [r7, #8]
    3dd2:	781a      	ldrb	r2, [r3, #0]
    3dd4:	230f      	movs	r3, #15
    3dd6:	18fc      	adds	r4, r7, r3
    3dd8:	230f      	movs	r3, #15
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	781b      	ldrb	r3, [r3, #0]
    3dde:	0011      	movs	r1, r2
    3de0:	0018      	movs	r0, r3
    3de2:	4b08      	ldr	r3, [pc, #32]	; (3e04 <crc7+0x4c>)
    3de4:	4798      	blx	r3
    3de6:	0003      	movs	r3, r0
    3de8:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	1e5a      	subs	r2, r3, #1
    3dee:	607a      	str	r2, [r7, #4]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d1eb      	bne.n	3dcc <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    3df4:	230f      	movs	r3, #15
    3df6:	18fb      	adds	r3, r7, r3
    3df8:	781b      	ldrb	r3, [r3, #0]
}
    3dfa:	0018      	movs	r0, r3
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b005      	add	sp, #20
    3e00:	bd90      	pop	{r4, r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	00003d89 	.word	0x00003d89

00003e08 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    3e08:	b590      	push	{r4, r7, lr}
    3e0a:	b089      	sub	sp, #36	; 0x24
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	60b9      	str	r1, [r7, #8]
    3e10:	607a      	str	r2, [r7, #4]
    3e12:	603b      	str	r3, [r7, #0]
    3e14:	230f      	movs	r3, #15
    3e16:	18fb      	adds	r3, r7, r3
    3e18:	1c02      	adds	r2, r0, #0
    3e1a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    3e1c:	231f      	movs	r3, #31
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	2205      	movs	r2, #5
    3e22:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3e24:	231e      	movs	r3, #30
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	2201      	movs	r2, #1
    3e2a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    3e2c:	2314      	movs	r3, #20
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	220f      	movs	r2, #15
    3e32:	18ba      	adds	r2, r7, r2
    3e34:	7812      	ldrb	r2, [r2, #0]
    3e36:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3e38:	230f      	movs	r3, #15
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	781b      	ldrb	r3, [r3, #0]
    3e3e:	3bc1      	subs	r3, #193	; 0xc1
    3e40:	2b0e      	cmp	r3, #14
    3e42:	d900      	bls.n	3e46 <spi_cmd+0x3e>
    3e44:	e11b      	b.n	407e <spi_cmd+0x276>
    3e46:	009a      	lsls	r2, r3, #2
    3e48:	4bb6      	ldr	r3, [pc, #728]	; (4124 <spi_cmd+0x31c>)
    3e4a:	18d3      	adds	r3, r2, r3
    3e4c:	681b      	ldr	r3, [r3, #0]
    3e4e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3e50:	68bb      	ldr	r3, [r7, #8]
    3e52:	0c1b      	lsrs	r3, r3, #16
    3e54:	b2da      	uxtb	r2, r3
    3e56:	2314      	movs	r3, #20
    3e58:	18fb      	adds	r3, r7, r3
    3e5a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3e5c:	68bb      	ldr	r3, [r7, #8]
    3e5e:	0a1b      	lsrs	r3, r3, #8
    3e60:	b2da      	uxtb	r2, r3
    3e62:	2314      	movs	r3, #20
    3e64:	18fb      	adds	r3, r7, r3
    3e66:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3e68:	68bb      	ldr	r3, [r7, #8]
    3e6a:	b2da      	uxtb	r2, r3
    3e6c:	2314      	movs	r3, #20
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	70da      	strb	r2, [r3, #3]
		len = 5;
    3e72:	231f      	movs	r3, #31
    3e74:	18fb      	adds	r3, r7, r3
    3e76:	2205      	movs	r2, #5
    3e78:	701a      	strb	r2, [r3, #0]
		break;
    3e7a:	e105      	b.n	4088 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3e7c:	68bb      	ldr	r3, [r7, #8]
    3e7e:	0a1b      	lsrs	r3, r3, #8
    3e80:	b2da      	uxtb	r2, r3
    3e82:	2314      	movs	r3, #20
    3e84:	18fb      	adds	r3, r7, r3
    3e86:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3e88:	2330      	movs	r3, #48	; 0x30
    3e8a:	18fb      	adds	r3, r7, r3
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d009      	beq.n	3ea6 <spi_cmd+0x9e>
    3e92:	2314      	movs	r3, #20
    3e94:	18fb      	adds	r3, r7, r3
    3e96:	785b      	ldrb	r3, [r3, #1]
    3e98:	2280      	movs	r2, #128	; 0x80
    3e9a:	4252      	negs	r2, r2
    3e9c:	4313      	orrs	r3, r2
    3e9e:	b2da      	uxtb	r2, r3
    3ea0:	2314      	movs	r3, #20
    3ea2:	18fb      	adds	r3, r7, r3
    3ea4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    3ea6:	68bb      	ldr	r3, [r7, #8]
    3ea8:	b2da      	uxtb	r2, r3
    3eaa:	2314      	movs	r3, #20
    3eac:	18fb      	adds	r3, r7, r3
    3eae:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3eb0:	2314      	movs	r3, #20
    3eb2:	18fb      	adds	r3, r7, r3
    3eb4:	2200      	movs	r2, #0
    3eb6:	70da      	strb	r2, [r3, #3]
		len = 5;
    3eb8:	231f      	movs	r3, #31
    3eba:	18fb      	adds	r3, r7, r3
    3ebc:	2205      	movs	r2, #5
    3ebe:	701a      	strb	r2, [r3, #0]
		break;
    3ec0:	e0e2      	b.n	4088 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    3ec2:	2314      	movs	r3, #20
    3ec4:	18fb      	adds	r3, r7, r3
    3ec6:	2200      	movs	r2, #0
    3ec8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3eca:	2314      	movs	r3, #20
    3ecc:	18fb      	adds	r3, r7, r3
    3ece:	2200      	movs	r2, #0
    3ed0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3ed2:	2314      	movs	r3, #20
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	2200      	movs	r2, #0
    3ed8:	70da      	strb	r2, [r3, #3]
		len = 5;
    3eda:	231f      	movs	r3, #31
    3edc:	18fb      	adds	r3, r7, r3
    3ede:	2205      	movs	r2, #5
    3ee0:	701a      	strb	r2, [r3, #0]
		break;
    3ee2:	e0d1      	b.n	4088 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    3ee4:	2314      	movs	r3, #20
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	2200      	movs	r2, #0
    3eea:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3eec:	2314      	movs	r3, #20
    3eee:	18fb      	adds	r3, r7, r3
    3ef0:	2200      	movs	r2, #0
    3ef2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3ef4:	2314      	movs	r3, #20
    3ef6:	18fb      	adds	r3, r7, r3
    3ef8:	2200      	movs	r2, #0
    3efa:	70da      	strb	r2, [r3, #3]
		len = 5;
    3efc:	231f      	movs	r3, #31
    3efe:	18fb      	adds	r3, r7, r3
    3f00:	2205      	movs	r2, #5
    3f02:	701a      	strb	r2, [r3, #0]
		break;
    3f04:	e0c0      	b.n	4088 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    3f06:	2314      	movs	r3, #20
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	22ff      	movs	r2, #255	; 0xff
    3f0c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    3f0e:	2314      	movs	r3, #20
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	22ff      	movs	r2, #255	; 0xff
    3f14:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3f16:	2314      	movs	r3, #20
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	22ff      	movs	r2, #255	; 0xff
    3f1c:	70da      	strb	r2, [r3, #3]
		len = 5;
    3f1e:	231f      	movs	r3, #31
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	2205      	movs	r2, #5
    3f24:	701a      	strb	r2, [r3, #0]
		break;
    3f26:	e0af      	b.n	4088 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3f28:	68bb      	ldr	r3, [r7, #8]
    3f2a:	0c1b      	lsrs	r3, r3, #16
    3f2c:	b2da      	uxtb	r2, r3
    3f2e:	2314      	movs	r3, #20
    3f30:	18fb      	adds	r3, r7, r3
    3f32:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3f34:	68bb      	ldr	r3, [r7, #8]
    3f36:	0a1b      	lsrs	r3, r3, #8
    3f38:	b2da      	uxtb	r2, r3
    3f3a:	2314      	movs	r3, #20
    3f3c:	18fb      	adds	r3, r7, r3
    3f3e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3f40:	68bb      	ldr	r3, [r7, #8]
    3f42:	b2da      	uxtb	r2, r3
    3f44:	2314      	movs	r3, #20
    3f46:	18fb      	adds	r3, r7, r3
    3f48:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    3f4a:	683b      	ldr	r3, [r7, #0]
    3f4c:	0a1b      	lsrs	r3, r3, #8
    3f4e:	b2da      	uxtb	r2, r3
    3f50:	2314      	movs	r3, #20
    3f52:	18fb      	adds	r3, r7, r3
    3f54:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3f56:	683b      	ldr	r3, [r7, #0]
    3f58:	b2da      	uxtb	r2, r3
    3f5a:	2314      	movs	r3, #20
    3f5c:	18fb      	adds	r3, r7, r3
    3f5e:	715a      	strb	r2, [r3, #5]
		len = 7;
    3f60:	231f      	movs	r3, #31
    3f62:	18fb      	adds	r3, r7, r3
    3f64:	2207      	movs	r2, #7
    3f66:	701a      	strb	r2, [r3, #0]
		break;
    3f68:	e08e      	b.n	4088 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3f6a:	68bb      	ldr	r3, [r7, #8]
    3f6c:	0c1b      	lsrs	r3, r3, #16
    3f6e:	b2da      	uxtb	r2, r3
    3f70:	2314      	movs	r3, #20
    3f72:	18fb      	adds	r3, r7, r3
    3f74:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3f76:	68bb      	ldr	r3, [r7, #8]
    3f78:	0a1b      	lsrs	r3, r3, #8
    3f7a:	b2da      	uxtb	r2, r3
    3f7c:	2314      	movs	r3, #20
    3f7e:	18fb      	adds	r3, r7, r3
    3f80:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3f82:	68bb      	ldr	r3, [r7, #8]
    3f84:	b2da      	uxtb	r2, r3
    3f86:	2314      	movs	r3, #20
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3f8c:	683b      	ldr	r3, [r7, #0]
    3f8e:	0c1b      	lsrs	r3, r3, #16
    3f90:	b2da      	uxtb	r2, r3
    3f92:	2314      	movs	r3, #20
    3f94:	18fb      	adds	r3, r7, r3
    3f96:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3f98:	683b      	ldr	r3, [r7, #0]
    3f9a:	0a1b      	lsrs	r3, r3, #8
    3f9c:	b2da      	uxtb	r2, r3
    3f9e:	2314      	movs	r3, #20
    3fa0:	18fb      	adds	r3, r7, r3
    3fa2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	b2da      	uxtb	r2, r3
    3fa8:	2314      	movs	r3, #20
    3faa:	18fb      	adds	r3, r7, r3
    3fac:	719a      	strb	r2, [r3, #6]
		len = 8;
    3fae:	231f      	movs	r3, #31
    3fb0:	18fb      	adds	r3, r7, r3
    3fb2:	2208      	movs	r2, #8
    3fb4:	701a      	strb	r2, [r3, #0]
		break;
    3fb6:	e067      	b.n	4088 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    3fb8:	68bb      	ldr	r3, [r7, #8]
    3fba:	0a1b      	lsrs	r3, r3, #8
    3fbc:	b2da      	uxtb	r2, r3
    3fbe:	2314      	movs	r3, #20
    3fc0:	18fb      	adds	r3, r7, r3
    3fc2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3fc4:	2330      	movs	r3, #48	; 0x30
    3fc6:	18fb      	adds	r3, r7, r3
    3fc8:	781b      	ldrb	r3, [r3, #0]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d009      	beq.n	3fe2 <spi_cmd+0x1da>
    3fce:	2314      	movs	r3, #20
    3fd0:	18fb      	adds	r3, r7, r3
    3fd2:	785b      	ldrb	r3, [r3, #1]
    3fd4:	2280      	movs	r2, #128	; 0x80
    3fd6:	4252      	negs	r2, r2
    3fd8:	4313      	orrs	r3, r2
    3fda:	b2da      	uxtb	r2, r3
    3fdc:	2314      	movs	r3, #20
    3fde:	18fb      	adds	r3, r7, r3
    3fe0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    3fe2:	68bb      	ldr	r3, [r7, #8]
    3fe4:	b2da      	uxtb	r2, r3
    3fe6:	2314      	movs	r3, #20
    3fe8:	18fb      	adds	r3, r7, r3
    3fea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	0e1b      	lsrs	r3, r3, #24
    3ff0:	b2da      	uxtb	r2, r3
    3ff2:	2314      	movs	r3, #20
    3ff4:	18fb      	adds	r3, r7, r3
    3ff6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	0c1b      	lsrs	r3, r3, #16
    3ffc:	b2da      	uxtb	r2, r3
    3ffe:	2314      	movs	r3, #20
    4000:	18fb      	adds	r3, r7, r3
    4002:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	0a1b      	lsrs	r3, r3, #8
    4008:	b2da      	uxtb	r2, r3
    400a:	2314      	movs	r3, #20
    400c:	18fb      	adds	r3, r7, r3
    400e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	b2da      	uxtb	r2, r3
    4014:	2314      	movs	r3, #20
    4016:	18fb      	adds	r3, r7, r3
    4018:	719a      	strb	r2, [r3, #6]
		len = 8;
    401a:	231f      	movs	r3, #31
    401c:	18fb      	adds	r3, r7, r3
    401e:	2208      	movs	r2, #8
    4020:	701a      	strb	r2, [r3, #0]
		break;
    4022:	e031      	b.n	4088 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    4024:	68bb      	ldr	r3, [r7, #8]
    4026:	0c1b      	lsrs	r3, r3, #16
    4028:	b2da      	uxtb	r2, r3
    402a:	2314      	movs	r3, #20
    402c:	18fb      	adds	r3, r7, r3
    402e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4030:	68bb      	ldr	r3, [r7, #8]
    4032:	0a1b      	lsrs	r3, r3, #8
    4034:	b2da      	uxtb	r2, r3
    4036:	2314      	movs	r3, #20
    4038:	18fb      	adds	r3, r7, r3
    403a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    403c:	68bb      	ldr	r3, [r7, #8]
    403e:	b2da      	uxtb	r2, r3
    4040:	2314      	movs	r3, #20
    4042:	18fb      	adds	r3, r7, r3
    4044:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    4046:	687b      	ldr	r3, [r7, #4]
    4048:	0e1b      	lsrs	r3, r3, #24
    404a:	b2da      	uxtb	r2, r3
    404c:	2314      	movs	r3, #20
    404e:	18fb      	adds	r3, r7, r3
    4050:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	0c1b      	lsrs	r3, r3, #16
    4056:	b2da      	uxtb	r2, r3
    4058:	2314      	movs	r3, #20
    405a:	18fb      	adds	r3, r7, r3
    405c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	0a1b      	lsrs	r3, r3, #8
    4062:	b2da      	uxtb	r2, r3
    4064:	2314      	movs	r3, #20
    4066:	18fb      	adds	r3, r7, r3
    4068:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	b2da      	uxtb	r2, r3
    406e:	2314      	movs	r3, #20
    4070:	18fb      	adds	r3, r7, r3
    4072:	71da      	strb	r2, [r3, #7]
		len = 9;
    4074:	231f      	movs	r3, #31
    4076:	18fb      	adds	r3, r7, r3
    4078:	2209      	movs	r2, #9
    407a:	701a      	strb	r2, [r3, #0]
		break;
    407c:	e004      	b.n	4088 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    407e:	231e      	movs	r3, #30
    4080:	18fb      	adds	r3, r7, r3
    4082:	2200      	movs	r2, #0
    4084:	701a      	strb	r2, [r3, #0]
		break;
    4086:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    4088:	231e      	movs	r3, #30
    408a:	18fb      	adds	r3, r7, r3
    408c:	781b      	ldrb	r3, [r3, #0]
    408e:	b25b      	sxtb	r3, r3
    4090:	2b00      	cmp	r3, #0
    4092:	d03e      	beq.n	4112 <spi_cmd+0x30a>
		if (!gu8Crc_off)
    4094:	4b24      	ldr	r3, [pc, #144]	; (4128 <spi_cmd+0x320>)
    4096:	781b      	ldrb	r3, [r3, #0]
    4098:	2b00      	cmp	r3, #0
    409a:	d115      	bne.n	40c8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    409c:	231f      	movs	r3, #31
    409e:	18fb      	adds	r3, r7, r3
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	1e5c      	subs	r4, r3, #1
    40a4:	231f      	movs	r3, #31
    40a6:	18fb      	adds	r3, r7, r3
    40a8:	781b      	ldrb	r3, [r3, #0]
    40aa:	3b01      	subs	r3, #1
    40ac:	001a      	movs	r2, r3
    40ae:	2314      	movs	r3, #20
    40b0:	18fb      	adds	r3, r7, r3
    40b2:	0019      	movs	r1, r3
    40b4:	207f      	movs	r0, #127	; 0x7f
    40b6:	4b1d      	ldr	r3, [pc, #116]	; (412c <spi_cmd+0x324>)
    40b8:	4798      	blx	r3
    40ba:	0003      	movs	r3, r0
    40bc:	18db      	adds	r3, r3, r3
    40be:	b2da      	uxtb	r2, r3
    40c0:	2314      	movs	r3, #20
    40c2:	18fb      	adds	r3, r7, r3
    40c4:	551a      	strb	r2, [r3, r4]
    40c6:	e006      	b.n	40d6 <spi_cmd+0x2ce>
		else
			len-=1;
    40c8:	231f      	movs	r3, #31
    40ca:	18fb      	adds	r3, r7, r3
    40cc:	221f      	movs	r2, #31
    40ce:	18ba      	adds	r2, r7, r2
    40d0:	7812      	ldrb	r2, [r2, #0]
    40d2:	3a01      	subs	r2, #1
    40d4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    40d6:	231f      	movs	r3, #31
    40d8:	18fb      	adds	r3, r7, r3
    40da:	781b      	ldrb	r3, [r3, #0]
    40dc:	b29a      	uxth	r2, r3
    40de:	2314      	movs	r3, #20
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	0011      	movs	r1, r2
    40e4:	0018      	movs	r0, r3
    40e6:	4b12      	ldr	r3, [pc, #72]	; (4130 <spi_cmd+0x328>)
    40e8:	4798      	blx	r3
    40ea:	1e03      	subs	r3, r0, #0
    40ec:	d011      	beq.n	4112 <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    40ee:	2384      	movs	r3, #132	; 0x84
    40f0:	005a      	lsls	r2, r3, #1
    40f2:	4910      	ldr	r1, [pc, #64]	; (4134 <spi_cmd+0x32c>)
    40f4:	4b10      	ldr	r3, [pc, #64]	; (4138 <spi_cmd+0x330>)
    40f6:	0018      	movs	r0, r3
    40f8:	4b10      	ldr	r3, [pc, #64]	; (413c <spi_cmd+0x334>)
    40fa:	4798      	blx	r3
    40fc:	4b10      	ldr	r3, [pc, #64]	; (4140 <spi_cmd+0x338>)
    40fe:	0018      	movs	r0, r3
    4100:	4b10      	ldr	r3, [pc, #64]	; (4144 <spi_cmd+0x33c>)
    4102:	4798      	blx	r3
    4104:	200d      	movs	r0, #13
    4106:	4b10      	ldr	r3, [pc, #64]	; (4148 <spi_cmd+0x340>)
    4108:	4798      	blx	r3
			result = N_FAIL;
    410a:	231e      	movs	r3, #30
    410c:	18fb      	adds	r3, r7, r3
    410e:	2200      	movs	r2, #0
    4110:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    4112:	231e      	movs	r3, #30
    4114:	18fb      	adds	r3, r7, r3
    4116:	781b      	ldrb	r3, [r3, #0]
    4118:	b25b      	sxtb	r3, r3
}
    411a:	0018      	movs	r0, r3
    411c:	46bd      	mov	sp, r7
    411e:	b009      	add	sp, #36	; 0x24
    4120:	bd90      	pop	{r4, r7, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	0000d3a4 	.word	0x0000d3a4
    4128:	200000c8 	.word	0x200000c8
    412c:	00003db9 	.word	0x00003db9
    4130:	00003d45 	.word	0x00003d45
    4134:	0000d3e0 	.word	0x0000d3e0
    4138:	0000ceec 	.word	0x0000ceec
    413c:	0000b081 	.word	0x0000b081
    4140:	0000cf00 	.word	0x0000cf00
    4144:	0000b1a1 	.word	0x0000b1a1
    4148:	0000b0b5 	.word	0x0000b0b5

0000414c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    414c:	b580      	push	{r7, lr}
    414e:	b084      	sub	sp, #16
    4150:	af00      	add	r7, sp, #0
    4152:	0002      	movs	r2, r0
    4154:	1dfb      	adds	r3, r7, #7
    4156:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    4158:	230f      	movs	r3, #15
    415a:	18fb      	adds	r3, r7, r3
    415c:	2201      	movs	r2, #1
    415e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    4160:	1dfb      	adds	r3, r7, #7
    4162:	781b      	ldrb	r3, [r3, #0]
    4164:	2bcf      	cmp	r3, #207	; 0xcf
    4166:	d007      	beq.n	4178 <spi_cmd_rsp+0x2c>
    4168:	1dfb      	adds	r3, r7, #7
    416a:	781b      	ldrb	r3, [r3, #0]
    416c:	2bc5      	cmp	r3, #197	; 0xc5
    416e:	d003      	beq.n	4178 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    4170:	1dfb      	adds	r3, r7, #7
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	2bc6      	cmp	r3, #198	; 0xc6
    4176:	d10c      	bne.n	4192 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4178:	230d      	movs	r3, #13
    417a:	18fb      	adds	r3, r7, r3
    417c:	2101      	movs	r1, #1
    417e:	0018      	movs	r0, r3
    4180:	4b3a      	ldr	r3, [pc, #232]	; (426c <spi_cmd_rsp+0x120>)
    4182:	4798      	blx	r3
    4184:	1e03      	subs	r3, r0, #0
    4186:	d004      	beq.n	4192 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    4188:	230f      	movs	r3, #15
    418a:	18fb      	adds	r3, r7, r3
    418c:	2200      	movs	r2, #0
    418e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4190:	e063      	b.n	425a <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    4192:	230e      	movs	r3, #14
    4194:	18fb      	adds	r3, r7, r3
    4196:	220a      	movs	r2, #10
    4198:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    419a:	230d      	movs	r3, #13
    419c:	18fb      	adds	r3, r7, r3
    419e:	2101      	movs	r1, #1
    41a0:	0018      	movs	r0, r3
    41a2:	4b32      	ldr	r3, [pc, #200]	; (426c <spi_cmd_rsp+0x120>)
    41a4:	4798      	blx	r3
    41a6:	1e03      	subs	r3, r0, #0
    41a8:	d013      	beq.n	41d2 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    41aa:	2328      	movs	r3, #40	; 0x28
    41ac:	33ff      	adds	r3, #255	; 0xff
    41ae:	001a      	movs	r2, r3
    41b0:	492f      	ldr	r1, [pc, #188]	; (4270 <spi_cmd_rsp+0x124>)
    41b2:	4b30      	ldr	r3, [pc, #192]	; (4274 <spi_cmd_rsp+0x128>)
    41b4:	0018      	movs	r0, r3
    41b6:	4b30      	ldr	r3, [pc, #192]	; (4278 <spi_cmd_rsp+0x12c>)
    41b8:	4798      	blx	r3
    41ba:	4b30      	ldr	r3, [pc, #192]	; (427c <spi_cmd_rsp+0x130>)
    41bc:	0018      	movs	r0, r3
    41be:	4b30      	ldr	r3, [pc, #192]	; (4280 <spi_cmd_rsp+0x134>)
    41c0:	4798      	blx	r3
    41c2:	200d      	movs	r0, #13
    41c4:	4b2f      	ldr	r3, [pc, #188]	; (4284 <spi_cmd_rsp+0x138>)
    41c6:	4798      	blx	r3
			result = N_FAIL;
    41c8:	230f      	movs	r3, #15
    41ca:	18fb      	adds	r3, r7, r3
    41cc:	2200      	movs	r2, #0
    41ce:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    41d0:	e043      	b.n	425a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    41d2:	230d      	movs	r3, #13
    41d4:	18fb      	adds	r3, r7, r3
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	1dfa      	adds	r2, r7, #7
    41da:	7812      	ldrb	r2, [r2, #0]
    41dc:	429a      	cmp	r2, r3
    41de:	d00b      	beq.n	41f8 <spi_cmd_rsp+0xac>
    41e0:	230e      	movs	r3, #14
    41e2:	18fb      	adds	r3, r7, r3
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	b25b      	sxtb	r3, r3
    41e8:	b2da      	uxtb	r2, r3
    41ea:	3a01      	subs	r2, #1
    41ec:	b2d1      	uxtb	r1, r2
    41ee:	220e      	movs	r2, #14
    41f0:	18ba      	adds	r2, r7, r2
    41f2:	7011      	strb	r1, [r2, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	dcd0      	bgt.n	419a <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    41f8:	230e      	movs	r3, #14
    41fa:	18fb      	adds	r3, r7, r3
    41fc:	220a      	movs	r2, #10
    41fe:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4200:	230d      	movs	r3, #13
    4202:	18fb      	adds	r3, r7, r3
    4204:	2101      	movs	r1, #1
    4206:	0018      	movs	r0, r3
    4208:	4b18      	ldr	r3, [pc, #96]	; (426c <spi_cmd_rsp+0x120>)
    420a:	4798      	blx	r3
    420c:	1e03      	subs	r3, r0, #0
    420e:	d013      	beq.n	4238 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    4210:	2336      	movs	r3, #54	; 0x36
    4212:	33ff      	adds	r3, #255	; 0xff
    4214:	001a      	movs	r2, r3
    4216:	4916      	ldr	r1, [pc, #88]	; (4270 <spi_cmd_rsp+0x124>)
    4218:	4b16      	ldr	r3, [pc, #88]	; (4274 <spi_cmd_rsp+0x128>)
    421a:	0018      	movs	r0, r3
    421c:	4b16      	ldr	r3, [pc, #88]	; (4278 <spi_cmd_rsp+0x12c>)
    421e:	4798      	blx	r3
    4220:	4b16      	ldr	r3, [pc, #88]	; (427c <spi_cmd_rsp+0x130>)
    4222:	0018      	movs	r0, r3
    4224:	4b16      	ldr	r3, [pc, #88]	; (4280 <spi_cmd_rsp+0x134>)
    4226:	4798      	blx	r3
    4228:	200d      	movs	r0, #13
    422a:	4b16      	ldr	r3, [pc, #88]	; (4284 <spi_cmd_rsp+0x138>)
    422c:	4798      	blx	r3
			result = N_FAIL;
    422e:	230f      	movs	r3, #15
    4230:	18fb      	adds	r3, r7, r3
    4232:	2200      	movs	r2, #0
    4234:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4236:	e010      	b.n	425a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    4238:	230d      	movs	r3, #13
    423a:	18fb      	adds	r3, r7, r3
    423c:	781b      	ldrb	r3, [r3, #0]
    423e:	2b00      	cmp	r3, #0
    4240:	d00b      	beq.n	425a <spi_cmd_rsp+0x10e>
    4242:	230e      	movs	r3, #14
    4244:	18fb      	adds	r3, r7, r3
    4246:	781b      	ldrb	r3, [r3, #0]
    4248:	b25b      	sxtb	r3, r3
    424a:	b2da      	uxtb	r2, r3
    424c:	3a01      	subs	r2, #1
    424e:	b2d1      	uxtb	r1, r2
    4250:	220e      	movs	r2, #14
    4252:	18ba      	adds	r2, r7, r2
    4254:	7011      	strb	r1, [r2, #0]
    4256:	2b00      	cmp	r3, #0
    4258:	dcd2      	bgt.n	4200 <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    425a:	230f      	movs	r3, #15
    425c:	18fb      	adds	r3, r7, r3
    425e:	781b      	ldrb	r3, [r3, #0]
    4260:	b25b      	sxtb	r3, r3
}
    4262:	0018      	movs	r0, r3
    4264:	46bd      	mov	sp, r7
    4266:	b004      	add	sp, #16
    4268:	bd80      	pop	{r7, pc}
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	00003d01 	.word	0x00003d01
    4270:	0000d3e8 	.word	0x0000d3e8
    4274:	0000ceec 	.word	0x0000ceec
    4278:	0000b081 	.word	0x0000b081
    427c:	0000cf2c 	.word	0x0000cf2c
    4280:	0000b1a1 	.word	0x0000b1a1
    4284:	0000b0b5 	.word	0x0000b0b5

00004288 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    4288:	b580      	push	{r7, lr}
    428a:	b086      	sub	sp, #24
    428c:	af00      	add	r7, sp, #0
    428e:	6078      	str	r0, [r7, #4]
    4290:	0008      	movs	r0, r1
    4292:	0011      	movs	r1, r2
    4294:	1cbb      	adds	r3, r7, #2
    4296:	1c02      	adds	r2, r0, #0
    4298:	801a      	strh	r2, [r3, #0]
    429a:	1c7b      	adds	r3, r7, #1
    429c:	1c0a      	adds	r2, r1, #0
    429e:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    42a0:	2311      	movs	r3, #17
    42a2:	18fb      	adds	r3, r7, r3
    42a4:	2201      	movs	r2, #1
    42a6:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    42a8:	2314      	movs	r3, #20
    42aa:	18fb      	adds	r3, r7, r3
    42ac:	2200      	movs	r2, #0
    42ae:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    42b0:	1cbb      	adds	r3, r7, #2
    42b2:	881a      	ldrh	r2, [r3, #0]
    42b4:	2380      	movs	r3, #128	; 0x80
    42b6:	019b      	lsls	r3, r3, #6
    42b8:	429a      	cmp	r2, r3
    42ba:	d805      	bhi.n	42c8 <spi_data_read+0x40>
			nbytes = sz;
    42bc:	2312      	movs	r3, #18
    42be:	18fb      	adds	r3, r7, r3
    42c0:	1cba      	adds	r2, r7, #2
    42c2:	8812      	ldrh	r2, [r2, #0]
    42c4:	801a      	strh	r2, [r3, #0]
    42c6:	e004      	b.n	42d2 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    42c8:	2312      	movs	r3, #18
    42ca:	18fb      	adds	r3, r7, r3
    42cc:	2280      	movs	r2, #128	; 0x80
    42ce:	0192      	lsls	r2, r2, #6
    42d0:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    42d2:	2316      	movs	r3, #22
    42d4:	18fb      	adds	r3, r7, r3
    42d6:	220a      	movs	r2, #10
    42d8:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    42da:	230b      	movs	r3, #11
    42dc:	18fb      	adds	r3, r7, r3
    42de:	2101      	movs	r1, #1
    42e0:	0018      	movs	r0, r3
    42e2:	4b5f      	ldr	r3, [pc, #380]	; (4460 <spi_data_read+0x1d8>)
    42e4:	4798      	blx	r3
    42e6:	1e03      	subs	r3, r0, #0
    42e8:	d013      	beq.n	4312 <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    42ea:	2358      	movs	r3, #88	; 0x58
    42ec:	33ff      	adds	r3, #255	; 0xff
    42ee:	001a      	movs	r2, r3
    42f0:	495c      	ldr	r1, [pc, #368]	; (4464 <spi_data_read+0x1dc>)
    42f2:	4b5d      	ldr	r3, [pc, #372]	; (4468 <spi_data_read+0x1e0>)
    42f4:	0018      	movs	r0, r3
    42f6:	4b5d      	ldr	r3, [pc, #372]	; (446c <spi_data_read+0x1e4>)
    42f8:	4798      	blx	r3
    42fa:	4b5d      	ldr	r3, [pc, #372]	; (4470 <spi_data_read+0x1e8>)
    42fc:	0018      	movs	r0, r3
    42fe:	4b5d      	ldr	r3, [pc, #372]	; (4474 <spi_data_read+0x1ec>)
    4300:	4798      	blx	r3
    4302:	200d      	movs	r0, #13
    4304:	4b5c      	ldr	r3, [pc, #368]	; (4478 <spi_data_read+0x1f0>)
    4306:	4798      	blx	r3
				result = N_FAIL;
    4308:	2311      	movs	r3, #17
    430a:	18fb      	adds	r3, r7, r3
    430c:	2200      	movs	r2, #0
    430e:	701a      	strb	r2, [r3, #0]
				break;
    4310:	e017      	b.n	4342 <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    4312:	230b      	movs	r3, #11
    4314:	18fb      	adds	r3, r7, r3
    4316:	781b      	ldrb	r3, [r3, #0]
    4318:	091b      	lsrs	r3, r3, #4
    431a:	b2db      	uxtb	r3, r3
    431c:	001a      	movs	r2, r3
    431e:	230f      	movs	r3, #15
    4320:	4013      	ands	r3, r2
    4322:	2b0f      	cmp	r3, #15
    4324:	d00c      	beq.n	4340 <spi_data_read+0xb8>
				break;
		} while (retry--);
    4326:	2316      	movs	r3, #22
    4328:	18fb      	adds	r3, r7, r3
    432a:	2200      	movs	r2, #0
    432c:	5e9b      	ldrsh	r3, [r3, r2]
    432e:	b29a      	uxth	r2, r3
    4330:	3a01      	subs	r2, #1
    4332:	b291      	uxth	r1, r2
    4334:	2216      	movs	r2, #22
    4336:	18ba      	adds	r2, r7, r2
    4338:	8011      	strh	r1, [r2, #0]
    433a:	2b00      	cmp	r3, #0
    433c:	d1cd      	bne.n	42da <spi_data_read+0x52>
    433e:	e000      	b.n	4342 <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    4340:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    4342:	2311      	movs	r3, #17
    4344:	18fb      	adds	r3, r7, r3
    4346:	781b      	ldrb	r3, [r3, #0]
    4348:	b25b      	sxtb	r3, r3
    434a:	2b00      	cmp	r3, #0
    434c:	d100      	bne.n	4350 <spi_data_read+0xc8>
    434e:	e07d      	b.n	444c <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    4350:	2316      	movs	r3, #22
    4352:	18fb      	adds	r3, r7, r3
    4354:	2200      	movs	r2, #0
    4356:	5e9b      	ldrsh	r3, [r3, r2]
    4358:	2b00      	cmp	r3, #0
    435a:	dc18      	bgt.n	438e <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    435c:	2364      	movs	r3, #100	; 0x64
    435e:	33ff      	adds	r3, #255	; 0xff
    4360:	001a      	movs	r2, r3
    4362:	4940      	ldr	r1, [pc, #256]	; (4464 <spi_data_read+0x1dc>)
    4364:	4b40      	ldr	r3, [pc, #256]	; (4468 <spi_data_read+0x1e0>)
    4366:	0018      	movs	r0, r3
    4368:	4b40      	ldr	r3, [pc, #256]	; (446c <spi_data_read+0x1e4>)
    436a:	4798      	blx	r3
    436c:	230b      	movs	r3, #11
    436e:	18fb      	adds	r3, r7, r3
    4370:	781b      	ldrb	r3, [r3, #0]
    4372:	001a      	movs	r2, r3
    4374:	4b41      	ldr	r3, [pc, #260]	; (447c <spi_data_read+0x1f4>)
    4376:	0011      	movs	r1, r2
    4378:	0018      	movs	r0, r3
    437a:	4b3c      	ldr	r3, [pc, #240]	; (446c <spi_data_read+0x1e4>)
    437c:	4798      	blx	r3
    437e:	200d      	movs	r0, #13
    4380:	4b3d      	ldr	r3, [pc, #244]	; (4478 <spi_data_read+0x1f0>)
    4382:	4798      	blx	r3
			result = N_FAIL;
    4384:	2311      	movs	r3, #17
    4386:	18fb      	adds	r3, r7, r3
    4388:	2200      	movs	r2, #0
    438a:	701a      	strb	r2, [r3, #0]
			break;
    438c:	e05f      	b.n	444e <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    438e:	2314      	movs	r3, #20
    4390:	18fb      	adds	r3, r7, r3
    4392:	2200      	movs	r2, #0
    4394:	5e9b      	ldrsh	r3, [r3, r2]
    4396:	687a      	ldr	r2, [r7, #4]
    4398:	18d2      	adds	r2, r2, r3
    439a:	2312      	movs	r3, #18
    439c:	18fb      	adds	r3, r7, r3
    439e:	881b      	ldrh	r3, [r3, #0]
    43a0:	0019      	movs	r1, r3
    43a2:	0010      	movs	r0, r2
    43a4:	4b2e      	ldr	r3, [pc, #184]	; (4460 <spi_data_read+0x1d8>)
    43a6:	4798      	blx	r3
    43a8:	1e03      	subs	r3, r0, #0
    43aa:	d012      	beq.n	43d2 <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    43ac:	23b6      	movs	r3, #182	; 0xb6
    43ae:	005a      	lsls	r2, r3, #1
    43b0:	492c      	ldr	r1, [pc, #176]	; (4464 <spi_data_read+0x1dc>)
    43b2:	4b2d      	ldr	r3, [pc, #180]	; (4468 <spi_data_read+0x1e0>)
    43b4:	0018      	movs	r0, r3
    43b6:	4b2d      	ldr	r3, [pc, #180]	; (446c <spi_data_read+0x1e4>)
    43b8:	4798      	blx	r3
    43ba:	4b31      	ldr	r3, [pc, #196]	; (4480 <spi_data_read+0x1f8>)
    43bc:	0018      	movs	r0, r3
    43be:	4b2d      	ldr	r3, [pc, #180]	; (4474 <spi_data_read+0x1ec>)
    43c0:	4798      	blx	r3
    43c2:	200d      	movs	r0, #13
    43c4:	4b2c      	ldr	r3, [pc, #176]	; (4478 <spi_data_read+0x1f0>)
    43c6:	4798      	blx	r3
			result = N_FAIL;
    43c8:	2311      	movs	r3, #17
    43ca:	18fb      	adds	r3, r7, r3
    43cc:	2200      	movs	r2, #0
    43ce:	701a      	strb	r2, [r3, #0]
			break;
    43d0:	e03d      	b.n	444e <spi_data_read+0x1c6>
		}
		if(!clockless)
    43d2:	1c7b      	adds	r3, r7, #1
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d11f      	bne.n	441a <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    43da:	4b2a      	ldr	r3, [pc, #168]	; (4484 <spi_data_read+0x1fc>)
    43dc:	781b      	ldrb	r3, [r3, #0]
    43de:	2b00      	cmp	r3, #0
    43e0:	d11b      	bne.n	441a <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    43e2:	230c      	movs	r3, #12
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2102      	movs	r1, #2
    43e8:	0018      	movs	r0, r3
    43ea:	4b1d      	ldr	r3, [pc, #116]	; (4460 <spi_data_read+0x1d8>)
    43ec:	4798      	blx	r3
    43ee:	1e03      	subs	r3, r0, #0
    43f0:	d013      	beq.n	441a <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    43f2:	2378      	movs	r3, #120	; 0x78
    43f4:	33ff      	adds	r3, #255	; 0xff
    43f6:	001a      	movs	r2, r3
    43f8:	491a      	ldr	r1, [pc, #104]	; (4464 <spi_data_read+0x1dc>)
    43fa:	4b1b      	ldr	r3, [pc, #108]	; (4468 <spi_data_read+0x1e0>)
    43fc:	0018      	movs	r0, r3
    43fe:	4b1b      	ldr	r3, [pc, #108]	; (446c <spi_data_read+0x1e4>)
    4400:	4798      	blx	r3
    4402:	4b21      	ldr	r3, [pc, #132]	; (4488 <spi_data_read+0x200>)
    4404:	0018      	movs	r0, r3
    4406:	4b1b      	ldr	r3, [pc, #108]	; (4474 <spi_data_read+0x1ec>)
    4408:	4798      	blx	r3
    440a:	200d      	movs	r0, #13
    440c:	4b1a      	ldr	r3, [pc, #104]	; (4478 <spi_data_read+0x1f0>)
    440e:	4798      	blx	r3
					result = N_FAIL;
    4410:	2311      	movs	r3, #17
    4412:	18fb      	adds	r3, r7, r3
    4414:	2200      	movs	r2, #0
    4416:	701a      	strb	r2, [r3, #0]
					break;
    4418:	e019      	b.n	444e <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    441a:	2314      	movs	r3, #20
    441c:	18fb      	adds	r3, r7, r3
    441e:	881a      	ldrh	r2, [r3, #0]
    4420:	2312      	movs	r3, #18
    4422:	18fb      	adds	r3, r7, r3
    4424:	881b      	ldrh	r3, [r3, #0]
    4426:	18d3      	adds	r3, r2, r3
    4428:	b29a      	uxth	r2, r3
    442a:	2314      	movs	r3, #20
    442c:	18fb      	adds	r3, r7, r3
    442e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4430:	2312      	movs	r3, #18
    4432:	18fb      	adds	r3, r7, r3
    4434:	881a      	ldrh	r2, [r3, #0]
    4436:	1cbb      	adds	r3, r7, #2
    4438:	1cb9      	adds	r1, r7, #2
    443a:	8809      	ldrh	r1, [r1, #0]
    443c:	1a8a      	subs	r2, r1, r2
    443e:	801a      	strh	r2, [r3, #0]

	} while (sz);
    4440:	1cbb      	adds	r3, r7, #2
    4442:	881b      	ldrh	r3, [r3, #0]
    4444:	2b00      	cmp	r3, #0
    4446:	d000      	beq.n	444a <spi_data_read+0x1c2>
    4448:	e732      	b.n	42b0 <spi_data_read+0x28>
    444a:	e000      	b.n	444e <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    444c:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    444e:	2311      	movs	r3, #17
    4450:	18fb      	adds	r3, r7, r3
    4452:	781b      	ldrb	r3, [r3, #0]
    4454:	b25b      	sxtb	r3, r3
}
    4456:	0018      	movs	r0, r3
    4458:	46bd      	mov	sp, r7
    445a:	b006      	add	sp, #24
    445c:	bd80      	pop	{r7, pc}
    445e:	46c0      	nop			; (mov r8, r8)
    4460:	00003d01 	.word	0x00003d01
    4464:	0000d3f4 	.word	0x0000d3f4
    4468:	0000ceec 	.word	0x0000ceec
    446c:	0000b081 	.word	0x0000b081
    4470:	0000cf60 	.word	0x0000cf60
    4474:	0000b1a1 	.word	0x0000b1a1
    4478:	0000b0b5 	.word	0x0000b0b5
    447c:	0000cf94 	.word	0x0000cf94
    4480:	0000cfc4 	.word	0x0000cfc4
    4484:	200000c8 	.word	0x200000c8
    4488:	0000cff4 	.word	0x0000cff4

0000448c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    448c:	b580      	push	{r7, lr}
    448e:	b086      	sub	sp, #24
    4490:	af00      	add	r7, sp, #0
    4492:	6078      	str	r0, [r7, #4]
    4494:	000a      	movs	r2, r1
    4496:	1cbb      	adds	r3, r7, #2
    4498:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    449a:	2313      	movs	r3, #19
    449c:	18fb      	adds	r3, r7, r3
    449e:	2201      	movs	r2, #1
    44a0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    44a2:	230c      	movs	r3, #12
    44a4:	18fb      	adds	r3, r7, r3
    44a6:	2200      	movs	r2, #0
    44a8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    44aa:	2316      	movs	r3, #22
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	2200      	movs	r2, #0
    44b0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    44b2:	1cbb      	adds	r3, r7, #2
    44b4:	881a      	ldrh	r2, [r3, #0]
    44b6:	2380      	movs	r3, #128	; 0x80
    44b8:	019b      	lsls	r3, r3, #6
    44ba:	429a      	cmp	r2, r3
    44bc:	d805      	bhi.n	44ca <spi_data_write+0x3e>
			nbytes = sz;
    44be:	2314      	movs	r3, #20
    44c0:	18fb      	adds	r3, r7, r3
    44c2:	1cba      	adds	r2, r7, #2
    44c4:	8812      	ldrh	r2, [r2, #0]
    44c6:	801a      	strh	r2, [r3, #0]
    44c8:	e004      	b.n	44d4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    44ca:	2314      	movs	r3, #20
    44cc:	18fb      	adds	r3, r7, r3
    44ce:	2280      	movs	r2, #128	; 0x80
    44d0:	0192      	lsls	r2, r2, #6
    44d2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    44d4:	2311      	movs	r3, #17
    44d6:	18fb      	adds	r3, r7, r3
    44d8:	22f0      	movs	r2, #240	; 0xf0
    44da:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    44dc:	2316      	movs	r3, #22
    44de:	18fb      	adds	r3, r7, r3
    44e0:	2200      	movs	r2, #0
    44e2:	5e9b      	ldrsh	r3, [r3, r2]
    44e4:	2b00      	cmp	r3, #0
    44e6:	d10f      	bne.n	4508 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    44e8:	1cbb      	adds	r3, r7, #2
    44ea:	881a      	ldrh	r2, [r3, #0]
    44ec:	2380      	movs	r3, #128	; 0x80
    44ee:	019b      	lsls	r3, r3, #6
    44f0:	429a      	cmp	r2, r3
    44f2:	d804      	bhi.n	44fe <spi_data_write+0x72>
				order = 0x3;
    44f4:	2312      	movs	r3, #18
    44f6:	18fb      	adds	r3, r7, r3
    44f8:	2203      	movs	r2, #3
    44fa:	701a      	strb	r2, [r3, #0]
    44fc:	e013      	b.n	4526 <spi_data_write+0x9a>
			else
				order = 0x1;
    44fe:	2312      	movs	r3, #18
    4500:	18fb      	adds	r3, r7, r3
    4502:	2201      	movs	r2, #1
    4504:	701a      	strb	r2, [r3, #0]
    4506:	e00e      	b.n	4526 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    4508:	1cbb      	adds	r3, r7, #2
    450a:	881a      	ldrh	r2, [r3, #0]
    450c:	2380      	movs	r3, #128	; 0x80
    450e:	019b      	lsls	r3, r3, #6
    4510:	429a      	cmp	r2, r3
    4512:	d804      	bhi.n	451e <spi_data_write+0x92>
				order = 0x3;
    4514:	2312      	movs	r3, #18
    4516:	18fb      	adds	r3, r7, r3
    4518:	2203      	movs	r2, #3
    451a:	701a      	strb	r2, [r3, #0]
    451c:	e003      	b.n	4526 <spi_data_write+0x9a>
			else
				order = 0x2;
    451e:	2312      	movs	r3, #18
    4520:	18fb      	adds	r3, r7, r3
    4522:	2202      	movs	r2, #2
    4524:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    4526:	2311      	movs	r3, #17
    4528:	18fb      	adds	r3, r7, r3
    452a:	781a      	ldrb	r2, [r3, #0]
    452c:	2312      	movs	r3, #18
    452e:	18fb      	adds	r3, r7, r3
    4530:	781b      	ldrb	r3, [r3, #0]
    4532:	4313      	orrs	r3, r2
    4534:	b2da      	uxtb	r2, r3
    4536:	2311      	movs	r3, #17
    4538:	18fb      	adds	r3, r7, r3
    453a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    453c:	2311      	movs	r3, #17
    453e:	18fb      	adds	r3, r7, r3
    4540:	2101      	movs	r1, #1
    4542:	0018      	movs	r0, r3
    4544:	4b3c      	ldr	r3, [pc, #240]	; (4638 <spi_data_write+0x1ac>)
    4546:	4798      	blx	r3
    4548:	1e03      	subs	r3, r0, #0
    454a:	d012      	beq.n	4572 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    454c:	23d4      	movs	r3, #212	; 0xd4
    454e:	005a      	lsls	r2, r3, #1
    4550:	493a      	ldr	r1, [pc, #232]	; (463c <spi_data_write+0x1b0>)
    4552:	4b3b      	ldr	r3, [pc, #236]	; (4640 <spi_data_write+0x1b4>)
    4554:	0018      	movs	r0, r3
    4556:	4b3b      	ldr	r3, [pc, #236]	; (4644 <spi_data_write+0x1b8>)
    4558:	4798      	blx	r3
    455a:	4b3b      	ldr	r3, [pc, #236]	; (4648 <spi_data_write+0x1bc>)
    455c:	0018      	movs	r0, r3
    455e:	4b3b      	ldr	r3, [pc, #236]	; (464c <spi_data_write+0x1c0>)
    4560:	4798      	blx	r3
    4562:	200d      	movs	r0, #13
    4564:	4b3a      	ldr	r3, [pc, #232]	; (4650 <spi_data_write+0x1c4>)
    4566:	4798      	blx	r3
			result = N_FAIL;
    4568:	2313      	movs	r3, #19
    456a:	18fb      	adds	r3, r7, r3
    456c:	2200      	movs	r2, #0
    456e:	701a      	strb	r2, [r3, #0]
			break;
    4570:	e05a      	b.n	4628 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    4572:	2316      	movs	r3, #22
    4574:	18fb      	adds	r3, r7, r3
    4576:	2200      	movs	r2, #0
    4578:	5e9b      	ldrsh	r3, [r3, r2]
    457a:	687a      	ldr	r2, [r7, #4]
    457c:	18d2      	adds	r2, r2, r3
    457e:	2314      	movs	r3, #20
    4580:	18fb      	adds	r3, r7, r3
    4582:	881b      	ldrh	r3, [r3, #0]
    4584:	0019      	movs	r1, r3
    4586:	0010      	movs	r0, r2
    4588:	4b2b      	ldr	r3, [pc, #172]	; (4638 <spi_data_write+0x1ac>)
    458a:	4798      	blx	r3
    458c:	1e03      	subs	r3, r0, #0
    458e:	d013      	beq.n	45b8 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    4590:	23b2      	movs	r3, #178	; 0xb2
    4592:	33ff      	adds	r3, #255	; 0xff
    4594:	001a      	movs	r2, r3
    4596:	4929      	ldr	r1, [pc, #164]	; (463c <spi_data_write+0x1b0>)
    4598:	4b29      	ldr	r3, [pc, #164]	; (4640 <spi_data_write+0x1b4>)
    459a:	0018      	movs	r0, r3
    459c:	4b29      	ldr	r3, [pc, #164]	; (4644 <spi_data_write+0x1b8>)
    459e:	4798      	blx	r3
    45a0:	4b2c      	ldr	r3, [pc, #176]	; (4654 <spi_data_write+0x1c8>)
    45a2:	0018      	movs	r0, r3
    45a4:	4b29      	ldr	r3, [pc, #164]	; (464c <spi_data_write+0x1c0>)
    45a6:	4798      	blx	r3
    45a8:	200d      	movs	r0, #13
    45aa:	4b29      	ldr	r3, [pc, #164]	; (4650 <spi_data_write+0x1c4>)
    45ac:	4798      	blx	r3
			result = N_FAIL;
    45ae:	2313      	movs	r3, #19
    45b0:	18fb      	adds	r3, r7, r3
    45b2:	2200      	movs	r2, #0
    45b4:	701a      	strb	r2, [r3, #0]
			break;
    45b6:	e037      	b.n	4628 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    45b8:	4b27      	ldr	r3, [pc, #156]	; (4658 <spi_data_write+0x1cc>)
    45ba:	781b      	ldrb	r3, [r3, #0]
    45bc:	2b00      	cmp	r3, #0
    45be:	d11b      	bne.n	45f8 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    45c0:	230c      	movs	r3, #12
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	2102      	movs	r1, #2
    45c6:	0018      	movs	r0, r3
    45c8:	4b1b      	ldr	r3, [pc, #108]	; (4638 <spi_data_write+0x1ac>)
    45ca:	4798      	blx	r3
    45cc:	1e03      	subs	r3, r0, #0
    45ce:	d013      	beq.n	45f8 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    45d0:	23bc      	movs	r3, #188	; 0xbc
    45d2:	33ff      	adds	r3, #255	; 0xff
    45d4:	001a      	movs	r2, r3
    45d6:	4919      	ldr	r1, [pc, #100]	; (463c <spi_data_write+0x1b0>)
    45d8:	4b19      	ldr	r3, [pc, #100]	; (4640 <spi_data_write+0x1b4>)
    45da:	0018      	movs	r0, r3
    45dc:	4b19      	ldr	r3, [pc, #100]	; (4644 <spi_data_write+0x1b8>)
    45de:	4798      	blx	r3
    45e0:	4b1e      	ldr	r3, [pc, #120]	; (465c <spi_data_write+0x1d0>)
    45e2:	0018      	movs	r0, r3
    45e4:	4b19      	ldr	r3, [pc, #100]	; (464c <spi_data_write+0x1c0>)
    45e6:	4798      	blx	r3
    45e8:	200d      	movs	r0, #13
    45ea:	4b19      	ldr	r3, [pc, #100]	; (4650 <spi_data_write+0x1c4>)
    45ec:	4798      	blx	r3
				result = N_FAIL;
    45ee:	2313      	movs	r3, #19
    45f0:	18fb      	adds	r3, r7, r3
    45f2:	2200      	movs	r2, #0
    45f4:	701a      	strb	r2, [r3, #0]
				break;
    45f6:	e017      	b.n	4628 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    45f8:	2316      	movs	r3, #22
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	881a      	ldrh	r2, [r3, #0]
    45fe:	2314      	movs	r3, #20
    4600:	18fb      	adds	r3, r7, r3
    4602:	881b      	ldrh	r3, [r3, #0]
    4604:	18d3      	adds	r3, r2, r3
    4606:	b29a      	uxth	r2, r3
    4608:	2316      	movs	r3, #22
    460a:	18fb      	adds	r3, r7, r3
    460c:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    460e:	1cbb      	adds	r3, r7, #2
    4610:	1cb9      	adds	r1, r7, #2
    4612:	2214      	movs	r2, #20
    4614:	18ba      	adds	r2, r7, r2
    4616:	8809      	ldrh	r1, [r1, #0]
    4618:	8812      	ldrh	r2, [r2, #0]
    461a:	1a8a      	subs	r2, r1, r2
    461c:	801a      	strh	r2, [r3, #0]
	} while (sz);
    461e:	1cbb      	adds	r3, r7, #2
    4620:	881b      	ldrh	r3, [r3, #0]
    4622:	2b00      	cmp	r3, #0
    4624:	d000      	beq.n	4628 <spi_data_write+0x19c>
    4626:	e744      	b.n	44b2 <spi_data_write+0x26>


	return result;
    4628:	2313      	movs	r3, #19
    462a:	18fb      	adds	r3, r7, r3
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	b25b      	sxtb	r3, r3
}
    4630:	0018      	movs	r0, r3
    4632:	46bd      	mov	sp, r7
    4634:	b006      	add	sp, #24
    4636:	bd80      	pop	{r7, pc}
    4638:	00003d45 	.word	0x00003d45
    463c:	0000d404 	.word	0x0000d404
    4640:	0000ceec 	.word	0x0000ceec
    4644:	0000b081 	.word	0x0000b081
    4648:	0000d028 	.word	0x0000d028
    464c:	0000b1a1 	.word	0x0000b1a1
    4650:	0000b0b5 	.word	0x0000b0b5
    4654:	0000d060 	.word	0x0000d060
    4658:	200000c8 	.word	0x200000c8
    465c:	0000d094 	.word	0x0000d094

00004660 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4660:	b5b0      	push	{r4, r5, r7, lr}
    4662:	b086      	sub	sp, #24
    4664:	af02      	add	r7, sp, #8
    4666:	6078      	str	r0, [r7, #4]
    4668:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    466a:	230d      	movs	r3, #13
    466c:	18fb      	adds	r3, r7, r3
    466e:	2201      	movs	r2, #1
    4670:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    4672:	230f      	movs	r3, #15
    4674:	18fb      	adds	r3, r7, r3
    4676:	22c9      	movs	r2, #201	; 0xc9
    4678:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    467a:	230e      	movs	r3, #14
    467c:	18fb      	adds	r3, r7, r3
    467e:	2200      	movs	r2, #0
    4680:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	2b30      	cmp	r3, #48	; 0x30
    4686:	d808      	bhi.n	469a <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    4688:	230f      	movs	r3, #15
    468a:	18fb      	adds	r3, r7, r3
    468c:	22c3      	movs	r2, #195	; 0xc3
    468e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4690:	230e      	movs	r3, #14
    4692:	18fb      	adds	r3, r7, r3
    4694:	2201      	movs	r2, #1
    4696:	701a      	strb	r2, [r3, #0]
    4698:	e007      	b.n	46aa <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    469a:	230f      	movs	r3, #15
    469c:	18fb      	adds	r3, r7, r3
    469e:	22c9      	movs	r2, #201	; 0xc9
    46a0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    46a2:	230e      	movs	r3, #14
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	2200      	movs	r2, #0
    46a8:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    46aa:	230d      	movs	r3, #13
    46ac:	18fc      	adds	r4, r7, r3
    46ae:	683a      	ldr	r2, [r7, #0]
    46b0:	6879      	ldr	r1, [r7, #4]
    46b2:	230f      	movs	r3, #15
    46b4:	18fb      	adds	r3, r7, r3
    46b6:	7818      	ldrb	r0, [r3, #0]
    46b8:	230e      	movs	r3, #14
    46ba:	18fb      	adds	r3, r7, r3
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	9300      	str	r3, [sp, #0]
    46c0:	2304      	movs	r3, #4
    46c2:	4d26      	ldr	r5, [pc, #152]	; (475c <spi_write_reg+0xfc>)
    46c4:	47a8      	blx	r5
    46c6:	0003      	movs	r3, r0
    46c8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    46ca:	230d      	movs	r3, #13
    46cc:	18fb      	adds	r3, r7, r3
    46ce:	781b      	ldrb	r3, [r3, #0]
    46d0:	b25b      	sxtb	r3, r3
    46d2:	2b01      	cmp	r3, #1
    46d4:	d012      	beq.n	46fc <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    46d6:	23ec      	movs	r3, #236	; 0xec
    46d8:	33ff      	adds	r3, #255	; 0xff
    46da:	001a      	movs	r2, r3
    46dc:	4920      	ldr	r1, [pc, #128]	; (4760 <spi_write_reg+0x100>)
    46de:	4b21      	ldr	r3, [pc, #132]	; (4764 <spi_write_reg+0x104>)
    46e0:	0018      	movs	r0, r3
    46e2:	4b21      	ldr	r3, [pc, #132]	; (4768 <spi_write_reg+0x108>)
    46e4:	4798      	blx	r3
    46e6:	687a      	ldr	r2, [r7, #4]
    46e8:	4b20      	ldr	r3, [pc, #128]	; (476c <spi_write_reg+0x10c>)
    46ea:	0011      	movs	r1, r2
    46ec:	0018      	movs	r0, r3
    46ee:	4b1e      	ldr	r3, [pc, #120]	; (4768 <spi_write_reg+0x108>)
    46f0:	4798      	blx	r3
    46f2:	200d      	movs	r0, #13
    46f4:	4b1e      	ldr	r3, [pc, #120]	; (4770 <spi_write_reg+0x110>)
    46f6:	4798      	blx	r3
		return N_FAIL;
    46f8:	2300      	movs	r3, #0
    46fa:	e02b      	b.n	4754 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    46fc:	230d      	movs	r3, #13
    46fe:	18fc      	adds	r4, r7, r3
    4700:	230f      	movs	r3, #15
    4702:	18fb      	adds	r3, r7, r3
    4704:	781b      	ldrb	r3, [r3, #0]
    4706:	0018      	movs	r0, r3
    4708:	4b1a      	ldr	r3, [pc, #104]	; (4774 <spi_write_reg+0x114>)
    470a:	4798      	blx	r3
    470c:	0003      	movs	r3, r0
    470e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4710:	230d      	movs	r3, #13
    4712:	18fb      	adds	r3, r7, r3
    4714:	781b      	ldrb	r3, [r3, #0]
    4716:	b25b      	sxtb	r3, r3
    4718:	2b01      	cmp	r3, #1
    471a:	d01a      	beq.n	4752 <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    471c:	23f2      	movs	r3, #242	; 0xf2
    471e:	33ff      	adds	r3, #255	; 0xff
    4720:	001a      	movs	r2, r3
    4722:	490f      	ldr	r1, [pc, #60]	; (4760 <spi_write_reg+0x100>)
    4724:	4b0f      	ldr	r3, [pc, #60]	; (4764 <spi_write_reg+0x104>)
    4726:	0018      	movs	r0, r3
    4728:	4b0f      	ldr	r3, [pc, #60]	; (4768 <spi_write_reg+0x108>)
    472a:	4798      	blx	r3
    472c:	687a      	ldr	r2, [r7, #4]
    472e:	4b12      	ldr	r3, [pc, #72]	; (4778 <spi_write_reg+0x118>)
    4730:	0011      	movs	r1, r2
    4732:	0018      	movs	r0, r3
    4734:	4b0c      	ldr	r3, [pc, #48]	; (4768 <spi_write_reg+0x108>)
    4736:	4798      	blx	r3
    4738:	200d      	movs	r0, #13
    473a:	4b0d      	ldr	r3, [pc, #52]	; (4770 <spi_write_reg+0x110>)
    473c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    473e:	2300      	movs	r3, #0
    4740:	9300      	str	r3, [sp, #0]
    4742:	2300      	movs	r3, #0
    4744:	2200      	movs	r2, #0
    4746:	2100      	movs	r1, #0
    4748:	20cf      	movs	r0, #207	; 0xcf
    474a:	4c04      	ldr	r4, [pc, #16]	; (475c <spi_write_reg+0xfc>)
    474c:	47a0      	blx	r4
		return N_FAIL;
    474e:	2300      	movs	r3, #0
    4750:	e000      	b.n	4754 <spi_write_reg+0xf4>
	}

	return N_OK;
    4752:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    4754:	0018      	movs	r0, r3
    4756:	46bd      	mov	sp, r7
    4758:	b004      	add	sp, #16
    475a:	bdb0      	pop	{r4, r5, r7, pc}
    475c:	00003e09 	.word	0x00003e09
    4760:	0000d414 	.word	0x0000d414
    4764:	0000ceec 	.word	0x0000ceec
    4768:	0000b081 	.word	0x0000b081
    476c:	0000d0cc 	.word	0x0000d0cc
    4770:	0000b0b5 	.word	0x0000b0b5
    4774:	0000414d 	.word	0x0000414d
    4778:	0000d0f8 	.word	0x0000d0f8

0000477c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    477c:	b5b0      	push	{r4, r5, r7, lr}
    477e:	b088      	sub	sp, #32
    4780:	af02      	add	r7, sp, #8
    4782:	60f8      	str	r0, [r7, #12]
    4784:	60b9      	str	r1, [r7, #8]
    4786:	1dbb      	adds	r3, r7, #6
    4788:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    478a:	2317      	movs	r3, #23
    478c:	18fb      	adds	r3, r7, r3
    478e:	22c7      	movs	r2, #199	; 0xc7
    4790:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    4792:	1dbb      	adds	r3, r7, #6
    4794:	881a      	ldrh	r2, [r3, #0]
    4796:	2316      	movs	r3, #22
    4798:	18fc      	adds	r4, r7, r3
    479a:	68f9      	ldr	r1, [r7, #12]
    479c:	2317      	movs	r3, #23
    479e:	18fb      	adds	r3, r7, r3
    47a0:	7818      	ldrb	r0, [r3, #0]
    47a2:	2300      	movs	r3, #0
    47a4:	9300      	str	r3, [sp, #0]
    47a6:	0013      	movs	r3, r2
    47a8:	2200      	movs	r2, #0
    47aa:	4d37      	ldr	r5, [pc, #220]	; (4888 <nm_spi_write+0x10c>)
    47ac:	47a8      	blx	r5
    47ae:	0003      	movs	r3, r0
    47b0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    47b2:	2316      	movs	r3, #22
    47b4:	18fb      	adds	r3, r7, r3
    47b6:	781b      	ldrb	r3, [r3, #0]
    47b8:	b25b      	sxtb	r3, r3
    47ba:	2b01      	cmp	r3, #1
    47bc:	d010      	beq.n	47e0 <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    47be:	4a33      	ldr	r2, [pc, #204]	; (488c <nm_spi_write+0x110>)
    47c0:	4933      	ldr	r1, [pc, #204]	; (4890 <nm_spi_write+0x114>)
    47c2:	4b34      	ldr	r3, [pc, #208]	; (4894 <nm_spi_write+0x118>)
    47c4:	0018      	movs	r0, r3
    47c6:	4b34      	ldr	r3, [pc, #208]	; (4898 <nm_spi_write+0x11c>)
    47c8:	4798      	blx	r3
    47ca:	68fa      	ldr	r2, [r7, #12]
    47cc:	4b33      	ldr	r3, [pc, #204]	; (489c <nm_spi_write+0x120>)
    47ce:	0011      	movs	r1, r2
    47d0:	0018      	movs	r0, r3
    47d2:	4b31      	ldr	r3, [pc, #196]	; (4898 <nm_spi_write+0x11c>)
    47d4:	4798      	blx	r3
    47d6:	200d      	movs	r0, #13
    47d8:	4b31      	ldr	r3, [pc, #196]	; (48a0 <nm_spi_write+0x124>)
    47da:	4798      	blx	r3
		return N_FAIL;
    47dc:	2300      	movs	r3, #0
    47de:	e04f      	b.n	4880 <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    47e0:	2316      	movs	r3, #22
    47e2:	18fc      	adds	r4, r7, r3
    47e4:	2317      	movs	r3, #23
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	781b      	ldrb	r3, [r3, #0]
    47ea:	0018      	movs	r0, r3
    47ec:	4b2d      	ldr	r3, [pc, #180]	; (48a4 <nm_spi_write+0x128>)
    47ee:	4798      	blx	r3
    47f0:	0003      	movs	r3, r0
    47f2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    47f4:	2316      	movs	r3, #22
    47f6:	18fb      	adds	r3, r7, r3
    47f8:	781b      	ldrb	r3, [r3, #0]
    47fa:	b25b      	sxtb	r3, r3
    47fc:	2b01      	cmp	r3, #1
    47fe:	d018      	beq.n	4832 <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    4800:	4a29      	ldr	r2, [pc, #164]	; (48a8 <nm_spi_write+0x12c>)
    4802:	4923      	ldr	r1, [pc, #140]	; (4890 <nm_spi_write+0x114>)
    4804:	4b23      	ldr	r3, [pc, #140]	; (4894 <nm_spi_write+0x118>)
    4806:	0018      	movs	r0, r3
    4808:	4b23      	ldr	r3, [pc, #140]	; (4898 <nm_spi_write+0x11c>)
    480a:	4798      	blx	r3
    480c:	68fa      	ldr	r2, [r7, #12]
    480e:	4b27      	ldr	r3, [pc, #156]	; (48ac <nm_spi_write+0x130>)
    4810:	0011      	movs	r1, r2
    4812:	0018      	movs	r0, r3
    4814:	4b20      	ldr	r3, [pc, #128]	; (4898 <nm_spi_write+0x11c>)
    4816:	4798      	blx	r3
    4818:	200d      	movs	r0, #13
    481a:	4b21      	ldr	r3, [pc, #132]	; (48a0 <nm_spi_write+0x124>)
    481c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    481e:	2300      	movs	r3, #0
    4820:	9300      	str	r3, [sp, #0]
    4822:	2300      	movs	r3, #0
    4824:	2200      	movs	r2, #0
    4826:	2100      	movs	r1, #0
    4828:	20cf      	movs	r0, #207	; 0xcf
    482a:	4c17      	ldr	r4, [pc, #92]	; (4888 <nm_spi_write+0x10c>)
    482c:	47a0      	blx	r4
		return N_FAIL;
    482e:	2300      	movs	r3, #0
    4830:	e026      	b.n	4880 <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    4832:	2316      	movs	r3, #22
    4834:	18fc      	adds	r4, r7, r3
    4836:	1dbb      	adds	r3, r7, #6
    4838:	881a      	ldrh	r2, [r3, #0]
    483a:	68bb      	ldr	r3, [r7, #8]
    483c:	0011      	movs	r1, r2
    483e:	0018      	movs	r0, r3
    4840:	4b1b      	ldr	r3, [pc, #108]	; (48b0 <nm_spi_write+0x134>)
    4842:	4798      	blx	r3
    4844:	0003      	movs	r3, r0
    4846:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4848:	2316      	movs	r3, #22
    484a:	18fb      	adds	r3, r7, r3
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	b25b      	sxtb	r3, r3
    4850:	2b01      	cmp	r3, #1
    4852:	d014      	beq.n	487e <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4854:	4a17      	ldr	r2, [pc, #92]	; (48b4 <nm_spi_write+0x138>)
    4856:	490e      	ldr	r1, [pc, #56]	; (4890 <nm_spi_write+0x114>)
    4858:	4b0e      	ldr	r3, [pc, #56]	; (4894 <nm_spi_write+0x118>)
    485a:	0018      	movs	r0, r3
    485c:	4b0e      	ldr	r3, [pc, #56]	; (4898 <nm_spi_write+0x11c>)
    485e:	4798      	blx	r3
    4860:	4b15      	ldr	r3, [pc, #84]	; (48b8 <nm_spi_write+0x13c>)
    4862:	0018      	movs	r0, r3
    4864:	4b15      	ldr	r3, [pc, #84]	; (48bc <nm_spi_write+0x140>)
    4866:	4798      	blx	r3
    4868:	200d      	movs	r0, #13
    486a:	4b0d      	ldr	r3, [pc, #52]	; (48a0 <nm_spi_write+0x124>)
    486c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    486e:	2300      	movs	r3, #0
    4870:	9300      	str	r3, [sp, #0]
    4872:	2300      	movs	r3, #0
    4874:	2200      	movs	r2, #0
    4876:	2100      	movs	r1, #0
    4878:	20cf      	movs	r0, #207	; 0xcf
    487a:	4c03      	ldr	r4, [pc, #12]	; (4888 <nm_spi_write+0x10c>)
    487c:	47a0      	blx	r4
	}

	return N_OK;
    487e:	2301      	movs	r3, #1
}
    4880:	0018      	movs	r0, r3
    4882:	46bd      	mov	sp, r7
    4884:	b006      	add	sp, #24
    4886:	bdb0      	pop	{r4, r5, r7, pc}
    4888:	00003e09 	.word	0x00003e09
    488c:	0000020f 	.word	0x0000020f
    4890:	0000d424 	.word	0x0000d424
    4894:	0000ceec 	.word	0x0000ceec
    4898:	0000b081 	.word	0x0000b081
    489c:	0000d130 	.word	0x0000d130
    48a0:	0000b0b5 	.word	0x0000b0b5
    48a4:	0000414d 	.word	0x0000414d
    48a8:	00000215 	.word	0x00000215
    48ac:	0000d160 	.word	0x0000d160
    48b0:	0000448d 	.word	0x0000448d
    48b4:	00000226 	.word	0x00000226
    48b8:	0000d198 	.word	0x0000d198
    48bc:	0000b1a1 	.word	0x0000b1a1

000048c0 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    48c0:	b5b0      	push	{r4, r5, r7, lr}
    48c2:	b086      	sub	sp, #24
    48c4:	af02      	add	r7, sp, #8
    48c6:	6078      	str	r0, [r7, #4]
    48c8:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    48ca:	230d      	movs	r3, #13
    48cc:	18fb      	adds	r3, r7, r3
    48ce:	2201      	movs	r2, #1
    48d0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    48d2:	230f      	movs	r3, #15
    48d4:	18fb      	adds	r3, r7, r3
    48d6:	22ca      	movs	r2, #202	; 0xca
    48d8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    48da:	230e      	movs	r3, #14
    48dc:	18fb      	adds	r3, r7, r3
    48de:	2200      	movs	r2, #0
    48e0:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	2bff      	cmp	r3, #255	; 0xff
    48e6:	d808      	bhi.n	48fa <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    48e8:	230f      	movs	r3, #15
    48ea:	18fb      	adds	r3, r7, r3
    48ec:	22c4      	movs	r2, #196	; 0xc4
    48ee:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    48f0:	230e      	movs	r3, #14
    48f2:	18fb      	adds	r3, r7, r3
    48f4:	2201      	movs	r2, #1
    48f6:	701a      	strb	r2, [r3, #0]
    48f8:	e007      	b.n	490a <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    48fa:	230f      	movs	r3, #15
    48fc:	18fb      	adds	r3, r7, r3
    48fe:	22ca      	movs	r2, #202	; 0xca
    4900:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    4902:	230e      	movs	r3, #14
    4904:	18fb      	adds	r3, r7, r3
    4906:	2200      	movs	r2, #0
    4908:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    490a:	230d      	movs	r3, #13
    490c:	18fc      	adds	r4, r7, r3
    490e:	6879      	ldr	r1, [r7, #4]
    4910:	230f      	movs	r3, #15
    4912:	18fb      	adds	r3, r7, r3
    4914:	7818      	ldrb	r0, [r3, #0]
    4916:	230e      	movs	r3, #14
    4918:	18fb      	adds	r3, r7, r3
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	9300      	str	r3, [sp, #0]
    491e:	2304      	movs	r3, #4
    4920:	2200      	movs	r2, #0
    4922:	4d44      	ldr	r5, [pc, #272]	; (4a34 <spi_read_reg+0x174>)
    4924:	47a8      	blx	r5
    4926:	0003      	movs	r3, r0
    4928:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    492a:	230d      	movs	r3, #13
    492c:	18fb      	adds	r3, r7, r3
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	b25b      	sxtb	r3, r3
    4932:	2b01      	cmp	r3, #1
    4934:	d010      	beq.n	4958 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4936:	4a40      	ldr	r2, [pc, #256]	; (4a38 <spi_read_reg+0x178>)
    4938:	4940      	ldr	r1, [pc, #256]	; (4a3c <spi_read_reg+0x17c>)
    493a:	4b41      	ldr	r3, [pc, #260]	; (4a40 <spi_read_reg+0x180>)
    493c:	0018      	movs	r0, r3
    493e:	4b41      	ldr	r3, [pc, #260]	; (4a44 <spi_read_reg+0x184>)
    4940:	4798      	blx	r3
    4942:	687a      	ldr	r2, [r7, #4]
    4944:	4b40      	ldr	r3, [pc, #256]	; (4a48 <spi_read_reg+0x188>)
    4946:	0011      	movs	r1, r2
    4948:	0018      	movs	r0, r3
    494a:	4b3e      	ldr	r3, [pc, #248]	; (4a44 <spi_read_reg+0x184>)
    494c:	4798      	blx	r3
    494e:	200d      	movs	r0, #13
    4950:	4b3e      	ldr	r3, [pc, #248]	; (4a4c <spi_read_reg+0x18c>)
    4952:	4798      	blx	r3
		return N_FAIL;
    4954:	2300      	movs	r3, #0
    4956:	e068      	b.n	4a2a <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    4958:	230d      	movs	r3, #13
    495a:	18fc      	adds	r4, r7, r3
    495c:	230f      	movs	r3, #15
    495e:	18fb      	adds	r3, r7, r3
    4960:	781b      	ldrb	r3, [r3, #0]
    4962:	0018      	movs	r0, r3
    4964:	4b3a      	ldr	r3, [pc, #232]	; (4a50 <spi_read_reg+0x190>)
    4966:	4798      	blx	r3
    4968:	0003      	movs	r3, r0
    496a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    496c:	230d      	movs	r3, #13
    496e:	18fb      	adds	r3, r7, r3
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	b25b      	sxtb	r3, r3
    4974:	2b01      	cmp	r3, #1
    4976:	d018      	beq.n	49aa <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    4978:	4a36      	ldr	r2, [pc, #216]	; (4a54 <spi_read_reg+0x194>)
    497a:	4930      	ldr	r1, [pc, #192]	; (4a3c <spi_read_reg+0x17c>)
    497c:	4b30      	ldr	r3, [pc, #192]	; (4a40 <spi_read_reg+0x180>)
    497e:	0018      	movs	r0, r3
    4980:	4b30      	ldr	r3, [pc, #192]	; (4a44 <spi_read_reg+0x184>)
    4982:	4798      	blx	r3
    4984:	687a      	ldr	r2, [r7, #4]
    4986:	4b34      	ldr	r3, [pc, #208]	; (4a58 <spi_read_reg+0x198>)
    4988:	0011      	movs	r1, r2
    498a:	0018      	movs	r0, r3
    498c:	4b2d      	ldr	r3, [pc, #180]	; (4a44 <spi_read_reg+0x184>)
    498e:	4798      	blx	r3
    4990:	200d      	movs	r0, #13
    4992:	4b2e      	ldr	r3, [pc, #184]	; (4a4c <spi_read_reg+0x18c>)
    4994:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4996:	2300      	movs	r3, #0
    4998:	9300      	str	r3, [sp, #0]
    499a:	2300      	movs	r3, #0
    499c:	2200      	movs	r2, #0
    499e:	2100      	movs	r1, #0
    49a0:	20cf      	movs	r0, #207	; 0xcf
    49a2:	4c24      	ldr	r4, [pc, #144]	; (4a34 <spi_read_reg+0x174>)
    49a4:	47a0      	blx	r4
		return N_FAIL;
    49a6:	2300      	movs	r3, #0
    49a8:	e03f      	b.n	4a2a <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    49aa:	230d      	movs	r3, #13
    49ac:	18fc      	adds	r4, r7, r3
    49ae:	230e      	movs	r3, #14
    49b0:	18fb      	adds	r3, r7, r3
    49b2:	781a      	ldrb	r2, [r3, #0]
    49b4:	2308      	movs	r3, #8
    49b6:	18fb      	adds	r3, r7, r3
    49b8:	2104      	movs	r1, #4
    49ba:	0018      	movs	r0, r3
    49bc:	4b27      	ldr	r3, [pc, #156]	; (4a5c <spi_read_reg+0x19c>)
    49be:	4798      	blx	r3
    49c0:	0003      	movs	r3, r0
    49c2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    49c4:	230d      	movs	r3, #13
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	781b      	ldrb	r3, [r3, #0]
    49ca:	b25b      	sxtb	r3, r3
    49cc:	2b01      	cmp	r3, #1
    49ce:	d016      	beq.n	49fe <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    49d0:	4a23      	ldr	r2, [pc, #140]	; (4a60 <spi_read_reg+0x1a0>)
    49d2:	491a      	ldr	r1, [pc, #104]	; (4a3c <spi_read_reg+0x17c>)
    49d4:	4b1a      	ldr	r3, [pc, #104]	; (4a40 <spi_read_reg+0x180>)
    49d6:	0018      	movs	r0, r3
    49d8:	4b1a      	ldr	r3, [pc, #104]	; (4a44 <spi_read_reg+0x184>)
    49da:	4798      	blx	r3
    49dc:	4b21      	ldr	r3, [pc, #132]	; (4a64 <spi_read_reg+0x1a4>)
    49de:	0018      	movs	r0, r3
    49e0:	4b21      	ldr	r3, [pc, #132]	; (4a68 <spi_read_reg+0x1a8>)
    49e2:	4798      	blx	r3
    49e4:	200d      	movs	r0, #13
    49e6:	4b19      	ldr	r3, [pc, #100]	; (4a4c <spi_read_reg+0x18c>)
    49e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    49ea:	2300      	movs	r3, #0
    49ec:	9300      	str	r3, [sp, #0]
    49ee:	2300      	movs	r3, #0
    49f0:	2200      	movs	r2, #0
    49f2:	2100      	movs	r1, #0
    49f4:	20cf      	movs	r0, #207	; 0xcf
    49f6:	4c0f      	ldr	r4, [pc, #60]	; (4a34 <spi_read_reg+0x174>)
    49f8:	47a0      	blx	r4
		return N_FAIL;
    49fa:	2300      	movs	r3, #0
    49fc:	e015      	b.n	4a2a <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    49fe:	2308      	movs	r3, #8
    4a00:	18fb      	adds	r3, r7, r3
    4a02:	781b      	ldrb	r3, [r3, #0]
    4a04:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    4a06:	2308      	movs	r3, #8
    4a08:	18fb      	adds	r3, r7, r3
    4a0a:	785b      	ldrb	r3, [r3, #1]
    4a0c:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    4a0e:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    4a10:	2308      	movs	r3, #8
    4a12:	18fb      	adds	r3, r7, r3
    4a14:	789b      	ldrb	r3, [r3, #2]
    4a16:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    4a18:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    4a1a:	2308      	movs	r3, #8
    4a1c:	18fb      	adds	r3, r7, r3
    4a1e:	78db      	ldrb	r3, [r3, #3]
    4a20:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    4a22:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    4a28:	2301      	movs	r3, #1
}
    4a2a:	0018      	movs	r0, r3
    4a2c:	46bd      	mov	sp, r7
    4a2e:	b004      	add	sp, #16
    4a30:	bdb0      	pop	{r4, r5, r7, pc}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	00003e09 	.word	0x00003e09
    4a38:	00000245 	.word	0x00000245
    4a3c:	0000d434 	.word	0x0000d434
    4a40:	0000ceec 	.word	0x0000ceec
    4a44:	0000b081 	.word	0x0000b081
    4a48:	0000d1c0 	.word	0x0000d1c0
    4a4c:	0000b0b5 	.word	0x0000b0b5
    4a50:	0000414d 	.word	0x0000414d
    4a54:	0000024b 	.word	0x0000024b
    4a58:	0000d1ec 	.word	0x0000d1ec
    4a5c:	00004289 	.word	0x00004289
    4a60:	00000253 	.word	0x00000253
    4a64:	0000d220 	.word	0x0000d220
    4a68:	0000b1a1 	.word	0x0000b1a1

00004a6c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    4a6c:	b5b0      	push	{r4, r5, r7, lr}
    4a6e:	b088      	sub	sp, #32
    4a70:	af02      	add	r7, sp, #8
    4a72:	60f8      	str	r0, [r7, #12]
    4a74:	60b9      	str	r1, [r7, #8]
    4a76:	1dbb      	adds	r3, r7, #6
    4a78:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    4a7a:	2317      	movs	r3, #23
    4a7c:	18fb      	adds	r3, r7, r3
    4a7e:	22c8      	movs	r2, #200	; 0xc8
    4a80:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    4a82:	1dbb      	adds	r3, r7, #6
    4a84:	881a      	ldrh	r2, [r3, #0]
    4a86:	2316      	movs	r3, #22
    4a88:	18fc      	adds	r4, r7, r3
    4a8a:	68f9      	ldr	r1, [r7, #12]
    4a8c:	2317      	movs	r3, #23
    4a8e:	18fb      	adds	r3, r7, r3
    4a90:	7818      	ldrb	r0, [r3, #0]
    4a92:	2300      	movs	r3, #0
    4a94:	9300      	str	r3, [sp, #0]
    4a96:	0013      	movs	r3, r2
    4a98:	2200      	movs	r2, #0
    4a9a:	4d39      	ldr	r5, [pc, #228]	; (4b80 <nm_spi_read+0x114>)
    4a9c:	47a8      	blx	r5
    4a9e:	0003      	movs	r3, r0
    4aa0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4aa2:	2316      	movs	r3, #22
    4aa4:	18fb      	adds	r3, r7, r3
    4aa6:	781b      	ldrb	r3, [r3, #0]
    4aa8:	b25b      	sxtb	r3, r3
    4aaa:	2b01      	cmp	r3, #1
    4aac:	d011      	beq.n	4ad2 <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4aae:	239d      	movs	r3, #157	; 0x9d
    4ab0:	009a      	lsls	r2, r3, #2
    4ab2:	4934      	ldr	r1, [pc, #208]	; (4b84 <nm_spi_read+0x118>)
    4ab4:	4b34      	ldr	r3, [pc, #208]	; (4b88 <nm_spi_read+0x11c>)
    4ab6:	0018      	movs	r0, r3
    4ab8:	4b34      	ldr	r3, [pc, #208]	; (4b8c <nm_spi_read+0x120>)
    4aba:	4798      	blx	r3
    4abc:	68fa      	ldr	r2, [r7, #12]
    4abe:	4b34      	ldr	r3, [pc, #208]	; (4b90 <nm_spi_read+0x124>)
    4ac0:	0011      	movs	r1, r2
    4ac2:	0018      	movs	r0, r3
    4ac4:	4b31      	ldr	r3, [pc, #196]	; (4b8c <nm_spi_read+0x120>)
    4ac6:	4798      	blx	r3
    4ac8:	200d      	movs	r0, #13
    4aca:	4b32      	ldr	r3, [pc, #200]	; (4b94 <nm_spi_read+0x128>)
    4acc:	4798      	blx	r3
		return N_FAIL;
    4ace:	2300      	movs	r3, #0
    4ad0:	e052      	b.n	4b78 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    4ad2:	2316      	movs	r3, #22
    4ad4:	18fc      	adds	r4, r7, r3
    4ad6:	2317      	movs	r3, #23
    4ad8:	18fb      	adds	r3, r7, r3
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	0018      	movs	r0, r3
    4ade:	4b2e      	ldr	r3, [pc, #184]	; (4b98 <nm_spi_read+0x12c>)
    4ae0:	4798      	blx	r3
    4ae2:	0003      	movs	r3, r0
    4ae4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4ae6:	2316      	movs	r3, #22
    4ae8:	18fb      	adds	r3, r7, r3
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	b25b      	sxtb	r3, r3
    4aee:	2b01      	cmp	r3, #1
    4af0:	d018      	beq.n	4b24 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4af2:	4a2a      	ldr	r2, [pc, #168]	; (4b9c <nm_spi_read+0x130>)
    4af4:	4923      	ldr	r1, [pc, #140]	; (4b84 <nm_spi_read+0x118>)
    4af6:	4b24      	ldr	r3, [pc, #144]	; (4b88 <nm_spi_read+0x11c>)
    4af8:	0018      	movs	r0, r3
    4afa:	4b24      	ldr	r3, [pc, #144]	; (4b8c <nm_spi_read+0x120>)
    4afc:	4798      	blx	r3
    4afe:	68fa      	ldr	r2, [r7, #12]
    4b00:	4b27      	ldr	r3, [pc, #156]	; (4ba0 <nm_spi_read+0x134>)
    4b02:	0011      	movs	r1, r2
    4b04:	0018      	movs	r0, r3
    4b06:	4b21      	ldr	r3, [pc, #132]	; (4b8c <nm_spi_read+0x120>)
    4b08:	4798      	blx	r3
    4b0a:	200d      	movs	r0, #13
    4b0c:	4b21      	ldr	r3, [pc, #132]	; (4b94 <nm_spi_read+0x128>)
    4b0e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4b10:	2300      	movs	r3, #0
    4b12:	9300      	str	r3, [sp, #0]
    4b14:	2300      	movs	r3, #0
    4b16:	2200      	movs	r2, #0
    4b18:	2100      	movs	r1, #0
    4b1a:	20cf      	movs	r0, #207	; 0xcf
    4b1c:	4c18      	ldr	r4, [pc, #96]	; (4b80 <nm_spi_read+0x114>)
    4b1e:	47a0      	blx	r4
		return N_FAIL;
    4b20:	2300      	movs	r3, #0
    4b22:	e029      	b.n	4b78 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    4b24:	2316      	movs	r3, #22
    4b26:	18fc      	adds	r4, r7, r3
    4b28:	1dbb      	adds	r3, r7, #6
    4b2a:	8819      	ldrh	r1, [r3, #0]
    4b2c:	68bb      	ldr	r3, [r7, #8]
    4b2e:	2200      	movs	r2, #0
    4b30:	0018      	movs	r0, r3
    4b32:	4b1c      	ldr	r3, [pc, #112]	; (4ba4 <nm_spi_read+0x138>)
    4b34:	4798      	blx	r3
    4b36:	0003      	movs	r3, r0
    4b38:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4b3a:	2316      	movs	r3, #22
    4b3c:	18fb      	adds	r3, r7, r3
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	b25b      	sxtb	r3, r3
    4b42:	2b01      	cmp	r3, #1
    4b44:	d017      	beq.n	4b76 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    4b46:	23a1      	movs	r3, #161	; 0xa1
    4b48:	009a      	lsls	r2, r3, #2
    4b4a:	490e      	ldr	r1, [pc, #56]	; (4b84 <nm_spi_read+0x118>)
    4b4c:	4b0e      	ldr	r3, [pc, #56]	; (4b88 <nm_spi_read+0x11c>)
    4b4e:	0018      	movs	r0, r3
    4b50:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <nm_spi_read+0x120>)
    4b52:	4798      	blx	r3
    4b54:	4b14      	ldr	r3, [pc, #80]	; (4ba8 <nm_spi_read+0x13c>)
    4b56:	0018      	movs	r0, r3
    4b58:	4b14      	ldr	r3, [pc, #80]	; (4bac <nm_spi_read+0x140>)
    4b5a:	4798      	blx	r3
    4b5c:	200d      	movs	r0, #13
    4b5e:	4b0d      	ldr	r3, [pc, #52]	; (4b94 <nm_spi_read+0x128>)
    4b60:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4b62:	2300      	movs	r3, #0
    4b64:	9300      	str	r3, [sp, #0]
    4b66:	2300      	movs	r3, #0
    4b68:	2200      	movs	r2, #0
    4b6a:	2100      	movs	r1, #0
    4b6c:	20cf      	movs	r0, #207	; 0xcf
    4b6e:	4c04      	ldr	r4, [pc, #16]	; (4b80 <nm_spi_read+0x114>)
    4b70:	47a0      	blx	r4
		return N_FAIL;
    4b72:	2300      	movs	r3, #0
    4b74:	e000      	b.n	4b78 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    4b76:	2301      	movs	r3, #1
}
    4b78:	0018      	movs	r0, r3
    4b7a:	46bd      	mov	sp, r7
    4b7c:	b006      	add	sp, #24
    4b7e:	bdb0      	pop	{r4, r5, r7, pc}
    4b80:	00003e09 	.word	0x00003e09
    4b84:	0000d444 	.word	0x0000d444
    4b88:	0000ceec 	.word	0x0000ceec
    4b8c:	0000b081 	.word	0x0000b081
    4b90:	0000d240 	.word	0x0000d240
    4b94:	0000b0b5 	.word	0x0000b0b5
    4b98:	0000414d 	.word	0x0000414d
    4b9c:	0000027a 	.word	0x0000027a
    4ba0:	0000d270 	.word	0x0000d270
    4ba4:	00004289 	.word	0x00004289
    4ba8:	0000d2a8 	.word	0x0000d2a8
    4bac:	0000b1a1 	.word	0x0000b1a1

00004bb0 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b082      	sub	sp, #8
    4bb4:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    4bb6:	4b0c      	ldr	r3, [pc, #48]	; (4be8 <spi_init_pkt_sz+0x38>)
    4bb8:	0018      	movs	r0, r3
    4bba:	4b0c      	ldr	r3, [pc, #48]	; (4bec <spi_init_pkt_sz+0x3c>)
    4bbc:	4798      	blx	r3
    4bbe:	0003      	movs	r3, r0
    4bc0:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	2270      	movs	r2, #112	; 0x70
    4bc6:	4393      	bics	r3, r2
    4bc8:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	2250      	movs	r2, #80	; 0x50
    4bce:	4313      	orrs	r3, r2
    4bd0:	607b      	str	r3, [r7, #4]
    4bd2:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	4a04      	ldr	r2, [pc, #16]	; (4be8 <spi_init_pkt_sz+0x38>)
    4bd8:	0019      	movs	r1, r3
    4bda:	0010      	movs	r0, r2
    4bdc:	4b04      	ldr	r3, [pc, #16]	; (4bf0 <spi_init_pkt_sz+0x40>)
    4bde:	4798      	blx	r3
}
    4be0:	46c0      	nop			; (mov r8, r8)
    4be2:	46bd      	mov	sp, r7
    4be4:	b002      	add	sp, #8
    4be6:	bd80      	pop	{r7, pc}
    4be8:	0000e824 	.word	0x0000e824
    4bec:	00004d55 	.word	0x00004d55
    4bf0:	00004dc9 	.word	0x00004dc9

00004bf4 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b082      	sub	sp, #8
    4bf8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    4bfa:	2300      	movs	r3, #0
    4bfc:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    4bfe:	4b3f      	ldr	r3, [pc, #252]	; (4cfc <nm_spi_init+0x108>)
    4c00:	2200      	movs	r2, #0
    4c02:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4c04:	003b      	movs	r3, r7
    4c06:	4a3e      	ldr	r2, [pc, #248]	; (4d00 <nm_spi_init+0x10c>)
    4c08:	0019      	movs	r1, r3
    4c0a:	0010      	movs	r0, r2
    4c0c:	4b3d      	ldr	r3, [pc, #244]	; (4d04 <nm_spi_init+0x110>)
    4c0e:	4798      	blx	r3
    4c10:	1e03      	subs	r3, r0, #0
    4c12:	d127      	bne.n	4c64 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4c14:	4b39      	ldr	r3, [pc, #228]	; (4cfc <nm_spi_init+0x108>)
    4c16:	2201      	movs	r2, #1
    4c18:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    4c1a:	4a3b      	ldr	r2, [pc, #236]	; (4d08 <nm_spi_init+0x114>)
    4c1c:	493b      	ldr	r1, [pc, #236]	; (4d0c <nm_spi_init+0x118>)
    4c1e:	4b3c      	ldr	r3, [pc, #240]	; (4d10 <nm_spi_init+0x11c>)
    4c20:	0018      	movs	r0, r3
    4c22:	4b3c      	ldr	r3, [pc, #240]	; (4d14 <nm_spi_init+0x120>)
    4c24:	4798      	blx	r3
    4c26:	4b3c      	ldr	r3, [pc, #240]	; (4d18 <nm_spi_init+0x124>)
    4c28:	0018      	movs	r0, r3
    4c2a:	4b3c      	ldr	r3, [pc, #240]	; (4d1c <nm_spi_init+0x128>)
    4c2c:	4798      	blx	r3
    4c2e:	200d      	movs	r0, #13
    4c30:	4b3b      	ldr	r3, [pc, #236]	; (4d20 <nm_spi_init+0x12c>)
    4c32:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4c34:	003b      	movs	r3, r7
    4c36:	4a32      	ldr	r2, [pc, #200]	; (4d00 <nm_spi_init+0x10c>)
    4c38:	0019      	movs	r1, r3
    4c3a:	0010      	movs	r0, r2
    4c3c:	4b31      	ldr	r3, [pc, #196]	; (4d04 <nm_spi_init+0x110>)
    4c3e:	4798      	blx	r3
    4c40:	1e03      	subs	r3, r0, #0
    4c42:	d10f      	bne.n	4c64 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4c44:	23b2      	movs	r3, #178	; 0xb2
    4c46:	009a      	lsls	r2, r3, #2
    4c48:	4930      	ldr	r1, [pc, #192]	; (4d0c <nm_spi_init+0x118>)
    4c4a:	4b31      	ldr	r3, [pc, #196]	; (4d10 <nm_spi_init+0x11c>)
    4c4c:	0018      	movs	r0, r3
    4c4e:	4b31      	ldr	r3, [pc, #196]	; (4d14 <nm_spi_init+0x120>)
    4c50:	4798      	blx	r3
    4c52:	4b34      	ldr	r3, [pc, #208]	; (4d24 <nm_spi_init+0x130>)
    4c54:	0018      	movs	r0, r3
    4c56:	4b31      	ldr	r3, [pc, #196]	; (4d1c <nm_spi_init+0x128>)
    4c58:	4798      	blx	r3
    4c5a:	200d      	movs	r0, #13
    4c5c:	4b30      	ldr	r3, [pc, #192]	; (4d20 <nm_spi_init+0x12c>)
    4c5e:	4798      	blx	r3
			return 0;
    4c60:	2300      	movs	r3, #0
    4c62:	e046      	b.n	4cf2 <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    4c64:	4b25      	ldr	r3, [pc, #148]	; (4cfc <nm_spi_init+0x108>)
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d125      	bne.n	4cb8 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    4c6c:	683b      	ldr	r3, [r7, #0]
    4c6e:	220c      	movs	r2, #12
    4c70:	4393      	bics	r3, r2
    4c72:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    4c74:	683b      	ldr	r3, [r7, #0]
    4c76:	2270      	movs	r2, #112	; 0x70
    4c78:	4393      	bics	r3, r2
    4c7a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4c7c:	683b      	ldr	r3, [r7, #0]
    4c7e:	2250      	movs	r2, #80	; 0x50
    4c80:	4313      	orrs	r3, r2
    4c82:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4c84:	683b      	ldr	r3, [r7, #0]
    4c86:	4a1e      	ldr	r2, [pc, #120]	; (4d00 <nm_spi_init+0x10c>)
    4c88:	0019      	movs	r1, r3
    4c8a:	0010      	movs	r0, r2
    4c8c:	4b26      	ldr	r3, [pc, #152]	; (4d28 <nm_spi_init+0x134>)
    4c8e:	4798      	blx	r3
    4c90:	1e03      	subs	r3, r0, #0
    4c92:	d10e      	bne.n	4cb2 <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    4c94:	4a25      	ldr	r2, [pc, #148]	; (4d2c <nm_spi_init+0x138>)
    4c96:	491d      	ldr	r1, [pc, #116]	; (4d0c <nm_spi_init+0x118>)
    4c98:	4b1d      	ldr	r3, [pc, #116]	; (4d10 <nm_spi_init+0x11c>)
    4c9a:	0018      	movs	r0, r3
    4c9c:	4b1d      	ldr	r3, [pc, #116]	; (4d14 <nm_spi_init+0x120>)
    4c9e:	4798      	blx	r3
    4ca0:	4b23      	ldr	r3, [pc, #140]	; (4d30 <nm_spi_init+0x13c>)
    4ca2:	0018      	movs	r0, r3
    4ca4:	4b1d      	ldr	r3, [pc, #116]	; (4d1c <nm_spi_init+0x128>)
    4ca6:	4798      	blx	r3
    4ca8:	200d      	movs	r0, #13
    4caa:	4b1d      	ldr	r3, [pc, #116]	; (4d20 <nm_spi_init+0x12c>)
    4cac:	4798      	blx	r3
			return 0;
    4cae:	2300      	movs	r3, #0
    4cb0:	e01f      	b.n	4cf2 <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    4cb2:	4b12      	ldr	r3, [pc, #72]	; (4cfc <nm_spi_init+0x108>)
    4cb4:	2201      	movs	r2, #1
    4cb6:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    4cb8:	1d3a      	adds	r2, r7, #4
    4cba:	2380      	movs	r3, #128	; 0x80
    4cbc:	015b      	lsls	r3, r3, #5
    4cbe:	0011      	movs	r1, r2
    4cc0:	0018      	movs	r0, r3
    4cc2:	4b10      	ldr	r3, [pc, #64]	; (4d04 <nm_spi_init+0x110>)
    4cc4:	4798      	blx	r3
    4cc6:	1e03      	subs	r3, r0, #0
    4cc8:	d110      	bne.n	4cec <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    4cca:	23b7      	movs	r3, #183	; 0xb7
    4ccc:	009a      	lsls	r2, r3, #2
    4cce:	490f      	ldr	r1, [pc, #60]	; (4d0c <nm_spi_init+0x118>)
    4cd0:	4b0f      	ldr	r3, [pc, #60]	; (4d10 <nm_spi_init+0x11c>)
    4cd2:	0018      	movs	r0, r3
    4cd4:	4b0f      	ldr	r3, [pc, #60]	; (4d14 <nm_spi_init+0x120>)
    4cd6:	4798      	blx	r3
    4cd8:	4b16      	ldr	r3, [pc, #88]	; (4d34 <nm_spi_init+0x140>)
    4cda:	0018      	movs	r0, r3
    4cdc:	4b0f      	ldr	r3, [pc, #60]	; (4d1c <nm_spi_init+0x128>)
    4cde:	4798      	blx	r3
    4ce0:	200d      	movs	r0, #13
    4ce2:	4b0f      	ldr	r3, [pc, #60]	; (4d20 <nm_spi_init+0x12c>)
    4ce4:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4ce6:	2306      	movs	r3, #6
    4ce8:	425b      	negs	r3, r3
    4cea:	e002      	b.n	4cf2 <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    4cec:	4b12      	ldr	r3, [pc, #72]	; (4d38 <nm_spi_init+0x144>)
    4cee:	4798      	blx	r3


	return M2M_SUCCESS;
    4cf0:	2300      	movs	r3, #0
}
    4cf2:	0018      	movs	r0, r3
    4cf4:	46bd      	mov	sp, r7
    4cf6:	b002      	add	sp, #8
    4cf8:	bd80      	pop	{r7, pc}
    4cfa:	46c0      	nop			; (mov r8, r8)
    4cfc:	200000c8 	.word	0x200000c8
    4d00:	0000e824 	.word	0x0000e824
    4d04:	000048c1 	.word	0x000048c1
    4d08:	000002c5 	.word	0x000002c5
    4d0c:	0000d450 	.word	0x0000d450
    4d10:	0000ceec 	.word	0x0000ceec
    4d14:	0000b081 	.word	0x0000b081
    4d18:	0000d2d0 	.word	0x0000d2d0
    4d1c:	0000b1a1 	.word	0x0000b1a1
    4d20:	0000b0b5 	.word	0x0000b0b5
    4d24:	0000d320 	.word	0x0000d320
    4d28:	00004661 	.word	0x00004661
    4d2c:	000002d2 	.word	0x000002d2
    4d30:	0000d34c 	.word	0x0000d34c
    4d34:	0000d380 	.word	0x0000d380
    4d38:	00004bb1 	.word	0x00004bb1

00004d3c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    4d3c:	b580      	push	{r7, lr}
    4d3e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4d40:	4b03      	ldr	r3, [pc, #12]	; (4d50 <nm_spi_deinit+0x14>)
    4d42:	2200      	movs	r2, #0
    4d44:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4d46:	2300      	movs	r3, #0
}
    4d48:	0018      	movs	r0, r3
    4d4a:	46bd      	mov	sp, r7
    4d4c:	bd80      	pop	{r7, pc}
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	200000c8 	.word	0x200000c8

00004d54 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b084      	sub	sp, #16
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    4d5c:	230c      	movs	r3, #12
    4d5e:	18fa      	adds	r2, r7, r3
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	0011      	movs	r1, r2
    4d64:	0018      	movs	r0, r3
    4d66:	4b03      	ldr	r3, [pc, #12]	; (4d74 <nm_spi_read_reg+0x20>)
    4d68:	4798      	blx	r3

	return u32Val;
    4d6a:	68fb      	ldr	r3, [r7, #12]
}
    4d6c:	0018      	movs	r0, r3
    4d6e:	46bd      	mov	sp, r7
    4d70:	b004      	add	sp, #16
    4d72:	bd80      	pop	{r7, pc}
    4d74:	000048c1 	.word	0x000048c1

00004d78 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4d78:	b590      	push	{r4, r7, lr}
    4d7a:	b085      	sub	sp, #20
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    4d82:	230f      	movs	r3, #15
    4d84:	18fc      	adds	r4, r7, r3
    4d86:	683a      	ldr	r2, [r7, #0]
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	0011      	movs	r1, r2
    4d8c:	0018      	movs	r0, r3
    4d8e:	4b0d      	ldr	r3, [pc, #52]	; (4dc4 <nm_spi_read_reg_with_ret+0x4c>)
    4d90:	4798      	blx	r3
    4d92:	0003      	movs	r3, r0
    4d94:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4d96:	230f      	movs	r3, #15
    4d98:	18fb      	adds	r3, r7, r3
    4d9a:	781b      	ldrb	r3, [r3, #0]
    4d9c:	b25b      	sxtb	r3, r3
    4d9e:	2b01      	cmp	r3, #1
    4da0:	d104      	bne.n	4dac <nm_spi_read_reg_with_ret+0x34>
    4da2:	230f      	movs	r3, #15
    4da4:	18fb      	adds	r3, r7, r3
    4da6:	2200      	movs	r2, #0
    4da8:	701a      	strb	r2, [r3, #0]
    4daa:	e003      	b.n	4db4 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4dac:	230f      	movs	r3, #15
    4dae:	18fb      	adds	r3, r7, r3
    4db0:	22fa      	movs	r2, #250	; 0xfa
    4db2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4db4:	230f      	movs	r3, #15
    4db6:	18fb      	adds	r3, r7, r3
    4db8:	781b      	ldrb	r3, [r3, #0]
    4dba:	b25b      	sxtb	r3, r3
}
    4dbc:	0018      	movs	r0, r3
    4dbe:	46bd      	mov	sp, r7
    4dc0:	b005      	add	sp, #20
    4dc2:	bd90      	pop	{r4, r7, pc}
    4dc4:	000048c1 	.word	0x000048c1

00004dc8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4dc8:	b590      	push	{r4, r7, lr}
    4dca:	b085      	sub	sp, #20
    4dcc:	af00      	add	r7, sp, #0
    4dce:	6078      	str	r0, [r7, #4]
    4dd0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4dd2:	230f      	movs	r3, #15
    4dd4:	18fc      	adds	r4, r7, r3
    4dd6:	683a      	ldr	r2, [r7, #0]
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	0011      	movs	r1, r2
    4ddc:	0018      	movs	r0, r3
    4dde:	4b0d      	ldr	r3, [pc, #52]	; (4e14 <nm_spi_write_reg+0x4c>)
    4de0:	4798      	blx	r3
    4de2:	0003      	movs	r3, r0
    4de4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4de6:	230f      	movs	r3, #15
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	781b      	ldrb	r3, [r3, #0]
    4dec:	b25b      	sxtb	r3, r3
    4dee:	2b01      	cmp	r3, #1
    4df0:	d104      	bne.n	4dfc <nm_spi_write_reg+0x34>
    4df2:	230f      	movs	r3, #15
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	2200      	movs	r2, #0
    4df8:	701a      	strb	r2, [r3, #0]
    4dfa:	e003      	b.n	4e04 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4dfc:	230f      	movs	r3, #15
    4dfe:	18fb      	adds	r3, r7, r3
    4e00:	22fa      	movs	r2, #250	; 0xfa
    4e02:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4e04:	230f      	movs	r3, #15
    4e06:	18fb      	adds	r3, r7, r3
    4e08:	781b      	ldrb	r3, [r3, #0]
    4e0a:	b25b      	sxtb	r3, r3
}
    4e0c:	0018      	movs	r0, r3
    4e0e:	46bd      	mov	sp, r7
    4e10:	b005      	add	sp, #20
    4e12:	bd90      	pop	{r4, r7, pc}
    4e14:	00004661 	.word	0x00004661

00004e18 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4e18:	b590      	push	{r4, r7, lr}
    4e1a:	b087      	sub	sp, #28
    4e1c:	af00      	add	r7, sp, #0
    4e1e:	60f8      	str	r0, [r7, #12]
    4e20:	60b9      	str	r1, [r7, #8]
    4e22:	1dbb      	adds	r3, r7, #6
    4e24:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4e26:	2317      	movs	r3, #23
    4e28:	18fc      	adds	r4, r7, r3
    4e2a:	1dbb      	adds	r3, r7, #6
    4e2c:	881a      	ldrh	r2, [r3, #0]
    4e2e:	68b9      	ldr	r1, [r7, #8]
    4e30:	68fb      	ldr	r3, [r7, #12]
    4e32:	0018      	movs	r0, r3
    4e34:	4b0d      	ldr	r3, [pc, #52]	; (4e6c <nm_spi_read_block+0x54>)
    4e36:	4798      	blx	r3
    4e38:	0003      	movs	r3, r0
    4e3a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4e3c:	2317      	movs	r3, #23
    4e3e:	18fb      	adds	r3, r7, r3
    4e40:	781b      	ldrb	r3, [r3, #0]
    4e42:	b25b      	sxtb	r3, r3
    4e44:	2b01      	cmp	r3, #1
    4e46:	d104      	bne.n	4e52 <nm_spi_read_block+0x3a>
    4e48:	2317      	movs	r3, #23
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	2200      	movs	r2, #0
    4e4e:	701a      	strb	r2, [r3, #0]
    4e50:	e003      	b.n	4e5a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4e52:	2317      	movs	r3, #23
    4e54:	18fb      	adds	r3, r7, r3
    4e56:	22fa      	movs	r2, #250	; 0xfa
    4e58:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4e5a:	2317      	movs	r3, #23
    4e5c:	18fb      	adds	r3, r7, r3
    4e5e:	781b      	ldrb	r3, [r3, #0]
    4e60:	b25b      	sxtb	r3, r3
}
    4e62:	0018      	movs	r0, r3
    4e64:	46bd      	mov	sp, r7
    4e66:	b007      	add	sp, #28
    4e68:	bd90      	pop	{r4, r7, pc}
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	00004a6d 	.word	0x00004a6d

00004e70 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4e70:	b590      	push	{r4, r7, lr}
    4e72:	b087      	sub	sp, #28
    4e74:	af00      	add	r7, sp, #0
    4e76:	60f8      	str	r0, [r7, #12]
    4e78:	60b9      	str	r1, [r7, #8]
    4e7a:	1dbb      	adds	r3, r7, #6
    4e7c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    4e7e:	2317      	movs	r3, #23
    4e80:	18fc      	adds	r4, r7, r3
    4e82:	1dbb      	adds	r3, r7, #6
    4e84:	881a      	ldrh	r2, [r3, #0]
    4e86:	68b9      	ldr	r1, [r7, #8]
    4e88:	68fb      	ldr	r3, [r7, #12]
    4e8a:	0018      	movs	r0, r3
    4e8c:	4b0d      	ldr	r3, [pc, #52]	; (4ec4 <nm_spi_write_block+0x54>)
    4e8e:	4798      	blx	r3
    4e90:	0003      	movs	r3, r0
    4e92:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4e94:	2317      	movs	r3, #23
    4e96:	18fb      	adds	r3, r7, r3
    4e98:	781b      	ldrb	r3, [r3, #0]
    4e9a:	b25b      	sxtb	r3, r3
    4e9c:	2b01      	cmp	r3, #1
    4e9e:	d104      	bne.n	4eaa <nm_spi_write_block+0x3a>
    4ea0:	2317      	movs	r3, #23
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	2200      	movs	r2, #0
    4ea6:	701a      	strb	r2, [r3, #0]
    4ea8:	e003      	b.n	4eb2 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4eaa:	2317      	movs	r3, #23
    4eac:	18fb      	adds	r3, r7, r3
    4eae:	22fa      	movs	r2, #250	; 0xfa
    4eb0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4eb2:	2317      	movs	r3, #23
    4eb4:	18fb      	adds	r3, r7, r3
    4eb6:	781b      	ldrb	r3, [r3, #0]
    4eb8:	b25b      	sxtb	r3, r3
}
    4eba:	0018      	movs	r0, r3
    4ebc:	46bd      	mov	sp, r7
    4ebe:	b007      	add	sp, #28
    4ec0:	bd90      	pop	{r4, r7, pc}
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	0000477d 	.word	0x0000477d

00004ec8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    4ec8:	b590      	push	{r4, r7, lr}
    4eca:	b089      	sub	sp, #36	; 0x24
    4ecc:	af00      	add	r7, sp, #0
    4ece:	60b9      	str	r1, [r7, #8]
    4ed0:	0011      	movs	r1, r2
    4ed2:	607b      	str	r3, [r7, #4]
    4ed4:	230f      	movs	r3, #15
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	1c02      	adds	r2, r0, #0
    4eda:	701a      	strb	r2, [r3, #0]
    4edc:	230e      	movs	r3, #14
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	1c0a      	adds	r2, r1, #0
    4ee2:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    4ee4:	2330      	movs	r3, #48	; 0x30
    4ee6:	18fb      	adds	r3, r7, r3
    4ee8:	881b      	ldrh	r3, [r3, #0]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d100      	bne.n	4ef0 <Socket_ReadSocketData+0x28>
    4eee:	e0bf      	b.n	5070 <Socket_ReadSocketData+0x1a8>
    4ef0:	230f      	movs	r3, #15
    4ef2:	18fb      	adds	r3, r7, r3
    4ef4:	2200      	movs	r2, #0
    4ef6:	569a      	ldrsb	r2, [r3, r2]
    4ef8:	4b5f      	ldr	r3, [pc, #380]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4efa:	0112      	lsls	r2, r2, #4
    4efc:	58d3      	ldr	r3, [r2, r3]
    4efe:	2b00      	cmp	r3, #0
    4f00:	d100      	bne.n	4f04 <Socket_ReadSocketData+0x3c>
    4f02:	e0b5      	b.n	5070 <Socket_ReadSocketData+0x1a8>
    4f04:	230f      	movs	r3, #15
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	781b      	ldrb	r3, [r3, #0]
    4f0a:	b25b      	sxtb	r3, r3
    4f0c:	4a5a      	ldr	r2, [pc, #360]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4f0e:	011b      	lsls	r3, r3, #4
    4f10:	18d3      	adds	r3, r2, r3
    4f12:	3304      	adds	r3, #4
    4f14:	881b      	ldrh	r3, [r3, #0]
    4f16:	b29b      	uxth	r3, r3
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d100      	bne.n	4f1e <Socket_ReadSocketData+0x56>
    4f1c:	e0a8      	b.n	5070 <Socket_ReadSocketData+0x1a8>
    4f1e:	230f      	movs	r3, #15
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	b25b      	sxtb	r3, r3
    4f26:	4a54      	ldr	r2, [pc, #336]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4f28:	011b      	lsls	r3, r3, #4
    4f2a:	18d3      	adds	r3, r2, r3
    4f2c:	330a      	adds	r3, #10
    4f2e:	781b      	ldrb	r3, [r3, #0]
    4f30:	b2db      	uxtb	r3, r3
    4f32:	2b01      	cmp	r3, #1
    4f34:	d000      	beq.n	4f38 <Socket_ReadSocketData+0x70>
    4f36:	e09b      	b.n	5070 <Socket_ReadSocketData+0x1a8>
	{
		uint32	u32Address = u32StartAddress;
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4f3c:	68bb      	ldr	r3, [r7, #8]
    4f3e:	2230      	movs	r2, #48	; 0x30
    4f40:	18ba      	adds	r2, r7, r2
    4f42:	8812      	ldrh	r2, [r2, #0]
    4f44:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    4f46:	2319      	movs	r3, #25
    4f48:	18fb      	adds	r3, r7, r3
    4f4a:	2201      	movs	r2, #1
    4f4c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    4f4e:	231a      	movs	r3, #26
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	2230      	movs	r2, #48	; 0x30
    4f54:	18ba      	adds	r2, r7, r2
    4f56:	8812      	ldrh	r2, [r2, #0]
    4f58:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    4f5a:	230f      	movs	r3, #15
    4f5c:	18fb      	adds	r3, r7, r3
    4f5e:	781b      	ldrb	r3, [r3, #0]
    4f60:	b25b      	sxtb	r3, r3
    4f62:	4a45      	ldr	r2, [pc, #276]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4f64:	011b      	lsls	r3, r3, #4
    4f66:	18d3      	adds	r3, r2, r3
    4f68:	3304      	adds	r3, #4
    4f6a:	881b      	ldrh	r3, [r3, #0]
    4f6c:	b29b      	uxth	r3, r3
    4f6e:	221a      	movs	r2, #26
    4f70:	18ba      	adds	r2, r7, r2
    4f72:	8812      	ldrh	r2, [r2, #0]
    4f74:	1ad3      	subs	r3, r2, r3
    4f76:	b29a      	uxth	r2, r3
    4f78:	2316      	movs	r3, #22
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    4f7e:	2316      	movs	r3, #22
    4f80:	18fb      	adds	r3, r7, r3
    4f82:	2200      	movs	r2, #0
    4f84:	5e9b      	ldrsh	r3, [r3, r2]
    4f86:	2b00      	cmp	r3, #0
    4f88:	dd0f      	ble.n	4faa <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    4f8a:	2319      	movs	r3, #25
    4f8c:	18fb      	adds	r3, r7, r3
    4f8e:	2200      	movs	r2, #0
    4f90:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    4f92:	230f      	movs	r3, #15
    4f94:	18fb      	adds	r3, r7, r3
    4f96:	2200      	movs	r2, #0
    4f98:	569a      	ldrsb	r2, [r3, r2]
    4f9a:	231a      	movs	r3, #26
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	4936      	ldr	r1, [pc, #216]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4fa0:	0112      	lsls	r2, r2, #4
    4fa2:	188a      	adds	r2, r1, r2
    4fa4:	3204      	adds	r2, #4
    4fa6:	8812      	ldrh	r2, [r2, #0]
    4fa8:	801a      	strh	r2, [r3, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    4faa:	230f      	movs	r3, #15
    4fac:	18fb      	adds	r3, r7, r3
    4fae:	2200      	movs	r2, #0
    4fb0:	569a      	ldrsb	r2, [r3, r2]
    4fb2:	4b31      	ldr	r3, [pc, #196]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4fb4:	0112      	lsls	r2, r2, #4
    4fb6:	58d1      	ldr	r1, [r2, r3]
    4fb8:	2319      	movs	r3, #25
    4fba:	18fb      	adds	r3, r7, r3
    4fbc:	781c      	ldrb	r4, [r3, #0]
    4fbe:	231a      	movs	r3, #26
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	881a      	ldrh	r2, [r3, #0]
    4fc4:	69f8      	ldr	r0, [r7, #28]
    4fc6:	0023      	movs	r3, r4
    4fc8:	4c2c      	ldr	r4, [pc, #176]	; (507c <Socket_ReadSocketData+0x1b4>)
    4fca:	47a0      	blx	r4
    4fcc:	1e03      	subs	r3, r0, #0
    4fce:	d138      	bne.n	5042 <Socket_ReadSocketData+0x17a>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    4fd0:	230f      	movs	r3, #15
    4fd2:	18fb      	adds	r3, r7, r3
    4fd4:	2200      	movs	r2, #0
    4fd6:	569a      	ldrsb	r2, [r3, r2]
    4fd8:	4b27      	ldr	r3, [pc, #156]	; (5078 <Socket_ReadSocketData+0x1b0>)
    4fda:	0112      	lsls	r2, r2, #4
    4fdc:	58d2      	ldr	r2, [r2, r3]
    4fde:	68bb      	ldr	r3, [r7, #8]
    4fe0:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    4fe2:	231a      	movs	r3, #26
    4fe4:	18fb      	adds	r3, r7, r3
    4fe6:	2200      	movs	r2, #0
    4fe8:	5e9a      	ldrsh	r2, [r3, r2]
    4fea:	68bb      	ldr	r3, [r7, #8]
    4fec:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    4fee:	68bb      	ldr	r3, [r7, #8]
    4ff0:	88da      	ldrh	r2, [r3, #6]
    4ff2:	231a      	movs	r3, #26
    4ff4:	18fb      	adds	r3, r7, r3
    4ff6:	881b      	ldrh	r3, [r3, #0]
    4ff8:	1ad3      	subs	r3, r2, r3
    4ffa:	b29a      	uxth	r2, r3
    4ffc:	68bb      	ldr	r3, [r7, #8]
    4ffe:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    5000:	4b1f      	ldr	r3, [pc, #124]	; (5080 <Socket_ReadSocketData+0x1b8>)
    5002:	681b      	ldr	r3, [r3, #0]
    5004:	2b00      	cmp	r3, #0
    5006:	d00b      	beq.n	5020 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    5008:	4b1d      	ldr	r3, [pc, #116]	; (5080 <Socket_ReadSocketData+0x1b8>)
    500a:	681b      	ldr	r3, [r3, #0]
    500c:	68bc      	ldr	r4, [r7, #8]
    500e:	220e      	movs	r2, #14
    5010:	18ba      	adds	r2, r7, r2
    5012:	7811      	ldrb	r1, [r2, #0]
    5014:	220f      	movs	r2, #15
    5016:	18ba      	adds	r2, r7, r2
    5018:	2000      	movs	r0, #0
    501a:	5610      	ldrsb	r0, [r2, r0]
    501c:	0022      	movs	r2, r4
    501e:	4798      	blx	r3

				u16ReadCount -= u16Read;
    5020:	2330      	movs	r3, #48	; 0x30
    5022:	18f9      	adds	r1, r7, r3
    5024:	2330      	movs	r3, #48	; 0x30
    5026:	18fa      	adds	r2, r7, r3
    5028:	231a      	movs	r3, #26
    502a:	18fb      	adds	r3, r7, r3
    502c:	8812      	ldrh	r2, [r2, #0]
    502e:	881b      	ldrh	r3, [r3, #0]
    5030:	1ad3      	subs	r3, r2, r3
    5032:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    5034:	231a      	movs	r3, #26
    5036:	18fb      	adds	r3, r7, r3
    5038:	881b      	ldrh	r3, [r3, #0]
    503a:	69fa      	ldr	r2, [r7, #28]
    503c:	18d3      	adds	r3, r2, r3
    503e:	61fb      	str	r3, [r7, #28]
    5040:	e010      	b.n	5064 <Socket_ReadSocketData+0x19c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    5042:	4b10      	ldr	r3, [pc, #64]	; (5084 <Socket_ReadSocketData+0x1bc>)
    5044:	0018      	movs	r0, r3
    5046:	4b10      	ldr	r3, [pc, #64]	; (5088 <Socket_ReadSocketData+0x1c0>)
    5048:	4798      	blx	r3
    504a:	2330      	movs	r3, #48	; 0x30
    504c:	18fb      	adds	r3, r7, r3
    504e:	881a      	ldrh	r2, [r3, #0]
    5050:	4b0e      	ldr	r3, [pc, #56]	; (508c <Socket_ReadSocketData+0x1c4>)
    5052:	0011      	movs	r1, r2
    5054:	0018      	movs	r0, r3
    5056:	4b0c      	ldr	r3, [pc, #48]	; (5088 <Socket_ReadSocketData+0x1c0>)
    5058:	4798      	blx	r3
    505a:	200d      	movs	r0, #13
    505c:	4b0c      	ldr	r3, [pc, #48]	; (5090 <Socket_ReadSocketData+0x1c8>)
    505e:	4798      	blx	r3
				break;
    5060:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    5062:	e005      	b.n	5070 <Socket_ReadSocketData+0x1a8>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    5064:	2330      	movs	r3, #48	; 0x30
    5066:	18fb      	adds	r3, r7, r3
    5068:	881b      	ldrh	r3, [r3, #0]
    506a:	2b00      	cmp	r3, #0
    506c:	d000      	beq.n	5070 <Socket_ReadSocketData+0x1a8>
    506e:	e76a      	b.n	4f46 <Socket_ReadSocketData+0x7e>
	}
}
    5070:	46c0      	nop			; (mov r8, r8)
    5072:	46bd      	mov	sp, r7
    5074:	b009      	add	sp, #36	; 0x24
    5076:	bd90      	pop	{r4, r7, pc}
    5078:	20000244 	.word	0x20000244
    507c:	00002225 	.word	0x00002225
    5080:	200002f4 	.word	0x200002f4
    5084:	0000d45c 	.word	0x0000d45c
    5088:	0000b081 	.word	0x0000b081
    508c:	0000d468 	.word	0x0000d468
    5090:	0000b0b5 	.word	0x0000b0b5

00005094 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    5094:	b590      	push	{r4, r7, lr}
    5096:	b0bb      	sub	sp, #236	; 0xec
    5098:	af02      	add	r7, sp, #8
    509a:	603a      	str	r2, [r7, #0]
    509c:	1dfb      	adds	r3, r7, #7
    509e:	1c02      	adds	r2, r0, #0
    50a0:	701a      	strb	r2, [r3, #0]
    50a2:	1d3b      	adds	r3, r7, #4
    50a4:	1c0a      	adds	r2, r1, #0
    50a6:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    50a8:	1dfb      	adds	r3, r7, #7
    50aa:	781b      	ldrb	r3, [r3, #0]
    50ac:	2b41      	cmp	r3, #65	; 0x41
    50ae:	d120      	bne.n	50f2 <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    50b0:	23cc      	movs	r3, #204	; 0xcc
    50b2:	18f9      	adds	r1, r7, r3
    50b4:	6838      	ldr	r0, [r7, #0]
    50b6:	2300      	movs	r3, #0
    50b8:	2204      	movs	r2, #4
    50ba:	4c8d      	ldr	r4, [pc, #564]	; (52f0 <m2m_ip_cb+0x25c>)
    50bc:	47a0      	blx	r4
    50be:	1e03      	subs	r3, r0, #0
    50c0:	d000      	beq.n	50c4 <m2m_ip_cb+0x30>
    50c2:	e264      	b.n	558e <m2m_ip_cb+0x4fa>
		{
			strBind.status = strBindReply.s8Status;
    50c4:	23cc      	movs	r3, #204	; 0xcc
    50c6:	18fb      	adds	r3, r7, r3
    50c8:	2201      	movs	r2, #1
    50ca:	569a      	ldrsb	r2, [r3, r2]
    50cc:	23c8      	movs	r3, #200	; 0xc8
    50ce:	18fb      	adds	r3, r7, r3
    50d0:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    50d2:	4b88      	ldr	r3, [pc, #544]	; (52f4 <m2m_ip_cb+0x260>)
    50d4:	681b      	ldr	r3, [r3, #0]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d100      	bne.n	50dc <m2m_ip_cb+0x48>
    50da:	e258      	b.n	558e <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    50dc:	4b85      	ldr	r3, [pc, #532]	; (52f4 <m2m_ip_cb+0x260>)
    50de:	681b      	ldr	r3, [r3, #0]
    50e0:	22cc      	movs	r2, #204	; 0xcc
    50e2:	18ba      	adds	r2, r7, r2
    50e4:	2000      	movs	r0, #0
    50e6:	5610      	ldrsb	r0, [r2, r0]
    50e8:	22c8      	movs	r2, #200	; 0xc8
    50ea:	18ba      	adds	r2, r7, r2
    50ec:	2101      	movs	r1, #1
    50ee:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    50f0:	e24d      	b.n	558e <m2m_ip_cb+0x4fa>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    50f2:	1dfb      	adds	r3, r7, #7
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	2b42      	cmp	r3, #66	; 0x42
    50f8:	d120      	bne.n	513c <m2m_ip_cb+0xa8>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    50fa:	23c4      	movs	r3, #196	; 0xc4
    50fc:	18f9      	adds	r1, r7, r3
    50fe:	6838      	ldr	r0, [r7, #0]
    5100:	2300      	movs	r3, #0
    5102:	2204      	movs	r2, #4
    5104:	4c7a      	ldr	r4, [pc, #488]	; (52f0 <m2m_ip_cb+0x25c>)
    5106:	47a0      	blx	r4
    5108:	1e03      	subs	r3, r0, #0
    510a:	d000      	beq.n	510e <m2m_ip_cb+0x7a>
    510c:	e23f      	b.n	558e <m2m_ip_cb+0x4fa>
		{
			strListen.status = strListenReply.s8Status;
    510e:	23c4      	movs	r3, #196	; 0xc4
    5110:	18fb      	adds	r3, r7, r3
    5112:	2201      	movs	r2, #1
    5114:	569a      	ldrsb	r2, [r3, r2]
    5116:	23c0      	movs	r3, #192	; 0xc0
    5118:	18fb      	adds	r3, r7, r3
    511a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    511c:	4b75      	ldr	r3, [pc, #468]	; (52f4 <m2m_ip_cb+0x260>)
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	2b00      	cmp	r3, #0
    5122:	d100      	bne.n	5126 <m2m_ip_cb+0x92>
    5124:	e233      	b.n	558e <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    5126:	4b73      	ldr	r3, [pc, #460]	; (52f4 <m2m_ip_cb+0x260>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	22c4      	movs	r2, #196	; 0xc4
    512c:	18ba      	adds	r2, r7, r2
    512e:	2000      	movs	r0, #0
    5130:	5610      	ldrsb	r0, [r2, r0]
    5132:	22c0      	movs	r2, #192	; 0xc0
    5134:	18ba      	adds	r2, r7, r2
    5136:	2102      	movs	r1, #2
    5138:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    513a:	e228      	b.n	558e <m2m_ip_cb+0x4fa>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    513c:	1dfb      	adds	r3, r7, #7
    513e:	781b      	ldrb	r3, [r3, #0]
    5140:	2b43      	cmp	r3, #67	; 0x43
    5142:	d16b      	bne.n	521c <m2m_ip_cb+0x188>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    5144:	23b4      	movs	r3, #180	; 0xb4
    5146:	18f9      	adds	r1, r7, r3
    5148:	6838      	ldr	r0, [r7, #0]
    514a:	2300      	movs	r3, #0
    514c:	220c      	movs	r2, #12
    514e:	4c68      	ldr	r4, [pc, #416]	; (52f0 <m2m_ip_cb+0x25c>)
    5150:	47a0      	blx	r4
    5152:	1e03      	subs	r3, r0, #0
    5154:	d000      	beq.n	5158 <m2m_ip_cb+0xc4>
    5156:	e21a      	b.n	558e <m2m_ip_cb+0x4fa>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    5158:	23b4      	movs	r3, #180	; 0xb4
    515a:	18fb      	adds	r3, r7, r3
    515c:	7a5b      	ldrb	r3, [r3, #9]
    515e:	b25b      	sxtb	r3, r3
    5160:	2b00      	cmp	r3, #0
    5162:	db34      	blt.n	51ce <m2m_ip_cb+0x13a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    5164:	23b4      	movs	r3, #180	; 0xb4
    5166:	18fb      	adds	r3, r7, r3
    5168:	7a5b      	ldrb	r3, [r3, #9]
    516a:	b25b      	sxtb	r3, r3
    516c:	4a62      	ldr	r2, [pc, #392]	; (52f8 <m2m_ip_cb+0x264>)
    516e:	011b      	lsls	r3, r3, #4
    5170:	18d3      	adds	r3, r2, r3
    5172:	330b      	adds	r3, #11
    5174:	2200      	movs	r2, #0
    5176:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    5178:	23b4      	movs	r3, #180	; 0xb4
    517a:	18fb      	adds	r3, r7, r3
    517c:	7a5b      	ldrb	r3, [r3, #9]
    517e:	b25b      	sxtb	r3, r3
    5180:	4a5d      	ldr	r2, [pc, #372]	; (52f8 <m2m_ip_cb+0x264>)
    5182:	011b      	lsls	r3, r3, #4
    5184:	18d3      	adds	r3, r2, r3
    5186:	330a      	adds	r3, #10
    5188:	2201      	movs	r2, #1
    518a:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    518c:	4b5b      	ldr	r3, [pc, #364]	; (52fc <m2m_ip_cb+0x268>)
    518e:	881b      	ldrh	r3, [r3, #0]
    5190:	b29b      	uxth	r3, r3
    5192:	3301      	adds	r3, #1
    5194:	b29a      	uxth	r2, r3
    5196:	4b59      	ldr	r3, [pc, #356]	; (52fc <m2m_ip_cb+0x268>)
    5198:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    519a:	4b58      	ldr	r3, [pc, #352]	; (52fc <m2m_ip_cb+0x268>)
    519c:	881b      	ldrh	r3, [r3, #0]
    519e:	b29b      	uxth	r3, r3
    51a0:	2b00      	cmp	r3, #0
    51a2:	d106      	bne.n	51b2 <m2m_ip_cb+0x11e>
					++gu16SessionID;
    51a4:	4b55      	ldr	r3, [pc, #340]	; (52fc <m2m_ip_cb+0x268>)
    51a6:	881b      	ldrh	r3, [r3, #0]
    51a8:	b29b      	uxth	r3, r3
    51aa:	3301      	adds	r3, #1
    51ac:	b29a      	uxth	r2, r3
    51ae:	4b53      	ldr	r3, [pc, #332]	; (52fc <m2m_ip_cb+0x268>)
    51b0:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    51b2:	23b4      	movs	r3, #180	; 0xb4
    51b4:	18fb      	adds	r3, r7, r3
    51b6:	7a5b      	ldrb	r3, [r3, #9]
    51b8:	b25b      	sxtb	r3, r3
    51ba:	0018      	movs	r0, r3
    51bc:	4b4f      	ldr	r3, [pc, #316]	; (52fc <m2m_ip_cb+0x268>)
    51be:	881b      	ldrh	r3, [r3, #0]
    51c0:	b299      	uxth	r1, r3
    51c2:	4a4d      	ldr	r2, [pc, #308]	; (52f8 <m2m_ip_cb+0x264>)
    51c4:	0103      	lsls	r3, r0, #4
    51c6:	18d3      	adds	r3, r2, r3
    51c8:	3306      	adds	r3, #6
    51ca:	1c0a      	adds	r2, r1, #0
    51cc:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    51ce:	23b4      	movs	r3, #180	; 0xb4
    51d0:	18fb      	adds	r3, r7, r3
    51d2:	2209      	movs	r2, #9
    51d4:	569a      	ldrsb	r2, [r3, r2]
    51d6:	23a0      	movs	r3, #160	; 0xa0
    51d8:	18fb      	adds	r3, r7, r3
    51da:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    51dc:	23a0      	movs	r3, #160	; 0xa0
    51de:	18fb      	adds	r3, r7, r3
    51e0:	2202      	movs	r2, #2
    51e2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    51e4:	23b4      	movs	r3, #180	; 0xb4
    51e6:	18fb      	adds	r3, r7, r3
    51e8:	885a      	ldrh	r2, [r3, #2]
    51ea:	23a0      	movs	r3, #160	; 0xa0
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    51f0:	23b4      	movs	r3, #180	; 0xb4
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	685a      	ldr	r2, [r3, #4]
    51f6:	23a0      	movs	r3, #160	; 0xa0
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    51fc:	4b3d      	ldr	r3, [pc, #244]	; (52f4 <m2m_ip_cb+0x260>)
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	2b00      	cmp	r3, #0
    5202:	d100      	bne.n	5206 <m2m_ip_cb+0x172>
    5204:	e1c3      	b.n	558e <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    5206:	4b3b      	ldr	r3, [pc, #236]	; (52f4 <m2m_ip_cb+0x260>)
    5208:	681b      	ldr	r3, [r3, #0]
    520a:	22b4      	movs	r2, #180	; 0xb4
    520c:	18ba      	adds	r2, r7, r2
    520e:	2008      	movs	r0, #8
    5210:	5610      	ldrsb	r0, [r2, r0]
    5212:	22a0      	movs	r2, #160	; 0xa0
    5214:	18ba      	adds	r2, r7, r2
    5216:	2104      	movs	r1, #4
    5218:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    521a:	e1b8      	b.n	558e <m2m_ip_cb+0x4fa>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    521c:	1dfb      	adds	r3, r7, #7
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	2b44      	cmp	r3, #68	; 0x44
    5222:	d003      	beq.n	522c <m2m_ip_cb+0x198>
    5224:	1dfb      	adds	r3, r7, #7
    5226:	781b      	ldrb	r3, [r3, #0]
    5228:	2b4b      	cmp	r3, #75	; 0x4b
    522a:	d13d      	bne.n	52a8 <m2m_ip_cb+0x214>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    522c:	239c      	movs	r3, #156	; 0x9c
    522e:	18f9      	adds	r1, r7, r3
    5230:	6838      	ldr	r0, [r7, #0]
    5232:	2300      	movs	r3, #0
    5234:	2204      	movs	r2, #4
    5236:	4c2e      	ldr	r4, [pc, #184]	; (52f0 <m2m_ip_cb+0x25c>)
    5238:	47a0      	blx	r4
    523a:	1e03      	subs	r3, r0, #0
    523c:	d000      	beq.n	5240 <m2m_ip_cb+0x1ac>
    523e:	e1a1      	b.n	5584 <m2m_ip_cb+0x4f0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    5240:	239c      	movs	r3, #156	; 0x9c
    5242:	18fb      	adds	r3, r7, r3
    5244:	2200      	movs	r2, #0
    5246:	569a      	ldrsb	r2, [r3, r2]
    5248:	2398      	movs	r3, #152	; 0x98
    524a:	18fb      	adds	r3, r7, r3
    524c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    524e:	239c      	movs	r3, #156	; 0x9c
    5250:	18fb      	adds	r3, r7, r3
    5252:	2201      	movs	r2, #1
    5254:	569a      	ldrsb	r2, [r3, r2]
    5256:	2398      	movs	r3, #152	; 0x98
    5258:	18fb      	adds	r3, r7, r3
    525a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    525c:	239c      	movs	r3, #156	; 0x9c
    525e:	18fb      	adds	r3, r7, r3
    5260:	785b      	ldrb	r3, [r3, #1]
    5262:	b25b      	sxtb	r3, r3
    5264:	2b00      	cmp	r3, #0
    5266:	d10f      	bne.n	5288 <m2m_ip_cb+0x1f4>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    5268:	239c      	movs	r3, #156	; 0x9c
    526a:	18fb      	adds	r3, r7, r3
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	b25b      	sxtb	r3, r3
    5270:	0018      	movs	r0, r3
    5272:	239c      	movs	r3, #156	; 0x9c
    5274:	18fb      	adds	r3, r7, r3
    5276:	885b      	ldrh	r3, [r3, #2]
    5278:	3b08      	subs	r3, #8
    527a:	b299      	uxth	r1, r3
    527c:	4a1e      	ldr	r2, [pc, #120]	; (52f8 <m2m_ip_cb+0x264>)
    527e:	0103      	lsls	r3, r0, #4
    5280:	18d3      	adds	r3, r2, r3
    5282:	3308      	adds	r3, #8
    5284:	1c0a      	adds	r2, r1, #0
    5286:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    5288:	4b1a      	ldr	r3, [pc, #104]	; (52f4 <m2m_ip_cb+0x260>)
    528a:	681b      	ldr	r3, [r3, #0]
    528c:	2b00      	cmp	r3, #0
    528e:	d100      	bne.n	5292 <m2m_ip_cb+0x1fe>
    5290:	e178      	b.n	5584 <m2m_ip_cb+0x4f0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    5292:	4b18      	ldr	r3, [pc, #96]	; (52f4 <m2m_ip_cb+0x260>)
    5294:	681b      	ldr	r3, [r3, #0]
    5296:	229c      	movs	r2, #156	; 0x9c
    5298:	18ba      	adds	r2, r7, r2
    529a:	2000      	movs	r0, #0
    529c:	5610      	ldrsb	r0, [r2, r0]
    529e:	2298      	movs	r2, #152	; 0x98
    52a0:	18ba      	adds	r2, r7, r2
    52a2:	2105      	movs	r1, #5
    52a4:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    52a6:	e16d      	b.n	5584 <m2m_ip_cb+0x4f0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    52a8:	1dfb      	adds	r3, r7, #7
    52aa:	781b      	ldrb	r3, [r3, #0]
    52ac:	2b4a      	cmp	r3, #74	; 0x4a
    52ae:	d129      	bne.n	5304 <m2m_ip_cb+0x270>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    52b0:	230c      	movs	r3, #12
    52b2:	18f9      	adds	r1, r7, r3
    52b4:	6838      	ldr	r0, [r7, #0]
    52b6:	2300      	movs	r3, #0
    52b8:	2244      	movs	r2, #68	; 0x44
    52ba:	4c0d      	ldr	r4, [pc, #52]	; (52f0 <m2m_ip_cb+0x25c>)
    52bc:	47a0      	blx	r4
    52be:	1e03      	subs	r3, r0, #0
    52c0:	d000      	beq.n	52c4 <m2m_ip_cb+0x230>
    52c2:	e164      	b.n	558e <m2m_ip_cb+0x4fa>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    52c4:	230c      	movs	r3, #12
    52c6:	18fb      	adds	r3, r7, r3
    52c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    52ca:	230c      	movs	r3, #12
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    52d0:	4b0b      	ldr	r3, [pc, #44]	; (5300 <m2m_ip_cb+0x26c>)
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	2b00      	cmp	r3, #0
    52d6:	d100      	bne.n	52da <m2m_ip_cb+0x246>
    52d8:	e159      	b.n	558e <m2m_ip_cb+0x4fa>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    52da:	4b09      	ldr	r3, [pc, #36]	; (5300 <m2m_ip_cb+0x26c>)
    52dc:	681a      	ldr	r2, [r3, #0]
    52de:	230c      	movs	r3, #12
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    52e4:	230c      	movs	r3, #12
    52e6:	18fb      	adds	r3, r7, r3
    52e8:	0018      	movs	r0, r3
    52ea:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    52ec:	e14f      	b.n	558e <m2m_ip_cb+0x4fa>
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	00002225 	.word	0x00002225
    52f4:	200002f4 	.word	0x200002f4
    52f8:	20000244 	.word	0x20000244
    52fc:	200000ca 	.word	0x200000ca
    5300:	200002fc 	.word	0x200002fc
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    5304:	1dfb      	adds	r3, r7, #7
    5306:	781b      	ldrb	r3, [r3, #0]
    5308:	2b46      	cmp	r3, #70	; 0x46
    530a:	d008      	beq.n	531e <m2m_ip_cb+0x28a>
    530c:	1dfb      	adds	r3, r7, #7
    530e:	781b      	ldrb	r3, [r3, #0]
    5310:	2b48      	cmp	r3, #72	; 0x48
    5312:	d004      	beq.n	531e <m2m_ip_cb+0x28a>
    5314:	1dfb      	adds	r3, r7, #7
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	2b4d      	cmp	r3, #77	; 0x4d
    531a:	d000      	beq.n	531e <m2m_ip_cb+0x28a>
    531c:	e0b4      	b.n	5488 <m2m_ip_cb+0x3f4>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    531e:	23df      	movs	r3, #223	; 0xdf
    5320:	18fb      	adds	r3, r7, r3
    5322:	2206      	movs	r2, #6
    5324:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    5326:	1dfb      	adds	r3, r7, #7
    5328:	781b      	ldrb	r3, [r3, #0]
    532a:	2b48      	cmp	r3, #72	; 0x48
    532c:	d103      	bne.n	5336 <m2m_ip_cb+0x2a2>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    532e:	23df      	movs	r3, #223	; 0xdf
    5330:	18fb      	adds	r3, r7, r3
    5332:	2209      	movs	r2, #9
    5334:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    5336:	23d8      	movs	r3, #216	; 0xd8
    5338:	18fb      	adds	r3, r7, r3
    533a:	2210      	movs	r2, #16
    533c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    533e:	23d8      	movs	r3, #216	; 0xd8
    5340:	18fb      	adds	r3, r7, r3
    5342:	881a      	ldrh	r2, [r3, #0]
    5344:	2388      	movs	r3, #136	; 0x88
    5346:	18f9      	adds	r1, r7, r3
    5348:	6838      	ldr	r0, [r7, #0]
    534a:	2300      	movs	r3, #0
    534c:	4c92      	ldr	r4, [pc, #584]	; (5598 <m2m_ip_cb+0x504>)
    534e:	47a0      	blx	r4
    5350:	1e03      	subs	r3, r0, #0
    5352:	d000      	beq.n	5356 <m2m_ip_cb+0x2c2>
    5354:	e118      	b.n	5588 <m2m_ip_cb+0x4f4>
		{
			uint16 u16SessionID = 0;
    5356:	23d6      	movs	r3, #214	; 0xd6
    5358:	18fb      	adds	r3, r7, r3
    535a:	2200      	movs	r2, #0
    535c:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    535e:	23d5      	movs	r3, #213	; 0xd5
    5360:	18fb      	adds	r3, r7, r3
    5362:	2288      	movs	r2, #136	; 0x88
    5364:	18ba      	adds	r2, r7, r2
    5366:	7b12      	ldrb	r2, [r2, #12]
    5368:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    536a:	23d6      	movs	r3, #214	; 0xd6
    536c:	18fb      	adds	r3, r7, r3
    536e:	2288      	movs	r2, #136	; 0x88
    5370:	18ba      	adds	r2, r7, r2
    5372:	89d2      	ldrh	r2, [r2, #14]
    5374:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    5376:	23d5      	movs	r3, #213	; 0xd5
    5378:	18fb      	adds	r3, r7, r3
    537a:	781b      	ldrb	r3, [r3, #0]
    537c:	b25b      	sxtb	r3, r3
    537e:	4a87      	ldr	r2, [pc, #540]	; (559c <m2m_ip_cb+0x508>)
    5380:	011b      	lsls	r3, r3, #4
    5382:	18d3      	adds	r3, r2, r3
    5384:	330c      	adds	r3, #12
    5386:	2200      	movs	r2, #0
    5388:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    538a:	23d2      	movs	r3, #210	; 0xd2
    538c:	18fb      	adds	r3, r7, r3
    538e:	2288      	movs	r2, #136	; 0x88
    5390:	18ba      	adds	r2, r7, r2
    5392:	8912      	ldrh	r2, [r2, #8]
    5394:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    5396:	23d0      	movs	r3, #208	; 0xd0
    5398:	18fb      	adds	r3, r7, r3
    539a:	2288      	movs	r2, #136	; 0x88
    539c:	18ba      	adds	r2, r7, r2
    539e:	8952      	ldrh	r2, [r2, #10]
    53a0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    53a2:	2388      	movs	r3, #136	; 0x88
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	885a      	ldrh	r2, [r3, #2]
    53a8:	2370      	movs	r3, #112	; 0x70
    53aa:	18fb      	adds	r3, r7, r3
    53ac:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    53ae:	2388      	movs	r3, #136	; 0x88
    53b0:	18fb      	adds	r3, r7, r3
    53b2:	685a      	ldr	r2, [r3, #4]
    53b4:	2370      	movs	r3, #112	; 0x70
    53b6:	18fb      	adds	r3, r7, r3
    53b8:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    53ba:	23d5      	movs	r3, #213	; 0xd5
    53bc:	18fb      	adds	r3, r7, r3
    53be:	781b      	ldrb	r3, [r3, #0]
    53c0:	b25b      	sxtb	r3, r3
    53c2:	4a76      	ldr	r2, [pc, #472]	; (559c <m2m_ip_cb+0x508>)
    53c4:	011b      	lsls	r3, r3, #4
    53c6:	18d3      	adds	r3, r2, r3
    53c8:	3306      	adds	r3, #6
    53ca:	881b      	ldrh	r3, [r3, #0]
    53cc:	b29b      	uxth	r3, r3
    53ce:	22d6      	movs	r2, #214	; 0xd6
    53d0:	18ba      	adds	r2, r7, r2
    53d2:	8812      	ldrh	r2, [r2, #0]
    53d4:	429a      	cmp	r2, r3
    53d6:	d148      	bne.n	546a <m2m_ip_cb+0x3d6>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    53d8:	23d2      	movs	r3, #210	; 0xd2
    53da:	18fb      	adds	r3, r7, r3
    53dc:	2200      	movs	r2, #0
    53de:	5e9b      	ldrsh	r3, [r3, r2]
    53e0:	2b00      	cmp	r3, #0
    53e2:	dd25      	ble.n	5430 <m2m_ip_cb+0x39c>
    53e4:	23d2      	movs	r3, #210	; 0xd2
    53e6:	18fb      	adds	r3, r7, r3
    53e8:	2200      	movs	r2, #0
    53ea:	5e9a      	ldrsh	r2, [r3, r2]
    53ec:	1d3b      	adds	r3, r7, #4
    53ee:	881b      	ldrh	r3, [r3, #0]
    53f0:	429a      	cmp	r2, r3
    53f2:	da1d      	bge.n	5430 <m2m_ip_cb+0x39c>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    53f4:	23d0      	movs	r3, #208	; 0xd0
    53f6:	18fb      	adds	r3, r7, r3
    53f8:	881b      	ldrh	r3, [r3, #0]
    53fa:	683a      	ldr	r2, [r7, #0]
    53fc:	18d3      	adds	r3, r2, r3
    53fe:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    5400:	23d8      	movs	r3, #216	; 0xd8
    5402:	18fb      	adds	r3, r7, r3
    5404:	22d2      	movs	r2, #210	; 0xd2
    5406:	18ba      	adds	r2, r7, r2
    5408:	8812      	ldrh	r2, [r2, #0]
    540a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    540c:	683c      	ldr	r4, [r7, #0]
    540e:	23df      	movs	r3, #223	; 0xdf
    5410:	18fb      	adds	r3, r7, r3
    5412:	781a      	ldrb	r2, [r3, #0]
    5414:	2370      	movs	r3, #112	; 0x70
    5416:	18f9      	adds	r1, r7, r3
    5418:	23d5      	movs	r3, #213	; 0xd5
    541a:	18fb      	adds	r3, r7, r3
    541c:	2000      	movs	r0, #0
    541e:	5618      	ldrsb	r0, [r3, r0]
    5420:	23d8      	movs	r3, #216	; 0xd8
    5422:	18fb      	adds	r3, r7, r3
    5424:	881b      	ldrh	r3, [r3, #0]
    5426:	9300      	str	r3, [sp, #0]
    5428:	0023      	movs	r3, r4
    542a:	4c5d      	ldr	r4, [pc, #372]	; (55a0 <m2m_ip_cb+0x50c>)
    542c:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    542e:	e0ab      	b.n	5588 <m2m_ip_cb+0x4f4>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    5430:	2370      	movs	r3, #112	; 0x70
    5432:	18fb      	adds	r3, r7, r3
    5434:	22d2      	movs	r2, #210	; 0xd2
    5436:	18ba      	adds	r2, r7, r2
    5438:	8812      	ldrh	r2, [r2, #0]
    543a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    543c:	2370      	movs	r3, #112	; 0x70
    543e:	18fb      	adds	r3, r7, r3
    5440:	2200      	movs	r2, #0
    5442:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    5444:	4b57      	ldr	r3, [pc, #348]	; (55a4 <m2m_ip_cb+0x510>)
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	2b00      	cmp	r3, #0
    544a:	d100      	bne.n	544e <m2m_ip_cb+0x3ba>
    544c:	e09c      	b.n	5588 <m2m_ip_cb+0x4f4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    544e:	4b55      	ldr	r3, [pc, #340]	; (55a4 <m2m_ip_cb+0x510>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	2270      	movs	r2, #112	; 0x70
    5454:	18bc      	adds	r4, r7, r2
    5456:	22df      	movs	r2, #223	; 0xdf
    5458:	18ba      	adds	r2, r7, r2
    545a:	7811      	ldrb	r1, [r2, #0]
    545c:	22d5      	movs	r2, #213	; 0xd5
    545e:	18ba      	adds	r2, r7, r2
    5460:	2000      	movs	r0, #0
    5462:	5610      	ldrsb	r0, [r2, r0]
    5464:	0022      	movs	r2, r4
    5466:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    5468:	e08e      	b.n	5588 <m2m_ip_cb+0x4f4>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    546a:	23d8      	movs	r3, #216	; 0xd8
    546c:	18fa      	adds	r2, r7, r3
    546e:	1d3b      	adds	r3, r7, #4
    5470:	8812      	ldrh	r2, [r2, #0]
    5472:	881b      	ldrh	r3, [r3, #0]
    5474:	429a      	cmp	r2, r3
    5476:	d300      	bcc.n	547a <m2m_ip_cb+0x3e6>
    5478:	e086      	b.n	5588 <m2m_ip_cb+0x4f4>
					hif_receive(0, NULL, 0, 1);
    547a:	2301      	movs	r3, #1
    547c:	2200      	movs	r2, #0
    547e:	2100      	movs	r1, #0
    5480:	2000      	movs	r0, #0
    5482:	4c45      	ldr	r4, [pc, #276]	; (5598 <m2m_ip_cb+0x504>)
    5484:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    5486:	e07f      	b.n	5588 <m2m_ip_cb+0x4f4>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    5488:	1dfb      	adds	r3, r7, #7
    548a:	781b      	ldrb	r3, [r3, #0]
    548c:	2b45      	cmp	r3, #69	; 0x45
    548e:	d007      	beq.n	54a0 <m2m_ip_cb+0x40c>
    5490:	1dfb      	adds	r3, r7, #7
    5492:	781b      	ldrb	r3, [r3, #0]
    5494:	2b47      	cmp	r3, #71	; 0x47
    5496:	d003      	beq.n	54a0 <m2m_ip_cb+0x40c>
    5498:	1dfb      	adds	r3, r7, #7
    549a:	781b      	ldrb	r3, [r3, #0]
    549c:	2b4c      	cmp	r3, #76	; 0x4c
    549e:	d14c      	bne.n	553a <m2m_ip_cb+0x4a6>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    54a0:	23de      	movs	r3, #222	; 0xde
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	2207      	movs	r2, #7
    54a6:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    54a8:	1dfb      	adds	r3, r7, #7
    54aa:	781b      	ldrb	r3, [r3, #0]
    54ac:	2b47      	cmp	r3, #71	; 0x47
    54ae:	d103      	bne.n	54b8 <m2m_ip_cb+0x424>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    54b0:	23de      	movs	r3, #222	; 0xde
    54b2:	18fb      	adds	r3, r7, r3
    54b4:	2208      	movs	r2, #8
    54b6:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    54b8:	2364      	movs	r3, #100	; 0x64
    54ba:	18f9      	adds	r1, r7, r3
    54bc:	6838      	ldr	r0, [r7, #0]
    54be:	2300      	movs	r3, #0
    54c0:	2208      	movs	r2, #8
    54c2:	4c35      	ldr	r4, [pc, #212]	; (5598 <m2m_ip_cb+0x504>)
    54c4:	47a0      	blx	r4
    54c6:	1e03      	subs	r3, r0, #0
    54c8:	d160      	bne.n	558c <m2m_ip_cb+0x4f8>
		{
			uint16 u16SessionID = 0;
    54ca:	23dc      	movs	r3, #220	; 0xdc
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	2200      	movs	r2, #0
    54d0:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    54d2:	23db      	movs	r3, #219	; 0xdb
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	2264      	movs	r2, #100	; 0x64
    54d8:	18ba      	adds	r2, r7, r2
    54da:	7812      	ldrb	r2, [r2, #0]
    54dc:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    54de:	23dc      	movs	r3, #220	; 0xdc
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	2264      	movs	r2, #100	; 0x64
    54e4:	18ba      	adds	r2, r7, r2
    54e6:	8892      	ldrh	r2, [r2, #4]
    54e8:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    54ea:	2364      	movs	r3, #100	; 0x64
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	2202      	movs	r2, #2
    54f0:	5e9a      	ldrsh	r2, [r3, r2]
    54f2:	236e      	movs	r3, #110	; 0x6e
    54f4:	18fb      	adds	r3, r7, r3
    54f6:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    54f8:	23db      	movs	r3, #219	; 0xdb
    54fa:	18fb      	adds	r3, r7, r3
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	b25b      	sxtb	r3, r3
    5500:	4a26      	ldr	r2, [pc, #152]	; (559c <m2m_ip_cb+0x508>)
    5502:	011b      	lsls	r3, r3, #4
    5504:	18d3      	adds	r3, r2, r3
    5506:	3306      	adds	r3, #6
    5508:	881b      	ldrh	r3, [r3, #0]
    550a:	b29b      	uxth	r3, r3
    550c:	22dc      	movs	r2, #220	; 0xdc
    550e:	18ba      	adds	r2, r7, r2
    5510:	8812      	ldrh	r2, [r2, #0]
    5512:	429a      	cmp	r2, r3
    5514:	d13a      	bne.n	558c <m2m_ip_cb+0x4f8>
			{
				if(gpfAppSocketCb)
    5516:	4b23      	ldr	r3, [pc, #140]	; (55a4 <m2m_ip_cb+0x510>)
    5518:	681b      	ldr	r3, [r3, #0]
    551a:	2b00      	cmp	r3, #0
    551c:	d036      	beq.n	558c <m2m_ip_cb+0x4f8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    551e:	4b21      	ldr	r3, [pc, #132]	; (55a4 <m2m_ip_cb+0x510>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	226e      	movs	r2, #110	; 0x6e
    5524:	18bc      	adds	r4, r7, r2
    5526:	22de      	movs	r2, #222	; 0xde
    5528:	18ba      	adds	r2, r7, r2
    552a:	7811      	ldrb	r1, [r2, #0]
    552c:	22db      	movs	r2, #219	; 0xdb
    552e:	18ba      	adds	r2, r7, r2
    5530:	2000      	movs	r0, #0
    5532:	5610      	ldrsb	r0, [r2, r0]
    5534:	0022      	movs	r2, r4
    5536:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    5538:	e028      	b.n	558c <m2m_ip_cb+0x4f8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    553a:	1dfb      	adds	r3, r7, #7
    553c:	781b      	ldrb	r3, [r3, #0]
    553e:	2b52      	cmp	r3, #82	; 0x52
    5540:	d125      	bne.n	558e <m2m_ip_cb+0x4fa>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    5542:	2350      	movs	r3, #80	; 0x50
    5544:	18f9      	adds	r1, r7, r3
    5546:	6838      	ldr	r0, [r7, #0]
    5548:	2301      	movs	r3, #1
    554a:	2214      	movs	r2, #20
    554c:	4c12      	ldr	r4, [pc, #72]	; (5598 <m2m_ip_cb+0x504>)
    554e:	47a0      	blx	r4
    5550:	1e03      	subs	r3, r0, #0
    5552:	d11c      	bne.n	558e <m2m_ip_cb+0x4fa>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    5554:	2350      	movs	r3, #80	; 0x50
    5556:	18fb      	adds	r3, r7, r3
    5558:	685b      	ldr	r3, [r3, #4]
    555a:	001a      	movs	r2, r3
    555c:	4b12      	ldr	r3, [pc, #72]	; (55a8 <m2m_ip_cb+0x514>)
    555e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    5560:	4b11      	ldr	r3, [pc, #68]	; (55a8 <m2m_ip_cb+0x514>)
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	2b00      	cmp	r3, #0
    5566:	d012      	beq.n	558e <m2m_ip_cb+0x4fa>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    5568:	4b0f      	ldr	r3, [pc, #60]	; (55a8 <m2m_ip_cb+0x514>)
    556a:	681c      	ldr	r4, [r3, #0]
    556c:	2350      	movs	r3, #80	; 0x50
    556e:	18fb      	adds	r3, r7, r3
    5570:	6818      	ldr	r0, [r3, #0]
    5572:	2350      	movs	r3, #80	; 0x50
    5574:	18fb      	adds	r3, r7, r3
    5576:	6899      	ldr	r1, [r3, #8]
    5578:	2350      	movs	r3, #80	; 0x50
    557a:	18fb      	adds	r3, r7, r3
    557c:	7c1b      	ldrb	r3, [r3, #16]
    557e:	001a      	movs	r2, r3
    5580:	47a0      	blx	r4
			}
		}
	}
}
    5582:	e004      	b.n	558e <m2m_ip_cb+0x4fa>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    5584:	46c0      	nop			; (mov r8, r8)
    5586:	e002      	b.n	558e <m2m_ip_cb+0x4fa>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    5588:	46c0      	nop			; (mov r8, r8)
    558a:	e000      	b.n	558e <m2m_ip_cb+0x4fa>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    558c:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	46bd      	mov	sp, r7
    5592:	b039      	add	sp, #228	; 0xe4
    5594:	bd90      	pop	{r4, r7, pc}
    5596:	46c0      	nop			; (mov r8, r8)
    5598:	00002225 	.word	0x00002225
    559c:	20000244 	.word	0x20000244
    55a0:	00004ec9 	.word	0x00004ec9
    55a4:	200002f4 	.word	0x200002f4
    55a8:	200002f8 	.word	0x200002f8

000055ac <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    55ac:	b580      	push	{r7, lr}
    55ae:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    55b0:	4b0c      	ldr	r3, [pc, #48]	; (55e4 <socketInit+0x38>)
    55b2:	781b      	ldrb	r3, [r3, #0]
    55b4:	b2db      	uxtb	r3, r3
    55b6:	2b00      	cmp	r3, #0
    55b8:	d110      	bne.n	55dc <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    55ba:	4b0b      	ldr	r3, [pc, #44]	; (55e8 <socketInit+0x3c>)
    55bc:	22b0      	movs	r2, #176	; 0xb0
    55be:	2100      	movs	r1, #0
    55c0:	0018      	movs	r0, r3
    55c2:	4b0a      	ldr	r3, [pc, #40]	; (55ec <socketInit+0x40>)
    55c4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    55c6:	4b0a      	ldr	r3, [pc, #40]	; (55f0 <socketInit+0x44>)
    55c8:	0019      	movs	r1, r3
    55ca:	2002      	movs	r0, #2
    55cc:	4b09      	ldr	r3, [pc, #36]	; (55f4 <socketInit+0x48>)
    55ce:	4798      	blx	r3
		gbSocketInit=1;
    55d0:	4b04      	ldr	r3, [pc, #16]	; (55e4 <socketInit+0x38>)
    55d2:	2201      	movs	r2, #1
    55d4:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    55d6:	4b08      	ldr	r3, [pc, #32]	; (55f8 <socketInit+0x4c>)
    55d8:	2200      	movs	r2, #0
    55da:	801a      	strh	r2, [r3, #0]
	}
}
    55dc:	46c0      	nop			; (mov r8, r8)
    55de:	46bd      	mov	sp, r7
    55e0:	bd80      	pop	{r7, pc}
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	200000cc 	.word	0x200000cc
    55e8:	20000244 	.word	0x20000244
    55ec:	00001611 	.word	0x00001611
    55f0:	00005095 	.word	0x00005095
    55f4:	0000241d 	.word	0x0000241d
    55f8:	200000ca 	.word	0x200000ca

000055fc <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    55fc:	b580      	push	{r7, lr}
    55fe:	b082      	sub	sp, #8
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
    5604:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    5606:	4b05      	ldr	r3, [pc, #20]	; (561c <registerSocketCallback+0x20>)
    5608:	687a      	ldr	r2, [r7, #4]
    560a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    560c:	4b04      	ldr	r3, [pc, #16]	; (5620 <registerSocketCallback+0x24>)
    560e:	683a      	ldr	r2, [r7, #0]
    5610:	601a      	str	r2, [r3, #0]
}
    5612:	46c0      	nop			; (mov r8, r8)
    5614:	46bd      	mov	sp, r7
    5616:	b002      	add	sp, #8
    5618:	bd80      	pop	{r7, pc}
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	200002f4 	.word	0x200002f4
    5620:	200002fc 	.word	0x200002fc

00005624 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    5624:	b590      	push	{r4, r7, lr}
    5626:	b08b      	sub	sp, #44	; 0x2c
    5628:	af04      	add	r7, sp, #16
    562a:	0004      	movs	r4, r0
    562c:	0008      	movs	r0, r1
    562e:	0011      	movs	r1, r2
    5630:	1dbb      	adds	r3, r7, #6
    5632:	1c22      	adds	r2, r4, #0
    5634:	801a      	strh	r2, [r3, #0]
    5636:	1d7b      	adds	r3, r7, #5
    5638:	1c02      	adds	r2, r0, #0
    563a:	701a      	strb	r2, [r3, #0]
    563c:	1d3b      	adds	r3, r7, #4
    563e:	1c0a      	adds	r2, r1, #0
    5640:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    5642:	2317      	movs	r3, #23
    5644:	18fb      	adds	r3, r7, r3
    5646:	22ff      	movs	r2, #255	; 0xff
    5648:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    564a:	2315      	movs	r3, #21
    564c:	18fb      	adds	r3, r7, r3
    564e:	220b      	movs	r2, #11
    5650:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    5652:	1dbb      	adds	r3, r7, #6
    5654:	881b      	ldrh	r3, [r3, #0]
    5656:	2b02      	cmp	r3, #2
    5658:	d000      	beq.n	565c <socket+0x38>
    565a:	e07e      	b.n	575a <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    565c:	1d7b      	adds	r3, r7, #5
    565e:	781b      	ldrb	r3, [r3, #0]
    5660:	2b01      	cmp	r3, #1
    5662:	d108      	bne.n	5676 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    5664:	2315      	movs	r3, #21
    5666:	18fb      	adds	r3, r7, r3
    5668:	2207      	movs	r2, #7
    566a:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    566c:	2316      	movs	r3, #22
    566e:	18fb      	adds	r3, r7, r3
    5670:	2200      	movs	r2, #0
    5672:	701a      	strb	r2, [r3, #0]
    5674:	e067      	b.n	5746 <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    5676:	1d7b      	adds	r3, r7, #5
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	2b02      	cmp	r3, #2
    567c:	d108      	bne.n	5690 <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    567e:	2315      	movs	r3, #21
    5680:	18fb      	adds	r3, r7, r3
    5682:	220b      	movs	r2, #11
    5684:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    5686:	2316      	movs	r3, #22
    5688:	18fb      	adds	r3, r7, r3
    568a:	2207      	movs	r2, #7
    568c:	701a      	strb	r2, [r3, #0]
    568e:	e05a      	b.n	5746 <socket+0x122>
		}
		else
			return sock;
    5690:	2317      	movs	r3, #23
    5692:	18fb      	adds	r3, r7, r3
    5694:	781b      	ldrb	r3, [r3, #0]
    5696:	b25b      	sxtb	r3, r3
    5698:	e063      	b.n	5762 <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    569a:	2316      	movs	r3, #22
    569c:	18fb      	adds	r3, r7, r3
    569e:	781b      	ldrb	r3, [r3, #0]
    56a0:	011a      	lsls	r2, r3, #4
    56a2:	4b32      	ldr	r3, [pc, #200]	; (576c <socket+0x148>)
    56a4:	18d3      	adds	r3, r2, r3
    56a6:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    56a8:	693b      	ldr	r3, [r7, #16]
    56aa:	7a9b      	ldrb	r3, [r3, #10]
    56ac:	b2db      	uxtb	r3, r3
    56ae:	2b00      	cmp	r3, #0
    56b0:	d142      	bne.n	5738 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    56b2:	693b      	ldr	r3, [r7, #16]
    56b4:	2210      	movs	r2, #16
    56b6:	2100      	movs	r1, #0
    56b8:	0018      	movs	r0, r3
    56ba:	4b2d      	ldr	r3, [pc, #180]	; (5770 <socket+0x14c>)
    56bc:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    56be:	693b      	ldr	r3, [r7, #16]
    56c0:	2201      	movs	r2, #1
    56c2:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    56c4:	4b2b      	ldr	r3, [pc, #172]	; (5774 <socket+0x150>)
    56c6:	881b      	ldrh	r3, [r3, #0]
    56c8:	b29b      	uxth	r3, r3
    56ca:	3301      	adds	r3, #1
    56cc:	b29a      	uxth	r2, r3
    56ce:	4b29      	ldr	r3, [pc, #164]	; (5774 <socket+0x150>)
    56d0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    56d2:	4b28      	ldr	r3, [pc, #160]	; (5774 <socket+0x150>)
    56d4:	881b      	ldrh	r3, [r3, #0]
    56d6:	b29b      	uxth	r3, r3
    56d8:	2b00      	cmp	r3, #0
    56da:	d106      	bne.n	56ea <socket+0xc6>
					++gu16SessionID;
    56dc:	4b25      	ldr	r3, [pc, #148]	; (5774 <socket+0x150>)
    56de:	881b      	ldrh	r3, [r3, #0]
    56e0:	b29b      	uxth	r3, r3
    56e2:	3301      	adds	r3, #1
    56e4:	b29a      	uxth	r2, r3
    56e6:	4b23      	ldr	r3, [pc, #140]	; (5774 <socket+0x150>)
    56e8:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    56ea:	4b22      	ldr	r3, [pc, #136]	; (5774 <socket+0x150>)
    56ec:	881b      	ldrh	r3, [r3, #0]
    56ee:	b29a      	uxth	r2, r3
    56f0:	693b      	ldr	r3, [r7, #16]
    56f2:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    56f4:	2317      	movs	r3, #23
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	2216      	movs	r2, #22
    56fa:	18ba      	adds	r2, r7, r2
    56fc:	7812      	ldrb	r2, [r2, #0]
    56fe:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    5700:	1d3b      	adds	r3, r7, #4
    5702:	781b      	ldrb	r3, [r3, #0]
    5704:	2201      	movs	r2, #1
    5706:	4013      	ands	r3, r2
    5708:	d026      	beq.n	5758 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    570a:	230c      	movs	r3, #12
    570c:	18fb      	adds	r3, r7, r3
    570e:	2217      	movs	r2, #23
    5710:	18ba      	adds	r2, r7, r2
    5712:	7812      	ldrb	r2, [r2, #0]
    5714:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    5716:	693b      	ldr	r3, [r7, #16]
    5718:	2221      	movs	r2, #33	; 0x21
    571a:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    571c:	230c      	movs	r3, #12
    571e:	18fa      	adds	r2, r7, r3
    5720:	2300      	movs	r3, #0
    5722:	9302      	str	r3, [sp, #8]
    5724:	2300      	movs	r3, #0
    5726:	9301      	str	r3, [sp, #4]
    5728:	2300      	movs	r3, #0
    572a:	9300      	str	r3, [sp, #0]
    572c:	2304      	movs	r3, #4
    572e:	2150      	movs	r1, #80	; 0x50
    5730:	2002      	movs	r0, #2
    5732:	4c11      	ldr	r4, [pc, #68]	; (5778 <socket+0x154>)
    5734:	47a0      	blx	r4
				}
				break;
    5736:	e00f      	b.n	5758 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    5738:	2316      	movs	r3, #22
    573a:	18fb      	adds	r3, r7, r3
    573c:	781a      	ldrb	r2, [r3, #0]
    573e:	2316      	movs	r3, #22
    5740:	18fb      	adds	r3, r7, r3
    5742:	3201      	adds	r2, #1
    5744:	701a      	strb	r2, [r3, #0]
    5746:	2316      	movs	r3, #22
    5748:	18fa      	adds	r2, r7, r3
    574a:	2315      	movs	r3, #21
    574c:	18fb      	adds	r3, r7, r3
    574e:	7812      	ldrb	r2, [r2, #0]
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	429a      	cmp	r2, r3
    5754:	d3a1      	bcc.n	569a <socket+0x76>
    5756:	e000      	b.n	575a <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    5758:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    575a:	2317      	movs	r3, #23
    575c:	18fb      	adds	r3, r7, r3
    575e:	781b      	ldrb	r3, [r3, #0]
    5760:	b25b      	sxtb	r3, r3
}
    5762:	0018      	movs	r0, r3
    5764:	46bd      	mov	sp, r7
    5766:	b007      	add	sp, #28
    5768:	bd90      	pop	{r4, r7, pc}
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	20000244 	.word	0x20000244
    5770:	00001611 	.word	0x00001611
    5774:	200000ca 	.word	0x200000ca
    5778:	00001a45 	.word	0x00001a45

0000577c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    577c:	b5b0      	push	{r4, r5, r7, lr}
    577e:	b08a      	sub	sp, #40	; 0x28
    5780:	af04      	add	r7, sp, #16
    5782:	6039      	str	r1, [r7, #0]
    5784:	0011      	movs	r1, r2
    5786:	1dfb      	adds	r3, r7, #7
    5788:	1c02      	adds	r2, r0, #0
    578a:	701a      	strb	r2, [r3, #0]
    578c:	1dbb      	adds	r3, r7, #6
    578e:	1c0a      	adds	r2, r1, #0
    5790:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5792:	2317      	movs	r3, #23
    5794:	18fb      	adds	r3, r7, r3
    5796:	22fa      	movs	r2, #250	; 0xfa
    5798:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    579a:	1dfb      	adds	r3, r7, #7
    579c:	781b      	ldrb	r3, [r3, #0]
    579e:	2b7f      	cmp	r3, #127	; 0x7f
    57a0:	d867      	bhi.n	5872 <connect+0xf6>
    57a2:	683b      	ldr	r3, [r7, #0]
    57a4:	2b00      	cmp	r3, #0
    57a6:	d064      	beq.n	5872 <connect+0xf6>
    57a8:	1dfb      	adds	r3, r7, #7
    57aa:	781b      	ldrb	r3, [r3, #0]
    57ac:	b25b      	sxtb	r3, r3
    57ae:	4a35      	ldr	r2, [pc, #212]	; (5884 <connect+0x108>)
    57b0:	011b      	lsls	r3, r3, #4
    57b2:	18d3      	adds	r3, r2, r3
    57b4:	330a      	adds	r3, #10
    57b6:	781b      	ldrb	r3, [r3, #0]
    57b8:	b2db      	uxtb	r3, r3
    57ba:	2b01      	cmp	r3, #1
    57bc:	d159      	bne.n	5872 <connect+0xf6>
    57be:	1dbb      	adds	r3, r7, #6
    57c0:	781b      	ldrb	r3, [r3, #0]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d055      	beq.n	5872 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    57c6:	2316      	movs	r3, #22
    57c8:	18fb      	adds	r3, r7, r3
    57ca:	2244      	movs	r2, #68	; 0x44
    57cc:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    57ce:	1dfb      	adds	r3, r7, #7
    57d0:	781b      	ldrb	r3, [r3, #0]
    57d2:	b25b      	sxtb	r3, r3
    57d4:	4a2b      	ldr	r2, [pc, #172]	; (5884 <connect+0x108>)
    57d6:	011b      	lsls	r3, r3, #4
    57d8:	18d3      	adds	r3, r2, r3
    57da:	330b      	adds	r3, #11
    57dc:	781b      	ldrb	r3, [r3, #0]
    57de:	b2db      	uxtb	r3, r3
    57e0:	001a      	movs	r2, r3
    57e2:	2301      	movs	r3, #1
    57e4:	4013      	ands	r3, r2
    57e6:	d00f      	beq.n	5808 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    57e8:	2316      	movs	r3, #22
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	224b      	movs	r2, #75	; 0x4b
    57ee:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    57f0:	1dfb      	adds	r3, r7, #7
    57f2:	781b      	ldrb	r3, [r3, #0]
    57f4:	b25b      	sxtb	r3, r3
    57f6:	4a23      	ldr	r2, [pc, #140]	; (5884 <connect+0x108>)
    57f8:	011b      	lsls	r3, r3, #4
    57fa:	18d3      	adds	r3, r2, r3
    57fc:	330b      	adds	r3, #11
    57fe:	781b      	ldrb	r3, [r3, #0]
    5800:	b2da      	uxtb	r2, r3
    5802:	2308      	movs	r3, #8
    5804:	18fb      	adds	r3, r7, r3
    5806:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    5808:	2308      	movs	r3, #8
    580a:	18fb      	adds	r3, r7, r3
    580c:	1dfa      	adds	r2, r7, #7
    580e:	7812      	ldrb	r2, [r2, #0]
    5810:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5812:	6839      	ldr	r1, [r7, #0]
    5814:	2308      	movs	r3, #8
    5816:	18fb      	adds	r3, r7, r3
    5818:	2208      	movs	r2, #8
    581a:	0018      	movs	r0, r3
    581c:	4b1a      	ldr	r3, [pc, #104]	; (5888 <connect+0x10c>)
    581e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5820:	1dfb      	adds	r3, r7, #7
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	b25b      	sxtb	r3, r3
    5826:	4a17      	ldr	r2, [pc, #92]	; (5884 <connect+0x108>)
    5828:	011b      	lsls	r3, r3, #4
    582a:	18d3      	adds	r3, r2, r3
    582c:	3306      	adds	r3, #6
    582e:	881b      	ldrh	r3, [r3, #0]
    5830:	b29a      	uxth	r2, r3
    5832:	2308      	movs	r3, #8
    5834:	18fb      	adds	r3, r7, r3
    5836:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    5838:	2317      	movs	r3, #23
    583a:	18fc      	adds	r4, r7, r3
    583c:	2308      	movs	r3, #8
    583e:	18fa      	adds	r2, r7, r3
    5840:	2316      	movs	r3, #22
    5842:	18fb      	adds	r3, r7, r3
    5844:	7819      	ldrb	r1, [r3, #0]
    5846:	2300      	movs	r3, #0
    5848:	9302      	str	r3, [sp, #8]
    584a:	2300      	movs	r3, #0
    584c:	9301      	str	r3, [sp, #4]
    584e:	2300      	movs	r3, #0
    5850:	9300      	str	r3, [sp, #0]
    5852:	230c      	movs	r3, #12
    5854:	2002      	movs	r0, #2
    5856:	4d0d      	ldr	r5, [pc, #52]	; (588c <connect+0x110>)
    5858:	47a8      	blx	r5
    585a:	0003      	movs	r3, r0
    585c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    585e:	2317      	movs	r3, #23
    5860:	18fb      	adds	r3, r7, r3
    5862:	781b      	ldrb	r3, [r3, #0]
    5864:	b25b      	sxtb	r3, r3
    5866:	2b00      	cmp	r3, #0
    5868:	d003      	beq.n	5872 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    586a:	2317      	movs	r3, #23
    586c:	18fb      	adds	r3, r7, r3
    586e:	22f7      	movs	r2, #247	; 0xf7
    5870:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    5872:	2317      	movs	r3, #23
    5874:	18fb      	adds	r3, r7, r3
    5876:	781b      	ldrb	r3, [r3, #0]
    5878:	b25b      	sxtb	r3, r3
}
    587a:	0018      	movs	r0, r3
    587c:	46bd      	mov	sp, r7
    587e:	b006      	add	sp, #24
    5880:	bdb0      	pop	{r4, r5, r7, pc}
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	20000244 	.word	0x20000244
    5888:	000015d5 	.word	0x000015d5
    588c:	00001a45 	.word	0x00001a45

00005890 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    5890:	b590      	push	{r4, r7, lr}
    5892:	b08f      	sub	sp, #60	; 0x3c
    5894:	af04      	add	r7, sp, #16
    5896:	0004      	movs	r4, r0
    5898:	60b9      	str	r1, [r7, #8]
    589a:	0010      	movs	r0, r2
    589c:	0019      	movs	r1, r3
    589e:	230f      	movs	r3, #15
    58a0:	18fb      	adds	r3, r7, r3
    58a2:	1c22      	adds	r2, r4, #0
    58a4:	701a      	strb	r2, [r3, #0]
    58a6:	230c      	movs	r3, #12
    58a8:	18fb      	adds	r3, r7, r3
    58aa:	1c02      	adds	r2, r0, #0
    58ac:	801a      	strh	r2, [r3, #0]
    58ae:	1dbb      	adds	r3, r7, #6
    58b0:	1c0a      	adds	r2, r1, #0
    58b2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    58b4:	2326      	movs	r3, #38	; 0x26
    58b6:	18fb      	adds	r3, r7, r3
    58b8:	2206      	movs	r2, #6
    58ba:	4252      	negs	r2, r2
    58bc:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    58be:	230f      	movs	r3, #15
    58c0:	18fb      	adds	r3, r7, r3
    58c2:	781b      	ldrb	r3, [r3, #0]
    58c4:	2b7f      	cmp	r3, #127	; 0x7f
    58c6:	d900      	bls.n	58ca <send+0x3a>
    58c8:	e087      	b.n	59da <send+0x14a>
    58ca:	68bb      	ldr	r3, [r7, #8]
    58cc:	2b00      	cmp	r3, #0
    58ce:	d100      	bne.n	58d2 <send+0x42>
    58d0:	e083      	b.n	59da <send+0x14a>
    58d2:	230c      	movs	r3, #12
    58d4:	18fb      	adds	r3, r7, r3
    58d6:	881a      	ldrh	r2, [r3, #0]
    58d8:	23af      	movs	r3, #175	; 0xaf
    58da:	00db      	lsls	r3, r3, #3
    58dc:	429a      	cmp	r2, r3
    58de:	d900      	bls.n	58e2 <send+0x52>
    58e0:	e07b      	b.n	59da <send+0x14a>
    58e2:	230f      	movs	r3, #15
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	b25b      	sxtb	r3, r3
    58ea:	4a40      	ldr	r2, [pc, #256]	; (59ec <send+0x15c>)
    58ec:	011b      	lsls	r3, r3, #4
    58ee:	18d3      	adds	r3, r2, r3
    58f0:	330a      	adds	r3, #10
    58f2:	781b      	ldrb	r3, [r3, #0]
    58f4:	b2db      	uxtb	r3, r3
    58f6:	2b01      	cmp	r3, #1
    58f8:	d16f      	bne.n	59da <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    58fa:	2323      	movs	r3, #35	; 0x23
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	2245      	movs	r2, #69	; 0x45
    5900:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5902:	2324      	movs	r3, #36	; 0x24
    5904:	18fb      	adds	r3, r7, r3
    5906:	2250      	movs	r2, #80	; 0x50
    5908:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    590a:	2310      	movs	r3, #16
    590c:	18fb      	adds	r3, r7, r3
    590e:	220f      	movs	r2, #15
    5910:	18ba      	adds	r2, r7, r2
    5912:	7812      	ldrb	r2, [r2, #0]
    5914:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    5916:	2310      	movs	r3, #16
    5918:	18fb      	adds	r3, r7, r3
    591a:	220c      	movs	r2, #12
    591c:	18ba      	adds	r2, r7, r2
    591e:	8812      	ldrh	r2, [r2, #0]
    5920:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    5922:	230f      	movs	r3, #15
    5924:	18fb      	adds	r3, r7, r3
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	b25b      	sxtb	r3, r3
    592a:	4a30      	ldr	r2, [pc, #192]	; (59ec <send+0x15c>)
    592c:	011b      	lsls	r3, r3, #4
    592e:	18d3      	adds	r3, r2, r3
    5930:	3306      	adds	r3, #6
    5932:	881b      	ldrh	r3, [r3, #0]
    5934:	b29a      	uxth	r2, r3
    5936:	2310      	movs	r3, #16
    5938:	18fb      	adds	r3, r7, r3
    593a:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    593c:	230f      	movs	r3, #15
    593e:	18fb      	adds	r3, r7, r3
    5940:	781b      	ldrb	r3, [r3, #0]
    5942:	b25b      	sxtb	r3, r3
    5944:	2b06      	cmp	r3, #6
    5946:	dd03      	ble.n	5950 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    5948:	2324      	movs	r3, #36	; 0x24
    594a:	18fb      	adds	r3, r7, r3
    594c:	2244      	movs	r2, #68	; 0x44
    594e:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5950:	230f      	movs	r3, #15
    5952:	18fb      	adds	r3, r7, r3
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	b25b      	sxtb	r3, r3
    5958:	4a24      	ldr	r2, [pc, #144]	; (59ec <send+0x15c>)
    595a:	011b      	lsls	r3, r3, #4
    595c:	18d3      	adds	r3, r2, r3
    595e:	330b      	adds	r3, #11
    5960:	781b      	ldrb	r3, [r3, #0]
    5962:	b2db      	uxtb	r3, r3
    5964:	001a      	movs	r2, r3
    5966:	2301      	movs	r3, #1
    5968:	4013      	ands	r3, r2
    596a:	d00f      	beq.n	598c <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    596c:	2323      	movs	r3, #35	; 0x23
    596e:	18fb      	adds	r3, r7, r3
    5970:	224c      	movs	r2, #76	; 0x4c
    5972:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    5974:	230f      	movs	r3, #15
    5976:	18fb      	adds	r3, r7, r3
    5978:	2200      	movs	r2, #0
    597a:	569a      	ldrsb	r2, [r3, r2]
    597c:	2324      	movs	r3, #36	; 0x24
    597e:	18fb      	adds	r3, r7, r3
    5980:	491a      	ldr	r1, [pc, #104]	; (59ec <send+0x15c>)
    5982:	0112      	lsls	r2, r2, #4
    5984:	188a      	adds	r2, r1, r2
    5986:	3208      	adds	r2, #8
    5988:	8812      	ldrh	r2, [r2, #0]
    598a:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    598c:	2323      	movs	r3, #35	; 0x23
    598e:	18fb      	adds	r3, r7, r3
    5990:	781b      	ldrb	r3, [r3, #0]
    5992:	2280      	movs	r2, #128	; 0x80
    5994:	4252      	negs	r2, r2
    5996:	4313      	orrs	r3, r2
    5998:	b2d9      	uxtb	r1, r3
    599a:	2310      	movs	r3, #16
    599c:	18fa      	adds	r2, r7, r3
    599e:	2324      	movs	r3, #36	; 0x24
    59a0:	18fb      	adds	r3, r7, r3
    59a2:	881b      	ldrh	r3, [r3, #0]
    59a4:	9302      	str	r3, [sp, #8]
    59a6:	230c      	movs	r3, #12
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	881b      	ldrh	r3, [r3, #0]
    59ac:	9301      	str	r3, [sp, #4]
    59ae:	68bb      	ldr	r3, [r7, #8]
    59b0:	9300      	str	r3, [sp, #0]
    59b2:	2310      	movs	r3, #16
    59b4:	2002      	movs	r0, #2
    59b6:	4c0e      	ldr	r4, [pc, #56]	; (59f0 <send+0x160>)
    59b8:	47a0      	blx	r4
    59ba:	0003      	movs	r3, r0
    59bc:	001a      	movs	r2, r3
    59be:	2326      	movs	r3, #38	; 0x26
    59c0:	18fb      	adds	r3, r7, r3
    59c2:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    59c4:	2326      	movs	r3, #38	; 0x26
    59c6:	18fb      	adds	r3, r7, r3
    59c8:	2200      	movs	r2, #0
    59ca:	5e9b      	ldrsh	r3, [r3, r2]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d004      	beq.n	59da <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    59d0:	2326      	movs	r3, #38	; 0x26
    59d2:	18fb      	adds	r3, r7, r3
    59d4:	220e      	movs	r2, #14
    59d6:	4252      	negs	r2, r2
    59d8:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    59da:	2326      	movs	r3, #38	; 0x26
    59dc:	18fb      	adds	r3, r7, r3
    59de:	2200      	movs	r2, #0
    59e0:	5e9b      	ldrsh	r3, [r3, r2]
}
    59e2:	0018      	movs	r0, r3
    59e4:	46bd      	mov	sp, r7
    59e6:	b00b      	add	sp, #44	; 0x2c
    59e8:	bd90      	pop	{r4, r7, pc}
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	20000244 	.word	0x20000244
    59f0:	00001a45 	.word	0x00001a45

000059f4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    59f4:	b590      	push	{r4, r7, lr}
    59f6:	b08d      	sub	sp, #52	; 0x34
    59f8:	af04      	add	r7, sp, #16
    59fa:	60b9      	str	r1, [r7, #8]
    59fc:	0011      	movs	r1, r2
    59fe:	607b      	str	r3, [r7, #4]
    5a00:	230f      	movs	r3, #15
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	1c02      	adds	r2, r0, #0
    5a06:	701a      	strb	r2, [r3, #0]
    5a08:	230c      	movs	r3, #12
    5a0a:	18fb      	adds	r3, r7, r3
    5a0c:	1c0a      	adds	r2, r1, #0
    5a0e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5a10:	231e      	movs	r3, #30
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	2206      	movs	r2, #6
    5a16:	4252      	negs	r2, r2
    5a18:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    5a1a:	230f      	movs	r3, #15
    5a1c:	18fb      	adds	r3, r7, r3
    5a1e:	781b      	ldrb	r3, [r3, #0]
    5a20:	2b7f      	cmp	r3, #127	; 0x7f
    5a22:	d900      	bls.n	5a26 <recv+0x32>
    5a24:	e099      	b.n	5b5a <recv+0x166>
    5a26:	68bb      	ldr	r3, [r7, #8]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d100      	bne.n	5a2e <recv+0x3a>
    5a2c:	e095      	b.n	5b5a <recv+0x166>
    5a2e:	230c      	movs	r3, #12
    5a30:	18fb      	adds	r3, r7, r3
    5a32:	881b      	ldrh	r3, [r3, #0]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d100      	bne.n	5a3a <recv+0x46>
    5a38:	e08f      	b.n	5b5a <recv+0x166>
    5a3a:	230f      	movs	r3, #15
    5a3c:	18fb      	adds	r3, r7, r3
    5a3e:	781b      	ldrb	r3, [r3, #0]
    5a40:	b25b      	sxtb	r3, r3
    5a42:	4a4a      	ldr	r2, [pc, #296]	; (5b6c <recv+0x178>)
    5a44:	011b      	lsls	r3, r3, #4
    5a46:	18d3      	adds	r3, r2, r3
    5a48:	330a      	adds	r3, #10
    5a4a:	781b      	ldrb	r3, [r3, #0]
    5a4c:	b2db      	uxtb	r3, r3
    5a4e:	2b01      	cmp	r3, #1
    5a50:	d000      	beq.n	5a54 <recv+0x60>
    5a52:	e082      	b.n	5b5a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    5a54:	231e      	movs	r3, #30
    5a56:	18fb      	adds	r3, r7, r3
    5a58:	2200      	movs	r2, #0
    5a5a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    5a5c:	230f      	movs	r3, #15
    5a5e:	18fb      	adds	r3, r7, r3
    5a60:	2200      	movs	r2, #0
    5a62:	569a      	ldrsb	r2, [r3, r2]
    5a64:	4b41      	ldr	r3, [pc, #260]	; (5b6c <recv+0x178>)
    5a66:	0112      	lsls	r2, r2, #4
    5a68:	68b9      	ldr	r1, [r7, #8]
    5a6a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    5a6c:	230f      	movs	r3, #15
    5a6e:	18fb      	adds	r3, r7, r3
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	b25b      	sxtb	r3, r3
    5a74:	4a3d      	ldr	r2, [pc, #244]	; (5b6c <recv+0x178>)
    5a76:	011b      	lsls	r3, r3, #4
    5a78:	18d3      	adds	r3, r2, r3
    5a7a:	3304      	adds	r3, #4
    5a7c:	220c      	movs	r2, #12
    5a7e:	18ba      	adds	r2, r7, r2
    5a80:	8812      	ldrh	r2, [r2, #0]
    5a82:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    5a84:	230f      	movs	r3, #15
    5a86:	18fb      	adds	r3, r7, r3
    5a88:	781b      	ldrb	r3, [r3, #0]
    5a8a:	b25b      	sxtb	r3, r3
    5a8c:	4a37      	ldr	r2, [pc, #220]	; (5b6c <recv+0x178>)
    5a8e:	011b      	lsls	r3, r3, #4
    5a90:	18d3      	adds	r3, r2, r3
    5a92:	330c      	adds	r3, #12
    5a94:	781b      	ldrb	r3, [r3, #0]
    5a96:	b2db      	uxtb	r3, r3
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d15e      	bne.n	5b5a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    5a9c:	231d      	movs	r3, #29
    5a9e:	18fb      	adds	r3, r7, r3
    5aa0:	2246      	movs	r2, #70	; 0x46
    5aa2:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    5aa4:	230f      	movs	r3, #15
    5aa6:	18fb      	adds	r3, r7, r3
    5aa8:	781b      	ldrb	r3, [r3, #0]
    5aaa:	b25b      	sxtb	r3, r3
    5aac:	4a2f      	ldr	r2, [pc, #188]	; (5b6c <recv+0x178>)
    5aae:	011b      	lsls	r3, r3, #4
    5ab0:	18d3      	adds	r3, r2, r3
    5ab2:	330c      	adds	r3, #12
    5ab4:	2201      	movs	r2, #1
    5ab6:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5ab8:	230f      	movs	r3, #15
    5aba:	18fb      	adds	r3, r7, r3
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	b25b      	sxtb	r3, r3
    5ac0:	4a2a      	ldr	r2, [pc, #168]	; (5b6c <recv+0x178>)
    5ac2:	011b      	lsls	r3, r3, #4
    5ac4:	18d3      	adds	r3, r2, r3
    5ac6:	330b      	adds	r3, #11
    5ac8:	781b      	ldrb	r3, [r3, #0]
    5aca:	b2db      	uxtb	r3, r3
    5acc:	001a      	movs	r2, r3
    5ace:	2301      	movs	r3, #1
    5ad0:	4013      	ands	r3, r2
    5ad2:	d003      	beq.n	5adc <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    5ad4:	231d      	movs	r3, #29
    5ad6:	18fb      	adds	r3, r7, r3
    5ad8:	224d      	movs	r2, #77	; 0x4d
    5ada:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	2b00      	cmp	r3, #0
    5ae0:	d105      	bne.n	5aee <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5ae2:	2314      	movs	r3, #20
    5ae4:	18fb      	adds	r3, r7, r3
    5ae6:	2201      	movs	r2, #1
    5ae8:	4252      	negs	r2, r2
    5aea:	601a      	str	r2, [r3, #0]
    5aec:	e003      	b.n	5af6 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5aee:	2314      	movs	r3, #20
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	687a      	ldr	r2, [r7, #4]
    5af4:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    5af6:	2314      	movs	r3, #20
    5af8:	18fb      	adds	r3, r7, r3
    5afa:	220f      	movs	r2, #15
    5afc:	18ba      	adds	r2, r7, r2
    5afe:	7812      	ldrb	r2, [r2, #0]
    5b00:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5b02:	230f      	movs	r3, #15
    5b04:	18fb      	adds	r3, r7, r3
    5b06:	781b      	ldrb	r3, [r3, #0]
    5b08:	b25b      	sxtb	r3, r3
    5b0a:	4a18      	ldr	r2, [pc, #96]	; (5b6c <recv+0x178>)
    5b0c:	011b      	lsls	r3, r3, #4
    5b0e:	18d3      	adds	r3, r2, r3
    5b10:	3306      	adds	r3, #6
    5b12:	881b      	ldrh	r3, [r3, #0]
    5b14:	b29a      	uxth	r2, r3
    5b16:	2314      	movs	r3, #20
    5b18:	18fb      	adds	r3, r7, r3
    5b1a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5b1c:	2314      	movs	r3, #20
    5b1e:	18fa      	adds	r2, r7, r3
    5b20:	231d      	movs	r3, #29
    5b22:	18fb      	adds	r3, r7, r3
    5b24:	7819      	ldrb	r1, [r3, #0]
    5b26:	2300      	movs	r3, #0
    5b28:	9302      	str	r3, [sp, #8]
    5b2a:	2300      	movs	r3, #0
    5b2c:	9301      	str	r3, [sp, #4]
    5b2e:	2300      	movs	r3, #0
    5b30:	9300      	str	r3, [sp, #0]
    5b32:	2308      	movs	r3, #8
    5b34:	2002      	movs	r0, #2
    5b36:	4c0e      	ldr	r4, [pc, #56]	; (5b70 <recv+0x17c>)
    5b38:	47a0      	blx	r4
    5b3a:	0003      	movs	r3, r0
    5b3c:	001a      	movs	r2, r3
    5b3e:	231e      	movs	r3, #30
    5b40:	18fb      	adds	r3, r7, r3
    5b42:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5b44:	231e      	movs	r3, #30
    5b46:	18fb      	adds	r3, r7, r3
    5b48:	2200      	movs	r2, #0
    5b4a:	5e9b      	ldrsh	r3, [r3, r2]
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d004      	beq.n	5b5a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5b50:	231e      	movs	r3, #30
    5b52:	18fb      	adds	r3, r7, r3
    5b54:	220e      	movs	r2, #14
    5b56:	4252      	negs	r2, r2
    5b58:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    5b5a:	231e      	movs	r3, #30
    5b5c:	18fb      	adds	r3, r7, r3
    5b5e:	2200      	movs	r2, #0
    5b60:	5e9b      	ldrsh	r3, [r3, r2]
}
    5b62:	0018      	movs	r0, r3
    5b64:	46bd      	mov	sp, r7
    5b66:	b009      	add	sp, #36	; 0x24
    5b68:	bd90      	pop	{r4, r7, pc}
    5b6a:	46c0      	nop			; (mov r8, r8)
    5b6c:	20000244 	.word	0x20000244
    5b70:	00001a45 	.word	0x00001a45

00005b74 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    5b74:	b5b0      	push	{r4, r5, r7, lr}
    5b76:	b088      	sub	sp, #32
    5b78:	af04      	add	r7, sp, #16
    5b7a:	0002      	movs	r2, r0
    5b7c:	1dfb      	adds	r3, r7, #7
    5b7e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5b80:	230f      	movs	r3, #15
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	22fa      	movs	r2, #250	; 0xfa
    5b86:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    5b88:	1dfb      	adds	r3, r7, #7
    5b8a:	781b      	ldrb	r3, [r3, #0]
    5b8c:	2b7f      	cmp	r3, #127	; 0x7f
    5b8e:	d86a      	bhi.n	5c66 <close+0xf2>
    5b90:	1dfb      	adds	r3, r7, #7
    5b92:	781b      	ldrb	r3, [r3, #0]
    5b94:	b25b      	sxtb	r3, r3
    5b96:	4a38      	ldr	r2, [pc, #224]	; (5c78 <close+0x104>)
    5b98:	011b      	lsls	r3, r3, #4
    5b9a:	18d3      	adds	r3, r2, r3
    5b9c:	330a      	adds	r3, #10
    5b9e:	781b      	ldrb	r3, [r3, #0]
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	2b01      	cmp	r3, #1
    5ba4:	d15f      	bne.n	5c66 <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5ba6:	230e      	movs	r3, #14
    5ba8:	18fb      	adds	r3, r7, r3
    5baa:	2249      	movs	r2, #73	; 0x49
    5bac:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    5bae:	2308      	movs	r3, #8
    5bb0:	18fb      	adds	r3, r7, r3
    5bb2:	1dfa      	adds	r2, r7, #7
    5bb4:	7812      	ldrb	r2, [r2, #0]
    5bb6:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    5bb8:	1dfb      	adds	r3, r7, #7
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	b25b      	sxtb	r3, r3
    5bbe:	4a2e      	ldr	r2, [pc, #184]	; (5c78 <close+0x104>)
    5bc0:	011b      	lsls	r3, r3, #4
    5bc2:	18d3      	adds	r3, r2, r3
    5bc4:	3306      	adds	r3, #6
    5bc6:	881b      	ldrh	r3, [r3, #0]
    5bc8:	b29a      	uxth	r2, r3
    5bca:	2308      	movs	r3, #8
    5bcc:	18fb      	adds	r3, r7, r3
    5bce:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5bd0:	1dfb      	adds	r3, r7, #7
    5bd2:	781b      	ldrb	r3, [r3, #0]
    5bd4:	b25b      	sxtb	r3, r3
    5bd6:	4a28      	ldr	r2, [pc, #160]	; (5c78 <close+0x104>)
    5bd8:	011b      	lsls	r3, r3, #4
    5bda:	18d3      	adds	r3, r2, r3
    5bdc:	330a      	adds	r3, #10
    5bde:	2200      	movs	r2, #0
    5be0:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5be2:	1dfb      	adds	r3, r7, #7
    5be4:	781b      	ldrb	r3, [r3, #0]
    5be6:	b25b      	sxtb	r3, r3
    5be8:	4a23      	ldr	r2, [pc, #140]	; (5c78 <close+0x104>)
    5bea:	011b      	lsls	r3, r3, #4
    5bec:	18d3      	adds	r3, r2, r3
    5bee:	3306      	adds	r3, #6
    5bf0:	2200      	movs	r2, #0
    5bf2:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5bf4:	1dfb      	adds	r3, r7, #7
    5bf6:	781b      	ldrb	r3, [r3, #0]
    5bf8:	b25b      	sxtb	r3, r3
    5bfa:	4a1f      	ldr	r2, [pc, #124]	; (5c78 <close+0x104>)
    5bfc:	011b      	lsls	r3, r3, #4
    5bfe:	18d3      	adds	r3, r2, r3
    5c00:	330b      	adds	r3, #11
    5c02:	781b      	ldrb	r3, [r3, #0]
    5c04:	b2db      	uxtb	r3, r3
    5c06:	001a      	movs	r2, r3
    5c08:	2301      	movs	r3, #1
    5c0a:	4013      	ands	r3, r2
    5c0c:	d003      	beq.n	5c16 <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5c0e:	230e      	movs	r3, #14
    5c10:	18fb      	adds	r3, r7, r3
    5c12:	224e      	movs	r2, #78	; 0x4e
    5c14:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5c16:	230f      	movs	r3, #15
    5c18:	18fc      	adds	r4, r7, r3
    5c1a:	2308      	movs	r3, #8
    5c1c:	18fa      	adds	r2, r7, r3
    5c1e:	230e      	movs	r3, #14
    5c20:	18fb      	adds	r3, r7, r3
    5c22:	7819      	ldrb	r1, [r3, #0]
    5c24:	2300      	movs	r3, #0
    5c26:	9302      	str	r3, [sp, #8]
    5c28:	2300      	movs	r3, #0
    5c2a:	9301      	str	r3, [sp, #4]
    5c2c:	2300      	movs	r3, #0
    5c2e:	9300      	str	r3, [sp, #0]
    5c30:	2304      	movs	r3, #4
    5c32:	2002      	movs	r0, #2
    5c34:	4d11      	ldr	r5, [pc, #68]	; (5c7c <close+0x108>)
    5c36:	47a8      	blx	r5
    5c38:	0003      	movs	r3, r0
    5c3a:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5c3c:	230f      	movs	r3, #15
    5c3e:	18fb      	adds	r3, r7, r3
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	b25b      	sxtb	r3, r3
    5c44:	2b00      	cmp	r3, #0
    5c46:	d003      	beq.n	5c50 <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    5c48:	230f      	movs	r3, #15
    5c4a:	18fb      	adds	r3, r7, r3
    5c4c:	22f7      	movs	r2, #247	; 0xf7
    5c4e:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    5c50:	1dfb      	adds	r3, r7, #7
    5c52:	781b      	ldrb	r3, [r3, #0]
    5c54:	b25b      	sxtb	r3, r3
    5c56:	011a      	lsls	r2, r3, #4
    5c58:	4b07      	ldr	r3, [pc, #28]	; (5c78 <close+0x104>)
    5c5a:	18d3      	adds	r3, r2, r3
    5c5c:	2210      	movs	r2, #16
    5c5e:	2100      	movs	r1, #0
    5c60:	0018      	movs	r0, r3
    5c62:	4b07      	ldr	r3, [pc, #28]	; (5c80 <close+0x10c>)
    5c64:	4798      	blx	r3
	}
	return s8Ret;
    5c66:	230f      	movs	r3, #15
    5c68:	18fb      	adds	r3, r7, r3
    5c6a:	781b      	ldrb	r3, [r3, #0]
    5c6c:	b25b      	sxtb	r3, r3
}
    5c6e:	0018      	movs	r0, r3
    5c70:	46bd      	mov	sp, r7
    5c72:	b004      	add	sp, #16
    5c74:	bdb0      	pop	{r4, r5, r7, pc}
    5c76:	46c0      	nop			; (mov r8, r8)
    5c78:	20000244 	.word	0x20000244
    5c7c:	00001a45 	.word	0x00001a45
    5c80:	00001611 	.word	0x00001611

00005c84 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    5c84:	b5b0      	push	{r4, r5, r7, lr}
    5c86:	b088      	sub	sp, #32
    5c88:	af04      	add	r7, sp, #16
    5c8a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5c8c:	230f      	movs	r3, #15
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	22fa      	movs	r2, #250	; 0xfa
    5c92:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    5c94:	687b      	ldr	r3, [r7, #4]
    5c96:	0018      	movs	r0, r3
    5c98:	4b19      	ldr	r3, [pc, #100]	; (5d00 <gethostbyname+0x7c>)
    5c9a:	4798      	blx	r3
    5c9c:	0003      	movs	r3, r0
    5c9e:	001a      	movs	r2, r3
    5ca0:	230e      	movs	r3, #14
    5ca2:	18fb      	adds	r3, r7, r3
    5ca4:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    5ca6:	230e      	movs	r3, #14
    5ca8:	18fb      	adds	r3, r7, r3
    5caa:	781b      	ldrb	r3, [r3, #0]
    5cac:	2b40      	cmp	r3, #64	; 0x40
    5cae:	d81f      	bhi.n	5cf0 <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5cb0:	230e      	movs	r3, #14
    5cb2:	18fb      	adds	r3, r7, r3
    5cb4:	781b      	ldrb	r3, [r3, #0]
    5cb6:	b29b      	uxth	r3, r3
    5cb8:	3301      	adds	r3, #1
    5cba:	b299      	uxth	r1, r3
    5cbc:	230f      	movs	r3, #15
    5cbe:	18fc      	adds	r4, r7, r3
    5cc0:	687a      	ldr	r2, [r7, #4]
    5cc2:	2300      	movs	r3, #0
    5cc4:	9302      	str	r3, [sp, #8]
    5cc6:	2300      	movs	r3, #0
    5cc8:	9301      	str	r3, [sp, #4]
    5cca:	2300      	movs	r3, #0
    5ccc:	9300      	str	r3, [sp, #0]
    5cce:	000b      	movs	r3, r1
    5cd0:	21ca      	movs	r1, #202	; 0xca
    5cd2:	2002      	movs	r0, #2
    5cd4:	4d0b      	ldr	r5, [pc, #44]	; (5d04 <gethostbyname+0x80>)
    5cd6:	47a8      	blx	r5
    5cd8:	0003      	movs	r3, r0
    5cda:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    5cdc:	230f      	movs	r3, #15
    5cde:	18fb      	adds	r3, r7, r3
    5ce0:	781b      	ldrb	r3, [r3, #0]
    5ce2:	b25b      	sxtb	r3, r3
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d003      	beq.n	5cf0 <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    5ce8:	230f      	movs	r3, #15
    5cea:	18fb      	adds	r3, r7, r3
    5cec:	22f7      	movs	r2, #247	; 0xf7
    5cee:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    5cf0:	230f      	movs	r3, #15
    5cf2:	18fb      	adds	r3, r7, r3
    5cf4:	781b      	ldrb	r3, [r3, #0]
    5cf6:	b25b      	sxtb	r3, r3
}
    5cf8:	0018      	movs	r0, r3
    5cfa:	46bd      	mov	sp, r7
    5cfc:	b004      	add	sp, #16
    5cfe:	bdb0      	pop	{r4, r5, r7, pc}
    5d00:	00001651 	.word	0x00001651
    5d04:	00001a45 	.word	0x00001a45

00005d08 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    5d08:	b580      	push	{r7, lr}
    5d0a:	b082      	sub	sp, #8
    5d0c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5d0e:	003b      	movs	r3, r7
    5d10:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	22b9      	movs	r2, #185	; 0xb9
    5d16:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5d18:	4b13      	ldr	r3, [pc, #76]	; (5d68 <spi_flash_enter_low_power_mode+0x60>)
    5d1a:	2100      	movs	r1, #0
    5d1c:	0018      	movs	r0, r3
    5d1e:	4b13      	ldr	r3, [pc, #76]	; (5d6c <spi_flash_enter_low_power_mode+0x64>)
    5d20:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	001a      	movs	r2, r3
    5d28:	4b11      	ldr	r3, [pc, #68]	; (5d70 <spi_flash_enter_low_power_mode+0x68>)
    5d2a:	0011      	movs	r1, r2
    5d2c:	0018      	movs	r0, r3
    5d2e:	4b0f      	ldr	r3, [pc, #60]	; (5d6c <spi_flash_enter_low_power_mode+0x64>)
    5d30:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5d32:	4b10      	ldr	r3, [pc, #64]	; (5d74 <spi_flash_enter_low_power_mode+0x6c>)
    5d34:	2101      	movs	r1, #1
    5d36:	0018      	movs	r0, r3
    5d38:	4b0c      	ldr	r3, [pc, #48]	; (5d6c <spi_flash_enter_low_power_mode+0x64>)
    5d3a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5d3c:	4b0e      	ldr	r3, [pc, #56]	; (5d78 <spi_flash_enter_low_power_mode+0x70>)
    5d3e:	2100      	movs	r1, #0
    5d40:	0018      	movs	r0, r3
    5d42:	4b0a      	ldr	r3, [pc, #40]	; (5d6c <spi_flash_enter_low_power_mode+0x64>)
    5d44:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    5d46:	4b0d      	ldr	r3, [pc, #52]	; (5d7c <spi_flash_enter_low_power_mode+0x74>)
    5d48:	2181      	movs	r1, #129	; 0x81
    5d4a:	0018      	movs	r0, r3
    5d4c:	4b07      	ldr	r3, [pc, #28]	; (5d6c <spi_flash_enter_low_power_mode+0x64>)
    5d4e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5d50:	46c0      	nop			; (mov r8, r8)
    5d52:	4b0b      	ldr	r3, [pc, #44]	; (5d80 <spi_flash_enter_low_power_mode+0x78>)
    5d54:	0018      	movs	r0, r3
    5d56:	4b0b      	ldr	r3, [pc, #44]	; (5d84 <spi_flash_enter_low_power_mode+0x7c>)
    5d58:	4798      	blx	r3
    5d5a:	1e03      	subs	r3, r0, #0
    5d5c:	2b01      	cmp	r3, #1
    5d5e:	d1f8      	bne.n	5d52 <spi_flash_enter_low_power_mode+0x4a>
}
    5d60:	46c0      	nop			; (mov r8, r8)
    5d62:	46bd      	mov	sp, r7
    5d64:	b002      	add	sp, #8
    5d66:	bd80      	pop	{r7, pc}
    5d68:	00010208 	.word	0x00010208
    5d6c:	00003701 	.word	0x00003701
    5d70:	0001020c 	.word	0x0001020c
    5d74:	00010214 	.word	0x00010214
    5d78:	0001021c 	.word	0x0001021c
    5d7c:	00010204 	.word	0x00010204
    5d80:	00010218 	.word	0x00010218
    5d84:	000036bd 	.word	0x000036bd

00005d88 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5d8e:	003b      	movs	r3, r7
    5d90:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	22ab      	movs	r2, #171	; 0xab
    5d96:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5d98:	4b13      	ldr	r3, [pc, #76]	; (5de8 <spi_flash_leave_low_power_mode+0x60>)
    5d9a:	2100      	movs	r1, #0
    5d9c:	0018      	movs	r0, r3
    5d9e:	4b13      	ldr	r3, [pc, #76]	; (5dec <spi_flash_leave_low_power_mode+0x64>)
    5da0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	001a      	movs	r2, r3
    5da8:	4b11      	ldr	r3, [pc, #68]	; (5df0 <spi_flash_leave_low_power_mode+0x68>)
    5daa:	0011      	movs	r1, r2
    5dac:	0018      	movs	r0, r3
    5dae:	4b0f      	ldr	r3, [pc, #60]	; (5dec <spi_flash_leave_low_power_mode+0x64>)
    5db0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5db2:	4b10      	ldr	r3, [pc, #64]	; (5df4 <spi_flash_leave_low_power_mode+0x6c>)
    5db4:	2101      	movs	r1, #1
    5db6:	0018      	movs	r0, r3
    5db8:	4b0c      	ldr	r3, [pc, #48]	; (5dec <spi_flash_leave_low_power_mode+0x64>)
    5dba:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5dbc:	4b0e      	ldr	r3, [pc, #56]	; (5df8 <spi_flash_leave_low_power_mode+0x70>)
    5dbe:	2100      	movs	r1, #0
    5dc0:	0018      	movs	r0, r3
    5dc2:	4b0a      	ldr	r3, [pc, #40]	; (5dec <spi_flash_leave_low_power_mode+0x64>)
    5dc4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    5dc6:	4b0d      	ldr	r3, [pc, #52]	; (5dfc <spi_flash_leave_low_power_mode+0x74>)
    5dc8:	2181      	movs	r1, #129	; 0x81
    5dca:	0018      	movs	r0, r3
    5dcc:	4b07      	ldr	r3, [pc, #28]	; (5dec <spi_flash_leave_low_power_mode+0x64>)
    5dce:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5dd0:	46c0      	nop			; (mov r8, r8)
    5dd2:	4b0b      	ldr	r3, [pc, #44]	; (5e00 <spi_flash_leave_low_power_mode+0x78>)
    5dd4:	0018      	movs	r0, r3
    5dd6:	4b0b      	ldr	r3, [pc, #44]	; (5e04 <spi_flash_leave_low_power_mode+0x7c>)
    5dd8:	4798      	blx	r3
    5dda:	1e03      	subs	r3, r0, #0
    5ddc:	2b01      	cmp	r3, #1
    5dde:	d1f8      	bne.n	5dd2 <spi_flash_leave_low_power_mode+0x4a>
}
    5de0:	46c0      	nop			; (mov r8, r8)
    5de2:	46bd      	mov	sp, r7
    5de4:	b002      	add	sp, #8
    5de6:	bd80      	pop	{r7, pc}
    5de8:	00010208 	.word	0x00010208
    5dec:	00003701 	.word	0x00003701
    5df0:	0001020c 	.word	0x0001020c
    5df4:	00010214 	.word	0x00010214
    5df8:	0001021c 	.word	0x0001021c
    5dfc:	00010204 	.word	0x00010204
    5e00:	00010218 	.word	0x00010218
    5e04:	000036bd 	.word	0x000036bd

00005e08 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    5e08:	b590      	push	{r4, r7, lr}
    5e0a:	b085      	sub	sp, #20
    5e0c:	af00      	add	r7, sp, #0
    5e0e:	0002      	movs	r2, r0
    5e10:	1dfb      	adds	r3, r7, #7
    5e12:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5e14:	230f      	movs	r3, #15
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	2200      	movs	r2, #0
    5e1a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5e1c:	4b24      	ldr	r3, [pc, #144]	; (5eb0 <spi_flash_enable+0xa8>)
    5e1e:	4798      	blx	r3
    5e20:	0003      	movs	r3, r0
    5e22:	051b      	lsls	r3, r3, #20
    5e24:	0d1b      	lsrs	r3, r3, #20
    5e26:	4a23      	ldr	r2, [pc, #140]	; (5eb4 <spi_flash_enable+0xac>)
    5e28:	4293      	cmp	r3, r2
    5e2a:	d938      	bls.n	5e9e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5e2c:	230f      	movs	r3, #15
    5e2e:	18fc      	adds	r4, r7, r3
    5e30:	2308      	movs	r3, #8
    5e32:	18fb      	adds	r3, r7, r3
    5e34:	4a20      	ldr	r2, [pc, #128]	; (5eb8 <spi_flash_enable+0xb0>)
    5e36:	0019      	movs	r1, r3
    5e38:	0010      	movs	r0, r2
    5e3a:	4b20      	ldr	r3, [pc, #128]	; (5ebc <spi_flash_enable+0xb4>)
    5e3c:	4798      	blx	r3
    5e3e:	0003      	movs	r3, r0
    5e40:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    5e42:	230f      	movs	r3, #15
    5e44:	18fb      	adds	r3, r7, r3
    5e46:	781b      	ldrb	r3, [r3, #0]
    5e48:	b25b      	sxtb	r3, r3
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d126      	bne.n	5e9c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    5e4e:	68bb      	ldr	r3, [r7, #8]
    5e50:	4a1b      	ldr	r2, [pc, #108]	; (5ec0 <spi_flash_enable+0xb8>)
    5e52:	4013      	ands	r3, r2
    5e54:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    5e56:	68bb      	ldr	r3, [r7, #8]
    5e58:	4a1a      	ldr	r2, [pc, #104]	; (5ec4 <spi_flash_enable+0xbc>)
    5e5a:	4313      	orrs	r3, r2
    5e5c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5e5e:	68bb      	ldr	r3, [r7, #8]
    5e60:	4a15      	ldr	r2, [pc, #84]	; (5eb8 <spi_flash_enable+0xb0>)
    5e62:	0019      	movs	r1, r3
    5e64:	0010      	movs	r0, r2
    5e66:	4b18      	ldr	r3, [pc, #96]	; (5ec8 <spi_flash_enable+0xc0>)
    5e68:	4798      	blx	r3
		if(enable) {
    5e6a:	1dfb      	adds	r3, r7, #7
    5e6c:	781b      	ldrb	r3, [r3, #0]
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d002      	beq.n	5e78 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    5e72:	4b16      	ldr	r3, [pc, #88]	; (5ecc <spi_flash_enable+0xc4>)
    5e74:	4798      	blx	r3
    5e76:	e001      	b.n	5e7c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5e78:	4b15      	ldr	r3, [pc, #84]	; (5ed0 <spi_flash_enable+0xc8>)
    5e7a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5e7c:	68bb      	ldr	r3, [r7, #8]
    5e7e:	4a10      	ldr	r2, [pc, #64]	; (5ec0 <spi_flash_enable+0xb8>)
    5e80:	4013      	ands	r3, r2
    5e82:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5e84:	68bb      	ldr	r3, [r7, #8]
    5e86:	2280      	movs	r2, #128	; 0x80
    5e88:	0252      	lsls	r2, r2, #9
    5e8a:	4313      	orrs	r3, r2
    5e8c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5e8e:	68bb      	ldr	r3, [r7, #8]
    5e90:	4a09      	ldr	r2, [pc, #36]	; (5eb8 <spi_flash_enable+0xb0>)
    5e92:	0019      	movs	r1, r3
    5e94:	0010      	movs	r0, r2
    5e96:	4b0c      	ldr	r3, [pc, #48]	; (5ec8 <spi_flash_enable+0xc0>)
    5e98:	4798      	blx	r3
    5e9a:	e000      	b.n	5e9e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    5e9c:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    5e9e:	230f      	movs	r3, #15
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	781b      	ldrb	r3, [r3, #0]
    5ea4:	b25b      	sxtb	r3, r3
}
    5ea6:	0018      	movs	r0, r3
    5ea8:	46bd      	mov	sp, r7
    5eaa:	b005      	add	sp, #20
    5eac:	bd90      	pop	{r4, r7, pc}
    5eae:	46c0      	nop			; (mov r8, r8)
    5eb0:	0000321d 	.word	0x0000321d
    5eb4:	0000039f 	.word	0x0000039f
    5eb8:	00001410 	.word	0x00001410
    5ebc:	000036dd 	.word	0x000036dd
    5ec0:	f8888fff 	.word	0xf8888fff
    5ec4:	01111000 	.word	0x01111000
    5ec8:	00003701 	.word	0x00003701
    5ecc:	00005d89 	.word	0x00005d89
    5ed0:	00005d09 	.word	0x00005d09

00005ed4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b082      	sub	sp, #8
    5ed8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5eda:	4b10      	ldr	r3, [pc, #64]	; (5f1c <cpu_irq_enter_critical+0x48>)
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d112      	bne.n	5f08 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5ee2:	f3ef 8310 	mrs	r3, PRIMASK
    5ee6:	607b      	str	r3, [r7, #4]
  return(result);
    5ee8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    5eea:	2b00      	cmp	r3, #0
    5eec:	d109      	bne.n	5f02 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5eee:	b672      	cpsid	i
    5ef0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5ef4:	4b0a      	ldr	r3, [pc, #40]	; (5f20 <cpu_irq_enter_critical+0x4c>)
    5ef6:	2200      	movs	r2, #0
    5ef8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5efa:	4b0a      	ldr	r3, [pc, #40]	; (5f24 <cpu_irq_enter_critical+0x50>)
    5efc:	2201      	movs	r2, #1
    5efe:	701a      	strb	r2, [r3, #0]
    5f00:	e002      	b.n	5f08 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5f02:	4b08      	ldr	r3, [pc, #32]	; (5f24 <cpu_irq_enter_critical+0x50>)
    5f04:	2200      	movs	r2, #0
    5f06:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5f08:	4b04      	ldr	r3, [pc, #16]	; (5f1c <cpu_irq_enter_critical+0x48>)
    5f0a:	681b      	ldr	r3, [r3, #0]
    5f0c:	1c5a      	adds	r2, r3, #1
    5f0e:	4b03      	ldr	r3, [pc, #12]	; (5f1c <cpu_irq_enter_critical+0x48>)
    5f10:	601a      	str	r2, [r3, #0]
}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	46bd      	mov	sp, r7
    5f16:	b002      	add	sp, #8
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	200000d0 	.word	0x200000d0
    5f20:	20000018 	.word	0x20000018
    5f24:	200000d4 	.word	0x200000d4

00005f28 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5f2c:	4b0b      	ldr	r3, [pc, #44]	; (5f5c <cpu_irq_leave_critical+0x34>)
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	1e5a      	subs	r2, r3, #1
    5f32:	4b0a      	ldr	r3, [pc, #40]	; (5f5c <cpu_irq_leave_critical+0x34>)
    5f34:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5f36:	4b09      	ldr	r3, [pc, #36]	; (5f5c <cpu_irq_leave_critical+0x34>)
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d10a      	bne.n	5f54 <cpu_irq_leave_critical+0x2c>
    5f3e:	4b08      	ldr	r3, [pc, #32]	; (5f60 <cpu_irq_leave_critical+0x38>)
    5f40:	781b      	ldrb	r3, [r3, #0]
    5f42:	b2db      	uxtb	r3, r3
    5f44:	2b00      	cmp	r3, #0
    5f46:	d005      	beq.n	5f54 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5f48:	4b06      	ldr	r3, [pc, #24]	; (5f64 <cpu_irq_leave_critical+0x3c>)
    5f4a:	2201      	movs	r2, #1
    5f4c:	701a      	strb	r2, [r3, #0]
    5f4e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5f52:	b662      	cpsie	i
	}
}
    5f54:	46c0      	nop			; (mov r8, r8)
    5f56:	46bd      	mov	sp, r7
    5f58:	bd80      	pop	{r7, pc}
    5f5a:	46c0      	nop			; (mov r8, r8)
    5f5c:	200000d0 	.word	0x200000d0
    5f60:	200000d4 	.word	0x200000d4
    5f64:	20000018 	.word	0x20000018

00005f68 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5f68:	b580      	push	{r7, lr}
    5f6a:	b084      	sub	sp, #16
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	0002      	movs	r2, r0
    5f70:	1dfb      	adds	r3, r7, #7
    5f72:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5f74:	230f      	movs	r3, #15
    5f76:	18fb      	adds	r3, r7, r3
    5f78:	1dfa      	adds	r2, r7, #7
    5f7a:	7812      	ldrb	r2, [r2, #0]
    5f7c:	09d2      	lsrs	r2, r2, #7
    5f7e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5f80:	230e      	movs	r3, #14
    5f82:	18fb      	adds	r3, r7, r3
    5f84:	1dfa      	adds	r2, r7, #7
    5f86:	7812      	ldrb	r2, [r2, #0]
    5f88:	0952      	lsrs	r2, r2, #5
    5f8a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5f8c:	4b0d      	ldr	r3, [pc, #52]	; (5fc4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5f8e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5f90:	230f      	movs	r3, #15
    5f92:	18fb      	adds	r3, r7, r3
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	2b00      	cmp	r3, #0
    5f98:	d10f      	bne.n	5fba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5f9a:	230f      	movs	r3, #15
    5f9c:	18fb      	adds	r3, r7, r3
    5f9e:	781b      	ldrb	r3, [r3, #0]
    5fa0:	009b      	lsls	r3, r3, #2
    5fa2:	2210      	movs	r2, #16
    5fa4:	4694      	mov	ip, r2
    5fa6:	44bc      	add	ip, r7
    5fa8:	4463      	add	r3, ip
    5faa:	3b08      	subs	r3, #8
    5fac:	681a      	ldr	r2, [r3, #0]
    5fae:	230e      	movs	r3, #14
    5fb0:	18fb      	adds	r3, r7, r3
    5fb2:	781b      	ldrb	r3, [r3, #0]
    5fb4:	01db      	lsls	r3, r3, #7
    5fb6:	18d3      	adds	r3, r2, r3
    5fb8:	e000      	b.n	5fbc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5fba:	2300      	movs	r3, #0
	}
}
    5fbc:	0018      	movs	r0, r3
    5fbe:	46bd      	mov	sp, r7
    5fc0:	b004      	add	sp, #16
    5fc2:	bd80      	pop	{r7, pc}
    5fc4:	41004400 	.word	0x41004400

00005fc8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	0002      	movs	r2, r0
    5fd0:	1dfb      	adds	r3, r7, #7
    5fd2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5fd4:	1dfb      	adds	r3, r7, #7
    5fd6:	781b      	ldrb	r3, [r3, #0]
    5fd8:	0018      	movs	r0, r3
    5fda:	4b03      	ldr	r3, [pc, #12]	; (5fe8 <port_get_group_from_gpio_pin+0x20>)
    5fdc:	4798      	blx	r3
    5fde:	0003      	movs	r3, r0
}
    5fe0:	0018      	movs	r0, r3
    5fe2:	46bd      	mov	sp, r7
    5fe4:	b002      	add	sp, #8
    5fe6:	bd80      	pop	{r7, pc}
    5fe8:	00005f69 	.word	0x00005f69

00005fec <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    5fec:	b580      	push	{r7, lr}
    5fee:	b082      	sub	sp, #8
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	2200      	movs	r2, #0
    5ff8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	2201      	movs	r2, #1
    5ffe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	2200      	movs	r2, #0
    6004:	709a      	strb	r2, [r3, #2]
}
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	46bd      	mov	sp, r7
    600a:	b002      	add	sp, #8
    600c:	bd80      	pop	{r7, pc}
    600e:	46c0      	nop			; (mov r8, r8)

00006010 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6010:	b580      	push	{r7, lr}
    6012:	b084      	sub	sp, #16
    6014:	af00      	add	r7, sp, #0
    6016:	0002      	movs	r2, r0
    6018:	1dfb      	adds	r3, r7, #7
    601a:	701a      	strb	r2, [r3, #0]
    601c:	1dbb      	adds	r3, r7, #6
    601e:	1c0a      	adds	r2, r1, #0
    6020:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6022:	1dfb      	adds	r3, r7, #7
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	0018      	movs	r0, r3
    6028:	4b0d      	ldr	r3, [pc, #52]	; (6060 <port_pin_set_output_level+0x50>)
    602a:	4798      	blx	r3
    602c:	0003      	movs	r3, r0
    602e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6030:	1dfb      	adds	r3, r7, #7
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	221f      	movs	r2, #31
    6036:	4013      	ands	r3, r2
    6038:	2201      	movs	r2, #1
    603a:	409a      	lsls	r2, r3
    603c:	0013      	movs	r3, r2
    603e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6040:	1dbb      	adds	r3, r7, #6
    6042:	781b      	ldrb	r3, [r3, #0]
    6044:	2b00      	cmp	r3, #0
    6046:	d003      	beq.n	6050 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6048:	68fb      	ldr	r3, [r7, #12]
    604a:	68ba      	ldr	r2, [r7, #8]
    604c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    604e:	e002      	b.n	6056 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	68ba      	ldr	r2, [r7, #8]
    6054:	615a      	str	r2, [r3, #20]
	}
}
    6056:	46c0      	nop			; (mov r8, r8)
    6058:	46bd      	mov	sp, r7
    605a:	b004      	add	sp, #16
    605c:	bd80      	pop	{r7, pc}
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	00005fc9 	.word	0x00005fc9

00006064 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6064:	b580      	push	{r7, lr}
    6066:	b082      	sub	sp, #8
    6068:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    606a:	1d3b      	adds	r3, r7, #4
    606c:	0018      	movs	r0, r3
    606e:	4b0e      	ldr	r3, [pc, #56]	; (60a8 <system_board_init+0x44>)
    6070:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6072:	1d3b      	adds	r3, r7, #4
    6074:	2201      	movs	r2, #1
    6076:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6078:	1d3b      	adds	r3, r7, #4
    607a:	0019      	movs	r1, r3
    607c:	203e      	movs	r0, #62	; 0x3e
    607e:	4b0b      	ldr	r3, [pc, #44]	; (60ac <system_board_init+0x48>)
    6080:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    6082:	2101      	movs	r1, #1
    6084:	203e      	movs	r0, #62	; 0x3e
    6086:	4b0a      	ldr	r3, [pc, #40]	; (60b0 <system_board_init+0x4c>)
    6088:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    608a:	1d3b      	adds	r3, r7, #4
    608c:	2200      	movs	r2, #0
    608e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6090:	1d3b      	adds	r3, r7, #4
    6092:	2201      	movs	r2, #1
    6094:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6096:	1d3b      	adds	r3, r7, #4
    6098:	0019      	movs	r1, r3
    609a:	200f      	movs	r0, #15
    609c:	4b03      	ldr	r3, [pc, #12]	; (60ac <system_board_init+0x48>)
    609e:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    60a0:	46c0      	nop			; (mov r8, r8)
    60a2:	46bd      	mov	sp, r7
    60a4:	b002      	add	sp, #8
    60a6:	bd80      	pop	{r7, pc}
    60a8:	00005fed 	.word	0x00005fed
    60ac:	000066d9 	.word	0x000066d9
    60b0:	00006011 	.word	0x00006011

000060b4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    60b4:	b580      	push	{r7, lr}
    60b6:	b084      	sub	sp, #16
    60b8:	af00      	add	r7, sp, #0
    60ba:	0002      	movs	r2, r0
    60bc:	1dfb      	adds	r3, r7, #7
    60be:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    60c0:	230f      	movs	r3, #15
    60c2:	18fb      	adds	r3, r7, r3
    60c4:	1dfa      	adds	r2, r7, #7
    60c6:	7812      	ldrb	r2, [r2, #0]
    60c8:	0952      	lsrs	r2, r2, #5
    60ca:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    60cc:	230f      	movs	r3, #15
    60ce:	18fb      	adds	r3, r7, r3
    60d0:	781b      	ldrb	r3, [r3, #0]
    60d2:	2b00      	cmp	r3, #0
    60d4:	d10c      	bne.n	60f0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    60d6:	4b09      	ldr	r3, [pc, #36]	; (60fc <_extint_get_eic_from_channel+0x48>)
    60d8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    60da:	230f      	movs	r3, #15
    60dc:	18fb      	adds	r3, r7, r3
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	009b      	lsls	r3, r3, #2
    60e2:	2210      	movs	r2, #16
    60e4:	4694      	mov	ip, r2
    60e6:	44bc      	add	ip, r7
    60e8:	4463      	add	r3, ip
    60ea:	3b08      	subs	r3, #8
    60ec:	681b      	ldr	r3, [r3, #0]
    60ee:	e000      	b.n	60f2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    60f0:	2300      	movs	r3, #0
	}
}
    60f2:	0018      	movs	r0, r3
    60f4:	46bd      	mov	sp, r7
    60f6:	b004      	add	sp, #16
    60f8:	bd80      	pop	{r7, pc}
    60fa:	46c0      	nop			; (mov r8, r8)
    60fc:	40001800 	.word	0x40001800

00006100 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6100:	b580      	push	{r7, lr}
    6102:	b084      	sub	sp, #16
    6104:	af00      	add	r7, sp, #0
    6106:	0002      	movs	r2, r0
    6108:	1dfb      	adds	r3, r7, #7
    610a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    610c:	1dfb      	adds	r3, r7, #7
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	0018      	movs	r0, r3
    6112:	4b0b      	ldr	r3, [pc, #44]	; (6140 <extint_chan_is_detected+0x40>)
    6114:	4798      	blx	r3
    6116:	0003      	movs	r3, r0
    6118:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    611a:	1dfb      	adds	r3, r7, #7
    611c:	781b      	ldrb	r3, [r3, #0]
    611e:	221f      	movs	r2, #31
    6120:	4013      	ands	r3, r2
    6122:	2201      	movs	r2, #1
    6124:	409a      	lsls	r2, r3
    6126:	0013      	movs	r3, r2
    6128:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    612a:	68fb      	ldr	r3, [r7, #12]
    612c:	691b      	ldr	r3, [r3, #16]
    612e:	68ba      	ldr	r2, [r7, #8]
    6130:	4013      	ands	r3, r2
    6132:	1e5a      	subs	r2, r3, #1
    6134:	4193      	sbcs	r3, r2
    6136:	b2db      	uxtb	r3, r3
}
    6138:	0018      	movs	r0, r3
    613a:	46bd      	mov	sp, r7
    613c:	b004      	add	sp, #16
    613e:	bd80      	pop	{r7, pc}
    6140:	000060b5 	.word	0x000060b5

00006144 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    6144:	b580      	push	{r7, lr}
    6146:	b084      	sub	sp, #16
    6148:	af00      	add	r7, sp, #0
    614a:	0002      	movs	r2, r0
    614c:	1dfb      	adds	r3, r7, #7
    614e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6150:	1dfb      	adds	r3, r7, #7
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	0018      	movs	r0, r3
    6156:	4b09      	ldr	r3, [pc, #36]	; (617c <extint_chan_clear_detected+0x38>)
    6158:	4798      	blx	r3
    615a:	0003      	movs	r3, r0
    615c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    615e:	1dfb      	adds	r3, r7, #7
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	221f      	movs	r2, #31
    6164:	4013      	ands	r3, r2
    6166:	2201      	movs	r2, #1
    6168:	409a      	lsls	r2, r3
    616a:	0013      	movs	r3, r2
    616c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    616e:	68fb      	ldr	r3, [r7, #12]
    6170:	68ba      	ldr	r2, [r7, #8]
    6172:	611a      	str	r2, [r3, #16]
}
    6174:	46c0      	nop			; (mov r8, r8)
    6176:	46bd      	mov	sp, r7
    6178:	b004      	add	sp, #16
    617a:	bd80      	pop	{r7, pc}
    617c:	000060b5 	.word	0x000060b5

00006180 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6180:	b580      	push	{r7, lr}
    6182:	b082      	sub	sp, #8
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
    6188:	0008      	movs	r0, r1
    618a:	0011      	movs	r1, r2
    618c:	1cfb      	adds	r3, r7, #3
    618e:	1c02      	adds	r2, r0, #0
    6190:	701a      	strb	r2, [r3, #0]
    6192:	1cbb      	adds	r3, r7, #2
    6194:	1c0a      	adds	r2, r1, #0
    6196:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    6198:	1cbb      	adds	r3, r7, #2
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	2b00      	cmp	r3, #0
    619e:	d001      	beq.n	61a4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    61a0:	2317      	movs	r3, #23
    61a2:	e019      	b.n	61d8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    61a4:	1cfb      	adds	r3, r7, #3
    61a6:	781a      	ldrb	r2, [r3, #0]
    61a8:	4b0d      	ldr	r3, [pc, #52]	; (61e0 <extint_register_callback+0x60>)
    61aa:	0092      	lsls	r2, r2, #2
    61ac:	58d3      	ldr	r3, [r2, r3]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d107      	bne.n	61c2 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    61b2:	1cfb      	adds	r3, r7, #3
    61b4:	781a      	ldrb	r2, [r3, #0]
    61b6:	4b0a      	ldr	r3, [pc, #40]	; (61e0 <extint_register_callback+0x60>)
    61b8:	0092      	lsls	r2, r2, #2
    61ba:	6879      	ldr	r1, [r7, #4]
    61bc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    61be:	2300      	movs	r3, #0
    61c0:	e00a      	b.n	61d8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    61c2:	1cfb      	adds	r3, r7, #3
    61c4:	781a      	ldrb	r2, [r3, #0]
    61c6:	4b06      	ldr	r3, [pc, #24]	; (61e0 <extint_register_callback+0x60>)
    61c8:	0092      	lsls	r2, r2, #2
    61ca:	58d2      	ldr	r2, [r2, r3]
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	429a      	cmp	r2, r3
    61d0:	d101      	bne.n	61d6 <extint_register_callback+0x56>
		return STATUS_OK;
    61d2:	2300      	movs	r3, #0
    61d4:	e000      	b.n	61d8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    61d6:	231d      	movs	r3, #29
}
    61d8:	0018      	movs	r0, r3
    61da:	46bd      	mov	sp, r7
    61dc:	b002      	add	sp, #8
    61de:	bd80      	pop	{r7, pc}
    61e0:	20000304 	.word	0x20000304

000061e4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    61e4:	b580      	push	{r7, lr}
    61e6:	b084      	sub	sp, #16
    61e8:	af00      	add	r7, sp, #0
    61ea:	0002      	movs	r2, r0
    61ec:	1dfb      	adds	r3, r7, #7
    61ee:	701a      	strb	r2, [r3, #0]
    61f0:	1dbb      	adds	r3, r7, #6
    61f2:	1c0a      	adds	r2, r1, #0
    61f4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    61f6:	1dbb      	adds	r3, r7, #6
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	2b00      	cmp	r3, #0
    61fc:	d10e      	bne.n	621c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    61fe:	1dfb      	adds	r3, r7, #7
    6200:	781b      	ldrb	r3, [r3, #0]
    6202:	0018      	movs	r0, r3
    6204:	4b08      	ldr	r3, [pc, #32]	; (6228 <extint_chan_enable_callback+0x44>)
    6206:	4798      	blx	r3
    6208:	0003      	movs	r3, r0
    620a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    620c:	1dfb      	adds	r3, r7, #7
    620e:	781b      	ldrb	r3, [r3, #0]
    6210:	2201      	movs	r2, #1
    6212:	409a      	lsls	r2, r3
    6214:	68fb      	ldr	r3, [r7, #12]
    6216:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    6218:	2300      	movs	r3, #0
    621a:	e000      	b.n	621e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    621c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    621e:	0018      	movs	r0, r3
    6220:	46bd      	mov	sp, r7
    6222:	b004      	add	sp, #16
    6224:	bd80      	pop	{r7, pc}
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	000060b5 	.word	0x000060b5

0000622c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    622c:	b580      	push	{r7, lr}
    622e:	b084      	sub	sp, #16
    6230:	af00      	add	r7, sp, #0
    6232:	0002      	movs	r2, r0
    6234:	1dfb      	adds	r3, r7, #7
    6236:	701a      	strb	r2, [r3, #0]
    6238:	1dbb      	adds	r3, r7, #6
    623a:	1c0a      	adds	r2, r1, #0
    623c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    623e:	1dbb      	adds	r3, r7, #6
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	2b00      	cmp	r3, #0
    6244:	d10e      	bne.n	6264 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    6246:	1dfb      	adds	r3, r7, #7
    6248:	781b      	ldrb	r3, [r3, #0]
    624a:	0018      	movs	r0, r3
    624c:	4b08      	ldr	r3, [pc, #32]	; (6270 <extint_chan_disable_callback+0x44>)
    624e:	4798      	blx	r3
    6250:	0003      	movs	r3, r0
    6252:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    6254:	1dfb      	adds	r3, r7, #7
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	2201      	movs	r2, #1
    625a:	409a      	lsls	r2, r3
    625c:	68fb      	ldr	r3, [r7, #12]
    625e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    6260:	2300      	movs	r3, #0
    6262:	e000      	b.n	6266 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6264:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    6266:	0018      	movs	r0, r3
    6268:	46bd      	mov	sp, r7
    626a:	b004      	add	sp, #16
    626c:	bd80      	pop	{r7, pc}
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	000060b5 	.word	0x000060b5

00006274 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6274:	b580      	push	{r7, lr}
    6276:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6278:	4b15      	ldr	r3, [pc, #84]	; (62d0 <EIC_Handler+0x5c>)
    627a:	2200      	movs	r2, #0
    627c:	701a      	strb	r2, [r3, #0]
    627e:	e020      	b.n	62c2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    6280:	4b13      	ldr	r3, [pc, #76]	; (62d0 <EIC_Handler+0x5c>)
    6282:	781b      	ldrb	r3, [r3, #0]
    6284:	0018      	movs	r0, r3
    6286:	4b13      	ldr	r3, [pc, #76]	; (62d4 <EIC_Handler+0x60>)
    6288:	4798      	blx	r3
    628a:	1e03      	subs	r3, r0, #0
    628c:	d013      	beq.n	62b6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    628e:	4b10      	ldr	r3, [pc, #64]	; (62d0 <EIC_Handler+0x5c>)
    6290:	781b      	ldrb	r3, [r3, #0]
    6292:	0018      	movs	r0, r3
    6294:	4b10      	ldr	r3, [pc, #64]	; (62d8 <EIC_Handler+0x64>)
    6296:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6298:	4b0d      	ldr	r3, [pc, #52]	; (62d0 <EIC_Handler+0x5c>)
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	001a      	movs	r2, r3
    629e:	4b0f      	ldr	r3, [pc, #60]	; (62dc <EIC_Handler+0x68>)
    62a0:	0092      	lsls	r2, r2, #2
    62a2:	58d3      	ldr	r3, [r2, r3]
    62a4:	2b00      	cmp	r3, #0
    62a6:	d006      	beq.n	62b6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    62a8:	4b09      	ldr	r3, [pc, #36]	; (62d0 <EIC_Handler+0x5c>)
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	001a      	movs	r2, r3
    62ae:	4b0b      	ldr	r3, [pc, #44]	; (62dc <EIC_Handler+0x68>)
    62b0:	0092      	lsls	r2, r2, #2
    62b2:	58d3      	ldr	r3, [r2, r3]
    62b4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    62b6:	4b06      	ldr	r3, [pc, #24]	; (62d0 <EIC_Handler+0x5c>)
    62b8:	781b      	ldrb	r3, [r3, #0]
    62ba:	3301      	adds	r3, #1
    62bc:	b2da      	uxtb	r2, r3
    62be:	4b04      	ldr	r3, [pc, #16]	; (62d0 <EIC_Handler+0x5c>)
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	4b03      	ldr	r3, [pc, #12]	; (62d0 <EIC_Handler+0x5c>)
    62c4:	781b      	ldrb	r3, [r3, #0]
    62c6:	2b0f      	cmp	r3, #15
    62c8:	d9da      	bls.n	6280 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	46bd      	mov	sp, r7
    62ce:	bd80      	pop	{r7, pc}
    62d0:	20000300 	.word	0x20000300
    62d4:	00006101 	.word	0x00006101
    62d8:	00006145 	.word	0x00006145
    62dc:	20000304 	.word	0x20000304

000062e0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
    62e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	2200      	movs	r2, #0
    62ec:	701a      	strb	r2, [r3, #0]
}
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	46bd      	mov	sp, r7
    62f2:	b002      	add	sp, #8
    62f4:	bd80      	pop	{r7, pc}
    62f6:	46c0      	nop			; (mov r8, r8)

000062f8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    62f8:	b580      	push	{r7, lr}
    62fa:	b082      	sub	sp, #8
    62fc:	af00      	add	r7, sp, #0
    62fe:	0002      	movs	r2, r0
    6300:	6039      	str	r1, [r7, #0]
    6302:	1dfb      	adds	r3, r7, #7
    6304:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6306:	1dfb      	adds	r3, r7, #7
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	2b01      	cmp	r3, #1
    630c:	d00a      	beq.n	6324 <system_apb_clock_set_mask+0x2c>
    630e:	2b02      	cmp	r3, #2
    6310:	d00f      	beq.n	6332 <system_apb_clock_set_mask+0x3a>
    6312:	2b00      	cmp	r3, #0
    6314:	d114      	bne.n	6340 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6316:	4b0e      	ldr	r3, [pc, #56]	; (6350 <system_apb_clock_set_mask+0x58>)
    6318:	4a0d      	ldr	r2, [pc, #52]	; (6350 <system_apb_clock_set_mask+0x58>)
    631a:	6991      	ldr	r1, [r2, #24]
    631c:	683a      	ldr	r2, [r7, #0]
    631e:	430a      	orrs	r2, r1
    6320:	619a      	str	r2, [r3, #24]
			break;
    6322:	e00f      	b.n	6344 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6324:	4b0a      	ldr	r3, [pc, #40]	; (6350 <system_apb_clock_set_mask+0x58>)
    6326:	4a0a      	ldr	r2, [pc, #40]	; (6350 <system_apb_clock_set_mask+0x58>)
    6328:	69d1      	ldr	r1, [r2, #28]
    632a:	683a      	ldr	r2, [r7, #0]
    632c:	430a      	orrs	r2, r1
    632e:	61da      	str	r2, [r3, #28]
			break;
    6330:	e008      	b.n	6344 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6332:	4b07      	ldr	r3, [pc, #28]	; (6350 <system_apb_clock_set_mask+0x58>)
    6334:	4a06      	ldr	r2, [pc, #24]	; (6350 <system_apb_clock_set_mask+0x58>)
    6336:	6a11      	ldr	r1, [r2, #32]
    6338:	683a      	ldr	r2, [r7, #0]
    633a:	430a      	orrs	r2, r1
    633c:	621a      	str	r2, [r3, #32]
			break;
    633e:	e001      	b.n	6344 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6340:	2317      	movs	r3, #23
    6342:	e000      	b.n	6346 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6344:	2300      	movs	r3, #0
}
    6346:	0018      	movs	r0, r3
    6348:	46bd      	mov	sp, r7
    634a:	b002      	add	sp, #8
    634c:	bd80      	pop	{r7, pc}
    634e:	46c0      	nop			; (mov r8, r8)
    6350:	40000400 	.word	0x40000400

00006354 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6354:	b580      	push	{r7, lr}
    6356:	b082      	sub	sp, #8
    6358:	af00      	add	r7, sp, #0
    635a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	2280      	movs	r2, #128	; 0x80
    6360:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6362:	687b      	ldr	r3, [r7, #4]
    6364:	2200      	movs	r2, #0
    6366:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	2201      	movs	r2, #1
    636c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	2200      	movs	r2, #0
    6372:	70da      	strb	r2, [r3, #3]
}
    6374:	46c0      	nop			; (mov r8, r8)
    6376:	46bd      	mov	sp, r7
    6378:	b002      	add	sp, #8
    637a:	bd80      	pop	{r7, pc}

0000637c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    637c:	b580      	push	{r7, lr}
    637e:	b082      	sub	sp, #8
    6380:	af00      	add	r7, sp, #0
    6382:	0002      	movs	r2, r0
    6384:	1dfb      	adds	r3, r7, #7
    6386:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6388:	4b06      	ldr	r3, [pc, #24]	; (63a4 <system_interrupt_enable+0x28>)
    638a:	1dfa      	adds	r2, r7, #7
    638c:	7812      	ldrb	r2, [r2, #0]
    638e:	0011      	movs	r1, r2
    6390:	221f      	movs	r2, #31
    6392:	400a      	ands	r2, r1
    6394:	2101      	movs	r1, #1
    6396:	4091      	lsls	r1, r2
    6398:	000a      	movs	r2, r1
    639a:	601a      	str	r2, [r3, #0]
}
    639c:	46c0      	nop			; (mov r8, r8)
    639e:	46bd      	mov	sp, r7
    63a0:	b002      	add	sp, #8
    63a2:	bd80      	pop	{r7, pc}
    63a4:	e000e100 	.word	0xe000e100

000063a8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    63a8:	b580      	push	{r7, lr}
    63aa:	b084      	sub	sp, #16
    63ac:	af00      	add	r7, sp, #0
    63ae:	0002      	movs	r2, r0
    63b0:	1dfb      	adds	r3, r7, #7
    63b2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    63b4:	230f      	movs	r3, #15
    63b6:	18fb      	adds	r3, r7, r3
    63b8:	1dfa      	adds	r2, r7, #7
    63ba:	7812      	ldrb	r2, [r2, #0]
    63bc:	0952      	lsrs	r2, r2, #5
    63be:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    63c0:	230f      	movs	r3, #15
    63c2:	18fb      	adds	r3, r7, r3
    63c4:	781b      	ldrb	r3, [r3, #0]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d10c      	bne.n	63e4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    63ca:	4b09      	ldr	r3, [pc, #36]	; (63f0 <_extint_get_eic_from_channel+0x48>)
    63cc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    63ce:	230f      	movs	r3, #15
    63d0:	18fb      	adds	r3, r7, r3
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	009b      	lsls	r3, r3, #2
    63d6:	2210      	movs	r2, #16
    63d8:	4694      	mov	ip, r2
    63da:	44bc      	add	ip, r7
    63dc:	4463      	add	r3, ip
    63de:	3b08      	subs	r3, #8
    63e0:	681b      	ldr	r3, [r3, #0]
    63e2:	e000      	b.n	63e6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    63e4:	2300      	movs	r3, #0
	}
}
    63e6:	0018      	movs	r0, r3
    63e8:	46bd      	mov	sp, r7
    63ea:	b004      	add	sp, #16
    63ec:	bd80      	pop	{r7, pc}
    63ee:	46c0      	nop			; (mov r8, r8)
    63f0:	40001800 	.word	0x40001800

000063f4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    63f4:	b580      	push	{r7, lr}
    63f6:	b082      	sub	sp, #8
    63f8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    63fa:	4b0f      	ldr	r3, [pc, #60]	; (6438 <extint_is_syncing+0x44>)
    63fc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    63fe:	2300      	movs	r3, #0
    6400:	607b      	str	r3, [r7, #4]
    6402:	e011      	b.n	6428 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	009b      	lsls	r3, r3, #2
    6408:	2208      	movs	r2, #8
    640a:	4694      	mov	ip, r2
    640c:	44bc      	add	ip, r7
    640e:	4463      	add	r3, ip
    6410:	3b08      	subs	r3, #8
    6412:	681b      	ldr	r3, [r3, #0]
    6414:	785b      	ldrb	r3, [r3, #1]
    6416:	b2db      	uxtb	r3, r3
    6418:	b25b      	sxtb	r3, r3
    641a:	2b00      	cmp	r3, #0
    641c:	da01      	bge.n	6422 <extint_is_syncing+0x2e>
			return true;
    641e:	2301      	movs	r3, #1
    6420:	e006      	b.n	6430 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6422:	687b      	ldr	r3, [r7, #4]
    6424:	3301      	adds	r3, #1
    6426:	607b      	str	r3, [r7, #4]
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	2b00      	cmp	r3, #0
    642c:	d0ea      	beq.n	6404 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    642e:	2300      	movs	r3, #0
}
    6430:	0018      	movs	r0, r3
    6432:	46bd      	mov	sp, r7
    6434:	b002      	add	sp, #8
    6436:	bd80      	pop	{r7, pc}
    6438:	40001800 	.word	0x40001800

0000643c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    643c:	b580      	push	{r7, lr}
    643e:	b084      	sub	sp, #16
    6440:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6442:	4b2d      	ldr	r3, [pc, #180]	; (64f8 <_system_extint_init+0xbc>)
    6444:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    6446:	2140      	movs	r1, #64	; 0x40
    6448:	2000      	movs	r0, #0
    644a:	4b2c      	ldr	r3, [pc, #176]	; (64fc <_system_extint_init+0xc0>)
    644c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    644e:	003b      	movs	r3, r7
    6450:	0018      	movs	r0, r3
    6452:	4b2b      	ldr	r3, [pc, #172]	; (6500 <_system_extint_init+0xc4>)
    6454:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    6456:	003b      	movs	r3, r7
    6458:	2200      	movs	r2, #0
    645a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    645c:	003b      	movs	r3, r7
    645e:	0019      	movs	r1, r3
    6460:	2005      	movs	r0, #5
    6462:	4b28      	ldr	r3, [pc, #160]	; (6504 <_system_extint_init+0xc8>)
    6464:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    6466:	2005      	movs	r0, #5
    6468:	4b27      	ldr	r3, [pc, #156]	; (6508 <_system_extint_init+0xcc>)
    646a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    646c:	2300      	movs	r3, #0
    646e:	60fb      	str	r3, [r7, #12]
    6470:	e018      	b.n	64a4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6472:	68fb      	ldr	r3, [r7, #12]
    6474:	009b      	lsls	r3, r3, #2
    6476:	2210      	movs	r2, #16
    6478:	4694      	mov	ip, r2
    647a:	44bc      	add	ip, r7
    647c:	4463      	add	r3, ip
    647e:	3b0c      	subs	r3, #12
    6480:	681a      	ldr	r2, [r3, #0]
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	009b      	lsls	r3, r3, #2
    6486:	2110      	movs	r1, #16
    6488:	468c      	mov	ip, r1
    648a:	44bc      	add	ip, r7
    648c:	4463      	add	r3, ip
    648e:	3b0c      	subs	r3, #12
    6490:	681b      	ldr	r3, [r3, #0]
    6492:	781b      	ldrb	r3, [r3, #0]
    6494:	b2db      	uxtb	r3, r3
    6496:	2101      	movs	r1, #1
    6498:	430b      	orrs	r3, r1
    649a:	b2db      	uxtb	r3, r3
    649c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    649e:	68fb      	ldr	r3, [r7, #12]
    64a0:	3301      	adds	r3, #1
    64a2:	60fb      	str	r3, [r7, #12]
    64a4:	68fb      	ldr	r3, [r7, #12]
    64a6:	2b00      	cmp	r3, #0
    64a8:	d0e3      	beq.n	6472 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    64aa:	46c0      	nop			; (mov r8, r8)
    64ac:	4b17      	ldr	r3, [pc, #92]	; (650c <_system_extint_init+0xd0>)
    64ae:	4798      	blx	r3
    64b0:	1e03      	subs	r3, r0, #0
    64b2:	d1fb      	bne.n	64ac <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    64b4:	230b      	movs	r3, #11
    64b6:	18fb      	adds	r3, r7, r3
    64b8:	2200      	movs	r2, #0
    64ba:	701a      	strb	r2, [r3, #0]
    64bc:	e00d      	b.n	64da <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    64be:	230b      	movs	r3, #11
    64c0:	18fb      	adds	r3, r7, r3
    64c2:	781a      	ldrb	r2, [r3, #0]
    64c4:	4b12      	ldr	r3, [pc, #72]	; (6510 <_system_extint_init+0xd4>)
    64c6:	0092      	lsls	r2, r2, #2
    64c8:	2100      	movs	r1, #0
    64ca:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    64cc:	230b      	movs	r3, #11
    64ce:	18fb      	adds	r3, r7, r3
    64d0:	781a      	ldrb	r2, [r3, #0]
    64d2:	230b      	movs	r3, #11
    64d4:	18fb      	adds	r3, r7, r3
    64d6:	3201      	adds	r2, #1
    64d8:	701a      	strb	r2, [r3, #0]
    64da:	230b      	movs	r3, #11
    64dc:	18fb      	adds	r3, r7, r3
    64de:	781b      	ldrb	r3, [r3, #0]
    64e0:	2b0f      	cmp	r3, #15
    64e2:	d9ec      	bls.n	64be <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    64e4:	2004      	movs	r0, #4
    64e6:	4b0b      	ldr	r3, [pc, #44]	; (6514 <_system_extint_init+0xd8>)
    64e8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    64ea:	4b0b      	ldr	r3, [pc, #44]	; (6518 <_system_extint_init+0xdc>)
    64ec:	4798      	blx	r3
}
    64ee:	46c0      	nop			; (mov r8, r8)
    64f0:	46bd      	mov	sp, r7
    64f2:	b004      	add	sp, #16
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	40001800 	.word	0x40001800
    64fc:	000062f9 	.word	0x000062f9
    6500:	000062e1 	.word	0x000062e1
    6504:	00009105 	.word	0x00009105
    6508:	00009149 	.word	0x00009149
    650c:	000063f5 	.word	0x000063f5
    6510:	20000304 	.word	0x20000304
    6514:	0000637d 	.word	0x0000637d
    6518:	0000651d 	.word	0x0000651d

0000651c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    651c:	b580      	push	{r7, lr}
    651e:	b082      	sub	sp, #8
    6520:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6522:	4b15      	ldr	r3, [pc, #84]	; (6578 <_extint_enable+0x5c>)
    6524:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6526:	2300      	movs	r3, #0
    6528:	607b      	str	r3, [r7, #4]
    652a:	e018      	b.n	655e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	009b      	lsls	r3, r3, #2
    6530:	2208      	movs	r2, #8
    6532:	4694      	mov	ip, r2
    6534:	44bc      	add	ip, r7
    6536:	4463      	add	r3, ip
    6538:	3b08      	subs	r3, #8
    653a:	681a      	ldr	r2, [r3, #0]
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	009b      	lsls	r3, r3, #2
    6540:	2108      	movs	r1, #8
    6542:	468c      	mov	ip, r1
    6544:	44bc      	add	ip, r7
    6546:	4463      	add	r3, ip
    6548:	3b08      	subs	r3, #8
    654a:	681b      	ldr	r3, [r3, #0]
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	b2db      	uxtb	r3, r3
    6550:	2102      	movs	r1, #2
    6552:	430b      	orrs	r3, r1
    6554:	b2db      	uxtb	r3, r3
    6556:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	3301      	adds	r3, #1
    655c:	607b      	str	r3, [r7, #4]
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	2b00      	cmp	r3, #0
    6562:	d0e3      	beq.n	652c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    6564:	46c0      	nop			; (mov r8, r8)
    6566:	4b05      	ldr	r3, [pc, #20]	; (657c <_extint_enable+0x60>)
    6568:	4798      	blx	r3
    656a:	1e03      	subs	r3, r0, #0
    656c:	d1fb      	bne.n	6566 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    656e:	46c0      	nop			; (mov r8, r8)
    6570:	46bd      	mov	sp, r7
    6572:	b002      	add	sp, #8
    6574:	bd80      	pop	{r7, pc}
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	40001800 	.word	0x40001800
    657c:	000063f5 	.word	0x000063f5

00006580 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    6580:	b580      	push	{r7, lr}
    6582:	b082      	sub	sp, #8
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	2200      	movs	r2, #0
    658c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	2200      	movs	r2, #0
    6592:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	2201      	movs	r2, #1
    6598:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    659a:	687b      	ldr	r3, [r7, #4]
    659c:	2201      	movs	r2, #1
    659e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	2200      	movs	r2, #0
    65a4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	2202      	movs	r2, #2
    65aa:	72da      	strb	r2, [r3, #11]
}
    65ac:	46c0      	nop			; (mov r8, r8)
    65ae:	46bd      	mov	sp, r7
    65b0:	b002      	add	sp, #8
    65b2:	bd80      	pop	{r7, pc}

000065b4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    65b4:	b580      	push	{r7, lr}
    65b6:	b086      	sub	sp, #24
    65b8:	af00      	add	r7, sp, #0
    65ba:	0002      	movs	r2, r0
    65bc:	6039      	str	r1, [r7, #0]
    65be:	1dfb      	adds	r3, r7, #7
    65c0:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    65c2:	2308      	movs	r3, #8
    65c4:	18fb      	adds	r3, r7, r3
    65c6:	0018      	movs	r0, r3
    65c8:	4b36      	ldr	r3, [pc, #216]	; (66a4 <extint_chan_set_config+0xf0>)
    65ca:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    65cc:	683b      	ldr	r3, [r7, #0]
    65ce:	685b      	ldr	r3, [r3, #4]
    65d0:	b2da      	uxtb	r2, r3
    65d2:	2308      	movs	r3, #8
    65d4:	18fb      	adds	r3, r7, r3
    65d6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    65d8:	2308      	movs	r3, #8
    65da:	18fb      	adds	r3, r7, r3
    65dc:	2200      	movs	r2, #0
    65de:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    65e0:	683b      	ldr	r3, [r7, #0]
    65e2:	7a1a      	ldrb	r2, [r3, #8]
    65e4:	2308      	movs	r3, #8
    65e6:	18fb      	adds	r3, r7, r3
    65e8:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    65ea:	683b      	ldr	r3, [r7, #0]
    65ec:	681b      	ldr	r3, [r3, #0]
    65ee:	b2db      	uxtb	r3, r3
    65f0:	2208      	movs	r2, #8
    65f2:	18ba      	adds	r2, r7, r2
    65f4:	0011      	movs	r1, r2
    65f6:	0018      	movs	r0, r3
    65f8:	4b2b      	ldr	r3, [pc, #172]	; (66a8 <extint_chan_set_config+0xf4>)
    65fa:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    65fc:	1dfb      	adds	r3, r7, #7
    65fe:	781b      	ldrb	r3, [r3, #0]
    6600:	0018      	movs	r0, r3
    6602:	4b2a      	ldr	r3, [pc, #168]	; (66ac <extint_chan_set_config+0xf8>)
    6604:	4798      	blx	r3
    6606:	0003      	movs	r3, r0
    6608:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    660a:	1dfb      	adds	r3, r7, #7
    660c:	781b      	ldrb	r3, [r3, #0]
    660e:	2207      	movs	r2, #7
    6610:	4013      	ands	r3, r2
    6612:	009b      	lsls	r3, r3, #2
    6614:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6616:	683b      	ldr	r3, [r7, #0]
    6618:	7adb      	ldrb	r3, [r3, #11]
    661a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    661c:	683b      	ldr	r3, [r7, #0]
    661e:	7a9b      	ldrb	r3, [r3, #10]
    6620:	2b00      	cmp	r3, #0
    6622:	d003      	beq.n	662c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    6624:	697b      	ldr	r3, [r7, #20]
    6626:	2208      	movs	r2, #8
    6628:	4313      	orrs	r3, r2
    662a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    662c:	1dfb      	adds	r3, r7, #7
    662e:	781b      	ldrb	r3, [r3, #0]
    6630:	08db      	lsrs	r3, r3, #3
    6632:	b2db      	uxtb	r3, r3
    6634:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    6636:	1dfb      	adds	r3, r7, #7
    6638:	781b      	ldrb	r3, [r3, #0]
    663a:	08db      	lsrs	r3, r3, #3
    663c:	b2db      	uxtb	r3, r3
    663e:	001a      	movs	r2, r3
    6640:	693b      	ldr	r3, [r7, #16]
    6642:	3206      	adds	r2, #6
    6644:	0092      	lsls	r2, r2, #2
    6646:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6648:	210f      	movs	r1, #15
    664a:	68fa      	ldr	r2, [r7, #12]
    664c:	4091      	lsls	r1, r2
    664e:	000a      	movs	r2, r1
    6650:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6652:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    6654:	6979      	ldr	r1, [r7, #20]
    6656:	68fb      	ldr	r3, [r7, #12]
    6658:	4099      	lsls	r1, r3
    665a:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    665c:	431a      	orrs	r2, r3
    665e:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6660:	693b      	ldr	r3, [r7, #16]
    6662:	1d82      	adds	r2, r0, #6
    6664:	0092      	lsls	r2, r2, #2
    6666:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    6668:	683b      	ldr	r3, [r7, #0]
    666a:	7a5b      	ldrb	r3, [r3, #9]
    666c:	2b00      	cmp	r3, #0
    666e:	d00a      	beq.n	6686 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    6670:	693b      	ldr	r3, [r7, #16]
    6672:	695a      	ldr	r2, [r3, #20]
    6674:	1dfb      	adds	r3, r7, #7
    6676:	781b      	ldrb	r3, [r3, #0]
    6678:	2101      	movs	r1, #1
    667a:	4099      	lsls	r1, r3
    667c:	000b      	movs	r3, r1
    667e:	431a      	orrs	r2, r3
    6680:	693b      	ldr	r3, [r7, #16]
    6682:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    6684:	e00a      	b.n	669c <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    6686:	693b      	ldr	r3, [r7, #16]
    6688:	695b      	ldr	r3, [r3, #20]
    668a:	1dfa      	adds	r2, r7, #7
    668c:	7812      	ldrb	r2, [r2, #0]
    668e:	2101      	movs	r1, #1
    6690:	4091      	lsls	r1, r2
    6692:	000a      	movs	r2, r1
    6694:	43d2      	mvns	r2, r2
    6696:	401a      	ands	r2, r3
    6698:	693b      	ldr	r3, [r7, #16]
    669a:	615a      	str	r2, [r3, #20]
	}
}
    669c:	46c0      	nop			; (mov r8, r8)
    669e:	46bd      	mov	sp, r7
    66a0:	b006      	add	sp, #24
    66a2:	bd80      	pop	{r7, pc}
    66a4:	00006355 	.word	0x00006355
    66a8:	000093f1 	.word	0x000093f1
    66ac:	000063a9 	.word	0x000063a9

000066b0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    66b0:	b580      	push	{r7, lr}
    66b2:	b082      	sub	sp, #8
    66b4:	af00      	add	r7, sp, #0
    66b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	2280      	movs	r2, #128	; 0x80
    66bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	2200      	movs	r2, #0
    66c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	2201      	movs	r2, #1
    66c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	2200      	movs	r2, #0
    66ce:	70da      	strb	r2, [r3, #3]
}
    66d0:	46c0      	nop			; (mov r8, r8)
    66d2:	46bd      	mov	sp, r7
    66d4:	b002      	add	sp, #8
    66d6:	bd80      	pop	{r7, pc}

000066d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b084      	sub	sp, #16
    66dc:	af00      	add	r7, sp, #0
    66de:	0002      	movs	r2, r0
    66e0:	6039      	str	r1, [r7, #0]
    66e2:	1dfb      	adds	r3, r7, #7
    66e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    66e6:	230c      	movs	r3, #12
    66e8:	18fb      	adds	r3, r7, r3
    66ea:	0018      	movs	r0, r3
    66ec:	4b10      	ldr	r3, [pc, #64]	; (6730 <port_pin_set_config+0x58>)
    66ee:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    66f0:	230c      	movs	r3, #12
    66f2:	18fb      	adds	r3, r7, r3
    66f4:	2280      	movs	r2, #128	; 0x80
    66f6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    66f8:	683b      	ldr	r3, [r7, #0]
    66fa:	781a      	ldrb	r2, [r3, #0]
    66fc:	230c      	movs	r3, #12
    66fe:	18fb      	adds	r3, r7, r3
    6700:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6702:	683b      	ldr	r3, [r7, #0]
    6704:	785a      	ldrb	r2, [r3, #1]
    6706:	230c      	movs	r3, #12
    6708:	18fb      	adds	r3, r7, r3
    670a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    670c:	683b      	ldr	r3, [r7, #0]
    670e:	789a      	ldrb	r2, [r3, #2]
    6710:	230c      	movs	r3, #12
    6712:	18fb      	adds	r3, r7, r3
    6714:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6716:	230c      	movs	r3, #12
    6718:	18fa      	adds	r2, r7, r3
    671a:	1dfb      	adds	r3, r7, #7
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	0011      	movs	r1, r2
    6720:	0018      	movs	r0, r3
    6722:	4b04      	ldr	r3, [pc, #16]	; (6734 <port_pin_set_config+0x5c>)
    6724:	4798      	blx	r3
}
    6726:	46c0      	nop			; (mov r8, r8)
    6728:	46bd      	mov	sp, r7
    672a:	b004      	add	sp, #16
    672c:	bd80      	pop	{r7, pc}
    672e:	46c0      	nop			; (mov r8, r8)
    6730:	000066b1 	.word	0x000066b1
    6734:	000093f1 	.word	0x000093f1

00006738 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6738:	b580      	push	{r7, lr}
    673a:	b082      	sub	sp, #8
    673c:	af00      	add	r7, sp, #0
    673e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	2200      	movs	r2, #0
    6744:	701a      	strb	r2, [r3, #0]
}
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	46bd      	mov	sp, r7
    674a:	b002      	add	sp, #8
    674c:	bd80      	pop	{r7, pc}
    674e:	46c0      	nop			; (mov r8, r8)

00006750 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6750:	b5f0      	push	{r4, r5, r6, r7, lr}
    6752:	b08d      	sub	sp, #52	; 0x34
    6754:	af00      	add	r7, sp, #0
    6756:	60b8      	str	r0, [r7, #8]
    6758:	60f9      	str	r1, [r7, #12]
    675a:	603a      	str	r2, [r7, #0]
    675c:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    675e:	2300      	movs	r3, #0
    6760:	2400      	movs	r4, #0
    6762:	623b      	str	r3, [r7, #32]
    6764:	627c      	str	r4, [r7, #36]	; 0x24
    6766:	2300      	movs	r3, #0
    6768:	2400      	movs	r4, #0
    676a:	61bb      	str	r3, [r7, #24]
    676c:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    676e:	233f      	movs	r3, #63	; 0x3f
    6770:	62fb      	str	r3, [r7, #44]	; 0x2c
    6772:	e053      	b.n	681c <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    6774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6776:	3b20      	subs	r3, #32
    6778:	2b00      	cmp	r3, #0
    677a:	db04      	blt.n	6786 <long_division+0x36>
    677c:	2201      	movs	r2, #1
    677e:	409a      	lsls	r2, r3
    6780:	0013      	movs	r3, r2
    6782:	617b      	str	r3, [r7, #20]
    6784:	e00b      	b.n	679e <long_division+0x4e>
    6786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6788:	2220      	movs	r2, #32
    678a:	1ad3      	subs	r3, r2, r3
    678c:	2201      	movs	r2, #1
    678e:	40da      	lsrs	r2, r3
    6790:	0013      	movs	r3, r2
    6792:	2100      	movs	r1, #0
    6794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6796:	4091      	lsls	r1, r2
    6798:	000a      	movs	r2, r1
    679a:	4313      	orrs	r3, r2
    679c:	617b      	str	r3, [r7, #20]
    679e:	2201      	movs	r2, #1
    67a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67a2:	409a      	lsls	r2, r3
    67a4:	0013      	movs	r3, r2
    67a6:	613b      	str	r3, [r7, #16]

		r = r << 1;
    67a8:	69bb      	ldr	r3, [r7, #24]
    67aa:	69fc      	ldr	r4, [r7, #28]
    67ac:	18db      	adds	r3, r3, r3
    67ae:	4164      	adcs	r4, r4
    67b0:	61bb      	str	r3, [r7, #24]
    67b2:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    67b4:	68bb      	ldr	r3, [r7, #8]
    67b6:	693a      	ldr	r2, [r7, #16]
    67b8:	401a      	ands	r2, r3
    67ba:	0015      	movs	r5, r2
    67bc:	68fb      	ldr	r3, [r7, #12]
    67be:	697a      	ldr	r2, [r7, #20]
    67c0:	401a      	ands	r2, r3
    67c2:	0016      	movs	r6, r2
    67c4:	002b      	movs	r3, r5
    67c6:	4333      	orrs	r3, r6
    67c8:	d007      	beq.n	67da <long_division+0x8a>
			r |= 0x01;
    67ca:	69bb      	ldr	r3, [r7, #24]
    67cc:	2201      	movs	r2, #1
    67ce:	4313      	orrs	r3, r2
    67d0:	61bb      	str	r3, [r7, #24]
    67d2:	69fb      	ldr	r3, [r7, #28]
    67d4:	2200      	movs	r2, #0
    67d6:	4313      	orrs	r3, r2
    67d8:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    67da:	687a      	ldr	r2, [r7, #4]
    67dc:	69fb      	ldr	r3, [r7, #28]
    67de:	429a      	cmp	r2, r3
    67e0:	d819      	bhi.n	6816 <long_division+0xc6>
    67e2:	687a      	ldr	r2, [r7, #4]
    67e4:	69fb      	ldr	r3, [r7, #28]
    67e6:	429a      	cmp	r2, r3
    67e8:	d103      	bne.n	67f2 <long_division+0xa2>
    67ea:	683a      	ldr	r2, [r7, #0]
    67ec:	69bb      	ldr	r3, [r7, #24]
    67ee:	429a      	cmp	r2, r3
    67f0:	d811      	bhi.n	6816 <long_division+0xc6>
			r = r - d;
    67f2:	69b9      	ldr	r1, [r7, #24]
    67f4:	69fa      	ldr	r2, [r7, #28]
    67f6:	683b      	ldr	r3, [r7, #0]
    67f8:	687c      	ldr	r4, [r7, #4]
    67fa:	1ac9      	subs	r1, r1, r3
    67fc:	41a2      	sbcs	r2, r4
    67fe:	000b      	movs	r3, r1
    6800:	0014      	movs	r4, r2
    6802:	61bb      	str	r3, [r7, #24]
    6804:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    6806:	6a3a      	ldr	r2, [r7, #32]
    6808:	693b      	ldr	r3, [r7, #16]
    680a:	4313      	orrs	r3, r2
    680c:	623b      	str	r3, [r7, #32]
    680e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6810:	697b      	ldr	r3, [r7, #20]
    6812:	4313      	orrs	r3, r2
    6814:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    6816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6818:	3b01      	subs	r3, #1
    681a:	62fb      	str	r3, [r7, #44]	; 0x2c
    681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    681e:	2b00      	cmp	r3, #0
    6820:	daa8      	bge.n	6774 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    6822:	6a3b      	ldr	r3, [r7, #32]
    6824:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6826:	0018      	movs	r0, r3
    6828:	0021      	movs	r1, r4
    682a:	46bd      	mov	sp, r7
    682c:	b00d      	add	sp, #52	; 0x34
    682e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006830 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6830:	b580      	push	{r7, lr}
    6832:	b086      	sub	sp, #24
    6834:	af00      	add	r7, sp, #0
    6836:	60f8      	str	r0, [r7, #12]
    6838:	60b9      	str	r1, [r7, #8]
    683a:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    683c:	2316      	movs	r3, #22
    683e:	18fb      	adds	r3, r7, r3
    6840:	2200      	movs	r2, #0
    6842:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6844:	68bb      	ldr	r3, [r7, #8]
    6846:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6848:	68bb      	ldr	r3, [r7, #8]
    684a:	085a      	lsrs	r2, r3, #1
    684c:	68fb      	ldr	r3, [r7, #12]
    684e:	429a      	cmp	r2, r3
    6850:	d201      	bcs.n	6856 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6852:	2340      	movs	r3, #64	; 0x40
    6854:	e026      	b.n	68a4 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    6856:	68bb      	ldr	r3, [r7, #8]
    6858:	085b      	lsrs	r3, r3, #1
    685a:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    685c:	e00a      	b.n	6874 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    685e:	693a      	ldr	r2, [r7, #16]
    6860:	68fb      	ldr	r3, [r7, #12]
    6862:	1ad3      	subs	r3, r2, r3
    6864:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    6866:	2316      	movs	r3, #22
    6868:	18fb      	adds	r3, r7, r3
    686a:	881a      	ldrh	r2, [r3, #0]
    686c:	2316      	movs	r3, #22
    686e:	18fb      	adds	r3, r7, r3
    6870:	3201      	adds	r2, #1
    6872:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    6874:	693a      	ldr	r2, [r7, #16]
    6876:	68fb      	ldr	r3, [r7, #12]
    6878:	429a      	cmp	r2, r3
    687a:	d2f0      	bcs.n	685e <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    687c:	2316      	movs	r3, #22
    687e:	18fb      	adds	r3, r7, r3
    6880:	2216      	movs	r2, #22
    6882:	18ba      	adds	r2, r7, r2
    6884:	8812      	ldrh	r2, [r2, #0]
    6886:	3a01      	subs	r2, #1
    6888:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    688a:	2316      	movs	r3, #22
    688c:	18fb      	adds	r3, r7, r3
    688e:	881b      	ldrh	r3, [r3, #0]
    6890:	2bff      	cmp	r3, #255	; 0xff
    6892:	d901      	bls.n	6898 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6894:	2340      	movs	r3, #64	; 0x40
    6896:	e005      	b.n	68a4 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    6898:	687b      	ldr	r3, [r7, #4]
    689a:	2216      	movs	r2, #22
    689c:	18ba      	adds	r2, r7, r2
    689e:	8812      	ldrh	r2, [r2, #0]
    68a0:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    68a2:	2300      	movs	r3, #0
	}
}
    68a4:	0018      	movs	r0, r3
    68a6:	46bd      	mov	sp, r7
    68a8:	b006      	add	sp, #24
    68aa:	bd80      	pop	{r7, pc}

000068ac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    68ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    68ae:	b09d      	sub	sp, #116	; 0x74
    68b0:	af00      	add	r7, sp, #0
    68b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    68b4:	63b9      	str	r1, [r7, #56]	; 0x38
    68b6:	637a      	str	r2, [r7, #52]	; 0x34
    68b8:	2233      	movs	r2, #51	; 0x33
    68ba:	18ba      	adds	r2, r7, r2
    68bc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    68be:	2300      	movs	r3, #0
    68c0:	2400      	movs	r4, #0
    68c2:	65bb      	str	r3, [r7, #88]	; 0x58
    68c4:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    68c6:	2300      	movs	r3, #0
    68c8:	2400      	movs	r4, #0
    68ca:	653b      	str	r3, [r7, #80]	; 0x50
    68cc:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    68ce:	2300      	movs	r3, #0
    68d0:	2400      	movs	r4, #0
    68d2:	66bb      	str	r3, [r7, #104]	; 0x68
    68d4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    68d6:	2300      	movs	r3, #0
    68d8:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    68da:	2358      	movs	r3, #88	; 0x58
    68dc:	2230      	movs	r2, #48	; 0x30
    68de:	4694      	mov	ip, r2
    68e0:	44bc      	add	ip, r7
    68e2:	4463      	add	r3, ip
    68e4:	781a      	ldrb	r2, [r3, #0]
    68e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68e8:	435a      	muls	r2, r3
    68ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    68ec:	429a      	cmp	r2, r3
    68ee:	d901      	bls.n	68f4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    68f0:	2340      	movs	r3, #64	; 0x40
    68f2:	e0c6      	b.n	6a82 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    68f4:	2333      	movs	r3, #51	; 0x33
    68f6:	18fb      	adds	r3, r7, r3
    68f8:	781b      	ldrb	r3, [r3, #0]
    68fa:	2b00      	cmp	r3, #0
    68fc:	d13d      	bne.n	697a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    68fe:	2358      	movs	r3, #88	; 0x58
    6900:	2230      	movs	r2, #48	; 0x30
    6902:	4694      	mov	ip, r2
    6904:	44bc      	add	ip, r7
    6906:	4463      	add	r3, ip
    6908:	781b      	ldrb	r3, [r3, #0]
    690a:	b2db      	uxtb	r3, r3
    690c:	613b      	str	r3, [r7, #16]
    690e:	2300      	movs	r3, #0
    6910:	617b      	str	r3, [r7, #20]
    6912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6914:	60bb      	str	r3, [r7, #8]
    6916:	2300      	movs	r3, #0
    6918:	60fb      	str	r3, [r7, #12]
    691a:	4c5c      	ldr	r4, [pc, #368]	; (6a8c <_sercom_get_async_baud_val+0x1e0>)
    691c:	68ba      	ldr	r2, [r7, #8]
    691e:	68fb      	ldr	r3, [r7, #12]
    6920:	6938      	ldr	r0, [r7, #16]
    6922:	6979      	ldr	r1, [r7, #20]
    6924:	47a0      	blx	r4
    6926:	0003      	movs	r3, r0
    6928:	000c      	movs	r4, r1
    692a:	001b      	movs	r3, r3
    692c:	64fb      	str	r3, [r7, #76]	; 0x4c
    692e:	2300      	movs	r3, #0
    6930:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    6932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6934:	603b      	str	r3, [r7, #0]
    6936:	2300      	movs	r3, #0
    6938:	607b      	str	r3, [r7, #4]
    693a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    693c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    693e:	683a      	ldr	r2, [r7, #0]
    6940:	687b      	ldr	r3, [r7, #4]
    6942:	4c53      	ldr	r4, [pc, #332]	; (6a90 <_sercom_get_async_baud_val+0x1e4>)
    6944:	47a0      	blx	r4
    6946:	0003      	movs	r3, r0
    6948:	000c      	movs	r4, r1
    694a:	65bb      	str	r3, [r7, #88]	; 0x58
    694c:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    694e:	2100      	movs	r1, #0
    6950:	2201      	movs	r2, #1
    6952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6954:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6956:	1ac9      	subs	r1, r1, r3
    6958:	41a2      	sbcs	r2, r4
    695a:	000b      	movs	r3, r1
    695c:	0014      	movs	r4, r2
    695e:	653b      	str	r3, [r7, #80]	; 0x50
    6960:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    6962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6964:	0c1b      	lsrs	r3, r3, #16
    6966:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6968:	0416      	lsls	r6, r2, #16
    696a:	431e      	orrs	r6, r3
    696c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    696e:	041d      	lsls	r5, r3, #16
    6970:	0033      	movs	r3, r6
    6972:	66bb      	str	r3, [r7, #104]	; 0x68
    6974:	2300      	movs	r3, #0
    6976:	66fb      	str	r3, [r7, #108]	; 0x6c
    6978:	e07d      	b.n	6a76 <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    697a:	2333      	movs	r3, #51	; 0x33
    697c:	18fb      	adds	r3, r7, r3
    697e:	781b      	ldrb	r3, [r3, #0]
    6980:	2b01      	cmp	r3, #1
    6982:	d000      	beq.n	6986 <_sercom_get_async_baud_val+0xda>
    6984:	e077      	b.n	6a76 <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6986:	2337      	movs	r3, #55	; 0x37
    6988:	2230      	movs	r2, #48	; 0x30
    698a:	4694      	mov	ip, r2
    698c:	44bc      	add	ip, r7
    698e:	4463      	add	r3, ip
    6990:	2200      	movs	r2, #0
    6992:	701a      	strb	r2, [r3, #0]
    6994:	e04e      	b.n	6a34 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    6996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6998:	62bb      	str	r3, [r7, #40]	; 0x28
    699a:	2300      	movs	r3, #0
    699c:	62fb      	str	r3, [r7, #44]	; 0x2c
    699e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    69a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    69a2:	0003      	movs	r3, r0
    69a4:	0f5b      	lsrs	r3, r3, #29
    69a6:	000a      	movs	r2, r1
    69a8:	00d2      	lsls	r2, r2, #3
    69aa:	4313      	orrs	r3, r2
    69ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    69ae:	0003      	movs	r3, r0
    69b0:	00db      	lsls	r3, r3, #3
    69b2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    69b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    69b6:	623b      	str	r3, [r7, #32]
    69b8:	2300      	movs	r3, #0
    69ba:	627b      	str	r3, [r7, #36]	; 0x24
    69bc:	2358      	movs	r3, #88	; 0x58
    69be:	2230      	movs	r2, #48	; 0x30
    69c0:	4694      	mov	ip, r2
    69c2:	44bc      	add	ip, r7
    69c4:	4463      	add	r3, ip
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	b2db      	uxtb	r3, r3
    69ca:	61bb      	str	r3, [r7, #24]
    69cc:	2300      	movs	r3, #0
    69ce:	61fb      	str	r3, [r7, #28]
    69d0:	4c2e      	ldr	r4, [pc, #184]	; (6a8c <_sercom_get_async_baud_val+0x1e0>)
    69d2:	69ba      	ldr	r2, [r7, #24]
    69d4:	69fb      	ldr	r3, [r7, #28]
    69d6:	6a38      	ldr	r0, [r7, #32]
    69d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    69da:	47a0      	blx	r4
    69dc:	0003      	movs	r3, r0
    69de:	000c      	movs	r4, r1
    69e0:	643b      	str	r3, [r7, #64]	; 0x40
    69e2:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    69e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69e6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    69e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    69ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    69ec:	001a      	movs	r2, r3
    69ee:	0023      	movs	r3, r4
    69f0:	4c27      	ldr	r4, [pc, #156]	; (6a90 <_sercom_get_async_baud_val+0x1e4>)
    69f2:	47a0      	blx	r4
    69f4:	0003      	movs	r3, r0
    69f6:	000c      	movs	r4, r1
    69f8:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    69fa:	2337      	movs	r3, #55	; 0x37
    69fc:	2230      	movs	r2, #48	; 0x30
    69fe:	4694      	mov	ip, r2
    6a00:	44bc      	add	ip, r7
    6a02:	4463      	add	r3, ip
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6a08:	1ad3      	subs	r3, r2, r3
    6a0a:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    6a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6a0e:	08db      	lsrs	r3, r3, #3
    6a10:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    6a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6a14:	4a1f      	ldr	r2, [pc, #124]	; (6a94 <_sercom_get_async_baud_val+0x1e8>)
    6a16:	4293      	cmp	r3, r2
    6a18:	d915      	bls.n	6a46 <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6a1a:	2337      	movs	r3, #55	; 0x37
    6a1c:	2230      	movs	r2, #48	; 0x30
    6a1e:	4694      	mov	ip, r2
    6a20:	44bc      	add	ip, r7
    6a22:	4463      	add	r3, ip
    6a24:	781a      	ldrb	r2, [r3, #0]
    6a26:	2337      	movs	r3, #55	; 0x37
    6a28:	2130      	movs	r1, #48	; 0x30
    6a2a:	468c      	mov	ip, r1
    6a2c:	44bc      	add	ip, r7
    6a2e:	4463      	add	r3, ip
    6a30:	3201      	adds	r2, #1
    6a32:	701a      	strb	r2, [r3, #0]
    6a34:	2337      	movs	r3, #55	; 0x37
    6a36:	2230      	movs	r2, #48	; 0x30
    6a38:	4694      	mov	ip, r2
    6a3a:	44bc      	add	ip, r7
    6a3c:	4463      	add	r3, ip
    6a3e:	781b      	ldrb	r3, [r3, #0]
    6a40:	2b07      	cmp	r3, #7
    6a42:	d9a8      	bls.n	6996 <_sercom_get_async_baud_val+0xea>
    6a44:	e000      	b.n	6a48 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    6a46:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    6a48:	2337      	movs	r3, #55	; 0x37
    6a4a:	2230      	movs	r2, #48	; 0x30
    6a4c:	4694      	mov	ip, r2
    6a4e:	44bc      	add	ip, r7
    6a50:	4463      	add	r3, ip
    6a52:	781b      	ldrb	r3, [r3, #0]
    6a54:	2b08      	cmp	r3, #8
    6a56:	d101      	bne.n	6a5c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6a58:	2340      	movs	r3, #64	; 0x40
    6a5a:	e012      	b.n	6a82 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    6a5c:	2337      	movs	r3, #55	; 0x37
    6a5e:	2230      	movs	r2, #48	; 0x30
    6a60:	4694      	mov	ip, r2
    6a62:	44bc      	add	ip, r7
    6a64:	4463      	add	r3, ip
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	035b      	lsls	r3, r3, #13
    6a6a:	001a      	movs	r2, r3
    6a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6a6e:	4313      	orrs	r3, r2
    6a70:	66bb      	str	r3, [r7, #104]	; 0x68
    6a72:	2300      	movs	r3, #0
    6a74:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    6a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6a78:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6a7a:	b29a      	uxth	r2, r3
    6a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6a7e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    6a80:	2300      	movs	r3, #0
}
    6a82:	0018      	movs	r0, r3
    6a84:	46bd      	mov	sp, r7
    6a86:	b01d      	add	sp, #116	; 0x74
    6a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a8a:	46c0      	nop			; (mov r8, r8)
    6a8c:	0000afb9 	.word	0x0000afb9
    6a90:	00006751 	.word	0x00006751
    6a94:	00001fff 	.word	0x00001fff

00006a98 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b084      	sub	sp, #16
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	0002      	movs	r2, r0
    6aa0:	1dfb      	adds	r3, r7, #7
    6aa2:	701a      	strb	r2, [r3, #0]
    6aa4:	1dbb      	adds	r3, r7, #6
    6aa6:	1c0a      	adds	r2, r1, #0
    6aa8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6aaa:	4b1a      	ldr	r3, [pc, #104]	; (6b14 <sercom_set_gclk_generator+0x7c>)
    6aac:	781b      	ldrb	r3, [r3, #0]
    6aae:	2201      	movs	r2, #1
    6ab0:	4053      	eors	r3, r2
    6ab2:	b2db      	uxtb	r3, r3
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d103      	bne.n	6ac0 <sercom_set_gclk_generator+0x28>
    6ab8:	1dbb      	adds	r3, r7, #6
    6aba:	781b      	ldrb	r3, [r3, #0]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d01b      	beq.n	6af8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6ac0:	230c      	movs	r3, #12
    6ac2:	18fb      	adds	r3, r7, r3
    6ac4:	0018      	movs	r0, r3
    6ac6:	4b14      	ldr	r3, [pc, #80]	; (6b18 <sercom_set_gclk_generator+0x80>)
    6ac8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    6aca:	230c      	movs	r3, #12
    6acc:	18fb      	adds	r3, r7, r3
    6ace:	1dfa      	adds	r2, r7, #7
    6ad0:	7812      	ldrb	r2, [r2, #0]
    6ad2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6ad4:	230c      	movs	r3, #12
    6ad6:	18fb      	adds	r3, r7, r3
    6ad8:	0019      	movs	r1, r3
    6ada:	2013      	movs	r0, #19
    6adc:	4b0f      	ldr	r3, [pc, #60]	; (6b1c <sercom_set_gclk_generator+0x84>)
    6ade:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6ae0:	2013      	movs	r0, #19
    6ae2:	4b0f      	ldr	r3, [pc, #60]	; (6b20 <sercom_set_gclk_generator+0x88>)
    6ae4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    6ae6:	4b0b      	ldr	r3, [pc, #44]	; (6b14 <sercom_set_gclk_generator+0x7c>)
    6ae8:	1dfa      	adds	r2, r7, #7
    6aea:	7812      	ldrb	r2, [r2, #0]
    6aec:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6aee:	4b09      	ldr	r3, [pc, #36]	; (6b14 <sercom_set_gclk_generator+0x7c>)
    6af0:	2201      	movs	r2, #1
    6af2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6af4:	2300      	movs	r3, #0
    6af6:	e008      	b.n	6b0a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6af8:	4b06      	ldr	r3, [pc, #24]	; (6b14 <sercom_set_gclk_generator+0x7c>)
    6afa:	785b      	ldrb	r3, [r3, #1]
    6afc:	1dfa      	adds	r2, r7, #7
    6afe:	7812      	ldrb	r2, [r2, #0]
    6b00:	429a      	cmp	r2, r3
    6b02:	d101      	bne.n	6b08 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    6b04:	2300      	movs	r3, #0
    6b06:	e000      	b.n	6b0a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6b08:	231d      	movs	r3, #29
}
    6b0a:	0018      	movs	r0, r3
    6b0c:	46bd      	mov	sp, r7
    6b0e:	b004      	add	sp, #16
    6b10:	bd80      	pop	{r7, pc}
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	200000d8 	.word	0x200000d8
    6b18:	00006739 	.word	0x00006739
    6b1c:	00009105 	.word	0x00009105
    6b20:	00009149 	.word	0x00009149

00006b24 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6b24:	b580      	push	{r7, lr}
    6b26:	b082      	sub	sp, #8
    6b28:	af00      	add	r7, sp, #0
    6b2a:	6078      	str	r0, [r7, #4]
    6b2c:	000a      	movs	r2, r1
    6b2e:	1cfb      	adds	r3, r7, #3
    6b30:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	4a4d      	ldr	r2, [pc, #308]	; (6c6c <_sercom_get_default_pad+0x148>)
    6b36:	4293      	cmp	r3, r2
    6b38:	d03f      	beq.n	6bba <_sercom_get_default_pad+0x96>
    6b3a:	4a4c      	ldr	r2, [pc, #304]	; (6c6c <_sercom_get_default_pad+0x148>)
    6b3c:	4293      	cmp	r3, r2
    6b3e:	d806      	bhi.n	6b4e <_sercom_get_default_pad+0x2a>
    6b40:	4a4b      	ldr	r2, [pc, #300]	; (6c70 <_sercom_get_default_pad+0x14c>)
    6b42:	4293      	cmp	r3, r2
    6b44:	d00f      	beq.n	6b66 <_sercom_get_default_pad+0x42>
    6b46:	4a4b      	ldr	r2, [pc, #300]	; (6c74 <_sercom_get_default_pad+0x150>)
    6b48:	4293      	cmp	r3, r2
    6b4a:	d021      	beq.n	6b90 <_sercom_get_default_pad+0x6c>
    6b4c:	e089      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6b4e:	4a4a      	ldr	r2, [pc, #296]	; (6c78 <_sercom_get_default_pad+0x154>)
    6b50:	4293      	cmp	r3, r2
    6b52:	d100      	bne.n	6b56 <_sercom_get_default_pad+0x32>
    6b54:	e05b      	b.n	6c0e <_sercom_get_default_pad+0xea>
    6b56:	4a49      	ldr	r2, [pc, #292]	; (6c7c <_sercom_get_default_pad+0x158>)
    6b58:	4293      	cmp	r3, r2
    6b5a:	d100      	bne.n	6b5e <_sercom_get_default_pad+0x3a>
    6b5c:	e06c      	b.n	6c38 <_sercom_get_default_pad+0x114>
    6b5e:	4a48      	ldr	r2, [pc, #288]	; (6c80 <_sercom_get_default_pad+0x15c>)
    6b60:	4293      	cmp	r3, r2
    6b62:	d03f      	beq.n	6be4 <_sercom_get_default_pad+0xc0>
    6b64:	e07d      	b.n	6c62 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6b66:	1cfb      	adds	r3, r7, #3
    6b68:	781b      	ldrb	r3, [r3, #0]
    6b6a:	2b01      	cmp	r3, #1
    6b6c:	d00a      	beq.n	6b84 <_sercom_get_default_pad+0x60>
    6b6e:	dc02      	bgt.n	6b76 <_sercom_get_default_pad+0x52>
    6b70:	2b00      	cmp	r3, #0
    6b72:	d005      	beq.n	6b80 <_sercom_get_default_pad+0x5c>
    6b74:	e075      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6b76:	2b02      	cmp	r3, #2
    6b78:	d006      	beq.n	6b88 <_sercom_get_default_pad+0x64>
    6b7a:	2b03      	cmp	r3, #3
    6b7c:	d006      	beq.n	6b8c <_sercom_get_default_pad+0x68>
    6b7e:	e070      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6b80:	4b40      	ldr	r3, [pc, #256]	; (6c84 <_sercom_get_default_pad+0x160>)
    6b82:	e06f      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6b84:	4b40      	ldr	r3, [pc, #256]	; (6c88 <_sercom_get_default_pad+0x164>)
    6b86:	e06d      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6b88:	4b40      	ldr	r3, [pc, #256]	; (6c8c <_sercom_get_default_pad+0x168>)
    6b8a:	e06b      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6b8c:	4b40      	ldr	r3, [pc, #256]	; (6c90 <_sercom_get_default_pad+0x16c>)
    6b8e:	e069      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6b90:	1cfb      	adds	r3, r7, #3
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	2b01      	cmp	r3, #1
    6b96:	d00a      	beq.n	6bae <_sercom_get_default_pad+0x8a>
    6b98:	dc02      	bgt.n	6ba0 <_sercom_get_default_pad+0x7c>
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d005      	beq.n	6baa <_sercom_get_default_pad+0x86>
    6b9e:	e060      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6ba0:	2b02      	cmp	r3, #2
    6ba2:	d006      	beq.n	6bb2 <_sercom_get_default_pad+0x8e>
    6ba4:	2b03      	cmp	r3, #3
    6ba6:	d006      	beq.n	6bb6 <_sercom_get_default_pad+0x92>
    6ba8:	e05b      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6baa:	2303      	movs	r3, #3
    6bac:	e05a      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6bae:	4b39      	ldr	r3, [pc, #228]	; (6c94 <_sercom_get_default_pad+0x170>)
    6bb0:	e058      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6bb2:	4b39      	ldr	r3, [pc, #228]	; (6c98 <_sercom_get_default_pad+0x174>)
    6bb4:	e056      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6bb6:	4b39      	ldr	r3, [pc, #228]	; (6c9c <_sercom_get_default_pad+0x178>)
    6bb8:	e054      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6bba:	1cfb      	adds	r3, r7, #3
    6bbc:	781b      	ldrb	r3, [r3, #0]
    6bbe:	2b01      	cmp	r3, #1
    6bc0:	d00a      	beq.n	6bd8 <_sercom_get_default_pad+0xb4>
    6bc2:	dc02      	bgt.n	6bca <_sercom_get_default_pad+0xa6>
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	d005      	beq.n	6bd4 <_sercom_get_default_pad+0xb0>
    6bc8:	e04b      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6bca:	2b02      	cmp	r3, #2
    6bcc:	d006      	beq.n	6bdc <_sercom_get_default_pad+0xb8>
    6bce:	2b03      	cmp	r3, #3
    6bd0:	d006      	beq.n	6be0 <_sercom_get_default_pad+0xbc>
    6bd2:	e046      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6bd4:	4b32      	ldr	r3, [pc, #200]	; (6ca0 <_sercom_get_default_pad+0x17c>)
    6bd6:	e045      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6bd8:	4b32      	ldr	r3, [pc, #200]	; (6ca4 <_sercom_get_default_pad+0x180>)
    6bda:	e043      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6bdc:	4b32      	ldr	r3, [pc, #200]	; (6ca8 <_sercom_get_default_pad+0x184>)
    6bde:	e041      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6be0:	4b32      	ldr	r3, [pc, #200]	; (6cac <_sercom_get_default_pad+0x188>)
    6be2:	e03f      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6be4:	1cfb      	adds	r3, r7, #3
    6be6:	781b      	ldrb	r3, [r3, #0]
    6be8:	2b01      	cmp	r3, #1
    6bea:	d00a      	beq.n	6c02 <_sercom_get_default_pad+0xde>
    6bec:	dc02      	bgt.n	6bf4 <_sercom_get_default_pad+0xd0>
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d005      	beq.n	6bfe <_sercom_get_default_pad+0xda>
    6bf2:	e036      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6bf4:	2b02      	cmp	r3, #2
    6bf6:	d006      	beq.n	6c06 <_sercom_get_default_pad+0xe2>
    6bf8:	2b03      	cmp	r3, #3
    6bfa:	d006      	beq.n	6c0a <_sercom_get_default_pad+0xe6>
    6bfc:	e031      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6bfe:	4b2c      	ldr	r3, [pc, #176]	; (6cb0 <_sercom_get_default_pad+0x18c>)
    6c00:	e030      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c02:	4b2c      	ldr	r3, [pc, #176]	; (6cb4 <_sercom_get_default_pad+0x190>)
    6c04:	e02e      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c06:	4b2c      	ldr	r3, [pc, #176]	; (6cb8 <_sercom_get_default_pad+0x194>)
    6c08:	e02c      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c0a:	4b2c      	ldr	r3, [pc, #176]	; (6cbc <_sercom_get_default_pad+0x198>)
    6c0c:	e02a      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c0e:	1cfb      	adds	r3, r7, #3
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	2b01      	cmp	r3, #1
    6c14:	d00a      	beq.n	6c2c <_sercom_get_default_pad+0x108>
    6c16:	dc02      	bgt.n	6c1e <_sercom_get_default_pad+0xfa>
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d005      	beq.n	6c28 <_sercom_get_default_pad+0x104>
    6c1c:	e021      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6c1e:	2b02      	cmp	r3, #2
    6c20:	d006      	beq.n	6c30 <_sercom_get_default_pad+0x10c>
    6c22:	2b03      	cmp	r3, #3
    6c24:	d006      	beq.n	6c34 <_sercom_get_default_pad+0x110>
    6c26:	e01c      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6c28:	4b25      	ldr	r3, [pc, #148]	; (6cc0 <_sercom_get_default_pad+0x19c>)
    6c2a:	e01b      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c2c:	4b25      	ldr	r3, [pc, #148]	; (6cc4 <_sercom_get_default_pad+0x1a0>)
    6c2e:	e019      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c30:	4b25      	ldr	r3, [pc, #148]	; (6cc8 <_sercom_get_default_pad+0x1a4>)
    6c32:	e017      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c34:	4b25      	ldr	r3, [pc, #148]	; (6ccc <_sercom_get_default_pad+0x1a8>)
    6c36:	e015      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c38:	1cfb      	adds	r3, r7, #3
    6c3a:	781b      	ldrb	r3, [r3, #0]
    6c3c:	2b01      	cmp	r3, #1
    6c3e:	d00a      	beq.n	6c56 <_sercom_get_default_pad+0x132>
    6c40:	dc02      	bgt.n	6c48 <_sercom_get_default_pad+0x124>
    6c42:	2b00      	cmp	r3, #0
    6c44:	d005      	beq.n	6c52 <_sercom_get_default_pad+0x12e>
    6c46:	e00c      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6c48:	2b02      	cmp	r3, #2
    6c4a:	d006      	beq.n	6c5a <_sercom_get_default_pad+0x136>
    6c4c:	2b03      	cmp	r3, #3
    6c4e:	d006      	beq.n	6c5e <_sercom_get_default_pad+0x13a>
    6c50:	e007      	b.n	6c62 <_sercom_get_default_pad+0x13e>
    6c52:	4b1f      	ldr	r3, [pc, #124]	; (6cd0 <_sercom_get_default_pad+0x1ac>)
    6c54:	e006      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c56:	4b1f      	ldr	r3, [pc, #124]	; (6cd4 <_sercom_get_default_pad+0x1b0>)
    6c58:	e004      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c5a:	4b1f      	ldr	r3, [pc, #124]	; (6cd8 <_sercom_get_default_pad+0x1b4>)
    6c5c:	e002      	b.n	6c64 <_sercom_get_default_pad+0x140>
    6c5e:	4b1f      	ldr	r3, [pc, #124]	; (6cdc <_sercom_get_default_pad+0x1b8>)
    6c60:	e000      	b.n	6c64 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6c62:	2300      	movs	r3, #0
}
    6c64:	0018      	movs	r0, r3
    6c66:	46bd      	mov	sp, r7
    6c68:	b002      	add	sp, #8
    6c6a:	bd80      	pop	{r7, pc}
    6c6c:	42001000 	.word	0x42001000
    6c70:	42000800 	.word	0x42000800
    6c74:	42000c00 	.word	0x42000c00
    6c78:	42001800 	.word	0x42001800
    6c7c:	42001c00 	.word	0x42001c00
    6c80:	42001400 	.word	0x42001400
    6c84:	00040003 	.word	0x00040003
    6c88:	00050003 	.word	0x00050003
    6c8c:	00060003 	.word	0x00060003
    6c90:	00070003 	.word	0x00070003
    6c94:	00010003 	.word	0x00010003
    6c98:	001e0003 	.word	0x001e0003
    6c9c:	001f0003 	.word	0x001f0003
    6ca0:	00080003 	.word	0x00080003
    6ca4:	00090003 	.word	0x00090003
    6ca8:	000a0003 	.word	0x000a0003
    6cac:	000b0003 	.word	0x000b0003
    6cb0:	00100003 	.word	0x00100003
    6cb4:	00110003 	.word	0x00110003
    6cb8:	00120003 	.word	0x00120003
    6cbc:	00130003 	.word	0x00130003
    6cc0:	000c0003 	.word	0x000c0003
    6cc4:	000d0003 	.word	0x000d0003
    6cc8:	000e0003 	.word	0x000e0003
    6ccc:	000f0003 	.word	0x000f0003
    6cd0:	00160003 	.word	0x00160003
    6cd4:	00170003 	.word	0x00170003
    6cd8:	00180003 	.word	0x00180003
    6cdc:	00190003 	.word	0x00190003

00006ce0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6ce0:	b590      	push	{r4, r7, lr}
    6ce2:	b08b      	sub	sp, #44	; 0x2c
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6ce8:	230c      	movs	r3, #12
    6cea:	18fb      	adds	r3, r7, r3
    6cec:	4a0f      	ldr	r2, [pc, #60]	; (6d2c <_sercom_get_sercom_inst_index+0x4c>)
    6cee:	ca13      	ldmia	r2!, {r0, r1, r4}
    6cf0:	c313      	stmia	r3!, {r0, r1, r4}
    6cf2:	ca13      	ldmia	r2!, {r0, r1, r4}
    6cf4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6cf6:	2300      	movs	r3, #0
    6cf8:	627b      	str	r3, [r7, #36]	; 0x24
    6cfa:	e00e      	b.n	6d1a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6cfc:	230c      	movs	r3, #12
    6cfe:	18fb      	adds	r3, r7, r3
    6d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6d02:	0092      	lsls	r2, r2, #2
    6d04:	58d3      	ldr	r3, [r2, r3]
    6d06:	1e1a      	subs	r2, r3, #0
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	429a      	cmp	r2, r3
    6d0c:	d102      	bne.n	6d14 <_sercom_get_sercom_inst_index+0x34>
			return i;
    6d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d10:	b2db      	uxtb	r3, r3
    6d12:	e006      	b.n	6d22 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d16:	3301      	adds	r3, #1
    6d18:	627b      	str	r3, [r7, #36]	; 0x24
    6d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d1c:	2b05      	cmp	r3, #5
    6d1e:	d9ed      	bls.n	6cfc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6d20:	2300      	movs	r3, #0
}
    6d22:	0018      	movs	r0, r3
    6d24:	46bd      	mov	sp, r7
    6d26:	b00b      	add	sp, #44	; 0x2c
    6d28:	bd90      	pop	{r4, r7, pc}
    6d2a:	46c0      	nop			; (mov r8, r8)
    6d2c:	0000d4d8 	.word	0x0000d4d8

00006d30 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6d30:	b580      	push	{r7, lr}
    6d32:	b082      	sub	sp, #8
    6d34:	af00      	add	r7, sp, #0
    6d36:	0002      	movs	r2, r0
    6d38:	1dfb      	adds	r3, r7, #7
    6d3a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6d3c:	46c0      	nop			; (mov r8, r8)
    6d3e:	46bd      	mov	sp, r7
    6d40:	b002      	add	sp, #8
    6d42:	bd80      	pop	{r7, pc}

00006d44 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6d44:	b580      	push	{r7, lr}
    6d46:	b084      	sub	sp, #16
    6d48:	af00      	add	r7, sp, #0
    6d4a:	0002      	movs	r2, r0
    6d4c:	6039      	str	r1, [r7, #0]
    6d4e:	1dfb      	adds	r3, r7, #7
    6d50:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6d52:	4b13      	ldr	r3, [pc, #76]	; (6da0 <_sercom_set_handler+0x5c>)
    6d54:	781b      	ldrb	r3, [r3, #0]
    6d56:	2201      	movs	r2, #1
    6d58:	4053      	eors	r3, r2
    6d5a:	b2db      	uxtb	r3, r3
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d015      	beq.n	6d8c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d60:	2300      	movs	r3, #0
    6d62:	60fb      	str	r3, [r7, #12]
    6d64:	e00c      	b.n	6d80 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6d66:	4b0f      	ldr	r3, [pc, #60]	; (6da4 <_sercom_set_handler+0x60>)
    6d68:	68fa      	ldr	r2, [r7, #12]
    6d6a:	0092      	lsls	r2, r2, #2
    6d6c:	490e      	ldr	r1, [pc, #56]	; (6da8 <_sercom_set_handler+0x64>)
    6d6e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6d70:	4b0e      	ldr	r3, [pc, #56]	; (6dac <_sercom_set_handler+0x68>)
    6d72:	68fa      	ldr	r2, [r7, #12]
    6d74:	0092      	lsls	r2, r2, #2
    6d76:	2100      	movs	r1, #0
    6d78:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d7a:	68fb      	ldr	r3, [r7, #12]
    6d7c:	3301      	adds	r3, #1
    6d7e:	60fb      	str	r3, [r7, #12]
    6d80:	68fb      	ldr	r3, [r7, #12]
    6d82:	2b05      	cmp	r3, #5
    6d84:	d9ef      	bls.n	6d66 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    6d86:	4b06      	ldr	r3, [pc, #24]	; (6da0 <_sercom_set_handler+0x5c>)
    6d88:	2201      	movs	r2, #1
    6d8a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6d8c:	1dfb      	adds	r3, r7, #7
    6d8e:	781a      	ldrb	r2, [r3, #0]
    6d90:	4b04      	ldr	r3, [pc, #16]	; (6da4 <_sercom_set_handler+0x60>)
    6d92:	0092      	lsls	r2, r2, #2
    6d94:	6839      	ldr	r1, [r7, #0]
    6d96:	50d1      	str	r1, [r2, r3]
}
    6d98:	46c0      	nop			; (mov r8, r8)
    6d9a:	46bd      	mov	sp, r7
    6d9c:	b004      	add	sp, #16
    6d9e:	bd80      	pop	{r7, pc}
    6da0:	200000da 	.word	0x200000da
    6da4:	200000dc 	.word	0x200000dc
    6da8:	00006d31 	.word	0x00006d31
    6dac:	20000344 	.word	0x20000344

00006db0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6db0:	b590      	push	{r4, r7, lr}
    6db2:	b085      	sub	sp, #20
    6db4:	af00      	add	r7, sp, #0
    6db6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6db8:	2308      	movs	r3, #8
    6dba:	18fa      	adds	r2, r7, r3
    6dbc:	4b0c      	ldr	r3, [pc, #48]	; (6df0 <_sercom_get_interrupt_vector+0x40>)
    6dbe:	0010      	movs	r0, r2
    6dc0:	0019      	movs	r1, r3
    6dc2:	2306      	movs	r3, #6
    6dc4:	001a      	movs	r2, r3
    6dc6:	4b0b      	ldr	r3, [pc, #44]	; (6df4 <_sercom_get_interrupt_vector+0x44>)
    6dc8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6dca:	230f      	movs	r3, #15
    6dcc:	18fc      	adds	r4, r7, r3
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	0018      	movs	r0, r3
    6dd2:	4b09      	ldr	r3, [pc, #36]	; (6df8 <_sercom_get_interrupt_vector+0x48>)
    6dd4:	4798      	blx	r3
    6dd6:	0003      	movs	r3, r0
    6dd8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6dda:	230f      	movs	r3, #15
    6ddc:	18fb      	adds	r3, r7, r3
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	2208      	movs	r2, #8
    6de2:	18ba      	adds	r2, r7, r2
    6de4:	5cd3      	ldrb	r3, [r2, r3]
    6de6:	b25b      	sxtb	r3, r3
}
    6de8:	0018      	movs	r0, r3
    6dea:	46bd      	mov	sp, r7
    6dec:	b005      	add	sp, #20
    6dee:	bd90      	pop	{r4, r7, pc}
    6df0:	0000d4f0 	.word	0x0000d4f0
    6df4:	0000b05d 	.word	0x0000b05d
    6df8:	00006ce1 	.word	0x00006ce1

00006dfc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6dfc:	b580      	push	{r7, lr}
    6dfe:	af00      	add	r7, sp, #0
    6e00:	4b03      	ldr	r3, [pc, #12]	; (6e10 <SERCOM0_Handler+0x14>)
    6e02:	681b      	ldr	r3, [r3, #0]
    6e04:	2000      	movs	r0, #0
    6e06:	4798      	blx	r3
    6e08:	46c0      	nop			; (mov r8, r8)
    6e0a:	46bd      	mov	sp, r7
    6e0c:	bd80      	pop	{r7, pc}
    6e0e:	46c0      	nop			; (mov r8, r8)
    6e10:	200000dc 	.word	0x200000dc

00006e14 <SERCOM1_Handler>:
    6e14:	b580      	push	{r7, lr}
    6e16:	af00      	add	r7, sp, #0
    6e18:	4b03      	ldr	r3, [pc, #12]	; (6e28 <SERCOM1_Handler+0x14>)
    6e1a:	685b      	ldr	r3, [r3, #4]
    6e1c:	2001      	movs	r0, #1
    6e1e:	4798      	blx	r3
    6e20:	46c0      	nop			; (mov r8, r8)
    6e22:	46bd      	mov	sp, r7
    6e24:	bd80      	pop	{r7, pc}
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	200000dc 	.word	0x200000dc

00006e2c <SERCOM2_Handler>:
    6e2c:	b580      	push	{r7, lr}
    6e2e:	af00      	add	r7, sp, #0
    6e30:	4b03      	ldr	r3, [pc, #12]	; (6e40 <SERCOM2_Handler+0x14>)
    6e32:	689b      	ldr	r3, [r3, #8]
    6e34:	2002      	movs	r0, #2
    6e36:	4798      	blx	r3
    6e38:	46c0      	nop			; (mov r8, r8)
    6e3a:	46bd      	mov	sp, r7
    6e3c:	bd80      	pop	{r7, pc}
    6e3e:	46c0      	nop			; (mov r8, r8)
    6e40:	200000dc 	.word	0x200000dc

00006e44 <SERCOM3_Handler>:
    6e44:	b580      	push	{r7, lr}
    6e46:	af00      	add	r7, sp, #0
    6e48:	4b03      	ldr	r3, [pc, #12]	; (6e58 <SERCOM3_Handler+0x14>)
    6e4a:	68db      	ldr	r3, [r3, #12]
    6e4c:	2003      	movs	r0, #3
    6e4e:	4798      	blx	r3
    6e50:	46c0      	nop			; (mov r8, r8)
    6e52:	46bd      	mov	sp, r7
    6e54:	bd80      	pop	{r7, pc}
    6e56:	46c0      	nop			; (mov r8, r8)
    6e58:	200000dc 	.word	0x200000dc

00006e5c <SERCOM4_Handler>:
    6e5c:	b580      	push	{r7, lr}
    6e5e:	af00      	add	r7, sp, #0
    6e60:	4b03      	ldr	r3, [pc, #12]	; (6e70 <SERCOM4_Handler+0x14>)
    6e62:	691b      	ldr	r3, [r3, #16]
    6e64:	2004      	movs	r0, #4
    6e66:	4798      	blx	r3
    6e68:	46c0      	nop			; (mov r8, r8)
    6e6a:	46bd      	mov	sp, r7
    6e6c:	bd80      	pop	{r7, pc}
    6e6e:	46c0      	nop			; (mov r8, r8)
    6e70:	200000dc 	.word	0x200000dc

00006e74 <SERCOM5_Handler>:
    6e74:	b580      	push	{r7, lr}
    6e76:	af00      	add	r7, sp, #0
    6e78:	4b03      	ldr	r3, [pc, #12]	; (6e88 <SERCOM5_Handler+0x14>)
    6e7a:	695b      	ldr	r3, [r3, #20]
    6e7c:	2005      	movs	r0, #5
    6e7e:	4798      	blx	r3
    6e80:	46c0      	nop			; (mov r8, r8)
    6e82:	46bd      	mov	sp, r7
    6e84:	bd80      	pop	{r7, pc}
    6e86:	46c0      	nop			; (mov r8, r8)
    6e88:	200000dc 	.word	0x200000dc

00006e8c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6e8c:	b580      	push	{r7, lr}
    6e8e:	b082      	sub	sp, #8
    6e90:	af00      	add	r7, sp, #0
    6e92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	2280      	movs	r2, #128	; 0x80
    6e98:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	2200      	movs	r2, #0
    6e9e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ea0:	687b      	ldr	r3, [r7, #4]
    6ea2:	2201      	movs	r2, #1
    6ea4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	2200      	movs	r2, #0
    6eaa:	70da      	strb	r2, [r3, #3]
}
    6eac:	46c0      	nop			; (mov r8, r8)
    6eae:	46bd      	mov	sp, r7
    6eb0:	b002      	add	sp, #8
    6eb2:	bd80      	pop	{r7, pc}

00006eb4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6eb4:	b580      	push	{r7, lr}
    6eb6:	b084      	sub	sp, #16
    6eb8:	af00      	add	r7, sp, #0
    6eba:	0002      	movs	r2, r0
    6ebc:	1dfb      	adds	r3, r7, #7
    6ebe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6ec0:	230f      	movs	r3, #15
    6ec2:	18fb      	adds	r3, r7, r3
    6ec4:	1dfa      	adds	r2, r7, #7
    6ec6:	7812      	ldrb	r2, [r2, #0]
    6ec8:	09d2      	lsrs	r2, r2, #7
    6eca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6ecc:	230e      	movs	r3, #14
    6ece:	18fb      	adds	r3, r7, r3
    6ed0:	1dfa      	adds	r2, r7, #7
    6ed2:	7812      	ldrb	r2, [r2, #0]
    6ed4:	0952      	lsrs	r2, r2, #5
    6ed6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6ed8:	4b0d      	ldr	r3, [pc, #52]	; (6f10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6eda:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6edc:	230f      	movs	r3, #15
    6ede:	18fb      	adds	r3, r7, r3
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d10f      	bne.n	6f06 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6ee6:	230f      	movs	r3, #15
    6ee8:	18fb      	adds	r3, r7, r3
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	009b      	lsls	r3, r3, #2
    6eee:	2210      	movs	r2, #16
    6ef0:	4694      	mov	ip, r2
    6ef2:	44bc      	add	ip, r7
    6ef4:	4463      	add	r3, ip
    6ef6:	3b08      	subs	r3, #8
    6ef8:	681a      	ldr	r2, [r3, #0]
    6efa:	230e      	movs	r3, #14
    6efc:	18fb      	adds	r3, r7, r3
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	01db      	lsls	r3, r3, #7
    6f02:	18d3      	adds	r3, r2, r3
    6f04:	e000      	b.n	6f08 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    6f06:	2300      	movs	r3, #0
	}
}
    6f08:	0018      	movs	r0, r3
    6f0a:	46bd      	mov	sp, r7
    6f0c:	b004      	add	sp, #16
    6f0e:	bd80      	pop	{r7, pc}
    6f10:	41004400 	.word	0x41004400

00006f14 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6f14:	b580      	push	{r7, lr}
    6f16:	b082      	sub	sp, #8
    6f18:	af00      	add	r7, sp, #0
    6f1a:	0002      	movs	r2, r0
    6f1c:	1dfb      	adds	r3, r7, #7
    6f1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6f20:	1dfb      	adds	r3, r7, #7
    6f22:	781b      	ldrb	r3, [r3, #0]
    6f24:	0018      	movs	r0, r3
    6f26:	4b03      	ldr	r3, [pc, #12]	; (6f34 <port_get_group_from_gpio_pin+0x20>)
    6f28:	4798      	blx	r3
    6f2a:	0003      	movs	r3, r0
}
    6f2c:	0018      	movs	r0, r3
    6f2e:	46bd      	mov	sp, r7
    6f30:	b002      	add	sp, #8
    6f32:	bd80      	pop	{r7, pc}
    6f34:	00006eb5 	.word	0x00006eb5

00006f38 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b084      	sub	sp, #16
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	0002      	movs	r2, r0
    6f40:	1dfb      	adds	r3, r7, #7
    6f42:	701a      	strb	r2, [r3, #0]
    6f44:	1dbb      	adds	r3, r7, #6
    6f46:	1c0a      	adds	r2, r1, #0
    6f48:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6f4a:	1dfb      	adds	r3, r7, #7
    6f4c:	781b      	ldrb	r3, [r3, #0]
    6f4e:	0018      	movs	r0, r3
    6f50:	4b0d      	ldr	r3, [pc, #52]	; (6f88 <port_pin_set_output_level+0x50>)
    6f52:	4798      	blx	r3
    6f54:	0003      	movs	r3, r0
    6f56:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6f58:	1dfb      	adds	r3, r7, #7
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	221f      	movs	r2, #31
    6f5e:	4013      	ands	r3, r2
    6f60:	2201      	movs	r2, #1
    6f62:	409a      	lsls	r2, r3
    6f64:	0013      	movs	r3, r2
    6f66:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6f68:	1dbb      	adds	r3, r7, #6
    6f6a:	781b      	ldrb	r3, [r3, #0]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d003      	beq.n	6f78 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6f70:	68fb      	ldr	r3, [r7, #12]
    6f72:	68ba      	ldr	r2, [r7, #8]
    6f74:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    6f76:	e002      	b.n	6f7e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6f78:	68fb      	ldr	r3, [r7, #12]
    6f7a:	68ba      	ldr	r2, [r7, #8]
    6f7c:	615a      	str	r2, [r3, #20]
	}
}
    6f7e:	46c0      	nop			; (mov r8, r8)
    6f80:	46bd      	mov	sp, r7
    6f82:	b004      	add	sp, #16
    6f84:	bd80      	pop	{r7, pc}
    6f86:	46c0      	nop			; (mov r8, r8)
    6f88:	00006f15 	.word	0x00006f15

00006f8c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6f8c:	b580      	push	{r7, lr}
    6f8e:	b082      	sub	sp, #8
    6f90:	af00      	add	r7, sp, #0
    6f92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6f94:	687b      	ldr	r3, [r7, #4]
    6f96:	2200      	movs	r2, #0
    6f98:	701a      	strb	r2, [r3, #0]
}
    6f9a:	46c0      	nop			; (mov r8, r8)
    6f9c:	46bd      	mov	sp, r7
    6f9e:	b002      	add	sp, #8
    6fa0:	bd80      	pop	{r7, pc}
    6fa2:	46c0      	nop			; (mov r8, r8)

00006fa4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6fa4:	b580      	push	{r7, lr}
    6fa6:	b082      	sub	sp, #8
    6fa8:	af00      	add	r7, sp, #0
    6faa:	0002      	movs	r2, r0
    6fac:	6039      	str	r1, [r7, #0]
    6fae:	1dfb      	adds	r3, r7, #7
    6fb0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6fb2:	1dfb      	adds	r3, r7, #7
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	2b01      	cmp	r3, #1
    6fb8:	d00a      	beq.n	6fd0 <system_apb_clock_set_mask+0x2c>
    6fba:	2b02      	cmp	r3, #2
    6fbc:	d00f      	beq.n	6fde <system_apb_clock_set_mask+0x3a>
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d114      	bne.n	6fec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6fc2:	4b0e      	ldr	r3, [pc, #56]	; (6ffc <system_apb_clock_set_mask+0x58>)
    6fc4:	4a0d      	ldr	r2, [pc, #52]	; (6ffc <system_apb_clock_set_mask+0x58>)
    6fc6:	6991      	ldr	r1, [r2, #24]
    6fc8:	683a      	ldr	r2, [r7, #0]
    6fca:	430a      	orrs	r2, r1
    6fcc:	619a      	str	r2, [r3, #24]
			break;
    6fce:	e00f      	b.n	6ff0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6fd0:	4b0a      	ldr	r3, [pc, #40]	; (6ffc <system_apb_clock_set_mask+0x58>)
    6fd2:	4a0a      	ldr	r2, [pc, #40]	; (6ffc <system_apb_clock_set_mask+0x58>)
    6fd4:	69d1      	ldr	r1, [r2, #28]
    6fd6:	683a      	ldr	r2, [r7, #0]
    6fd8:	430a      	orrs	r2, r1
    6fda:	61da      	str	r2, [r3, #28]
			break;
    6fdc:	e008      	b.n	6ff0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6fde:	4b07      	ldr	r3, [pc, #28]	; (6ffc <system_apb_clock_set_mask+0x58>)
    6fe0:	4a06      	ldr	r2, [pc, #24]	; (6ffc <system_apb_clock_set_mask+0x58>)
    6fe2:	6a11      	ldr	r1, [r2, #32]
    6fe4:	683a      	ldr	r2, [r7, #0]
    6fe6:	430a      	orrs	r2, r1
    6fe8:	621a      	str	r2, [r3, #32]
			break;
    6fea:	e001      	b.n	6ff0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6fec:	2317      	movs	r3, #23
    6fee:	e000      	b.n	6ff2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6ff0:	2300      	movs	r3, #0
}
    6ff2:	0018      	movs	r0, r3
    6ff4:	46bd      	mov	sp, r7
    6ff6:	b002      	add	sp, #8
    6ff8:	bd80      	pop	{r7, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	40000400 	.word	0x40000400

00007000 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    7000:	b580      	push	{r7, lr}
    7002:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7004:	4b05      	ldr	r3, [pc, #20]	; (701c <system_is_debugger_present+0x1c>)
    7006:	789b      	ldrb	r3, [r3, #2]
    7008:	b2db      	uxtb	r3, r3
    700a:	001a      	movs	r2, r3
    700c:	2302      	movs	r3, #2
    700e:	4013      	ands	r3, r2
    7010:	1e5a      	subs	r2, r3, #1
    7012:	4193      	sbcs	r3, r2
    7014:	b2db      	uxtb	r3, r3
}
    7016:	0018      	movs	r0, r3
    7018:	46bd      	mov	sp, r7
    701a:	bd80      	pop	{r7, pc}
    701c:	41002000 	.word	0x41002000

00007020 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    7020:	b580      	push	{r7, lr}
    7022:	b084      	sub	sp, #16
    7024:	af00      	add	r7, sp, #0
    7026:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	681b      	ldr	r3, [r3, #0]
    702c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    702e:	68fb      	ldr	r3, [r7, #12]
    7030:	7e1b      	ldrb	r3, [r3, #24]
    7032:	b2db      	uxtb	r3, r3
    7034:	001a      	movs	r2, r3
    7036:	2301      	movs	r3, #1
    7038:	4013      	ands	r3, r2
    703a:	1e5a      	subs	r2, r3, #1
    703c:	4193      	sbcs	r3, r2
    703e:	b2db      	uxtb	r3, r3
}
    7040:	0018      	movs	r0, r3
    7042:	46bd      	mov	sp, r7
    7044:	b004      	add	sp, #16
    7046:	bd80      	pop	{r7, pc}

00007048 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    7048:	b580      	push	{r7, lr}
    704a:	b084      	sub	sp, #16
    704c:	af00      	add	r7, sp, #0
    704e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7056:	68fb      	ldr	r3, [r7, #12]
    7058:	7e1b      	ldrb	r3, [r3, #24]
    705a:	b2db      	uxtb	r3, r3
    705c:	001a      	movs	r2, r3
    705e:	2304      	movs	r3, #4
    7060:	4013      	ands	r3, r2
    7062:	1e5a      	subs	r2, r3, #1
    7064:	4193      	sbcs	r3, r2
    7066:	b2db      	uxtb	r3, r3
}
    7068:	0018      	movs	r0, r3
    706a:	46bd      	mov	sp, r7
    706c:	b004      	add	sp, #16
    706e:	bd80      	pop	{r7, pc}

00007070 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    7070:	b580      	push	{r7, lr}
    7072:	b084      	sub	sp, #16
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
    7078:	000a      	movs	r2, r1
    707a:	1cbb      	adds	r3, r7, #2
    707c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	681b      	ldr	r3, [r3, #0]
    7082:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	0018      	movs	r0, r3
    7088:	4b0a      	ldr	r3, [pc, #40]	; (70b4 <spi_write+0x44>)
    708a:	4798      	blx	r3
    708c:	0003      	movs	r3, r0
    708e:	001a      	movs	r2, r3
    7090:	2301      	movs	r3, #1
    7092:	4053      	eors	r3, r2
    7094:	b2db      	uxtb	r3, r3
    7096:	2b00      	cmp	r3, #0
    7098:	d001      	beq.n	709e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    709a:	2305      	movs	r3, #5
    709c:	e006      	b.n	70ac <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    709e:	1cbb      	adds	r3, r7, #2
    70a0:	881b      	ldrh	r3, [r3, #0]
    70a2:	05db      	lsls	r3, r3, #23
    70a4:	0dda      	lsrs	r2, r3, #23
    70a6:	68fb      	ldr	r3, [r7, #12]
    70a8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    70aa:	2300      	movs	r3, #0
}
    70ac:	0018      	movs	r0, r3
    70ae:	46bd      	mov	sp, r7
    70b0:	b004      	add	sp, #16
    70b2:	bd80      	pop	{r7, pc}
    70b4:	00007021 	.word	0x00007021

000070b8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    70b8:	b580      	push	{r7, lr}
    70ba:	b084      	sub	sp, #16
    70bc:	af00      	add	r7, sp, #0
    70be:	6078      	str	r0, [r7, #4]
    70c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	681b      	ldr	r3, [r3, #0]
    70c6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    70c8:	687b      	ldr	r3, [r7, #4]
    70ca:	0018      	movs	r0, r3
    70cc:	4b1b      	ldr	r3, [pc, #108]	; (713c <spi_read+0x84>)
    70ce:	4798      	blx	r3
    70d0:	0003      	movs	r3, r0
    70d2:	001a      	movs	r2, r3
    70d4:	2301      	movs	r3, #1
    70d6:	4053      	eors	r3, r2
    70d8:	b2db      	uxtb	r3, r3
    70da:	2b00      	cmp	r3, #0
    70dc:	d001      	beq.n	70e2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    70de:	2310      	movs	r3, #16
    70e0:	e027      	b.n	7132 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    70e2:	230f      	movs	r3, #15
    70e4:	18fb      	adds	r3, r7, r3
    70e6:	2200      	movs	r2, #0
    70e8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    70ea:	68bb      	ldr	r3, [r7, #8]
    70ec:	8b5b      	ldrh	r3, [r3, #26]
    70ee:	b29b      	uxth	r3, r3
    70f0:	001a      	movs	r2, r3
    70f2:	2304      	movs	r3, #4
    70f4:	4013      	ands	r3, r2
    70f6:	d006      	beq.n	7106 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    70f8:	230f      	movs	r3, #15
    70fa:	18fb      	adds	r3, r7, r3
    70fc:	221e      	movs	r2, #30
    70fe:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7100:	68bb      	ldr	r3, [r7, #8]
    7102:	2204      	movs	r2, #4
    7104:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	799b      	ldrb	r3, [r3, #6]
    710a:	2b01      	cmp	r3, #1
    710c:	d108      	bne.n	7120 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    710e:	68bb      	ldr	r3, [r7, #8]
    7110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7112:	b29b      	uxth	r3, r3
    7114:	05db      	lsls	r3, r3, #23
    7116:	0ddb      	lsrs	r3, r3, #23
    7118:	b29a      	uxth	r2, r3
    711a:	683b      	ldr	r3, [r7, #0]
    711c:	801a      	strh	r2, [r3, #0]
    711e:	e005      	b.n	712c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7120:	68bb      	ldr	r3, [r7, #8]
    7122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7124:	b2db      	uxtb	r3, r3
    7126:	b29a      	uxth	r2, r3
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    712c:	230f      	movs	r3, #15
    712e:	18fb      	adds	r3, r7, r3
    7130:	781b      	ldrb	r3, [r3, #0]
}
    7132:	0018      	movs	r0, r3
    7134:	46bd      	mov	sp, r7
    7136:	b004      	add	sp, #16
    7138:	bd80      	pop	{r7, pc}
    713a:	46c0      	nop			; (mov r8, r8)
    713c:	00007049 	.word	0x00007049

00007140 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    7140:	b590      	push	{r4, r7, lr}
    7142:	b093      	sub	sp, #76	; 0x4c
    7144:	af00      	add	r7, sp, #0
    7146:	6078      	str	r0, [r7, #4]
    7148:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	681b      	ldr	r3, [r3, #0]
    714e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7156:	231c      	movs	r3, #28
    7158:	18fb      	adds	r3, r7, r3
    715a:	0018      	movs	r0, r3
    715c:	4b75      	ldr	r3, [pc, #468]	; (7334 <_spi_set_config+0x1f4>)
    715e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7160:	231c      	movs	r3, #28
    7162:	18fb      	adds	r3, r7, r3
    7164:	2200      	movs	r2, #0
    7166:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    7168:	683b      	ldr	r3, [r7, #0]
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	2b00      	cmp	r3, #0
    716e:	d103      	bne.n	7178 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7170:	231c      	movs	r3, #28
    7172:	18fb      	adds	r3, r7, r3
    7174:	2200      	movs	r2, #0
    7176:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7178:	683b      	ldr	r3, [r7, #0]
    717a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    717c:	230c      	movs	r3, #12
    717e:	18fb      	adds	r3, r7, r3
    7180:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7182:	683b      	ldr	r3, [r7, #0]
    7184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    7186:	230c      	movs	r3, #12
    7188:	18fb      	adds	r3, r7, r3
    718a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    718c:	683b      	ldr	r3, [r7, #0]
    718e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    7190:	230c      	movs	r3, #12
    7192:	18fb      	adds	r3, r7, r3
    7194:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    7196:	683b      	ldr	r3, [r7, #0]
    7198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    719a:	230c      	movs	r3, #12
    719c:	18fb      	adds	r3, r7, r3
    719e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    71a0:	2347      	movs	r3, #71	; 0x47
    71a2:	18fb      	adds	r3, r7, r3
    71a4:	2200      	movs	r2, #0
    71a6:	701a      	strb	r2, [r3, #0]
    71a8:	e02c      	b.n	7204 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    71aa:	2347      	movs	r3, #71	; 0x47
    71ac:	18fb      	adds	r3, r7, r3
    71ae:	781a      	ldrb	r2, [r3, #0]
    71b0:	230c      	movs	r3, #12
    71b2:	18fb      	adds	r3, r7, r3
    71b4:	0092      	lsls	r2, r2, #2
    71b6:	58d3      	ldr	r3, [r2, r3]
    71b8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    71ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    71bc:	2b00      	cmp	r3, #0
    71be:	d109      	bne.n	71d4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    71c0:	2347      	movs	r3, #71	; 0x47
    71c2:	18fb      	adds	r3, r7, r3
    71c4:	781a      	ldrb	r2, [r3, #0]
    71c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    71c8:	0011      	movs	r1, r2
    71ca:	0018      	movs	r0, r3
    71cc:	4b5a      	ldr	r3, [pc, #360]	; (7338 <_spi_set_config+0x1f8>)
    71ce:	4798      	blx	r3
    71d0:	0003      	movs	r3, r0
    71d2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    71d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    71d6:	3301      	adds	r3, #1
    71d8:	d00d      	beq.n	71f6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    71da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    71dc:	b2da      	uxtb	r2, r3
    71de:	231c      	movs	r3, #28
    71e0:	18fb      	adds	r3, r7, r3
    71e2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    71e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    71e6:	0c1b      	lsrs	r3, r3, #16
    71e8:	b2db      	uxtb	r3, r3
    71ea:	221c      	movs	r2, #28
    71ec:	18ba      	adds	r2, r7, r2
    71ee:	0011      	movs	r1, r2
    71f0:	0018      	movs	r0, r3
    71f2:	4b52      	ldr	r3, [pc, #328]	; (733c <_spi_set_config+0x1fc>)
    71f4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    71f6:	2347      	movs	r3, #71	; 0x47
    71f8:	18fb      	adds	r3, r7, r3
    71fa:	781a      	ldrb	r2, [r3, #0]
    71fc:	2347      	movs	r3, #71	; 0x47
    71fe:	18fb      	adds	r3, r7, r3
    7200:	3201      	adds	r2, #1
    7202:	701a      	strb	r2, [r3, #0]
    7204:	2347      	movs	r3, #71	; 0x47
    7206:	18fb      	adds	r3, r7, r3
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	2b03      	cmp	r3, #3
    720c:	d9cd      	bls.n	71aa <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    720e:	683b      	ldr	r3, [r7, #0]
    7210:	781a      	ldrb	r2, [r3, #0]
    7212:	687b      	ldr	r3, [r7, #4]
    7214:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    7216:	683b      	ldr	r3, [r7, #0]
    7218:	7c1a      	ldrb	r2, [r3, #16]
    721a:	687b      	ldr	r3, [r7, #4]
    721c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    721e:	683b      	ldr	r3, [r7, #0]
    7220:	7c9a      	ldrb	r2, [r3, #18]
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    7226:	683b      	ldr	r3, [r7, #0]
    7228:	7d1a      	ldrb	r2, [r3, #20]
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    722e:	230a      	movs	r3, #10
    7230:	18fb      	adds	r3, r7, r3
    7232:	2200      	movs	r2, #0
    7234:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    7236:	2300      	movs	r3, #0
    7238:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    723a:	2300      	movs	r3, #0
    723c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    723e:	683b      	ldr	r3, [r7, #0]
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	2b01      	cmp	r3, #1
    7244:	d129      	bne.n	729a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	681b      	ldr	r3, [r3, #0]
    724a:	0018      	movs	r0, r3
    724c:	4b3c      	ldr	r3, [pc, #240]	; (7340 <_spi_set_config+0x200>)
    724e:	4798      	blx	r3
    7250:	0003      	movs	r3, r0
    7252:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7256:	3314      	adds	r3, #20
    7258:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    725c:	b2db      	uxtb	r3, r3
    725e:	0018      	movs	r0, r3
    7260:	4b38      	ldr	r3, [pc, #224]	; (7344 <_spi_set_config+0x204>)
    7262:	4798      	blx	r3
    7264:	0003      	movs	r3, r0
    7266:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    7268:	683b      	ldr	r3, [r7, #0]
    726a:	699b      	ldr	r3, [r3, #24]
    726c:	2223      	movs	r2, #35	; 0x23
    726e:	18bc      	adds	r4, r7, r2
    7270:	220a      	movs	r2, #10
    7272:	18ba      	adds	r2, r7, r2
    7274:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7276:	0018      	movs	r0, r3
    7278:	4b33      	ldr	r3, [pc, #204]	; (7348 <_spi_set_config+0x208>)
    727a:	4798      	blx	r3
    727c:	0003      	movs	r3, r0
    727e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    7280:	2323      	movs	r3, #35	; 0x23
    7282:	18fb      	adds	r3, r7, r3
    7284:	781b      	ldrb	r3, [r3, #0]
    7286:	2b00      	cmp	r3, #0
    7288:	d001      	beq.n	728e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    728a:	2317      	movs	r3, #23
    728c:	e04e      	b.n	732c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    728e:	230a      	movs	r3, #10
    7290:	18fb      	adds	r3, r7, r3
    7292:	881b      	ldrh	r3, [r3, #0]
    7294:	b2da      	uxtb	r2, r3
    7296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7298:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    729a:	683b      	ldr	r3, [r7, #0]
    729c:	685b      	ldr	r3, [r3, #4]
    729e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    72a0:	4313      	orrs	r3, r2
    72a2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    72a4:	683b      	ldr	r3, [r7, #0]
    72a6:	689b      	ldr	r3, [r3, #8]
    72a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    72aa:	4313      	orrs	r3, r2
    72ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    72ae:	683b      	ldr	r3, [r7, #0]
    72b0:	68db      	ldr	r3, [r3, #12]
    72b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    72b4:	4313      	orrs	r3, r2
    72b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    72b8:	683b      	ldr	r3, [r7, #0]
    72ba:	7c1b      	ldrb	r3, [r3, #16]
    72bc:	001a      	movs	r2, r3
    72be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    72c0:	4313      	orrs	r3, r2
    72c2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    72c4:	683b      	ldr	r3, [r7, #0]
    72c6:	7c5b      	ldrb	r3, [r3, #17]
    72c8:	2b00      	cmp	r3, #0
    72ca:	d103      	bne.n	72d4 <_spi_set_config+0x194>
    72cc:	4b1f      	ldr	r3, [pc, #124]	; (734c <_spi_set_config+0x20c>)
    72ce:	4798      	blx	r3
    72d0:	1e03      	subs	r3, r0, #0
    72d2:	d003      	beq.n	72dc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    72d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    72d6:	2280      	movs	r2, #128	; 0x80
    72d8:	4313      	orrs	r3, r2
    72da:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    72dc:	683b      	ldr	r3, [r7, #0]
    72de:	7c9b      	ldrb	r3, [r3, #18]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d004      	beq.n	72ee <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    72e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    72e6:	2280      	movs	r2, #128	; 0x80
    72e8:	0292      	lsls	r2, r2, #10
    72ea:	4313      	orrs	r3, r2
    72ec:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    72ee:	683b      	ldr	r3, [r7, #0]
    72f0:	7cdb      	ldrb	r3, [r3, #19]
    72f2:	2b00      	cmp	r3, #0
    72f4:	d004      	beq.n	7300 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    72f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    72f8:	2280      	movs	r2, #128	; 0x80
    72fa:	0092      	lsls	r2, r2, #2
    72fc:	4313      	orrs	r3, r2
    72fe:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    7300:	683b      	ldr	r3, [r7, #0]
    7302:	7d1b      	ldrb	r3, [r3, #20]
    7304:	2b00      	cmp	r3, #0
    7306:	d004      	beq.n	7312 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    730a:	2280      	movs	r2, #128	; 0x80
    730c:	0192      	lsls	r2, r2, #6
    730e:	4313      	orrs	r3, r2
    7310:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    7312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7314:	681a      	ldr	r2, [r3, #0]
    7316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7318:	431a      	orrs	r2, r3
    731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    731c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7320:	685a      	ldr	r2, [r3, #4]
    7322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7324:	431a      	orrs	r2, r3
    7326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7328:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    732a:	2300      	movs	r3, #0
}
    732c:	0018      	movs	r0, r3
    732e:	46bd      	mov	sp, r7
    7330:	b013      	add	sp, #76	; 0x4c
    7332:	bd90      	pop	{r4, r7, pc}
    7334:	00006e8d 	.word	0x00006e8d
    7338:	00006b25 	.word	0x00006b25
    733c:	000093f1 	.word	0x000093f1
    7340:	00006ce1 	.word	0x00006ce1
    7344:	00009229 	.word	0x00009229
    7348:	00006831 	.word	0x00006831
    734c:	00007001 	.word	0x00007001

00007350 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7350:	b590      	push	{r4, r7, lr}
    7352:	b08b      	sub	sp, #44	; 0x2c
    7354:	af00      	add	r7, sp, #0
    7356:	60f8      	str	r0, [r7, #12]
    7358:	60b9      	str	r1, [r7, #8]
    735a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    735c:	68fb      	ldr	r3, [r7, #12]
    735e:	68ba      	ldr	r2, [r7, #8]
    7360:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    7362:	68fb      	ldr	r3, [r7, #12]
    7364:	681b      	ldr	r3, [r3, #0]
    7366:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7368:	6a3b      	ldr	r3, [r7, #32]
    736a:	681b      	ldr	r3, [r3, #0]
    736c:	2202      	movs	r2, #2
    736e:	4013      	ands	r3, r2
    7370:	d001      	beq.n	7376 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7372:	231c      	movs	r3, #28
    7374:	e09c      	b.n	74b0 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7376:	6a3b      	ldr	r3, [r7, #32]
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	2201      	movs	r2, #1
    737c:	4013      	ands	r3, r2
    737e:	d001      	beq.n	7384 <spi_init+0x34>
		return STATUS_BUSY;
    7380:	2305      	movs	r3, #5
    7382:	e095      	b.n	74b0 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7384:	68fb      	ldr	r3, [r7, #12]
    7386:	681b      	ldr	r3, [r3, #0]
    7388:	0018      	movs	r0, r3
    738a:	4b4b      	ldr	r3, [pc, #300]	; (74b8 <spi_init+0x168>)
    738c:	4798      	blx	r3
    738e:	0003      	movs	r3, r0
    7390:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7392:	69fb      	ldr	r3, [r7, #28]
    7394:	3302      	adds	r3, #2
    7396:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7398:	69fb      	ldr	r3, [r7, #28]
    739a:	3314      	adds	r3, #20
    739c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    739e:	2201      	movs	r2, #1
    73a0:	69bb      	ldr	r3, [r7, #24]
    73a2:	409a      	lsls	r2, r3
    73a4:	0013      	movs	r3, r2
    73a6:	0019      	movs	r1, r3
    73a8:	2002      	movs	r0, #2
    73aa:	4b44      	ldr	r3, [pc, #272]	; (74bc <spi_init+0x16c>)
    73ac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    73ae:	2310      	movs	r3, #16
    73b0:	18fb      	adds	r3, r7, r3
    73b2:	0018      	movs	r0, r3
    73b4:	4b42      	ldr	r3, [pc, #264]	; (74c0 <spi_init+0x170>)
    73b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	2224      	movs	r2, #36	; 0x24
    73bc:	5c9a      	ldrb	r2, [r3, r2]
    73be:	2310      	movs	r3, #16
    73c0:	18fb      	adds	r3, r7, r3
    73c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    73c4:	697b      	ldr	r3, [r7, #20]
    73c6:	b2db      	uxtb	r3, r3
    73c8:	2210      	movs	r2, #16
    73ca:	18ba      	adds	r2, r7, r2
    73cc:	0011      	movs	r1, r2
    73ce:	0018      	movs	r0, r3
    73d0:	4b3c      	ldr	r3, [pc, #240]	; (74c4 <spi_init+0x174>)
    73d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    73d4:	697b      	ldr	r3, [r7, #20]
    73d6:	b2db      	uxtb	r3, r3
    73d8:	0018      	movs	r0, r3
    73da:	4b3b      	ldr	r3, [pc, #236]	; (74c8 <spi_init+0x178>)
    73dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    73de:	687b      	ldr	r3, [r7, #4]
    73e0:	2224      	movs	r2, #36	; 0x24
    73e2:	5c9b      	ldrb	r3, [r3, r2]
    73e4:	2100      	movs	r1, #0
    73e6:	0018      	movs	r0, r3
    73e8:	4b38      	ldr	r3, [pc, #224]	; (74cc <spi_init+0x17c>)
    73ea:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    73ec:	687b      	ldr	r3, [r7, #4]
    73ee:	781b      	ldrb	r3, [r3, #0]
    73f0:	2b01      	cmp	r3, #1
    73f2:	d105      	bne.n	7400 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    73f4:	6a3b      	ldr	r3, [r7, #32]
    73f6:	681b      	ldr	r3, [r3, #0]
    73f8:	220c      	movs	r2, #12
    73fa:	431a      	orrs	r2, r3
    73fc:	6a3b      	ldr	r3, [r7, #32]
    73fe:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7400:	2327      	movs	r3, #39	; 0x27
    7402:	18fb      	adds	r3, r7, r3
    7404:	2200      	movs	r2, #0
    7406:	701a      	strb	r2, [r3, #0]
    7408:	e010      	b.n	742c <spi_init+0xdc>
		module->callback[i]        = NULL;
    740a:	2327      	movs	r3, #39	; 0x27
    740c:	18fb      	adds	r3, r7, r3
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	68fa      	ldr	r2, [r7, #12]
    7412:	3302      	adds	r3, #2
    7414:	009b      	lsls	r3, r3, #2
    7416:	18d3      	adds	r3, r2, r3
    7418:	3304      	adds	r3, #4
    741a:	2200      	movs	r2, #0
    741c:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    741e:	2327      	movs	r3, #39	; 0x27
    7420:	18fb      	adds	r3, r7, r3
    7422:	781a      	ldrb	r2, [r3, #0]
    7424:	2327      	movs	r3, #39	; 0x27
    7426:	18fb      	adds	r3, r7, r3
    7428:	3201      	adds	r2, #1
    742a:	701a      	strb	r2, [r3, #0]
    742c:	2327      	movs	r3, #39	; 0x27
    742e:	18fb      	adds	r3, r7, r3
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	2b06      	cmp	r3, #6
    7434:	d9e9      	bls.n	740a <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    7436:	68fb      	ldr	r3, [r7, #12]
    7438:	2200      	movs	r2, #0
    743a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    743c:	68fb      	ldr	r3, [r7, #12]
    743e:	2200      	movs	r2, #0
    7440:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7442:	68fb      	ldr	r3, [r7, #12]
    7444:	2200      	movs	r2, #0
    7446:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7448:	68fb      	ldr	r3, [r7, #12]
    744a:	2200      	movs	r2, #0
    744c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    744e:	68fb      	ldr	r3, [r7, #12]
    7450:	2236      	movs	r2, #54	; 0x36
    7452:	2100      	movs	r1, #0
    7454:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    7456:	68fb      	ldr	r3, [r7, #12]
    7458:	2237      	movs	r2, #55	; 0x37
    745a:	2100      	movs	r1, #0
    745c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    745e:	68fb      	ldr	r3, [r7, #12]
    7460:	2238      	movs	r2, #56	; 0x38
    7462:	2100      	movs	r1, #0
    7464:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    7466:	68fb      	ldr	r3, [r7, #12]
    7468:	2203      	movs	r2, #3
    746a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    746c:	68fb      	ldr	r3, [r7, #12]
    746e:	2200      	movs	r2, #0
    7470:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7472:	68fb      	ldr	r3, [r7, #12]
    7474:	681b      	ldr	r3, [r3, #0]
    7476:	2213      	movs	r2, #19
    7478:	18bc      	adds	r4, r7, r2
    747a:	0018      	movs	r0, r3
    747c:	4b0e      	ldr	r3, [pc, #56]	; (74b8 <spi_init+0x168>)
    747e:	4798      	blx	r3
    7480:	0003      	movs	r3, r0
    7482:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7484:	4a12      	ldr	r2, [pc, #72]	; (74d0 <spi_init+0x180>)
    7486:	2313      	movs	r3, #19
    7488:	18fb      	adds	r3, r7, r3
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	0011      	movs	r1, r2
    748e:	0018      	movs	r0, r3
    7490:	4b10      	ldr	r3, [pc, #64]	; (74d4 <spi_init+0x184>)
    7492:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7494:	2313      	movs	r3, #19
    7496:	18fb      	adds	r3, r7, r3
    7498:	781a      	ldrb	r2, [r3, #0]
    749a:	4b0f      	ldr	r3, [pc, #60]	; (74d8 <spi_init+0x188>)
    749c:	0092      	lsls	r2, r2, #2
    749e:	68f9      	ldr	r1, [r7, #12]
    74a0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    74a2:	687a      	ldr	r2, [r7, #4]
    74a4:	68fb      	ldr	r3, [r7, #12]
    74a6:	0011      	movs	r1, r2
    74a8:	0018      	movs	r0, r3
    74aa:	4b0c      	ldr	r3, [pc, #48]	; (74dc <spi_init+0x18c>)
    74ac:	4798      	blx	r3
    74ae:	0003      	movs	r3, r0
}
    74b0:	0018      	movs	r0, r3
    74b2:	46bd      	mov	sp, r7
    74b4:	b00b      	add	sp, #44	; 0x2c
    74b6:	bd90      	pop	{r4, r7, pc}
    74b8:	00006ce1 	.word	0x00006ce1
    74bc:	00006fa5 	.word	0x00006fa5
    74c0:	00006f8d 	.word	0x00006f8d
    74c4:	00009105 	.word	0x00009105
    74c8:	00009149 	.word	0x00009149
    74cc:	00006a99 	.word	0x00006a99
    74d0:	00007729 	.word	0x00007729
    74d4:	00006d45 	.word	0x00006d45
    74d8:	20000344 	.word	0x20000344
    74dc:	00007141 	.word	0x00007141

000074e0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    74e0:	b580      	push	{r7, lr}
    74e2:	b086      	sub	sp, #24
    74e4:	af00      	add	r7, sp, #0
    74e6:	60f8      	str	r0, [r7, #12]
    74e8:	60b9      	str	r1, [r7, #8]
    74ea:	1dfb      	adds	r3, r7, #7
    74ec:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    74ee:	68fb      	ldr	r3, [r7, #12]
    74f0:	795b      	ldrb	r3, [r3, #5]
    74f2:	2b01      	cmp	r3, #1
    74f4:	d001      	beq.n	74fa <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    74f6:	2315      	movs	r3, #21
    74f8:	e05c      	b.n	75b4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	7a1b      	ldrb	r3, [r3, #8]
    74fe:	2201      	movs	r2, #1
    7500:	4053      	eors	r3, r2
    7502:	b2db      	uxtb	r3, r3
    7504:	2b00      	cmp	r3, #0
    7506:	d054      	beq.n	75b2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    7508:	1dfb      	adds	r3, r7, #7
    750a:	781b      	ldrb	r3, [r3, #0]
    750c:	2b00      	cmp	r3, #0
    750e:	d04a      	beq.n	75a6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    7510:	68bb      	ldr	r3, [r7, #8]
    7512:	785b      	ldrb	r3, [r3, #1]
    7514:	2b00      	cmp	r3, #0
    7516:	d03f      	beq.n	7598 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    7518:	68fb      	ldr	r3, [r7, #12]
    751a:	0018      	movs	r0, r3
    751c:	4b27      	ldr	r3, [pc, #156]	; (75bc <spi_select_slave+0xdc>)
    751e:	4798      	blx	r3
    7520:	0003      	movs	r3, r0
    7522:	001a      	movs	r2, r3
    7524:	2301      	movs	r3, #1
    7526:	4053      	eors	r3, r2
    7528:	b2db      	uxtb	r3, r3
    752a:	2b00      	cmp	r3, #0
    752c:	d007      	beq.n	753e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    752e:	68bb      	ldr	r3, [r7, #8]
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	2101      	movs	r1, #1
    7534:	0018      	movs	r0, r3
    7536:	4b22      	ldr	r3, [pc, #136]	; (75c0 <spi_select_slave+0xe0>)
    7538:	4798      	blx	r3
					return STATUS_BUSY;
    753a:	2305      	movs	r3, #5
    753c:	e03a      	b.n	75b4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    753e:	68bb      	ldr	r3, [r7, #8]
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	2100      	movs	r1, #0
    7544:	0018      	movs	r0, r3
    7546:	4b1e      	ldr	r3, [pc, #120]	; (75c0 <spi_select_slave+0xe0>)
    7548:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    754a:	68bb      	ldr	r3, [r7, #8]
    754c:	789b      	ldrb	r3, [r3, #2]
    754e:	b29a      	uxth	r2, r3
    7550:	68fb      	ldr	r3, [r7, #12]
    7552:	0011      	movs	r1, r2
    7554:	0018      	movs	r0, r3
    7556:	4b1b      	ldr	r3, [pc, #108]	; (75c4 <spi_select_slave+0xe4>)
    7558:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    755a:	68fb      	ldr	r3, [r7, #12]
    755c:	79db      	ldrb	r3, [r3, #7]
    755e:	2201      	movs	r2, #1
    7560:	4053      	eors	r3, r2
    7562:	b2db      	uxtb	r3, r3
    7564:	2b00      	cmp	r3, #0
    7566:	d024      	beq.n	75b2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    7568:	46c0      	nop			; (mov r8, r8)
    756a:	68fb      	ldr	r3, [r7, #12]
    756c:	0018      	movs	r0, r3
    756e:	4b16      	ldr	r3, [pc, #88]	; (75c8 <spi_select_slave+0xe8>)
    7570:	4798      	blx	r3
    7572:	0003      	movs	r3, r0
    7574:	001a      	movs	r2, r3
    7576:	2301      	movs	r3, #1
    7578:	4053      	eors	r3, r2
    757a:	b2db      	uxtb	r3, r3
    757c:	2b00      	cmp	r3, #0
    757e:	d1f4      	bne.n	756a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    7580:	2316      	movs	r3, #22
    7582:	18fb      	adds	r3, r7, r3
    7584:	2200      	movs	r2, #0
    7586:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    7588:	2316      	movs	r3, #22
    758a:	18fa      	adds	r2, r7, r3
    758c:	68fb      	ldr	r3, [r7, #12]
    758e:	0011      	movs	r1, r2
    7590:	0018      	movs	r0, r3
    7592:	4b0e      	ldr	r3, [pc, #56]	; (75cc <spi_select_slave+0xec>)
    7594:	4798      	blx	r3
    7596:	e00c      	b.n	75b2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    7598:	68bb      	ldr	r3, [r7, #8]
    759a:	781b      	ldrb	r3, [r3, #0]
    759c:	2100      	movs	r1, #0
    759e:	0018      	movs	r0, r3
    75a0:	4b07      	ldr	r3, [pc, #28]	; (75c0 <spi_select_slave+0xe0>)
    75a2:	4798      	blx	r3
    75a4:	e005      	b.n	75b2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    75a6:	68bb      	ldr	r3, [r7, #8]
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	2101      	movs	r1, #1
    75ac:	0018      	movs	r0, r3
    75ae:	4b04      	ldr	r3, [pc, #16]	; (75c0 <spi_select_slave+0xe0>)
    75b0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    75b2:	2300      	movs	r3, #0
}
    75b4:	0018      	movs	r0, r3
    75b6:	46bd      	mov	sp, r7
    75b8:	b006      	add	sp, #24
    75ba:	bd80      	pop	{r7, pc}
    75bc:	00007021 	.word	0x00007021
    75c0:	00006f39 	.word	0x00006f39
    75c4:	00007071 	.word	0x00007071
    75c8:	00007049 	.word	0x00007049
    75cc:	000070b9 	.word	0x000070b9

000075d0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    75d0:	b580      	push	{r7, lr}
    75d2:	b084      	sub	sp, #16
    75d4:	af00      	add	r7, sp, #0
    75d6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    75d8:	687b      	ldr	r3, [r7, #4]
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	b2da      	uxtb	r2, r3
    75e6:	230e      	movs	r3, #14
    75e8:	18fb      	adds	r3, r7, r3
    75ea:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75f0:	1c5a      	adds	r2, r3, #1
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    75f6:	687b      	ldr	r3, [r7, #4]
    75f8:	799b      	ldrb	r3, [r3, #6]
    75fa:	2b01      	cmp	r3, #1
    75fc:	d113      	bne.n	7626 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7602:	781b      	ldrb	r3, [r3, #0]
    7604:	b2db      	uxtb	r3, r3
    7606:	021b      	lsls	r3, r3, #8
    7608:	b21a      	sxth	r2, r3
    760a:	230e      	movs	r3, #14
    760c:	18fb      	adds	r3, r7, r3
    760e:	2100      	movs	r1, #0
    7610:	5e5b      	ldrsh	r3, [r3, r1]
    7612:	4313      	orrs	r3, r2
    7614:	b21a      	sxth	r2, r3
    7616:	230e      	movs	r3, #14
    7618:	18fb      	adds	r3, r7, r3
    761a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7620:	1c5a      	adds	r2, r3, #1
    7622:	687b      	ldr	r3, [r7, #4]
    7624:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    7626:	230e      	movs	r3, #14
    7628:	18fb      	adds	r3, r7, r3
    762a:	881b      	ldrh	r3, [r3, #0]
    762c:	05db      	lsls	r3, r3, #23
    762e:	0dda      	lsrs	r2, r3, #23
    7630:	68bb      	ldr	r3, [r7, #8]
    7632:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7638:	b29b      	uxth	r3, r3
    763a:	3b01      	subs	r3, #1
    763c:	b29a      	uxth	r2, r3
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7642:	46c0      	nop			; (mov r8, r8)
    7644:	46bd      	mov	sp, r7
    7646:	b004      	add	sp, #16
    7648:	bd80      	pop	{r7, pc}
    764a:	46c0      	nop			; (mov r8, r8)

0000764c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    764c:	b580      	push	{r7, lr}
    764e:	b084      	sub	sp, #16
    7650:	af00      	add	r7, sp, #0
    7652:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	681b      	ldr	r3, [r3, #0]
    7658:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    765a:	4b08      	ldr	r3, [pc, #32]	; (767c <_spi_write_dummy+0x30>)
    765c:	881b      	ldrh	r3, [r3, #0]
    765e:	001a      	movs	r2, r3
    7660:	68fb      	ldr	r3, [r7, #12]
    7662:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7668:	b29b      	uxth	r3, r3
    766a:	3b01      	subs	r3, #1
    766c:	b29a      	uxth	r2, r3
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	865a      	strh	r2, [r3, #50]	; 0x32
}
    7672:	46c0      	nop			; (mov r8, r8)
    7674:	46bd      	mov	sp, r7
    7676:	b004      	add	sp, #16
    7678:	bd80      	pop	{r7, pc}
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	2000035c 	.word	0x2000035c

00007680 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    7680:	b580      	push	{r7, lr}
    7682:	b084      	sub	sp, #16
    7684:	af00      	add	r7, sp, #0
    7686:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	681b      	ldr	r3, [r3, #0]
    768c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    768e:	230a      	movs	r3, #10
    7690:	18fb      	adds	r3, r7, r3
    7692:	2200      	movs	r2, #0
    7694:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    7696:	68fb      	ldr	r3, [r7, #12]
    7698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    769a:	230a      	movs	r3, #10
    769c:	18fb      	adds	r3, r7, r3
    769e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    76a4:	b29b      	uxth	r3, r3
    76a6:	3b01      	subs	r3, #1
    76a8:	b29a      	uxth	r2, r3
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	865a      	strh	r2, [r3, #50]	; 0x32
}
    76ae:	46c0      	nop			; (mov r8, r8)
    76b0:	46bd      	mov	sp, r7
    76b2:	b004      	add	sp, #16
    76b4:	bd80      	pop	{r7, pc}
    76b6:	46c0      	nop			; (mov r8, r8)

000076b8 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    76b8:	b580      	push	{r7, lr}
    76ba:	b084      	sub	sp, #16
    76bc:	af00      	add	r7, sp, #0
    76be:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	681b      	ldr	r3, [r3, #0]
    76c4:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    76c6:	68fb      	ldr	r3, [r7, #12]
    76c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76ca:	b29a      	uxth	r2, r3
    76cc:	230a      	movs	r3, #10
    76ce:	18fb      	adds	r3, r7, r3
    76d0:	05d2      	lsls	r2, r2, #23
    76d2:	0dd2      	lsrs	r2, r2, #23
    76d4:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    76d6:	687b      	ldr	r3, [r7, #4]
    76d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76da:	220a      	movs	r2, #10
    76dc:	18ba      	adds	r2, r7, r2
    76de:	8812      	ldrh	r2, [r2, #0]
    76e0:	b2d2      	uxtb	r2, r2
    76e2:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76e8:	1c5a      	adds	r2, r3, #1
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	799b      	ldrb	r3, [r3, #6]
    76f2:	2b01      	cmp	r3, #1
    76f4:	d10d      	bne.n	7712 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76fa:	220a      	movs	r2, #10
    76fc:	18ba      	adds	r2, r7, r2
    76fe:	8812      	ldrh	r2, [r2, #0]
    7700:	0a12      	lsrs	r2, r2, #8
    7702:	b292      	uxth	r2, r2
    7704:	b2d2      	uxtb	r2, r2
    7706:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    770c:	1c5a      	adds	r2, r3, #1
    770e:	687b      	ldr	r3, [r7, #4]
    7710:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    7712:	687b      	ldr	r3, [r7, #4]
    7714:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    7716:	b29b      	uxth	r3, r3
    7718:	3b01      	subs	r3, #1
    771a:	b29a      	uxth	r2, r3
    771c:	687b      	ldr	r3, [r7, #4]
    771e:	861a      	strh	r2, [r3, #48]	; 0x30
}
    7720:	46c0      	nop			; (mov r8, r8)
    7722:	46bd      	mov	sp, r7
    7724:	b004      	add	sp, #16
    7726:	bd80      	pop	{r7, pc}

00007728 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    7728:	b580      	push	{r7, lr}
    772a:	b086      	sub	sp, #24
    772c:	af00      	add	r7, sp, #0
    772e:	0002      	movs	r2, r0
    7730:	1dfb      	adds	r3, r7, #7
    7732:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    7734:	1dfb      	adds	r3, r7, #7
    7736:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    7738:	4b96      	ldr	r3, [pc, #600]	; (7994 <_spi_interrupt_handler+0x26c>)
    773a:	0092      	lsls	r2, r2, #2
    773c:	58d3      	ldr	r3, [r2, r3]
    773e:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7740:	697b      	ldr	r3, [r7, #20]
    7742:	681b      	ldr	r3, [r3, #0]
    7744:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    7746:	697b      	ldr	r3, [r7, #20]
    7748:	2237      	movs	r2, #55	; 0x37
    774a:	5c9a      	ldrb	r2, [r3, r2]
    774c:	697b      	ldr	r3, [r7, #20]
    774e:	2136      	movs	r1, #54	; 0x36
    7750:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    7752:	230f      	movs	r3, #15
    7754:	18fb      	adds	r3, r7, r3
    7756:	400a      	ands	r2, r1
    7758:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    775a:	693b      	ldr	r3, [r7, #16]
    775c:	7e1b      	ldrb	r3, [r3, #24]
    775e:	b2da      	uxtb	r2, r3
    7760:	230c      	movs	r3, #12
    7762:	18fb      	adds	r3, r7, r3
    7764:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    7766:	693b      	ldr	r3, [r7, #16]
    7768:	7d9b      	ldrb	r3, [r3, #22]
    776a:	b2db      	uxtb	r3, r3
    776c:	b29a      	uxth	r2, r3
    776e:	230c      	movs	r3, #12
    7770:	18fb      	adds	r3, r7, r3
    7772:	210c      	movs	r1, #12
    7774:	1879      	adds	r1, r7, r1
    7776:	8809      	ldrh	r1, [r1, #0]
    7778:	400a      	ands	r2, r1
    777a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    777c:	230c      	movs	r3, #12
    777e:	18fb      	adds	r3, r7, r3
    7780:	881b      	ldrh	r3, [r3, #0]
    7782:	2201      	movs	r2, #1
    7784:	4013      	ands	r3, r2
    7786:	d038      	beq.n	77fa <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7788:	697b      	ldr	r3, [r7, #20]
    778a:	795b      	ldrb	r3, [r3, #5]
    778c:	2b01      	cmp	r3, #1
    778e:	d110      	bne.n	77b2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    7790:	697b      	ldr	r3, [r7, #20]
    7792:	7a5b      	ldrb	r3, [r3, #9]
    7794:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7796:	2b00      	cmp	r3, #0
    7798:	d10b      	bne.n	77b2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    779a:	697b      	ldr	r3, [r7, #20]
    779c:	0018      	movs	r0, r3
    779e:	4b7e      	ldr	r3, [pc, #504]	; (7998 <_spi_interrupt_handler+0x270>)
    77a0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    77a2:	697b      	ldr	r3, [r7, #20]
    77a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    77a6:	b29b      	uxth	r3, r3
    77a8:	2b00      	cmp	r3, #0
    77aa:	d102      	bne.n	77b2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    77ac:	693b      	ldr	r3, [r7, #16]
    77ae:	2201      	movs	r2, #1
    77b0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    77b2:	697b      	ldr	r3, [r7, #20]
    77b4:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    77b6:	2b01      	cmp	r3, #1
    77b8:	d11f      	bne.n	77fa <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    77ba:	697b      	ldr	r3, [r7, #20]
    77bc:	7a5b      	ldrb	r3, [r3, #9]
    77be:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    77c0:	2b00      	cmp	r3, #0
    77c2:	d01a      	beq.n	77fa <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    77c4:	697b      	ldr	r3, [r7, #20]
    77c6:	0018      	movs	r0, r3
    77c8:	4b74      	ldr	r3, [pc, #464]	; (799c <_spi_interrupt_handler+0x274>)
    77ca:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    77cc:	697b      	ldr	r3, [r7, #20]
    77ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    77d0:	b29b      	uxth	r3, r3
    77d2:	2b00      	cmp	r3, #0
    77d4:	d111      	bne.n	77fa <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    77d6:	693b      	ldr	r3, [r7, #16]
    77d8:	2201      	movs	r2, #1
    77da:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    77dc:	697b      	ldr	r3, [r7, #20]
    77de:	7a5b      	ldrb	r3, [r3, #9]
    77e0:	b2db      	uxtb	r3, r3
    77e2:	2b01      	cmp	r3, #1
    77e4:	d109      	bne.n	77fa <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    77e6:	697b      	ldr	r3, [r7, #20]
    77e8:	79db      	ldrb	r3, [r3, #7]
    77ea:	2201      	movs	r2, #1
    77ec:	4053      	eors	r3, r2
    77ee:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    77f0:	2b00      	cmp	r3, #0
    77f2:	d002      	beq.n	77fa <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    77f4:	693b      	ldr	r3, [r7, #16]
    77f6:	2202      	movs	r2, #2
    77f8:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    77fa:	230c      	movs	r3, #12
    77fc:	18fb      	adds	r3, r7, r3
    77fe:	881b      	ldrh	r3, [r3, #0]
    7800:	2204      	movs	r2, #4
    7802:	4013      	ands	r3, r2
    7804:	d100      	bne.n	7808 <_spi_interrupt_handler+0xe0>
    7806:	e07e      	b.n	7906 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7808:	693b      	ldr	r3, [r7, #16]
    780a:	8b5b      	ldrh	r3, [r3, #26]
    780c:	b29b      	uxth	r3, r3
    780e:	001a      	movs	r2, r3
    7810:	2304      	movs	r3, #4
    7812:	4013      	ands	r3, r2
    7814:	d022      	beq.n	785c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    7816:	697b      	ldr	r3, [r7, #20]
    7818:	7a5b      	ldrb	r3, [r3, #9]
    781a:	b2db      	uxtb	r3, r3
    781c:	2b01      	cmp	r3, #1
    781e:	d014      	beq.n	784a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7820:	697b      	ldr	r3, [r7, #20]
    7822:	2238      	movs	r2, #56	; 0x38
    7824:	211e      	movs	r1, #30
    7826:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    7828:	697b      	ldr	r3, [r7, #20]
    782a:	2203      	movs	r2, #3
    782c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    782e:	693b      	ldr	r3, [r7, #16]
    7830:	2205      	movs	r2, #5
    7832:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    7834:	230f      	movs	r3, #15
    7836:	18fb      	adds	r3, r7, r3
    7838:	781b      	ldrb	r3, [r3, #0]
    783a:	2208      	movs	r2, #8
    783c:	4013      	ands	r3, r2
    783e:	d004      	beq.n	784a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7840:	697b      	ldr	r3, [r7, #20]
    7842:	699b      	ldr	r3, [r3, #24]
    7844:	697a      	ldr	r2, [r7, #20]
    7846:	0010      	movs	r0, r2
    7848:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    784a:	693b      	ldr	r3, [r7, #16]
    784c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    784e:	230a      	movs	r3, #10
    7850:	18fb      	adds	r3, r7, r3
    7852:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7854:	693b      	ldr	r3, [r7, #16]
    7856:	2204      	movs	r2, #4
    7858:	835a      	strh	r2, [r3, #26]
    785a:	e054      	b.n	7906 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    785c:	697b      	ldr	r3, [r7, #20]
    785e:	7a5b      	ldrb	r3, [r3, #9]
    7860:	b2db      	uxtb	r3, r3
    7862:	2b01      	cmp	r3, #1
    7864:	d11e      	bne.n	78a4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    7866:	697b      	ldr	r3, [r7, #20]
    7868:	0018      	movs	r0, r3
    786a:	4b4d      	ldr	r3, [pc, #308]	; (79a0 <_spi_interrupt_handler+0x278>)
    786c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    786e:	697b      	ldr	r3, [r7, #20]
    7870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7872:	b29b      	uxth	r3, r3
    7874:	2b00      	cmp	r3, #0
    7876:	d146      	bne.n	7906 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    7878:	693b      	ldr	r3, [r7, #16]
    787a:	2204      	movs	r2, #4
    787c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    787e:	697b      	ldr	r3, [r7, #20]
    7880:	2238      	movs	r2, #56	; 0x38
    7882:	2100      	movs	r1, #0
    7884:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    7886:	697b      	ldr	r3, [r7, #20]
    7888:	2203      	movs	r2, #3
    788a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    788c:	230f      	movs	r3, #15
    788e:	18fb      	adds	r3, r7, r3
    7890:	781b      	ldrb	r3, [r3, #0]
    7892:	2201      	movs	r2, #1
    7894:	4013      	ands	r3, r2
    7896:	d036      	beq.n	7906 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    7898:	697b      	ldr	r3, [r7, #20]
    789a:	68db      	ldr	r3, [r3, #12]
    789c:	697a      	ldr	r2, [r7, #20]
    789e:	0010      	movs	r0, r2
    78a0:	4798      	blx	r3
    78a2:	e030      	b.n	7906 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    78a4:	697b      	ldr	r3, [r7, #20]
    78a6:	0018      	movs	r0, r3
    78a8:	4b3e      	ldr	r3, [pc, #248]	; (79a4 <_spi_interrupt_handler+0x27c>)
    78aa:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    78ac:	697b      	ldr	r3, [r7, #20]
    78ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    78b0:	b29b      	uxth	r3, r3
    78b2:	2b00      	cmp	r3, #0
    78b4:	d127      	bne.n	7906 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    78b6:	697b      	ldr	r3, [r7, #20]
    78b8:	2238      	movs	r2, #56	; 0x38
    78ba:	2100      	movs	r1, #0
    78bc:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    78be:	693b      	ldr	r3, [r7, #16]
    78c0:	2204      	movs	r2, #4
    78c2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    78c4:	697b      	ldr	r3, [r7, #20]
    78c6:	7a5b      	ldrb	r3, [r3, #9]
    78c8:	b2db      	uxtb	r3, r3
    78ca:	2b02      	cmp	r3, #2
    78cc:	d10b      	bne.n	78e6 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    78ce:	230f      	movs	r3, #15
    78d0:	18fb      	adds	r3, r7, r3
    78d2:	781b      	ldrb	r3, [r3, #0]
    78d4:	2204      	movs	r2, #4
    78d6:	4013      	ands	r3, r2
    78d8:	d015      	beq.n	7906 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    78da:	697b      	ldr	r3, [r7, #20]
    78dc:	695b      	ldr	r3, [r3, #20]
    78de:	697a      	ldr	r2, [r7, #20]
    78e0:	0010      	movs	r0, r2
    78e2:	4798      	blx	r3
    78e4:	e00f      	b.n	7906 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    78e6:	697b      	ldr	r3, [r7, #20]
    78e8:	7a5b      	ldrb	r3, [r3, #9]
    78ea:	b2db      	uxtb	r3, r3
    78ec:	2b00      	cmp	r3, #0
    78ee:	d10a      	bne.n	7906 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    78f0:	230f      	movs	r3, #15
    78f2:	18fb      	adds	r3, r7, r3
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	2202      	movs	r2, #2
    78f8:	4013      	ands	r3, r2
    78fa:	d004      	beq.n	7906 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    78fc:	697b      	ldr	r3, [r7, #20]
    78fe:	691b      	ldr	r3, [r3, #16]
    7900:	697a      	ldr	r2, [r7, #20]
    7902:	0010      	movs	r0, r2
    7904:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    7906:	230c      	movs	r3, #12
    7908:	18fb      	adds	r3, r7, r3
    790a:	881b      	ldrh	r3, [r3, #0]
    790c:	2202      	movs	r2, #2
    790e:	4013      	ands	r3, r2
    7910:	d024      	beq.n	795c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7912:	697b      	ldr	r3, [r7, #20]
    7914:	795b      	ldrb	r3, [r3, #5]
    7916:	2b01      	cmp	r3, #1
    7918:	d120      	bne.n	795c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    791a:	697b      	ldr	r3, [r7, #20]
    791c:	7a5b      	ldrb	r3, [r3, #9]
    791e:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7920:	2b01      	cmp	r3, #1
    7922:	d11b      	bne.n	795c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    7924:	697b      	ldr	r3, [r7, #20]
    7926:	79db      	ldrb	r3, [r3, #7]
    7928:	2201      	movs	r2, #1
    792a:	4053      	eors	r3, r2
    792c:	b2db      	uxtb	r3, r3
    792e:	2b00      	cmp	r3, #0
    7930:	d014      	beq.n	795c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7932:	693b      	ldr	r3, [r7, #16]
    7934:	2202      	movs	r2, #2
    7936:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    7938:	697b      	ldr	r3, [r7, #20]
    793a:	2203      	movs	r2, #3
    793c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    793e:	697b      	ldr	r3, [r7, #20]
    7940:	2238      	movs	r2, #56	; 0x38
    7942:	2100      	movs	r1, #0
    7944:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    7946:	230f      	movs	r3, #15
    7948:	18fb      	adds	r3, r7, r3
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	2201      	movs	r2, #1
    794e:	4013      	ands	r3, r2
    7950:	d004      	beq.n	795c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    7952:	697b      	ldr	r3, [r7, #20]
    7954:	68db      	ldr	r3, [r3, #12]
    7956:	697a      	ldr	r2, [r7, #20]
    7958:	0010      	movs	r0, r2
    795a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    795c:	230c      	movs	r3, #12
    795e:	18fb      	adds	r3, r7, r3
    7960:	881b      	ldrh	r3, [r3, #0]
    7962:	2280      	movs	r2, #128	; 0x80
    7964:	4013      	ands	r3, r2
    7966:	d010      	beq.n	798a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7968:	693b      	ldr	r3, [r7, #16]
    796a:	2280      	movs	r2, #128	; 0x80
    796c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    796e:	693b      	ldr	r3, [r7, #16]
    7970:	2280      	movs	r2, #128	; 0x80
    7972:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    7974:	230f      	movs	r3, #15
    7976:	18fb      	adds	r3, r7, r3
    7978:	781b      	ldrb	r3, [r3, #0]
    797a:	2240      	movs	r2, #64	; 0x40
    797c:	4013      	ands	r3, r2
    797e:	d004      	beq.n	798a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    7980:	697b      	ldr	r3, [r7, #20]
    7982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7984:	697a      	ldr	r2, [r7, #20]
    7986:	0010      	movs	r0, r2
    7988:	4798      	blx	r3
		}
	}
#  endif
}
    798a:	46c0      	nop			; (mov r8, r8)
    798c:	46bd      	mov	sp, r7
    798e:	b006      	add	sp, #24
    7990:	bd80      	pop	{r7, pc}
    7992:	46c0      	nop			; (mov r8, r8)
    7994:	20000344 	.word	0x20000344
    7998:	0000764d 	.word	0x0000764d
    799c:	000075d1 	.word	0x000075d1
    79a0:	00007681 	.word	0x00007681
    79a4:	000076b9 	.word	0x000076b9

000079a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    79a8:	b580      	push	{r7, lr}
    79aa:	b082      	sub	sp, #8
    79ac:	af00      	add	r7, sp, #0
    79ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	2200      	movs	r2, #0
    79b4:	701a      	strb	r2, [r3, #0]
}
    79b6:	46c0      	nop			; (mov r8, r8)
    79b8:	46bd      	mov	sp, r7
    79ba:	b002      	add	sp, #8
    79bc:	bd80      	pop	{r7, pc}
    79be:	46c0      	nop			; (mov r8, r8)

000079c0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    79c0:	b580      	push	{r7, lr}
    79c2:	b082      	sub	sp, #8
    79c4:	af00      	add	r7, sp, #0
    79c6:	0002      	movs	r2, r0
    79c8:	6039      	str	r1, [r7, #0]
    79ca:	1dfb      	adds	r3, r7, #7
    79cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    79ce:	1dfb      	adds	r3, r7, #7
    79d0:	781b      	ldrb	r3, [r3, #0]
    79d2:	2b01      	cmp	r3, #1
    79d4:	d00a      	beq.n	79ec <system_apb_clock_set_mask+0x2c>
    79d6:	2b02      	cmp	r3, #2
    79d8:	d00f      	beq.n	79fa <system_apb_clock_set_mask+0x3a>
    79da:	2b00      	cmp	r3, #0
    79dc:	d114      	bne.n	7a08 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    79de:	4b0e      	ldr	r3, [pc, #56]	; (7a18 <system_apb_clock_set_mask+0x58>)
    79e0:	4a0d      	ldr	r2, [pc, #52]	; (7a18 <system_apb_clock_set_mask+0x58>)
    79e2:	6991      	ldr	r1, [r2, #24]
    79e4:	683a      	ldr	r2, [r7, #0]
    79e6:	430a      	orrs	r2, r1
    79e8:	619a      	str	r2, [r3, #24]
			break;
    79ea:	e00f      	b.n	7a0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    79ec:	4b0a      	ldr	r3, [pc, #40]	; (7a18 <system_apb_clock_set_mask+0x58>)
    79ee:	4a0a      	ldr	r2, [pc, #40]	; (7a18 <system_apb_clock_set_mask+0x58>)
    79f0:	69d1      	ldr	r1, [r2, #28]
    79f2:	683a      	ldr	r2, [r7, #0]
    79f4:	430a      	orrs	r2, r1
    79f6:	61da      	str	r2, [r3, #28]
			break;
    79f8:	e008      	b.n	7a0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    79fa:	4b07      	ldr	r3, [pc, #28]	; (7a18 <system_apb_clock_set_mask+0x58>)
    79fc:	4a06      	ldr	r2, [pc, #24]	; (7a18 <system_apb_clock_set_mask+0x58>)
    79fe:	6a11      	ldr	r1, [r2, #32]
    7a00:	683a      	ldr	r2, [r7, #0]
    7a02:	430a      	orrs	r2, r1
    7a04:	621a      	str	r2, [r3, #32]
			break;
    7a06:	e001      	b.n	7a0c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7a08:	2317      	movs	r3, #23
    7a0a:	e000      	b.n	7a0e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    7a0c:	2300      	movs	r3, #0
}
    7a0e:	0018      	movs	r0, r3
    7a10:	46bd      	mov	sp, r7
    7a12:	b002      	add	sp, #8
    7a14:	bd80      	pop	{r7, pc}
    7a16:	46c0      	nop			; (mov r8, r8)
    7a18:	40000400 	.word	0x40000400

00007a1c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    7a1c:	b580      	push	{r7, lr}
    7a1e:	b082      	sub	sp, #8
    7a20:	af00      	add	r7, sp, #0
    7a22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7a24:	687b      	ldr	r3, [r7, #4]
    7a26:	2280      	movs	r2, #128	; 0x80
    7a28:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a2a:	687b      	ldr	r3, [r7, #4]
    7a2c:	2200      	movs	r2, #0
    7a2e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	2201      	movs	r2, #1
    7a34:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	2200      	movs	r2, #0
    7a3a:	70da      	strb	r2, [r3, #3]
}
    7a3c:	46c0      	nop			; (mov r8, r8)
    7a3e:	46bd      	mov	sp, r7
    7a40:	b002      	add	sp, #8
    7a42:	bd80      	pop	{r7, pc}

00007a44 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    7a44:	b580      	push	{r7, lr}
    7a46:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7a48:	4b05      	ldr	r3, [pc, #20]	; (7a60 <system_is_debugger_present+0x1c>)
    7a4a:	789b      	ldrb	r3, [r3, #2]
    7a4c:	b2db      	uxtb	r3, r3
    7a4e:	001a      	movs	r2, r3
    7a50:	2302      	movs	r3, #2
    7a52:	4013      	ands	r3, r2
    7a54:	1e5a      	subs	r2, r3, #1
    7a56:	4193      	sbcs	r3, r2
    7a58:	b2db      	uxtb	r3, r3
}
    7a5a:	0018      	movs	r0, r3
    7a5c:	46bd      	mov	sp, r7
    7a5e:	bd80      	pop	{r7, pc}
    7a60:	41002000 	.word	0x41002000

00007a64 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    7a64:	b580      	push	{r7, lr}
    7a66:	b084      	sub	sp, #16
    7a68:	af00      	add	r7, sp, #0
    7a6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	681b      	ldr	r3, [r3, #0]
    7a70:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7a72:	68fb      	ldr	r3, [r7, #12]
    7a74:	69db      	ldr	r3, [r3, #28]
    7a76:	1e5a      	subs	r2, r3, #1
    7a78:	4193      	sbcs	r3, r2
    7a7a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    7a7c:	0018      	movs	r0, r3
    7a7e:	46bd      	mov	sp, r7
    7a80:	b004      	add	sp, #16
    7a82:	bd80      	pop	{r7, pc}

00007a84 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    7a84:	b580      	push	{r7, lr}
    7a86:	b082      	sub	sp, #8
    7a88:	af00      	add	r7, sp, #0
    7a8a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    7a8c:	46c0      	nop			; (mov r8, r8)
    7a8e:	687b      	ldr	r3, [r7, #4]
    7a90:	0018      	movs	r0, r3
    7a92:	4b04      	ldr	r3, [pc, #16]	; (7aa4 <_usart_wait_for_sync+0x20>)
    7a94:	4798      	blx	r3
    7a96:	1e03      	subs	r3, r0, #0
    7a98:	d1f9      	bne.n	7a8e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    7a9a:	46c0      	nop			; (mov r8, r8)
    7a9c:	46bd      	mov	sp, r7
    7a9e:	b002      	add	sp, #8
    7aa0:	bd80      	pop	{r7, pc}
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	00007a65 	.word	0x00007a65

00007aa8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    7aa8:	b5b0      	push	{r4, r5, r7, lr}
    7aaa:	b08c      	sub	sp, #48	; 0x30
    7aac:	af02      	add	r7, sp, #8
    7aae:	6078      	str	r0, [r7, #4]
    7ab0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	681b      	ldr	r3, [r3, #0]
    7ab6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	681b      	ldr	r3, [r3, #0]
    7abc:	0018      	movs	r0, r3
    7abe:	4ba8      	ldr	r3, [pc, #672]	; (7d60 <_usart_set_config+0x2b8>)
    7ac0:	4798      	blx	r3
    7ac2:	0003      	movs	r3, r0
    7ac4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7ac6:	697b      	ldr	r3, [r7, #20]
    7ac8:	3314      	adds	r3, #20
    7aca:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    7acc:	2300      	movs	r3, #0
    7ace:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    7ad0:	2300      	movs	r3, #0
    7ad2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    7ad4:	230a      	movs	r3, #10
    7ad6:	18fb      	adds	r3, r7, r3
    7ad8:	2200      	movs	r2, #0
    7ada:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7adc:	231f      	movs	r3, #31
    7ade:	18fb      	adds	r3, r7, r3
    7ae0:	2200      	movs	r2, #0
    7ae2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7ae4:	231e      	movs	r3, #30
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	2210      	movs	r2, #16
    7aea:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    7aec:	683b      	ldr	r3, [r7, #0]
    7aee:	8a1b      	ldrh	r3, [r3, #16]
    7af0:	2280      	movs	r2, #128	; 0x80
    7af2:	01d2      	lsls	r2, r2, #7
    7af4:	4293      	cmp	r3, r2
    7af6:	d01c      	beq.n	7b32 <_usart_set_config+0x8a>
    7af8:	2280      	movs	r2, #128	; 0x80
    7afa:	01d2      	lsls	r2, r2, #7
    7afc:	4293      	cmp	r3, r2
    7afe:	dc06      	bgt.n	7b0e <_usart_set_config+0x66>
    7b00:	2b00      	cmp	r3, #0
    7b02:	d00d      	beq.n	7b20 <_usart_set_config+0x78>
    7b04:	2280      	movs	r2, #128	; 0x80
    7b06:	0192      	lsls	r2, r2, #6
    7b08:	4293      	cmp	r3, r2
    7b0a:	d024      	beq.n	7b56 <_usart_set_config+0xae>
    7b0c:	e035      	b.n	7b7a <_usart_set_config+0xd2>
    7b0e:	22c0      	movs	r2, #192	; 0xc0
    7b10:	01d2      	lsls	r2, r2, #7
    7b12:	4293      	cmp	r3, r2
    7b14:	d028      	beq.n	7b68 <_usart_set_config+0xc0>
    7b16:	2280      	movs	r2, #128	; 0x80
    7b18:	0212      	lsls	r2, r2, #8
    7b1a:	4293      	cmp	r3, r2
    7b1c:	d012      	beq.n	7b44 <_usart_set_config+0x9c>
    7b1e:	e02c      	b.n	7b7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7b20:	231f      	movs	r3, #31
    7b22:	18fb      	adds	r3, r7, r3
    7b24:	2200      	movs	r2, #0
    7b26:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7b28:	231e      	movs	r3, #30
    7b2a:	18fb      	adds	r3, r7, r3
    7b2c:	2210      	movs	r2, #16
    7b2e:	701a      	strb	r2, [r3, #0]
			break;
    7b30:	e023      	b.n	7b7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7b32:	231f      	movs	r3, #31
    7b34:	18fb      	adds	r3, r7, r3
    7b36:	2200      	movs	r2, #0
    7b38:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7b3a:	231e      	movs	r3, #30
    7b3c:	18fb      	adds	r3, r7, r3
    7b3e:	2208      	movs	r2, #8
    7b40:	701a      	strb	r2, [r3, #0]
			break;
    7b42:	e01a      	b.n	7b7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7b44:	231f      	movs	r3, #31
    7b46:	18fb      	adds	r3, r7, r3
    7b48:	2200      	movs	r2, #0
    7b4a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    7b4c:	231e      	movs	r3, #30
    7b4e:	18fb      	adds	r3, r7, r3
    7b50:	2203      	movs	r2, #3
    7b52:	701a      	strb	r2, [r3, #0]
			break;
    7b54:	e011      	b.n	7b7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7b56:	231f      	movs	r3, #31
    7b58:	18fb      	adds	r3, r7, r3
    7b5a:	2201      	movs	r2, #1
    7b5c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7b5e:	231e      	movs	r3, #30
    7b60:	18fb      	adds	r3, r7, r3
    7b62:	2210      	movs	r2, #16
    7b64:	701a      	strb	r2, [r3, #0]
			break;
    7b66:	e008      	b.n	7b7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7b68:	231f      	movs	r3, #31
    7b6a:	18fb      	adds	r3, r7, r3
    7b6c:	2201      	movs	r2, #1
    7b6e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7b70:	231e      	movs	r3, #30
    7b72:	18fb      	adds	r3, r7, r3
    7b74:	2208      	movs	r2, #8
    7b76:	701a      	strb	r2, [r3, #0]
			break;
    7b78:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    7b7a:	683b      	ldr	r3, [r7, #0]
    7b7c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    7b7e:	683b      	ldr	r3, [r7, #0]
    7b80:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    7b82:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    7b84:	683b      	ldr	r3, [r7, #0]
    7b86:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    7b88:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    7b8a:	683a      	ldr	r2, [r7, #0]
    7b8c:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    7b8e:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7b90:	683a      	ldr	r2, [r7, #0]
    7b92:	7e12      	ldrb	r2, [r2, #24]
    7b94:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    7b96:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7b98:	683a      	ldr	r2, [r7, #0]
    7b9a:	2126      	movs	r1, #38	; 0x26
    7b9c:	5c52      	ldrb	r2, [r2, r1]
    7b9e:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    7ba0:	4313      	orrs	r3, r2
    7ba2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    7ba4:	231d      	movs	r3, #29
    7ba6:	18fb      	adds	r3, r7, r3
    7ba8:	2200      	movs	r2, #0
    7baa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    7bac:	683b      	ldr	r3, [r7, #0]
    7bae:	685b      	ldr	r3, [r3, #4]
    7bb0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    7bb2:	68fb      	ldr	r3, [r7, #12]
    7bb4:	2b00      	cmp	r3, #0
    7bb6:	d01e      	beq.n	7bf6 <_usart_set_config+0x14e>
    7bb8:	2280      	movs	r2, #128	; 0x80
    7bba:	0552      	lsls	r2, r2, #21
    7bbc:	4293      	cmp	r3, r2
    7bbe:	d14f      	bne.n	7c60 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    7bc0:	683b      	ldr	r3, [r7, #0]
    7bc2:	2227      	movs	r2, #39	; 0x27
    7bc4:	5c9b      	ldrb	r3, [r3, r2]
    7bc6:	2201      	movs	r2, #1
    7bc8:	4053      	eors	r3, r2
    7bca:	b2db      	uxtb	r3, r3
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d046      	beq.n	7c5e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    7bd0:	683b      	ldr	r3, [r7, #0]
    7bd2:	6a1d      	ldr	r5, [r3, #32]
    7bd4:	693b      	ldr	r3, [r7, #16]
    7bd6:	b2db      	uxtb	r3, r3
    7bd8:	0018      	movs	r0, r3
    7bda:	4b62      	ldr	r3, [pc, #392]	; (7d64 <_usart_set_config+0x2bc>)
    7bdc:	4798      	blx	r3
    7bde:	0001      	movs	r1, r0
    7be0:	231d      	movs	r3, #29
    7be2:	18fc      	adds	r4, r7, r3
    7be4:	230a      	movs	r3, #10
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	001a      	movs	r2, r3
    7bea:	0028      	movs	r0, r5
    7bec:	4b5e      	ldr	r3, [pc, #376]	; (7d68 <_usart_set_config+0x2c0>)
    7bee:	4798      	blx	r3
    7bf0:	0003      	movs	r3, r0
    7bf2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    7bf4:	e033      	b.n	7c5e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    7bf6:	683b      	ldr	r3, [r7, #0]
    7bf8:	2227      	movs	r2, #39	; 0x27
    7bfa:	5c9b      	ldrb	r3, [r3, r2]
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d014      	beq.n	7c2a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    7c00:	683b      	ldr	r3, [r7, #0]
    7c02:	6a18      	ldr	r0, [r3, #32]
    7c04:	683b      	ldr	r3, [r7, #0]
    7c06:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    7c08:	231d      	movs	r3, #29
    7c0a:	18fc      	adds	r4, r7, r3
    7c0c:	231f      	movs	r3, #31
    7c0e:	18fb      	adds	r3, r7, r3
    7c10:	781d      	ldrb	r5, [r3, #0]
    7c12:	230a      	movs	r3, #10
    7c14:	18fa      	adds	r2, r7, r3
    7c16:	231e      	movs	r3, #30
    7c18:	18fb      	adds	r3, r7, r3
    7c1a:	781b      	ldrb	r3, [r3, #0]
    7c1c:	9300      	str	r3, [sp, #0]
    7c1e:	002b      	movs	r3, r5
    7c20:	4d52      	ldr	r5, [pc, #328]	; (7d6c <_usart_set_config+0x2c4>)
    7c22:	47a8      	blx	r5
    7c24:	0003      	movs	r3, r0
    7c26:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    7c28:	e01a      	b.n	7c60 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    7c2a:	683b      	ldr	r3, [r7, #0]
    7c2c:	6a1d      	ldr	r5, [r3, #32]
    7c2e:	693b      	ldr	r3, [r7, #16]
    7c30:	b2db      	uxtb	r3, r3
    7c32:	0018      	movs	r0, r3
    7c34:	4b4b      	ldr	r3, [pc, #300]	; (7d64 <_usart_set_config+0x2bc>)
    7c36:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    7c38:	231d      	movs	r3, #29
    7c3a:	18fc      	adds	r4, r7, r3
    7c3c:	231f      	movs	r3, #31
    7c3e:	18fb      	adds	r3, r7, r3
    7c40:	7819      	ldrb	r1, [r3, #0]
    7c42:	230a      	movs	r3, #10
    7c44:	18fa      	adds	r2, r7, r3
    7c46:	231e      	movs	r3, #30
    7c48:	18fb      	adds	r3, r7, r3
    7c4a:	781b      	ldrb	r3, [r3, #0]
    7c4c:	9300      	str	r3, [sp, #0]
    7c4e:	000b      	movs	r3, r1
    7c50:	0001      	movs	r1, r0
    7c52:	0028      	movs	r0, r5
    7c54:	4d45      	ldr	r5, [pc, #276]	; (7d6c <_usart_set_config+0x2c4>)
    7c56:	47a8      	blx	r5
    7c58:	0003      	movs	r3, r0
    7c5a:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    7c5c:	e000      	b.n	7c60 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    7c5e:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    7c60:	231d      	movs	r3, #29
    7c62:	18fb      	adds	r3, r7, r3
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	2b00      	cmp	r3, #0
    7c68:	d003      	beq.n	7c72 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    7c6a:	231d      	movs	r3, #29
    7c6c:	18fb      	adds	r3, r7, r3
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	e071      	b.n	7d56 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    7c72:	683b      	ldr	r3, [r7, #0]
    7c74:	7e5b      	ldrb	r3, [r3, #25]
    7c76:	2b00      	cmp	r3, #0
    7c78:	d003      	beq.n	7c82 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    7c7a:	683b      	ldr	r3, [r7, #0]
    7c7c:	7e9a      	ldrb	r2, [r3, #26]
    7c7e:	69bb      	ldr	r3, [r7, #24]
    7c80:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	0018      	movs	r0, r3
    7c86:	4b3a      	ldr	r3, [pc, #232]	; (7d70 <_usart_set_config+0x2c8>)
    7c88:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    7c8a:	230a      	movs	r3, #10
    7c8c:	18fb      	adds	r3, r7, r3
    7c8e:	881a      	ldrh	r2, [r3, #0]
    7c90:	69bb      	ldr	r3, [r7, #24]
    7c92:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    7c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7c96:	68fb      	ldr	r3, [r7, #12]
    7c98:	4313      	orrs	r3, r2
    7c9a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    7c9c:	683b      	ldr	r3, [r7, #0]
    7c9e:	2227      	movs	r2, #39	; 0x27
    7ca0:	5c9b      	ldrb	r3, [r3, r2]
    7ca2:	2201      	movs	r2, #1
    7ca4:	4053      	eors	r3, r2
    7ca6:	b2db      	uxtb	r3, r3
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d003      	beq.n	7cb4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    7cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cae:	2204      	movs	r2, #4
    7cb0:	4313      	orrs	r3, r2
    7cb2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7cb4:	683b      	ldr	r3, [r7, #0]
    7cb6:	7e5b      	ldrb	r3, [r3, #25]
    7cb8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7cba:	683b      	ldr	r3, [r7, #0]
    7cbc:	7f1b      	ldrb	r3, [r3, #28]
    7cbe:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7cc0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    7cc2:	683b      	ldr	r3, [r7, #0]
    7cc4:	7f5b      	ldrb	r3, [r3, #29]
    7cc6:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7cc8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7cca:	683b      	ldr	r3, [r7, #0]
    7ccc:	2124      	movs	r1, #36	; 0x24
    7cce:	5c5b      	ldrb	r3, [r3, r1]
    7cd0:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    7cd2:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    7cd4:	683b      	ldr	r3, [r7, #0]
    7cd6:	2125      	movs	r1, #37	; 0x25
    7cd8:	5c5b      	ldrb	r3, [r3, r1]
    7cda:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7cdc:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    7cde:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    7ce0:	683b      	ldr	r3, [r7, #0]
    7ce2:	7adb      	ldrb	r3, [r3, #11]
    7ce4:	001a      	movs	r2, r3
    7ce6:	6a3b      	ldr	r3, [r7, #32]
    7ce8:	4313      	orrs	r3, r2
    7cea:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    7cec:	683b      	ldr	r3, [r7, #0]
    7cee:	891b      	ldrh	r3, [r3, #8]
    7cf0:	2bff      	cmp	r3, #255	; 0xff
    7cf2:	d00b      	beq.n	7d0c <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cf6:	2280      	movs	r2, #128	; 0x80
    7cf8:	0452      	lsls	r2, r2, #17
    7cfa:	4313      	orrs	r3, r2
    7cfc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    7cfe:	683b      	ldr	r3, [r7, #0]
    7d00:	891b      	ldrh	r3, [r3, #8]
    7d02:	001a      	movs	r2, r3
    7d04:	6a3b      	ldr	r3, [r7, #32]
    7d06:	4313      	orrs	r3, r2
    7d08:	623b      	str	r3, [r7, #32]
    7d0a:	e008      	b.n	7d1e <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    7d0c:	683b      	ldr	r3, [r7, #0]
    7d0e:	7edb      	ldrb	r3, [r3, #27]
    7d10:	2b00      	cmp	r3, #0
    7d12:	d004      	beq.n	7d1e <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7d16:	2280      	movs	r2, #128	; 0x80
    7d18:	04d2      	lsls	r2, r2, #19
    7d1a:	4313      	orrs	r3, r2
    7d1c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7d1e:	683b      	ldr	r3, [r7, #0]
    7d20:	222c      	movs	r2, #44	; 0x2c
    7d22:	5c9b      	ldrb	r3, [r3, r2]
    7d24:	2b00      	cmp	r3, #0
    7d26:	d103      	bne.n	7d30 <_usart_set_config+0x288>
    7d28:	4b12      	ldr	r3, [pc, #72]	; (7d74 <_usart_set_config+0x2cc>)
    7d2a:	4798      	blx	r3
    7d2c:	1e03      	subs	r3, r0, #0
    7d2e:	d003      	beq.n	7d38 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    7d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7d32:	2280      	movs	r2, #128	; 0x80
    7d34:	4313      	orrs	r3, r2
    7d36:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7d38:	687b      	ldr	r3, [r7, #4]
    7d3a:	0018      	movs	r0, r3
    7d3c:	4b0c      	ldr	r3, [pc, #48]	; (7d70 <_usart_set_config+0x2c8>)
    7d3e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    7d40:	69bb      	ldr	r3, [r7, #24]
    7d42:	6a3a      	ldr	r2, [r7, #32]
    7d44:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7d46:	687b      	ldr	r3, [r7, #4]
    7d48:	0018      	movs	r0, r3
    7d4a:	4b09      	ldr	r3, [pc, #36]	; (7d70 <_usart_set_config+0x2c8>)
    7d4c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    7d4e:	69bb      	ldr	r3, [r7, #24]
    7d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7d52:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    7d54:	2300      	movs	r3, #0
}
    7d56:	0018      	movs	r0, r3
    7d58:	46bd      	mov	sp, r7
    7d5a:	b00a      	add	sp, #40	; 0x28
    7d5c:	bdb0      	pop	{r4, r5, r7, pc}
    7d5e:	46c0      	nop			; (mov r8, r8)
    7d60:	00006ce1 	.word	0x00006ce1
    7d64:	00009229 	.word	0x00009229
    7d68:	00006831 	.word	0x00006831
    7d6c:	000068ad 	.word	0x000068ad
    7d70:	00007a85 	.word	0x00007a85
    7d74:	00007a45 	.word	0x00007a45

00007d78 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7d78:	b590      	push	{r4, r7, lr}
    7d7a:	b093      	sub	sp, #76	; 0x4c
    7d7c:	af00      	add	r7, sp, #0
    7d7e:	60f8      	str	r0, [r7, #12]
    7d80:	60b9      	str	r1, [r7, #8]
    7d82:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    7d84:	233b      	movs	r3, #59	; 0x3b
    7d86:	18fb      	adds	r3, r7, r3
    7d88:	2200      	movs	r2, #0
    7d8a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7d8c:	68fb      	ldr	r3, [r7, #12]
    7d8e:	68ba      	ldr	r2, [r7, #8]
    7d90:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7d92:	68fb      	ldr	r3, [r7, #12]
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7d98:	68fb      	ldr	r3, [r7, #12]
    7d9a:	681b      	ldr	r3, [r3, #0]
    7d9c:	0018      	movs	r0, r3
    7d9e:	4b86      	ldr	r3, [pc, #536]	; (7fb8 <usart_init+0x240>)
    7da0:	4798      	blx	r3
    7da2:	0003      	movs	r3, r0
    7da4:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7da8:	3302      	adds	r3, #2
    7daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7dae:	3314      	adds	r3, #20
    7db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7db4:	681b      	ldr	r3, [r3, #0]
    7db6:	2201      	movs	r2, #1
    7db8:	4013      	ands	r3, r2
    7dba:	d001      	beq.n	7dc0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7dbc:	2305      	movs	r3, #5
    7dbe:	e0f6      	b.n	7fae <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	2202      	movs	r2, #2
    7dc6:	4013      	ands	r3, r2
    7dc8:	d001      	beq.n	7dce <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    7dca:	231c      	movs	r3, #28
    7dcc:	e0ef      	b.n	7fae <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7dce:	2201      	movs	r2, #1
    7dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7dd2:	409a      	lsls	r2, r3
    7dd4:	0013      	movs	r3, r2
    7dd6:	0019      	movs	r1, r3
    7dd8:	2002      	movs	r0, #2
    7dda:	4b78      	ldr	r3, [pc, #480]	; (7fbc <usart_init+0x244>)
    7ddc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7dde:	2324      	movs	r3, #36	; 0x24
    7de0:	18fb      	adds	r3, r7, r3
    7de2:	0018      	movs	r0, r3
    7de4:	4b76      	ldr	r3, [pc, #472]	; (7fc0 <usart_init+0x248>)
    7de6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7de8:	687b      	ldr	r3, [r7, #4]
    7dea:	222d      	movs	r2, #45	; 0x2d
    7dec:	5c9a      	ldrb	r2, [r3, r2]
    7dee:	2324      	movs	r3, #36	; 0x24
    7df0:	18fb      	adds	r3, r7, r3
    7df2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7df6:	b2db      	uxtb	r3, r3
    7df8:	2224      	movs	r2, #36	; 0x24
    7dfa:	18ba      	adds	r2, r7, r2
    7dfc:	0011      	movs	r1, r2
    7dfe:	0018      	movs	r0, r3
    7e00:	4b70      	ldr	r3, [pc, #448]	; (7fc4 <usart_init+0x24c>)
    7e02:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e06:	b2db      	uxtb	r3, r3
    7e08:	0018      	movs	r0, r3
    7e0a:	4b6f      	ldr	r3, [pc, #444]	; (7fc8 <usart_init+0x250>)
    7e0c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	222d      	movs	r2, #45	; 0x2d
    7e12:	5c9b      	ldrb	r3, [r3, r2]
    7e14:	2100      	movs	r1, #0
    7e16:	0018      	movs	r0, r3
    7e18:	4b6c      	ldr	r3, [pc, #432]	; (7fcc <usart_init+0x254>)
    7e1a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    7e1c:	687b      	ldr	r3, [r7, #4]
    7e1e:	7ada      	ldrb	r2, [r3, #11]
    7e20:	68fb      	ldr	r3, [r7, #12]
    7e22:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	2224      	movs	r2, #36	; 0x24
    7e28:	5c9a      	ldrb	r2, [r3, r2]
    7e2a:	68fb      	ldr	r3, [r7, #12]
    7e2c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	2225      	movs	r2, #37	; 0x25
    7e32:	5c9a      	ldrb	r2, [r3, r2]
    7e34:	68fb      	ldr	r3, [r7, #12]
    7e36:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    7e38:	687b      	ldr	r3, [r7, #4]
    7e3a:	7eda      	ldrb	r2, [r3, #27]
    7e3c:	68fb      	ldr	r3, [r7, #12]
    7e3e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	7f1a      	ldrb	r2, [r3, #28]
    7e44:	68fb      	ldr	r3, [r7, #12]
    7e46:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    7e48:	233b      	movs	r3, #59	; 0x3b
    7e4a:	18fc      	adds	r4, r7, r3
    7e4c:	687a      	ldr	r2, [r7, #4]
    7e4e:	68fb      	ldr	r3, [r7, #12]
    7e50:	0011      	movs	r1, r2
    7e52:	0018      	movs	r0, r3
    7e54:	4b5e      	ldr	r3, [pc, #376]	; (7fd0 <usart_init+0x258>)
    7e56:	4798      	blx	r3
    7e58:	0003      	movs	r3, r0
    7e5a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    7e5c:	233b      	movs	r3, #59	; 0x3b
    7e5e:	18fb      	adds	r3, r7, r3
    7e60:	781b      	ldrb	r3, [r3, #0]
    7e62:	2b00      	cmp	r3, #0
    7e64:	d003      	beq.n	7e6e <usart_init+0xf6>
		return status_code;
    7e66:	233b      	movs	r3, #59	; 0x3b
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	781b      	ldrb	r3, [r3, #0]
    7e6c:	e09f      	b.n	7fae <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7e6e:	2320      	movs	r3, #32
    7e70:	18fb      	adds	r3, r7, r3
    7e72:	0018      	movs	r0, r3
    7e74:	4b57      	ldr	r3, [pc, #348]	; (7fd4 <usart_init+0x25c>)
    7e76:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7e78:	2320      	movs	r3, #32
    7e7a:	18fb      	adds	r3, r7, r3
    7e7c:	2200      	movs	r2, #0
    7e7e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7e80:	2320      	movs	r3, #32
    7e82:	18fb      	adds	r3, r7, r3
    7e84:	2200      	movs	r2, #0
    7e86:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7e8c:	2310      	movs	r3, #16
    7e8e:	18fb      	adds	r3, r7, r3
    7e90:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7e92:	687b      	ldr	r3, [r7, #4]
    7e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7e96:	2310      	movs	r3, #16
    7e98:	18fb      	adds	r3, r7, r3
    7e9a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    7e9c:	687b      	ldr	r3, [r7, #4]
    7e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7ea0:	2310      	movs	r3, #16
    7ea2:	18fb      	adds	r3, r7, r3
    7ea4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7eaa:	2310      	movs	r3, #16
    7eac:	18fb      	adds	r3, r7, r3
    7eae:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7eb0:	2347      	movs	r3, #71	; 0x47
    7eb2:	18fb      	adds	r3, r7, r3
    7eb4:	2200      	movs	r2, #0
    7eb6:	701a      	strb	r2, [r3, #0]
    7eb8:	e02c      	b.n	7f14 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7eba:	2347      	movs	r3, #71	; 0x47
    7ebc:	18fb      	adds	r3, r7, r3
    7ebe:	781a      	ldrb	r2, [r3, #0]
    7ec0:	2310      	movs	r3, #16
    7ec2:	18fb      	adds	r3, r7, r3
    7ec4:	0092      	lsls	r2, r2, #2
    7ec6:	58d3      	ldr	r3, [r2, r3]
    7ec8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    7eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d109      	bne.n	7ee4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7ed0:	2347      	movs	r3, #71	; 0x47
    7ed2:	18fb      	adds	r3, r7, r3
    7ed4:	781a      	ldrb	r2, [r3, #0]
    7ed6:	68bb      	ldr	r3, [r7, #8]
    7ed8:	0011      	movs	r1, r2
    7eda:	0018      	movs	r0, r3
    7edc:	4b3e      	ldr	r3, [pc, #248]	; (7fd8 <usart_init+0x260>)
    7ede:	4798      	blx	r3
    7ee0:	0003      	movs	r3, r0
    7ee2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7ee6:	3301      	adds	r3, #1
    7ee8:	d00d      	beq.n	7f06 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7eec:	b2da      	uxtb	r2, r3
    7eee:	2320      	movs	r3, #32
    7ef0:	18fb      	adds	r3, r7, r3
    7ef2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7ef6:	0c1b      	lsrs	r3, r3, #16
    7ef8:	b2db      	uxtb	r3, r3
    7efa:	2220      	movs	r2, #32
    7efc:	18ba      	adds	r2, r7, r2
    7efe:	0011      	movs	r1, r2
    7f00:	0018      	movs	r0, r3
    7f02:	4b36      	ldr	r3, [pc, #216]	; (7fdc <usart_init+0x264>)
    7f04:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7f06:	2347      	movs	r3, #71	; 0x47
    7f08:	18fb      	adds	r3, r7, r3
    7f0a:	781a      	ldrb	r2, [r3, #0]
    7f0c:	2347      	movs	r3, #71	; 0x47
    7f0e:	18fb      	adds	r3, r7, r3
    7f10:	3201      	adds	r2, #1
    7f12:	701a      	strb	r2, [r3, #0]
    7f14:	2347      	movs	r3, #71	; 0x47
    7f16:	18fb      	adds	r3, r7, r3
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	2b03      	cmp	r3, #3
    7f1c:	d9cd      	bls.n	7eba <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7f1e:	2300      	movs	r3, #0
    7f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    7f22:	e00a      	b.n	7f3a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    7f24:	68fa      	ldr	r2, [r7, #12]
    7f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7f28:	3302      	adds	r3, #2
    7f2a:	009b      	lsls	r3, r3, #2
    7f2c:	18d3      	adds	r3, r2, r3
    7f2e:	3304      	adds	r3, #4
    7f30:	2200      	movs	r2, #0
    7f32:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7f36:	3301      	adds	r3, #1
    7f38:	63fb      	str	r3, [r7, #60]	; 0x3c
    7f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7f3c:	2b05      	cmp	r3, #5
    7f3e:	d9f1      	bls.n	7f24 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	2200      	movs	r2, #0
    7f44:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7f46:	68fb      	ldr	r3, [r7, #12]
    7f48:	2200      	movs	r2, #0
    7f4a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7f4c:	68fb      	ldr	r3, [r7, #12]
    7f4e:	2200      	movs	r2, #0
    7f50:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7f52:	68fb      	ldr	r3, [r7, #12]
    7f54:	2200      	movs	r2, #0
    7f56:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7f58:	68fb      	ldr	r3, [r7, #12]
    7f5a:	2230      	movs	r2, #48	; 0x30
    7f5c:	2100      	movs	r1, #0
    7f5e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    7f60:	68fb      	ldr	r3, [r7, #12]
    7f62:	2231      	movs	r2, #49	; 0x31
    7f64:	2100      	movs	r1, #0
    7f66:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    7f68:	68fb      	ldr	r3, [r7, #12]
    7f6a:	2232      	movs	r2, #50	; 0x32
    7f6c:	2100      	movs	r1, #0
    7f6e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    7f70:	68fb      	ldr	r3, [r7, #12]
    7f72:	2233      	movs	r2, #51	; 0x33
    7f74:	2100      	movs	r1, #0
    7f76:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7f78:	68fb      	ldr	r3, [r7, #12]
    7f7a:	681b      	ldr	r3, [r3, #0]
    7f7c:	2227      	movs	r2, #39	; 0x27
    7f7e:	18bc      	adds	r4, r7, r2
    7f80:	0018      	movs	r0, r3
    7f82:	4b0d      	ldr	r3, [pc, #52]	; (7fb8 <usart_init+0x240>)
    7f84:	4798      	blx	r3
    7f86:	0003      	movs	r3, r0
    7f88:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7f8a:	4a15      	ldr	r2, [pc, #84]	; (7fe0 <usart_init+0x268>)
    7f8c:	2327      	movs	r3, #39	; 0x27
    7f8e:	18fb      	adds	r3, r7, r3
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	0011      	movs	r1, r2
    7f94:	0018      	movs	r0, r3
    7f96:	4b13      	ldr	r3, [pc, #76]	; (7fe4 <usart_init+0x26c>)
    7f98:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7f9a:	2327      	movs	r3, #39	; 0x27
    7f9c:	18fb      	adds	r3, r7, r3
    7f9e:	781a      	ldrb	r2, [r3, #0]
    7fa0:	4b11      	ldr	r3, [pc, #68]	; (7fe8 <usart_init+0x270>)
    7fa2:	0092      	lsls	r2, r2, #2
    7fa4:	68f9      	ldr	r1, [r7, #12]
    7fa6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    7fa8:	233b      	movs	r3, #59	; 0x3b
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	781b      	ldrb	r3, [r3, #0]
}
    7fae:	0018      	movs	r0, r3
    7fb0:	46bd      	mov	sp, r7
    7fb2:	b013      	add	sp, #76	; 0x4c
    7fb4:	bd90      	pop	{r4, r7, pc}
    7fb6:	46c0      	nop			; (mov r8, r8)
    7fb8:	00006ce1 	.word	0x00006ce1
    7fbc:	000079c1 	.word	0x000079c1
    7fc0:	000079a9 	.word	0x000079a9
    7fc4:	00009105 	.word	0x00009105
    7fc8:	00009149 	.word	0x00009149
    7fcc:	00006a99 	.word	0x00006a99
    7fd0:	00007aa9 	.word	0x00007aa9
    7fd4:	00007a1d 	.word	0x00007a1d
    7fd8:	00006b25 	.word	0x00006b25
    7fdc:	000093f1 	.word	0x000093f1
    7fe0:	00008181 	.word	0x00008181
    7fe4:	00006d45 	.word	0x00006d45
    7fe8:	20000344 	.word	0x20000344

00007fec <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    7fec:	b580      	push	{r7, lr}
    7fee:	b084      	sub	sp, #16
    7ff0:	af00      	add	r7, sp, #0
    7ff2:	6078      	str	r0, [r7, #4]
    7ff4:	000a      	movs	r2, r1
    7ff6:	1cbb      	adds	r3, r7, #2
    7ff8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7ffa:	687b      	ldr	r3, [r7, #4]
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	79db      	ldrb	r3, [r3, #7]
    8004:	2201      	movs	r2, #1
    8006:	4053      	eors	r3, r2
    8008:	b2db      	uxtb	r3, r3
    800a:	2b00      	cmp	r3, #0
    800c:	d001      	beq.n	8012 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    800e:	231c      	movs	r3, #28
    8010:	e017      	b.n	8042 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8016:	b29b      	uxth	r3, r3
    8018:	2b00      	cmp	r3, #0
    801a:	d001      	beq.n	8020 <usart_write_wait+0x34>
		return STATUS_BUSY;
    801c:	2305      	movs	r3, #5
    801e:	e010      	b.n	8042 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8020:	687b      	ldr	r3, [r7, #4]
    8022:	0018      	movs	r0, r3
    8024:	4b09      	ldr	r3, [pc, #36]	; (804c <usart_write_wait+0x60>)
    8026:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    8028:	68fb      	ldr	r3, [r7, #12]
    802a:	1cba      	adds	r2, r7, #2
    802c:	8812      	ldrh	r2, [r2, #0]
    802e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    8030:	46c0      	nop			; (mov r8, r8)
    8032:	68fb      	ldr	r3, [r7, #12]
    8034:	7e1b      	ldrb	r3, [r3, #24]
    8036:	b2db      	uxtb	r3, r3
    8038:	001a      	movs	r2, r3
    803a:	2302      	movs	r3, #2
    803c:	4013      	ands	r3, r2
    803e:	d0f8      	beq.n	8032 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    8040:	2300      	movs	r3, #0
}
    8042:	0018      	movs	r0, r3
    8044:	46bd      	mov	sp, r7
    8046:	b004      	add	sp, #16
    8048:	bd80      	pop	{r7, pc}
    804a:	46c0      	nop			; (mov r8, r8)
    804c:	00007a85 	.word	0x00007a85

00008050 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    8050:	b580      	push	{r7, lr}
    8052:	b084      	sub	sp, #16
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
    8058:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    805a:	687b      	ldr	r3, [r7, #4]
    805c:	681b      	ldr	r3, [r3, #0]
    805e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	799b      	ldrb	r3, [r3, #6]
    8064:	2201      	movs	r2, #1
    8066:	4053      	eors	r3, r2
    8068:	b2db      	uxtb	r3, r3
    806a:	2b00      	cmp	r3, #0
    806c:	d001      	beq.n	8072 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    806e:	231c      	movs	r3, #28
    8070:	e05e      	b.n	8130 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    8072:	687b      	ldr	r3, [r7, #4]
    8074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8076:	b29b      	uxth	r3, r3
    8078:	2b00      	cmp	r3, #0
    807a:	d001      	beq.n	8080 <usart_read_wait+0x30>
		return STATUS_BUSY;
    807c:	2305      	movs	r3, #5
    807e:	e057      	b.n	8130 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    8080:	68fb      	ldr	r3, [r7, #12]
    8082:	7e1b      	ldrb	r3, [r3, #24]
    8084:	b2db      	uxtb	r3, r3
    8086:	001a      	movs	r2, r3
    8088:	2304      	movs	r3, #4
    808a:	4013      	ands	r3, r2
    808c:	d101      	bne.n	8092 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    808e:	2305      	movs	r3, #5
    8090:	e04e      	b.n	8130 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8092:	687b      	ldr	r3, [r7, #4]
    8094:	0018      	movs	r0, r3
    8096:	4b28      	ldr	r3, [pc, #160]	; (8138 <usart_read_wait+0xe8>)
    8098:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    809a:	68fb      	ldr	r3, [r7, #12]
    809c:	8b5b      	ldrh	r3, [r3, #26]
    809e:	b29b      	uxth	r3, r3
    80a0:	b2da      	uxtb	r2, r3
    80a2:	230b      	movs	r3, #11
    80a4:	18fb      	adds	r3, r7, r3
    80a6:	213f      	movs	r1, #63	; 0x3f
    80a8:	400a      	ands	r2, r1
    80aa:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    80ac:	230b      	movs	r3, #11
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	781b      	ldrb	r3, [r3, #0]
    80b2:	2b00      	cmp	r3, #0
    80b4:	d036      	beq.n	8124 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    80b6:	230b      	movs	r3, #11
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	781b      	ldrb	r3, [r3, #0]
    80bc:	2202      	movs	r2, #2
    80be:	4013      	ands	r3, r2
    80c0:	d004      	beq.n	80cc <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    80c2:	68fb      	ldr	r3, [r7, #12]
    80c4:	2202      	movs	r2, #2
    80c6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    80c8:	231a      	movs	r3, #26
    80ca:	e031      	b.n	8130 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    80cc:	230b      	movs	r3, #11
    80ce:	18fb      	adds	r3, r7, r3
    80d0:	781b      	ldrb	r3, [r3, #0]
    80d2:	2204      	movs	r2, #4
    80d4:	4013      	ands	r3, r2
    80d6:	d004      	beq.n	80e2 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    80d8:	68fb      	ldr	r3, [r7, #12]
    80da:	2204      	movs	r2, #4
    80dc:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    80de:	231e      	movs	r3, #30
    80e0:	e026      	b.n	8130 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    80e2:	230b      	movs	r3, #11
    80e4:	18fb      	adds	r3, r7, r3
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	2201      	movs	r2, #1
    80ea:	4013      	ands	r3, r2
    80ec:	d004      	beq.n	80f8 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    80ee:	68fb      	ldr	r3, [r7, #12]
    80f0:	2201      	movs	r2, #1
    80f2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    80f4:	2313      	movs	r3, #19
    80f6:	e01b      	b.n	8130 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    80f8:	230b      	movs	r3, #11
    80fa:	18fb      	adds	r3, r7, r3
    80fc:	781b      	ldrb	r3, [r3, #0]
    80fe:	2210      	movs	r2, #16
    8100:	4013      	ands	r3, r2
    8102:	d004      	beq.n	810e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8104:	68fb      	ldr	r3, [r7, #12]
    8106:	2210      	movs	r2, #16
    8108:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    810a:	2342      	movs	r3, #66	; 0x42
    810c:	e010      	b.n	8130 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    810e:	230b      	movs	r3, #11
    8110:	18fb      	adds	r3, r7, r3
    8112:	781b      	ldrb	r3, [r3, #0]
    8114:	2220      	movs	r2, #32
    8116:	4013      	ands	r3, r2
    8118:	d004      	beq.n	8124 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    811a:	68fb      	ldr	r3, [r7, #12]
    811c:	2220      	movs	r2, #32
    811e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    8120:	2341      	movs	r3, #65	; 0x41
    8122:	e005      	b.n	8130 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    8124:	68fb      	ldr	r3, [r7, #12]
    8126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8128:	b29a      	uxth	r2, r3
    812a:	683b      	ldr	r3, [r7, #0]
    812c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    812e:	2300      	movs	r3, #0
}
    8130:	0018      	movs	r0, r3
    8132:	46bd      	mov	sp, r7
    8134:	b004      	add	sp, #16
    8136:	bd80      	pop	{r7, pc}
    8138:	00007a85 	.word	0x00007a85

0000813c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    813c:	b580      	push	{r7, lr}
    813e:	b084      	sub	sp, #16
    8140:	af00      	add	r7, sp, #0
    8142:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	681b      	ldr	r3, [r3, #0]
    8148:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    814a:	68fb      	ldr	r3, [r7, #12]
    814c:	69db      	ldr	r3, [r3, #28]
    814e:	1e5a      	subs	r2, r3, #1
    8150:	4193      	sbcs	r3, r2
    8152:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    8154:	0018      	movs	r0, r3
    8156:	46bd      	mov	sp, r7
    8158:	b004      	add	sp, #16
    815a:	bd80      	pop	{r7, pc}

0000815c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    815c:	b580      	push	{r7, lr}
    815e:	b082      	sub	sp, #8
    8160:	af00      	add	r7, sp, #0
    8162:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    8164:	46c0      	nop			; (mov r8, r8)
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	0018      	movs	r0, r3
    816a:	4b04      	ldr	r3, [pc, #16]	; (817c <_usart_wait_for_sync+0x20>)
    816c:	4798      	blx	r3
    816e:	1e03      	subs	r3, r0, #0
    8170:	d1f9      	bne.n	8166 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	46bd      	mov	sp, r7
    8176:	b002      	add	sp, #8
    8178:	bd80      	pop	{r7, pc}
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	0000813d 	.word	0x0000813d

00008180 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    8180:	b580      	push	{r7, lr}
    8182:	b088      	sub	sp, #32
    8184:	af00      	add	r7, sp, #0
    8186:	0002      	movs	r2, r0
    8188:	1dfb      	adds	r3, r7, #7
    818a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    818c:	1dfb      	adds	r3, r7, #7
    818e:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    8190:	4ba3      	ldr	r3, [pc, #652]	; (8420 <_usart_interrupt_handler+0x2a0>)
    8192:	0092      	lsls	r2, r2, #2
    8194:	58d3      	ldr	r3, [r2, r3]
    8196:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    8198:	69bb      	ldr	r3, [r7, #24]
    819a:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    819c:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    819e:	69bb      	ldr	r3, [r7, #24]
    81a0:	0018      	movs	r0, r3
    81a2:	4ba0      	ldr	r3, [pc, #640]	; (8424 <_usart_interrupt_handler+0x2a4>)
    81a4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    81a6:	697b      	ldr	r3, [r7, #20]
    81a8:	7e1b      	ldrb	r3, [r3, #24]
    81aa:	b2da      	uxtb	r2, r3
    81ac:	2312      	movs	r3, #18
    81ae:	18fb      	adds	r3, r7, r3
    81b0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    81b2:	697b      	ldr	r3, [r7, #20]
    81b4:	7d9b      	ldrb	r3, [r3, #22]
    81b6:	b2db      	uxtb	r3, r3
    81b8:	b29a      	uxth	r2, r3
    81ba:	2312      	movs	r3, #18
    81bc:	18fb      	adds	r3, r7, r3
    81be:	2112      	movs	r1, #18
    81c0:	1879      	adds	r1, r7, r1
    81c2:	8809      	ldrh	r1, [r1, #0]
    81c4:	400a      	ands	r2, r1
    81c6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    81c8:	69bb      	ldr	r3, [r7, #24]
    81ca:	2230      	movs	r2, #48	; 0x30
    81cc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    81ce:	69ba      	ldr	r2, [r7, #24]
    81d0:	2131      	movs	r1, #49	; 0x31
    81d2:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    81d4:	4013      	ands	r3, r2
    81d6:	b2da      	uxtb	r2, r3
    81d8:	2310      	movs	r3, #16
    81da:	18fb      	adds	r3, r7, r3
    81dc:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    81de:	2312      	movs	r3, #18
    81e0:	18fb      	adds	r3, r7, r3
    81e2:	881b      	ldrh	r3, [r3, #0]
    81e4:	2201      	movs	r2, #1
    81e6:	4013      	ands	r3, r2
    81e8:	d044      	beq.n	8274 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    81ea:	69bb      	ldr	r3, [r7, #24]
    81ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    81ee:	b29b      	uxth	r3, r3
    81f0:	2b00      	cmp	r3, #0
    81f2:	d03c      	beq.n	826e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    81f4:	69bb      	ldr	r3, [r7, #24]
    81f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    81f8:	781b      	ldrb	r3, [r3, #0]
    81fa:	b2da      	uxtb	r2, r3
    81fc:	231c      	movs	r3, #28
    81fe:	18fb      	adds	r3, r7, r3
    8200:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    8202:	69bb      	ldr	r3, [r7, #24]
    8204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8206:	1c5a      	adds	r2, r3, #1
    8208:	69bb      	ldr	r3, [r7, #24]
    820a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    820c:	69bb      	ldr	r3, [r7, #24]
    820e:	795b      	ldrb	r3, [r3, #5]
    8210:	2b01      	cmp	r3, #1
    8212:	d113      	bne.n	823c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    8214:	69bb      	ldr	r3, [r7, #24]
    8216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	b2db      	uxtb	r3, r3
    821c:	021b      	lsls	r3, r3, #8
    821e:	b21a      	sxth	r2, r3
    8220:	231c      	movs	r3, #28
    8222:	18fb      	adds	r3, r7, r3
    8224:	2100      	movs	r1, #0
    8226:	5e5b      	ldrsh	r3, [r3, r1]
    8228:	4313      	orrs	r3, r2
    822a:	b21a      	sxth	r2, r3
    822c:	231c      	movs	r3, #28
    822e:	18fb      	adds	r3, r7, r3
    8230:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    8232:	69bb      	ldr	r3, [r7, #24]
    8234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8236:	1c5a      	adds	r2, r3, #1
    8238:	69bb      	ldr	r3, [r7, #24]
    823a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    823c:	231c      	movs	r3, #28
    823e:	18fb      	adds	r3, r7, r3
    8240:	881b      	ldrh	r3, [r3, #0]
    8242:	05db      	lsls	r3, r3, #23
    8244:	0ddb      	lsrs	r3, r3, #23
    8246:	b29a      	uxth	r2, r3
    8248:	697b      	ldr	r3, [r7, #20]
    824a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    824c:	69bb      	ldr	r3, [r7, #24]
    824e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8250:	b29b      	uxth	r3, r3
    8252:	3b01      	subs	r3, #1
    8254:	b29b      	uxth	r3, r3
    8256:	69ba      	ldr	r2, [r7, #24]
    8258:	1c19      	adds	r1, r3, #0
    825a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    825c:	2b00      	cmp	r3, #0
    825e:	d109      	bne.n	8274 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8260:	697b      	ldr	r3, [r7, #20]
    8262:	2201      	movs	r2, #1
    8264:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    8266:	697b      	ldr	r3, [r7, #20]
    8268:	2202      	movs	r2, #2
    826a:	759a      	strb	r2, [r3, #22]
    826c:	e002      	b.n	8274 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    826e:	697b      	ldr	r3, [r7, #20]
    8270:	2201      	movs	r2, #1
    8272:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    8274:	2312      	movs	r3, #18
    8276:	18fb      	adds	r3, r7, r3
    8278:	881b      	ldrh	r3, [r3, #0]
    827a:	2202      	movs	r2, #2
    827c:	4013      	ands	r3, r2
    827e:	d011      	beq.n	82a4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    8280:	697b      	ldr	r3, [r7, #20]
    8282:	2202      	movs	r2, #2
    8284:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    8286:	69bb      	ldr	r3, [r7, #24]
    8288:	2233      	movs	r2, #51	; 0x33
    828a:	2100      	movs	r1, #0
    828c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    828e:	2310      	movs	r3, #16
    8290:	18fb      	adds	r3, r7, r3
    8292:	881b      	ldrh	r3, [r3, #0]
    8294:	2201      	movs	r2, #1
    8296:	4013      	ands	r3, r2
    8298:	d004      	beq.n	82a4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    829a:	69bb      	ldr	r3, [r7, #24]
    829c:	68db      	ldr	r3, [r3, #12]
    829e:	69ba      	ldr	r2, [r7, #24]
    82a0:	0010      	movs	r0, r2
    82a2:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    82a4:	2312      	movs	r3, #18
    82a6:	18fb      	adds	r3, r7, r3
    82a8:	881b      	ldrh	r3, [r3, #0]
    82aa:	2204      	movs	r2, #4
    82ac:	4013      	ands	r3, r2
    82ae:	d100      	bne.n	82b2 <_usart_interrupt_handler+0x132>
    82b0:	e0bd      	b.n	842e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    82b2:	69bb      	ldr	r3, [r7, #24]
    82b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    82b6:	b29b      	uxth	r3, r3
    82b8:	2b00      	cmp	r3, #0
    82ba:	d100      	bne.n	82be <_usart_interrupt_handler+0x13e>
    82bc:	e0b4      	b.n	8428 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    82be:	697b      	ldr	r3, [r7, #20]
    82c0:	8b5b      	ldrh	r3, [r3, #26]
    82c2:	b29b      	uxth	r3, r3
    82c4:	b2da      	uxtb	r2, r3
    82c6:	231f      	movs	r3, #31
    82c8:	18fb      	adds	r3, r7, r3
    82ca:	213f      	movs	r1, #63	; 0x3f
    82cc:	400a      	ands	r2, r1
    82ce:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    82d0:	231f      	movs	r3, #31
    82d2:	18fb      	adds	r3, r7, r3
    82d4:	781b      	ldrb	r3, [r3, #0]
    82d6:	2208      	movs	r2, #8
    82d8:	4013      	ands	r3, r2
    82da:	d007      	beq.n	82ec <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    82dc:	231f      	movs	r3, #31
    82de:	18fb      	adds	r3, r7, r3
    82e0:	221f      	movs	r2, #31
    82e2:	18ba      	adds	r2, r7, r2
    82e4:	7812      	ldrb	r2, [r2, #0]
    82e6:	2108      	movs	r1, #8
    82e8:	438a      	bics	r2, r1
    82ea:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    82ec:	231f      	movs	r3, #31
    82ee:	18fb      	adds	r3, r7, r3
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d050      	beq.n	8398 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    82f6:	231f      	movs	r3, #31
    82f8:	18fb      	adds	r3, r7, r3
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	2202      	movs	r2, #2
    82fe:	4013      	ands	r3, r2
    8300:	d007      	beq.n	8312 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8302:	69bb      	ldr	r3, [r7, #24]
    8304:	2232      	movs	r2, #50	; 0x32
    8306:	211a      	movs	r1, #26
    8308:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    830a:	697b      	ldr	r3, [r7, #20]
    830c:	2202      	movs	r2, #2
    830e:	835a      	strh	r2, [r3, #26]
    8310:	e036      	b.n	8380 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8312:	231f      	movs	r3, #31
    8314:	18fb      	adds	r3, r7, r3
    8316:	781b      	ldrb	r3, [r3, #0]
    8318:	2204      	movs	r2, #4
    831a:	4013      	ands	r3, r2
    831c:	d007      	beq.n	832e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    831e:	69bb      	ldr	r3, [r7, #24]
    8320:	2232      	movs	r2, #50	; 0x32
    8322:	211e      	movs	r1, #30
    8324:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8326:	697b      	ldr	r3, [r7, #20]
    8328:	2204      	movs	r2, #4
    832a:	835a      	strh	r2, [r3, #26]
    832c:	e028      	b.n	8380 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    832e:	231f      	movs	r3, #31
    8330:	18fb      	adds	r3, r7, r3
    8332:	781b      	ldrb	r3, [r3, #0]
    8334:	2201      	movs	r2, #1
    8336:	4013      	ands	r3, r2
    8338:	d007      	beq.n	834a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    833a:	69bb      	ldr	r3, [r7, #24]
    833c:	2232      	movs	r2, #50	; 0x32
    833e:	2113      	movs	r1, #19
    8340:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8342:	697b      	ldr	r3, [r7, #20]
    8344:	2201      	movs	r2, #1
    8346:	835a      	strh	r2, [r3, #26]
    8348:	e01a      	b.n	8380 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    834a:	231f      	movs	r3, #31
    834c:	18fb      	adds	r3, r7, r3
    834e:	781b      	ldrb	r3, [r3, #0]
    8350:	2210      	movs	r2, #16
    8352:	4013      	ands	r3, r2
    8354:	d007      	beq.n	8366 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    8356:	69bb      	ldr	r3, [r7, #24]
    8358:	2232      	movs	r2, #50	; 0x32
    835a:	2142      	movs	r1, #66	; 0x42
    835c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    835e:	697b      	ldr	r3, [r7, #20]
    8360:	2210      	movs	r2, #16
    8362:	835a      	strh	r2, [r3, #26]
    8364:	e00c      	b.n	8380 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8366:	231f      	movs	r3, #31
    8368:	18fb      	adds	r3, r7, r3
    836a:	781b      	ldrb	r3, [r3, #0]
    836c:	2220      	movs	r2, #32
    836e:	4013      	ands	r3, r2
    8370:	d006      	beq.n	8380 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    8372:	69bb      	ldr	r3, [r7, #24]
    8374:	2232      	movs	r2, #50	; 0x32
    8376:	2141      	movs	r1, #65	; 0x41
    8378:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    837a:	697b      	ldr	r3, [r7, #20]
    837c:	2220      	movs	r2, #32
    837e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    8380:	2310      	movs	r3, #16
    8382:	18fb      	adds	r3, r7, r3
    8384:	881b      	ldrh	r3, [r3, #0]
    8386:	2204      	movs	r2, #4
    8388:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    838a:	d050      	beq.n	842e <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    838c:	69bb      	ldr	r3, [r7, #24]
    838e:	695b      	ldr	r3, [r3, #20]
    8390:	69ba      	ldr	r2, [r7, #24]
    8392:	0010      	movs	r0, r2
    8394:	4798      	blx	r3
    8396:	e04a      	b.n	842e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8398:	697b      	ldr	r3, [r7, #20]
    839a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    839c:	b29a      	uxth	r2, r3
    839e:	230e      	movs	r3, #14
    83a0:	18fb      	adds	r3, r7, r3
    83a2:	05d2      	lsls	r2, r2, #23
    83a4:	0dd2      	lsrs	r2, r2, #23
    83a6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    83a8:	69bb      	ldr	r3, [r7, #24]
    83aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83ac:	220e      	movs	r2, #14
    83ae:	18ba      	adds	r2, r7, r2
    83b0:	8812      	ldrh	r2, [r2, #0]
    83b2:	b2d2      	uxtb	r2, r2
    83b4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    83b6:	69bb      	ldr	r3, [r7, #24]
    83b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83ba:	1c5a      	adds	r2, r3, #1
    83bc:	69bb      	ldr	r3, [r7, #24]
    83be:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    83c0:	69bb      	ldr	r3, [r7, #24]
    83c2:	795b      	ldrb	r3, [r3, #5]
    83c4:	2b01      	cmp	r3, #1
    83c6:	d10d      	bne.n	83e4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    83c8:	69bb      	ldr	r3, [r7, #24]
    83ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83cc:	220e      	movs	r2, #14
    83ce:	18ba      	adds	r2, r7, r2
    83d0:	8812      	ldrh	r2, [r2, #0]
    83d2:	0a12      	lsrs	r2, r2, #8
    83d4:	b292      	uxth	r2, r2
    83d6:	b2d2      	uxtb	r2, r2
    83d8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    83da:	69bb      	ldr	r3, [r7, #24]
    83dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83de:	1c5a      	adds	r2, r3, #1
    83e0:	69bb      	ldr	r3, [r7, #24]
    83e2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    83e4:	69bb      	ldr	r3, [r7, #24]
    83e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    83e8:	b29b      	uxth	r3, r3
    83ea:	3b01      	subs	r3, #1
    83ec:	b29b      	uxth	r3, r3
    83ee:	69ba      	ldr	r2, [r7, #24]
    83f0:	1c19      	adds	r1, r3, #0
    83f2:	8591      	strh	r1, [r2, #44]	; 0x2c
    83f4:	2b00      	cmp	r3, #0
    83f6:	d11a      	bne.n	842e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    83f8:	697b      	ldr	r3, [r7, #20]
    83fa:	2204      	movs	r2, #4
    83fc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    83fe:	69bb      	ldr	r3, [r7, #24]
    8400:	2232      	movs	r2, #50	; 0x32
    8402:	2100      	movs	r1, #0
    8404:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    8406:	2310      	movs	r3, #16
    8408:	18fb      	adds	r3, r7, r3
    840a:	881b      	ldrh	r3, [r3, #0]
    840c:	2202      	movs	r2, #2
    840e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    8410:	d00d      	beq.n	842e <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8412:	69bb      	ldr	r3, [r7, #24]
    8414:	691b      	ldr	r3, [r3, #16]
    8416:	69ba      	ldr	r2, [r7, #24]
    8418:	0010      	movs	r0, r2
    841a:	4798      	blx	r3
    841c:	e007      	b.n	842e <_usart_interrupt_handler+0x2ae>
    841e:	46c0      	nop			; (mov r8, r8)
    8420:	20000344 	.word	0x20000344
    8424:	0000815d 	.word	0x0000815d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8428:	697b      	ldr	r3, [r7, #20]
    842a:	2204      	movs	r2, #4
    842c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    842e:	2312      	movs	r3, #18
    8430:	18fb      	adds	r3, r7, r3
    8432:	881b      	ldrh	r3, [r3, #0]
    8434:	2210      	movs	r2, #16
    8436:	4013      	ands	r3, r2
    8438:	d010      	beq.n	845c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    843a:	697b      	ldr	r3, [r7, #20]
    843c:	2210      	movs	r2, #16
    843e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8440:	697b      	ldr	r3, [r7, #20]
    8442:	2210      	movs	r2, #16
    8444:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    8446:	2310      	movs	r3, #16
    8448:	18fb      	adds	r3, r7, r3
    844a:	881b      	ldrh	r3, [r3, #0]
    844c:	2210      	movs	r2, #16
    844e:	4013      	ands	r3, r2
    8450:	d004      	beq.n	845c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8452:	69bb      	ldr	r3, [r7, #24]
    8454:	69db      	ldr	r3, [r3, #28]
    8456:	69ba      	ldr	r2, [r7, #24]
    8458:	0010      	movs	r0, r2
    845a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    845c:	2312      	movs	r3, #18
    845e:	18fb      	adds	r3, r7, r3
    8460:	881b      	ldrh	r3, [r3, #0]
    8462:	2220      	movs	r2, #32
    8464:	4013      	ands	r3, r2
    8466:	d010      	beq.n	848a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    8468:	697b      	ldr	r3, [r7, #20]
    846a:	2220      	movs	r2, #32
    846c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    846e:	697b      	ldr	r3, [r7, #20]
    8470:	2220      	movs	r2, #32
    8472:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    8474:	2310      	movs	r3, #16
    8476:	18fb      	adds	r3, r7, r3
    8478:	881b      	ldrh	r3, [r3, #0]
    847a:	2208      	movs	r2, #8
    847c:	4013      	ands	r3, r2
    847e:	d004      	beq.n	848a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8480:	69bb      	ldr	r3, [r7, #24]
    8482:	699b      	ldr	r3, [r3, #24]
    8484:	69ba      	ldr	r2, [r7, #24]
    8486:	0010      	movs	r0, r2
    8488:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    848a:	2312      	movs	r3, #18
    848c:	18fb      	adds	r3, r7, r3
    848e:	881b      	ldrh	r3, [r3, #0]
    8490:	2208      	movs	r2, #8
    8492:	4013      	ands	r3, r2
    8494:	d010      	beq.n	84b8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    8496:	697b      	ldr	r3, [r7, #20]
    8498:	2208      	movs	r2, #8
    849a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    849c:	697b      	ldr	r3, [r7, #20]
    849e:	2208      	movs	r2, #8
    84a0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    84a2:	2310      	movs	r3, #16
    84a4:	18fb      	adds	r3, r7, r3
    84a6:	881b      	ldrh	r3, [r3, #0]
    84a8:	2220      	movs	r2, #32
    84aa:	4013      	ands	r3, r2
    84ac:	d004      	beq.n	84b8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    84ae:	69bb      	ldr	r3, [r7, #24]
    84b0:	6a1b      	ldr	r3, [r3, #32]
    84b2:	69ba      	ldr	r2, [r7, #24]
    84b4:	0010      	movs	r0, r2
    84b6:	4798      	blx	r3
		}
	}
#endif
}
    84b8:	46c0      	nop			; (mov r8, r8)
    84ba:	46bd      	mov	sp, r7
    84bc:	b008      	add	sp, #32
    84be:	bd80      	pop	{r7, pc}

000084c0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b082      	sub	sp, #8
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    84c8:	687b      	ldr	r3, [r7, #4]
    84ca:	2201      	movs	r2, #1
    84cc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    84ce:	687b      	ldr	r3, [r7, #4]
    84d0:	2200      	movs	r2, #0
    84d2:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	2206      	movs	r2, #6
    84d8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	2200      	movs	r2, #0
    84de:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	2200      	movs	r2, #0
    84e4:	725a      	strb	r2, [r3, #9]
}
    84e6:	46c0      	nop			; (mov r8, r8)
    84e8:	46bd      	mov	sp, r7
    84ea:	b002      	add	sp, #8
    84ec:	bd80      	pop	{r7, pc}
    84ee:	46c0      	nop			; (mov r8, r8)

000084f0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    84f0:	b580      	push	{r7, lr}
    84f2:	b082      	sub	sp, #8
    84f4:	af00      	add	r7, sp, #0
    84f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    84f8:	687b      	ldr	r3, [r7, #4]
    84fa:	2200      	movs	r2, #0
    84fc:	701a      	strb	r2, [r3, #0]
}
    84fe:	46c0      	nop			; (mov r8, r8)
    8500:	46bd      	mov	sp, r7
    8502:	b002      	add	sp, #8
    8504:	bd80      	pop	{r7, pc}
    8506:	46c0      	nop			; (mov r8, r8)

00008508 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    8508:	b580      	push	{r7, lr}
    850a:	b082      	sub	sp, #8
    850c:	af00      	add	r7, sp, #0
    850e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	2200      	movs	r2, #0
    8514:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	2204      	movs	r2, #4
    851a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    851c:	687b      	ldr	r3, [r7, #4]
    851e:	2200      	movs	r2, #0
    8520:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    8522:	687b      	ldr	r3, [r7, #4]
    8524:	2280      	movs	r2, #128	; 0x80
    8526:	0212      	lsls	r2, r2, #8
    8528:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	2200      	movs	r2, #0
    852e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	2201      	movs	r2, #1
    8534:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    8536:	687b      	ldr	r3, [r7, #4]
    8538:	2200      	movs	r2, #0
    853a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    853c:	687b      	ldr	r3, [r7, #4]
    853e:	2201      	movs	r2, #1
    8540:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    8542:	687b      	ldr	r3, [r7, #4]
    8544:	2200      	movs	r2, #0
    8546:	739a      	strb	r2, [r3, #14]
}
    8548:	46c0      	nop			; (mov r8, r8)
    854a:	46bd      	mov	sp, r7
    854c:	b002      	add	sp, #8
    854e:	bd80      	pop	{r7, pc}

00008550 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    8550:	b580      	push	{r7, lr}
    8552:	b082      	sub	sp, #8
    8554:	af00      	add	r7, sp, #0
    8556:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    8558:	687b      	ldr	r3, [r7, #4]
    855a:	2203      	movs	r2, #3
    855c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    855e:	687b      	ldr	r3, [r7, #4]
    8560:	2200      	movs	r2, #0
    8562:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	2201      	movs	r2, #1
    8568:	709a      	strb	r2, [r3, #2]
}
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	46bd      	mov	sp, r7
    856e:	b002      	add	sp, #8
    8570:	bd80      	pop	{r7, pc}
    8572:	46c0      	nop			; (mov r8, r8)

00008574 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    8574:	b580      	push	{r7, lr}
    8576:	b082      	sub	sp, #8
    8578:	af00      	add	r7, sp, #0
    857a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	2200      	movs	r2, #0
    8580:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8582:	687b      	ldr	r3, [r7, #4]
    8584:	2200      	movs	r2, #0
    8586:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8588:	687b      	ldr	r3, [r7, #4]
    858a:	2200      	movs	r2, #0
    858c:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    858e:	687b      	ldr	r3, [r7, #4]
    8590:	2200      	movs	r2, #0
    8592:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8594:	687b      	ldr	r3, [r7, #4]
    8596:	2200      	movs	r2, #0
    8598:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	2201      	movs	r2, #1
    859e:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	2207      	movs	r2, #7
    85a4:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	223f      	movs	r2, #63	; 0x3f
    85aa:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	2201      	movs	r2, #1
    85b0:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	2201      	movs	r2, #1
    85b6:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	2206      	movs	r2, #6
    85bc:	821a      	strh	r2, [r3, #16]
}
    85be:	46c0      	nop			; (mov r8, r8)
    85c0:	46bd      	mov	sp, r7
    85c2:	b002      	add	sp, #8
    85c4:	bd80      	pop	{r7, pc}
    85c6:	46c0      	nop			; (mov r8, r8)

000085c8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    85c8:	b580      	push	{r7, lr}
    85ca:	b082      	sub	sp, #8
    85cc:	af00      	add	r7, sp, #0
    85ce:	0002      	movs	r2, r0
    85d0:	1dfb      	adds	r3, r7, #7
    85d2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    85d4:	4a03      	ldr	r2, [pc, #12]	; (85e4 <system_cpu_clock_set_divider+0x1c>)
    85d6:	1dfb      	adds	r3, r7, #7
    85d8:	781b      	ldrb	r3, [r3, #0]
    85da:	7213      	strb	r3, [r2, #8]
}
    85dc:	46c0      	nop			; (mov r8, r8)
    85de:	46bd      	mov	sp, r7
    85e0:	b002      	add	sp, #8
    85e2:	bd80      	pop	{r7, pc}
    85e4:	40000400 	.word	0x40000400

000085e8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    85e8:	b580      	push	{r7, lr}
    85ea:	b082      	sub	sp, #8
    85ec:	af00      	add	r7, sp, #0
    85ee:	0002      	movs	r2, r0
    85f0:	1dfb      	adds	r3, r7, #7
    85f2:	701a      	strb	r2, [r3, #0]
    85f4:	1dbb      	adds	r3, r7, #6
    85f6:	1c0a      	adds	r2, r1, #0
    85f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    85fa:	1dfb      	adds	r3, r7, #7
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	2b01      	cmp	r3, #1
    8600:	d008      	beq.n	8614 <system_apb_clock_set_divider+0x2c>
    8602:	2b02      	cmp	r3, #2
    8604:	d00b      	beq.n	861e <system_apb_clock_set_divider+0x36>
    8606:	2b00      	cmp	r3, #0
    8608:	d10e      	bne.n	8628 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    860a:	4a0b      	ldr	r2, [pc, #44]	; (8638 <system_apb_clock_set_divider+0x50>)
    860c:	1dbb      	adds	r3, r7, #6
    860e:	781b      	ldrb	r3, [r3, #0]
    8610:	7253      	strb	r3, [r2, #9]
			break;
    8612:	e00b      	b.n	862c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    8614:	4a08      	ldr	r2, [pc, #32]	; (8638 <system_apb_clock_set_divider+0x50>)
    8616:	1dbb      	adds	r3, r7, #6
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	7293      	strb	r3, [r2, #10]
			break;
    861c:	e006      	b.n	862c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    861e:	4a06      	ldr	r2, [pc, #24]	; (8638 <system_apb_clock_set_divider+0x50>)
    8620:	1dbb      	adds	r3, r7, #6
    8622:	781b      	ldrb	r3, [r3, #0]
    8624:	72d3      	strb	r3, [r2, #11]
			break;
    8626:	e001      	b.n	862c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8628:	2317      	movs	r3, #23
    862a:	e000      	b.n	862e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    862c:	2300      	movs	r3, #0
}
    862e:	0018      	movs	r0, r3
    8630:	46bd      	mov	sp, r7
    8632:	b002      	add	sp, #8
    8634:	bd80      	pop	{r7, pc}
    8636:	46c0      	nop			; (mov r8, r8)
    8638:	40000400 	.word	0x40000400

0000863c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    863c:	b580      	push	{r7, lr}
    863e:	b082      	sub	sp, #8
    8640:	af00      	add	r7, sp, #0
    8642:	0002      	movs	r2, r0
    8644:	1dfb      	adds	r3, r7, #7
    8646:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8648:	4a08      	ldr	r2, [pc, #32]	; (866c <system_flash_set_waitstates+0x30>)
    864a:	1dfb      	adds	r3, r7, #7
    864c:	781b      	ldrb	r3, [r3, #0]
    864e:	210f      	movs	r1, #15
    8650:	400b      	ands	r3, r1
    8652:	b2d9      	uxtb	r1, r3
    8654:	6853      	ldr	r3, [r2, #4]
    8656:	200f      	movs	r0, #15
    8658:	4001      	ands	r1, r0
    865a:	0049      	lsls	r1, r1, #1
    865c:	201e      	movs	r0, #30
    865e:	4383      	bics	r3, r0
    8660:	430b      	orrs	r3, r1
    8662:	6053      	str	r3, [r2, #4]
}
    8664:	46c0      	nop			; (mov r8, r8)
    8666:	46bd      	mov	sp, r7
    8668:	b002      	add	sp, #8
    866a:	bd80      	pop	{r7, pc}
    866c:	41004000 	.word	0x41004000

00008670 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    8670:	b580      	push	{r7, lr}
    8672:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8674:	46c0      	nop			; (mov r8, r8)
    8676:	4b04      	ldr	r3, [pc, #16]	; (8688 <_system_dfll_wait_for_sync+0x18>)
    8678:	68db      	ldr	r3, [r3, #12]
    867a:	2210      	movs	r2, #16
    867c:	4013      	ands	r3, r2
    867e:	d0fa      	beq.n	8676 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    8680:	46c0      	nop			; (mov r8, r8)
    8682:	46bd      	mov	sp, r7
    8684:	bd80      	pop	{r7, pc}
    8686:	46c0      	nop			; (mov r8, r8)
    8688:	40000800 	.word	0x40000800

0000868c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    868c:	b580      	push	{r7, lr}
    868e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    8690:	4b0c      	ldr	r3, [pc, #48]	; (86c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    8692:	2202      	movs	r2, #2
    8694:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    8696:	4b0c      	ldr	r3, [pc, #48]	; (86c8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    8698:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    869a:	4a0a      	ldr	r2, [pc, #40]	; (86c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    869c:	4b0b      	ldr	r3, [pc, #44]	; (86cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    869e:	689b      	ldr	r3, [r3, #8]
    86a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    86a2:	4a08      	ldr	r2, [pc, #32]	; (86c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    86a4:	4b09      	ldr	r3, [pc, #36]	; (86cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    86a6:	685b      	ldr	r3, [r3, #4]
    86a8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    86aa:	4b06      	ldr	r3, [pc, #24]	; (86c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    86ac:	2200      	movs	r2, #0
    86ae:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    86b0:	4b05      	ldr	r3, [pc, #20]	; (86c8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    86b2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    86b4:	4a03      	ldr	r2, [pc, #12]	; (86c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    86b6:	4b05      	ldr	r3, [pc, #20]	; (86cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    86b8:	681b      	ldr	r3, [r3, #0]
    86ba:	b29b      	uxth	r3, r3
    86bc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	46bd      	mov	sp, r7
    86c2:	bd80      	pop	{r7, pc}
    86c4:	40000800 	.word	0x40000800
    86c8:	00008671 	.word	0x00008671
    86cc:	200000f4 	.word	0x200000f4

000086d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    86d0:	b580      	push	{r7, lr}
    86d2:	b082      	sub	sp, #8
    86d4:	af00      	add	r7, sp, #0
    86d6:	0002      	movs	r2, r0
    86d8:	1dfb      	adds	r3, r7, #7
    86da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    86dc:	1dfb      	adds	r3, r7, #7
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	2b08      	cmp	r3, #8
    86e2:	d840      	bhi.n	8766 <system_clock_source_get_hz+0x96>
    86e4:	009a      	lsls	r2, r3, #2
    86e6:	4b22      	ldr	r3, [pc, #136]	; (8770 <system_clock_source_get_hz+0xa0>)
    86e8:	18d3      	adds	r3, r2, r3
    86ea:	681b      	ldr	r3, [r3, #0]
    86ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    86ee:	4b21      	ldr	r3, [pc, #132]	; (8774 <system_clock_source_get_hz+0xa4>)
    86f0:	691b      	ldr	r3, [r3, #16]
    86f2:	e039      	b.n	8768 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    86f4:	4b20      	ldr	r3, [pc, #128]	; (8778 <system_clock_source_get_hz+0xa8>)
    86f6:	6a1b      	ldr	r3, [r3, #32]
    86f8:	059b      	lsls	r3, r3, #22
    86fa:	0f9b      	lsrs	r3, r3, #30
    86fc:	b2db      	uxtb	r3, r3
    86fe:	001a      	movs	r2, r3
    8700:	4b1e      	ldr	r3, [pc, #120]	; (877c <system_clock_source_get_hz+0xac>)
    8702:	40d3      	lsrs	r3, r2
    8704:	e030      	b.n	8768 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    8706:	2380      	movs	r3, #128	; 0x80
    8708:	021b      	lsls	r3, r3, #8
    870a:	e02d      	b.n	8768 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    870c:	2380      	movs	r3, #128	; 0x80
    870e:	021b      	lsls	r3, r3, #8
    8710:	e02a      	b.n	8768 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    8712:	4b18      	ldr	r3, [pc, #96]	; (8774 <system_clock_source_get_hz+0xa4>)
    8714:	695b      	ldr	r3, [r3, #20]
    8716:	e027      	b.n	8768 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    8718:	4b16      	ldr	r3, [pc, #88]	; (8774 <system_clock_source_get_hz+0xa4>)
    871a:	681b      	ldr	r3, [r3, #0]
    871c:	2202      	movs	r2, #2
    871e:	4013      	ands	r3, r2
    8720:	d101      	bne.n	8726 <system_clock_source_get_hz+0x56>
			return 0;
    8722:	2300      	movs	r3, #0
    8724:	e020      	b.n	8768 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    8726:	4b16      	ldr	r3, [pc, #88]	; (8780 <system_clock_source_get_hz+0xb0>)
    8728:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    872a:	4b12      	ldr	r3, [pc, #72]	; (8774 <system_clock_source_get_hz+0xa4>)
    872c:	681b      	ldr	r3, [r3, #0]
    872e:	2204      	movs	r2, #4
    8730:	4013      	ands	r3, r2
    8732:	d009      	beq.n	8748 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    8734:	2000      	movs	r0, #0
    8736:	4b13      	ldr	r3, [pc, #76]	; (8784 <system_clock_source_get_hz+0xb4>)
    8738:	4798      	blx	r3
    873a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    873c:	4b0d      	ldr	r3, [pc, #52]	; (8774 <system_clock_source_get_hz+0xa4>)
    873e:	689b      	ldr	r3, [r3, #8]
    8740:	041b      	lsls	r3, r3, #16
    8742:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    8744:	4353      	muls	r3, r2
    8746:	e00f      	b.n	8768 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    8748:	4b0f      	ldr	r3, [pc, #60]	; (8788 <system_clock_source_get_hz+0xb8>)
    874a:	e00d      	b.n	8768 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    874c:	4a0a      	ldr	r2, [pc, #40]	; (8778 <system_clock_source_get_hz+0xa8>)
    874e:	2350      	movs	r3, #80	; 0x50
    8750:	5cd3      	ldrb	r3, [r2, r3]
    8752:	b2db      	uxtb	r3, r3
    8754:	001a      	movs	r2, r3
    8756:	2304      	movs	r3, #4
    8758:	4013      	ands	r3, r2
    875a:	d101      	bne.n	8760 <system_clock_source_get_hz+0x90>
			return 0;
    875c:	2300      	movs	r3, #0
    875e:	e003      	b.n	8768 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    8760:	4b04      	ldr	r3, [pc, #16]	; (8774 <system_clock_source_get_hz+0xa4>)
    8762:	68db      	ldr	r3, [r3, #12]
    8764:	e000      	b.n	8768 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    8766:	2300      	movs	r3, #0
	}
}
    8768:	0018      	movs	r0, r3
    876a:	46bd      	mov	sp, r7
    876c:	b002      	add	sp, #8
    876e:	bd80      	pop	{r7, pc}
    8770:	0000d4f8 	.word	0x0000d4f8
    8774:	200000f4 	.word	0x200000f4
    8778:	40000800 	.word	0x40000800
    877c:	007a1200 	.word	0x007a1200
    8780:	00008671 	.word	0x00008671
    8784:	00009229 	.word	0x00009229
    8788:	02dc6c00 	.word	0x02dc6c00

0000878c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    8794:	4b1a      	ldr	r3, [pc, #104]	; (8800 <system_clock_source_osc8m_set_config+0x74>)
    8796:	6a1b      	ldr	r3, [r3, #32]
    8798:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	781b      	ldrb	r3, [r3, #0]
    879e:	1c1a      	adds	r2, r3, #0
    87a0:	2303      	movs	r3, #3
    87a2:	4013      	ands	r3, r2
    87a4:	b2da      	uxtb	r2, r3
    87a6:	230d      	movs	r3, #13
    87a8:	18fb      	adds	r3, r7, r3
    87aa:	2103      	movs	r1, #3
    87ac:	400a      	ands	r2, r1
    87ae:	0010      	movs	r0, r2
    87b0:	781a      	ldrb	r2, [r3, #0]
    87b2:	2103      	movs	r1, #3
    87b4:	438a      	bics	r2, r1
    87b6:	1c11      	adds	r1, r2, #0
    87b8:	1c02      	adds	r2, r0, #0
    87ba:	430a      	orrs	r2, r1
    87bc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	789a      	ldrb	r2, [r3, #2]
    87c2:	230c      	movs	r3, #12
    87c4:	18fb      	adds	r3, r7, r3
    87c6:	01d0      	lsls	r0, r2, #7
    87c8:	781a      	ldrb	r2, [r3, #0]
    87ca:	217f      	movs	r1, #127	; 0x7f
    87cc:	400a      	ands	r2, r1
    87ce:	1c11      	adds	r1, r2, #0
    87d0:	1c02      	adds	r2, r0, #0
    87d2:	430a      	orrs	r2, r1
    87d4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    87d6:	687b      	ldr	r3, [r7, #4]
    87d8:	785a      	ldrb	r2, [r3, #1]
    87da:	230c      	movs	r3, #12
    87dc:	18fb      	adds	r3, r7, r3
    87de:	2101      	movs	r1, #1
    87e0:	400a      	ands	r2, r1
    87e2:	0190      	lsls	r0, r2, #6
    87e4:	781a      	ldrb	r2, [r3, #0]
    87e6:	2140      	movs	r1, #64	; 0x40
    87e8:	438a      	bics	r2, r1
    87ea:	1c11      	adds	r1, r2, #0
    87ec:	1c02      	adds	r2, r0, #0
    87ee:	430a      	orrs	r2, r1
    87f0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    87f2:	4b03      	ldr	r3, [pc, #12]	; (8800 <system_clock_source_osc8m_set_config+0x74>)
    87f4:	68fa      	ldr	r2, [r7, #12]
    87f6:	621a      	str	r2, [r3, #32]
}
    87f8:	46c0      	nop			; (mov r8, r8)
    87fa:	46bd      	mov	sp, r7
    87fc:	b004      	add	sp, #16
    87fe:	bd80      	pop	{r7, pc}
    8800:	40000800 	.word	0x40000800

00008804 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    8804:	b580      	push	{r7, lr}
    8806:	b084      	sub	sp, #16
    8808:	af00      	add	r7, sp, #0
    880a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    880c:	4a43      	ldr	r2, [pc, #268]	; (891c <system_clock_source_xosc32k_set_config+0x118>)
    880e:	230c      	movs	r3, #12
    8810:	18fb      	adds	r3, r7, r3
    8812:	8a92      	ldrh	r2, [r2, #20]
    8814:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	785b      	ldrb	r3, [r3, #1]
    881a:	1c1a      	adds	r2, r3, #0
    881c:	2307      	movs	r3, #7
    881e:	4013      	ands	r3, r2
    8820:	b2da      	uxtb	r2, r3
    8822:	230c      	movs	r3, #12
    8824:	18fb      	adds	r3, r7, r3
    8826:	2107      	movs	r1, #7
    8828:	400a      	ands	r2, r1
    882a:	0010      	movs	r0, r2
    882c:	785a      	ldrb	r2, [r3, #1]
    882e:	2107      	movs	r1, #7
    8830:	438a      	bics	r2, r1
    8832:	1c11      	adds	r1, r2, #0
    8834:	1c02      	adds	r2, r0, #0
    8836:	430a      	orrs	r2, r1
    8838:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	2b00      	cmp	r3, #0
    8840:	d106      	bne.n	8850 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    8842:	230c      	movs	r3, #12
    8844:	18fb      	adds	r3, r7, r3
    8846:	781a      	ldrb	r2, [r3, #0]
    8848:	2104      	movs	r1, #4
    884a:	430a      	orrs	r2, r1
    884c:	701a      	strb	r2, [r3, #0]
    884e:	e005      	b.n	885c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    8850:	230c      	movs	r3, #12
    8852:	18fb      	adds	r3, r7, r3
    8854:	781a      	ldrb	r2, [r3, #0]
    8856:	2104      	movs	r1, #4
    8858:	438a      	bics	r2, r1
    885a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	789a      	ldrb	r2, [r3, #2]
    8860:	230c      	movs	r3, #12
    8862:	18fb      	adds	r3, r7, r3
    8864:	2101      	movs	r1, #1
    8866:	400a      	ands	r2, r1
    8868:	0150      	lsls	r0, r2, #5
    886a:	781a      	ldrb	r2, [r3, #0]
    886c:	2120      	movs	r1, #32
    886e:	438a      	bics	r2, r1
    8870:	1c11      	adds	r1, r2, #0
    8872:	1c02      	adds	r2, r0, #0
    8874:	430a      	orrs	r2, r1
    8876:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    8878:	687b      	ldr	r3, [r7, #4]
    887a:	78da      	ldrb	r2, [r3, #3]
    887c:	230c      	movs	r3, #12
    887e:	18fb      	adds	r3, r7, r3
    8880:	2101      	movs	r1, #1
    8882:	400a      	ands	r2, r1
    8884:	0110      	lsls	r0, r2, #4
    8886:	781a      	ldrb	r2, [r3, #0]
    8888:	2110      	movs	r1, #16
    888a:	438a      	bics	r2, r1
    888c:	1c11      	adds	r1, r2, #0
    888e:	1c02      	adds	r2, r0, #0
    8890:	430a      	orrs	r2, r1
    8892:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    8894:	687b      	ldr	r3, [r7, #4]
    8896:	791a      	ldrb	r2, [r3, #4]
    8898:	230c      	movs	r3, #12
    889a:	18fb      	adds	r3, r7, r3
    889c:	2101      	movs	r1, #1
    889e:	400a      	ands	r2, r1
    88a0:	00d0      	lsls	r0, r2, #3
    88a2:	781a      	ldrb	r2, [r3, #0]
    88a4:	2108      	movs	r1, #8
    88a6:	438a      	bics	r2, r1
    88a8:	1c11      	adds	r1, r2, #0
    88aa:	1c02      	adds	r2, r0, #0
    88ac:	430a      	orrs	r2, r1
    88ae:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	7b5a      	ldrb	r2, [r3, #13]
    88b4:	230c      	movs	r3, #12
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	01d0      	lsls	r0, r2, #7
    88ba:	781a      	ldrb	r2, [r3, #0]
    88bc:	217f      	movs	r1, #127	; 0x7f
    88be:	400a      	ands	r2, r1
    88c0:	1c11      	adds	r1, r2, #0
    88c2:	1c02      	adds	r2, r0, #0
    88c4:	430a      	orrs	r2, r1
    88c6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	7b1a      	ldrb	r2, [r3, #12]
    88cc:	230c      	movs	r3, #12
    88ce:	18fb      	adds	r3, r7, r3
    88d0:	2101      	movs	r1, #1
    88d2:	400a      	ands	r2, r1
    88d4:	0190      	lsls	r0, r2, #6
    88d6:	781a      	ldrb	r2, [r3, #0]
    88d8:	2140      	movs	r1, #64	; 0x40
    88da:	438a      	bics	r2, r1
    88dc:	1c11      	adds	r1, r2, #0
    88de:	1c02      	adds	r2, r0, #0
    88e0:	430a      	orrs	r2, r1
    88e2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    88e4:	687b      	ldr	r3, [r7, #4]
    88e6:	7b9a      	ldrb	r2, [r3, #14]
    88e8:	230c      	movs	r3, #12
    88ea:	18fb      	adds	r3, r7, r3
    88ec:	2101      	movs	r1, #1
    88ee:	400a      	ands	r2, r1
    88f0:	0110      	lsls	r0, r2, #4
    88f2:	785a      	ldrb	r2, [r3, #1]
    88f4:	2110      	movs	r1, #16
    88f6:	438a      	bics	r2, r1
    88f8:	1c11      	adds	r1, r2, #0
    88fa:	1c02      	adds	r2, r0, #0
    88fc:	430a      	orrs	r2, r1
    88fe:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	689a      	ldr	r2, [r3, #8]
    8904:	4b06      	ldr	r3, [pc, #24]	; (8920 <system_clock_source_xosc32k_set_config+0x11c>)
    8906:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    8908:	4a04      	ldr	r2, [pc, #16]	; (891c <system_clock_source_xosc32k_set_config+0x118>)
    890a:	230c      	movs	r3, #12
    890c:	18fb      	adds	r3, r7, r3
    890e:	881b      	ldrh	r3, [r3, #0]
    8910:	8293      	strh	r3, [r2, #20]
}
    8912:	46c0      	nop			; (mov r8, r8)
    8914:	46bd      	mov	sp, r7
    8916:	b004      	add	sp, #16
    8918:	bd80      	pop	{r7, pc}
    891a:	46c0      	nop			; (mov r8, r8)
    891c:	40000800 	.word	0x40000800
    8920:	200000f4 	.word	0x200000f4

00008924 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    8924:	b580      	push	{r7, lr}
    8926:	b082      	sub	sp, #8
    8928:	af00      	add	r7, sp, #0
    892a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	7a1b      	ldrb	r3, [r3, #8]
    8930:	029b      	lsls	r3, r3, #10
    8932:	041b      	lsls	r3, r3, #16
    8934:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	895b      	ldrh	r3, [r3, #10]
    893a:	059b      	lsls	r3, r3, #22
    893c:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    893e:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    8940:	4b2a      	ldr	r3, [pc, #168]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    8942:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    894c:	4313      	orrs	r3, r2
    894e:	b2db      	uxtb	r3, r3
    8950:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    8952:	687b      	ldr	r3, [r7, #4]
    8954:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    8956:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    8958:	687a      	ldr	r2, [r7, #4]
    895a:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    895c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	785b      	ldrb	r3, [r3, #1]
    8962:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    8964:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    8966:	4b21      	ldr	r3, [pc, #132]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    8968:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	781b      	ldrb	r3, [r3, #0]
    896e:	2b04      	cmp	r3, #4
    8970:	d116      	bne.n	89a0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	7b1b      	ldrb	r3, [r3, #12]
    8976:	069b      	lsls	r3, r3, #26
    8978:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	89db      	ldrh	r3, [r3, #14]
    897e:	041b      	lsls	r3, r3, #16
    8980:	0019      	movs	r1, r3
    8982:	4b1b      	ldr	r3, [pc, #108]	; (89f0 <system_clock_source_dfll_set_config+0xcc>)
    8984:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8986:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8988:	687a      	ldr	r2, [r7, #4]
    898a:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    898c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    898e:	4b17      	ldr	r3, [pc, #92]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    8990:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    8992:	4b16      	ldr	r3, [pc, #88]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	687a      	ldr	r2, [r7, #4]
    8998:	7812      	ldrb	r2, [r2, #0]
    899a:	431a      	orrs	r2, r3
    899c:	4b13      	ldr	r3, [pc, #76]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    899e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    89a0:	687b      	ldr	r3, [r7, #4]
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	2b20      	cmp	r3, #32
    89a6:	d11c      	bne.n	89e2 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	7b1b      	ldrb	r3, [r3, #12]
    89ac:	069b      	lsls	r3, r3, #26
    89ae:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    89b0:	687b      	ldr	r3, [r7, #4]
    89b2:	89db      	ldrh	r3, [r3, #14]
    89b4:	041b      	lsls	r3, r3, #16
    89b6:	0019      	movs	r1, r3
    89b8:	4b0d      	ldr	r3, [pc, #52]	; (89f0 <system_clock_source_dfll_set_config+0xcc>)
    89ba:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    89bc:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    89be:	687a      	ldr	r2, [r7, #4]
    89c0:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    89c2:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    89c4:	4b09      	ldr	r3, [pc, #36]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    89c6:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    89c8:	4b08      	ldr	r3, [pc, #32]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    89ca:	681b      	ldr	r3, [r3, #0]
    89cc:	687a      	ldr	r2, [r7, #4]
    89ce:	7812      	ldrb	r2, [r2, #0]
    89d0:	2104      	movs	r1, #4
    89d2:	430a      	orrs	r2, r1
    89d4:	b2d2      	uxtb	r2, r2
    89d6:	4313      	orrs	r3, r2
    89d8:	2280      	movs	r2, #128	; 0x80
    89da:	00d2      	lsls	r2, r2, #3
    89dc:	431a      	orrs	r2, r3
    89de:	4b03      	ldr	r3, [pc, #12]	; (89ec <system_clock_source_dfll_set_config+0xc8>)
    89e0:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    89e2:	46c0      	nop			; (mov r8, r8)
    89e4:	46bd      	mov	sp, r7
    89e6:	b002      	add	sp, #8
    89e8:	bd80      	pop	{r7, pc}
    89ea:	46c0      	nop			; (mov r8, r8)
    89ec:	200000f4 	.word	0x200000f4
    89f0:	03ff0000 	.word	0x03ff0000

000089f4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    89f4:	b580      	push	{r7, lr}
    89f6:	b082      	sub	sp, #8
    89f8:	af00      	add	r7, sp, #0
    89fa:	0002      	movs	r2, r0
    89fc:	1dfb      	adds	r3, r7, #7
    89fe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8a00:	1dfb      	adds	r3, r7, #7
    8a02:	781b      	ldrb	r3, [r3, #0]
    8a04:	2b08      	cmp	r3, #8
    8a06:	d83b      	bhi.n	8a80 <system_clock_source_enable+0x8c>
    8a08:	009a      	lsls	r2, r3, #2
    8a0a:	4b21      	ldr	r3, [pc, #132]	; (8a90 <system_clock_source_enable+0x9c>)
    8a0c:	18d3      	adds	r3, r2, r3
    8a0e:	681b      	ldr	r3, [r3, #0]
    8a10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8a12:	4b20      	ldr	r3, [pc, #128]	; (8a94 <system_clock_source_enable+0xa0>)
    8a14:	4a1f      	ldr	r2, [pc, #124]	; (8a94 <system_clock_source_enable+0xa0>)
    8a16:	6a12      	ldr	r2, [r2, #32]
    8a18:	2102      	movs	r1, #2
    8a1a:	430a      	orrs	r2, r1
    8a1c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    8a1e:	2300      	movs	r3, #0
    8a20:	e031      	b.n	8a86 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8a22:	4b1c      	ldr	r3, [pc, #112]	; (8a94 <system_clock_source_enable+0xa0>)
    8a24:	4a1b      	ldr	r2, [pc, #108]	; (8a94 <system_clock_source_enable+0xa0>)
    8a26:	6992      	ldr	r2, [r2, #24]
    8a28:	2102      	movs	r1, #2
    8a2a:	430a      	orrs	r2, r1
    8a2c:	619a      	str	r2, [r3, #24]
		break;
    8a2e:	e029      	b.n	8a84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8a30:	4a18      	ldr	r2, [pc, #96]	; (8a94 <system_clock_source_enable+0xa0>)
    8a32:	4b18      	ldr	r3, [pc, #96]	; (8a94 <system_clock_source_enable+0xa0>)
    8a34:	8a1b      	ldrh	r3, [r3, #16]
    8a36:	b29b      	uxth	r3, r3
    8a38:	2102      	movs	r1, #2
    8a3a:	430b      	orrs	r3, r1
    8a3c:	b29b      	uxth	r3, r3
    8a3e:	8213      	strh	r3, [r2, #16]
		break;
    8a40:	e020      	b.n	8a84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    8a42:	4a14      	ldr	r2, [pc, #80]	; (8a94 <system_clock_source_enable+0xa0>)
    8a44:	4b13      	ldr	r3, [pc, #76]	; (8a94 <system_clock_source_enable+0xa0>)
    8a46:	8a9b      	ldrh	r3, [r3, #20]
    8a48:	b29b      	uxth	r3, r3
    8a4a:	2102      	movs	r1, #2
    8a4c:	430b      	orrs	r3, r1
    8a4e:	b29b      	uxth	r3, r3
    8a50:	8293      	strh	r3, [r2, #20]
		break;
    8a52:	e017      	b.n	8a84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    8a54:	4b10      	ldr	r3, [pc, #64]	; (8a98 <system_clock_source_enable+0xa4>)
    8a56:	681b      	ldr	r3, [r3, #0]
    8a58:	2202      	movs	r2, #2
    8a5a:	431a      	orrs	r2, r3
    8a5c:	4b0e      	ldr	r3, [pc, #56]	; (8a98 <system_clock_source_enable+0xa4>)
    8a5e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    8a60:	4b0e      	ldr	r3, [pc, #56]	; (8a9c <system_clock_source_enable+0xa8>)
    8a62:	4798      	blx	r3
		break;
    8a64:	e00e      	b.n	8a84 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    8a66:	4a0b      	ldr	r2, [pc, #44]	; (8a94 <system_clock_source_enable+0xa0>)
    8a68:	490a      	ldr	r1, [pc, #40]	; (8a94 <system_clock_source_enable+0xa0>)
    8a6a:	2344      	movs	r3, #68	; 0x44
    8a6c:	5ccb      	ldrb	r3, [r1, r3]
    8a6e:	b2db      	uxtb	r3, r3
    8a70:	2102      	movs	r1, #2
    8a72:	430b      	orrs	r3, r1
    8a74:	b2d9      	uxtb	r1, r3
    8a76:	2344      	movs	r3, #68	; 0x44
    8a78:	54d1      	strb	r1, [r2, r3]
		break;
    8a7a:	e003      	b.n	8a84 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    8a7c:	2300      	movs	r3, #0
    8a7e:	e002      	b.n	8a86 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8a80:	2317      	movs	r3, #23
    8a82:	e000      	b.n	8a86 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    8a84:	2300      	movs	r3, #0
}
    8a86:	0018      	movs	r0, r3
    8a88:	46bd      	mov	sp, r7
    8a8a:	b002      	add	sp, #8
    8a8c:	bd80      	pop	{r7, pc}
    8a8e:	46c0      	nop			; (mov r8, r8)
    8a90:	0000d51c 	.word	0x0000d51c
    8a94:	40000800 	.word	0x40000800
    8a98:	200000f4 	.word	0x200000f4
    8a9c:	0000868d 	.word	0x0000868d

00008aa0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    8aa0:	b580      	push	{r7, lr}
    8aa2:	b084      	sub	sp, #16
    8aa4:	af00      	add	r7, sp, #0
    8aa6:	0002      	movs	r2, r0
    8aa8:	1dfb      	adds	r3, r7, #7
    8aaa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    8aac:	2300      	movs	r3, #0
    8aae:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    8ab0:	1dfb      	adds	r3, r7, #7
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	2b08      	cmp	r3, #8
    8ab6:	d821      	bhi.n	8afc <system_clock_source_is_ready+0x5c>
    8ab8:	009a      	lsls	r2, r3, #2
    8aba:	4b18      	ldr	r3, [pc, #96]	; (8b1c <system_clock_source_is_ready+0x7c>)
    8abc:	18d3      	adds	r3, r2, r3
    8abe:	681b      	ldr	r3, [r3, #0]
    8ac0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    8ac2:	2308      	movs	r3, #8
    8ac4:	60fb      	str	r3, [r7, #12]
		break;
    8ac6:	e01b      	b.n	8b00 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    8ac8:	2304      	movs	r3, #4
    8aca:	60fb      	str	r3, [r7, #12]
		break;
    8acc:	e018      	b.n	8b00 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    8ace:	2301      	movs	r3, #1
    8ad0:	60fb      	str	r3, [r7, #12]
		break;
    8ad2:	e015      	b.n	8b00 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    8ad4:	2302      	movs	r3, #2
    8ad6:	60fb      	str	r3, [r7, #12]
		break;
    8ad8:	e012      	b.n	8b00 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    8ada:	23d0      	movs	r3, #208	; 0xd0
    8adc:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    8ade:	e00f      	b.n	8b00 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    8ae0:	4a0f      	ldr	r2, [pc, #60]	; (8b20 <system_clock_source_is_ready+0x80>)
    8ae2:	2350      	movs	r3, #80	; 0x50
    8ae4:	5cd3      	ldrb	r3, [r2, r3]
    8ae6:	b2db      	uxtb	r3, r3
    8ae8:	001a      	movs	r2, r3
    8aea:	2303      	movs	r3, #3
    8aec:	4013      	ands	r3, r2
    8aee:	3b03      	subs	r3, #3
    8af0:	425a      	negs	r2, r3
    8af2:	4153      	adcs	r3, r2
    8af4:	b2db      	uxtb	r3, r3
    8af6:	e00c      	b.n	8b12 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    8af8:	2301      	movs	r3, #1
    8afa:	e00a      	b.n	8b12 <system_clock_source_is_ready+0x72>

	default:
		return false;
    8afc:	2300      	movs	r3, #0
    8afe:	e008      	b.n	8b12 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8b00:	4b07      	ldr	r3, [pc, #28]	; (8b20 <system_clock_source_is_ready+0x80>)
    8b02:	68db      	ldr	r3, [r3, #12]
    8b04:	68fa      	ldr	r2, [r7, #12]
    8b06:	401a      	ands	r2, r3
    8b08:	68fb      	ldr	r3, [r7, #12]
    8b0a:	1ad3      	subs	r3, r2, r3
    8b0c:	425a      	negs	r2, r3
    8b0e:	4153      	adcs	r3, r2
    8b10:	b2db      	uxtb	r3, r3
}
    8b12:	0018      	movs	r0, r3
    8b14:	46bd      	mov	sp, r7
    8b16:	b004      	add	sp, #16
    8b18:	bd80      	pop	{r7, pc}
    8b1a:	46c0      	nop			; (mov r8, r8)
    8b1c:	0000d540 	.word	0x0000d540
    8b20:	40000800 	.word	0x40000800

00008b24 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    8b24:	b580      	push	{r7, lr}
    8b26:	b082      	sub	sp, #8
    8b28:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    8b2a:	003b      	movs	r3, r7
    8b2c:	2202      	movs	r2, #2
    8b2e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8b30:	2300      	movs	r3, #0
    8b32:	607b      	str	r3, [r7, #4]
    8b34:	e009      	b.n	8b4a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    8b36:	687b      	ldr	r3, [r7, #4]
    8b38:	b2db      	uxtb	r3, r3
    8b3a:	003a      	movs	r2, r7
    8b3c:	0011      	movs	r1, r2
    8b3e:	0018      	movs	r0, r3
    8b40:	4b05      	ldr	r3, [pc, #20]	; (8b58 <_switch_peripheral_gclk+0x34>)
    8b42:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	3301      	adds	r3, #1
    8b48:	607b      	str	r3, [r7, #4]
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	2b24      	cmp	r3, #36	; 0x24
    8b4e:	d9f2      	bls.n	8b36 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    8b50:	46c0      	nop			; (mov r8, r8)
    8b52:	46bd      	mov	sp, r7
    8b54:	b002      	add	sp, #8
    8b56:	bd80      	pop	{r7, pc}
    8b58:	00009105 	.word	0x00009105

00008b5c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	b0aa      	sub	sp, #168	; 0xa8
    8b60:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    8b62:	4b87      	ldr	r3, [pc, #540]	; (8d80 <system_clock_init+0x224>)
    8b64:	22c2      	movs	r2, #194	; 0xc2
    8b66:	00d2      	lsls	r2, r2, #3
    8b68:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    8b6a:	2002      	movs	r0, #2
    8b6c:	4b85      	ldr	r3, [pc, #532]	; (8d84 <system_clock_init+0x228>)
    8b6e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    8b70:	4b85      	ldr	r3, [pc, #532]	; (8d88 <system_clock_init+0x22c>)
    8b72:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    8b74:	2394      	movs	r3, #148	; 0x94
    8b76:	18fb      	adds	r3, r7, r3
    8b78:	0018      	movs	r0, r3
    8b7a:	4b84      	ldr	r3, [pc, #528]	; (8d8c <system_clock_init+0x230>)
    8b7c:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    8b7e:	2394      	movs	r3, #148	; 0x94
    8b80:	18fb      	adds	r3, r7, r3
    8b82:	2280      	movs	r2, #128	; 0x80
    8b84:	0212      	lsls	r2, r2, #8
    8b86:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    8b88:	2394      	movs	r3, #148	; 0x94
    8b8a:	18fb      	adds	r3, r7, r3
    8b8c:	2200      	movs	r2, #0
    8b8e:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8b90:	2394      	movs	r3, #148	; 0x94
    8b92:	18fb      	adds	r3, r7, r3
    8b94:	2203      	movs	r2, #3
    8b96:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    8b98:	2394      	movs	r3, #148	; 0x94
    8b9a:	18fb      	adds	r3, r7, r3
    8b9c:	2200      	movs	r2, #0
    8b9e:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    8ba0:	2394      	movs	r3, #148	; 0x94
    8ba2:	18fb      	adds	r3, r7, r3
    8ba4:	2200      	movs	r2, #0
    8ba6:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    8ba8:	2394      	movs	r3, #148	; 0x94
    8baa:	18fb      	adds	r3, r7, r3
    8bac:	2201      	movs	r2, #1
    8bae:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    8bb0:	2394      	movs	r3, #148	; 0x94
    8bb2:	18fb      	adds	r3, r7, r3
    8bb4:	2200      	movs	r2, #0
    8bb6:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    8bb8:	2394      	movs	r3, #148	; 0x94
    8bba:	18fb      	adds	r3, r7, r3
    8bbc:	2200      	movs	r2, #0
    8bbe:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8bc0:	2394      	movs	r3, #148	; 0x94
    8bc2:	18fb      	adds	r3, r7, r3
    8bc4:	0018      	movs	r0, r3
    8bc6:	4b72      	ldr	r3, [pc, #456]	; (8d90 <system_clock_init+0x234>)
    8bc8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    8bca:	2005      	movs	r0, #5
    8bcc:	4b71      	ldr	r3, [pc, #452]	; (8d94 <system_clock_init+0x238>)
    8bce:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8bd0:	46c0      	nop			; (mov r8, r8)
    8bd2:	2005      	movs	r0, #5
    8bd4:	4b70      	ldr	r3, [pc, #448]	; (8d98 <system_clock_init+0x23c>)
    8bd6:	4798      	blx	r3
    8bd8:	0003      	movs	r3, r0
    8bda:	001a      	movs	r2, r3
    8bdc:	2301      	movs	r3, #1
    8bde:	4053      	eors	r3, r2
    8be0:	b2db      	uxtb	r3, r3
    8be2:	2b00      	cmp	r3, #0
    8be4:	d1f5      	bne.n	8bd2 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    8be6:	4a66      	ldr	r2, [pc, #408]	; (8d80 <system_clock_init+0x224>)
    8be8:	8a93      	ldrh	r3, [r2, #20]
    8bea:	2180      	movs	r1, #128	; 0x80
    8bec:	430b      	orrs	r3, r1
    8bee:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    8bf0:	2380      	movs	r3, #128	; 0x80
    8bf2:	18fb      	adds	r3, r7, r3
    8bf4:	0018      	movs	r0, r3
    8bf6:	4b69      	ldr	r3, [pc, #420]	; (8d9c <system_clock_init+0x240>)
    8bf8:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8bfa:	2380      	movs	r3, #128	; 0x80
    8bfc:	18fb      	adds	r3, r7, r3
    8bfe:	2204      	movs	r2, #4
    8c00:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    8c02:	2380      	movs	r3, #128	; 0x80
    8c04:	18fb      	adds	r3, r7, r3
    8c06:	2200      	movs	r2, #0
    8c08:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    8c0a:	4b65      	ldr	r3, [pc, #404]	; (8da0 <system_clock_init+0x244>)
    8c0c:	681b      	ldr	r3, [r3, #0]
    8c0e:	0e9b      	lsrs	r3, r3, #26
    8c10:	22a4      	movs	r2, #164	; 0xa4
    8c12:	18ba      	adds	r2, r7, r2
    8c14:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    8c16:	23a4      	movs	r3, #164	; 0xa4
    8c18:	18fb      	adds	r3, r7, r3
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	2b3f      	cmp	r3, #63	; 0x3f
    8c1e:	d103      	bne.n	8c28 <system_clock_init+0xcc>
		coarse = 0x1f;
    8c20:	231f      	movs	r3, #31
    8c22:	22a4      	movs	r2, #164	; 0xa4
    8c24:	18ba      	adds	r2, r7, r2
    8c26:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    8c28:	23a4      	movs	r3, #164	; 0xa4
    8c2a:	18fb      	adds	r3, r7, r3
    8c2c:	681b      	ldr	r3, [r3, #0]
    8c2e:	b2da      	uxtb	r2, r3
    8c30:	2380      	movs	r3, #128	; 0x80
    8c32:	18fb      	adds	r3, r7, r3
    8c34:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8c36:	2380      	movs	r3, #128	; 0x80
    8c38:	18fb      	adds	r3, r7, r3
    8c3a:	2200      	movs	r2, #0
    8c3c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8c3e:	2380      	movs	r3, #128	; 0x80
    8c40:	18fb      	adds	r3, r7, r3
    8c42:	2200      	movs	r2, #0
    8c44:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8c46:	2380      	movs	r3, #128	; 0x80
    8c48:	18fb      	adds	r3, r7, r3
    8c4a:	2200      	movs	r2, #0
    8c4c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8c4e:	2380      	movs	r3, #128	; 0x80
    8c50:	18fb      	adds	r3, r7, r3
    8c52:	2200      	movs	r2, #0
    8c54:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    8c56:	2380      	movs	r3, #128	; 0x80
    8c58:	18fb      	adds	r3, r7, r3
    8c5a:	4a52      	ldr	r2, [pc, #328]	; (8da4 <system_clock_init+0x248>)
    8c5c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8c5e:	2380      	movs	r3, #128	; 0x80
    8c60:	18fb      	adds	r3, r7, r3
    8c62:	2207      	movs	r2, #7
    8c64:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    8c66:	2380      	movs	r3, #128	; 0x80
    8c68:	18fb      	adds	r3, r7, r3
    8c6a:	223f      	movs	r2, #63	; 0x3f
    8c6c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8c6e:	2380      	movs	r3, #128	; 0x80
    8c70:	18fb      	adds	r3, r7, r3
    8c72:	0018      	movs	r0, r3
    8c74:	4b4c      	ldr	r3, [pc, #304]	; (8da8 <system_clock_init+0x24c>)
    8c76:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    8c78:	237c      	movs	r3, #124	; 0x7c
    8c7a:	18fb      	adds	r3, r7, r3
    8c7c:	0018      	movs	r0, r3
    8c7e:	4b4b      	ldr	r3, [pc, #300]	; (8dac <system_clock_init+0x250>)
    8c80:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    8c82:	237c      	movs	r3, #124	; 0x7c
    8c84:	18fb      	adds	r3, r7, r3
    8c86:	2200      	movs	r2, #0
    8c88:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    8c8a:	237c      	movs	r3, #124	; 0x7c
    8c8c:	18fb      	adds	r3, r7, r3
    8c8e:	2201      	movs	r2, #1
    8c90:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    8c92:	237c      	movs	r3, #124	; 0x7c
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	2200      	movs	r2, #0
    8c98:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    8c9a:	237c      	movs	r3, #124	; 0x7c
    8c9c:	18fb      	adds	r3, r7, r3
    8c9e:	0018      	movs	r0, r3
    8ca0:	4b43      	ldr	r3, [pc, #268]	; (8db0 <system_clock_init+0x254>)
    8ca2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    8ca4:	2006      	movs	r0, #6
    8ca6:	4b3b      	ldr	r3, [pc, #236]	; (8d94 <system_clock_init+0x238>)
    8ca8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    8caa:	4b42      	ldr	r3, [pc, #264]	; (8db4 <system_clock_init+0x258>)
    8cac:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    8cae:	2364      	movs	r3, #100	; 0x64
    8cb0:	18fb      	adds	r3, r7, r3
    8cb2:	0018      	movs	r0, r3
    8cb4:	4b40      	ldr	r3, [pc, #256]	; (8db8 <system_clock_init+0x25c>)
    8cb6:	4798      	blx	r3
    8cb8:	2364      	movs	r3, #100	; 0x64
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	2205      	movs	r2, #5
    8cbe:	701a      	strb	r2, [r3, #0]
    8cc0:	2364      	movs	r3, #100	; 0x64
    8cc2:	18fb      	adds	r3, r7, r3
    8cc4:	2201      	movs	r2, #1
    8cc6:	605a      	str	r2, [r3, #4]
    8cc8:	2364      	movs	r3, #100	; 0x64
    8cca:	18fb      	adds	r3, r7, r3
    8ccc:	2200      	movs	r2, #0
    8cce:	721a      	strb	r2, [r3, #8]
    8cd0:	2364      	movs	r3, #100	; 0x64
    8cd2:	18fb      	adds	r3, r7, r3
    8cd4:	2200      	movs	r2, #0
    8cd6:	725a      	strb	r2, [r3, #9]
    8cd8:	2364      	movs	r3, #100	; 0x64
    8cda:	18fb      	adds	r3, r7, r3
    8cdc:	0019      	movs	r1, r3
    8cde:	2001      	movs	r0, #1
    8ce0:	4b36      	ldr	r3, [pc, #216]	; (8dbc <system_clock_init+0x260>)
    8ce2:	4798      	blx	r3
    8ce4:	2001      	movs	r0, #1
    8ce6:	4b36      	ldr	r3, [pc, #216]	; (8dc0 <system_clock_init+0x264>)
    8ce8:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    8cea:	230c      	movs	r3, #12
    8cec:	18fb      	adds	r3, r7, r3
    8cee:	0018      	movs	r0, r3
    8cf0:	4b34      	ldr	r3, [pc, #208]	; (8dc4 <system_clock_init+0x268>)
    8cf2:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    8cf4:	230c      	movs	r3, #12
    8cf6:	18fb      	adds	r3, r7, r3
    8cf8:	2201      	movs	r2, #1
    8cfa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    8cfc:	230c      	movs	r3, #12
    8cfe:	18fb      	adds	r3, r7, r3
    8d00:	0019      	movs	r1, r3
    8d02:	2000      	movs	r0, #0
    8d04:	4b30      	ldr	r3, [pc, #192]	; (8dc8 <system_clock_init+0x26c>)
    8d06:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    8d08:	2000      	movs	r0, #0
    8d0a:	4b30      	ldr	r3, [pc, #192]	; (8dcc <system_clock_init+0x270>)
    8d0c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    8d0e:	2007      	movs	r0, #7
    8d10:	4b20      	ldr	r3, [pc, #128]	; (8d94 <system_clock_init+0x238>)
    8d12:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8d14:	46c0      	nop			; (mov r8, r8)
    8d16:	2007      	movs	r0, #7
    8d18:	4b1f      	ldr	r3, [pc, #124]	; (8d98 <system_clock_init+0x23c>)
    8d1a:	4798      	blx	r3
    8d1c:	0003      	movs	r3, r0
    8d1e:	001a      	movs	r2, r3
    8d20:	2301      	movs	r3, #1
    8d22:	4053      	eors	r3, r2
    8d24:	b2db      	uxtb	r3, r3
    8d26:	2b00      	cmp	r3, #0
    8d28:	d1f5      	bne.n	8d16 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    8d2a:	2000      	movs	r0, #0
    8d2c:	4b28      	ldr	r3, [pc, #160]	; (8dd0 <system_clock_init+0x274>)
    8d2e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    8d30:	2100      	movs	r1, #0
    8d32:	2000      	movs	r0, #0
    8d34:	4b27      	ldr	r3, [pc, #156]	; (8dd4 <system_clock_init+0x278>)
    8d36:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    8d38:	2100      	movs	r1, #0
    8d3a:	2001      	movs	r0, #1
    8d3c:	4b25      	ldr	r3, [pc, #148]	; (8dd4 <system_clock_init+0x278>)
    8d3e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    8d40:	2100      	movs	r1, #0
    8d42:	2002      	movs	r0, #2
    8d44:	4b23      	ldr	r3, [pc, #140]	; (8dd4 <system_clock_init+0x278>)
    8d46:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8d48:	003b      	movs	r3, r7
    8d4a:	0018      	movs	r0, r3
    8d4c:	4b1a      	ldr	r3, [pc, #104]	; (8db8 <system_clock_init+0x25c>)
    8d4e:	4798      	blx	r3
    8d50:	003b      	movs	r3, r7
    8d52:	2207      	movs	r2, #7
    8d54:	701a      	strb	r2, [r3, #0]
    8d56:	003b      	movs	r3, r7
    8d58:	2201      	movs	r2, #1
    8d5a:	605a      	str	r2, [r3, #4]
    8d5c:	003b      	movs	r3, r7
    8d5e:	2200      	movs	r2, #0
    8d60:	721a      	strb	r2, [r3, #8]
    8d62:	003b      	movs	r3, r7
    8d64:	2200      	movs	r2, #0
    8d66:	725a      	strb	r2, [r3, #9]
    8d68:	003b      	movs	r3, r7
    8d6a:	0019      	movs	r1, r3
    8d6c:	2000      	movs	r0, #0
    8d6e:	4b13      	ldr	r3, [pc, #76]	; (8dbc <system_clock_init+0x260>)
    8d70:	4798      	blx	r3
    8d72:	2000      	movs	r0, #0
    8d74:	4b12      	ldr	r3, [pc, #72]	; (8dc0 <system_clock_init+0x264>)
    8d76:	4798      	blx	r3
#endif
}
    8d78:	46c0      	nop			; (mov r8, r8)
    8d7a:	46bd      	mov	sp, r7
    8d7c:	b02a      	add	sp, #168	; 0xa8
    8d7e:	bd80      	pop	{r7, pc}
    8d80:	40000800 	.word	0x40000800
    8d84:	0000863d 	.word	0x0000863d
    8d88:	00008b25 	.word	0x00008b25
    8d8c:	00008509 	.word	0x00008509
    8d90:	00008805 	.word	0x00008805
    8d94:	000089f5 	.word	0x000089f5
    8d98:	00008aa1 	.word	0x00008aa1
    8d9c:	00008575 	.word	0x00008575
    8da0:	00806024 	.word	0x00806024
    8da4:	000005b9 	.word	0x000005b9
    8da8:	00008925 	.word	0x00008925
    8dac:	00008551 	.word	0x00008551
    8db0:	0000878d 	.word	0x0000878d
    8db4:	00008e7d 	.word	0x00008e7d
    8db8:	000084c1 	.word	0x000084c1
    8dbc:	00008ead 	.word	0x00008ead
    8dc0:	00008fd1 	.word	0x00008fd1
    8dc4:	000084f1 	.word	0x000084f1
    8dc8:	00009105 	.word	0x00009105
    8dcc:	00009149 	.word	0x00009149
    8dd0:	000085c9 	.word	0x000085c9
    8dd4:	000085e9 	.word	0x000085e9

00008dd8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8dd8:	b580      	push	{r7, lr}
    8dda:	b082      	sub	sp, #8
    8ddc:	af00      	add	r7, sp, #0
    8dde:	0002      	movs	r2, r0
    8de0:	6039      	str	r1, [r7, #0]
    8de2:	1dfb      	adds	r3, r7, #7
    8de4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8de6:	1dfb      	adds	r3, r7, #7
    8de8:	781b      	ldrb	r3, [r3, #0]
    8dea:	2b01      	cmp	r3, #1
    8dec:	d00a      	beq.n	8e04 <system_apb_clock_set_mask+0x2c>
    8dee:	2b02      	cmp	r3, #2
    8df0:	d00f      	beq.n	8e12 <system_apb_clock_set_mask+0x3a>
    8df2:	2b00      	cmp	r3, #0
    8df4:	d114      	bne.n	8e20 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8df6:	4b0e      	ldr	r3, [pc, #56]	; (8e30 <system_apb_clock_set_mask+0x58>)
    8df8:	4a0d      	ldr	r2, [pc, #52]	; (8e30 <system_apb_clock_set_mask+0x58>)
    8dfa:	6991      	ldr	r1, [r2, #24]
    8dfc:	683a      	ldr	r2, [r7, #0]
    8dfe:	430a      	orrs	r2, r1
    8e00:	619a      	str	r2, [r3, #24]
			break;
    8e02:	e00f      	b.n	8e24 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8e04:	4b0a      	ldr	r3, [pc, #40]	; (8e30 <system_apb_clock_set_mask+0x58>)
    8e06:	4a0a      	ldr	r2, [pc, #40]	; (8e30 <system_apb_clock_set_mask+0x58>)
    8e08:	69d1      	ldr	r1, [r2, #28]
    8e0a:	683a      	ldr	r2, [r7, #0]
    8e0c:	430a      	orrs	r2, r1
    8e0e:	61da      	str	r2, [r3, #28]
			break;
    8e10:	e008      	b.n	8e24 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8e12:	4b07      	ldr	r3, [pc, #28]	; (8e30 <system_apb_clock_set_mask+0x58>)
    8e14:	4a06      	ldr	r2, [pc, #24]	; (8e30 <system_apb_clock_set_mask+0x58>)
    8e16:	6a11      	ldr	r1, [r2, #32]
    8e18:	683a      	ldr	r2, [r7, #0]
    8e1a:	430a      	orrs	r2, r1
    8e1c:	621a      	str	r2, [r3, #32]
			break;
    8e1e:	e001      	b.n	8e24 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8e20:	2317      	movs	r3, #23
    8e22:	e000      	b.n	8e26 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8e24:	2300      	movs	r3, #0
}
    8e26:	0018      	movs	r0, r3
    8e28:	46bd      	mov	sp, r7
    8e2a:	b002      	add	sp, #8
    8e2c:	bd80      	pop	{r7, pc}
    8e2e:	46c0      	nop			; (mov r8, r8)
    8e30:	40000400 	.word	0x40000400

00008e34 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    8e34:	b580      	push	{r7, lr}
    8e36:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8e38:	4b02      	ldr	r3, [pc, #8]	; (8e44 <system_interrupt_enter_critical_section+0x10>)
    8e3a:	4798      	blx	r3
}
    8e3c:	46c0      	nop			; (mov r8, r8)
    8e3e:	46bd      	mov	sp, r7
    8e40:	bd80      	pop	{r7, pc}
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	00005ed5 	.word	0x00005ed5

00008e48 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8e4c:	4b02      	ldr	r3, [pc, #8]	; (8e58 <system_interrupt_leave_critical_section+0x10>)
    8e4e:	4798      	blx	r3
}
    8e50:	46c0      	nop			; (mov r8, r8)
    8e52:	46bd      	mov	sp, r7
    8e54:	bd80      	pop	{r7, pc}
    8e56:	46c0      	nop			; (mov r8, r8)
    8e58:	00005f29 	.word	0x00005f29

00008e5c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    8e5c:	b580      	push	{r7, lr}
    8e5e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8e60:	4b05      	ldr	r3, [pc, #20]	; (8e78 <system_gclk_is_syncing+0x1c>)
    8e62:	785b      	ldrb	r3, [r3, #1]
    8e64:	b2db      	uxtb	r3, r3
    8e66:	b25b      	sxtb	r3, r3
    8e68:	2b00      	cmp	r3, #0
    8e6a:	da01      	bge.n	8e70 <system_gclk_is_syncing+0x14>
		return true;
    8e6c:	2301      	movs	r3, #1
    8e6e:	e000      	b.n	8e72 <system_gclk_is_syncing+0x16>
	}

	return false;
    8e70:	2300      	movs	r3, #0
}
    8e72:	0018      	movs	r0, r3
    8e74:	46bd      	mov	sp, r7
    8e76:	bd80      	pop	{r7, pc}
    8e78:	40000c00 	.word	0x40000c00

00008e7c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    8e80:	2108      	movs	r1, #8
    8e82:	2000      	movs	r0, #0
    8e84:	4b07      	ldr	r3, [pc, #28]	; (8ea4 <system_gclk_init+0x28>)
    8e86:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8e88:	4b07      	ldr	r3, [pc, #28]	; (8ea8 <system_gclk_init+0x2c>)
    8e8a:	2201      	movs	r2, #1
    8e8c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8e8e:	46c0      	nop			; (mov r8, r8)
    8e90:	4b05      	ldr	r3, [pc, #20]	; (8ea8 <system_gclk_init+0x2c>)
    8e92:	781b      	ldrb	r3, [r3, #0]
    8e94:	b2db      	uxtb	r3, r3
    8e96:	001a      	movs	r2, r3
    8e98:	2301      	movs	r3, #1
    8e9a:	4013      	ands	r3, r2
    8e9c:	d1f8      	bne.n	8e90 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    8e9e:	46c0      	nop			; (mov r8, r8)
    8ea0:	46bd      	mov	sp, r7
    8ea2:	bd80      	pop	{r7, pc}
    8ea4:	00008dd9 	.word	0x00008dd9
    8ea8:	40000c00 	.word	0x40000c00

00008eac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8eac:	b580      	push	{r7, lr}
    8eae:	b086      	sub	sp, #24
    8eb0:	af00      	add	r7, sp, #0
    8eb2:	0002      	movs	r2, r0
    8eb4:	6039      	str	r1, [r7, #0]
    8eb6:	1dfb      	adds	r3, r7, #7
    8eb8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8eba:	1dfb      	adds	r3, r7, #7
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    8ec0:	1dfb      	adds	r3, r7, #7
    8ec2:	781b      	ldrb	r3, [r3, #0]
    8ec4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8ec6:	683b      	ldr	r3, [r7, #0]
    8ec8:	781b      	ldrb	r3, [r3, #0]
    8eca:	021b      	lsls	r3, r3, #8
    8ecc:	001a      	movs	r2, r3
    8ece:	697b      	ldr	r3, [r7, #20]
    8ed0:	4313      	orrs	r3, r2
    8ed2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8ed4:	683b      	ldr	r3, [r7, #0]
    8ed6:	785b      	ldrb	r3, [r3, #1]
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d004      	beq.n	8ee6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8edc:	697b      	ldr	r3, [r7, #20]
    8ede:	2280      	movs	r2, #128	; 0x80
    8ee0:	02d2      	lsls	r2, r2, #11
    8ee2:	4313      	orrs	r3, r2
    8ee4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8ee6:	683b      	ldr	r3, [r7, #0]
    8ee8:	7a5b      	ldrb	r3, [r3, #9]
    8eea:	2b00      	cmp	r3, #0
    8eec:	d004      	beq.n	8ef8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8eee:	697b      	ldr	r3, [r7, #20]
    8ef0:	2280      	movs	r2, #128	; 0x80
    8ef2:	0312      	lsls	r2, r2, #12
    8ef4:	4313      	orrs	r3, r2
    8ef6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8ef8:	683b      	ldr	r3, [r7, #0]
    8efa:	685b      	ldr	r3, [r3, #4]
    8efc:	2b01      	cmp	r3, #1
    8efe:	d92c      	bls.n	8f5a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8f00:	683b      	ldr	r3, [r7, #0]
    8f02:	685a      	ldr	r2, [r3, #4]
    8f04:	683b      	ldr	r3, [r7, #0]
    8f06:	685b      	ldr	r3, [r3, #4]
    8f08:	3b01      	subs	r3, #1
    8f0a:	4013      	ands	r3, r2
    8f0c:	d11a      	bne.n	8f44 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    8f0e:	2300      	movs	r3, #0
    8f10:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8f12:	2302      	movs	r3, #2
    8f14:	60bb      	str	r3, [r7, #8]
    8f16:	e005      	b.n	8f24 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    8f18:	68fb      	ldr	r3, [r7, #12]
    8f1a:	3301      	adds	r3, #1
    8f1c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    8f1e:	68bb      	ldr	r3, [r7, #8]
    8f20:	005b      	lsls	r3, r3, #1
    8f22:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8f24:	683b      	ldr	r3, [r7, #0]
    8f26:	685a      	ldr	r2, [r3, #4]
    8f28:	68bb      	ldr	r3, [r7, #8]
    8f2a:	429a      	cmp	r2, r3
    8f2c:	d8f4      	bhi.n	8f18 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8f2e:	68fb      	ldr	r3, [r7, #12]
    8f30:	021b      	lsls	r3, r3, #8
    8f32:	693a      	ldr	r2, [r7, #16]
    8f34:	4313      	orrs	r3, r2
    8f36:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8f38:	697b      	ldr	r3, [r7, #20]
    8f3a:	2280      	movs	r2, #128	; 0x80
    8f3c:	0352      	lsls	r2, r2, #13
    8f3e:	4313      	orrs	r3, r2
    8f40:	617b      	str	r3, [r7, #20]
    8f42:	e00a      	b.n	8f5a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8f44:	683b      	ldr	r3, [r7, #0]
    8f46:	685b      	ldr	r3, [r3, #4]
    8f48:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    8f4a:	693a      	ldr	r2, [r7, #16]
    8f4c:	4313      	orrs	r3, r2
    8f4e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8f50:	697b      	ldr	r3, [r7, #20]
    8f52:	2280      	movs	r2, #128	; 0x80
    8f54:	0292      	lsls	r2, r2, #10
    8f56:	4313      	orrs	r3, r2
    8f58:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8f5a:	683b      	ldr	r3, [r7, #0]
    8f5c:	7a1b      	ldrb	r3, [r3, #8]
    8f5e:	2b00      	cmp	r3, #0
    8f60:	d004      	beq.n	8f6c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8f62:	697b      	ldr	r3, [r7, #20]
    8f64:	2280      	movs	r2, #128	; 0x80
    8f66:	0392      	lsls	r2, r2, #14
    8f68:	4313      	orrs	r3, r2
    8f6a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    8f6c:	46c0      	nop			; (mov r8, r8)
    8f6e:	4b13      	ldr	r3, [pc, #76]	; (8fbc <system_gclk_gen_set_config+0x110>)
    8f70:	4798      	blx	r3
    8f72:	1e03      	subs	r3, r0, #0
    8f74:	d1fb      	bne.n	8f6e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8f76:	4b12      	ldr	r3, [pc, #72]	; (8fc0 <system_gclk_gen_set_config+0x114>)
    8f78:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8f7a:	4a12      	ldr	r2, [pc, #72]	; (8fc4 <system_gclk_gen_set_config+0x118>)
    8f7c:	1dfb      	adds	r3, r7, #7
    8f7e:	781b      	ldrb	r3, [r3, #0]
    8f80:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8f82:	46c0      	nop			; (mov r8, r8)
    8f84:	4b0d      	ldr	r3, [pc, #52]	; (8fbc <system_gclk_gen_set_config+0x110>)
    8f86:	4798      	blx	r3
    8f88:	1e03      	subs	r3, r0, #0
    8f8a:	d1fb      	bne.n	8f84 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8f8c:	4b0e      	ldr	r3, [pc, #56]	; (8fc8 <system_gclk_gen_set_config+0x11c>)
    8f8e:	693a      	ldr	r2, [r7, #16]
    8f90:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    8f92:	46c0      	nop			; (mov r8, r8)
    8f94:	4b09      	ldr	r3, [pc, #36]	; (8fbc <system_gclk_gen_set_config+0x110>)
    8f96:	4798      	blx	r3
    8f98:	1e03      	subs	r3, r0, #0
    8f9a:	d1fb      	bne.n	8f94 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8f9c:	4b0a      	ldr	r3, [pc, #40]	; (8fc8 <system_gclk_gen_set_config+0x11c>)
    8f9e:	4a0a      	ldr	r2, [pc, #40]	; (8fc8 <system_gclk_gen_set_config+0x11c>)
    8fa0:	6851      	ldr	r1, [r2, #4]
    8fa2:	2280      	movs	r2, #128	; 0x80
    8fa4:	0252      	lsls	r2, r2, #9
    8fa6:	4011      	ands	r1, r2
    8fa8:	697a      	ldr	r2, [r7, #20]
    8faa:	430a      	orrs	r2, r1
    8fac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8fae:	4b07      	ldr	r3, [pc, #28]	; (8fcc <system_gclk_gen_set_config+0x120>)
    8fb0:	4798      	blx	r3
}
    8fb2:	46c0      	nop			; (mov r8, r8)
    8fb4:	46bd      	mov	sp, r7
    8fb6:	b006      	add	sp, #24
    8fb8:	bd80      	pop	{r7, pc}
    8fba:	46c0      	nop			; (mov r8, r8)
    8fbc:	00008e5d 	.word	0x00008e5d
    8fc0:	00008e35 	.word	0x00008e35
    8fc4:	40000c08 	.word	0x40000c08
    8fc8:	40000c00 	.word	0x40000c00
    8fcc:	00008e49 	.word	0x00008e49

00008fd0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8fd0:	b580      	push	{r7, lr}
    8fd2:	b082      	sub	sp, #8
    8fd4:	af00      	add	r7, sp, #0
    8fd6:	0002      	movs	r2, r0
    8fd8:	1dfb      	adds	r3, r7, #7
    8fda:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8fdc:	46c0      	nop			; (mov r8, r8)
    8fde:	4b0e      	ldr	r3, [pc, #56]	; (9018 <system_gclk_gen_enable+0x48>)
    8fe0:	4798      	blx	r3
    8fe2:	1e03      	subs	r3, r0, #0
    8fe4:	d1fb      	bne.n	8fde <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8fe6:	4b0d      	ldr	r3, [pc, #52]	; (901c <system_gclk_gen_enable+0x4c>)
    8fe8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8fea:	4a0d      	ldr	r2, [pc, #52]	; (9020 <system_gclk_gen_enable+0x50>)
    8fec:	1dfb      	adds	r3, r7, #7
    8fee:	781b      	ldrb	r3, [r3, #0]
    8ff0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8ff2:	46c0      	nop			; (mov r8, r8)
    8ff4:	4b08      	ldr	r3, [pc, #32]	; (9018 <system_gclk_gen_enable+0x48>)
    8ff6:	4798      	blx	r3
    8ff8:	1e03      	subs	r3, r0, #0
    8ffa:	d1fb      	bne.n	8ff4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8ffc:	4b09      	ldr	r3, [pc, #36]	; (9024 <system_gclk_gen_enable+0x54>)
    8ffe:	4a09      	ldr	r2, [pc, #36]	; (9024 <system_gclk_gen_enable+0x54>)
    9000:	6852      	ldr	r2, [r2, #4]
    9002:	2180      	movs	r1, #128	; 0x80
    9004:	0249      	lsls	r1, r1, #9
    9006:	430a      	orrs	r2, r1
    9008:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    900a:	4b07      	ldr	r3, [pc, #28]	; (9028 <system_gclk_gen_enable+0x58>)
    900c:	4798      	blx	r3
}
    900e:	46c0      	nop			; (mov r8, r8)
    9010:	46bd      	mov	sp, r7
    9012:	b002      	add	sp, #8
    9014:	bd80      	pop	{r7, pc}
    9016:	46c0      	nop			; (mov r8, r8)
    9018:	00008e5d 	.word	0x00008e5d
    901c:	00008e35 	.word	0x00008e35
    9020:	40000c04 	.word	0x40000c04
    9024:	40000c00 	.word	0x40000c00
    9028:	00008e49 	.word	0x00008e49

0000902c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    902c:	b580      	push	{r7, lr}
    902e:	b086      	sub	sp, #24
    9030:	af00      	add	r7, sp, #0
    9032:	0002      	movs	r2, r0
    9034:	1dfb      	adds	r3, r7, #7
    9036:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    9038:	46c0      	nop			; (mov r8, r8)
    903a:	4b2a      	ldr	r3, [pc, #168]	; (90e4 <system_gclk_gen_get_hz+0xb8>)
    903c:	4798      	blx	r3
    903e:	1e03      	subs	r3, r0, #0
    9040:	d1fb      	bne.n	903a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    9042:	4b29      	ldr	r3, [pc, #164]	; (90e8 <system_gclk_gen_get_hz+0xbc>)
    9044:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9046:	4a29      	ldr	r2, [pc, #164]	; (90ec <system_gclk_gen_get_hz+0xc0>)
    9048:	1dfb      	adds	r3, r7, #7
    904a:	781b      	ldrb	r3, [r3, #0]
    904c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    904e:	46c0      	nop			; (mov r8, r8)
    9050:	4b24      	ldr	r3, [pc, #144]	; (90e4 <system_gclk_gen_get_hz+0xb8>)
    9052:	4798      	blx	r3
    9054:	1e03      	subs	r3, r0, #0
    9056:	d1fb      	bne.n	9050 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    9058:	4b25      	ldr	r3, [pc, #148]	; (90f0 <system_gclk_gen_get_hz+0xc4>)
    905a:	685b      	ldr	r3, [r3, #4]
    905c:	04db      	lsls	r3, r3, #19
    905e:	0edb      	lsrs	r3, r3, #27
    9060:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    9062:	0018      	movs	r0, r3
    9064:	4b23      	ldr	r3, [pc, #140]	; (90f4 <system_gclk_gen_get_hz+0xc8>)
    9066:	4798      	blx	r3
    9068:	0003      	movs	r3, r0
    906a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    906c:	4a1f      	ldr	r2, [pc, #124]	; (90ec <system_gclk_gen_get_hz+0xc0>)
    906e:	1dfb      	adds	r3, r7, #7
    9070:	781b      	ldrb	r3, [r3, #0]
    9072:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    9074:	4b1e      	ldr	r3, [pc, #120]	; (90f0 <system_gclk_gen_get_hz+0xc4>)
    9076:	685b      	ldr	r3, [r3, #4]
    9078:	02db      	lsls	r3, r3, #11
    907a:	0fdb      	lsrs	r3, r3, #31
    907c:	b2da      	uxtb	r2, r3
    907e:	2313      	movs	r3, #19
    9080:	18fb      	adds	r3, r7, r3
    9082:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9084:	4a1c      	ldr	r2, [pc, #112]	; (90f8 <system_gclk_gen_get_hz+0xcc>)
    9086:	1dfb      	adds	r3, r7, #7
    9088:	781b      	ldrb	r3, [r3, #0]
    908a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    908c:	46c0      	nop			; (mov r8, r8)
    908e:	4b15      	ldr	r3, [pc, #84]	; (90e4 <system_gclk_gen_get_hz+0xb8>)
    9090:	4798      	blx	r3
    9092:	1e03      	subs	r3, r0, #0
    9094:	d1fb      	bne.n	908e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    9096:	4b16      	ldr	r3, [pc, #88]	; (90f0 <system_gclk_gen_get_hz+0xc4>)
    9098:	689b      	ldr	r3, [r3, #8]
    909a:	021b      	lsls	r3, r3, #8
    909c:	0c1b      	lsrs	r3, r3, #16
    909e:	b29b      	uxth	r3, r3
    90a0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    90a2:	4b16      	ldr	r3, [pc, #88]	; (90fc <system_gclk_gen_get_hz+0xd0>)
    90a4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    90a6:	2313      	movs	r3, #19
    90a8:	18fb      	adds	r3, r7, r3
    90aa:	781b      	ldrb	r3, [r3, #0]
    90ac:	2b00      	cmp	r3, #0
    90ae:	d109      	bne.n	90c4 <system_gclk_gen_get_hz+0x98>
    90b0:	68fb      	ldr	r3, [r7, #12]
    90b2:	2b01      	cmp	r3, #1
    90b4:	d906      	bls.n	90c4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    90b6:	4b12      	ldr	r3, [pc, #72]	; (9100 <system_gclk_gen_get_hz+0xd4>)
    90b8:	68f9      	ldr	r1, [r7, #12]
    90ba:	6978      	ldr	r0, [r7, #20]
    90bc:	4798      	blx	r3
    90be:	0003      	movs	r3, r0
    90c0:	617b      	str	r3, [r7, #20]
    90c2:	e00a      	b.n	90da <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    90c4:	2313      	movs	r3, #19
    90c6:	18fb      	adds	r3, r7, r3
    90c8:	781b      	ldrb	r3, [r3, #0]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d005      	beq.n	90da <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    90ce:	68fb      	ldr	r3, [r7, #12]
    90d0:	3301      	adds	r3, #1
    90d2:	697a      	ldr	r2, [r7, #20]
    90d4:	40da      	lsrs	r2, r3
    90d6:	0013      	movs	r3, r2
    90d8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    90da:	697b      	ldr	r3, [r7, #20]
}
    90dc:	0018      	movs	r0, r3
    90de:	46bd      	mov	sp, r7
    90e0:	b006      	add	sp, #24
    90e2:	bd80      	pop	{r7, pc}
    90e4:	00008e5d 	.word	0x00008e5d
    90e8:	00008e35 	.word	0x00008e35
    90ec:	40000c04 	.word	0x40000c04
    90f0:	40000c00 	.word	0x40000c00
    90f4:	000086d1 	.word	0x000086d1
    90f8:	40000c08 	.word	0x40000c08
    90fc:	00008e49 	.word	0x00008e49
    9100:	0000aea1 	.word	0x0000aea1

00009104 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    9104:	b580      	push	{r7, lr}
    9106:	b084      	sub	sp, #16
    9108:	af00      	add	r7, sp, #0
    910a:	0002      	movs	r2, r0
    910c:	6039      	str	r1, [r7, #0]
    910e:	1dfb      	adds	r3, r7, #7
    9110:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    9112:	1dfb      	adds	r3, r7, #7
    9114:	781b      	ldrb	r3, [r3, #0]
    9116:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    9118:	683b      	ldr	r3, [r7, #0]
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	021b      	lsls	r3, r3, #8
    911e:	001a      	movs	r2, r3
    9120:	68fb      	ldr	r3, [r7, #12]
    9122:	4313      	orrs	r3, r2
    9124:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    9126:	1dfb      	adds	r3, r7, #7
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	0018      	movs	r0, r3
    912c:	4b04      	ldr	r3, [pc, #16]	; (9140 <system_gclk_chan_set_config+0x3c>)
    912e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    9130:	4b04      	ldr	r3, [pc, #16]	; (9144 <system_gclk_chan_set_config+0x40>)
    9132:	68fa      	ldr	r2, [r7, #12]
    9134:	b292      	uxth	r2, r2
    9136:	805a      	strh	r2, [r3, #2]
}
    9138:	46c0      	nop			; (mov r8, r8)
    913a:	46bd      	mov	sp, r7
    913c:	b004      	add	sp, #16
    913e:	bd80      	pop	{r7, pc}
    9140:	00009191 	.word	0x00009191
    9144:	40000c00 	.word	0x40000c00

00009148 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    9148:	b580      	push	{r7, lr}
    914a:	b082      	sub	sp, #8
    914c:	af00      	add	r7, sp, #0
    914e:	0002      	movs	r2, r0
    9150:	1dfb      	adds	r3, r7, #7
    9152:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9154:	4b0a      	ldr	r3, [pc, #40]	; (9180 <system_gclk_chan_enable+0x38>)
    9156:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9158:	4a0a      	ldr	r2, [pc, #40]	; (9184 <system_gclk_chan_enable+0x3c>)
    915a:	1dfb      	adds	r3, r7, #7
    915c:	781b      	ldrb	r3, [r3, #0]
    915e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    9160:	4909      	ldr	r1, [pc, #36]	; (9188 <system_gclk_chan_enable+0x40>)
    9162:	4b09      	ldr	r3, [pc, #36]	; (9188 <system_gclk_chan_enable+0x40>)
    9164:	885b      	ldrh	r3, [r3, #2]
    9166:	b29b      	uxth	r3, r3
    9168:	2280      	movs	r2, #128	; 0x80
    916a:	01d2      	lsls	r2, r2, #7
    916c:	4313      	orrs	r3, r2
    916e:	b29b      	uxth	r3, r3
    9170:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    9172:	4b06      	ldr	r3, [pc, #24]	; (918c <system_gclk_chan_enable+0x44>)
    9174:	4798      	blx	r3
}
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	46bd      	mov	sp, r7
    917a:	b002      	add	sp, #8
    917c:	bd80      	pop	{r7, pc}
    917e:	46c0      	nop			; (mov r8, r8)
    9180:	00008e35 	.word	0x00008e35
    9184:	40000c02 	.word	0x40000c02
    9188:	40000c00 	.word	0x40000c00
    918c:	00008e49 	.word	0x00008e49

00009190 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    9190:	b580      	push	{r7, lr}
    9192:	b084      	sub	sp, #16
    9194:	af00      	add	r7, sp, #0
    9196:	0002      	movs	r2, r0
    9198:	1dfb      	adds	r3, r7, #7
    919a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    919c:	4b1c      	ldr	r3, [pc, #112]	; (9210 <system_gclk_chan_disable+0x80>)
    919e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    91a0:	4a1c      	ldr	r2, [pc, #112]	; (9214 <system_gclk_chan_disable+0x84>)
    91a2:	1dfb      	adds	r3, r7, #7
    91a4:	781b      	ldrb	r3, [r3, #0]
    91a6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    91a8:	4b1b      	ldr	r3, [pc, #108]	; (9218 <system_gclk_chan_disable+0x88>)
    91aa:	885b      	ldrh	r3, [r3, #2]
    91ac:	051b      	lsls	r3, r3, #20
    91ae:	0f1b      	lsrs	r3, r3, #28
    91b0:	b2db      	uxtb	r3, r3
    91b2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    91b4:	4a18      	ldr	r2, [pc, #96]	; (9218 <system_gclk_chan_disable+0x88>)
    91b6:	8853      	ldrh	r3, [r2, #2]
    91b8:	4918      	ldr	r1, [pc, #96]	; (921c <system_gclk_chan_disable+0x8c>)
    91ba:	400b      	ands	r3, r1
    91bc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    91be:	4a16      	ldr	r2, [pc, #88]	; (9218 <system_gclk_chan_disable+0x88>)
    91c0:	4b15      	ldr	r3, [pc, #84]	; (9218 <system_gclk_chan_disable+0x88>)
    91c2:	885b      	ldrh	r3, [r3, #2]
    91c4:	b29b      	uxth	r3, r3
    91c6:	4916      	ldr	r1, [pc, #88]	; (9220 <system_gclk_chan_disable+0x90>)
    91c8:	400b      	ands	r3, r1
    91ca:	b29b      	uxth	r3, r3
    91cc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    91ce:	46c0      	nop			; (mov r8, r8)
    91d0:	4b11      	ldr	r3, [pc, #68]	; (9218 <system_gclk_chan_disable+0x88>)
    91d2:	885b      	ldrh	r3, [r3, #2]
    91d4:	b29b      	uxth	r3, r3
    91d6:	001a      	movs	r2, r3
    91d8:	2380      	movs	r3, #128	; 0x80
    91da:	01db      	lsls	r3, r3, #7
    91dc:	4013      	ands	r3, r2
    91de:	d1f7      	bne.n	91d0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    91e0:	4a0d      	ldr	r2, [pc, #52]	; (9218 <system_gclk_chan_disable+0x88>)
    91e2:	68fb      	ldr	r3, [r7, #12]
    91e4:	b2db      	uxtb	r3, r3
    91e6:	1c19      	adds	r1, r3, #0
    91e8:	230f      	movs	r3, #15
    91ea:	400b      	ands	r3, r1
    91ec:	b2d9      	uxtb	r1, r3
    91ee:	8853      	ldrh	r3, [r2, #2]
    91f0:	1c08      	adds	r0, r1, #0
    91f2:	210f      	movs	r1, #15
    91f4:	4001      	ands	r1, r0
    91f6:	0208      	lsls	r0, r1, #8
    91f8:	4908      	ldr	r1, [pc, #32]	; (921c <system_gclk_chan_disable+0x8c>)
    91fa:	400b      	ands	r3, r1
    91fc:	1c19      	adds	r1, r3, #0
    91fe:	1c03      	adds	r3, r0, #0
    9200:	430b      	orrs	r3, r1
    9202:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    9204:	4b07      	ldr	r3, [pc, #28]	; (9224 <system_gclk_chan_disable+0x94>)
    9206:	4798      	blx	r3
}
    9208:	46c0      	nop			; (mov r8, r8)
    920a:	46bd      	mov	sp, r7
    920c:	b004      	add	sp, #16
    920e:	bd80      	pop	{r7, pc}
    9210:	00008e35 	.word	0x00008e35
    9214:	40000c02 	.word	0x40000c02
    9218:	40000c00 	.word	0x40000c00
    921c:	fffff0ff 	.word	0xfffff0ff
    9220:	ffffbfff 	.word	0xffffbfff
    9224:	00008e49 	.word	0x00008e49

00009228 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    9228:	b580      	push	{r7, lr}
    922a:	b084      	sub	sp, #16
    922c:	af00      	add	r7, sp, #0
    922e:	0002      	movs	r2, r0
    9230:	1dfb      	adds	r3, r7, #7
    9232:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    9234:	4b0d      	ldr	r3, [pc, #52]	; (926c <system_gclk_chan_get_hz+0x44>)
    9236:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9238:	4a0d      	ldr	r2, [pc, #52]	; (9270 <system_gclk_chan_get_hz+0x48>)
    923a:	1dfb      	adds	r3, r7, #7
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    9240:	4b0c      	ldr	r3, [pc, #48]	; (9274 <system_gclk_chan_get_hz+0x4c>)
    9242:	885b      	ldrh	r3, [r3, #2]
    9244:	051b      	lsls	r3, r3, #20
    9246:	0f1b      	lsrs	r3, r3, #28
    9248:	b2da      	uxtb	r2, r3
    924a:	230f      	movs	r3, #15
    924c:	18fb      	adds	r3, r7, r3
    924e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    9250:	4b09      	ldr	r3, [pc, #36]	; (9278 <system_gclk_chan_get_hz+0x50>)
    9252:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    9254:	230f      	movs	r3, #15
    9256:	18fb      	adds	r3, r7, r3
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	0018      	movs	r0, r3
    925c:	4b07      	ldr	r3, [pc, #28]	; (927c <system_gclk_chan_get_hz+0x54>)
    925e:	4798      	blx	r3
    9260:	0003      	movs	r3, r0
}
    9262:	0018      	movs	r0, r3
    9264:	46bd      	mov	sp, r7
    9266:	b004      	add	sp, #16
    9268:	bd80      	pop	{r7, pc}
    926a:	46c0      	nop			; (mov r8, r8)
    926c:	00008e35 	.word	0x00008e35
    9270:	40000c02 	.word	0x40000c02
    9274:	40000c00 	.word	0x40000c00
    9278:	00008e49 	.word	0x00008e49
    927c:	0000902d 	.word	0x0000902d

00009280 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9280:	b580      	push	{r7, lr}
    9282:	b084      	sub	sp, #16
    9284:	af00      	add	r7, sp, #0
    9286:	0002      	movs	r2, r0
    9288:	1dfb      	adds	r3, r7, #7
    928a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    928c:	230f      	movs	r3, #15
    928e:	18fb      	adds	r3, r7, r3
    9290:	1dfa      	adds	r2, r7, #7
    9292:	7812      	ldrb	r2, [r2, #0]
    9294:	09d2      	lsrs	r2, r2, #7
    9296:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9298:	230e      	movs	r3, #14
    929a:	18fb      	adds	r3, r7, r3
    929c:	1dfa      	adds	r2, r7, #7
    929e:	7812      	ldrb	r2, [r2, #0]
    92a0:	0952      	lsrs	r2, r2, #5
    92a2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    92a4:	4b0d      	ldr	r3, [pc, #52]	; (92dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    92a6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    92a8:	230f      	movs	r3, #15
    92aa:	18fb      	adds	r3, r7, r3
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d10f      	bne.n	92d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    92b2:	230f      	movs	r3, #15
    92b4:	18fb      	adds	r3, r7, r3
    92b6:	781b      	ldrb	r3, [r3, #0]
    92b8:	009b      	lsls	r3, r3, #2
    92ba:	2210      	movs	r2, #16
    92bc:	4694      	mov	ip, r2
    92be:	44bc      	add	ip, r7
    92c0:	4463      	add	r3, ip
    92c2:	3b08      	subs	r3, #8
    92c4:	681a      	ldr	r2, [r3, #0]
    92c6:	230e      	movs	r3, #14
    92c8:	18fb      	adds	r3, r7, r3
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	01db      	lsls	r3, r3, #7
    92ce:	18d3      	adds	r3, r2, r3
    92d0:	e000      	b.n	92d4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    92d2:	2300      	movs	r3, #0
	}
}
    92d4:	0018      	movs	r0, r3
    92d6:	46bd      	mov	sp, r7
    92d8:	b004      	add	sp, #16
    92da:	bd80      	pop	{r7, pc}
    92dc:	41004400 	.word	0x41004400

000092e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    92e0:	b580      	push	{r7, lr}
    92e2:	b088      	sub	sp, #32
    92e4:	af00      	add	r7, sp, #0
    92e6:	60f8      	str	r0, [r7, #12]
    92e8:	60b9      	str	r1, [r7, #8]
    92ea:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    92ec:	2300      	movs	r3, #0
    92ee:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    92f0:	687b      	ldr	r3, [r7, #4]
    92f2:	78db      	ldrb	r3, [r3, #3]
    92f4:	2201      	movs	r2, #1
    92f6:	4053      	eors	r3, r2
    92f8:	b2db      	uxtb	r3, r3
    92fa:	2b00      	cmp	r3, #0
    92fc:	d035      	beq.n	936a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    92fe:	687b      	ldr	r3, [r7, #4]
    9300:	781b      	ldrb	r3, [r3, #0]
    9302:	2b80      	cmp	r3, #128	; 0x80
    9304:	d00b      	beq.n	931e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    9306:	69fb      	ldr	r3, [r7, #28]
    9308:	2280      	movs	r2, #128	; 0x80
    930a:	0252      	lsls	r2, r2, #9
    930c:	4313      	orrs	r3, r2
    930e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	061b      	lsls	r3, r3, #24
    9316:	001a      	movs	r2, r3
    9318:	69fb      	ldr	r3, [r7, #28]
    931a:	4313      	orrs	r3, r2
    931c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	785b      	ldrb	r3, [r3, #1]
    9322:	2b00      	cmp	r3, #0
    9324:	d003      	beq.n	932e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    932a:	2b02      	cmp	r3, #2
    932c:	d110      	bne.n	9350 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    932e:	69fb      	ldr	r3, [r7, #28]
    9330:	2280      	movs	r2, #128	; 0x80
    9332:	0292      	lsls	r2, r2, #10
    9334:	4313      	orrs	r3, r2
    9336:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	789b      	ldrb	r3, [r3, #2]
    933c:	2b00      	cmp	r3, #0
    933e:	d004      	beq.n	934a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9340:	69fb      	ldr	r3, [r7, #28]
    9342:	2280      	movs	r2, #128	; 0x80
    9344:	02d2      	lsls	r2, r2, #11
    9346:	4313      	orrs	r3, r2
    9348:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    934a:	68fb      	ldr	r3, [r7, #12]
    934c:	68ba      	ldr	r2, [r7, #8]
    934e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	785b      	ldrb	r3, [r3, #1]
    9354:	2b01      	cmp	r3, #1
    9356:	d003      	beq.n	9360 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9358:	687b      	ldr	r3, [r7, #4]
    935a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    935c:	2b02      	cmp	r3, #2
    935e:	d107      	bne.n	9370 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9360:	69fb      	ldr	r3, [r7, #28]
    9362:	4a22      	ldr	r2, [pc, #136]	; (93ec <_system_pinmux_config+0x10c>)
    9364:	4013      	ands	r3, r2
    9366:	61fb      	str	r3, [r7, #28]
    9368:	e002      	b.n	9370 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    936a:	68fb      	ldr	r3, [r7, #12]
    936c:	68ba      	ldr	r2, [r7, #8]
    936e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9370:	68bb      	ldr	r3, [r7, #8]
    9372:	041b      	lsls	r3, r3, #16
    9374:	0c1b      	lsrs	r3, r3, #16
    9376:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9378:	68bb      	ldr	r3, [r7, #8]
    937a:	0c1b      	lsrs	r3, r3, #16
    937c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    937e:	69ba      	ldr	r2, [r7, #24]
    9380:	69fb      	ldr	r3, [r7, #28]
    9382:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9384:	22a0      	movs	r2, #160	; 0xa0
    9386:	05d2      	lsls	r2, r2, #23
    9388:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    938a:	68fb      	ldr	r3, [r7, #12]
    938c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    938e:	697a      	ldr	r2, [r7, #20]
    9390:	69fb      	ldr	r3, [r7, #28]
    9392:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9394:	22d0      	movs	r2, #208	; 0xd0
    9396:	0612      	lsls	r2, r2, #24
    9398:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    939a:	68fb      	ldr	r3, [r7, #12]
    939c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	78db      	ldrb	r3, [r3, #3]
    93a2:	2201      	movs	r2, #1
    93a4:	4053      	eors	r3, r2
    93a6:	b2db      	uxtb	r3, r3
    93a8:	2b00      	cmp	r3, #0
    93aa:	d01a      	beq.n	93e2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    93ac:	69fa      	ldr	r2, [r7, #28]
    93ae:	2380      	movs	r3, #128	; 0x80
    93b0:	02db      	lsls	r3, r3, #11
    93b2:	4013      	ands	r3, r2
    93b4:	d00a      	beq.n	93cc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    93b6:	687b      	ldr	r3, [r7, #4]
    93b8:	789b      	ldrb	r3, [r3, #2]
    93ba:	2b01      	cmp	r3, #1
    93bc:	d103      	bne.n	93c6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    93be:	68fb      	ldr	r3, [r7, #12]
    93c0:	68ba      	ldr	r2, [r7, #8]
    93c2:	619a      	str	r2, [r3, #24]
    93c4:	e002      	b.n	93cc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    93c6:	68fb      	ldr	r3, [r7, #12]
    93c8:	68ba      	ldr	r2, [r7, #8]
    93ca:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    93cc:	687b      	ldr	r3, [r7, #4]
    93ce:	785b      	ldrb	r3, [r3, #1]
    93d0:	2b01      	cmp	r3, #1
    93d2:	d003      	beq.n	93dc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    93d4:	687b      	ldr	r3, [r7, #4]
    93d6:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    93d8:	2b02      	cmp	r3, #2
    93da:	d102      	bne.n	93e2 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    93dc:	68fb      	ldr	r3, [r7, #12]
    93de:	68ba      	ldr	r2, [r7, #8]
    93e0:	609a      	str	r2, [r3, #8]
		}
	}
}
    93e2:	46c0      	nop			; (mov r8, r8)
    93e4:	46bd      	mov	sp, r7
    93e6:	b008      	add	sp, #32
    93e8:	bd80      	pop	{r7, pc}
    93ea:	46c0      	nop			; (mov r8, r8)
    93ec:	fffbffff 	.word	0xfffbffff

000093f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    93f0:	b580      	push	{r7, lr}
    93f2:	b084      	sub	sp, #16
    93f4:	af00      	add	r7, sp, #0
    93f6:	0002      	movs	r2, r0
    93f8:	6039      	str	r1, [r7, #0]
    93fa:	1dfb      	adds	r3, r7, #7
    93fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    93fe:	1dfb      	adds	r3, r7, #7
    9400:	781b      	ldrb	r3, [r3, #0]
    9402:	0018      	movs	r0, r3
    9404:	4b0a      	ldr	r3, [pc, #40]	; (9430 <system_pinmux_pin_set_config+0x40>)
    9406:	4798      	blx	r3
    9408:	0003      	movs	r3, r0
    940a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    940c:	1dfb      	adds	r3, r7, #7
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	221f      	movs	r2, #31
    9412:	4013      	ands	r3, r2
    9414:	2201      	movs	r2, #1
    9416:	409a      	lsls	r2, r3
    9418:	0013      	movs	r3, r2
    941a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    941c:	683a      	ldr	r2, [r7, #0]
    941e:	68b9      	ldr	r1, [r7, #8]
    9420:	68fb      	ldr	r3, [r7, #12]
    9422:	0018      	movs	r0, r3
    9424:	4b03      	ldr	r3, [pc, #12]	; (9434 <system_pinmux_pin_set_config+0x44>)
    9426:	4798      	blx	r3
}
    9428:	46c0      	nop			; (mov r8, r8)
    942a:	46bd      	mov	sp, r7
    942c:	b004      	add	sp, #16
    942e:	bd80      	pop	{r7, pc}
    9430:	00009281 	.word	0x00009281
    9434:	000092e1 	.word	0x000092e1

00009438 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    9438:	b580      	push	{r7, lr}
    943a:	af00      	add	r7, sp, #0
	return;
    943c:	46c0      	nop			; (mov r8, r8)
}
    943e:	46bd      	mov	sp, r7
    9440:	bd80      	pop	{r7, pc}
    9442:	46c0      	nop			; (mov r8, r8)

00009444 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    9444:	b580      	push	{r7, lr}
    9446:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9448:	4b06      	ldr	r3, [pc, #24]	; (9464 <system_init+0x20>)
    944a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    944c:	4b06      	ldr	r3, [pc, #24]	; (9468 <system_init+0x24>)
    944e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9450:	4b06      	ldr	r3, [pc, #24]	; (946c <system_init+0x28>)
    9452:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    9454:	4b06      	ldr	r3, [pc, #24]	; (9470 <system_init+0x2c>)
    9456:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9458:	4b06      	ldr	r3, [pc, #24]	; (9474 <system_init+0x30>)
    945a:	4798      	blx	r3
}
    945c:	46c0      	nop			; (mov r8, r8)
    945e:	46bd      	mov	sp, r7
    9460:	bd80      	pop	{r7, pc}
    9462:	46c0      	nop			; (mov r8, r8)
    9464:	00008b5d 	.word	0x00008b5d
    9468:	00006065 	.word	0x00006065
    946c:	00009439 	.word	0x00009439
    9470:	0000643d 	.word	0x0000643d
    9474:	00009439 	.word	0x00009439

00009478 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9478:	b580      	push	{r7, lr}
    947a:	b082      	sub	sp, #8
    947c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    947e:	4b2f      	ldr	r3, [pc, #188]	; (953c <Reset_Handler+0xc4>)
    9480:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    9482:	4b2f      	ldr	r3, [pc, #188]	; (9540 <Reset_Handler+0xc8>)
    9484:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9486:	687a      	ldr	r2, [r7, #4]
    9488:	683b      	ldr	r3, [r7, #0]
    948a:	429a      	cmp	r2, r3
    948c:	d00c      	beq.n	94a8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    948e:	e007      	b.n	94a0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9490:	683b      	ldr	r3, [r7, #0]
    9492:	1d1a      	adds	r2, r3, #4
    9494:	603a      	str	r2, [r7, #0]
    9496:	687a      	ldr	r2, [r7, #4]
    9498:	1d11      	adds	r1, r2, #4
    949a:	6079      	str	r1, [r7, #4]
    949c:	6812      	ldr	r2, [r2, #0]
    949e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    94a0:	683a      	ldr	r2, [r7, #0]
    94a2:	4b28      	ldr	r3, [pc, #160]	; (9544 <Reset_Handler+0xcc>)
    94a4:	429a      	cmp	r2, r3
    94a6:	d3f3      	bcc.n	9490 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    94a8:	4b27      	ldr	r3, [pc, #156]	; (9548 <Reset_Handler+0xd0>)
    94aa:	603b      	str	r3, [r7, #0]
    94ac:	e004      	b.n	94b8 <Reset_Handler+0x40>
                *pDest++ = 0;
    94ae:	683b      	ldr	r3, [r7, #0]
    94b0:	1d1a      	adds	r2, r3, #4
    94b2:	603a      	str	r2, [r7, #0]
    94b4:	2200      	movs	r2, #0
    94b6:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    94b8:	683a      	ldr	r2, [r7, #0]
    94ba:	4b24      	ldr	r3, [pc, #144]	; (954c <Reset_Handler+0xd4>)
    94bc:	429a      	cmp	r2, r3
    94be:	d3f6      	bcc.n	94ae <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    94c0:	4b23      	ldr	r3, [pc, #140]	; (9550 <Reset_Handler+0xd8>)
    94c2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    94c4:	4b23      	ldr	r3, [pc, #140]	; (9554 <Reset_Handler+0xdc>)
    94c6:	687a      	ldr	r2, [r7, #4]
    94c8:	21ff      	movs	r1, #255	; 0xff
    94ca:	438a      	bics	r2, r1
    94cc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    94ce:	4a22      	ldr	r2, [pc, #136]	; (9558 <Reset_Handler+0xe0>)
    94d0:	2390      	movs	r3, #144	; 0x90
    94d2:	005b      	lsls	r3, r3, #1
    94d4:	2102      	movs	r1, #2
    94d6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    94d8:	4a20      	ldr	r2, [pc, #128]	; (955c <Reset_Handler+0xe4>)
    94da:	78d3      	ldrb	r3, [r2, #3]
    94dc:	2103      	movs	r1, #3
    94de:	438b      	bics	r3, r1
    94e0:	1c19      	adds	r1, r3, #0
    94e2:	2302      	movs	r3, #2
    94e4:	430b      	orrs	r3, r1
    94e6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    94e8:	4a1c      	ldr	r2, [pc, #112]	; (955c <Reset_Handler+0xe4>)
    94ea:	78d3      	ldrb	r3, [r2, #3]
    94ec:	210c      	movs	r1, #12
    94ee:	438b      	bics	r3, r1
    94f0:	1c19      	adds	r1, r3, #0
    94f2:	2308      	movs	r3, #8
    94f4:	430b      	orrs	r3, r1
    94f6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    94f8:	4a19      	ldr	r2, [pc, #100]	; (9560 <Reset_Handler+0xe8>)
    94fa:	7b93      	ldrb	r3, [r2, #14]
    94fc:	2130      	movs	r1, #48	; 0x30
    94fe:	438b      	bics	r3, r1
    9500:	1c19      	adds	r1, r3, #0
    9502:	2320      	movs	r3, #32
    9504:	430b      	orrs	r3, r1
    9506:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9508:	4a15      	ldr	r2, [pc, #84]	; (9560 <Reset_Handler+0xe8>)
    950a:	7b93      	ldrb	r3, [r2, #14]
    950c:	210c      	movs	r1, #12
    950e:	438b      	bics	r3, r1
    9510:	1c19      	adds	r1, r3, #0
    9512:	2308      	movs	r3, #8
    9514:	430b      	orrs	r3, r1
    9516:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9518:	4a11      	ldr	r2, [pc, #68]	; (9560 <Reset_Handler+0xe8>)
    951a:	7b93      	ldrb	r3, [r2, #14]
    951c:	2103      	movs	r1, #3
    951e:	438b      	bics	r3, r1
    9520:	1c19      	adds	r1, r3, #0
    9522:	2302      	movs	r3, #2
    9524:	430b      	orrs	r3, r1
    9526:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    9528:	4a0e      	ldr	r2, [pc, #56]	; (9564 <Reset_Handler+0xec>)
    952a:	6853      	ldr	r3, [r2, #4]
    952c:	2180      	movs	r1, #128	; 0x80
    952e:	430b      	orrs	r3, r1
    9530:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    9532:	4b0d      	ldr	r3, [pc, #52]	; (9568 <Reset_Handler+0xf0>)
    9534:	4798      	blx	r3

        /* Branch to main function */
        main();
    9536:	4b0d      	ldr	r3, [pc, #52]	; (956c <Reset_Handler+0xf4>)
    9538:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    953a:	e7fe      	b.n	953a <Reset_Handler+0xc2>
    953c:	0000dbb0 	.word	0x0000dbb0
    9540:	20000000 	.word	0x20000000
    9544:	20000080 	.word	0x20000080
    9548:	20000080 	.word	0x20000080
    954c:	200003d8 	.word	0x200003d8
    9550:	00000000 	.word	0x00000000
    9554:	e000ed00 	.word	0xe000ed00
    9558:	41007000 	.word	0x41007000
    955c:	41005000 	.word	0x41005000
    9560:	41004800 	.word	0x41004800
    9564:	41004000 	.word	0x41004000
    9568:	0000b011 	.word	0x0000b011
    956c:	0000ad1d 	.word	0x0000ad1d

00009570 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9570:	b580      	push	{r7, lr}
    9572:	af00      	add	r7, sp, #0
        while (1) {
        }
    9574:	e7fe      	b.n	9574 <Dummy_Handler+0x4>
    9576:	46c0      	nop			; (mov r8, r8)

00009578 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    9578:	b580      	push	{r7, lr}
    957a:	b086      	sub	sp, #24
    957c:	af00      	add	r7, sp, #0
    957e:	60f8      	str	r0, [r7, #12]
    9580:	60b9      	str	r1, [r7, #8]
    9582:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9584:	2300      	movs	r3, #0
    9586:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    9588:	68fb      	ldr	r3, [r7, #12]
    958a:	2b00      	cmp	r3, #0
    958c:	d012      	beq.n	95b4 <_read+0x3c>
		return -1;
    958e:	2301      	movs	r3, #1
    9590:	425b      	negs	r3, r3
    9592:	e013      	b.n	95bc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    9594:	4b0b      	ldr	r3, [pc, #44]	; (95c4 <_read+0x4c>)
    9596:	681a      	ldr	r2, [r3, #0]
    9598:	4b0b      	ldr	r3, [pc, #44]	; (95c8 <_read+0x50>)
    959a:	681b      	ldr	r3, [r3, #0]
    959c:	68b9      	ldr	r1, [r7, #8]
    959e:	0018      	movs	r0, r3
    95a0:	4790      	blx	r2
		ptr++;
    95a2:	68bb      	ldr	r3, [r7, #8]
    95a4:	3301      	adds	r3, #1
    95a6:	60bb      	str	r3, [r7, #8]
		nChars++;
    95a8:	697b      	ldr	r3, [r7, #20]
    95aa:	3301      	adds	r3, #1
    95ac:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	3b01      	subs	r3, #1
    95b2:	607b      	str	r3, [r7, #4]
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	2b00      	cmp	r3, #0
    95b8:	dcec      	bgt.n	9594 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    95ba:	697b      	ldr	r3, [r7, #20]
}
    95bc:	0018      	movs	r0, r3
    95be:	46bd      	mov	sp, r7
    95c0:	b006      	add	sp, #24
    95c2:	bd80      	pop	{r7, pc}
    95c4:	20000360 	.word	0x20000360
    95c8:	20000368 	.word	0x20000368

000095cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    95cc:	b580      	push	{r7, lr}
    95ce:	b086      	sub	sp, #24
    95d0:	af00      	add	r7, sp, #0
    95d2:	60f8      	str	r0, [r7, #12]
    95d4:	60b9      	str	r1, [r7, #8]
    95d6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    95d8:	2300      	movs	r3, #0
    95da:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    95dc:	68fb      	ldr	r3, [r7, #12]
    95de:	2b01      	cmp	r3, #1
    95e0:	d01d      	beq.n	961e <_write+0x52>
    95e2:	68fb      	ldr	r3, [r7, #12]
    95e4:	2b02      	cmp	r3, #2
    95e6:	d01a      	beq.n	961e <_write+0x52>
    95e8:	68fb      	ldr	r3, [r7, #12]
    95ea:	2b03      	cmp	r3, #3
    95ec:	d017      	beq.n	961e <_write+0x52>
		return -1;
    95ee:	2301      	movs	r3, #1
    95f0:	425b      	negs	r3, r3
    95f2:	e018      	b.n	9626 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    95f4:	4b0e      	ldr	r3, [pc, #56]	; (9630 <_write+0x64>)
    95f6:	681a      	ldr	r2, [r3, #0]
    95f8:	4b0e      	ldr	r3, [pc, #56]	; (9634 <_write+0x68>)
    95fa:	6818      	ldr	r0, [r3, #0]
    95fc:	68bb      	ldr	r3, [r7, #8]
    95fe:	1c59      	adds	r1, r3, #1
    9600:	60b9      	str	r1, [r7, #8]
    9602:	781b      	ldrb	r3, [r3, #0]
    9604:	0019      	movs	r1, r3
    9606:	4790      	blx	r2
    9608:	1e03      	subs	r3, r0, #0
    960a:	da02      	bge.n	9612 <_write+0x46>
			return -1;
    960c:	2301      	movs	r3, #1
    960e:	425b      	negs	r3, r3
    9610:	e009      	b.n	9626 <_write+0x5a>
		}
		++nChars;
    9612:	697b      	ldr	r3, [r7, #20]
    9614:	3301      	adds	r3, #1
    9616:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    9618:	687b      	ldr	r3, [r7, #4]
    961a:	3b01      	subs	r3, #1
    961c:	607b      	str	r3, [r7, #4]
    961e:	687b      	ldr	r3, [r7, #4]
    9620:	2b00      	cmp	r3, #0
    9622:	d1e7      	bne.n	95f4 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    9624:	697b      	ldr	r3, [r7, #20]
}
    9626:	0018      	movs	r0, r3
    9628:	46bd      	mov	sp, r7
    962a:	b006      	add	sp, #24
    962c:	bd80      	pop	{r7, pc}
    962e:	46c0      	nop			; (mov r8, r8)
    9630:	20000364 	.word	0x20000364
    9634:	20000368 	.word	0x20000368

00009638 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    9638:	b580      	push	{r7, lr}
    963a:	b084      	sub	sp, #16
    963c:	af00      	add	r7, sp, #0
    963e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    9640:	4b0a      	ldr	r3, [pc, #40]	; (966c <_sbrk+0x34>)
    9642:	681b      	ldr	r3, [r3, #0]
    9644:	2b00      	cmp	r3, #0
    9646:	d102      	bne.n	964e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    9648:	4b08      	ldr	r3, [pc, #32]	; (966c <_sbrk+0x34>)
    964a:	4a09      	ldr	r2, [pc, #36]	; (9670 <_sbrk+0x38>)
    964c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    964e:	4b07      	ldr	r3, [pc, #28]	; (966c <_sbrk+0x34>)
    9650:	681b      	ldr	r3, [r3, #0]
    9652:	60fb      	str	r3, [r7, #12]

	heap += incr;
    9654:	4b05      	ldr	r3, [pc, #20]	; (966c <_sbrk+0x34>)
    9656:	681a      	ldr	r2, [r3, #0]
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	18d2      	adds	r2, r2, r3
    965c:	4b03      	ldr	r3, [pc, #12]	; (966c <_sbrk+0x34>)
    965e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    9660:	68fb      	ldr	r3, [r7, #12]
}
    9662:	0018      	movs	r0, r3
    9664:	46bd      	mov	sp, r7
    9666:	b004      	add	sp, #16
    9668:	bd80      	pop	{r7, pc}
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	2000010c 	.word	0x2000010c
    9670:	200023d8 	.word	0x200023d8

00009674 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    9674:	b580      	push	{r7, lr}
    9676:	b082      	sub	sp, #8
    9678:	af00      	add	r7, sp, #0
    967a:	6078      	str	r0, [r7, #4]
	return -1;
    967c:	2301      	movs	r3, #1
    967e:	425b      	negs	r3, r3
}
    9680:	0018      	movs	r0, r3
    9682:	46bd      	mov	sp, r7
    9684:	b002      	add	sp, #8
    9686:	bd80      	pop	{r7, pc}

00009688 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    9688:	b580      	push	{r7, lr}
    968a:	b082      	sub	sp, #8
    968c:	af00      	add	r7, sp, #0
    968e:	6078      	str	r0, [r7, #4]
    9690:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    9692:	683b      	ldr	r3, [r7, #0]
    9694:	2280      	movs	r2, #128	; 0x80
    9696:	0192      	lsls	r2, r2, #6
    9698:	605a      	str	r2, [r3, #4]

	return 0;
    969a:	2300      	movs	r3, #0
}
    969c:	0018      	movs	r0, r3
    969e:	46bd      	mov	sp, r7
    96a0:	b002      	add	sp, #8
    96a2:	bd80      	pop	{r7, pc}

000096a4 <_isatty>:

extern int _isatty(int file)
{
    96a4:	b580      	push	{r7, lr}
    96a6:	b082      	sub	sp, #8
    96a8:	af00      	add	r7, sp, #0
    96aa:	6078      	str	r0, [r7, #4]
	return 1;
    96ac:	2301      	movs	r3, #1
}
    96ae:	0018      	movs	r0, r3
    96b0:	46bd      	mov	sp, r7
    96b2:	b002      	add	sp, #8
    96b4:	bd80      	pop	{r7, pc}
    96b6:	46c0      	nop			; (mov r8, r8)

000096b8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    96b8:	b580      	push	{r7, lr}
    96ba:	b084      	sub	sp, #16
    96bc:	af00      	add	r7, sp, #0
    96be:	60f8      	str	r0, [r7, #12]
    96c0:	60b9      	str	r1, [r7, #8]
    96c2:	607a      	str	r2, [r7, #4]
	return 0;
    96c4:	2300      	movs	r3, #0
}
    96c6:	0018      	movs	r0, r3
    96c8:	46bd      	mov	sp, r7
    96ca:	b004      	add	sp, #16
    96cc:	bd80      	pop	{r7, pc}
    96ce:	46c0      	nop			; (mov r8, r8)

000096d0 <Encode>:
Version: 1.0

Date:
*********************************************************************/
uint16 Encode(uint8 *pcStr,uint8 *pcEncoded)
{
    96d0:	b580      	push	{r7, lr}
    96d2:	b086      	sub	sp, #24
    96d4:	af00      	add	r7, sp, #0
    96d6:	6078      	str	r0, [r7, #4]
    96d8:	6039      	str	r1, [r7, #0]
	uint8		*pcTmp = pcStr;
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	617b      	str	r3, [r7, #20]
	uint8		*pcbuf = pcEncoded;
    96de:	683b      	ldr	r3, [r7, #0]
    96e0:	613b      	str	r3, [r7, #16]
	uint16		u16Count = 0;
    96e2:	230e      	movs	r3, #14
    96e4:	18fb      	adds	r3, r7, r3
    96e6:	2200      	movs	r2, #0
    96e8:	801a      	strh	r2, [r3, #0]

	while(*pcTmp)
    96ea:	e05c      	b.n	97a6 <Encode+0xd6>
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
    96ec:	697b      	ldr	r3, [r7, #20]
    96ee:	781b      	ldrb	r3, [r3, #0]
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
	{
		if (
    96f0:	2b2f      	cmp	r3, #47	; 0x2f
    96f2:	d903      	bls.n	96fc <Encode+0x2c>
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
    96f4:	697b      	ldr	r3, [r7, #20]
    96f6:	781b      	ldrb	r3, [r3, #0]
    96f8:	2b39      	cmp	r3, #57	; 0x39
    96fa:	d91f      	bls.n	973c <Encode+0x6c>
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    96fc:	697b      	ldr	r3, [r7, #20]
    96fe:	781b      	ldrb	r3, [r3, #0]
	uint16		u16Count = 0;

	while(*pcTmp)
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
    9700:	2b60      	cmp	r3, #96	; 0x60
    9702:	d903      	bls.n	970c <Encode+0x3c>
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    9704:	697b      	ldr	r3, [r7, #20]
    9706:	781b      	ldrb	r3, [r3, #0]
    9708:	2b7a      	cmp	r3, #122	; 0x7a
    970a:	d917      	bls.n	973c <Encode+0x6c>
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
    970c:	697b      	ldr	r3, [r7, #20]
    970e:	781b      	ldrb	r3, [r3, #0]

	while(*pcTmp)
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    9710:	2b40      	cmp	r3, #64	; 0x40
    9712:	d903      	bls.n	971c <Encode+0x4c>
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
    9714:	697b      	ldr	r3, [r7, #20]
    9716:	781b      	ldrb	r3, [r3, #0]
    9718:	2b5a      	cmp	r3, #90	; 0x5a
    971a:	d90f      	bls.n	973c <Encode+0x6c>
			(*pcTmp == '-') ||
    971c:	697b      	ldr	r3, [r7, #20]
    971e:	781b      	ldrb	r3, [r3, #0]
	while(*pcTmp)
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
    9720:	2b2d      	cmp	r3, #45	; 0x2d
    9722:	d00b      	beq.n	973c <Encode+0x6c>
			(*pcTmp == '-') ||
			(*pcTmp == '_') ||
    9724:	697b      	ldr	r3, [r7, #20]
    9726:	781b      	ldrb	r3, [r3, #0]
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
			(*pcTmp == '-') ||
    9728:	2b5f      	cmp	r3, #95	; 0x5f
    972a:	d007      	beq.n	973c <Encode+0x6c>
			(*pcTmp == '_') ||
			(*pcTmp == '.') ||
    972c:	697b      	ldr	r3, [r7, #20]
    972e:	781b      	ldrb	r3, [r3, #0]
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
			(*pcTmp == '-') ||
			(*pcTmp == '_') ||
    9730:	2b2e      	cmp	r3, #46	; 0x2e
    9732:	d003      	beq.n	973c <Encode+0x6c>
			(*pcTmp == '.') ||
			(*pcTmp == '~')
    9734:	697b      	ldr	r3, [r7, #20]
    9736:	781b      	ldrb	r3, [r3, #0]
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
			(*pcTmp == '-') ||
			(*pcTmp == '_') ||
			(*pcTmp == '.') ||
    9738:	2b7e      	cmp	r3, #126	; 0x7e
    973a:	d106      	bne.n	974a <Encode+0x7a>
			(*pcTmp == '~')
			)
		{
			*pcbuf++ = *pcTmp;
    973c:	693b      	ldr	r3, [r7, #16]
    973e:	1c5a      	adds	r2, r3, #1
    9740:	613a      	str	r2, [r7, #16]
    9742:	697a      	ldr	r2, [r7, #20]
    9744:	7812      	ldrb	r2, [r2, #0]
    9746:	701a      	strb	r2, [r3, #0]
    9748:	e023      	b.n	9792 <Encode+0xc2>
		}
		else
		{
			*pcbuf++ = '%';
    974a:	693b      	ldr	r3, [r7, #16]
    974c:	1c5a      	adds	r2, r3, #1
    974e:	613a      	str	r2, [r7, #16]
    9750:	2225      	movs	r2, #37	; 0x25
    9752:	701a      	strb	r2, [r3, #0]
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
    9754:	693b      	ldr	r3, [r7, #16]
    9756:	1c5a      	adds	r2, r3, #1
    9758:	613a      	str	r2, [r7, #16]
    975a:	697a      	ldr	r2, [r7, #20]
    975c:	7812      	ldrb	r2, [r2, #0]
    975e:	0912      	lsrs	r2, r2, #4
    9760:	b2d2      	uxtb	r2, r2
    9762:	0011      	movs	r1, r2
    9764:	220f      	movs	r2, #15
    9766:	400a      	ands	r2, r1
    9768:	4914      	ldr	r1, [pc, #80]	; (97bc <Encode+0xec>)
    976a:	5c8a      	ldrb	r2, [r1, r2]
    976c:	701a      	strb	r2, [r3, #0]
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    976e:	693b      	ldr	r3, [r7, #16]
    9770:	1c5a      	adds	r2, r3, #1
    9772:	613a      	str	r2, [r7, #16]
    9774:	697a      	ldr	r2, [r7, #20]
    9776:	7812      	ldrb	r2, [r2, #0]
    9778:	0011      	movs	r1, r2
    977a:	220f      	movs	r2, #15
    977c:	400a      	ands	r2, r1
    977e:	490f      	ldr	r1, [pc, #60]	; (97bc <Encode+0xec>)
    9780:	5c8a      	ldrb	r2, [r1, r2]
    9782:	701a      	strb	r2, [r3, #0]
			u16Count += 2;
    9784:	230e      	movs	r3, #14
    9786:	18fb      	adds	r3, r7, r3
    9788:	220e      	movs	r2, #14
    978a:	18ba      	adds	r2, r7, r2
    978c:	8812      	ldrh	r2, [r2, #0]
    978e:	3202      	adds	r2, #2
    9790:	801a      	strh	r2, [r3, #0]
		}
		pcTmp++;
    9792:	697b      	ldr	r3, [r7, #20]
    9794:	3301      	adds	r3, #1
    9796:	617b      	str	r3, [r7, #20]
		u16Count ++;
    9798:	230e      	movs	r3, #14
    979a:	18fb      	adds	r3, r7, r3
    979c:	881a      	ldrh	r2, [r3, #0]
    979e:	230e      	movs	r3, #14
    97a0:	18fb      	adds	r3, r7, r3
    97a2:	3201      	adds	r2, #1
    97a4:	801a      	strh	r2, [r3, #0]
{
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
    97a6:	697b      	ldr	r3, [r7, #20]
    97a8:	781b      	ldrb	r3, [r3, #0]
    97aa:	2b00      	cmp	r3, #0
    97ac:	d19e      	bne.n	96ec <Encode+0x1c>
			u16Count += 2;
		}
		pcTmp++;
		u16Count ++;
	}
	return u16Count;
    97ae:	230e      	movs	r3, #14
    97b0:	18fb      	adds	r3, r7, r3
    97b2:	881b      	ldrh	r3, [r3, #0]
}
    97b4:	0018      	movs	r0, r3
    97b6:	46bd      	mov	sp, r7
    97b8:	b006      	add	sp, #24
    97ba:	bd80      	pop	{r7, pc}
    97bc:	0000d564 	.word	0x0000d564

000097c0 <FormatMsg>:
Version: 1.0

Date:
*********************************************************************/
uint16 FormatMsg(uint8 u8clientName, uint8 *pu8Msg)
{
    97c0:	b590      	push	{r4, r7, lr}
    97c2:	b087      	sub	sp, #28
    97c4:	af00      	add	r7, sp, #0
    97c6:	0002      	movs	r2, r0
    97c8:	6039      	str	r1, [r7, #0]
    97ca:	1dfb      	adds	r3, r7, #7
    97cc:	701a      	strb	r2, [r3, #0]
	uint16	u16Tmp;
	uint16	u16MsgOffset = 0;
    97ce:	2316      	movs	r3, #22
    97d0:	18fb      	adds	r3, r7, r3
    97d2:	2200      	movs	r2, #0
    97d4:	801a      	strh	r2, [r3, #0]
	tstrNotification* strNotification;

	if (u8clientName == NMA_CLIENT)
    97d6:	1dfb      	adds	r3, r7, #7
    97d8:	781b      	ldrb	r3, [r3, #0]
    97da:	2b02      	cmp	r3, #2
    97dc:	d12e      	bne.n	983c <FormatMsg+0x7c>
	{
		strNotification = (tstrNotification*)(&gstrNotificationNMA);
    97de:	4bc0      	ldr	r3, [pc, #768]	; (9ae0 <FormatMsg+0x320>)
    97e0:	613b      	str	r3, [r7, #16]
		/* Put the start of the HTTP Request message. */
		u16Tmp = sizeof("GET /publicapi/notify?apikey=") - 1;
    97e2:	230e      	movs	r3, #14
    97e4:	18fb      	adds	r3, r7, r3
    97e6:	221d      	movs	r2, #29
    97e8:	801a      	strh	r2, [r3, #0]
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/notify?apikey=",u16Tmp);
    97ea:	2316      	movs	r3, #22
    97ec:	18fb      	adds	r3, r7, r3
    97ee:	881b      	ldrh	r3, [r3, #0]
    97f0:	683a      	ldr	r2, [r7, #0]
    97f2:	18d0      	adds	r0, r2, r3
    97f4:	230e      	movs	r3, #14
    97f6:	18fb      	adds	r3, r7, r3
    97f8:	881a      	ldrh	r2, [r3, #0]
    97fa:	4bba      	ldr	r3, [pc, #744]	; (9ae4 <FormatMsg+0x324>)
    97fc:	0019      	movs	r1, r3
    97fe:	4bba      	ldr	r3, [pc, #744]	; (9ae8 <FormatMsg+0x328>)
    9800:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    9802:	2316      	movs	r3, #22
    9804:	18fb      	adds	r3, r7, r3
    9806:	2216      	movs	r2, #22
    9808:	18b9      	adds	r1, r7, r2
    980a:	220e      	movs	r2, #14
    980c:	18ba      	adds	r2, r7, r2
    980e:	8809      	ldrh	r1, [r1, #0]
    9810:	8812      	ldrh	r2, [r2, #0]
    9812:	188a      	adds	r2, r1, r2
    9814:	801a      	strh	r2, [r3, #0]

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
    9816:	2316      	movs	r3, #22
    9818:	18fb      	adds	r3, r7, r3
    981a:	881b      	ldrh	r3, [r3, #0]
    981c:	683a      	ldr	r2, [r7, #0]
    981e:	18d0      	adds	r0, r2, r3
    9820:	4bb2      	ldr	r3, [pc, #712]	; (9aec <FormatMsg+0x32c>)
    9822:	681b      	ldr	r3, [r3, #0]
    9824:	2230      	movs	r2, #48	; 0x30
    9826:	0019      	movs	r1, r3
    9828:	4baf      	ldr	r3, [pc, #700]	; (9ae8 <FormatMsg+0x328>)
    982a:	4798      	blx	r3
		u16MsgOffset+= NMA_API_KEY_SIZE;
    982c:	2316      	movs	r3, #22
    982e:	18fb      	adds	r3, r7, r3
    9830:	2216      	movs	r2, #22
    9832:	18ba      	adds	r2, r7, r2
    9834:	8812      	ldrh	r2, [r2, #0]
    9836:	3230      	adds	r2, #48	; 0x30
    9838:	801a      	strh	r2, [r3, #0]
    983a:	e034      	b.n	98a6 <FormatMsg+0xe6>
	}
	else if (u8clientName == PROWL_CLIENT)
    983c:	1dfb      	adds	r3, r7, #7
    983e:	781b      	ldrb	r3, [r3, #0]
    9840:	2b01      	cmp	r3, #1
    9842:	d12e      	bne.n	98a2 <FormatMsg+0xe2>
	{
		strNotification = (tstrNotification*)(&gstrNotificationProwl);
    9844:	4baa      	ldr	r3, [pc, #680]	; (9af0 <FormatMsg+0x330>)
    9846:	613b      	str	r3, [r7, #16]

		/* Put the start of the HTTP Request message. */
		u16Tmp = sizeof("GET /publicapi/add?apikey=") - 1;
    9848:	230e      	movs	r3, #14
    984a:	18fb      	adds	r3, r7, r3
    984c:	221a      	movs	r2, #26
    984e:	801a      	strh	r2, [r3, #0]
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/add?apikey=",u16Tmp);
    9850:	2316      	movs	r3, #22
    9852:	18fb      	adds	r3, r7, r3
    9854:	881b      	ldrh	r3, [r3, #0]
    9856:	683a      	ldr	r2, [r7, #0]
    9858:	18d0      	adds	r0, r2, r3
    985a:	230e      	movs	r3, #14
    985c:	18fb      	adds	r3, r7, r3
    985e:	881a      	ldrh	r2, [r3, #0]
    9860:	4ba4      	ldr	r3, [pc, #656]	; (9af4 <FormatMsg+0x334>)
    9862:	0019      	movs	r1, r3
    9864:	4ba0      	ldr	r3, [pc, #640]	; (9ae8 <FormatMsg+0x328>)
    9866:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    9868:	2316      	movs	r3, #22
    986a:	18fb      	adds	r3, r7, r3
    986c:	2216      	movs	r2, #22
    986e:	18b9      	adds	r1, r7, r2
    9870:	220e      	movs	r2, #14
    9872:	18ba      	adds	r2, r7, r2
    9874:	8809      	ldrh	r1, [r1, #0]
    9876:	8812      	ldrh	r2, [r2, #0]
    9878:	188a      	adds	r2, r1, r2
    987a:	801a      	strh	r2, [r3, #0]

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
    987c:	2316      	movs	r3, #22
    987e:	18fb      	adds	r3, r7, r3
    9880:	881b      	ldrh	r3, [r3, #0]
    9882:	683a      	ldr	r2, [r7, #0]
    9884:	18d0      	adds	r0, r2, r3
    9886:	4b9c      	ldr	r3, [pc, #624]	; (9af8 <FormatMsg+0x338>)
    9888:	681b      	ldr	r3, [r3, #0]
    988a:	2228      	movs	r2, #40	; 0x28
    988c:	0019      	movs	r1, r3
    988e:	4b96      	ldr	r3, [pc, #600]	; (9ae8 <FormatMsg+0x328>)
    9890:	4798      	blx	r3
		u16MsgOffset+= PROWL_API_KEY_SIZE;
    9892:	2316      	movs	r3, #22
    9894:	18fb      	adds	r3, r7, r3
    9896:	2216      	movs	r2, #22
    9898:	18ba      	adds	r2, r7, r2
    989a:	8812      	ldrh	r2, [r2, #0]
    989c:	3228      	adds	r2, #40	; 0x28
    989e:	801a      	strh	r2, [r3, #0]
    98a0:	e001      	b.n	98a6 <FormatMsg+0xe6>
	}
	else
		return 0;
    98a2:	2300      	movs	r3, #0
    98a4:	e117      	b.n	9ad6 <FormatMsg+0x316>

	/* Encode the Application name and append it to the message. */
	u16Tmp = sizeof("&application=") - 1;
    98a6:	230e      	movs	r3, #14
    98a8:	18fb      	adds	r3, r7, r3
    98aa:	220d      	movs	r2, #13
    98ac:	801a      	strh	r2, [r3, #0]
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&application=",u16Tmp);
    98ae:	2316      	movs	r3, #22
    98b0:	18fb      	adds	r3, r7, r3
    98b2:	881b      	ldrh	r3, [r3, #0]
    98b4:	683a      	ldr	r2, [r7, #0]
    98b6:	18d0      	adds	r0, r2, r3
    98b8:	230e      	movs	r3, #14
    98ba:	18fb      	adds	r3, r7, r3
    98bc:	881a      	ldrh	r2, [r3, #0]
    98be:	4b8f      	ldr	r3, [pc, #572]	; (9afc <FormatMsg+0x33c>)
    98c0:	0019      	movs	r1, r3
    98c2:	4b89      	ldr	r3, [pc, #548]	; (9ae8 <FormatMsg+0x328>)
    98c4:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    98c6:	2316      	movs	r3, #22
    98c8:	18fb      	adds	r3, r7, r3
    98ca:	2216      	movs	r2, #22
    98cc:	18b9      	adds	r1, r7, r2
    98ce:	220e      	movs	r2, #14
    98d0:	18ba      	adds	r2, r7, r2
    98d2:	8809      	ldrh	r1, [r1, #0]
    98d4:	8812      	ldrh	r2, [r2, #0]
    98d6:	188a      	adds	r2, r1, r2
    98d8:	801a      	strh	r2, [r3, #0]
	u16Tmp = Encode((uint8*)strNotification->pu8App,&pu8Msg[u16MsgOffset]);
    98da:	693b      	ldr	r3, [r7, #16]
    98dc:	6898      	ldr	r0, [r3, #8]
    98de:	2316      	movs	r3, #22
    98e0:	18fb      	adds	r3, r7, r3
    98e2:	881b      	ldrh	r3, [r3, #0]
    98e4:	683a      	ldr	r2, [r7, #0]
    98e6:	18d3      	adds	r3, r2, r3
    98e8:	220e      	movs	r2, #14
    98ea:	18bc      	adds	r4, r7, r2
    98ec:	0019      	movs	r1, r3
    98ee:	4b84      	ldr	r3, [pc, #528]	; (9b00 <FormatMsg+0x340>)
    98f0:	4798      	blx	r3
    98f2:	0003      	movs	r3, r0
    98f4:	8023      	strh	r3, [r4, #0]
	u16MsgOffset += u16Tmp;
    98f6:	2316      	movs	r3, #22
    98f8:	18fb      	adds	r3, r7, r3
    98fa:	2216      	movs	r2, #22
    98fc:	18b9      	adds	r1, r7, r2
    98fe:	220e      	movs	r2, #14
    9900:	18ba      	adds	r2, r7, r2
    9902:	8809      	ldrh	r1, [r1, #0]
    9904:	8812      	ldrh	r2, [r2, #0]
    9906:	188a      	adds	r2, r1, r2
    9908:	801a      	strh	r2, [r3, #0]

	/* Encode the Event name and append it to the message. */
	u16Tmp = sizeof("&event=") - 1;
    990a:	230e      	movs	r3, #14
    990c:	18fb      	adds	r3, r7, r3
    990e:	2207      	movs	r2, #7
    9910:	801a      	strh	r2, [r3, #0]
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&event=",u16Tmp);
    9912:	2316      	movs	r3, #22
    9914:	18fb      	adds	r3, r7, r3
    9916:	881b      	ldrh	r3, [r3, #0]
    9918:	683a      	ldr	r2, [r7, #0]
    991a:	18d0      	adds	r0, r2, r3
    991c:	230e      	movs	r3, #14
    991e:	18fb      	adds	r3, r7, r3
    9920:	881a      	ldrh	r2, [r3, #0]
    9922:	4b78      	ldr	r3, [pc, #480]	; (9b04 <FormatMsg+0x344>)
    9924:	0019      	movs	r1, r3
    9926:	4b70      	ldr	r3, [pc, #448]	; (9ae8 <FormatMsg+0x328>)
    9928:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    992a:	2316      	movs	r3, #22
    992c:	18fb      	adds	r3, r7, r3
    992e:	2216      	movs	r2, #22
    9930:	18b9      	adds	r1, r7, r2
    9932:	220e      	movs	r2, #14
    9934:	18ba      	adds	r2, r7, r2
    9936:	8809      	ldrh	r1, [r1, #0]
    9938:	8812      	ldrh	r2, [r2, #0]
    993a:	188a      	adds	r2, r1, r2
    993c:	801a      	strh	r2, [r3, #0]
	u16Tmp = Encode((uint8*)strNotification->pu8Event,&pu8Msg[u16MsgOffset]);
    993e:	693b      	ldr	r3, [r7, #16]
    9940:	68d8      	ldr	r0, [r3, #12]
    9942:	2316      	movs	r3, #22
    9944:	18fb      	adds	r3, r7, r3
    9946:	881b      	ldrh	r3, [r3, #0]
    9948:	683a      	ldr	r2, [r7, #0]
    994a:	18d3      	adds	r3, r2, r3
    994c:	220e      	movs	r2, #14
    994e:	18bc      	adds	r4, r7, r2
    9950:	0019      	movs	r1, r3
    9952:	4b6b      	ldr	r3, [pc, #428]	; (9b00 <FormatMsg+0x340>)
    9954:	4798      	blx	r3
    9956:	0003      	movs	r3, r0
    9958:	8023      	strh	r3, [r4, #0]
	u16MsgOffset += u16Tmp;
    995a:	2316      	movs	r3, #22
    995c:	18fb      	adds	r3, r7, r3
    995e:	2216      	movs	r2, #22
    9960:	18b9      	adds	r1, r7, r2
    9962:	220e      	movs	r2, #14
    9964:	18ba      	adds	r2, r7, r2
    9966:	8809      	ldrh	r1, [r1, #0]
    9968:	8812      	ldrh	r2, [r2, #0]
    996a:	188a      	adds	r2, r1, r2
    996c:	801a      	strh	r2, [r3, #0]

	/* Encode the Description message and append it to the message. */
	u16Tmp = sizeof("&description=") - 1;
    996e:	230e      	movs	r3, #14
    9970:	18fb      	adds	r3, r7, r3
    9972:	220d      	movs	r2, #13
    9974:	801a      	strh	r2, [r3, #0]
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&description=",u16Tmp);
    9976:	2316      	movs	r3, #22
    9978:	18fb      	adds	r3, r7, r3
    997a:	881b      	ldrh	r3, [r3, #0]
    997c:	683a      	ldr	r2, [r7, #0]
    997e:	18d0      	adds	r0, r2, r3
    9980:	230e      	movs	r3, #14
    9982:	18fb      	adds	r3, r7, r3
    9984:	881a      	ldrh	r2, [r3, #0]
    9986:	4b60      	ldr	r3, [pc, #384]	; (9b08 <FormatMsg+0x348>)
    9988:	0019      	movs	r1, r3
    998a:	4b57      	ldr	r3, [pc, #348]	; (9ae8 <FormatMsg+0x328>)
    998c:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    998e:	2316      	movs	r3, #22
    9990:	18fb      	adds	r3, r7, r3
    9992:	2216      	movs	r2, #22
    9994:	18b9      	adds	r1, r7, r2
    9996:	220e      	movs	r2, #14
    9998:	18ba      	adds	r2, r7, r2
    999a:	8809      	ldrh	r1, [r1, #0]
    999c:	8812      	ldrh	r2, [r2, #0]
    999e:	188a      	adds	r2, r1, r2
    99a0:	801a      	strh	r2, [r3, #0]
	u16Tmp = Encode((uint8*)strNotification->pu8Msg,&pu8Msg[u16MsgOffset]);
    99a2:	693b      	ldr	r3, [r7, #16]
    99a4:	6918      	ldr	r0, [r3, #16]
    99a6:	2316      	movs	r3, #22
    99a8:	18fb      	adds	r3, r7, r3
    99aa:	881b      	ldrh	r3, [r3, #0]
    99ac:	683a      	ldr	r2, [r7, #0]
    99ae:	18d3      	adds	r3, r2, r3
    99b0:	220e      	movs	r2, #14
    99b2:	18bc      	adds	r4, r7, r2
    99b4:	0019      	movs	r1, r3
    99b6:	4b52      	ldr	r3, [pc, #328]	; (9b00 <FormatMsg+0x340>)
    99b8:	4798      	blx	r3
    99ba:	0003      	movs	r3, r0
    99bc:	8023      	strh	r3, [r4, #0]
	u16MsgOffset += u16Tmp;
    99be:	2316      	movs	r3, #22
    99c0:	18fb      	adds	r3, r7, r3
    99c2:	2216      	movs	r2, #22
    99c4:	18b9      	adds	r1, r7, r2
    99c6:	220e      	movs	r2, #14
    99c8:	18ba      	adds	r2, r7, r2
    99ca:	8809      	ldrh	r1, [r1, #0]
    99cc:	8812      	ldrh	r2, [r2, #0]
    99ce:	188a      	adds	r2, r1, r2
    99d0:	801a      	strh	r2, [r3, #0]

	u16Tmp = sizeof(" HTTP/1.1\r\nHost: ") - 1;
    99d2:	230e      	movs	r3, #14
    99d4:	18fb      	adds	r3, r7, r3
    99d6:	2211      	movs	r2, #17
    99d8:	801a      	strh	r2, [r3, #0]
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)" HTTP/1.1\r\nHost: ",u16Tmp);
    99da:	2316      	movs	r3, #22
    99dc:	18fb      	adds	r3, r7, r3
    99de:	881b      	ldrh	r3, [r3, #0]
    99e0:	683a      	ldr	r2, [r7, #0]
    99e2:	18d0      	adds	r0, r2, r3
    99e4:	230e      	movs	r3, #14
    99e6:	18fb      	adds	r3, r7, r3
    99e8:	881a      	ldrh	r2, [r3, #0]
    99ea:	4b48      	ldr	r3, [pc, #288]	; (9b0c <FormatMsg+0x34c>)
    99ec:	0019      	movs	r1, r3
    99ee:	4b3e      	ldr	r3, [pc, #248]	; (9ae8 <FormatMsg+0x328>)
    99f0:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    99f2:	2316      	movs	r3, #22
    99f4:	18fb      	adds	r3, r7, r3
    99f6:	2216      	movs	r2, #22
    99f8:	18b9      	adds	r1, r7, r2
    99fa:	220e      	movs	r2, #14
    99fc:	18ba      	adds	r2, r7, r2
    99fe:	8809      	ldrh	r1, [r1, #0]
    9a00:	8812      	ldrh	r2, [r2, #0]
    9a02:	188a      	adds	r2, r1, r2
    9a04:	801a      	strh	r2, [r3, #0]

	if (u8clientName == NMA_CLIENT)
    9a06:	1dfb      	adds	r3, r7, #7
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	2b02      	cmp	r3, #2
    9a0c:	d11a      	bne.n	9a44 <FormatMsg+0x284>
	{
		u16Tmp = sizeof(NMA_DOMAIN_NAME) - 1;
    9a0e:	230e      	movs	r3, #14
    9a10:	18fb      	adds	r3, r7, r3
    9a12:	2217      	movs	r2, #23
    9a14:	801a      	strh	r2, [r3, #0]
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)NMA_DOMAIN_NAME,u16Tmp);
    9a16:	2316      	movs	r3, #22
    9a18:	18fb      	adds	r3, r7, r3
    9a1a:	881b      	ldrh	r3, [r3, #0]
    9a1c:	683a      	ldr	r2, [r7, #0]
    9a1e:	18d0      	adds	r0, r2, r3
    9a20:	230e      	movs	r3, #14
    9a22:	18fb      	adds	r3, r7, r3
    9a24:	881a      	ldrh	r2, [r3, #0]
    9a26:	4b3a      	ldr	r3, [pc, #232]	; (9b10 <FormatMsg+0x350>)
    9a28:	0019      	movs	r1, r3
    9a2a:	4b2f      	ldr	r3, [pc, #188]	; (9ae8 <FormatMsg+0x328>)
    9a2c:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    9a2e:	2316      	movs	r3, #22
    9a30:	18fb      	adds	r3, r7, r3
    9a32:	2216      	movs	r2, #22
    9a34:	18b9      	adds	r1, r7, r2
    9a36:	220e      	movs	r2, #14
    9a38:	18ba      	adds	r2, r7, r2
    9a3a:	8809      	ldrh	r1, [r1, #0]
    9a3c:	8812      	ldrh	r2, [r2, #0]
    9a3e:	188a      	adds	r2, r1, r2
    9a40:	801a      	strh	r2, [r3, #0]
    9a42:	e01d      	b.n	9a80 <FormatMsg+0x2c0>
	}
	else if (u8clientName == PROWL_CLIENT)
    9a44:	1dfb      	adds	r3, r7, #7
    9a46:	781b      	ldrb	r3, [r3, #0]
    9a48:	2b01      	cmp	r3, #1
    9a4a:	d119      	bne.n	9a80 <FormatMsg+0x2c0>
	{
		u16Tmp = sizeof(PROWL_DOMAIN_NAME) - 1;
    9a4c:	230e      	movs	r3, #14
    9a4e:	18fb      	adds	r3, r7, r3
    9a50:	2210      	movs	r2, #16
    9a52:	801a      	strh	r2, [r3, #0]
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)PROWL_DOMAIN_NAME,u16Tmp);
    9a54:	2316      	movs	r3, #22
    9a56:	18fb      	adds	r3, r7, r3
    9a58:	881b      	ldrh	r3, [r3, #0]
    9a5a:	683a      	ldr	r2, [r7, #0]
    9a5c:	18d0      	adds	r0, r2, r3
    9a5e:	230e      	movs	r3, #14
    9a60:	18fb      	adds	r3, r7, r3
    9a62:	881a      	ldrh	r2, [r3, #0]
    9a64:	4b2b      	ldr	r3, [pc, #172]	; (9b14 <FormatMsg+0x354>)
    9a66:	0019      	movs	r1, r3
    9a68:	4b1f      	ldr	r3, [pc, #124]	; (9ae8 <FormatMsg+0x328>)
    9a6a:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    9a6c:	2316      	movs	r3, #22
    9a6e:	18fb      	adds	r3, r7, r3
    9a70:	2216      	movs	r2, #22
    9a72:	18b9      	adds	r1, r7, r2
    9a74:	220e      	movs	r2, #14
    9a76:	18ba      	adds	r2, r7, r2
    9a78:	8809      	ldrh	r1, [r1, #0]
    9a7a:	8812      	ldrh	r2, [r2, #0]
    9a7c:	188a      	adds	r2, r1, r2
    9a7e:	801a      	strh	r2, [r3, #0]

	}

	u16Tmp = sizeof("\r\n\r\n") - 1;
    9a80:	230e      	movs	r3, #14
    9a82:	18fb      	adds	r3, r7, r3
    9a84:	2204      	movs	r2, #4
    9a86:	801a      	strh	r2, [r3, #0]
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"\r\n\r\n",u16Tmp);
    9a88:	2316      	movs	r3, #22
    9a8a:	18fb      	adds	r3, r7, r3
    9a8c:	881b      	ldrh	r3, [r3, #0]
    9a8e:	683a      	ldr	r2, [r7, #0]
    9a90:	18d0      	adds	r0, r2, r3
    9a92:	230e      	movs	r3, #14
    9a94:	18fb      	adds	r3, r7, r3
    9a96:	881a      	ldrh	r2, [r3, #0]
    9a98:	4b1f      	ldr	r3, [pc, #124]	; (9b18 <FormatMsg+0x358>)
    9a9a:	0019      	movs	r1, r3
    9a9c:	4b12      	ldr	r3, [pc, #72]	; (9ae8 <FormatMsg+0x328>)
    9a9e:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    9aa0:	2316      	movs	r3, #22
    9aa2:	18fb      	adds	r3, r7, r3
    9aa4:	2216      	movs	r2, #22
    9aa6:	18b9      	adds	r1, r7, r2
    9aa8:	220e      	movs	r2, #14
    9aaa:	18ba      	adds	r2, r7, r2
    9aac:	8809      	ldrh	r1, [r1, #0]
    9aae:	8812      	ldrh	r2, [r2, #0]
    9ab0:	188a      	adds	r2, r1, r2
    9ab2:	801a      	strh	r2, [r3, #0]
	pu8Msg[u16MsgOffset] = '\0';
    9ab4:	2316      	movs	r3, #22
    9ab6:	18fb      	adds	r3, r7, r3
    9ab8:	881b      	ldrh	r3, [r3, #0]
    9aba:	683a      	ldr	r2, [r7, #0]
    9abc:	18d3      	adds	r3, r2, r3
    9abe:	2200      	movs	r2, #0
    9ac0:	701a      	strb	r2, [r3, #0]
	u16MsgOffset ++;
    9ac2:	2316      	movs	r3, #22
    9ac4:	18fb      	adds	r3, r7, r3
    9ac6:	881a      	ldrh	r2, [r3, #0]
    9ac8:	2316      	movs	r3, #22
    9aca:	18fb      	adds	r3, r7, r3
    9acc:	3201      	adds	r2, #1
    9ace:	801a      	strh	r2, [r3, #0]

	return u16MsgOffset;
    9ad0:	2316      	movs	r3, #22
    9ad2:	18fb      	adds	r3, r7, r3
    9ad4:	881b      	ldrh	r3, [r3, #0]
}
    9ad6:	0018      	movs	r0, r3
    9ad8:	46bd      	mov	sp, r7
    9ada:	b007      	add	sp, #28
    9adc:	bd90      	pop	{r4, r7, pc}
    9ade:	46c0      	nop			; (mov r8, r8)
    9ae0:	20000124 	.word	0x20000124
    9ae4:	0000d578 	.word	0x0000d578
    9ae8:	000015d5 	.word	0x000015d5
    9aec:	2000013c 	.word	0x2000013c
    9af0:	20000110 	.word	0x20000110
    9af4:	0000d598 	.word	0x0000d598
    9af8:	20000138 	.word	0x20000138
    9afc:	0000d5b4 	.word	0x0000d5b4
    9b00:	000096d1 	.word	0x000096d1
    9b04:	0000d5c4 	.word	0x0000d5c4
    9b08:	0000d5cc 	.word	0x0000d5cc
    9b0c:	0000d5dc 	.word	0x0000d5dc
    9b10:	0000d5f0 	.word	0x0000d5f0
    9b14:	0000d608 	.word	0x0000d608
    9b18:	0000d61c 	.word	0x0000d61c

00009b1c <GetResponseCode>:
uint8 GetResponseCode
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
    9b1c:	b580      	push	{r7, lr}
    9b1e:	b084      	sub	sp, #16
    9b20:	af00      	add	r7, sp, #0
    9b22:	6078      	str	r0, [r7, #4]
    9b24:	000a      	movs	r2, r1
    9b26:	1cbb      	adds	r3, r7, #2
    9b28:	801a      	strh	r2, [r3, #0]
	uint8	u8Code = 0xFF;
    9b2a:	230f      	movs	r3, #15
    9b2c:	18fb      	adds	r3, r7, r3
    9b2e:	22ff      	movs	r2, #255	; 0xff
    9b30:	701a      	strb	r2, [r3, #0]
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	2b00      	cmp	r3, #0
    9b36:	d100      	bne.n	9b3a <GetResponseCode+0x1e>
    9b38:	e097      	b.n	9c6a <GetResponseCode+0x14e>
    9b3a:	1cbb      	adds	r3, r7, #2
    9b3c:	881b      	ldrh	r3, [r3, #0]
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d100      	bne.n	9b44 <GetResponseCode+0x28>
    9b42:	e092      	b.n	9c6a <GetResponseCode+0x14e>
	{
		uint16	u16Offset = 0;
    9b44:	230c      	movs	r3, #12
    9b46:	18fb      	adds	r3, r7, r3
    9b48:	2200      	movs	r2, #0
    9b4a:	801a      	strh	r2, [r3, #0]
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
    9b4c:	230c      	movs	r3, #12
    9b4e:	18fb      	adds	r3, r7, r3
    9b50:	881b      	ldrh	r3, [r3, #0]
    9b52:	687a      	ldr	r2, [r7, #4]
    9b54:	18d3      	adds	r3, r2, r3
    9b56:	4948      	ldr	r1, [pc, #288]	; (9c78 <GetResponseCode+0x15c>)
    9b58:	2209      	movs	r2, #9
    9b5a:	0018      	movs	r0, r3
    9b5c:	4b47      	ldr	r3, [pc, #284]	; (9c7c <GetResponseCode+0x160>)
    9b5e:	4798      	blx	r3
    9b60:	1e03      	subs	r3, r0, #0
    9b62:	d000      	beq.n	9b66 <GetResponseCode+0x4a>
    9b64:	e071      	b.n	9c4a <GetResponseCode+0x12e>
			{
				u16Offset += 9;
    9b66:	230c      	movs	r3, #12
    9b68:	18fb      	adds	r3, r7, r3
    9b6a:	220c      	movs	r2, #12
    9b6c:	18ba      	adds	r2, r7, r2
    9b6e:	8812      	ldrh	r2, [r2, #0]
    9b70:	3209      	adds	r2, #9
    9b72:	801a      	strh	r2, [r3, #0]
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
    9b74:	230c      	movs	r3, #12
    9b76:	18fb      	adds	r3, r7, r3
    9b78:	881b      	ldrh	r3, [r3, #0]
    9b7a:	687a      	ldr	r2, [r7, #4]
    9b7c:	18d3      	adds	r3, r2, r3
    9b7e:	4940      	ldr	r1, [pc, #256]	; (9c80 <GetResponseCode+0x164>)
    9b80:	2203      	movs	r2, #3
    9b82:	0018      	movs	r0, r3
    9b84:	4b3d      	ldr	r3, [pc, #244]	; (9c7c <GetResponseCode+0x160>)
    9b86:	4798      	blx	r3
    9b88:	1e03      	subs	r3, r0, #0
    9b8a:	d104      	bne.n	9b96 <GetResponseCode+0x7a>
				{
					u8Code = 20;
    9b8c:	230f      	movs	r3, #15
    9b8e:	18fb      	adds	r3, r7, r3
    9b90:	2214      	movs	r2, #20
    9b92:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					u8Code = 50;
				}
				break;
    9b94:	e069      	b.n	9c6a <GetResponseCode+0x14e>
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
				{
					u8Code = 20;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
    9b96:	230c      	movs	r3, #12
    9b98:	18fb      	adds	r3, r7, r3
    9b9a:	881b      	ldrh	r3, [r3, #0]
    9b9c:	687a      	ldr	r2, [r7, #4]
    9b9e:	18d3      	adds	r3, r2, r3
    9ba0:	4938      	ldr	r1, [pc, #224]	; (9c84 <GetResponseCode+0x168>)
    9ba2:	2203      	movs	r2, #3
    9ba4:	0018      	movs	r0, r3
    9ba6:	4b35      	ldr	r3, [pc, #212]	; (9c7c <GetResponseCode+0x160>)
    9ba8:	4798      	blx	r3
    9baa:	1e03      	subs	r3, r0, #0
    9bac:	d104      	bne.n	9bb8 <GetResponseCode+0x9c>
				{
					u8Code = 40;
    9bae:	230f      	movs	r3, #15
    9bb0:	18fb      	adds	r3, r7, r3
    9bb2:	2228      	movs	r2, #40	; 0x28
    9bb4:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					u8Code = 50;
				}
				break;
    9bb6:	e058      	b.n	9c6a <GetResponseCode+0x14e>
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
				{
					u8Code = 40;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
    9bb8:	230c      	movs	r3, #12
    9bba:	18fb      	adds	r3, r7, r3
    9bbc:	881b      	ldrh	r3, [r3, #0]
    9bbe:	687a      	ldr	r2, [r7, #4]
    9bc0:	18d3      	adds	r3, r2, r3
    9bc2:	4931      	ldr	r1, [pc, #196]	; (9c88 <GetResponseCode+0x16c>)
    9bc4:	2203      	movs	r2, #3
    9bc6:	0018      	movs	r0, r3
    9bc8:	4b2c      	ldr	r3, [pc, #176]	; (9c7c <GetResponseCode+0x160>)
    9bca:	4798      	blx	r3
    9bcc:	1e03      	subs	r3, r0, #0
    9bce:	d104      	bne.n	9bda <GetResponseCode+0xbe>
				{
					u8Code = 41;
    9bd0:	230f      	movs	r3, #15
    9bd2:	18fb      	adds	r3, r7, r3
    9bd4:	2229      	movs	r2, #41	; 0x29
    9bd6:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					u8Code = 50;
				}
				break;
    9bd8:	e047      	b.n	9c6a <GetResponseCode+0x14e>
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
				{
					u8Code = 41;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
    9bda:	230c      	movs	r3, #12
    9bdc:	18fb      	adds	r3, r7, r3
    9bde:	881b      	ldrh	r3, [r3, #0]
    9be0:	687a      	ldr	r2, [r7, #4]
    9be2:	18d3      	adds	r3, r2, r3
    9be4:	4929      	ldr	r1, [pc, #164]	; (9c8c <GetResponseCode+0x170>)
    9be6:	2203      	movs	r2, #3
    9be8:	0018      	movs	r0, r3
    9bea:	4b24      	ldr	r3, [pc, #144]	; (9c7c <GetResponseCode+0x160>)
    9bec:	4798      	blx	r3
    9bee:	1e03      	subs	r3, r0, #0
    9bf0:	d104      	bne.n	9bfc <GetResponseCode+0xe0>
				{
					u8Code = 42;
    9bf2:	230f      	movs	r3, #15
    9bf4:	18fb      	adds	r3, r7, r3
    9bf6:	222a      	movs	r2, #42	; 0x2a
    9bf8:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					u8Code = 50;
				}
				break;
    9bfa:	e036      	b.n	9c6a <GetResponseCode+0x14e>
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
				{
					u8Code = 42;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"406", 3))
    9bfc:	230c      	movs	r3, #12
    9bfe:	18fb      	adds	r3, r7, r3
    9c00:	881b      	ldrh	r3, [r3, #0]
    9c02:	687a      	ldr	r2, [r7, #4]
    9c04:	18d3      	adds	r3, r2, r3
    9c06:	4922      	ldr	r1, [pc, #136]	; (9c90 <GetResponseCode+0x174>)
    9c08:	2203      	movs	r2, #3
    9c0a:	0018      	movs	r0, r3
    9c0c:	4b1b      	ldr	r3, [pc, #108]	; (9c7c <GetResponseCode+0x160>)
    9c0e:	4798      	blx	r3
    9c10:	1e03      	subs	r3, r0, #0
    9c12:	d104      	bne.n	9c1e <GetResponseCode+0x102>
				{
					u8Code = 46;
    9c14:	230f      	movs	r3, #15
    9c16:	18fb      	adds	r3, r7, r3
    9c18:	222e      	movs	r2, #46	; 0x2e
    9c1a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					u8Code = 50;
				}
				break;
    9c1c:	e025      	b.n	9c6a <GetResponseCode+0x14e>
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"406", 3))
				{
					u8Code = 46;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"409", 3))
    9c1e:	230c      	movs	r3, #12
    9c20:	18fb      	adds	r3, r7, r3
    9c22:	881b      	ldrh	r3, [r3, #0]
    9c24:	687a      	ldr	r2, [r7, #4]
    9c26:	18d3      	adds	r3, r2, r3
    9c28:	491a      	ldr	r1, [pc, #104]	; (9c94 <GetResponseCode+0x178>)
    9c2a:	2203      	movs	r2, #3
    9c2c:	0018      	movs	r0, r3
    9c2e:	4b13      	ldr	r3, [pc, #76]	; (9c7c <GetResponseCode+0x160>)
    9c30:	4798      	blx	r3
    9c32:	1e03      	subs	r3, r0, #0
    9c34:	d104      	bne.n	9c40 <GetResponseCode+0x124>
				{
					u8Code = 49;
    9c36:	230f      	movs	r3, #15
    9c38:	18fb      	adds	r3, r7, r3
    9c3a:	2231      	movs	r2, #49	; 0x31
    9c3c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					u8Code = 50;
				}
				break;
    9c3e:	e014      	b.n	9c6a <GetResponseCode+0x14e>
				{
					u8Code = 49;
				}
				else
				{
					u8Code = 50;
    9c40:	230f      	movs	r3, #15
    9c42:	18fb      	adds	r3, r7, r3
    9c44:	2232      	movs	r2, #50	; 0x32
    9c46:	701a      	strb	r2, [r3, #0]
				}
				break;
    9c48:	e00f      	b.n	9c6a <GetResponseCode+0x14e>
			}
			u16Offset ++;
    9c4a:	230c      	movs	r3, #12
    9c4c:	18fb      	adds	r3, r7, r3
    9c4e:	881a      	ldrh	r2, [r3, #0]
    9c50:	230c      	movs	r3, #12
    9c52:	18fb      	adds	r3, r7, r3
    9c54:	3201      	adds	r2, #1
    9c56:	801a      	strh	r2, [r3, #0]
		}while(u16Offset < (u16BufferSize - 9));
    9c58:	230c      	movs	r3, #12
    9c5a:	18fb      	adds	r3, r7, r3
    9c5c:	881a      	ldrh	r2, [r3, #0]
    9c5e:	1cbb      	adds	r3, r7, #2
    9c60:	881b      	ldrh	r3, [r3, #0]
    9c62:	3b09      	subs	r3, #9
    9c64:	429a      	cmp	r2, r3
    9c66:	da00      	bge.n	9c6a <GetResponseCode+0x14e>
    9c68:	e770      	b.n	9b4c <GetResponseCode+0x30>
	}
	return u8Code;
    9c6a:	230f      	movs	r3, #15
    9c6c:	18fb      	adds	r3, r7, r3
    9c6e:	781b      	ldrb	r3, [r3, #0]
}
    9c70:	0018      	movs	r0, r3
    9c72:	46bd      	mov	sp, r7
    9c74:	b004      	add	sp, #16
    9c76:	bd80      	pop	{r7, pc}
    9c78:	0000d624 	.word	0x0000d624
    9c7c:	0000177d 	.word	0x0000177d
    9c80:	0000d630 	.word	0x0000d630
    9c84:	0000d634 	.word	0x0000d634
    9c88:	0000d638 	.word	0x0000d638
    9c8c:	0000d63c 	.word	0x0000d63c
    9c90:	0000d640 	.word	0x0000d640
    9c94:	0000d644 	.word	0x0000d644

00009c98 <GROWL_APPSocketEventHandler>:
Version: 1.0

Date:
*********************************************************************/
static void GROWL_APPSocketEventHandler(SOCKET sock, uint8 u8Msg, void * pvMsg)
{
    9c98:	b590      	push	{r4, r7, lr}
    9c9a:	b0c9      	sub	sp, #292	; 0x124
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	603a      	str	r2, [r7, #0]
    9ca0:	4bbb      	ldr	r3, [pc, #748]	; (9f90 <GROWL_APPSocketEventHandler+0x2f8>)
    9ca2:	2290      	movs	r2, #144	; 0x90
    9ca4:	0052      	lsls	r2, r2, #1
    9ca6:	4694      	mov	ip, r2
    9ca8:	44bc      	add	ip, r7
    9caa:	4463      	add	r3, ip
    9cac:	1c02      	adds	r2, r0, #0
    9cae:	701a      	strb	r2, [r3, #0]
    9cb0:	4bb8      	ldr	r3, [pc, #736]	; (9f94 <GROWL_APPSocketEventHandler+0x2fc>)
    9cb2:	2290      	movs	r2, #144	; 0x90
    9cb4:	0052      	lsls	r2, r2, #1
    9cb6:	4694      	mov	ip, r2
    9cb8:	44bc      	add	ip, r7
    9cba:	4463      	add	r3, ip
    9cbc:	1c0a      	adds	r2, r1, #0
    9cbe:	701a      	strb	r2, [r3, #0]
	tstrNotification	*pstrNotification;
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
    9cc0:	4bb5      	ldr	r3, [pc, #724]	; (9f98 <GROWL_APPSocketEventHandler+0x300>)
    9cc2:	799b      	ldrb	r3, [r3, #6]
    9cc4:	b25b      	sxtb	r3, r3
    9cc6:	4ab2      	ldr	r2, [pc, #712]	; (9f90 <GROWL_APPSocketEventHandler+0x2f8>)
    9cc8:	2190      	movs	r1, #144	; 0x90
    9cca:	0049      	lsls	r1, r1, #1
    9ccc:	468c      	mov	ip, r1
    9cce:	44bc      	add	ip, r7
    9cd0:	4462      	add	r2, ip
    9cd2:	7812      	ldrb	r2, [r2, #0]
    9cd4:	b252      	sxtb	r2, r2
    9cd6:	429a      	cmp	r2, r3
    9cd8:	d10a      	bne.n	9cf0 <GROWL_APPSocketEventHandler+0x58>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    9cda:	4baf      	ldr	r3, [pc, #700]	; (9f98 <GROWL_APPSocketEventHandler+0x300>)
    9cdc:	228e      	movs	r2, #142	; 0x8e
    9cde:	0052      	lsls	r2, r2, #1
    9ce0:	18ba      	adds	r2, r7, r2
    9ce2:	6013      	str	r3, [r2, #0]
		u8ClientID = NMA_CLIENT;
    9ce4:	231c      	movs	r3, #28
    9ce6:	33ff      	adds	r3, #255	; 0xff
    9ce8:	18fb      	adds	r3, r7, r3
    9cea:	2202      	movs	r2, #2
    9cec:	701a      	strb	r2, [r3, #0]
    9cee:	e017      	b.n	9d20 <GROWL_APPSocketEventHandler+0x88>
	}
	else if(sock == gstrNotificationProwl.Socket)
    9cf0:	4baa      	ldr	r3, [pc, #680]	; (9f9c <GROWL_APPSocketEventHandler+0x304>)
    9cf2:	799b      	ldrb	r3, [r3, #6]
    9cf4:	b25b      	sxtb	r3, r3
    9cf6:	4aa6      	ldr	r2, [pc, #664]	; (9f90 <GROWL_APPSocketEventHandler+0x2f8>)
    9cf8:	2190      	movs	r1, #144	; 0x90
    9cfa:	0049      	lsls	r1, r1, #1
    9cfc:	468c      	mov	ip, r1
    9cfe:	44bc      	add	ip, r7
    9d00:	4462      	add	r2, ip
    9d02:	7812      	ldrb	r2, [r2, #0]
    9d04:	b252      	sxtb	r2, r2
    9d06:	429a      	cmp	r2, r3
    9d08:	d000      	beq.n	9d0c <GROWL_APPSocketEventHandler+0x74>
    9d0a:	e13d      	b.n	9f88 <GROWL_APPSocketEventHandler+0x2f0>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    9d0c:	4ba3      	ldr	r3, [pc, #652]	; (9f9c <GROWL_APPSocketEventHandler+0x304>)
    9d0e:	228e      	movs	r2, #142	; 0x8e
    9d10:	0052      	lsls	r2, r2, #1
    9d12:	18ba      	adds	r2, r7, r2
    9d14:	6013      	str	r3, [r2, #0]
		u8ClientID = PROWL_CLIENT;
    9d16:	231c      	movs	r3, #28
    9d18:	33ff      	adds	r3, #255	; 0xff
    9d1a:	18fb      	adds	r3, r7, r3
    9d1c:	2201      	movs	r2, #1
    9d1e:	701a      	strb	r2, [r3, #0]
	else
	{
		return;
	}

	if(u8Msg == SOCKET_MSG_CONNECT)
    9d20:	4b9c      	ldr	r3, [pc, #624]	; (9f94 <GROWL_APPSocketEventHandler+0x2fc>)
    9d22:	2290      	movs	r2, #144	; 0x90
    9d24:	0052      	lsls	r2, r2, #1
    9d26:	4694      	mov	ip, r2
    9d28:	44bc      	add	ip, r7
    9d2a:	4463      	add	r3, ip
    9d2c:	781b      	ldrb	r3, [r3, #0]
    9d2e:	2b05      	cmp	r3, #5
    9d30:	d000      	beq.n	9d34 <GROWL_APPSocketEventHandler+0x9c>
    9d32:	e087      	b.n	9e44 <GROWL_APPSocketEventHandler+0x1ac>
	{
		static uint8			u8Retry = GROWL_CONNECT_RETRY;
		tstrSocketConnectMsg	*pstrConnect = (tstrSocketConnectMsg*)pvMsg;
    9d34:	683b      	ldr	r3, [r7, #0]
    9d36:	228a      	movs	r2, #138	; 0x8a
    9d38:	0052      	lsls	r2, r2, #1
    9d3a:	18ba      	adds	r2, r7, r2
    9d3c:	6013      	str	r3, [r2, #0]
		if(pstrConnect->s8Error == 0)
    9d3e:	238a      	movs	r3, #138	; 0x8a
    9d40:	005b      	lsls	r3, r3, #1
    9d42:	18fb      	adds	r3, r7, r3
    9d44:	681b      	ldr	r3, [r3, #0]
    9d46:	785b      	ldrb	r3, [r3, #1]
    9d48:	b25b      	sxtb	r3, r3
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d12e      	bne.n	9dac <GROWL_APPSocketEventHandler+0x114>
		{
			uint8	acBuffer[GROWL_MSG_SIZE];
			uint16	u16MsgSize;

			u16MsgSize = FormatMsg(u8ClientID, acBuffer);
    9d4e:	2389      	movs	r3, #137	; 0x89
    9d50:	005b      	lsls	r3, r3, #1
    9d52:	18fc      	adds	r4, r7, r3
    9d54:	2308      	movs	r3, #8
    9d56:	18fa      	adds	r2, r7, r3
    9d58:	231c      	movs	r3, #28
    9d5a:	33ff      	adds	r3, #255	; 0xff
    9d5c:	18fb      	adds	r3, r7, r3
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	0011      	movs	r1, r2
    9d62:	0018      	movs	r0, r3
    9d64:	4b8e      	ldr	r3, [pc, #568]	; (9fa0 <GROWL_APPSocketEventHandler+0x308>)
    9d66:	4798      	blx	r3
    9d68:	0003      	movs	r3, r0
    9d6a:	8023      	strh	r3, [r4, #0]
			send(sock, acBuffer, u16MsgSize, 0);
    9d6c:	2389      	movs	r3, #137	; 0x89
    9d6e:	005b      	lsls	r3, r3, #1
    9d70:	18fb      	adds	r3, r7, r3
    9d72:	881a      	ldrh	r2, [r3, #0]
    9d74:	2308      	movs	r3, #8
    9d76:	18f9      	adds	r1, r7, r3
    9d78:	4b85      	ldr	r3, [pc, #532]	; (9f90 <GROWL_APPSocketEventHandler+0x2f8>)
    9d7a:	2090      	movs	r0, #144	; 0x90
    9d7c:	0040      	lsls	r0, r0, #1
    9d7e:	4684      	mov	ip, r0
    9d80:	44bc      	add	ip, r7
    9d82:	4463      	add	r3, ip
    9d84:	2000      	movs	r0, #0
    9d86:	5618      	ldrsb	r0, [r3, r0]
    9d88:	2300      	movs	r3, #0
    9d8a:	4c86      	ldr	r4, [pc, #536]	; (9fa4 <GROWL_APPSocketEventHandler+0x30c>)
    9d8c:	47a0      	blx	r4
			recv(pstrNotification->Socket, (void*)au8Msg,GROWL_DESCRIPTION_MAX_LENGTH, GROWL_RX_TIMEOUT);
    9d8e:	238e      	movs	r3, #142	; 0x8e
    9d90:	005b      	lsls	r3, r3, #1
    9d92:	18fb      	adds	r3, r7, r3
    9d94:	681b      	ldr	r3, [r3, #0]
    9d96:	2006      	movs	r0, #6
    9d98:	5618      	ldrsb	r0, [r3, r0]
    9d9a:	4b83      	ldr	r3, [pc, #524]	; (9fa8 <GROWL_APPSocketEventHandler+0x310>)
    9d9c:	4983      	ldr	r1, [pc, #524]	; (9fac <GROWL_APPSocketEventHandler+0x314>)
    9d9e:	2248      	movs	r2, #72	; 0x48
    9da0:	4c83      	ldr	r4, [pc, #524]	; (9fb0 <GROWL_APPSocketEventHandler+0x318>)
    9da2:	47a0      	blx	r4
			u8Retry = GROWL_CONNECT_RETRY;
    9da4:	4b83      	ldr	r3, [pc, #524]	; (9fb4 <GROWL_APPSocketEventHandler+0x31c>)
    9da6:	2203      	movs	r2, #3
    9da8:	701a      	strb	r2, [r3, #0]
    9daa:	e0ee      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
		}
		else
		{
			if((u8Retry--) > 0)
    9dac:	4b81      	ldr	r3, [pc, #516]	; (9fb4 <GROWL_APPSocketEventHandler+0x31c>)
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	1e5a      	subs	r2, r3, #1
    9db2:	b2d1      	uxtb	r1, r2
    9db4:	4a7f      	ldr	r2, [pc, #508]	; (9fb4 <GROWL_APPSocketEventHandler+0x31c>)
    9db6:	7011      	strb	r1, [r2, #0]
    9db8:	2b00      	cmp	r3, #0
    9dba:	d022      	beq.n	9e02 <GROWL_APPSocketEventHandler+0x16a>
			{
				M2M_DBG("Retry %s\n",(u8ClientID == NMA_CLIENT) ? "NMA" : "PROWL");
				if (u8ClientID == NMA_CLIENT)
    9dbc:	231c      	movs	r3, #28
    9dbe:	33ff      	adds	r3, #255	; 0xff
    9dc0:	18fb      	adds	r3, r7, r3
    9dc2:	781b      	ldrb	r3, [r3, #0]
    9dc4:	2b02      	cmp	r3, #2
    9dc6:	d10a      	bne.n	9dde <GROWL_APPSocketEventHandler+0x146>
					AppServerCb((uint8*)NMA_DOMAIN_NAME, pstrNotification->u32ServerIPAddress);
    9dc8:	238e      	movs	r3, #142	; 0x8e
    9dca:	005b      	lsls	r3, r3, #1
    9dcc:	18fb      	adds	r3, r7, r3
    9dce:	681b      	ldr	r3, [r3, #0]
    9dd0:	681a      	ldr	r2, [r3, #0]
    9dd2:	4b79      	ldr	r3, [pc, #484]	; (9fb8 <GROWL_APPSocketEventHandler+0x320>)
    9dd4:	0011      	movs	r1, r2
    9dd6:	0018      	movs	r0, r3
    9dd8:	4b78      	ldr	r3, [pc, #480]	; (9fbc <GROWL_APPSocketEventHandler+0x324>)
    9dda:	4798      	blx	r3
    9ddc:	e0d5      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
				else if (u8ClientID == PROWL_CLIENT)
    9dde:	231c      	movs	r3, #28
    9de0:	33ff      	adds	r3, #255	; 0xff
    9de2:	18fb      	adds	r3, r7, r3
    9de4:	781b      	ldrb	r3, [r3, #0]
    9de6:	2b01      	cmp	r3, #1
    9de8:	d000      	beq.n	9dec <GROWL_APPSocketEventHandler+0x154>
    9dea:	e0ce      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
					AppServerCb((uint8*)PROWL_DOMAIN_NAME, pstrNotification->u32ServerIPAddress);
    9dec:	238e      	movs	r3, #142	; 0x8e
    9dee:	005b      	lsls	r3, r3, #1
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	681a      	ldr	r2, [r3, #0]
    9df6:	4b72      	ldr	r3, [pc, #456]	; (9fc0 <GROWL_APPSocketEventHandler+0x328>)
    9df8:	0011      	movs	r1, r2
    9dfa:	0018      	movs	r0, r3
    9dfc:	4b6f      	ldr	r3, [pc, #444]	; (9fbc <GROWL_APPSocketEventHandler+0x324>)
    9dfe:	4798      	blx	r3
    9e00:	e0c3      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
			}
			else
			{
				M2M_DBG("%s Connection Failed\n",(u8ClientID == NMA_CLIENT) ? "NMA" : "PROWL");
				close(pstrNotification->Socket);
    9e02:	238e      	movs	r3, #142	; 0x8e
    9e04:	005b      	lsls	r3, r3, #1
    9e06:	18fb      	adds	r3, r7, r3
    9e08:	681b      	ldr	r3, [r3, #0]
    9e0a:	799b      	ldrb	r3, [r3, #6]
    9e0c:	b25b      	sxtb	r3, r3
    9e0e:	0018      	movs	r0, r3
    9e10:	4b6c      	ldr	r3, [pc, #432]	; (9fc4 <GROWL_APPSocketEventHandler+0x32c>)
    9e12:	4798      	blx	r3
				pstrNotification->Socket = 0xFF;
    9e14:	238e      	movs	r3, #142	; 0x8e
    9e16:	005b      	lsls	r3, r3, #1
    9e18:	18fb      	adds	r3, r7, r3
    9e1a:	681b      	ldr	r3, [r3, #0]
    9e1c:	22ff      	movs	r2, #255	; 0xff
    9e1e:	719a      	strb	r2, [r3, #6]
				pstrNotification->u8State = GROWL_STATE_IDLE;
    9e20:	238e      	movs	r3, #142	; 0x8e
    9e22:	005b      	lsls	r3, r3, #1
    9e24:	18fb      	adds	r3, r7, r3
    9e26:	681b      	ldr	r3, [r3, #0]
    9e28:	2200      	movs	r2, #0
    9e2a:	71da      	strb	r2, [r3, #7]
				GrowlCb(GROWL_ERR_CONN_FAILED,u8ClientID);
    9e2c:	231c      	movs	r3, #28
    9e2e:	33ff      	adds	r3, #255	; 0xff
    9e30:	18fb      	adds	r3, r7, r3
    9e32:	781b      	ldrb	r3, [r3, #0]
    9e34:	0019      	movs	r1, r3
    9e36:	200a      	movs	r0, #10
    9e38:	4b63      	ldr	r3, [pc, #396]	; (9fc8 <GROWL_APPSocketEventHandler+0x330>)
    9e3a:	4798      	blx	r3
				u8Retry = GROWL_CONNECT_RETRY;
    9e3c:	4b5d      	ldr	r3, [pc, #372]	; (9fb4 <GROWL_APPSocketEventHandler+0x31c>)
    9e3e:	2203      	movs	r2, #3
    9e40:	701a      	strb	r2, [r3, #0]
    9e42:	e0a2      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
			}
		}
	}
	else if(u8Msg == SOCKET_MSG_RECV)
    9e44:	4b53      	ldr	r3, [pc, #332]	; (9f94 <GROWL_APPSocketEventHandler+0x2fc>)
    9e46:	2290      	movs	r2, #144	; 0x90
    9e48:	0052      	lsls	r2, r2, #1
    9e4a:	4694      	mov	ip, r2
    9e4c:	44bc      	add	ip, r7
    9e4e:	4463      	add	r3, ip
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	2b06      	cmp	r3, #6
    9e54:	d16d      	bne.n	9f32 <GROWL_APPSocketEventHandler+0x29a>
	{
		tstrSocketRecvMsg		*pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
    9e56:	683b      	ldr	r3, [r7, #0]
    9e58:	2286      	movs	r2, #134	; 0x86
    9e5a:	0052      	lsls	r2, r2, #1
    9e5c:	18ba      	adds	r2, r7, r2
    9e5e:	6013      	str	r3, [r2, #0]
		static uint8			u8Error = 0xFF;
		uint8				    u8Reset = 1;
    9e60:	238d      	movs	r3, #141	; 0x8d
    9e62:	005b      	lsls	r3, r3, #1
    9e64:	18fb      	adds	r3, r7, r3
    9e66:	2201      	movs	r2, #1
    9e68:	701a      	strb	r2, [r3, #0]

		if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
    9e6a:	2386      	movs	r3, #134	; 0x86
    9e6c:	005b      	lsls	r3, r3, #1
    9e6e:	18fb      	adds	r3, r7, r3
    9e70:	681b      	ldr	r3, [r3, #0]
    9e72:	681b      	ldr	r3, [r3, #0]
    9e74:	2b00      	cmp	r3, #0
    9e76:	d01f      	beq.n	9eb8 <GROWL_APPSocketEventHandler+0x220>
    9e78:	2386      	movs	r3, #134	; 0x86
    9e7a:	005b      	lsls	r3, r3, #1
    9e7c:	18fb      	adds	r3, r7, r3
    9e7e:	681b      	ldr	r3, [r3, #0]
    9e80:	2204      	movs	r2, #4
    9e82:	5e9b      	ldrsh	r3, [r3, r2]
    9e84:	2b00      	cmp	r3, #0
    9e86:	dd17      	ble.n	9eb8 <GROWL_APPSocketEventHandler+0x220>
		{
			if(u8Error == 0xFF)
    9e88:	4b50      	ldr	r3, [pc, #320]	; (9fcc <GROWL_APPSocketEventHandler+0x334>)
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	2bff      	cmp	r3, #255	; 0xff
    9e8e:	d113      	bne.n	9eb8 <GROWL_APPSocketEventHandler+0x220>
			{
				u8Error = GetResponseCode(pstrRecvMsg->pu8Buffer,pstrRecvMsg->s16BufferSize);
    9e90:	2386      	movs	r3, #134	; 0x86
    9e92:	005b      	lsls	r3, r3, #1
    9e94:	18fb      	adds	r3, r7, r3
    9e96:	681b      	ldr	r3, [r3, #0]
    9e98:	681a      	ldr	r2, [r3, #0]
    9e9a:	2386      	movs	r3, #134	; 0x86
    9e9c:	005b      	lsls	r3, r3, #1
    9e9e:	18fb      	adds	r3, r7, r3
    9ea0:	681b      	ldr	r3, [r3, #0]
    9ea2:	2104      	movs	r1, #4
    9ea4:	5e5b      	ldrsh	r3, [r3, r1]
    9ea6:	b29b      	uxth	r3, r3
    9ea8:	0019      	movs	r1, r3
    9eaa:	0010      	movs	r0, r2
    9eac:	4b48      	ldr	r3, [pc, #288]	; (9fd0 <GROWL_APPSocketEventHandler+0x338>)
    9eae:	4798      	blx	r3
    9eb0:	0003      	movs	r3, r0
    9eb2:	001a      	movs	r2, r3
    9eb4:	4b45      	ldr	r3, [pc, #276]	; (9fcc <GROWL_APPSocketEventHandler+0x334>)
    9eb6:	701a      	strb	r2, [r3, #0]
			}
		}
		if((pstrRecvMsg->s16BufferSize > 0) && (pstrRecvMsg->u16RemainingSize != 0))
    9eb8:	2386      	movs	r3, #134	; 0x86
    9eba:	005b      	lsls	r3, r3, #1
    9ebc:	18fb      	adds	r3, r7, r3
    9ebe:	681b      	ldr	r3, [r3, #0]
    9ec0:	2204      	movs	r2, #4
    9ec2:	5e9b      	ldrsh	r3, [r3, r2]
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	dd0b      	ble.n	9ee0 <GROWL_APPSocketEventHandler+0x248>
    9ec8:	2386      	movs	r3, #134	; 0x86
    9eca:	005b      	lsls	r3, r3, #1
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	681b      	ldr	r3, [r3, #0]
    9ed0:	88db      	ldrh	r3, [r3, #6]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d004      	beq.n	9ee0 <GROWL_APPSocketEventHandler+0x248>
		{
			u8Reset = 0;
    9ed6:	238d      	movs	r3, #141	; 0x8d
    9ed8:	005b      	lsls	r3, r3, #1
    9eda:	18fb      	adds	r3, r7, r3
    9edc:	2200      	movs	r2, #0
    9ede:	701a      	strb	r2, [r3, #0]
		}
		if(u8Reset)
    9ee0:	238d      	movs	r3, #141	; 0x8d
    9ee2:	005b      	lsls	r3, r3, #1
    9ee4:	18fb      	adds	r3, r7, r3
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d04e      	beq.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
		{
			close(pstrNotification->Socket);
    9eec:	238e      	movs	r3, #142	; 0x8e
    9eee:	005b      	lsls	r3, r3, #1
    9ef0:	18fb      	adds	r3, r7, r3
    9ef2:	681b      	ldr	r3, [r3, #0]
    9ef4:	799b      	ldrb	r3, [r3, #6]
    9ef6:	b25b      	sxtb	r3, r3
    9ef8:	0018      	movs	r0, r3
    9efa:	4b32      	ldr	r3, [pc, #200]	; (9fc4 <GROWL_APPSocketEventHandler+0x32c>)
    9efc:	4798      	blx	r3
			pstrNotification->Socket	= 0xFF;
    9efe:	238e      	movs	r3, #142	; 0x8e
    9f00:	005b      	lsls	r3, r3, #1
    9f02:	18fb      	adds	r3, r7, r3
    9f04:	681b      	ldr	r3, [r3, #0]
    9f06:	22ff      	movs	r2, #255	; 0xff
    9f08:	719a      	strb	r2, [r3, #6]
			pstrNotification->u8State	= GROWL_STATE_IDLE;
    9f0a:	238e      	movs	r3, #142	; 0x8e
    9f0c:	005b      	lsls	r3, r3, #1
    9f0e:	18fb      	adds	r3, r7, r3
    9f10:	681b      	ldr	r3, [r3, #0]
    9f12:	2200      	movs	r2, #0
    9f14:	71da      	strb	r2, [r3, #7]
			GrowlCb(u8Error,u8ClientID);
    9f16:	4b2d      	ldr	r3, [pc, #180]	; (9fcc <GROWL_APPSocketEventHandler+0x334>)
    9f18:	781a      	ldrb	r2, [r3, #0]
    9f1a:	231c      	movs	r3, #28
    9f1c:	33ff      	adds	r3, #255	; 0xff
    9f1e:	18fb      	adds	r3, r7, r3
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	0019      	movs	r1, r3
    9f24:	0010      	movs	r0, r2
    9f26:	4b28      	ldr	r3, [pc, #160]	; (9fc8 <GROWL_APPSocketEventHandler+0x330>)
    9f28:	4798      	blx	r3
			u8Error = 0xFF;
    9f2a:	4b28      	ldr	r3, [pc, #160]	; (9fcc <GROWL_APPSocketEventHandler+0x334>)
    9f2c:	22ff      	movs	r2, #255	; 0xff
    9f2e:	701a      	strb	r2, [r3, #0]
    9f30:	e02b      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
		}
	}
	else if(u8Msg == SOCKET_MSG_SEND)
    9f32:	4b18      	ldr	r3, [pc, #96]	; (9f94 <GROWL_APPSocketEventHandler+0x2fc>)
    9f34:	2290      	movs	r2, #144	; 0x90
    9f36:	0052      	lsls	r2, r2, #1
    9f38:	4694      	mov	ip, r2
    9f3a:	44bc      	add	ip, r7
    9f3c:	4463      	add	r3, ip
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	2b07      	cmp	r3, #7
    9f42:	d122      	bne.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
	{
		sint16	s16Sent = *((sint16*)pvMsg);
    9f44:	2385      	movs	r3, #133	; 0x85
    9f46:	005b      	lsls	r3, r3, #1
    9f48:	18fb      	adds	r3, r7, r3
    9f4a:	683a      	ldr	r2, [r7, #0]
    9f4c:	8812      	ldrh	r2, [r2, #0]
    9f4e:	801a      	strh	r2, [r3, #0]
		if(s16Sent <= 0)
    9f50:	2385      	movs	r3, #133	; 0x85
    9f52:	005b      	lsls	r3, r3, #1
    9f54:	18fb      	adds	r3, r7, r3
    9f56:	2200      	movs	r2, #0
    9f58:	5e9b      	ldrsh	r3, [r3, r2]
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	dc15      	bgt.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
		{
			M2M_ERR("GROWL Send Error %d\n",s16Sent);
    9f5e:	23d4      	movs	r3, #212	; 0xd4
    9f60:	005a      	lsls	r2, r3, #1
    9f62:	491c      	ldr	r1, [pc, #112]	; (9fd4 <GROWL_APPSocketEventHandler+0x33c>)
    9f64:	4b1c      	ldr	r3, [pc, #112]	; (9fd8 <GROWL_APPSocketEventHandler+0x340>)
    9f66:	0018      	movs	r0, r3
    9f68:	4b1c      	ldr	r3, [pc, #112]	; (9fdc <GROWL_APPSocketEventHandler+0x344>)
    9f6a:	4798      	blx	r3
    9f6c:	2385      	movs	r3, #133	; 0x85
    9f6e:	005b      	lsls	r3, r3, #1
    9f70:	18fb      	adds	r3, r7, r3
    9f72:	2200      	movs	r2, #0
    9f74:	5e9a      	ldrsh	r2, [r3, r2]
    9f76:	4b1a      	ldr	r3, [pc, #104]	; (9fe0 <GROWL_APPSocketEventHandler+0x348>)
    9f78:	0011      	movs	r1, r2
    9f7a:	0018      	movs	r0, r3
    9f7c:	4b17      	ldr	r3, [pc, #92]	; (9fdc <GROWL_APPSocketEventHandler+0x344>)
    9f7e:	4798      	blx	r3
    9f80:	200d      	movs	r0, #13
    9f82:	4b18      	ldr	r3, [pc, #96]	; (9fe4 <GROWL_APPSocketEventHandler+0x34c>)
    9f84:	4798      	blx	r3
    9f86:	e000      	b.n	9f8a <GROWL_APPSocketEventHandler+0x2f2>
		u8ClientID = PROWL_CLIENT;

	}
	else
	{
		return;
    9f88:	46c0      	nop			; (mov r8, r8)
		if(s16Sent <= 0)
		{
			M2M_ERR("GROWL Send Error %d\n",s16Sent);
		}
	}
}
    9f8a:	46bd      	mov	sp, r7
    9f8c:	b049      	add	sp, #292	; 0x124
    9f8e:	bd90      	pop	{r4, r7, pc}
    9f90:	fffffee7 	.word	0xfffffee7
    9f94:	fffffee6 	.word	0xfffffee6
    9f98:	20000124 	.word	0x20000124
    9f9c:	20000110 	.word	0x20000110
    9fa0:	000097c1 	.word	0x000097c1
    9fa4:	00005891 	.word	0x00005891
    9fa8:	000061a8 	.word	0x000061a8
    9fac:	20000140 	.word	0x20000140
    9fb0:	000059f5 	.word	0x000059f5
    9fb4:	20000019 	.word	0x20000019
    9fb8:	0000d5f0 	.word	0x0000d5f0
    9fbc:	0000a0b5 	.word	0x0000a0b5
    9fc0:	0000d608 	.word	0x0000d608
    9fc4:	00005b75 	.word	0x00005b75
    9fc8:	0000abd1 	.word	0x0000abd1
    9fcc:	2000001a 	.word	0x2000001a
    9fd0:	00009b1d 	.word	0x00009b1d
    9fd4:	0000d734 	.word	0x0000d734
    9fd8:	0000d648 	.word	0x0000d648
    9fdc:	0000b081 	.word	0x0000b081
    9fe0:	0000d65c 	.word	0x0000d65c
    9fe4:	0000b0b5 	.word	0x0000b0b5

00009fe8 <NMI_GrowlInit>:
Version: 1.0

Date:
*********************************************************************/
void NMI_GrowlInit(uint8 *pu8PrwKey,uint8 *pu8NmaKey)
{
    9fe8:	b580      	push	{r7, lr}
    9fea:	b082      	sub	sp, #8
    9fec:	af00      	add	r7, sp, #0
    9fee:	6078      	str	r0, [r7, #4]
    9ff0:	6039      	str	r1, [r7, #0]
	socketInit();
    9ff2:	4b21      	ldr	r3, [pc, #132]	; (a078 <NMI_GrowlInit+0x90>)
    9ff4:	4798      	blx	r3
	registerSocketCallback(GROWL_APPSocketEventHandler, AppServerCb);
    9ff6:	4a21      	ldr	r2, [pc, #132]	; (a07c <NMI_GrowlInit+0x94>)
    9ff8:	4b21      	ldr	r3, [pc, #132]	; (a080 <NMI_GrowlInit+0x98>)
    9ffa:	0011      	movs	r1, r2
    9ffc:	0018      	movs	r0, r3
    9ffe:	4b21      	ldr	r3, [pc, #132]	; (a084 <NMI_GrowlInit+0x9c>)
    a000:	4798      	blx	r3
	if(pu8PrwKey)
    a002:	687b      	ldr	r3, [r7, #4]
    a004:	2b00      	cmp	r3, #0
    a006:	d003      	beq.n	a010 <NMI_GrowlInit+0x28>
	{
		gau8PrwKey = pu8PrwKey;
    a008:	4b1f      	ldr	r3, [pc, #124]	; (a088 <NMI_GrowlInit+0xa0>)
    a00a:	687a      	ldr	r2, [r7, #4]
    a00c:	601a      	str	r2, [r3, #0]
    a00e:	e00a      	b.n	a026 <NMI_GrowlInit+0x3e>
	}
	else
	{
		M2M_INFO("Prowl key Not Vaild\n");
    a010:	4b1e      	ldr	r3, [pc, #120]	; (a08c <NMI_GrowlInit+0xa4>)
    a012:	0018      	movs	r0, r3
    a014:	4b1e      	ldr	r3, [pc, #120]	; (a090 <NMI_GrowlInit+0xa8>)
    a016:	4798      	blx	r3
    a018:	4b1e      	ldr	r3, [pc, #120]	; (a094 <NMI_GrowlInit+0xac>)
    a01a:	0018      	movs	r0, r3
    a01c:	4b1e      	ldr	r3, [pc, #120]	; (a098 <NMI_GrowlInit+0xb0>)
    a01e:	4798      	blx	r3
    a020:	200d      	movs	r0, #13
    a022:	4b1e      	ldr	r3, [pc, #120]	; (a09c <NMI_GrowlInit+0xb4>)
    a024:	4798      	blx	r3
	}
	if(pu8NmaKey)
    a026:	683b      	ldr	r3, [r7, #0]
    a028:	2b00      	cmp	r3, #0
    a02a:	d003      	beq.n	a034 <NMI_GrowlInit+0x4c>
	{

		gau8NmaKey = pu8NmaKey;
    a02c:	4b1c      	ldr	r3, [pc, #112]	; (a0a0 <NMI_GrowlInit+0xb8>)
    a02e:	683a      	ldr	r2, [r7, #0]
    a030:	601a      	str	r2, [r3, #0]
    a032:	e00a      	b.n	a04a <NMI_GrowlInit+0x62>
	}
	else
	{
		M2M_INFO("NMA key Not Vaild\n");
    a034:	4b15      	ldr	r3, [pc, #84]	; (a08c <NMI_GrowlInit+0xa4>)
    a036:	0018      	movs	r0, r3
    a038:	4b15      	ldr	r3, [pc, #84]	; (a090 <NMI_GrowlInit+0xa8>)
    a03a:	4798      	blx	r3
    a03c:	4b19      	ldr	r3, [pc, #100]	; (a0a4 <NMI_GrowlInit+0xbc>)
    a03e:	0018      	movs	r0, r3
    a040:	4b15      	ldr	r3, [pc, #84]	; (a098 <NMI_GrowlInit+0xb0>)
    a042:	4798      	blx	r3
    a044:	200d      	movs	r0, #13
    a046:	4b15      	ldr	r3, [pc, #84]	; (a09c <NMI_GrowlInit+0xb4>)
    a048:	4798      	blx	r3
	}
	m2m_memset((uint8*)&gstrNotificationProwl, 0, sizeof(tstrNotification));
    a04a:	4b17      	ldr	r3, [pc, #92]	; (a0a8 <NMI_GrowlInit+0xc0>)
    a04c:	2214      	movs	r2, #20
    a04e:	2100      	movs	r1, #0
    a050:	0018      	movs	r0, r3
    a052:	4b16      	ldr	r3, [pc, #88]	; (a0ac <NMI_GrowlInit+0xc4>)
    a054:	4798      	blx	r3
	m2m_memset((uint8*)&gstrNotificationNMA, 0, sizeof(tstrNotification));
    a056:	4b16      	ldr	r3, [pc, #88]	; (a0b0 <NMI_GrowlInit+0xc8>)
    a058:	2214      	movs	r2, #20
    a05a:	2100      	movs	r1, #0
    a05c:	0018      	movs	r0, r3
    a05e:	4b13      	ldr	r3, [pc, #76]	; (a0ac <NMI_GrowlInit+0xc4>)
    a060:	4798      	blx	r3
	gstrNotificationProwl.Socket = 0xFF;
    a062:	4b11      	ldr	r3, [pc, #68]	; (a0a8 <NMI_GrowlInit+0xc0>)
    a064:	22ff      	movs	r2, #255	; 0xff
    a066:	719a      	strb	r2, [r3, #6]
	gstrNotificationNMA.Socket = 0xFF;
    a068:	4b11      	ldr	r3, [pc, #68]	; (a0b0 <NMI_GrowlInit+0xc8>)
    a06a:	22ff      	movs	r2, #255	; 0xff
    a06c:	719a      	strb	r2, [r3, #6]
}
    a06e:	46c0      	nop			; (mov r8, r8)
    a070:	46bd      	mov	sp, r7
    a072:	b002      	add	sp, #8
    a074:	bd80      	pop	{r7, pc}
    a076:	46c0      	nop			; (mov r8, r8)
    a078:	000055ad 	.word	0x000055ad
    a07c:	0000a0b5 	.word	0x0000a0b5
    a080:	00009c99 	.word	0x00009c99
    a084:	000055fd 	.word	0x000055fd
    a088:	20000138 	.word	0x20000138
    a08c:	0000d674 	.word	0x0000d674
    a090:	0000b081 	.word	0x0000b081
    a094:	0000d680 	.word	0x0000d680
    a098:	0000b1a1 	.word	0x0000b1a1
    a09c:	0000b0b5 	.word	0x0000b0b5
    a0a0:	2000013c 	.word	0x2000013c
    a0a4:	0000d694 	.word	0x0000d694
    a0a8:	20000110 	.word	0x20000110
    a0ac:	00001611 	.word	0x00001611
    a0b0:	20000124 	.word	0x20000124

0000a0b4 <AppServerCb>:
Version: 1.0

Date: 4 June 2012
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
    a0b4:	b580      	push	{r7, lr}
    a0b6:	b088      	sub	sp, #32
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	6078      	str	r0, [r7, #4]
    a0bc:	6039      	str	r1, [r7, #0]
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
    a0be:	2300      	movs	r3, #0
    a0c0:	61fb      	str	r3, [r7, #28]
	uint8					u8ClientID = 0;
    a0c2:	231b      	movs	r3, #27
    a0c4:	18fb      	adds	r3, r7, r3
    a0c6:	2200      	movs	r2, #0
    a0c8:	701a      	strb	r2, [r3, #0]

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
    a0ca:	4a42      	ldr	r2, [pc, #264]	; (a1d4 <AppServerCb+0x120>)
    a0cc:	687b      	ldr	r3, [r7, #4]
    a0ce:	0011      	movs	r1, r2
    a0d0:	0018      	movs	r0, r3
    a0d2:	4b41      	ldr	r3, [pc, #260]	; (a1d8 <AppServerCb+0x124>)
    a0d4:	4798      	blx	r3
    a0d6:	1e03      	subs	r3, r0, #0
    a0d8:	d006      	beq.n	a0e8 <AppServerCb+0x34>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    a0da:	4b40      	ldr	r3, [pc, #256]	; (a1dc <AppServerCb+0x128>)
    a0dc:	61fb      	str	r3, [r7, #28]
		u8ClientID = NMA_CLIENT;
    a0de:	231b      	movs	r3, #27
    a0e0:	18fb      	adds	r3, r7, r3
    a0e2:	2202      	movs	r2, #2
    a0e4:	701a      	strb	r2, [r3, #0]
    a0e6:	e00d      	b.n	a104 <AppServerCb+0x50>
	}
	else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
    a0e8:	4a3d      	ldr	r2, [pc, #244]	; (a1e0 <AppServerCb+0x12c>)
    a0ea:	687b      	ldr	r3, [r7, #4]
    a0ec:	0011      	movs	r1, r2
    a0ee:	0018      	movs	r0, r3
    a0f0:	4b39      	ldr	r3, [pc, #228]	; (a1d8 <AppServerCb+0x124>)
    a0f2:	4798      	blx	r3
    a0f4:	1e03      	subs	r3, r0, #0
    a0f6:	d005      	beq.n	a104 <AppServerCb+0x50>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    a0f8:	4b3a      	ldr	r3, [pc, #232]	; (a1e4 <AppServerCb+0x130>)
    a0fa:	61fb      	str	r3, [r7, #28]
		u8ClientID = PROWL_CLIENT;
    a0fc:	231b      	movs	r3, #27
    a0fe:	18fb      	adds	r3, r7, r3
    a100:	2201      	movs	r2, #1
    a102:	701a      	strb	r2, [r3, #0]
	}

	if(u32ServerIP != 0)
    a104:	683b      	ldr	r3, [r7, #0]
    a106:	2b00      	cmp	r3, #0
    a108:	d027      	beq.n	a15a <AppServerCb+0xa6>
	{

		if(pstrNotification->u32ServerIPAddress == 0)
    a10a:	69fb      	ldr	r3, [r7, #28]
    a10c:	681b      	ldr	r3, [r3, #0]
    a10e:	2b00      	cmp	r3, #0
    a110:	d102      	bne.n	a118 <AppServerCb+0x64>
		{
			pstrNotification->u32ServerIPAddress = u32ServerIP;
    a112:	69fb      	ldr	r3, [r7, #28]
    a114:	683a      	ldr	r2, [r7, #0]
    a116:	601a      	str	r2, [r3, #0]
		}

		strAddr.sin_family = AF_INET;
    a118:	2308      	movs	r3, #8
    a11a:	18fb      	adds	r3, r7, r3
    a11c:	2202      	movs	r2, #2
    a11e:	801a      	strh	r2, [r3, #0]
		strAddr.sin_port = _htons(pstrNotification->u16Port);
    a120:	69fb      	ldr	r3, [r7, #28]
    a122:	889b      	ldrh	r3, [r3, #4]
    a124:	021b      	lsls	r3, r3, #8
    a126:	b21a      	sxth	r2, r3
    a128:	69fb      	ldr	r3, [r7, #28]
    a12a:	889b      	ldrh	r3, [r3, #4]
    a12c:	0a1b      	lsrs	r3, r3, #8
    a12e:	b29b      	uxth	r3, r3
    a130:	b21b      	sxth	r3, r3
    a132:	4313      	orrs	r3, r2
    a134:	b21b      	sxth	r3, r3
    a136:	b29a      	uxth	r2, r3
    a138:	2308      	movs	r3, #8
    a13a:	18fb      	adds	r3, r7, r3
    a13c:	805a      	strh	r2, [r3, #2]
		strAddr.sin_addr.s_addr = u32ServerIP;
    a13e:	2308      	movs	r3, #8
    a140:	18fb      	adds	r3, r7, r3
    a142:	683a      	ldr	r2, [r7, #0]
    a144:	605a      	str	r2, [r3, #4]

		connect(pstrNotification->Socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
    a146:	69fb      	ldr	r3, [r7, #28]
    a148:	799b      	ldrb	r3, [r3, #6]
    a14a:	b25b      	sxtb	r3, r3
    a14c:	2208      	movs	r2, #8
    a14e:	18b9      	adds	r1, r7, r2
    a150:	2210      	movs	r2, #16
    a152:	0018      	movs	r0, r3
    a154:	4b24      	ldr	r3, [pc, #144]	; (a1e8 <AppServerCb+0x134>)
    a156:	4798      	blx	r3
			u8Retry = GROWL_DNS_RETRY;
			M2M_DBG("Failed to Resolve DNS\n\r");
			GrowlCb(GROWL_ERR_RESOLVE_DNS,u8ClientID);
		}
	}
}
    a158:	e037      	b.n	a1ca <AppServerCb+0x116>
		connect(pstrNotification->Socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
	}
	else
	{
		static uint8	u8Retry = GROWL_DNS_RETRY;
		if(u8Retry--)
    a15a:	4b24      	ldr	r3, [pc, #144]	; (a1ec <AppServerCb+0x138>)
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	1e5a      	subs	r2, r3, #1
    a160:	b2d1      	uxtb	r1, r2
    a162:	4a22      	ldr	r2, [pc, #136]	; (a1ec <AppServerCb+0x138>)
    a164:	7011      	strb	r1, [r2, #0]
    a166:	2b00      	cmp	r3, #0
    a168:	d019      	beq.n	a19e <AppServerCb+0xea>
		{
			M2M_DBG("Retry Resolving DNS\n");
			if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
    a16a:	4a1a      	ldr	r2, [pc, #104]	; (a1d4 <AppServerCb+0x120>)
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	0011      	movs	r1, r2
    a170:	0018      	movs	r0, r3
    a172:	4b19      	ldr	r3, [pc, #100]	; (a1d8 <AppServerCb+0x124>)
    a174:	4798      	blx	r3
    a176:	1e03      	subs	r3, r0, #0
    a178:	d004      	beq.n	a184 <AppServerCb+0xd0>
				gethostbyname((uint8*)NMA_DOMAIN_NAME);
    a17a:	4b1d      	ldr	r3, [pc, #116]	; (a1f0 <AppServerCb+0x13c>)
    a17c:	0018      	movs	r0, r3
    a17e:	4b1d      	ldr	r3, [pc, #116]	; (a1f4 <AppServerCb+0x140>)
    a180:	4798      	blx	r3
			u8Retry = GROWL_DNS_RETRY;
			M2M_DBG("Failed to Resolve DNS\n\r");
			GrowlCb(GROWL_ERR_RESOLVE_DNS,u8ClientID);
		}
	}
}
    a182:	e022      	b.n	a1ca <AppServerCb+0x116>
		if(u8Retry--)
		{
			M2M_DBG("Retry Resolving DNS\n");
			if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
				gethostbyname((uint8*)NMA_DOMAIN_NAME);
			else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
    a184:	4a16      	ldr	r2, [pc, #88]	; (a1e0 <AppServerCb+0x12c>)
    a186:	687b      	ldr	r3, [r7, #4]
    a188:	0011      	movs	r1, r2
    a18a:	0018      	movs	r0, r3
    a18c:	4b12      	ldr	r3, [pc, #72]	; (a1d8 <AppServerCb+0x124>)
    a18e:	4798      	blx	r3
    a190:	1e03      	subs	r3, r0, #0
    a192:	d01a      	beq.n	a1ca <AppServerCb+0x116>
				gethostbyname((uint8*)PROWL_DOMAIN_NAME);
    a194:	4b18      	ldr	r3, [pc, #96]	; (a1f8 <AppServerCb+0x144>)
    a196:	0018      	movs	r0, r3
    a198:	4b16      	ldr	r3, [pc, #88]	; (a1f4 <AppServerCb+0x140>)
    a19a:	4798      	blx	r3
			u8Retry = GROWL_DNS_RETRY;
			M2M_DBG("Failed to Resolve DNS\n\r");
			GrowlCb(GROWL_ERR_RESOLVE_DNS,u8ClientID);
		}
	}
}
    a19c:	e015      	b.n	a1ca <AppServerCb+0x116>
				gethostbyname((uint8*)PROWL_DOMAIN_NAME);

		}
		else
		{
			close(pstrNotification->Socket);
    a19e:	69fb      	ldr	r3, [r7, #28]
    a1a0:	799b      	ldrb	r3, [r3, #6]
    a1a2:	b25b      	sxtb	r3, r3
    a1a4:	0018      	movs	r0, r3
    a1a6:	4b15      	ldr	r3, [pc, #84]	; (a1fc <AppServerCb+0x148>)
    a1a8:	4798      	blx	r3
			pstrNotification->Socket = 0xFF;
    a1aa:	69fb      	ldr	r3, [r7, #28]
    a1ac:	22ff      	movs	r2, #255	; 0xff
    a1ae:	719a      	strb	r2, [r3, #6]
			pstrNotification->u8State = GROWL_STATE_IDLE;
    a1b0:	69fb      	ldr	r3, [r7, #28]
    a1b2:	2200      	movs	r2, #0
    a1b4:	71da      	strb	r2, [r3, #7]
			u8Retry = GROWL_DNS_RETRY;
    a1b6:	4b0d      	ldr	r3, [pc, #52]	; (a1ec <AppServerCb+0x138>)
    a1b8:	2203      	movs	r2, #3
    a1ba:	701a      	strb	r2, [r3, #0]
			M2M_DBG("Failed to Resolve DNS\n\r");
			GrowlCb(GROWL_ERR_RESOLVE_DNS,u8ClientID);
    a1bc:	231b      	movs	r3, #27
    a1be:	18fb      	adds	r3, r7, r3
    a1c0:	781b      	ldrb	r3, [r3, #0]
    a1c2:	0019      	movs	r1, r3
    a1c4:	200b      	movs	r0, #11
    a1c6:	4b0e      	ldr	r3, [pc, #56]	; (a200 <AppServerCb+0x14c>)
    a1c8:	4798      	blx	r3
		}
	}
}
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	46bd      	mov	sp, r7
    a1ce:	b008      	add	sp, #32
    a1d0:	bd80      	pop	{r7, pc}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	0000d6a8 	.word	0x0000d6a8
    a1d8:	000016f1 	.word	0x000016f1
    a1dc:	20000124 	.word	0x20000124
    a1e0:	0000d6b8 	.word	0x0000d6b8
    a1e4:	20000110 	.word	0x20000110
    a1e8:	0000577d 	.word	0x0000577d
    a1ec:	2000001b 	.word	0x2000001b
    a1f0:	0000d5f0 	.word	0x0000d5f0
    a1f4:	00005c85 	.word	0x00005c85
    a1f8:	0000d608 	.word	0x0000d608
    a1fc:	00005b75 	.word	0x00005b75
    a200:	0000abd1 	.word	0x0000abd1

0000a204 <NMI_GrowlSendNotification>:

Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
    a204:	b580      	push	{r7, lr}
    a206:	b086      	sub	sp, #24
    a208:	af00      	add	r7, sp, #0
    a20a:	60b9      	str	r1, [r7, #8]
    a20c:	607a      	str	r2, [r7, #4]
    a20e:	603b      	str	r3, [r7, #0]
    a210:	230f      	movs	r3, #15
    a212:	18fb      	adds	r3, r7, r3
    a214:	1c02      	adds	r2, r0, #0
    a216:	701a      	strb	r2, [r3, #0]
	sint8		retVal = 0;
    a218:	2317      	movs	r3, #23
    a21a:	18fb      	adds	r3, r7, r3
    a21c:	2200      	movs	r2, #0
    a21e:	701a      	strb	r2, [r3, #0]
	uint8		u8Flags = 0;
    a220:	2316      	movs	r3, #22
    a222:	18fb      	adds	r3, r7, r3
    a224:	2200      	movs	r2, #0
    a226:	701a      	strb	r2, [r3, #0]

	if((u8ClientName > 0) && (pu8App != NULL) && (pu8Event != NULL) && (pu8Description != NULL))
    a228:	230f      	movs	r3, #15
    a22a:	18fb      	adds	r3, r7, r3
    a22c:	781b      	ldrb	r3, [r3, #0]
    a22e:	2b00      	cmp	r3, #0
    a230:	d100      	bne.n	a234 <NMI_GrowlSendNotification+0x30>
    a232:	e0df      	b.n	a3f4 <NMI_GrowlSendNotification+0x1f0>
    a234:	68bb      	ldr	r3, [r7, #8]
    a236:	2b00      	cmp	r3, #0
    a238:	d100      	bne.n	a23c <NMI_GrowlSendNotification+0x38>
    a23a:	e0db      	b.n	a3f4 <NMI_GrowlSendNotification+0x1f0>
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	2b00      	cmp	r3, #0
    a240:	d100      	bne.n	a244 <NMI_GrowlSendNotification+0x40>
    a242:	e0d7      	b.n	a3f4 <NMI_GrowlSendNotification+0x1f0>
    a244:	683b      	ldr	r3, [r7, #0]
    a246:	2b00      	cmp	r3, #0
    a248:	d100      	bne.n	a24c <NMI_GrowlSendNotification+0x48>
    a24a:	e0d3      	b.n	a3f4 <NMI_GrowlSendNotification+0x1f0>
	{
		tstrNotification* pstrNotification;
		if((u8ClientName == NMA_CLIENT))
    a24c:	230f      	movs	r3, #15
    a24e:	18fb      	adds	r3, r7, r3
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	2b02      	cmp	r3, #2
    a254:	d114      	bne.n	a280 <NMI_GrowlSendNotification+0x7c>
		{
			if(gau8NmaKey == NULL)
    a256:	4b6d      	ldr	r3, [pc, #436]	; (a40c <NMI_GrowlSendNotification+0x208>)
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	2b00      	cmp	r3, #0
    a25c:	d10d      	bne.n	a27a <NMI_GrowlSendNotification+0x76>
			{
				M2M_INFO("NMA key Not Vaild\n");
    a25e:	4b6c      	ldr	r3, [pc, #432]	; (a410 <NMI_GrowlSendNotification+0x20c>)
    a260:	0018      	movs	r0, r3
    a262:	4b6c      	ldr	r3, [pc, #432]	; (a414 <NMI_GrowlSendNotification+0x210>)
    a264:	4798      	blx	r3
    a266:	4b6c      	ldr	r3, [pc, #432]	; (a418 <NMI_GrowlSendNotification+0x214>)
    a268:	0018      	movs	r0, r3
    a26a:	4b6c      	ldr	r3, [pc, #432]	; (a41c <NMI_GrowlSendNotification+0x218>)
    a26c:	4798      	blx	r3
    a26e:	200d      	movs	r0, #13
    a270:	4b6b      	ldr	r3, [pc, #428]	; (a420 <NMI_GrowlSendNotification+0x21c>)
    a272:	4798      	blx	r3
				return -1;
    a274:	2301      	movs	r3, #1
    a276:	425b      	negs	r3, r3
    a278:	e0c4      	b.n	a404 <NMI_GrowlSendNotification+0x200>
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    a27a:	4b6a      	ldr	r3, [pc, #424]	; (a424 <NMI_GrowlSendNotification+0x220>)
    a27c:	613b      	str	r3, [r7, #16]
    a27e:	e01c      	b.n	a2ba <NMI_GrowlSendNotification+0xb6>
		}
		else if((u8ClientName == PROWL_CLIENT))
    a280:	230f      	movs	r3, #15
    a282:	18fb      	adds	r3, r7, r3
    a284:	781b      	ldrb	r3, [r3, #0]
    a286:	2b01      	cmp	r3, #1
    a288:	d114      	bne.n	a2b4 <NMI_GrowlSendNotification+0xb0>
		{
			if(gau8PrwKey == NULL)
    a28a:	4b67      	ldr	r3, [pc, #412]	; (a428 <NMI_GrowlSendNotification+0x224>)
    a28c:	681b      	ldr	r3, [r3, #0]
    a28e:	2b00      	cmp	r3, #0
    a290:	d10d      	bne.n	a2ae <NMI_GrowlSendNotification+0xaa>
			{
				M2M_INFO("Prowl key Not Vaild\n");
    a292:	4b5f      	ldr	r3, [pc, #380]	; (a410 <NMI_GrowlSendNotification+0x20c>)
    a294:	0018      	movs	r0, r3
    a296:	4b5f      	ldr	r3, [pc, #380]	; (a414 <NMI_GrowlSendNotification+0x210>)
    a298:	4798      	blx	r3
    a29a:	4b64      	ldr	r3, [pc, #400]	; (a42c <NMI_GrowlSendNotification+0x228>)
    a29c:	0018      	movs	r0, r3
    a29e:	4b5f      	ldr	r3, [pc, #380]	; (a41c <NMI_GrowlSendNotification+0x218>)
    a2a0:	4798      	blx	r3
    a2a2:	200d      	movs	r0, #13
    a2a4:	4b5e      	ldr	r3, [pc, #376]	; (a420 <NMI_GrowlSendNotification+0x21c>)
    a2a6:	4798      	blx	r3
				return -1;
    a2a8:	2301      	movs	r3, #1
    a2aa:	425b      	negs	r3, r3
    a2ac:	e0aa      	b.n	a404 <NMI_GrowlSendNotification+0x200>
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    a2ae:	4b60      	ldr	r3, [pc, #384]	; (a430 <NMI_GrowlSendNotification+0x22c>)
    a2b0:	613b      	str	r3, [r7, #16]
    a2b2:	e002      	b.n	a2ba <NMI_GrowlSendNotification+0xb6>
		}
		else
			return M2M_ERR_FAIL;
    a2b4:	230c      	movs	r3, #12
    a2b6:	425b      	negs	r3, r3
    a2b8:	e0a4      	b.n	a404 <NMI_GrowlSendNotification+0x200>

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
    a2ba:	693b      	ldr	r3, [r7, #16]
    a2bc:	79db      	ldrb	r3, [r3, #7]
    a2be:	2b00      	cmp	r3, #0
    a2c0:	d000      	beq.n	a2c4 <NMI_GrowlSendNotification+0xc0>
    a2c2:	e07a      	b.n	a3ba <NMI_GrowlSendNotification+0x1b6>
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
    a2c4:	683b      	ldr	r3, [r7, #0]
    a2c6:	0018      	movs	r0, r3
    a2c8:	4b5a      	ldr	r3, [pc, #360]	; (a434 <NMI_GrowlSendNotification+0x230>)
    a2ca:	4798      	blx	r3
    a2cc:	1e03      	subs	r3, r0, #0
    a2ce:	2b47      	cmp	r3, #71	; 0x47
    a2d0:	d860      	bhi.n	a394 <NMI_GrowlSendNotification+0x190>
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
    a2d2:	68bb      	ldr	r3, [r7, #8]
    a2d4:	0018      	movs	r0, r3
    a2d6:	4b57      	ldr	r3, [pc, #348]	; (a434 <NMI_GrowlSendNotification+0x230>)
    a2d8:	4798      	blx	r3
    a2da:	1e03      	subs	r3, r0, #0
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
    a2dc:	2b0f      	cmp	r3, #15
    a2de:	d859      	bhi.n	a394 <NMI_GrowlSendNotification+0x190>
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
    a2e0:	687b      	ldr	r3, [r7, #4]
    a2e2:	0018      	movs	r0, r3
    a2e4:	4b53      	ldr	r3, [pc, #332]	; (a434 <NMI_GrowlSendNotification+0x230>)
    a2e6:	4798      	blx	r3
    a2e8:	1e03      	subs	r3, r0, #0
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
    a2ea:	2b0f      	cmp	r3, #15
    a2ec:	d852      	bhi.n	a394 <NMI_GrowlSendNotification+0x190>
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
			{
				pstrNotification->pu8App = pu8App;
    a2ee:	693b      	ldr	r3, [r7, #16]
    a2f0:	68ba      	ldr	r2, [r7, #8]
    a2f2:	609a      	str	r2, [r3, #8]
				pstrNotification->pu8Event = pu8Event;
    a2f4:	693b      	ldr	r3, [r7, #16]
    a2f6:	687a      	ldr	r2, [r7, #4]
    a2f8:	60da      	str	r2, [r3, #12]
				pstrNotification->pu8Msg = pu8Description;
    a2fa:	693b      	ldr	r3, [r7, #16]
    a2fc:	683a      	ldr	r2, [r7, #0]
    a2fe:	611a      	str	r2, [r3, #16]
				pstrNotification->u16Port = GROWL_HTTP_PORT;
    a300:	693b      	ldr	r3, [r7, #16]
    a302:	2250      	movs	r2, #80	; 0x50
    a304:	809a      	strh	r2, [r3, #4]

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
    a306:	2320      	movs	r3, #32
    a308:	18fb      	adds	r3, r7, r3
    a30a:	781b      	ldrb	r3, [r3, #0]
    a30c:	2b00      	cmp	r3, #0
    a30e:	d007      	beq.n	a320 <NMI_GrowlSendNotification+0x11c>
				{
					u8Flags = SOCKET_FLAGS_SSL;
    a310:	2316      	movs	r3, #22
    a312:	18fb      	adds	r3, r7, r3
    a314:	2201      	movs	r2, #1
    a316:	701a      	strb	r2, [r3, #0]
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
    a318:	693b      	ldr	r3, [r7, #16]
    a31a:	22bc      	movs	r2, #188	; 0xbc
    a31c:	32ff      	adds	r2, #255	; 0xff
    a31e:	809a      	strh	r2, [r3, #4]
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
    a320:	2316      	movs	r3, #22
    a322:	18fb      	adds	r3, r7, r3
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	001a      	movs	r2, r3
    a328:	2101      	movs	r1, #1
    a32a:	2002      	movs	r0, #2
    a32c:	4b42      	ldr	r3, [pc, #264]	; (a438 <NMI_GrowlSendNotification+0x234>)
    a32e:	4798      	blx	r3
    a330:	0003      	movs	r3, r0
    a332:	001a      	movs	r2, r3
    a334:	693b      	ldr	r3, [r7, #16]
    a336:	719a      	strb	r2, [r3, #6]
				if(pstrNotification->Socket >= 0)
    a338:	693b      	ldr	r3, [r7, #16]
    a33a:	799b      	ldrb	r3, [r3, #6]
    a33c:	b25b      	sxtb	r3, r3
    a33e:	2b00      	cmp	r3, #0
    a340:	db16      	blt.n	a370 <NMI_GrowlSendNotification+0x16c>
				{
					pstrNotification->u8State = GROWL_STATE_REQ_PENDING;
    a342:	693b      	ldr	r3, [r7, #16]
    a344:	2201      	movs	r2, #1
    a346:	71da      	strb	r2, [r3, #7]
					if(u8ClientName == NMA_CLIENT)
    a348:	230f      	movs	r3, #15
    a34a:	18fb      	adds	r3, r7, r3
    a34c:	781b      	ldrb	r3, [r3, #0]
    a34e:	2b02      	cmp	r3, #2
    a350:	d104      	bne.n	a35c <NMI_GrowlSendNotification+0x158>
						gethostbyname((uint8*)NMA_DOMAIN_NAME);
    a352:	4b3a      	ldr	r3, [pc, #232]	; (a43c <NMI_GrowlSendNotification+0x238>)
    a354:	0018      	movs	r0, r3
    a356:	4b3a      	ldr	r3, [pc, #232]	; (a440 <NMI_GrowlSendNotification+0x23c>)
    a358:	4798      	blx	r3
					u8Flags = SOCKET_FLAGS_SSL;
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
				if(pstrNotification->Socket >= 0)
    a35a:	e049      	b.n	a3f0 <NMI_GrowlSendNotification+0x1ec>
				{
					pstrNotification->u8State = GROWL_STATE_REQ_PENDING;
					if(u8ClientName == NMA_CLIENT)
						gethostbyname((uint8*)NMA_DOMAIN_NAME);
					else if(u8ClientName == PROWL_CLIENT)
    a35c:	230f      	movs	r3, #15
    a35e:	18fb      	adds	r3, r7, r3
    a360:	781b      	ldrb	r3, [r3, #0]
    a362:	2b01      	cmp	r3, #1
    a364:	d144      	bne.n	a3f0 <NMI_GrowlSendNotification+0x1ec>
						gethostbyname((uint8*)PROWL_DOMAIN_NAME);
    a366:	4b37      	ldr	r3, [pc, #220]	; (a444 <NMI_GrowlSendNotification+0x240>)
    a368:	0018      	movs	r0, r3
    a36a:	4b35      	ldr	r3, [pc, #212]	; (a440 <NMI_GrowlSendNotification+0x23c>)
    a36c:	4798      	blx	r3
					u8Flags = SOCKET_FLAGS_SSL;
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
				if(pstrNotification->Socket >= 0)
    a36e:	e03f      	b.n	a3f0 <NMI_GrowlSendNotification+0x1ec>
					else if(u8ClientName == PROWL_CLIENT)
						gethostbyname((uint8*)PROWL_DOMAIN_NAME);
				}
				else
				{
					M2M_ERR("No sockets available for the current request\n");
    a370:	4a35      	ldr	r2, [pc, #212]	; (a448 <NMI_GrowlSendNotification+0x244>)
    a372:	4936      	ldr	r1, [pc, #216]	; (a44c <NMI_GrowlSendNotification+0x248>)
    a374:	4b36      	ldr	r3, [pc, #216]	; (a450 <NMI_GrowlSendNotification+0x24c>)
    a376:	0018      	movs	r0, r3
    a378:	4b26      	ldr	r3, [pc, #152]	; (a414 <NMI_GrowlSendNotification+0x210>)
    a37a:	4798      	blx	r3
    a37c:	4b35      	ldr	r3, [pc, #212]	; (a454 <NMI_GrowlSendNotification+0x250>)
    a37e:	0018      	movs	r0, r3
    a380:	4b26      	ldr	r3, [pc, #152]	; (a41c <NMI_GrowlSendNotification+0x218>)
    a382:	4798      	blx	r3
    a384:	200d      	movs	r0, #13
    a386:	4b26      	ldr	r3, [pc, #152]	; (a420 <NMI_GrowlSendNotification+0x21c>)
    a388:	4798      	blx	r3
					retVal = -1;
    a38a:	2317      	movs	r3, #23
    a38c:	18fb      	adds	r3, r7, r3
    a38e:	22ff      	movs	r2, #255	; 0xff
    a390:	701a      	strb	r2, [r3, #0]
					u8Flags = SOCKET_FLAGS_SSL;
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
				if(pstrNotification->Socket >= 0)
    a392:	e02d      	b.n	a3f0 <NMI_GrowlSendNotification+0x1ec>
					retVal = -1;
				}
			}
			else
			{
				M2M_ERR("Msg size is too long\n");
    a394:	239d      	movs	r3, #157	; 0x9d
    a396:	009a      	lsls	r2, r3, #2
    a398:	492c      	ldr	r1, [pc, #176]	; (a44c <NMI_GrowlSendNotification+0x248>)
    a39a:	4b2d      	ldr	r3, [pc, #180]	; (a450 <NMI_GrowlSendNotification+0x24c>)
    a39c:	0018      	movs	r0, r3
    a39e:	4b1d      	ldr	r3, [pc, #116]	; (a414 <NMI_GrowlSendNotification+0x210>)
    a3a0:	4798      	blx	r3
    a3a2:	4b2d      	ldr	r3, [pc, #180]	; (a458 <NMI_GrowlSendNotification+0x254>)
    a3a4:	0018      	movs	r0, r3
    a3a6:	4b1d      	ldr	r3, [pc, #116]	; (a41c <NMI_GrowlSendNotification+0x218>)
    a3a8:	4798      	blx	r3
    a3aa:	200d      	movs	r0, #13
    a3ac:	4b1c      	ldr	r3, [pc, #112]	; (a420 <NMI_GrowlSendNotification+0x21c>)
    a3ae:	4798      	blx	r3
				retVal = -1;
    a3b0:	2317      	movs	r3, #23
    a3b2:	18fb      	adds	r3, r7, r3
    a3b4:	22ff      	movs	r2, #255	; 0xff
    a3b6:	701a      	strb	r2, [r3, #0]
{
	sint8		retVal = 0;
	uint8		u8Flags = 0;

	if((u8ClientName > 0) && (pu8App != NULL) && (pu8Event != NULL) && (pu8Description != NULL))
	{
    a3b8:	e020      	b.n	a3fc <NMI_GrowlSendNotification+0x1f8>
				retVal = -1;
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    a3ba:	4a28      	ldr	r2, [pc, #160]	; (a45c <NMI_GrowlSendNotification+0x258>)
    a3bc:	4923      	ldr	r1, [pc, #140]	; (a44c <NMI_GrowlSendNotification+0x248>)
    a3be:	4b24      	ldr	r3, [pc, #144]	; (a450 <NMI_GrowlSendNotification+0x24c>)
    a3c0:	0018      	movs	r0, r3
    a3c2:	4b14      	ldr	r3, [pc, #80]	; (a414 <NMI_GrowlSendNotification+0x210>)
    a3c4:	4798      	blx	r3
    a3c6:	230f      	movs	r3, #15
    a3c8:	18fb      	adds	r3, r7, r3
    a3ca:	781b      	ldrb	r3, [r3, #0]
    a3cc:	2b02      	cmp	r3, #2
    a3ce:	d101      	bne.n	a3d4 <NMI_GrowlSendNotification+0x1d0>
    a3d0:	4b23      	ldr	r3, [pc, #140]	; (a460 <NMI_GrowlSendNotification+0x25c>)
    a3d2:	e000      	b.n	a3d6 <NMI_GrowlSendNotification+0x1d2>
    a3d4:	4b23      	ldr	r3, [pc, #140]	; (a464 <NMI_GrowlSendNotification+0x260>)
    a3d6:	4a24      	ldr	r2, [pc, #144]	; (a468 <NMI_GrowlSendNotification+0x264>)
    a3d8:	0019      	movs	r1, r3
    a3da:	0010      	movs	r0, r2
    a3dc:	4b0d      	ldr	r3, [pc, #52]	; (a414 <NMI_GrowlSendNotification+0x210>)
    a3de:	4798      	blx	r3
    a3e0:	200d      	movs	r0, #13
    a3e2:	4b0f      	ldr	r3, [pc, #60]	; (a420 <NMI_GrowlSendNotification+0x21c>)
    a3e4:	4798      	blx	r3
			retVal = -1;
    a3e6:	2317      	movs	r3, #23
    a3e8:	18fb      	adds	r3, r7, r3
    a3ea:	22ff      	movs	r2, #255	; 0xff
    a3ec:	701a      	strb	r2, [r3, #0]
{
	sint8		retVal = 0;
	uint8		u8Flags = 0;

	if((u8ClientName > 0) && (pu8App != NULL) && (pu8Event != NULL) && (pu8Description != NULL))
	{
    a3ee:	e005      	b.n	a3fc <NMI_GrowlSendNotification+0x1f8>
					u8Flags = SOCKET_FLAGS_SSL;
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
				if(pstrNotification->Socket >= 0)
    a3f0:	46c0      	nop			; (mov r8, r8)
{
	sint8		retVal = 0;
	uint8		u8Flags = 0;

	if((u8ClientName > 0) && (pu8App != NULL) && (pu8Event != NULL) && (pu8Description != NULL))
	{
    a3f2:	e003      	b.n	a3fc <NMI_GrowlSendNotification+0x1f8>
			retVal = -1;
		}
	}
	else
	{
		retVal = -1;
    a3f4:	2317      	movs	r3, #23
    a3f6:	18fb      	adds	r3, r7, r3
    a3f8:	22ff      	movs	r2, #255	; 0xff
    a3fa:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
    a3fc:	2317      	movs	r3, #23
    a3fe:	18fb      	adds	r3, r7, r3
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	b25b      	sxtb	r3, r3
}
    a404:	0018      	movs	r0, r3
    a406:	46bd      	mov	sp, r7
    a408:	b006      	add	sp, #24
    a40a:	bd80      	pop	{r7, pc}
    a40c:	2000013c 	.word	0x2000013c
    a410:	0000d674 	.word	0x0000d674
    a414:	0000b081 	.word	0x0000b081
    a418:	0000d694 	.word	0x0000d694
    a41c:	0000b1a1 	.word	0x0000b1a1
    a420:	0000b0b5 	.word	0x0000b0b5
    a424:	20000124 	.word	0x20000124
    a428:	20000138 	.word	0x20000138
    a42c:	0000d680 	.word	0x0000d680
    a430:	20000110 	.word	0x20000110
    a434:	00001651 	.word	0x00001651
    a438:	00005625 	.word	0x00005625
    a43c:	0000d5f0 	.word	0x0000d5f0
    a440:	00005c85 	.word	0x00005c85
    a444:	0000d608 	.word	0x0000d608
    a448:	0000026e 	.word	0x0000026e
    a44c:	0000d750 	.word	0x0000d750
    a450:	0000d648 	.word	0x0000d648
    a454:	0000d6c0 	.word	0x0000d6c0
    a458:	0000d6f0 	.word	0x0000d6f0
    a45c:	0000027a 	.word	0x0000027a
    a460:	0000d708 	.word	0x0000d708
    a464:	0000d70c 	.word	0x0000d70c
    a468:	0000d714 	.word	0x0000d714

0000a46c <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
    a46c:	b580      	push	{r7, lr}
    a46e:	b084      	sub	sp, #16
    a470:	af00      	add	r7, sp, #0
    a472:	60f8      	str	r0, [r7, #12]
    a474:	60b9      	str	r1, [r7, #8]
    a476:	607a      	str	r2, [r7, #4]
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    a478:	687b      	ldr	r3, [r7, #4]
    a47a:	689b      	ldr	r3, [r3, #8]
    a47c:	1e5a      	subs	r2, r3, #1
    a47e:	687b      	ldr	r3, [r7, #4]
    a480:	609a      	str	r2, [r3, #8]
    a482:	687b      	ldr	r3, [r7, #4]
    a484:	689b      	ldr	r3, [r3, #8]
    a486:	2b00      	cmp	r3, #0
    a488:	da0a      	bge.n	a4a0 <__sputc_r+0x34>
    a48a:	687b      	ldr	r3, [r7, #4]
    a48c:	689a      	ldr	r2, [r3, #8]
    a48e:	687b      	ldr	r3, [r7, #4]
    a490:	699b      	ldr	r3, [r3, #24]
    a492:	429a      	cmp	r2, r3
    a494:	db0e      	blt.n	a4b4 <__sputc_r+0x48>
    a496:	68bb      	ldr	r3, [r7, #8]
    a498:	22ff      	movs	r2, #255	; 0xff
    a49a:	4013      	ands	r3, r2
    a49c:	2b0a      	cmp	r3, #10
    a49e:	d009      	beq.n	a4b4 <__sputc_r+0x48>
		return (*_p->_p++ = _c);
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	681b      	ldr	r3, [r3, #0]
    a4a4:	1c59      	adds	r1, r3, #1
    a4a6:	687a      	ldr	r2, [r7, #4]
    a4a8:	6011      	str	r1, [r2, #0]
    a4aa:	68ba      	ldr	r2, [r7, #8]
    a4ac:	b2d2      	uxtb	r2, r2
    a4ae:	701a      	strb	r2, [r3, #0]
    a4b0:	781b      	ldrb	r3, [r3, #0]
    a4b2:	e006      	b.n	a4c2 <__sputc_r+0x56>
	else
		return (__swbuf_r(_ptr, _c, _p));
    a4b4:	687a      	ldr	r2, [r7, #4]
    a4b6:	68b9      	ldr	r1, [r7, #8]
    a4b8:	68fb      	ldr	r3, [r7, #12]
    a4ba:	0018      	movs	r0, r3
    a4bc:	4b03      	ldr	r3, [pc, #12]	; (a4cc <__sputc_r+0x60>)
    a4be:	4798      	blx	r3
    a4c0:	0003      	movs	r3, r0
}
    a4c2:	0018      	movs	r0, r3
    a4c4:	46bd      	mov	sp, r7
    a4c6:	b004      	add	sp, #16
    a4c8:	bd80      	pop	{r7, pc}
    a4ca:	46c0      	nop			; (mov r8, r8)
    a4cc:	0000b395 	.word	0x0000b395

0000a4d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a4d0:	b580      	push	{r7, lr}
    a4d2:	b084      	sub	sp, #16
    a4d4:	af00      	add	r7, sp, #0
    a4d6:	0002      	movs	r2, r0
    a4d8:	1dfb      	adds	r3, r7, #7
    a4da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a4dc:	230f      	movs	r3, #15
    a4de:	18fb      	adds	r3, r7, r3
    a4e0:	1dfa      	adds	r2, r7, #7
    a4e2:	7812      	ldrb	r2, [r2, #0]
    a4e4:	09d2      	lsrs	r2, r2, #7
    a4e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a4e8:	230e      	movs	r3, #14
    a4ea:	18fb      	adds	r3, r7, r3
    a4ec:	1dfa      	adds	r2, r7, #7
    a4ee:	7812      	ldrb	r2, [r2, #0]
    a4f0:	0952      	lsrs	r2, r2, #5
    a4f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a4f4:	4b0d      	ldr	r3, [pc, #52]	; (a52c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a4f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a4f8:	230f      	movs	r3, #15
    a4fa:	18fb      	adds	r3, r7, r3
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d10f      	bne.n	a522 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a502:	230f      	movs	r3, #15
    a504:	18fb      	adds	r3, r7, r3
    a506:	781b      	ldrb	r3, [r3, #0]
    a508:	009b      	lsls	r3, r3, #2
    a50a:	2210      	movs	r2, #16
    a50c:	4694      	mov	ip, r2
    a50e:	44bc      	add	ip, r7
    a510:	4463      	add	r3, ip
    a512:	3b08      	subs	r3, #8
    a514:	681a      	ldr	r2, [r3, #0]
    a516:	230e      	movs	r3, #14
    a518:	18fb      	adds	r3, r7, r3
    a51a:	781b      	ldrb	r3, [r3, #0]
    a51c:	01db      	lsls	r3, r3, #7
    a51e:	18d3      	adds	r3, r2, r3
    a520:	e000      	b.n	a524 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a522:	2300      	movs	r3, #0
	}
}
    a524:	0018      	movs	r0, r3
    a526:	46bd      	mov	sp, r7
    a528:	b004      	add	sp, #16
    a52a:	bd80      	pop	{r7, pc}
    a52c:	41004400 	.word	0x41004400

0000a530 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a530:	b580      	push	{r7, lr}
    a532:	b082      	sub	sp, #8
    a534:	af00      	add	r7, sp, #0
    a536:	0002      	movs	r2, r0
    a538:	1dfb      	adds	r3, r7, #7
    a53a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a53c:	1dfb      	adds	r3, r7, #7
    a53e:	781b      	ldrb	r3, [r3, #0]
    a540:	0018      	movs	r0, r3
    a542:	4b03      	ldr	r3, [pc, #12]	; (a550 <port_get_group_from_gpio_pin+0x20>)
    a544:	4798      	blx	r3
    a546:	0003      	movs	r3, r0
}
    a548:	0018      	movs	r0, r3
    a54a:	46bd      	mov	sp, r7
    a54c:	b002      	add	sp, #8
    a54e:	bd80      	pop	{r7, pc}
    a550:	0000a4d1 	.word	0x0000a4d1

0000a554 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    a554:	b580      	push	{r7, lr}
    a556:	b084      	sub	sp, #16
    a558:	af00      	add	r7, sp, #0
    a55a:	0002      	movs	r2, r0
    a55c:	1dfb      	adds	r3, r7, #7
    a55e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a560:	1dfb      	adds	r3, r7, #7
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	0018      	movs	r0, r3
    a566:	4b0b      	ldr	r3, [pc, #44]	; (a594 <port_pin_get_input_level+0x40>)
    a568:	4798      	blx	r3
    a56a:	0003      	movs	r3, r0
    a56c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a56e:	1dfb      	adds	r3, r7, #7
    a570:	781b      	ldrb	r3, [r3, #0]
    a572:	221f      	movs	r2, #31
    a574:	4013      	ands	r3, r2
    a576:	2201      	movs	r2, #1
    a578:	409a      	lsls	r2, r3
    a57a:	0013      	movs	r3, r2
    a57c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    a57e:	68fb      	ldr	r3, [r7, #12]
    a580:	6a1b      	ldr	r3, [r3, #32]
    a582:	68ba      	ldr	r2, [r7, #8]
    a584:	4013      	ands	r3, r2
    a586:	1e5a      	subs	r2, r3, #1
    a588:	4193      	sbcs	r3, r2
    a58a:	b2db      	uxtb	r3, r3
}
    a58c:	0018      	movs	r0, r3
    a58e:	46bd      	mov	sp, r7
    a590:	b004      	add	sp, #16
    a592:	bd80      	pop	{r7, pc}
    a594:	0000a531 	.word	0x0000a531

0000a598 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    a598:	b580      	push	{r7, lr}
    a59a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    a59c:	4b04      	ldr	r3, [pc, #16]	; (a5b0 <system_interrupt_enable_global+0x18>)
    a59e:	2201      	movs	r2, #1
    a5a0:	701a      	strb	r2, [r3, #0]
    a5a2:	f3bf 8f5f 	dmb	sy
    a5a6:	b662      	cpsie	i
}
    a5a8:	46c0      	nop			; (mov r8, r8)
    a5aa:	46bd      	mov	sp, r7
    a5ac:	bd80      	pop	{r7, pc}
    a5ae:	46c0      	nop			; (mov r8, r8)
    a5b0:	20000018 	.word	0x20000018

0000a5b4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b082      	sub	sp, #8
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	0002      	movs	r2, r0
    a5bc:	1dfb      	adds	r3, r7, #7
    a5be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a5c0:	4b06      	ldr	r3, [pc, #24]	; (a5dc <system_interrupt_enable+0x28>)
    a5c2:	1dfa      	adds	r2, r7, #7
    a5c4:	7812      	ldrb	r2, [r2, #0]
    a5c6:	0011      	movs	r1, r2
    a5c8:	221f      	movs	r2, #31
    a5ca:	400a      	ands	r2, r1
    a5cc:	2101      	movs	r1, #1
    a5ce:	4091      	lsls	r1, r2
    a5d0:	000a      	movs	r2, r1
    a5d2:	601a      	str	r2, [r3, #0]
}
    a5d4:	46c0      	nop			; (mov r8, r8)
    a5d6:	46bd      	mov	sp, r7
    a5d8:	b002      	add	sp, #8
    a5da:	bd80      	pop	{r7, pc}
    a5dc:	e000e100 	.word	0xe000e100

0000a5e0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a5e0:	b580      	push	{r7, lr}
    a5e2:	b084      	sub	sp, #16
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a5e8:	687b      	ldr	r3, [r7, #4]
    a5ea:	681b      	ldr	r3, [r3, #0]
    a5ec:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a5ee:	68fb      	ldr	r3, [r7, #12]
    a5f0:	69db      	ldr	r3, [r3, #28]
    a5f2:	1e5a      	subs	r2, r3, #1
    a5f4:	4193      	sbcs	r3, r2
    a5f6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a5f8:	0018      	movs	r0, r3
    a5fa:	46bd      	mov	sp, r7
    a5fc:	b004      	add	sp, #16
    a5fe:	bd80      	pop	{r7, pc}

0000a600 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a600:	b580      	push	{r7, lr}
    a602:	b082      	sub	sp, #8
    a604:	af00      	add	r7, sp, #0
    a606:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a608:	46c0      	nop			; (mov r8, r8)
    a60a:	687b      	ldr	r3, [r7, #4]
    a60c:	0018      	movs	r0, r3
    a60e:	4b04      	ldr	r3, [pc, #16]	; (a620 <_usart_wait_for_sync+0x20>)
    a610:	4798      	blx	r3
    a612:	1e03      	subs	r3, r0, #0
    a614:	d1f9      	bne.n	a60a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a616:	46c0      	nop			; (mov r8, r8)
    a618:	46bd      	mov	sp, r7
    a61a:	b002      	add	sp, #8
    a61c:	bd80      	pop	{r7, pc}
    a61e:	46c0      	nop			; (mov r8, r8)
    a620:	0000a5e1 	.word	0x0000a5e1

0000a624 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a624:	b580      	push	{r7, lr}
    a626:	b082      	sub	sp, #8
    a628:	af00      	add	r7, sp, #0
    a62a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a62c:	687b      	ldr	r3, [r7, #4]
    a62e:	2280      	movs	r2, #128	; 0x80
    a630:	05d2      	lsls	r2, r2, #23
    a632:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	2200      	movs	r2, #0
    a638:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a63a:	687b      	ldr	r3, [r7, #4]
    a63c:	22ff      	movs	r2, #255	; 0xff
    a63e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	2200      	movs	r2, #0
    a644:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	2200      	movs	r2, #0
    a64a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	2296      	movs	r2, #150	; 0x96
    a650:	0192      	lsls	r2, r2, #6
    a652:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a654:	687b      	ldr	r3, [r7, #4]
    a656:	2224      	movs	r2, #36	; 0x24
    a658:	2101      	movs	r1, #1
    a65a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    a65c:	687b      	ldr	r3, [r7, #4]
    a65e:	2225      	movs	r2, #37	; 0x25
    a660:	2101      	movs	r1, #1
    a662:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    a664:	687b      	ldr	r3, [r7, #4]
    a666:	2226      	movs	r2, #38	; 0x26
    a668:	2100      	movs	r1, #0
    a66a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    a66c:	687b      	ldr	r3, [r7, #4]
    a66e:	2227      	movs	r2, #39	; 0x27
    a670:	2100      	movs	r1, #0
    a672:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	2200      	movs	r2, #0
    a678:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	2288      	movs	r2, #136	; 0x88
    a67e:	0352      	lsls	r2, r2, #13
    a680:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a682:	687b      	ldr	r3, [r7, #4]
    a684:	222c      	movs	r2, #44	; 0x2c
    a686:	2100      	movs	r1, #0
    a688:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    a68a:	687b      	ldr	r3, [r7, #4]
    a68c:	222d      	movs	r2, #45	; 0x2d
    a68e:	2100      	movs	r1, #0
    a690:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	2200      	movs	r2, #0
    a696:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	2200      	movs	r2, #0
    a69c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a69e:	687b      	ldr	r3, [r7, #4]
    a6a0:	2200      	movs	r2, #0
    a6a2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a6a4:	687b      	ldr	r3, [r7, #4]
    a6a6:	2200      	movs	r2, #0
    a6a8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a6aa:	687b      	ldr	r3, [r7, #4]
    a6ac:	2200      	movs	r2, #0
    a6ae:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	2200      	movs	r2, #0
    a6b4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	2200      	movs	r2, #0
    a6ba:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    a6bc:	687b      	ldr	r3, [r7, #4]
    a6be:	2200      	movs	r2, #0
    a6c0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    a6c2:	687b      	ldr	r3, [r7, #4]
    a6c4:	2200      	movs	r2, #0
    a6c6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    a6c8:	687b      	ldr	r3, [r7, #4]
    a6ca:	2200      	movs	r2, #0
    a6cc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    a6ce:	687b      	ldr	r3, [r7, #4]
    a6d0:	2213      	movs	r2, #19
    a6d2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	2200      	movs	r2, #0
    a6d8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    a6da:	46c0      	nop			; (mov r8, r8)
    a6dc:	46bd      	mov	sp, r7
    a6de:	b002      	add	sp, #8
    a6e0:	bd80      	pop	{r7, pc}
    a6e2:	46c0      	nop			; (mov r8, r8)

0000a6e4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a6e4:	b580      	push	{r7, lr}
    a6e6:	b084      	sub	sp, #16
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	681b      	ldr	r3, [r3, #0]
    a6f6:	0018      	movs	r0, r3
    a6f8:	4b09      	ldr	r3, [pc, #36]	; (a720 <usart_enable+0x3c>)
    a6fa:	4798      	blx	r3
    a6fc:	0003      	movs	r3, r0
    a6fe:	0018      	movs	r0, r3
    a700:	4b08      	ldr	r3, [pc, #32]	; (a724 <usart_enable+0x40>)
    a702:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	0018      	movs	r0, r3
    a708:	4b07      	ldr	r3, [pc, #28]	; (a728 <usart_enable+0x44>)
    a70a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a70c:	68fb      	ldr	r3, [r7, #12]
    a70e:	681b      	ldr	r3, [r3, #0]
    a710:	2202      	movs	r2, #2
    a712:	431a      	orrs	r2, r3
    a714:	68fb      	ldr	r3, [r7, #12]
    a716:	601a      	str	r2, [r3, #0]
}
    a718:	46c0      	nop			; (mov r8, r8)
    a71a:	46bd      	mov	sp, r7
    a71c:	b004      	add	sp, #16
    a71e:	bd80      	pop	{r7, pc}
    a720:	00006db1 	.word	0x00006db1
    a724:	0000a5b5 	.word	0x0000a5b5
    a728:	0000a601 	.word	0x0000a601

0000a72c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b084      	sub	sp, #16
    a730:	af00      	add	r7, sp, #0
    a732:	60f8      	str	r0, [r7, #12]
    a734:	60b9      	str	r1, [r7, #8]
    a736:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    a738:	687a      	ldr	r2, [r7, #4]
    a73a:	68b9      	ldr	r1, [r7, #8]
    a73c:	68fb      	ldr	r3, [r7, #12]
    a73e:	0018      	movs	r0, r3
    a740:	4b05      	ldr	r3, [pc, #20]	; (a758 <usart_serial_init+0x2c>)
    a742:	4798      	blx	r3
    a744:	1e03      	subs	r3, r0, #0
    a746:	d101      	bne.n	a74c <usart_serial_init+0x20>
		return true;
    a748:	2301      	movs	r3, #1
    a74a:	e000      	b.n	a74e <usart_serial_init+0x22>
	}
	else {
		return false;
    a74c:	2300      	movs	r3, #0
	}
}
    a74e:	0018      	movs	r0, r3
    a750:	46bd      	mov	sp, r7
    a752:	b004      	add	sp, #16
    a754:	bd80      	pop	{r7, pc}
    a756:	46c0      	nop			; (mov r8, r8)
    a758:	00007d79 	.word	0x00007d79

0000a75c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    a75c:	b580      	push	{r7, lr}
    a75e:	b082      	sub	sp, #8
    a760:	af00      	add	r7, sp, #0
    a762:	6078      	str	r0, [r7, #4]
    a764:	000a      	movs	r2, r1
    a766:	1cfb      	adds	r3, r7, #3
    a768:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	1cfb      	adds	r3, r7, #3
    a76e:	781b      	ldrb	r3, [r3, #0]
    a770:	b29a      	uxth	r2, r3
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	0011      	movs	r1, r2
    a776:	0018      	movs	r0, r3
    a778:	4b04      	ldr	r3, [pc, #16]	; (a78c <usart_serial_putchar+0x30>)
    a77a:	4798      	blx	r3
    a77c:	1e03      	subs	r3, r0, #0
    a77e:	d1f5      	bne.n	a76c <usart_serial_putchar+0x10>

	return STATUS_OK;
    a780:	2300      	movs	r3, #0
}
    a782:	0018      	movs	r0, r3
    a784:	46bd      	mov	sp, r7
    a786:	b002      	add	sp, #8
    a788:	bd80      	pop	{r7, pc}
    a78a:	46c0      	nop			; (mov r8, r8)
    a78c:	00007fed 	.word	0x00007fed

0000a790 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a790:	b580      	push	{r7, lr}
    a792:	b084      	sub	sp, #16
    a794:	af00      	add	r7, sp, #0
    a796:	6078      	str	r0, [r7, #4]
    a798:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    a79a:	230e      	movs	r3, #14
    a79c:	18fb      	adds	r3, r7, r3
    a79e:	2200      	movs	r2, #0
    a7a0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a7a2:	46c0      	nop			; (mov r8, r8)
    a7a4:	230e      	movs	r3, #14
    a7a6:	18fa      	adds	r2, r7, r3
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	0011      	movs	r1, r2
    a7ac:	0018      	movs	r0, r3
    a7ae:	4b07      	ldr	r3, [pc, #28]	; (a7cc <usart_serial_getchar+0x3c>)
    a7b0:	4798      	blx	r3
    a7b2:	1e03      	subs	r3, r0, #0
    a7b4:	d1f6      	bne.n	a7a4 <usart_serial_getchar+0x14>

	*c = temp;
    a7b6:	230e      	movs	r3, #14
    a7b8:	18fb      	adds	r3, r7, r3
    a7ba:	881b      	ldrh	r3, [r3, #0]
    a7bc:	b2da      	uxtb	r2, r3
    a7be:	683b      	ldr	r3, [r7, #0]
    a7c0:	701a      	strb	r2, [r3, #0]
}
    a7c2:	46c0      	nop			; (mov r8, r8)
    a7c4:	46bd      	mov	sp, r7
    a7c6:	b004      	add	sp, #16
    a7c8:	bd80      	pop	{r7, pc}
    a7ca:	46c0      	nop			; (mov r8, r8)
    a7cc:	00008051 	.word	0x00008051

0000a7d0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a7d0:	b580      	push	{r7, lr}
    a7d2:	b084      	sub	sp, #16
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	60f8      	str	r0, [r7, #12]
    a7d8:	60b9      	str	r1, [r7, #8]
    a7da:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    a7dc:	4b10      	ldr	r3, [pc, #64]	; (a820 <stdio_serial_init+0x50>)
    a7de:	68fa      	ldr	r2, [r7, #12]
    a7e0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    a7e2:	4b10      	ldr	r3, [pc, #64]	; (a824 <stdio_serial_init+0x54>)
    a7e4:	4a10      	ldr	r2, [pc, #64]	; (a828 <stdio_serial_init+0x58>)
    a7e6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    a7e8:	4b10      	ldr	r3, [pc, #64]	; (a82c <stdio_serial_init+0x5c>)
    a7ea:	4a11      	ldr	r2, [pc, #68]	; (a830 <stdio_serial_init+0x60>)
    a7ec:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    a7ee:	687a      	ldr	r2, [r7, #4]
    a7f0:	68b9      	ldr	r1, [r7, #8]
    a7f2:	68fb      	ldr	r3, [r7, #12]
    a7f4:	0018      	movs	r0, r3
    a7f6:	4b0f      	ldr	r3, [pc, #60]	; (a834 <stdio_serial_init+0x64>)
    a7f8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    a7fa:	4b0f      	ldr	r3, [pc, #60]	; (a838 <stdio_serial_init+0x68>)
    a7fc:	681b      	ldr	r3, [r3, #0]
    a7fe:	689b      	ldr	r3, [r3, #8]
    a800:	2100      	movs	r1, #0
    a802:	0018      	movs	r0, r3
    a804:	4b0d      	ldr	r3, [pc, #52]	; (a83c <stdio_serial_init+0x6c>)
    a806:	4798      	blx	r3
	setbuf(stdin, NULL);
    a808:	4b0b      	ldr	r3, [pc, #44]	; (a838 <stdio_serial_init+0x68>)
    a80a:	681b      	ldr	r3, [r3, #0]
    a80c:	685b      	ldr	r3, [r3, #4]
    a80e:	2100      	movs	r1, #0
    a810:	0018      	movs	r0, r3
    a812:	4b0a      	ldr	r3, [pc, #40]	; (a83c <stdio_serial_init+0x6c>)
    a814:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    a816:	46c0      	nop			; (mov r8, r8)
    a818:	46bd      	mov	sp, r7
    a81a:	b004      	add	sp, #16
    a81c:	bd80      	pop	{r7, pc}
    a81e:	46c0      	nop			; (mov r8, r8)
    a820:	20000368 	.word	0x20000368
    a824:	20000364 	.word	0x20000364
    a828:	0000a75d 	.word	0x0000a75d
    a82c:	20000360 	.word	0x20000360
    a830:	0000a791 	.word	0x0000a791
    a834:	0000a72d 	.word	0x0000a72d
    a838:	2000007c 	.word	0x2000007c
    a83c:	0000b1b5 	.word	0x0000b1b5

0000a840 <configure_extint_channel>:

char event_msg_buf[GROWL_DESCRIPTION_MAX_LENGTH + MAX_TIME_STAMP_LEN];

//! [setup]
void configure_extint_channel(void)
{
    a840:	b580      	push	{r7, lr}
    a842:	b084      	sub	sp, #16
    a844:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    a846:	1d3b      	adds	r3, r7, #4
    a848:	0018      	movs	r0, r3
    a84a:	4b0b      	ldr	r3, [pc, #44]	; (a878 <configure_extint_channel+0x38>)
    a84c:	4798      	blx	r3
	config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    a84e:	1d3b      	adds	r3, r7, #4
    a850:	220f      	movs	r2, #15
    a852:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    a854:	1d3b      	adds	r3, r7, #4
    a856:	2200      	movs	r2, #0
    a858:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    a85a:	1d3b      	adds	r3, r7, #4
    a85c:	2201      	movs	r2, #1
    a85e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    a860:	1d3b      	adds	r3, r7, #4
    a862:	2203      	movs	r2, #3
    a864:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    a866:	1d3b      	adds	r3, r7, #4
    a868:	0019      	movs	r1, r3
    a86a:	200f      	movs	r0, #15
    a86c:	4b03      	ldr	r3, [pc, #12]	; (a87c <configure_extint_channel+0x3c>)
    a86e:	4798      	blx	r3
}
    a870:	46c0      	nop			; (mov r8, r8)
    a872:	46bd      	mov	sp, r7
    a874:	b004      	add	sp, #16
    a876:	bd80      	pop	{r7, pc}
    a878:	00006581 	.word	0x00006581
    a87c:	000065b5 	.word	0x000065b5

0000a880 <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
    a880:	b580      	push	{r7, lr}
    a882:	af00      	add	r7, sp, #0
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    a884:	4b06      	ldr	r3, [pc, #24]	; (a8a0 <configure_extint_callbacks+0x20>)
    a886:	2200      	movs	r2, #0
    a888:	210f      	movs	r1, #15
    a88a:	0018      	movs	r0, r3
    a88c:	4b05      	ldr	r3, [pc, #20]	; (a8a4 <configure_extint_callbacks+0x24>)
    a88e:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    a890:	2100      	movs	r1, #0
    a892:	200f      	movs	r0, #15
    a894:	4b04      	ldr	r3, [pc, #16]	; (a8a8 <configure_extint_callbacks+0x28>)
    a896:	4798      	blx	r3
}
    a898:	46c0      	nop			; (mov r8, r8)
    a89a:	46bd      	mov	sp, r7
    a89c:	bd80      	pop	{r7, pc}
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	0000a8ad 	.word	0x0000a8ad
    a8a4:	00006181 	.word	0x00006181
    a8a8:	000061e5 	.word	0x000061e5

0000a8ac <extint_detection_callback>:

void extint_detection_callback(void)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	af00      	add	r7, sp, #0
	pin_state = port_pin_get_input_level(BUTTON_0_PIN);
    a8b0:	200f      	movs	r0, #15
    a8b2:	4b04      	ldr	r3, [pc, #16]	; (a8c4 <extint_detection_callback+0x18>)
    a8b4:	4798      	blx	r3
    a8b6:	0003      	movs	r3, r0
    a8b8:	001a      	movs	r2, r3
    a8ba:	4b03      	ldr	r3, [pc, #12]	; (a8c8 <extint_detection_callback+0x1c>)
    a8bc:	701a      	strb	r2, [r3, #0]
}
    a8be:	46c0      	nop			; (mov r8, r8)
    a8c0:	46bd      	mov	sp, r7
    a8c2:	bd80      	pop	{r7, pc}
    a8c4:	0000a555 	.word	0x0000a555
    a8c8:	2000036c 	.word	0x2000036c

0000a8cc <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    a8cc:	b580      	push	{r7, lr}
    a8ce:	b090      	sub	sp, #64	; 0x40
    a8d0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    a8d2:	003b      	movs	r3, r7
    a8d4:	0018      	movs	r0, r3
    a8d6:	4b13      	ldr	r3, [pc, #76]	; (a924 <configure_console+0x58>)
    a8d8:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    a8da:	003b      	movs	r3, r7
    a8dc:	2280      	movs	r2, #128	; 0x80
    a8de:	0352      	lsls	r2, r2, #13
    a8e0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    a8e2:	003b      	movs	r3, r7
    a8e4:	4a10      	ldr	r2, [pc, #64]	; (a928 <configure_console+0x5c>)
    a8e6:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    a8e8:	003b      	movs	r3, r7
    a8ea:	4a10      	ldr	r2, [pc, #64]	; (a92c <configure_console+0x60>)
    a8ec:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    a8ee:	003b      	movs	r3, r7
    a8f0:	2201      	movs	r2, #1
    a8f2:	4252      	negs	r2, r2
    a8f4:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    a8f6:	003b      	movs	r3, r7
    a8f8:	2201      	movs	r2, #1
    a8fa:	4252      	negs	r2, r2
    a8fc:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    a8fe:	003b      	movs	r3, r7
    a900:	22e1      	movs	r2, #225	; 0xe1
    a902:	0252      	lsls	r2, r2, #9
    a904:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    a906:	003a      	movs	r2, r7
    a908:	4909      	ldr	r1, [pc, #36]	; (a930 <configure_console+0x64>)
    a90a:	4b0a      	ldr	r3, [pc, #40]	; (a934 <configure_console+0x68>)
    a90c:	0018      	movs	r0, r3
    a90e:	4b0a      	ldr	r3, [pc, #40]	; (a938 <configure_console+0x6c>)
    a910:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    a912:	4b08      	ldr	r3, [pc, #32]	; (a934 <configure_console+0x68>)
    a914:	0018      	movs	r0, r3
    a916:	4b09      	ldr	r3, [pc, #36]	; (a93c <configure_console+0x70>)
    a918:	4798      	blx	r3
}
    a91a:	46c0      	nop			; (mov r8, r8)
    a91c:	46bd      	mov	sp, r7
    a91e:	b010      	add	sp, #64	; 0x40
    a920:	bd80      	pop	{r7, pc}
    a922:	46c0      	nop			; (mov r8, r8)
    a924:	0000a625 	.word	0x0000a625
    a928:	00160002 	.word	0x00160002
    a92c:	00170002 	.word	0x00170002
    a930:	42001400 	.word	0x42001400
    a934:	2000018c 	.word	0x2000018c
    a938:	0000a7d1 	.word	0x0000a7d1
    a93c:	0000a6e5 	.word	0x0000a6e5

0000a940 <ConvertSeconds2Timestamp>:

void ConvertSeconds2Timestamp(uint32 seconds, timestamp_t* my_time)
{
    a940:	b580      	push	{r7, lr}
    a942:	b084      	sub	sp, #16
    a944:	af00      	add	r7, sp, #0
    a946:	6078      	str	r0, [r7, #4]
    a948:	6039      	str	r1, [r7, #0]
	uint32 remainder;
	my_time->days = seconds / (60 * 60 * 24);
    a94a:	687a      	ldr	r2, [r7, #4]
    a94c:	4b1a      	ldr	r3, [pc, #104]	; (a9b8 <ConvertSeconds2Timestamp+0x78>)
    a94e:	491b      	ldr	r1, [pc, #108]	; (a9bc <ConvertSeconds2Timestamp+0x7c>)
    a950:	0010      	movs	r0, r2
    a952:	4798      	blx	r3
    a954:	0003      	movs	r3, r0
    a956:	001a      	movs	r2, r3
    a958:	683b      	ldr	r3, [r7, #0]
    a95a:	601a      	str	r2, [r3, #0]
	remainder = seconds % (60 * 60 * 24); //remainder of hours
    a95c:	687a      	ldr	r2, [r7, #4]
    a95e:	4b18      	ldr	r3, [pc, #96]	; (a9c0 <ConvertSeconds2Timestamp+0x80>)
    a960:	4916      	ldr	r1, [pc, #88]	; (a9bc <ConvertSeconds2Timestamp+0x7c>)
    a962:	0010      	movs	r0, r2
    a964:	4798      	blx	r3
    a966:	000b      	movs	r3, r1
    a968:	60fb      	str	r3, [r7, #12]
	my_time->hours = remainder / (60 * 60);
    a96a:	68f8      	ldr	r0, [r7, #12]
    a96c:	4b12      	ldr	r3, [pc, #72]	; (a9b8 <ConvertSeconds2Timestamp+0x78>)
    a96e:	22e1      	movs	r2, #225	; 0xe1
    a970:	0111      	lsls	r1, r2, #4
    a972:	4798      	blx	r3
    a974:	0003      	movs	r3, r0
    a976:	001a      	movs	r2, r3
    a978:	683b      	ldr	r3, [r7, #0]
    a97a:	605a      	str	r2, [r3, #4]
	remainder = remainder % (60 * 60); //remainder of minutes
    a97c:	68f8      	ldr	r0, [r7, #12]
    a97e:	4b10      	ldr	r3, [pc, #64]	; (a9c0 <ConvertSeconds2Timestamp+0x80>)
    a980:	22e1      	movs	r2, #225	; 0xe1
    a982:	0111      	lsls	r1, r2, #4
    a984:	4798      	blx	r3
    a986:	000b      	movs	r3, r1
    a988:	60fb      	str	r3, [r7, #12]
	my_time->minutes = remainder / 60;
    a98a:	68fa      	ldr	r2, [r7, #12]
    a98c:	4b0a      	ldr	r3, [pc, #40]	; (a9b8 <ConvertSeconds2Timestamp+0x78>)
    a98e:	213c      	movs	r1, #60	; 0x3c
    a990:	0010      	movs	r0, r2
    a992:	4798      	blx	r3
    a994:	0003      	movs	r3, r0
    a996:	001a      	movs	r2, r3
    a998:	683b      	ldr	r3, [r7, #0]
    a99a:	609a      	str	r2, [r3, #8]
	my_time->seconds = remainder % 60;
    a99c:	68fa      	ldr	r2, [r7, #12]
    a99e:	4b08      	ldr	r3, [pc, #32]	; (a9c0 <ConvertSeconds2Timestamp+0x80>)
    a9a0:	213c      	movs	r1, #60	; 0x3c
    a9a2:	0010      	movs	r0, r2
    a9a4:	4798      	blx	r3
    a9a6:	000b      	movs	r3, r1
    a9a8:	001a      	movs	r2, r3
    a9aa:	683b      	ldr	r3, [r7, #0]
    a9ac:	60da      	str	r2, [r3, #12]
}
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	46bd      	mov	sp, r7
    a9b2:	b004      	add	sp, #16
    a9b4:	bd80      	pop	{r7, pc}
    a9b6:	46c0      	nop			; (mov r8, r8)
    a9b8:	0000aea1 	.word	0x0000aea1
    a9bc:	00015180 	.word	0x00015180
    a9c0:	0000afad 	.word	0x0000afad

0000a9c4 <send_prowl>:

int send_prowl(const char* event_name, const char* event_msg)
{
    a9c4:	b5b0      	push	{r4, r5, r7, lr}
    a9c6:	b088      	sub	sp, #32
    a9c8:	af02      	add	r7, sp, #8
    a9ca:	6078      	str	r0, [r7, #4]
    a9cc:	6039      	str	r1, [r7, #0]
	timestamp_t time_stamp;
	ConvertSeconds2Timestamp(seconds_alive_cnt, &time_stamp);
    a9ce:	4b16      	ldr	r3, [pc, #88]	; (aa28 <send_prowl+0x64>)
    a9d0:	681b      	ldr	r3, [r3, #0]
    a9d2:	2208      	movs	r2, #8
    a9d4:	18ba      	adds	r2, r7, r2
    a9d6:	0011      	movs	r1, r2
    a9d8:	0018      	movs	r0, r3
    a9da:	4b14      	ldr	r3, [pc, #80]	; (aa2c <send_prowl+0x68>)
    a9dc:	4798      	blx	r3
	sprintf(event_msg_buf, "%01ld:%02ld:%02ld:%02ld ", time_stamp.days, time_stamp.hours, time_stamp.minutes, time_stamp.seconds);
    a9de:	2308      	movs	r3, #8
    a9e0:	18fb      	adds	r3, r7, r3
    a9e2:	681c      	ldr	r4, [r3, #0]
    a9e4:	2308      	movs	r3, #8
    a9e6:	18fb      	adds	r3, r7, r3
    a9e8:	685d      	ldr	r5, [r3, #4]
    a9ea:	2308      	movs	r3, #8
    a9ec:	18fb      	adds	r3, r7, r3
    a9ee:	689a      	ldr	r2, [r3, #8]
    a9f0:	2308      	movs	r3, #8
    a9f2:	18fb      	adds	r3, r7, r3
    a9f4:	68db      	ldr	r3, [r3, #12]
    a9f6:	490e      	ldr	r1, [pc, #56]	; (aa30 <send_prowl+0x6c>)
    a9f8:	480e      	ldr	r0, [pc, #56]	; (aa34 <send_prowl+0x70>)
    a9fa:	9301      	str	r3, [sp, #4]
    a9fc:	9200      	str	r2, [sp, #0]
    a9fe:	002b      	movs	r3, r5
    aa00:	0022      	movs	r2, r4
    aa02:	4c0d      	ldr	r4, [pc, #52]	; (aa38 <send_prowl+0x74>)
    aa04:	47a0      	blx	r4
	strcat(event_msg_buf, event_msg);
    aa06:	683a      	ldr	r2, [r7, #0]
    aa08:	4b0a      	ldr	r3, [pc, #40]	; (aa34 <send_prowl+0x70>)
    aa0a:	0011      	movs	r1, r2
    aa0c:	0018      	movs	r0, r3
    aa0e:	4b0b      	ldr	r3, [pc, #44]	; (aa3c <send_prowl+0x78>)
    aa10:	4798      	blx	r3
	return growl_send_message_handler(app_string, event_name, event_msg_buf); // msg_buffer);
    aa12:	4a08      	ldr	r2, [pc, #32]	; (aa34 <send_prowl+0x70>)
    aa14:	6879      	ldr	r1, [r7, #4]
    aa16:	4b0a      	ldr	r3, [pc, #40]	; (aa40 <send_prowl+0x7c>)
    aa18:	0018      	movs	r0, r3
    aa1a:	4b0a      	ldr	r3, [pc, #40]	; (aa44 <send_prowl+0x80>)
    aa1c:	4798      	blx	r3
    aa1e:	0003      	movs	r3, r0
}
    aa20:	0018      	movs	r0, r3
    aa22:	46bd      	mov	sp, r7
    aa24:	b006      	add	sp, #24
    aa26:	bdb0      	pop	{r4, r5, r7, pc}
    aa28:	20000370 	.word	0x20000370
    aa2c:	0000a941 	.word	0x0000a941
    aa30:	0000d778 	.word	0x0000d778
    aa34:	20000374 	.word	0x20000374
    aa38:	0000b329 	.word	0x0000b329
    aa3c:	0000b36d 	.word	0x0000b36d
    aa40:	0000d76c 	.word	0x0000d76c
    aa44:	0000aa49 	.word	0x0000aa49

0000aa48 <growl_send_message_handler>:

/**
 * \brief Send a specific notification to a registered Android(NMA) or IOS(PROWL)
 */
int growl_send_message_handler(const char* app_name, const char* event_name, const char* event_msg)
{
    aa48:	b590      	push	{r4, r7, lr}
    aa4a:	b087      	sub	sp, #28
    aa4c:	af02      	add	r7, sp, #8
    aa4e:	60f8      	str	r0, [r7, #12]
    aa50:	60b9      	str	r1, [r7, #8]
    aa52:	607a      	str	r2, [r7, #4]
	printf("Sending Prowl: %s => ", event_msg);
    aa54:	687a      	ldr	r2, [r7, #4]
    aa56:	4b0b      	ldr	r3, [pc, #44]	; (aa84 <growl_send_message_handler+0x3c>)
    aa58:	0011      	movs	r1, r2
    aa5a:	0018      	movs	r0, r3
    aa5c:	4b0a      	ldr	r3, [pc, #40]	; (aa88 <growl_send_message_handler+0x40>)
    aa5e:	4798      	blx	r3
	growl_msg_tmr = 59;
    aa60:	4b0a      	ldr	r3, [pc, #40]	; (aa8c <growl_send_message_handler+0x44>)
    aa62:	223b      	movs	r2, #59	; 0x3b
    aa64:	601a      	str	r2, [r3, #0]
	NMI_GrowlSendNotification(PROWL_CLIENT, (uint8*) app_name, (uint8*) event_name, (uint8*) event_msg,PROWL_CONNECTION_TYPE); // send by PROWL */
    aa66:	6878      	ldr	r0, [r7, #4]
    aa68:	68ba      	ldr	r2, [r7, #8]
    aa6a:	68f9      	ldr	r1, [r7, #12]
    aa6c:	2300      	movs	r3, #0
    aa6e:	9300      	str	r3, [sp, #0]
    aa70:	0003      	movs	r3, r0
    aa72:	2001      	movs	r0, #1
    aa74:	4c06      	ldr	r4, [pc, #24]	; (aa90 <growl_send_message_handler+0x48>)
    aa76:	47a0      	blx	r4
	//NMI_GrowlSendNotification(NMA_CLIENT, (uint8_t *)"Growl_Sample", (uint8_t *)"Growl_Event", (uint8_t *)"growl_test", NMA_CONNECTION_TYPE);           /* send by NMA */
	return 0;
    aa78:	2300      	movs	r3, #0
}
    aa7a:	0018      	movs	r0, r3
    aa7c:	46bd      	mov	sp, r7
    aa7e:	b005      	add	sp, #20
    aa80:	bd90      	pop	{r4, r7, pc}
    aa82:	46c0      	nop			; (mov r8, r8)
    aa84:	0000d794 	.word	0x0000d794
    aa88:	0000b081 	.word	0x0000b081
    aa8c:	200003cc 	.word	0x200003cc
    aa90:	0000a205 	.word	0x0000a205

0000aa94 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    aa94:	b590      	push	{r4, r7, lr}
    aa96:	b089      	sub	sp, #36	; 0x24
    aa98:	af02      	add	r7, sp, #8
    aa9a:	0002      	movs	r2, r0
    aa9c:	6039      	str	r1, [r7, #0]
    aa9e:	1dfb      	adds	r3, r7, #7
    aaa0:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    aaa2:	1dfb      	adds	r3, r7, #7
    aaa4:	781b      	ldrb	r3, [r3, #0]
    aaa6:	2b2c      	cmp	r3, #44	; 0x2c
    aaa8:	d004      	beq.n	aab4 <wifi_cb+0x20>
    aaaa:	2b32      	cmp	r3, #50	; 0x32
    aaac:	d01b      	beq.n	aae6 <wifi_cb+0x52>
    aaae:	2b09      	cmp	r3, #9
    aab0:	d03e      	beq.n	ab30 <wifi_cb+0x9c>
		}
		break;
	}

	default:
		break;
    aab2:	e065      	b.n	ab80 <wifi_cb+0xec>
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    aab4:	683b      	ldr	r3, [r7, #0]
    aab6:	617b      	str	r3, [r7, #20]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    aab8:	697b      	ldr	r3, [r7, #20]
    aaba:	781b      	ldrb	r3, [r3, #0]
    aabc:	2b01      	cmp	r3, #1
    aabe:	d106      	bne.n	aace <wifi_cb+0x3a>
			printf("Wi-Fi connected\r\n");
    aac0:	4b31      	ldr	r3, [pc, #196]	; (ab88 <wifi_cb+0xf4>)
    aac2:	0018      	movs	r0, r3
    aac4:	4b31      	ldr	r3, [pc, #196]	; (ab8c <wifi_cb+0xf8>)
    aac6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    aac8:	4b31      	ldr	r3, [pc, #196]	; (ab90 <wifi_cb+0xfc>)
    aaca:	4798      	blx	r3
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			printf("Wi-Fi disconnected\r\n");
			connection_state = 0;
		}
		break;
    aacc:	e057      	b.n	ab7e <wifi_cb+0xea>
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("Wi-Fi connected\r\n");
			m2m_wifi_request_dhcp_client();
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    aace:	697b      	ldr	r3, [r7, #20]
    aad0:	781b      	ldrb	r3, [r3, #0]
    aad2:	2b00      	cmp	r3, #0
    aad4:	d153      	bne.n	ab7e <wifi_cb+0xea>
			printf("Wi-Fi disconnected\r\n");
    aad6:	4b2f      	ldr	r3, [pc, #188]	; (ab94 <wifi_cb+0x100>)
    aad8:	0018      	movs	r0, r3
    aada:	4b2c      	ldr	r3, [pc, #176]	; (ab8c <wifi_cb+0xf8>)
    aadc:	4798      	blx	r3
			connection_state = 0;
    aade:	4b2e      	ldr	r3, [pc, #184]	; (ab98 <wifi_cb+0x104>)
    aae0:	2200      	movs	r2, #0
    aae2:	701a      	strb	r2, [r3, #0]
		}
		break;
    aae4:	e04b      	b.n	ab7e <wifi_cb+0xea>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    aae6:	683b      	ldr	r3, [r7, #0]
    aae8:	613b      	str	r3, [r7, #16]
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aaea:	693b      	ldr	r3, [r7, #16]
    aaec:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
    aaee:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aaf0:	693b      	ldr	r3, [r7, #16]
    aaf2:	3301      	adds	r3, #1
    aaf4:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
    aaf6:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aaf8:	693b      	ldr	r3, [r7, #16]
    aafa:	3302      	adds	r3, #2
    aafc:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
    aafe:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    ab00:	693b      	ldr	r3, [r7, #16]
    ab02:	3303      	adds	r3, #3
    ab04:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
    ab06:	4825      	ldr	r0, [pc, #148]	; (ab9c <wifi_cb+0x108>)
    ab08:	9300      	str	r3, [sp, #0]
    ab0a:	0023      	movs	r3, r4
    ab0c:	4c24      	ldr	r4, [pc, #144]	; (aba0 <wifi_cb+0x10c>)
    ab0e:	47a0      	blx	r4
			/** init growl */
			NMI_GrowlInit((uint8_t *)PROWL_API_KEY, (uint8_t *)NMA_API_KEY);
			send_prowl("Status Update", "Connection Established");
		}
#else
		NMI_GrowlInit((uint8_t *)PROWL_API_KEY, (uint8_t *)NMA_API_KEY);
    ab10:	4a24      	ldr	r2, [pc, #144]	; (aba4 <wifi_cb+0x110>)
    ab12:	4b25      	ldr	r3, [pc, #148]	; (aba8 <wifi_cb+0x114>)
    ab14:	0011      	movs	r1, r2
    ab16:	0018      	movs	r0, r3
    ab18:	4b24      	ldr	r3, [pc, #144]	; (abac <wifi_cb+0x118>)
    ab1a:	4798      	blx	r3
		send_prowl("Status Update", "Connection Established");
    ab1c:	4a24      	ldr	r2, [pc, #144]	; (abb0 <wifi_cb+0x11c>)
    ab1e:	4b25      	ldr	r3, [pc, #148]	; (abb4 <wifi_cb+0x120>)
    ab20:	0011      	movs	r1, r2
    ab22:	0018      	movs	r0, r3
    ab24:	4b24      	ldr	r3, [pc, #144]	; (abb8 <wifi_cb+0x124>)
    ab26:	4798      	blx	r3
#endif
		connection_state = 1;
    ab28:	4b1b      	ldr	r3, [pc, #108]	; (ab98 <wifi_cb+0x104>)
    ab2a:	2201      	movs	r2, #1
    ab2c:	701a      	strb	r2, [r3, #0]
		break;
    ab2e:	e027      	b.n	ab80 <wifi_cb+0xec>
	}

	case M2M_WIFI_RESP_PROVISION_INFO:
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
    ab30:	683b      	ldr	r3, [r7, #0]
    ab32:	60fb      	str	r3, [r7, #12]
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    ab34:	4b21      	ldr	r3, [pc, #132]	; (abbc <wifi_cb+0x128>)
    ab36:	0018      	movs	r0, r3
    ab38:	4b14      	ldr	r3, [pc, #80]	; (ab8c <wifi_cb+0xf8>)
    ab3a:	4798      	blx	r3

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    ab3c:	68fb      	ldr	r3, [r7, #12]
    ab3e:	2263      	movs	r2, #99	; 0x63
    ab40:	5c9b      	ldrb	r3, [r3, r2]
    ab42:	2b00      	cmp	r3, #0
    ab44:	d116      	bne.n	ab74 <wifi_cb+0xe0>
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    ab46:	68fc      	ldr	r4, [r7, #12]
    ab48:	68fb      	ldr	r3, [r7, #12]
    ab4a:	0018      	movs	r0, r3
    ab4c:	4b1c      	ldr	r3, [pc, #112]	; (abc0 <wifi_cb+0x12c>)
    ab4e:	4798      	blx	r3
    ab50:	0003      	movs	r3, r0
    ab52:	b2d9      	uxtb	r1, r3
    ab54:	68fb      	ldr	r3, [r7, #12]
    ab56:	2262      	movs	r2, #98	; 0x62
    ab58:	5c9a      	ldrb	r2, [r3, r2]
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    ab5a:	68fb      	ldr	r3, [r7, #12]
    ab5c:	3321      	adds	r3, #33	; 0x21
    ab5e:	0018      	movs	r0, r3
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    ab60:	23ff      	movs	r3, #255	; 0xff
    ab62:	9300      	str	r3, [sp, #0]
    ab64:	0003      	movs	r3, r0
    ab66:	0020      	movs	r0, r4
    ab68:	4c16      	ldr	r4, [pc, #88]	; (abc4 <wifi_cb+0x130>)
    ab6a:	47a0      	blx	r4
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
			gbRespProvInfo = true;
    ab6c:	4b16      	ldr	r3, [pc, #88]	; (abc8 <wifi_cb+0x134>)
    ab6e:	2201      	movs	r2, #1
    ab70:	701a      	strb	r2, [r3, #0]
		} else {
			printf("wifi_cb: Provision failed.\r\n");
		}
		break;
    ab72:	e005      	b.n	ab80 <wifi_cb+0xec>
		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
			gbRespProvInfo = true;
		} else {
			printf("wifi_cb: Provision failed.\r\n");
    ab74:	4b15      	ldr	r3, [pc, #84]	; (abcc <wifi_cb+0x138>)
    ab76:	0018      	movs	r0, r3
    ab78:	4b04      	ldr	r3, [pc, #16]	; (ab8c <wifi_cb+0xf8>)
    ab7a:	4798      	blx	r3
		}
		break;
    ab7c:	e000      	b.n	ab80 <wifi_cb+0xec>
			m2m_wifi_request_dhcp_client();
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			printf("Wi-Fi disconnected\r\n");
			connection_state = 0;
		}
		break;
    ab7e:	46c0      	nop			; (mov r8, r8)
	}

	default:
		break;
	}
}
    ab80:	46c0      	nop			; (mov r8, r8)
    ab82:	46bd      	mov	sp, r7
    ab84:	b007      	add	sp, #28
    ab86:	bd90      	pop	{r4, r7, pc}
    ab88:	0000d7ac 	.word	0x0000d7ac
    ab8c:	0000b1a1 	.word	0x0000b1a1
    ab90:	00002f05 	.word	0x00002f05
    ab94:	0000d7c0 	.word	0x0000d7c0
    ab98:	200003d1 	.word	0x200003d1
    ab9c:	0000d7d4 	.word	0x0000d7d4
    aba0:	0000b081 	.word	0x0000b081
    aba4:	0000d800 	.word	0x0000d800
    aba8:	0000d834 	.word	0x0000d834
    abac:	00009fe9 	.word	0x00009fe9
    abb0:	0000d860 	.word	0x0000d860
    abb4:	0000d878 	.word	0x0000d878
    abb8:	0000a9c5 	.word	0x0000a9c5
    abbc:	0000d888 	.word	0x0000d888
    abc0:	0000b387 	.word	0x0000b387
    abc4:	00002a49 	.word	0x00002a49
    abc8:	20000188 	.word	0x20000188
    abcc:	0000d8b0 	.word	0x0000d8b0

0000abd0 <GrowlCb>:
 *  - [11] GROWL_ERR_RESOLVE_DNS (@GROWL_ERR_RESOLVE_DNS GROWL_RETRY)
 *  - [12] GROWL_RETRY (@ref GROWL_RETRY)
 *	\param	[u8ClientID] client id returned by the nma server.
 */
void GrowlCb(uint8_t u8Code, uint8_t u8ClientID)
{
    abd0:	b580      	push	{r7, lr}
    abd2:	b082      	sub	sp, #8
    abd4:	af00      	add	r7, sp, #0
    abd6:	0002      	movs	r2, r0
    abd8:	1dfb      	adds	r3, r7, #7
    abda:	701a      	strb	r2, [r3, #0]
    abdc:	1dbb      	adds	r3, r7, #6
    abde:	1c0a      	adds	r2, r1, #0
    abe0:	701a      	strb	r2, [r3, #0]
	if(u8Code == 20)
    abe2:	1dfb      	adds	r3, r7, #7
    abe4:	781b      	ldrb	r3, [r3, #0]
    abe6:	2b14      	cmp	r3, #20
    abe8:	d104      	bne.n	abf4 <GrowlCb+0x24>
		printf("Growl msg sent successfully.\r\n");
    abea:	4b09      	ldr	r3, [pc, #36]	; (ac10 <GrowlCb+0x40>)
    abec:	0018      	movs	r0, r3
    abee:	4b09      	ldr	r3, [pc, #36]	; (ac14 <GrowlCb+0x44>)
    abf0:	4798      	blx	r3
    abf2:	e006      	b.n	ac02 <GrowlCb+0x32>
	else	
		printf("ERROR: Growl CB Code: %d \r\n", u8Code);
    abf4:	1dfb      	adds	r3, r7, #7
    abf6:	781a      	ldrb	r2, [r3, #0]
    abf8:	4b07      	ldr	r3, [pc, #28]	; (ac18 <GrowlCb+0x48>)
    abfa:	0011      	movs	r1, r2
    abfc:	0018      	movs	r0, r3
    abfe:	4b07      	ldr	r3, [pc, #28]	; (ac1c <GrowlCb+0x4c>)
    ac00:	4798      	blx	r3
	growl_msg_tmr = 0; //reset msg timer for growl response
    ac02:	4b07      	ldr	r3, [pc, #28]	; (ac20 <GrowlCb+0x50>)
    ac04:	2200      	movs	r2, #0
    ac06:	601a      	str	r2, [r3, #0]
}
    ac08:	46c0      	nop			; (mov r8, r8)
    ac0a:	46bd      	mov	sp, r7
    ac0c:	b002      	add	sp, #8
    ac0e:	bd80      	pop	{r7, pc}
    ac10:	0000d8cc 	.word	0x0000d8cc
    ac14:	0000b1a1 	.word	0x0000b1a1
    ac18:	0000d8ec 	.word	0x0000d8ec
    ac1c:	0000b081 	.word	0x0000b081
    ac20:	200003cc 	.word	0x200003cc

0000ac24 <Service_1hr>:

void Service_1hr(void)
{
    ac24:	b580      	push	{r7, lr}
    ac26:	af00      	add	r7, sp, #0
	static uint8 heartbeat_tmr;
	if(heartbeat_tmr)
    ac28:	4b0d      	ldr	r3, [pc, #52]	; (ac60 <Service_1hr+0x3c>)
    ac2a:	781b      	ldrb	r3, [r3, #0]
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d006      	beq.n	ac3e <Service_1hr+0x1a>
		heartbeat_tmr--;
    ac30:	4b0b      	ldr	r3, [pc, #44]	; (ac60 <Service_1hr+0x3c>)
    ac32:	781b      	ldrb	r3, [r3, #0]
    ac34:	3b01      	subs	r3, #1
    ac36:	b2da      	uxtb	r2, r3
    ac38:	4b09      	ldr	r3, [pc, #36]	; (ac60 <Service_1hr+0x3c>)
    ac3a:	701a      	strb	r2, [r3, #0]
	{
		if(connection_state)
			send_prowl("Heartbeat", "24Hr Heartbeat Ping");	
		heartbeat_tmr = 23; //heartbeat every 24hrs
	}	
}
    ac3c:	e00c      	b.n	ac58 <Service_1hr+0x34>
	static uint8 heartbeat_tmr;
	if(heartbeat_tmr)
		heartbeat_tmr--;
	else
	{
		if(connection_state)
    ac3e:	4b09      	ldr	r3, [pc, #36]	; (ac64 <Service_1hr+0x40>)
    ac40:	781b      	ldrb	r3, [r3, #0]
    ac42:	2b00      	cmp	r3, #0
    ac44:	d005      	beq.n	ac52 <Service_1hr+0x2e>
			send_prowl("Heartbeat", "24Hr Heartbeat Ping");	
    ac46:	4a08      	ldr	r2, [pc, #32]	; (ac68 <Service_1hr+0x44>)
    ac48:	4b08      	ldr	r3, [pc, #32]	; (ac6c <Service_1hr+0x48>)
    ac4a:	0011      	movs	r1, r2
    ac4c:	0018      	movs	r0, r3
    ac4e:	4b08      	ldr	r3, [pc, #32]	; (ac70 <Service_1hr+0x4c>)
    ac50:	4798      	blx	r3
		heartbeat_tmr = 23; //heartbeat every 24hrs
    ac52:	4b03      	ldr	r3, [pc, #12]	; (ac60 <Service_1hr+0x3c>)
    ac54:	2217      	movs	r2, #23
    ac56:	701a      	strb	r2, [r3, #0]
	}	
}
    ac58:	46c0      	nop			; (mov r8, r8)
    ac5a:	46bd      	mov	sp, r7
    ac5c:	bd80      	pop	{r7, pc}
    ac5e:	46c0      	nop			; (mov r8, r8)
    ac60:	200001c0 	.word	0x200001c0
    ac64:	200003d1 	.word	0x200003d1
    ac68:	0000d908 	.word	0x0000d908
    ac6c:	0000d91c 	.word	0x0000d91c
    ac70:	0000a9c5 	.word	0x0000a9c5

0000ac74 <Service_1s>:

void Service_1s(void)
{
    ac74:	b580      	push	{r7, lr}
    ac76:	af00      	add	r7, sp, #0
	static uint16 hour_tmr;
	seconds_alive_cnt++;
    ac78:	4b0b      	ldr	r3, [pc, #44]	; (aca8 <Service_1s+0x34>)
    ac7a:	681b      	ldr	r3, [r3, #0]
    ac7c:	1c5a      	adds	r2, r3, #1
    ac7e:	4b0a      	ldr	r3, [pc, #40]	; (aca8 <Service_1s+0x34>)
    ac80:	601a      	str	r2, [r3, #0]
	
	if(hour_tmr)
    ac82:	4b0a      	ldr	r3, [pc, #40]	; (acac <Service_1s+0x38>)
    ac84:	881b      	ldrh	r3, [r3, #0]
    ac86:	2b00      	cmp	r3, #0
    ac88:	d006      	beq.n	ac98 <Service_1s+0x24>
	{
		hour_tmr--;
    ac8a:	4b08      	ldr	r3, [pc, #32]	; (acac <Service_1s+0x38>)
    ac8c:	881b      	ldrh	r3, [r3, #0]
    ac8e:	3b01      	subs	r3, #1
    ac90:	b29a      	uxth	r2, r3
    ac92:	4b06      	ldr	r3, [pc, #24]	; (acac <Service_1s+0x38>)
    ac94:	801a      	strh	r2, [r3, #0]
	else
	{
		hour_tmr = 60 * 60 - 1;
		Service_1hr();
	}
}
    ac96:	e004      	b.n	aca2 <Service_1s+0x2e>
	{
		hour_tmr--;
	}
	else
	{
		hour_tmr = 60 * 60 - 1;
    ac98:	4b04      	ldr	r3, [pc, #16]	; (acac <Service_1s+0x38>)
    ac9a:	4a05      	ldr	r2, [pc, #20]	; (acb0 <Service_1s+0x3c>)
    ac9c:	801a      	strh	r2, [r3, #0]
		Service_1hr();
    ac9e:	4b05      	ldr	r3, [pc, #20]	; (acb4 <Service_1s+0x40>)
    aca0:	4798      	blx	r3
	}
}
    aca2:	46c0      	nop			; (mov r8, r8)
    aca4:	46bd      	mov	sp, r7
    aca6:	bd80      	pop	{r7, pc}
    aca8:	20000370 	.word	0x20000370
    acac:	200001c2 	.word	0x200001c2
    acb0:	00000e0f 	.word	0x00000e0f
    acb4:	0000ac25 	.word	0x0000ac25

0000acb8 <TimerCallback>:

void TimerCallback(void) //called every .25s
{
    acb8:	b580      	push	{r7, lr}
    acba:	af00      	add	r7, sp, #0
	static uint8_t second_tmr;
	if(second_tmr)
    acbc:	4b12      	ldr	r3, [pc, #72]	; (ad08 <TimerCallback+0x50>)
    acbe:	781b      	ldrb	r3, [r3, #0]
    acc0:	2b00      	cmp	r3, #0
    acc2:	d006      	beq.n	acd2 <TimerCallback+0x1a>
	{
		second_tmr--;
    acc4:	4b10      	ldr	r3, [pc, #64]	; (ad08 <TimerCallback+0x50>)
    acc6:	781b      	ldrb	r3, [r3, #0]
    acc8:	3b01      	subs	r3, #1
    acca:	b2da      	uxtb	r2, r3
    accc:	4b0e      	ldr	r3, [pc, #56]	; (ad08 <TimerCallback+0x50>)
    acce:	701a      	strb	r2, [r3, #0]
    acd0:	e005      	b.n	acde <TimerCallback+0x26>
	}
	else
	{
		second_tmr = 3;
    acd2:	4b0d      	ldr	r3, [pc, #52]	; (ad08 <TimerCallback+0x50>)
    acd4:	2203      	movs	r2, #3
    acd6:	701a      	strb	r2, [r3, #0]
		service_1s_flag = 1; //let main thread know to call Service1s()	
    acd8:	4b0c      	ldr	r3, [pc, #48]	; (ad0c <TimerCallback+0x54>)
    acda:	2201      	movs	r2, #1
    acdc:	701a      	strb	r2, [r3, #0]
	}
	//Place any code that needs to be serviced at this interval here:
	if(growl_msg_tmr)
    acde:	4b0c      	ldr	r3, [pc, #48]	; (ad10 <TimerCallback+0x58>)
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	2b00      	cmp	r3, #0
    ace4:	d00d      	beq.n	ad02 <TimerCallback+0x4a>
	{
		growl_msg_tmr--;
    ace6:	4b0a      	ldr	r3, [pc, #40]	; (ad10 <TimerCallback+0x58>)
    ace8:	681b      	ldr	r3, [r3, #0]
    acea:	1e5a      	subs	r2, r3, #1
    acec:	4b08      	ldr	r3, [pc, #32]	; (ad10 <TimerCallback+0x58>)
    acee:	601a      	str	r2, [r3, #0]
		putchar('.');
    acf0:	4b08      	ldr	r3, [pc, #32]	; (ad14 <TimerCallback+0x5c>)
    acf2:	6818      	ldr	r0, [r3, #0]
    acf4:	4b07      	ldr	r3, [pc, #28]	; (ad14 <TimerCallback+0x5c>)
    acf6:	681b      	ldr	r3, [r3, #0]
    acf8:	689b      	ldr	r3, [r3, #8]
    acfa:	001a      	movs	r2, r3
    acfc:	212e      	movs	r1, #46	; 0x2e
    acfe:	4b06      	ldr	r3, [pc, #24]	; (ad18 <TimerCallback+0x60>)
    ad00:	4798      	blx	r3
	}
}
    ad02:	46c0      	nop			; (mov r8, r8)
    ad04:	46bd      	mov	sp, r7
    ad06:	bd80      	pop	{r7, pc}
    ad08:	200001c4 	.word	0x200001c4
    ad0c:	200003d0 	.word	0x200003d0
    ad10:	200003cc 	.word	0x200003cc
    ad14:	2000007c 	.word	0x2000007c
    ad18:	0000a46d 	.word	0x0000a46d

0000ad1c <main>:
 * \brief Main application function.
 *
 * \return program return value.
 */
int main(void)
{
    ad1c:	b590      	push	{r4, r7, lr}
    ad1e:	b08b      	sub	sp, #44	; 0x2c
    ad20:	af02      	add	r7, sp, #8
	tstrWifiInitParam param;
	int8_t ret;
	uint8 prev_pin_state = pin_state;
    ad22:	231f      	movs	r3, #31
    ad24:	18fb      	adds	r3, r7, r3
    ad26:	4a41      	ldr	r2, [pc, #260]	; (ae2c <main+0x110>)
    ad28:	7812      	ldrb	r2, [r2, #0]
    ad2a:	701a      	strb	r2, [r3, #0]
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
#endif

	/* Initialize the board. */
	system_init();
    ad2c:	4b40      	ldr	r3, [pc, #256]	; (ae30 <main+0x114>)
    ad2e:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    ad30:	4b40      	ldr	r3, [pc, #256]	; (ae34 <main+0x118>)
    ad32:	4798      	blx	r3
	printf(PROWLER_STR);
    ad34:	4b40      	ldr	r3, [pc, #256]	; (ae38 <main+0x11c>)
    ad36:	0018      	movs	r0, r3
    ad38:	4b40      	ldr	r3, [pc, #256]	; (ae3c <main+0x120>)
    ad3a:	4798      	blx	r3
	printf(STRING_HEADER);
    ad3c:	4b40      	ldr	r3, [pc, #256]	; (ae40 <main+0x124>)
    ad3e:	0018      	movs	r0, r3
    ad40:	4b3e      	ldr	r3, [pc, #248]	; (ae3c <main+0x120>)
    ad42:	4798      	blx	r3
	
	configure_tc();
    ad44:	4b3f      	ldr	r3, [pc, #252]	; (ae44 <main+0x128>)
    ad46:	4798      	blx	r3
	configure_tc_callbacks();
    ad48:	4b3f      	ldr	r3, [pc, #252]	; (ae48 <main+0x12c>)
    ad4a:	4798      	blx	r3

	//port_pin_set_output_level(LED0_PIN, 1);
	pin_state = port_pin_get_input_level(BUTTON_0_PIN);
    ad4c:	200f      	movs	r0, #15
    ad4e:	4b3f      	ldr	r3, [pc, #252]	; (ae4c <main+0x130>)
    ad50:	4798      	blx	r3
    ad52:	0003      	movs	r3, r0
    ad54:	001a      	movs	r2, r3
    ad56:	4b35      	ldr	r3, [pc, #212]	; (ae2c <main+0x110>)
    ad58:	701a      	strb	r2, [r3, #0]
	prev_pin_state = pin_state;
    ad5a:	231f      	movs	r3, #31
    ad5c:	18fb      	adds	r3, r7, r3
    ad5e:	4a33      	ldr	r2, [pc, #204]	; (ae2c <main+0x110>)
    ad60:	7812      	ldrb	r2, [r2, #0]
    ad62:	701a      	strb	r2, [r3, #0]
	//Configure interupt for SW0
	configure_extint_channel();
    ad64:	4b3a      	ldr	r3, [pc, #232]	; (ae50 <main+0x134>)
    ad66:	4798      	blx	r3
	configure_extint_callbacks();
    ad68:	4b3a      	ldr	r3, [pc, #232]	; (ae54 <main+0x138>)
    ad6a:	4798      	blx	r3
	system_interrupt_enable_global();
    ad6c:	4b3a      	ldr	r3, [pc, #232]	; (ae58 <main+0x13c>)
    ad6e:	4798      	blx	r3
	
	/* Initialize the BSP. */
	nm_bsp_init();
    ad70:	4b3a      	ldr	r3, [pc, #232]	; (ae5c <main+0x140>)
    ad72:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    ad74:	1d3b      	adds	r3, r7, #4
    ad76:	2218      	movs	r2, #24
    ad78:	2100      	movs	r1, #0
    ad7a:	0018      	movs	r0, r3
    ad7c:	4b38      	ldr	r3, [pc, #224]	; (ae60 <main+0x144>)
    ad7e:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    ad80:	1d3b      	adds	r3, r7, #4
    ad82:	4a38      	ldr	r2, [pc, #224]	; (ae64 <main+0x148>)
    ad84:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
    ad86:	231e      	movs	r3, #30
    ad88:	18fc      	adds	r4, r7, r3
    ad8a:	1d3b      	adds	r3, r7, #4
    ad8c:	0018      	movs	r0, r3
    ad8e:	4b36      	ldr	r3, [pc, #216]	; (ae68 <main+0x14c>)
    ad90:	4798      	blx	r3
    ad92:	0003      	movs	r3, r0
    ad94:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) 
    ad96:	231e      	movs	r3, #30
    ad98:	18fb      	adds	r3, r7, r3
    ad9a:	781b      	ldrb	r3, [r3, #0]
    ad9c:	b25b      	sxtb	r3, r3
    ad9e:	2b00      	cmp	r3, #0
    ada0:	d009      	beq.n	adb6 <main+0x9a>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    ada2:	231e      	movs	r3, #30
    ada4:	18fb      	adds	r3, r7, r3
    ada6:	2200      	movs	r2, #0
    ada8:	569a      	ldrsb	r2, [r3, r2]
    adaa:	4b30      	ldr	r3, [pc, #192]	; (ae6c <main+0x150>)
    adac:	0011      	movs	r1, r2
    adae:	0018      	movs	r0, r3
    adb0:	4b2f      	ldr	r3, [pc, #188]	; (ae70 <main+0x154>)
    adb2:	4798      	blx	r3
		while (1);
    adb4:	e7fe      	b.n	adb4 <main+0x98>

	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
	printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
#else
	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    adb6:	4a2f      	ldr	r2, [pc, #188]	; (ae74 <main+0x158>)
    adb8:	482f      	ldr	r0, [pc, #188]	; (ae78 <main+0x15c>)
    adba:	23ff      	movs	r3, #255	; 0xff
    adbc:	9300      	str	r3, [sp, #0]
    adbe:	0013      	movs	r3, r2
    adc0:	2202      	movs	r2, #2
    adc2:	2108      	movs	r1, #8
    adc4:	4c2d      	ldr	r4, [pc, #180]	; (ae7c <main+0x160>)
    adc6:	47a0      	blx	r4
#endif

	while (1) 
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
    adc8:	46c0      	nop			; (mov r8, r8)
    adca:	2000      	movs	r0, #0
    adcc:	4b2c      	ldr	r3, [pc, #176]	; (ae80 <main+0x164>)
    adce:	4798      	blx	r3
    add0:	1e03      	subs	r3, r0, #0
    add2:	d1fa      	bne.n	adca <main+0xae>
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
    add4:	4b15      	ldr	r3, [pc, #84]	; (ae2c <main+0x110>)
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	221f      	movs	r2, #31
    adda:	18ba      	adds	r2, r7, r2
    addc:	7812      	ldrb	r2, [r2, #0]
    adde:	429a      	cmp	r2, r3
    ade0:	d019      	beq.n	ae16 <main+0xfa>
    ade2:	4b28      	ldr	r3, [pc, #160]	; (ae84 <main+0x168>)
    ade4:	681b      	ldr	r3, [r3, #0]
    ade6:	2b00      	cmp	r3, #0
    ade8:	d115      	bne.n	ae16 <main+0xfa>
		{
			prev_pin_state = pin_state;
    adea:	231f      	movs	r3, #31
    adec:	18fb      	adds	r3, r7, r3
    adee:	4a0f      	ldr	r2, [pc, #60]	; (ae2c <main+0x110>)
    adf0:	7812      	ldrb	r2, [r2, #0]
    adf2:	701a      	strb	r2, [r3, #0]
			if(pin_state)
    adf4:	4b0d      	ldr	r3, [pc, #52]	; (ae2c <main+0x110>)
    adf6:	781b      	ldrb	r3, [r3, #0]
    adf8:	2b00      	cmp	r3, #0
    adfa:	d006      	beq.n	ae0a <main+0xee>
			{
				send_prowl("State Change", "Opened");
    adfc:	4a22      	ldr	r2, [pc, #136]	; (ae88 <main+0x16c>)
    adfe:	4b23      	ldr	r3, [pc, #140]	; (ae8c <main+0x170>)
    ae00:	0011      	movs	r1, r2
    ae02:	0018      	movs	r0, r3
    ae04:	4b22      	ldr	r3, [pc, #136]	; (ae90 <main+0x174>)
    ae06:	4798      	blx	r3
    ae08:	e005      	b.n	ae16 <main+0xfa>
			}
			else
			{
				send_prowl("State Change", "Closed");
    ae0a:	4a22      	ldr	r2, [pc, #136]	; (ae94 <main+0x178>)
    ae0c:	4b1f      	ldr	r3, [pc, #124]	; (ae8c <main+0x170>)
    ae0e:	0011      	movs	r1, r2
    ae10:	0018      	movs	r0, r3
    ae12:	4b1f      	ldr	r3, [pc, #124]	; (ae90 <main+0x174>)
    ae14:	4798      	blx	r3
			}
		}
		if(service_1s_flag)
    ae16:	4b20      	ldr	r3, [pc, #128]	; (ae98 <main+0x17c>)
    ae18:	781b      	ldrb	r3, [r3, #0]
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d0d4      	beq.n	adc8 <main+0xac>
		{
			service_1s_flag = 0;
    ae1e:	4b1e      	ldr	r3, [pc, #120]	; (ae98 <main+0x17c>)
    ae20:	2200      	movs	r2, #0
    ae22:	701a      	strb	r2, [r3, #0]
			Service_1s();
    ae24:	4b1d      	ldr	r3, [pc, #116]	; (ae9c <main+0x180>)
    ae26:	4798      	blx	r3
		}
	}
    ae28:	e7ce      	b.n	adc8 <main+0xac>
    ae2a:	46c0      	nop			; (mov r8, r8)
    ae2c:	2000036c 	.word	0x2000036c
    ae30:	00009445 	.word	0x00009445
    ae34:	0000a8cd 	.word	0x0000a8cd
    ae38:	0000d928 	.word	0x0000d928
    ae3c:	0000b1a1 	.word	0x0000b1a1
    ae40:	0000da38 	.word	0x0000da38
    ae44:	00000a09 	.word	0x00000a09
    ae48:	00000a75 	.word	0x00000a75
    ae4c:	0000a555 	.word	0x0000a555
    ae50:	0000a841 	.word	0x0000a841
    ae54:	0000a881 	.word	0x0000a881
    ae58:	0000a599 	.word	0x0000a599
    ae5c:	00000cd9 	.word	0x00000cd9
    ae60:	0000b06f 	.word	0x0000b06f
    ae64:	0000aa95 	.word	0x0000aa95
    ae68:	000028a1 	.word	0x000028a1
    ae6c:	0000da94 	.word	0x0000da94
    ae70:	0000b081 	.word	0x0000b081
    ae74:	0000dabc 	.word	0x0000dabc
    ae78:	0000dacc 	.word	0x0000dacc
    ae7c:	00002a49 	.word	0x00002a49
    ae80:	00002a2d 	.word	0x00002a2d
    ae84:	200003cc 	.word	0x200003cc
    ae88:	0000dad4 	.word	0x0000dad4
    ae8c:	0000dadc 	.word	0x0000dadc
    ae90:	0000a9c5 	.word	0x0000a9c5
    ae94:	0000daec 	.word	0x0000daec
    ae98:	200003d0 	.word	0x200003d0
    ae9c:	0000ac75 	.word	0x0000ac75

0000aea0 <__aeabi_uidiv>:
    aea0:	2200      	movs	r2, #0
    aea2:	0843      	lsrs	r3, r0, #1
    aea4:	428b      	cmp	r3, r1
    aea6:	d374      	bcc.n	af92 <__aeabi_uidiv+0xf2>
    aea8:	0903      	lsrs	r3, r0, #4
    aeaa:	428b      	cmp	r3, r1
    aeac:	d35f      	bcc.n	af6e <__aeabi_uidiv+0xce>
    aeae:	0a03      	lsrs	r3, r0, #8
    aeb0:	428b      	cmp	r3, r1
    aeb2:	d344      	bcc.n	af3e <__aeabi_uidiv+0x9e>
    aeb4:	0b03      	lsrs	r3, r0, #12
    aeb6:	428b      	cmp	r3, r1
    aeb8:	d328      	bcc.n	af0c <__aeabi_uidiv+0x6c>
    aeba:	0c03      	lsrs	r3, r0, #16
    aebc:	428b      	cmp	r3, r1
    aebe:	d30d      	bcc.n	aedc <__aeabi_uidiv+0x3c>
    aec0:	22ff      	movs	r2, #255	; 0xff
    aec2:	0209      	lsls	r1, r1, #8
    aec4:	ba12      	rev	r2, r2
    aec6:	0c03      	lsrs	r3, r0, #16
    aec8:	428b      	cmp	r3, r1
    aeca:	d302      	bcc.n	aed2 <__aeabi_uidiv+0x32>
    aecc:	1212      	asrs	r2, r2, #8
    aece:	0209      	lsls	r1, r1, #8
    aed0:	d065      	beq.n	af9e <__aeabi_uidiv+0xfe>
    aed2:	0b03      	lsrs	r3, r0, #12
    aed4:	428b      	cmp	r3, r1
    aed6:	d319      	bcc.n	af0c <__aeabi_uidiv+0x6c>
    aed8:	e000      	b.n	aedc <__aeabi_uidiv+0x3c>
    aeda:	0a09      	lsrs	r1, r1, #8
    aedc:	0bc3      	lsrs	r3, r0, #15
    aede:	428b      	cmp	r3, r1
    aee0:	d301      	bcc.n	aee6 <__aeabi_uidiv+0x46>
    aee2:	03cb      	lsls	r3, r1, #15
    aee4:	1ac0      	subs	r0, r0, r3
    aee6:	4152      	adcs	r2, r2
    aee8:	0b83      	lsrs	r3, r0, #14
    aeea:	428b      	cmp	r3, r1
    aeec:	d301      	bcc.n	aef2 <__aeabi_uidiv+0x52>
    aeee:	038b      	lsls	r3, r1, #14
    aef0:	1ac0      	subs	r0, r0, r3
    aef2:	4152      	adcs	r2, r2
    aef4:	0b43      	lsrs	r3, r0, #13
    aef6:	428b      	cmp	r3, r1
    aef8:	d301      	bcc.n	aefe <__aeabi_uidiv+0x5e>
    aefa:	034b      	lsls	r3, r1, #13
    aefc:	1ac0      	subs	r0, r0, r3
    aefe:	4152      	adcs	r2, r2
    af00:	0b03      	lsrs	r3, r0, #12
    af02:	428b      	cmp	r3, r1
    af04:	d301      	bcc.n	af0a <__aeabi_uidiv+0x6a>
    af06:	030b      	lsls	r3, r1, #12
    af08:	1ac0      	subs	r0, r0, r3
    af0a:	4152      	adcs	r2, r2
    af0c:	0ac3      	lsrs	r3, r0, #11
    af0e:	428b      	cmp	r3, r1
    af10:	d301      	bcc.n	af16 <__aeabi_uidiv+0x76>
    af12:	02cb      	lsls	r3, r1, #11
    af14:	1ac0      	subs	r0, r0, r3
    af16:	4152      	adcs	r2, r2
    af18:	0a83      	lsrs	r3, r0, #10
    af1a:	428b      	cmp	r3, r1
    af1c:	d301      	bcc.n	af22 <__aeabi_uidiv+0x82>
    af1e:	028b      	lsls	r3, r1, #10
    af20:	1ac0      	subs	r0, r0, r3
    af22:	4152      	adcs	r2, r2
    af24:	0a43      	lsrs	r3, r0, #9
    af26:	428b      	cmp	r3, r1
    af28:	d301      	bcc.n	af2e <__aeabi_uidiv+0x8e>
    af2a:	024b      	lsls	r3, r1, #9
    af2c:	1ac0      	subs	r0, r0, r3
    af2e:	4152      	adcs	r2, r2
    af30:	0a03      	lsrs	r3, r0, #8
    af32:	428b      	cmp	r3, r1
    af34:	d301      	bcc.n	af3a <__aeabi_uidiv+0x9a>
    af36:	020b      	lsls	r3, r1, #8
    af38:	1ac0      	subs	r0, r0, r3
    af3a:	4152      	adcs	r2, r2
    af3c:	d2cd      	bcs.n	aeda <__aeabi_uidiv+0x3a>
    af3e:	09c3      	lsrs	r3, r0, #7
    af40:	428b      	cmp	r3, r1
    af42:	d301      	bcc.n	af48 <__aeabi_uidiv+0xa8>
    af44:	01cb      	lsls	r3, r1, #7
    af46:	1ac0      	subs	r0, r0, r3
    af48:	4152      	adcs	r2, r2
    af4a:	0983      	lsrs	r3, r0, #6
    af4c:	428b      	cmp	r3, r1
    af4e:	d301      	bcc.n	af54 <__aeabi_uidiv+0xb4>
    af50:	018b      	lsls	r3, r1, #6
    af52:	1ac0      	subs	r0, r0, r3
    af54:	4152      	adcs	r2, r2
    af56:	0943      	lsrs	r3, r0, #5
    af58:	428b      	cmp	r3, r1
    af5a:	d301      	bcc.n	af60 <__aeabi_uidiv+0xc0>
    af5c:	014b      	lsls	r3, r1, #5
    af5e:	1ac0      	subs	r0, r0, r3
    af60:	4152      	adcs	r2, r2
    af62:	0903      	lsrs	r3, r0, #4
    af64:	428b      	cmp	r3, r1
    af66:	d301      	bcc.n	af6c <__aeabi_uidiv+0xcc>
    af68:	010b      	lsls	r3, r1, #4
    af6a:	1ac0      	subs	r0, r0, r3
    af6c:	4152      	adcs	r2, r2
    af6e:	08c3      	lsrs	r3, r0, #3
    af70:	428b      	cmp	r3, r1
    af72:	d301      	bcc.n	af78 <__aeabi_uidiv+0xd8>
    af74:	00cb      	lsls	r3, r1, #3
    af76:	1ac0      	subs	r0, r0, r3
    af78:	4152      	adcs	r2, r2
    af7a:	0883      	lsrs	r3, r0, #2
    af7c:	428b      	cmp	r3, r1
    af7e:	d301      	bcc.n	af84 <__aeabi_uidiv+0xe4>
    af80:	008b      	lsls	r3, r1, #2
    af82:	1ac0      	subs	r0, r0, r3
    af84:	4152      	adcs	r2, r2
    af86:	0843      	lsrs	r3, r0, #1
    af88:	428b      	cmp	r3, r1
    af8a:	d301      	bcc.n	af90 <__aeabi_uidiv+0xf0>
    af8c:	004b      	lsls	r3, r1, #1
    af8e:	1ac0      	subs	r0, r0, r3
    af90:	4152      	adcs	r2, r2
    af92:	1a41      	subs	r1, r0, r1
    af94:	d200      	bcs.n	af98 <__aeabi_uidiv+0xf8>
    af96:	4601      	mov	r1, r0
    af98:	4152      	adcs	r2, r2
    af9a:	4610      	mov	r0, r2
    af9c:	4770      	bx	lr
    af9e:	e7ff      	b.n	afa0 <__aeabi_uidiv+0x100>
    afa0:	b501      	push	{r0, lr}
    afa2:	2000      	movs	r0, #0
    afa4:	f000 f806 	bl	afb4 <__aeabi_idiv0>
    afa8:	bd02      	pop	{r1, pc}
    afaa:	46c0      	nop			; (mov r8, r8)

0000afac <__aeabi_uidivmod>:
    afac:	2900      	cmp	r1, #0
    afae:	d0f7      	beq.n	afa0 <__aeabi_uidiv+0x100>
    afb0:	e776      	b.n	aea0 <__aeabi_uidiv>
    afb2:	4770      	bx	lr

0000afb4 <__aeabi_idiv0>:
    afb4:	4770      	bx	lr
    afb6:	46c0      	nop			; (mov r8, r8)

0000afb8 <__aeabi_lmul>:
    afb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    afba:	464f      	mov	r7, r9
    afbc:	4646      	mov	r6, r8
    afbe:	b4c0      	push	{r6, r7}
    afc0:	0416      	lsls	r6, r2, #16
    afc2:	0c36      	lsrs	r6, r6, #16
    afc4:	4699      	mov	r9, r3
    afc6:	0033      	movs	r3, r6
    afc8:	0405      	lsls	r5, r0, #16
    afca:	0c2c      	lsrs	r4, r5, #16
    afcc:	0c07      	lsrs	r7, r0, #16
    afce:	0c15      	lsrs	r5, r2, #16
    afd0:	4363      	muls	r3, r4
    afd2:	437e      	muls	r6, r7
    afd4:	436f      	muls	r7, r5
    afd6:	4365      	muls	r5, r4
    afd8:	0c1c      	lsrs	r4, r3, #16
    afda:	19ad      	adds	r5, r5, r6
    afdc:	1964      	adds	r4, r4, r5
    afde:	469c      	mov	ip, r3
    afe0:	42a6      	cmp	r6, r4
    afe2:	d903      	bls.n	afec <__aeabi_lmul+0x34>
    afe4:	2380      	movs	r3, #128	; 0x80
    afe6:	025b      	lsls	r3, r3, #9
    afe8:	4698      	mov	r8, r3
    afea:	4447      	add	r7, r8
    afec:	4663      	mov	r3, ip
    afee:	0c25      	lsrs	r5, r4, #16
    aff0:	19ef      	adds	r7, r5, r7
    aff2:	041d      	lsls	r5, r3, #16
    aff4:	464b      	mov	r3, r9
    aff6:	434a      	muls	r2, r1
    aff8:	4343      	muls	r3, r0
    affa:	0c2d      	lsrs	r5, r5, #16
    affc:	0424      	lsls	r4, r4, #16
    affe:	1964      	adds	r4, r4, r5
    b000:	1899      	adds	r1, r3, r2
    b002:	19c9      	adds	r1, r1, r7
    b004:	0020      	movs	r0, r4
    b006:	bc0c      	pop	{r2, r3}
    b008:	4690      	mov	r8, r2
    b00a:	4699      	mov	r9, r3
    b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b00e:	46c0      	nop			; (mov r8, r8)

0000b010 <__libc_init_array>:
    b010:	4b0e      	ldr	r3, [pc, #56]	; (b04c <__libc_init_array+0x3c>)
    b012:	b570      	push	{r4, r5, r6, lr}
    b014:	2500      	movs	r5, #0
    b016:	001e      	movs	r6, r3
    b018:	4c0d      	ldr	r4, [pc, #52]	; (b050 <__libc_init_array+0x40>)
    b01a:	1ae4      	subs	r4, r4, r3
    b01c:	10a4      	asrs	r4, r4, #2
    b01e:	42a5      	cmp	r5, r4
    b020:	d004      	beq.n	b02c <__libc_init_array+0x1c>
    b022:	00ab      	lsls	r3, r5, #2
    b024:	58f3      	ldr	r3, [r6, r3]
    b026:	4798      	blx	r3
    b028:	3501      	adds	r5, #1
    b02a:	e7f8      	b.n	b01e <__libc_init_array+0xe>
    b02c:	f002 fdb0 	bl	db90 <_init>
    b030:	4b08      	ldr	r3, [pc, #32]	; (b054 <__libc_init_array+0x44>)
    b032:	2500      	movs	r5, #0
    b034:	001e      	movs	r6, r3
    b036:	4c08      	ldr	r4, [pc, #32]	; (b058 <__libc_init_array+0x48>)
    b038:	1ae4      	subs	r4, r4, r3
    b03a:	10a4      	asrs	r4, r4, #2
    b03c:	42a5      	cmp	r5, r4
    b03e:	d004      	beq.n	b04a <__libc_init_array+0x3a>
    b040:	00ab      	lsls	r3, r5, #2
    b042:	58f3      	ldr	r3, [r6, r3]
    b044:	4798      	blx	r3
    b046:	3501      	adds	r5, #1
    b048:	e7f8      	b.n	b03c <__libc_init_array+0x2c>
    b04a:	bd70      	pop	{r4, r5, r6, pc}
    b04c:	0000db9c 	.word	0x0000db9c
    b050:	0000db9c 	.word	0x0000db9c
    b054:	0000db9c 	.word	0x0000db9c
    b058:	0000dba0 	.word	0x0000dba0

0000b05c <memcpy>:
    b05c:	2300      	movs	r3, #0
    b05e:	b510      	push	{r4, lr}
    b060:	429a      	cmp	r2, r3
    b062:	d003      	beq.n	b06c <memcpy+0x10>
    b064:	5ccc      	ldrb	r4, [r1, r3]
    b066:	54c4      	strb	r4, [r0, r3]
    b068:	3301      	adds	r3, #1
    b06a:	e7f9      	b.n	b060 <memcpy+0x4>
    b06c:	bd10      	pop	{r4, pc}

0000b06e <memset>:
    b06e:	0003      	movs	r3, r0
    b070:	1882      	adds	r2, r0, r2
    b072:	4293      	cmp	r3, r2
    b074:	d002      	beq.n	b07c <memset+0xe>
    b076:	7019      	strb	r1, [r3, #0]
    b078:	3301      	adds	r3, #1
    b07a:	e7fa      	b.n	b072 <memset+0x4>
    b07c:	4770      	bx	lr
	...

0000b080 <iprintf>:
    b080:	b40f      	push	{r0, r1, r2, r3}
    b082:	4b0b      	ldr	r3, [pc, #44]	; (b0b0 <iprintf+0x30>)
    b084:	b513      	push	{r0, r1, r4, lr}
    b086:	681c      	ldr	r4, [r3, #0]
    b088:	2c00      	cmp	r4, #0
    b08a:	d005      	beq.n	b098 <iprintf+0x18>
    b08c:	69a3      	ldr	r3, [r4, #24]
    b08e:	2b00      	cmp	r3, #0
    b090:	d102      	bne.n	b098 <iprintf+0x18>
    b092:	0020      	movs	r0, r4
    b094:	f000 fb40 	bl	b718 <__sinit>
    b098:	ab05      	add	r3, sp, #20
    b09a:	9a04      	ldr	r2, [sp, #16]
    b09c:	68a1      	ldr	r1, [r4, #8]
    b09e:	0020      	movs	r0, r4
    b0a0:	9301      	str	r3, [sp, #4]
    b0a2:	f000 fe5f 	bl	bd64 <_vfiprintf_r>
    b0a6:	bc16      	pop	{r1, r2, r4}
    b0a8:	bc08      	pop	{r3}
    b0aa:	b004      	add	sp, #16
    b0ac:	4718      	bx	r3
    b0ae:	46c0      	nop			; (mov r8, r8)
    b0b0:	2000007c 	.word	0x2000007c

0000b0b4 <putchar>:
    b0b4:	4b08      	ldr	r3, [pc, #32]	; (b0d8 <putchar+0x24>)
    b0b6:	b570      	push	{r4, r5, r6, lr}
    b0b8:	681c      	ldr	r4, [r3, #0]
    b0ba:	0005      	movs	r5, r0
    b0bc:	2c00      	cmp	r4, #0
    b0be:	d005      	beq.n	b0cc <putchar+0x18>
    b0c0:	69a3      	ldr	r3, [r4, #24]
    b0c2:	2b00      	cmp	r3, #0
    b0c4:	d102      	bne.n	b0cc <putchar+0x18>
    b0c6:	0020      	movs	r0, r4
    b0c8:	f000 fb26 	bl	b718 <__sinit>
    b0cc:	0029      	movs	r1, r5
    b0ce:	68a2      	ldr	r2, [r4, #8]
    b0d0:	0020      	movs	r0, r4
    b0d2:	f001 f8f3 	bl	c2bc <_putc_r>
    b0d6:	bd70      	pop	{r4, r5, r6, pc}
    b0d8:	2000007c 	.word	0x2000007c

0000b0dc <_puts_r>:
    b0dc:	b570      	push	{r4, r5, r6, lr}
    b0de:	0005      	movs	r5, r0
    b0e0:	000e      	movs	r6, r1
    b0e2:	2800      	cmp	r0, #0
    b0e4:	d004      	beq.n	b0f0 <_puts_r+0x14>
    b0e6:	6983      	ldr	r3, [r0, #24]
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	d101      	bne.n	b0f0 <_puts_r+0x14>
    b0ec:	f000 fb14 	bl	b718 <__sinit>
    b0f0:	69ab      	ldr	r3, [r5, #24]
    b0f2:	68ac      	ldr	r4, [r5, #8]
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d102      	bne.n	b0fe <_puts_r+0x22>
    b0f8:	0028      	movs	r0, r5
    b0fa:	f000 fb0d 	bl	b718 <__sinit>
    b0fe:	4b25      	ldr	r3, [pc, #148]	; (b194 <_puts_r+0xb8>)
    b100:	429c      	cmp	r4, r3
    b102:	d101      	bne.n	b108 <_puts_r+0x2c>
    b104:	686c      	ldr	r4, [r5, #4]
    b106:	e008      	b.n	b11a <_puts_r+0x3e>
    b108:	4b23      	ldr	r3, [pc, #140]	; (b198 <_puts_r+0xbc>)
    b10a:	429c      	cmp	r4, r3
    b10c:	d101      	bne.n	b112 <_puts_r+0x36>
    b10e:	68ac      	ldr	r4, [r5, #8]
    b110:	e003      	b.n	b11a <_puts_r+0x3e>
    b112:	4b22      	ldr	r3, [pc, #136]	; (b19c <_puts_r+0xc0>)
    b114:	429c      	cmp	r4, r3
    b116:	d100      	bne.n	b11a <_puts_r+0x3e>
    b118:	68ec      	ldr	r4, [r5, #12]
    b11a:	89a3      	ldrh	r3, [r4, #12]
    b11c:	071b      	lsls	r3, r3, #28
    b11e:	d502      	bpl.n	b126 <_puts_r+0x4a>
    b120:	6923      	ldr	r3, [r4, #16]
    b122:	2b00      	cmp	r3, #0
    b124:	d111      	bne.n	b14a <_puts_r+0x6e>
    b126:	0021      	movs	r1, r4
    b128:	0028      	movs	r0, r5
    b12a:	f000 f98b 	bl	b444 <__swsetup_r>
    b12e:	2800      	cmp	r0, #0
    b130:	d00b      	beq.n	b14a <_puts_r+0x6e>
    b132:	2001      	movs	r0, #1
    b134:	4240      	negs	r0, r0
    b136:	e02b      	b.n	b190 <_puts_r+0xb4>
    b138:	3b01      	subs	r3, #1
    b13a:	3601      	adds	r6, #1
    b13c:	60a3      	str	r3, [r4, #8]
    b13e:	2b00      	cmp	r3, #0
    b140:	db08      	blt.n	b154 <_puts_r+0x78>
    b142:	6823      	ldr	r3, [r4, #0]
    b144:	1c5a      	adds	r2, r3, #1
    b146:	6022      	str	r2, [r4, #0]
    b148:	7019      	strb	r1, [r3, #0]
    b14a:	7831      	ldrb	r1, [r6, #0]
    b14c:	68a3      	ldr	r3, [r4, #8]
    b14e:	2900      	cmp	r1, #0
    b150:	d1f2      	bne.n	b138 <_puts_r+0x5c>
    b152:	e00b      	b.n	b16c <_puts_r+0x90>
    b154:	69a2      	ldr	r2, [r4, #24]
    b156:	4293      	cmp	r3, r2
    b158:	db01      	blt.n	b15e <_puts_r+0x82>
    b15a:	290a      	cmp	r1, #10
    b15c:	d1f1      	bne.n	b142 <_puts_r+0x66>
    b15e:	0022      	movs	r2, r4
    b160:	0028      	movs	r0, r5
    b162:	f000 f917 	bl	b394 <__swbuf_r>
    b166:	1c43      	adds	r3, r0, #1
    b168:	d1ef      	bne.n	b14a <_puts_r+0x6e>
    b16a:	e7e2      	b.n	b132 <_puts_r+0x56>
    b16c:	3b01      	subs	r3, #1
    b16e:	60a3      	str	r3, [r4, #8]
    b170:	2b00      	cmp	r3, #0
    b172:	da08      	bge.n	b186 <_puts_r+0xaa>
    b174:	0022      	movs	r2, r4
    b176:	310a      	adds	r1, #10
    b178:	0028      	movs	r0, r5
    b17a:	f000 f90b 	bl	b394 <__swbuf_r>
    b17e:	1c43      	adds	r3, r0, #1
    b180:	d0d7      	beq.n	b132 <_puts_r+0x56>
    b182:	200a      	movs	r0, #10
    b184:	e004      	b.n	b190 <_puts_r+0xb4>
    b186:	200a      	movs	r0, #10
    b188:	6823      	ldr	r3, [r4, #0]
    b18a:	1c5a      	adds	r2, r3, #1
    b18c:	6022      	str	r2, [r4, #0]
    b18e:	7018      	strb	r0, [r3, #0]
    b190:	bd70      	pop	{r4, r5, r6, pc}
    b192:	46c0      	nop			; (mov r8, r8)
    b194:	0000dafc 	.word	0x0000dafc
    b198:	0000db1c 	.word	0x0000db1c
    b19c:	0000db3c 	.word	0x0000db3c

0000b1a0 <puts>:
    b1a0:	b510      	push	{r4, lr}
    b1a2:	4b03      	ldr	r3, [pc, #12]	; (b1b0 <puts+0x10>)
    b1a4:	0001      	movs	r1, r0
    b1a6:	6818      	ldr	r0, [r3, #0]
    b1a8:	f7ff ff98 	bl	b0dc <_puts_r>
    b1ac:	bd10      	pop	{r4, pc}
    b1ae:	46c0      	nop			; (mov r8, r8)
    b1b0:	2000007c 	.word	0x2000007c

0000b1b4 <setbuf>:
    b1b4:	424a      	negs	r2, r1
    b1b6:	414a      	adcs	r2, r1
    b1b8:	2380      	movs	r3, #128	; 0x80
    b1ba:	b510      	push	{r4, lr}
    b1bc:	0052      	lsls	r2, r2, #1
    b1be:	00db      	lsls	r3, r3, #3
    b1c0:	f000 f802 	bl	b1c8 <setvbuf>
    b1c4:	bd10      	pop	{r4, pc}
	...

0000b1c8 <setvbuf>:
    b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ca:	001d      	movs	r5, r3
    b1cc:	4b51      	ldr	r3, [pc, #324]	; (b314 <setvbuf+0x14c>)
    b1ce:	b085      	sub	sp, #20
    b1d0:	681e      	ldr	r6, [r3, #0]
    b1d2:	0004      	movs	r4, r0
    b1d4:	000f      	movs	r7, r1
    b1d6:	9200      	str	r2, [sp, #0]
    b1d8:	2e00      	cmp	r6, #0
    b1da:	d005      	beq.n	b1e8 <setvbuf+0x20>
    b1dc:	69b3      	ldr	r3, [r6, #24]
    b1de:	2b00      	cmp	r3, #0
    b1e0:	d102      	bne.n	b1e8 <setvbuf+0x20>
    b1e2:	0030      	movs	r0, r6
    b1e4:	f000 fa98 	bl	b718 <__sinit>
    b1e8:	4b4b      	ldr	r3, [pc, #300]	; (b318 <setvbuf+0x150>)
    b1ea:	429c      	cmp	r4, r3
    b1ec:	d101      	bne.n	b1f2 <setvbuf+0x2a>
    b1ee:	6874      	ldr	r4, [r6, #4]
    b1f0:	e008      	b.n	b204 <setvbuf+0x3c>
    b1f2:	4b4a      	ldr	r3, [pc, #296]	; (b31c <setvbuf+0x154>)
    b1f4:	429c      	cmp	r4, r3
    b1f6:	d101      	bne.n	b1fc <setvbuf+0x34>
    b1f8:	68b4      	ldr	r4, [r6, #8]
    b1fa:	e003      	b.n	b204 <setvbuf+0x3c>
    b1fc:	4b48      	ldr	r3, [pc, #288]	; (b320 <setvbuf+0x158>)
    b1fe:	429c      	cmp	r4, r3
    b200:	d100      	bne.n	b204 <setvbuf+0x3c>
    b202:	68f4      	ldr	r4, [r6, #12]
    b204:	9b00      	ldr	r3, [sp, #0]
    b206:	2b02      	cmp	r3, #2
    b208:	d005      	beq.n	b216 <setvbuf+0x4e>
    b20a:	2b01      	cmp	r3, #1
    b20c:	d900      	bls.n	b210 <setvbuf+0x48>
    b20e:	e07c      	b.n	b30a <setvbuf+0x142>
    b210:	2d00      	cmp	r5, #0
    b212:	da00      	bge.n	b216 <setvbuf+0x4e>
    b214:	e079      	b.n	b30a <setvbuf+0x142>
    b216:	0021      	movs	r1, r4
    b218:	0030      	movs	r0, r6
    b21a:	f000 fa0f 	bl	b63c <_fflush_r>
    b21e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b220:	2900      	cmp	r1, #0
    b222:	d008      	beq.n	b236 <setvbuf+0x6e>
    b224:	0023      	movs	r3, r4
    b226:	3344      	adds	r3, #68	; 0x44
    b228:	4299      	cmp	r1, r3
    b22a:	d002      	beq.n	b232 <setvbuf+0x6a>
    b22c:	0030      	movs	r0, r6
    b22e:	f000 fb75 	bl	b91c <_free_r>
    b232:	2300      	movs	r3, #0
    b234:	6363      	str	r3, [r4, #52]	; 0x34
    b236:	2300      	movs	r3, #0
    b238:	61a3      	str	r3, [r4, #24]
    b23a:	6063      	str	r3, [r4, #4]
    b23c:	89a3      	ldrh	r3, [r4, #12]
    b23e:	061b      	lsls	r3, r3, #24
    b240:	d503      	bpl.n	b24a <setvbuf+0x82>
    b242:	6921      	ldr	r1, [r4, #16]
    b244:	0030      	movs	r0, r6
    b246:	f000 fb69 	bl	b91c <_free_r>
    b24a:	89a2      	ldrh	r2, [r4, #12]
    b24c:	4b35      	ldr	r3, [pc, #212]	; (b324 <setvbuf+0x15c>)
    b24e:	4013      	ands	r3, r2
    b250:	81a3      	strh	r3, [r4, #12]
    b252:	9b00      	ldr	r3, [sp, #0]
    b254:	2b02      	cmp	r3, #2
    b256:	d021      	beq.n	b29c <setvbuf+0xd4>
    b258:	ab03      	add	r3, sp, #12
    b25a:	aa02      	add	r2, sp, #8
    b25c:	0021      	movs	r1, r4
    b25e:	0030      	movs	r0, r6
    b260:	f000 faee 	bl	b840 <__swhatbuf_r>
    b264:	89a3      	ldrh	r3, [r4, #12]
    b266:	4318      	orrs	r0, r3
    b268:	81a0      	strh	r0, [r4, #12]
    b26a:	2d00      	cmp	r5, #0
    b26c:	d101      	bne.n	b272 <setvbuf+0xaa>
    b26e:	9d02      	ldr	r5, [sp, #8]
    b270:	e001      	b.n	b276 <setvbuf+0xae>
    b272:	2f00      	cmp	r7, #0
    b274:	d125      	bne.n	b2c2 <setvbuf+0xfa>
    b276:	0028      	movs	r0, r5
    b278:	f000 fb46 	bl	b908 <malloc>
    b27c:	9501      	str	r5, [sp, #4]
    b27e:	1e07      	subs	r7, r0, #0
    b280:	d11a      	bne.n	b2b8 <setvbuf+0xf0>
    b282:	9b02      	ldr	r3, [sp, #8]
    b284:	9301      	str	r3, [sp, #4]
    b286:	42ab      	cmp	r3, r5
    b288:	d102      	bne.n	b290 <setvbuf+0xc8>
    b28a:	2001      	movs	r0, #1
    b28c:	4240      	negs	r0, r0
    b28e:	e006      	b.n	b29e <setvbuf+0xd6>
    b290:	9801      	ldr	r0, [sp, #4]
    b292:	f000 fb39 	bl	b908 <malloc>
    b296:	1e07      	subs	r7, r0, #0
    b298:	d10e      	bne.n	b2b8 <setvbuf+0xf0>
    b29a:	e7f6      	b.n	b28a <setvbuf+0xc2>
    b29c:	2000      	movs	r0, #0
    b29e:	2202      	movs	r2, #2
    b2a0:	89a3      	ldrh	r3, [r4, #12]
    b2a2:	4313      	orrs	r3, r2
    b2a4:	81a3      	strh	r3, [r4, #12]
    b2a6:	2300      	movs	r3, #0
    b2a8:	60a3      	str	r3, [r4, #8]
    b2aa:	0023      	movs	r3, r4
    b2ac:	3347      	adds	r3, #71	; 0x47
    b2ae:	6023      	str	r3, [r4, #0]
    b2b0:	6123      	str	r3, [r4, #16]
    b2b2:	2301      	movs	r3, #1
    b2b4:	6163      	str	r3, [r4, #20]
    b2b6:	e02a      	b.n	b30e <setvbuf+0x146>
    b2b8:	2280      	movs	r2, #128	; 0x80
    b2ba:	89a3      	ldrh	r3, [r4, #12]
    b2bc:	9d01      	ldr	r5, [sp, #4]
    b2be:	4313      	orrs	r3, r2
    b2c0:	81a3      	strh	r3, [r4, #12]
    b2c2:	69b3      	ldr	r3, [r6, #24]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	d102      	bne.n	b2ce <setvbuf+0x106>
    b2c8:	0030      	movs	r0, r6
    b2ca:	f000 fa25 	bl	b718 <__sinit>
    b2ce:	9b00      	ldr	r3, [sp, #0]
    b2d0:	2b01      	cmp	r3, #1
    b2d2:	d103      	bne.n	b2dc <setvbuf+0x114>
    b2d4:	89a3      	ldrh	r3, [r4, #12]
    b2d6:	9a00      	ldr	r2, [sp, #0]
    b2d8:	431a      	orrs	r2, r3
    b2da:	81a2      	strh	r2, [r4, #12]
    b2dc:	2308      	movs	r3, #8
    b2de:	89a2      	ldrh	r2, [r4, #12]
    b2e0:	6027      	str	r7, [r4, #0]
    b2e2:	4013      	ands	r3, r2
    b2e4:	6127      	str	r7, [r4, #16]
    b2e6:	6165      	str	r5, [r4, #20]
    b2e8:	1e18      	subs	r0, r3, #0
    b2ea:	d00c      	beq.n	b306 <setvbuf+0x13e>
    b2ec:	2301      	movs	r3, #1
    b2ee:	401a      	ands	r2, r3
    b2f0:	2300      	movs	r3, #0
    b2f2:	1e10      	subs	r0, r2, #0
    b2f4:	4298      	cmp	r0, r3
    b2f6:	d004      	beq.n	b302 <setvbuf+0x13a>
    b2f8:	426d      	negs	r5, r5
    b2fa:	60a3      	str	r3, [r4, #8]
    b2fc:	61a5      	str	r5, [r4, #24]
    b2fe:	0018      	movs	r0, r3
    b300:	e005      	b.n	b30e <setvbuf+0x146>
    b302:	60a5      	str	r5, [r4, #8]
    b304:	e003      	b.n	b30e <setvbuf+0x146>
    b306:	60a3      	str	r3, [r4, #8]
    b308:	e001      	b.n	b30e <setvbuf+0x146>
    b30a:	2001      	movs	r0, #1
    b30c:	4240      	negs	r0, r0
    b30e:	b005      	add	sp, #20
    b310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b312:	46c0      	nop			; (mov r8, r8)
    b314:	2000007c 	.word	0x2000007c
    b318:	0000dafc 	.word	0x0000dafc
    b31c:	0000db1c 	.word	0x0000db1c
    b320:	0000db3c 	.word	0x0000db3c
    b324:	fffff35c 	.word	0xfffff35c

0000b328 <siprintf>:
    b328:	b40e      	push	{r1, r2, r3}
    b32a:	b510      	push	{r4, lr}
    b32c:	b09d      	sub	sp, #116	; 0x74
    b32e:	a902      	add	r1, sp, #8
    b330:	9002      	str	r0, [sp, #8]
    b332:	6108      	str	r0, [r1, #16]
    b334:	480b      	ldr	r0, [pc, #44]	; (b364 <siprintf+0x3c>)
    b336:	2482      	movs	r4, #130	; 0x82
    b338:	6088      	str	r0, [r1, #8]
    b33a:	6148      	str	r0, [r1, #20]
    b33c:	2001      	movs	r0, #1
    b33e:	4240      	negs	r0, r0
    b340:	ab1f      	add	r3, sp, #124	; 0x7c
    b342:	81c8      	strh	r0, [r1, #14]
    b344:	4808      	ldr	r0, [pc, #32]	; (b368 <siprintf+0x40>)
    b346:	cb04      	ldmia	r3!, {r2}
    b348:	00a4      	lsls	r4, r4, #2
    b34a:	6800      	ldr	r0, [r0, #0]
    b34c:	9301      	str	r3, [sp, #4]
    b34e:	818c      	strh	r4, [r1, #12]
    b350:	f000 fbe2 	bl	bb18 <_svfiprintf_r>
    b354:	2300      	movs	r3, #0
    b356:	9a02      	ldr	r2, [sp, #8]
    b358:	7013      	strb	r3, [r2, #0]
    b35a:	b01d      	add	sp, #116	; 0x74
    b35c:	bc10      	pop	{r4}
    b35e:	bc08      	pop	{r3}
    b360:	b003      	add	sp, #12
    b362:	4718      	bx	r3
    b364:	7fffffff 	.word	0x7fffffff
    b368:	2000007c 	.word	0x2000007c

0000b36c <strcat>:
    b36c:	0002      	movs	r2, r0
    b36e:	b510      	push	{r4, lr}
    b370:	7813      	ldrb	r3, [r2, #0]
    b372:	2b00      	cmp	r3, #0
    b374:	d001      	beq.n	b37a <strcat+0xe>
    b376:	3201      	adds	r2, #1
    b378:	e7fa      	b.n	b370 <strcat+0x4>
    b37a:	5ccc      	ldrb	r4, [r1, r3]
    b37c:	54d4      	strb	r4, [r2, r3]
    b37e:	3301      	adds	r3, #1
    b380:	2c00      	cmp	r4, #0
    b382:	d1fa      	bne.n	b37a <strcat+0xe>
    b384:	bd10      	pop	{r4, pc}

0000b386 <strlen>:
    b386:	2300      	movs	r3, #0
    b388:	5cc2      	ldrb	r2, [r0, r3]
    b38a:	3301      	adds	r3, #1
    b38c:	2a00      	cmp	r2, #0
    b38e:	d1fb      	bne.n	b388 <strlen+0x2>
    b390:	1e58      	subs	r0, r3, #1
    b392:	4770      	bx	lr

0000b394 <__swbuf_r>:
    b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b396:	0005      	movs	r5, r0
    b398:	000f      	movs	r7, r1
    b39a:	0014      	movs	r4, r2
    b39c:	2800      	cmp	r0, #0
    b39e:	d004      	beq.n	b3aa <__swbuf_r+0x16>
    b3a0:	6983      	ldr	r3, [r0, #24]
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d101      	bne.n	b3aa <__swbuf_r+0x16>
    b3a6:	f000 f9b7 	bl	b718 <__sinit>
    b3aa:	4b23      	ldr	r3, [pc, #140]	; (b438 <__swbuf_r+0xa4>)
    b3ac:	429c      	cmp	r4, r3
    b3ae:	d101      	bne.n	b3b4 <__swbuf_r+0x20>
    b3b0:	686c      	ldr	r4, [r5, #4]
    b3b2:	e008      	b.n	b3c6 <__swbuf_r+0x32>
    b3b4:	4b21      	ldr	r3, [pc, #132]	; (b43c <__swbuf_r+0xa8>)
    b3b6:	429c      	cmp	r4, r3
    b3b8:	d101      	bne.n	b3be <__swbuf_r+0x2a>
    b3ba:	68ac      	ldr	r4, [r5, #8]
    b3bc:	e003      	b.n	b3c6 <__swbuf_r+0x32>
    b3be:	4b20      	ldr	r3, [pc, #128]	; (b440 <__swbuf_r+0xac>)
    b3c0:	429c      	cmp	r4, r3
    b3c2:	d100      	bne.n	b3c6 <__swbuf_r+0x32>
    b3c4:	68ec      	ldr	r4, [r5, #12]
    b3c6:	69a3      	ldr	r3, [r4, #24]
    b3c8:	60a3      	str	r3, [r4, #8]
    b3ca:	89a3      	ldrh	r3, [r4, #12]
    b3cc:	071b      	lsls	r3, r3, #28
    b3ce:	d50a      	bpl.n	b3e6 <__swbuf_r+0x52>
    b3d0:	6923      	ldr	r3, [r4, #16]
    b3d2:	2b00      	cmp	r3, #0
    b3d4:	d007      	beq.n	b3e6 <__swbuf_r+0x52>
    b3d6:	6823      	ldr	r3, [r4, #0]
    b3d8:	6922      	ldr	r2, [r4, #16]
    b3da:	b2fe      	uxtb	r6, r7
    b3dc:	1a98      	subs	r0, r3, r2
    b3de:	6963      	ldr	r3, [r4, #20]
    b3e0:	4298      	cmp	r0, r3
    b3e2:	db0f      	blt.n	b404 <__swbuf_r+0x70>
    b3e4:	e008      	b.n	b3f8 <__swbuf_r+0x64>
    b3e6:	0021      	movs	r1, r4
    b3e8:	0028      	movs	r0, r5
    b3ea:	f000 f82b 	bl	b444 <__swsetup_r>
    b3ee:	2800      	cmp	r0, #0
    b3f0:	d0f1      	beq.n	b3d6 <__swbuf_r+0x42>
    b3f2:	2001      	movs	r0, #1
    b3f4:	4240      	negs	r0, r0
    b3f6:	e01d      	b.n	b434 <__swbuf_r+0xa0>
    b3f8:	0021      	movs	r1, r4
    b3fa:	0028      	movs	r0, r5
    b3fc:	f000 f91e 	bl	b63c <_fflush_r>
    b400:	2800      	cmp	r0, #0
    b402:	d1f6      	bne.n	b3f2 <__swbuf_r+0x5e>
    b404:	68a3      	ldr	r3, [r4, #8]
    b406:	3001      	adds	r0, #1
    b408:	3b01      	subs	r3, #1
    b40a:	60a3      	str	r3, [r4, #8]
    b40c:	6823      	ldr	r3, [r4, #0]
    b40e:	1c5a      	adds	r2, r3, #1
    b410:	6022      	str	r2, [r4, #0]
    b412:	701f      	strb	r7, [r3, #0]
    b414:	6963      	ldr	r3, [r4, #20]
    b416:	4298      	cmp	r0, r3
    b418:	d005      	beq.n	b426 <__swbuf_r+0x92>
    b41a:	89a3      	ldrh	r3, [r4, #12]
    b41c:	0030      	movs	r0, r6
    b41e:	07db      	lsls	r3, r3, #31
    b420:	d508      	bpl.n	b434 <__swbuf_r+0xa0>
    b422:	2e0a      	cmp	r6, #10
    b424:	d106      	bne.n	b434 <__swbuf_r+0xa0>
    b426:	0021      	movs	r1, r4
    b428:	0028      	movs	r0, r5
    b42a:	f000 f907 	bl	b63c <_fflush_r>
    b42e:	2800      	cmp	r0, #0
    b430:	d1df      	bne.n	b3f2 <__swbuf_r+0x5e>
    b432:	0030      	movs	r0, r6
    b434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b436:	46c0      	nop			; (mov r8, r8)
    b438:	0000dafc 	.word	0x0000dafc
    b43c:	0000db1c 	.word	0x0000db1c
    b440:	0000db3c 	.word	0x0000db3c

0000b444 <__swsetup_r>:
    b444:	4b36      	ldr	r3, [pc, #216]	; (b520 <__swsetup_r+0xdc>)
    b446:	b570      	push	{r4, r5, r6, lr}
    b448:	681d      	ldr	r5, [r3, #0]
    b44a:	0006      	movs	r6, r0
    b44c:	000c      	movs	r4, r1
    b44e:	2d00      	cmp	r5, #0
    b450:	d005      	beq.n	b45e <__swsetup_r+0x1a>
    b452:	69ab      	ldr	r3, [r5, #24]
    b454:	2b00      	cmp	r3, #0
    b456:	d102      	bne.n	b45e <__swsetup_r+0x1a>
    b458:	0028      	movs	r0, r5
    b45a:	f000 f95d 	bl	b718 <__sinit>
    b45e:	4b31      	ldr	r3, [pc, #196]	; (b524 <__swsetup_r+0xe0>)
    b460:	429c      	cmp	r4, r3
    b462:	d101      	bne.n	b468 <__swsetup_r+0x24>
    b464:	686c      	ldr	r4, [r5, #4]
    b466:	e008      	b.n	b47a <__swsetup_r+0x36>
    b468:	4b2f      	ldr	r3, [pc, #188]	; (b528 <__swsetup_r+0xe4>)
    b46a:	429c      	cmp	r4, r3
    b46c:	d101      	bne.n	b472 <__swsetup_r+0x2e>
    b46e:	68ac      	ldr	r4, [r5, #8]
    b470:	e003      	b.n	b47a <__swsetup_r+0x36>
    b472:	4b2e      	ldr	r3, [pc, #184]	; (b52c <__swsetup_r+0xe8>)
    b474:	429c      	cmp	r4, r3
    b476:	d100      	bne.n	b47a <__swsetup_r+0x36>
    b478:	68ec      	ldr	r4, [r5, #12]
    b47a:	220c      	movs	r2, #12
    b47c:	5ea3      	ldrsh	r3, [r4, r2]
    b47e:	b29a      	uxth	r2, r3
    b480:	0711      	lsls	r1, r2, #28
    b482:	d423      	bmi.n	b4cc <__swsetup_r+0x88>
    b484:	06d1      	lsls	r1, r2, #27
    b486:	d407      	bmi.n	b498 <__swsetup_r+0x54>
    b488:	2209      	movs	r2, #9
    b48a:	2001      	movs	r0, #1
    b48c:	6032      	str	r2, [r6, #0]
    b48e:	3237      	adds	r2, #55	; 0x37
    b490:	4313      	orrs	r3, r2
    b492:	81a3      	strh	r3, [r4, #12]
    b494:	4240      	negs	r0, r0
    b496:	e042      	b.n	b51e <__swsetup_r+0xda>
    b498:	0753      	lsls	r3, r2, #29
    b49a:	d513      	bpl.n	b4c4 <__swsetup_r+0x80>
    b49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b49e:	2900      	cmp	r1, #0
    b4a0:	d008      	beq.n	b4b4 <__swsetup_r+0x70>
    b4a2:	0023      	movs	r3, r4
    b4a4:	3344      	adds	r3, #68	; 0x44
    b4a6:	4299      	cmp	r1, r3
    b4a8:	d002      	beq.n	b4b0 <__swsetup_r+0x6c>
    b4aa:	0030      	movs	r0, r6
    b4ac:	f000 fa36 	bl	b91c <_free_r>
    b4b0:	2300      	movs	r3, #0
    b4b2:	6363      	str	r3, [r4, #52]	; 0x34
    b4b4:	2224      	movs	r2, #36	; 0x24
    b4b6:	89a3      	ldrh	r3, [r4, #12]
    b4b8:	4393      	bics	r3, r2
    b4ba:	81a3      	strh	r3, [r4, #12]
    b4bc:	2300      	movs	r3, #0
    b4be:	6063      	str	r3, [r4, #4]
    b4c0:	6923      	ldr	r3, [r4, #16]
    b4c2:	6023      	str	r3, [r4, #0]
    b4c4:	2208      	movs	r2, #8
    b4c6:	89a3      	ldrh	r3, [r4, #12]
    b4c8:	4313      	orrs	r3, r2
    b4ca:	81a3      	strh	r3, [r4, #12]
    b4cc:	6923      	ldr	r3, [r4, #16]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d10b      	bne.n	b4ea <__swsetup_r+0xa6>
    b4d2:	23a0      	movs	r3, #160	; 0xa0
    b4d4:	89a2      	ldrh	r2, [r4, #12]
    b4d6:	009b      	lsls	r3, r3, #2
    b4d8:	4013      	ands	r3, r2
    b4da:	2280      	movs	r2, #128	; 0x80
    b4dc:	0092      	lsls	r2, r2, #2
    b4de:	4293      	cmp	r3, r2
    b4e0:	d003      	beq.n	b4ea <__swsetup_r+0xa6>
    b4e2:	0021      	movs	r1, r4
    b4e4:	0030      	movs	r0, r6
    b4e6:	f000 f9d1 	bl	b88c <__smakebuf_r>
    b4ea:	2301      	movs	r3, #1
    b4ec:	89a2      	ldrh	r2, [r4, #12]
    b4ee:	4013      	ands	r3, r2
    b4f0:	d005      	beq.n	b4fe <__swsetup_r+0xba>
    b4f2:	2300      	movs	r3, #0
    b4f4:	60a3      	str	r3, [r4, #8]
    b4f6:	6963      	ldr	r3, [r4, #20]
    b4f8:	425b      	negs	r3, r3
    b4fa:	61a3      	str	r3, [r4, #24]
    b4fc:	e003      	b.n	b506 <__swsetup_r+0xc2>
    b4fe:	0792      	lsls	r2, r2, #30
    b500:	d400      	bmi.n	b504 <__swsetup_r+0xc0>
    b502:	6963      	ldr	r3, [r4, #20]
    b504:	60a3      	str	r3, [r4, #8]
    b506:	2000      	movs	r0, #0
    b508:	6923      	ldr	r3, [r4, #16]
    b50a:	4283      	cmp	r3, r0
    b50c:	d107      	bne.n	b51e <__swsetup_r+0xda>
    b50e:	220c      	movs	r2, #12
    b510:	5ea3      	ldrsh	r3, [r4, r2]
    b512:	061a      	lsls	r2, r3, #24
    b514:	d503      	bpl.n	b51e <__swsetup_r+0xda>
    b516:	2240      	movs	r2, #64	; 0x40
    b518:	4313      	orrs	r3, r2
    b51a:	81a3      	strh	r3, [r4, #12]
    b51c:	3801      	subs	r0, #1
    b51e:	bd70      	pop	{r4, r5, r6, pc}
    b520:	2000007c 	.word	0x2000007c
    b524:	0000dafc 	.word	0x0000dafc
    b528:	0000db1c 	.word	0x0000db1c
    b52c:	0000db3c 	.word	0x0000db3c

0000b530 <__sflush_r>:
    b530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b532:	898a      	ldrh	r2, [r1, #12]
    b534:	0005      	movs	r5, r0
    b536:	000c      	movs	r4, r1
    b538:	0713      	lsls	r3, r2, #28
    b53a:	d45a      	bmi.n	b5f2 <__sflush_r+0xc2>
    b53c:	684b      	ldr	r3, [r1, #4]
    b53e:	2b00      	cmp	r3, #0
    b540:	dc02      	bgt.n	b548 <__sflush_r+0x18>
    b542:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b544:	2b00      	cmp	r3, #0
    b546:	dd19      	ble.n	b57c <__sflush_r+0x4c>
    b548:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b54a:	2f00      	cmp	r7, #0
    b54c:	d016      	beq.n	b57c <__sflush_r+0x4c>
    b54e:	2300      	movs	r3, #0
    b550:	682e      	ldr	r6, [r5, #0]
    b552:	602b      	str	r3, [r5, #0]
    b554:	2380      	movs	r3, #128	; 0x80
    b556:	015b      	lsls	r3, r3, #5
    b558:	401a      	ands	r2, r3
    b55a:	d001      	beq.n	b560 <__sflush_r+0x30>
    b55c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b55e:	e014      	b.n	b58a <__sflush_r+0x5a>
    b560:	2301      	movs	r3, #1
    b562:	6a21      	ldr	r1, [r4, #32]
    b564:	0028      	movs	r0, r5
    b566:	47b8      	blx	r7
    b568:	1c43      	adds	r3, r0, #1
    b56a:	d10e      	bne.n	b58a <__sflush_r+0x5a>
    b56c:	682b      	ldr	r3, [r5, #0]
    b56e:	2b00      	cmp	r3, #0
    b570:	d00b      	beq.n	b58a <__sflush_r+0x5a>
    b572:	2b1d      	cmp	r3, #29
    b574:	d001      	beq.n	b57a <__sflush_r+0x4a>
    b576:	2b16      	cmp	r3, #22
    b578:	d102      	bne.n	b580 <__sflush_r+0x50>
    b57a:	602e      	str	r6, [r5, #0]
    b57c:	2000      	movs	r0, #0
    b57e:	e05a      	b.n	b636 <__sflush_r+0x106>
    b580:	2240      	movs	r2, #64	; 0x40
    b582:	89a3      	ldrh	r3, [r4, #12]
    b584:	4313      	orrs	r3, r2
    b586:	81a3      	strh	r3, [r4, #12]
    b588:	e055      	b.n	b636 <__sflush_r+0x106>
    b58a:	89a3      	ldrh	r3, [r4, #12]
    b58c:	075b      	lsls	r3, r3, #29
    b58e:	d506      	bpl.n	b59e <__sflush_r+0x6e>
    b590:	6863      	ldr	r3, [r4, #4]
    b592:	1ac0      	subs	r0, r0, r3
    b594:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b596:	2b00      	cmp	r3, #0
    b598:	d001      	beq.n	b59e <__sflush_r+0x6e>
    b59a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b59c:	1ac0      	subs	r0, r0, r3
    b59e:	2300      	movs	r3, #0
    b5a0:	0002      	movs	r2, r0
    b5a2:	6a21      	ldr	r1, [r4, #32]
    b5a4:	0028      	movs	r0, r5
    b5a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b5a8:	47b8      	blx	r7
    b5aa:	89a3      	ldrh	r3, [r4, #12]
    b5ac:	1c42      	adds	r2, r0, #1
    b5ae:	d106      	bne.n	b5be <__sflush_r+0x8e>
    b5b0:	6829      	ldr	r1, [r5, #0]
    b5b2:	291d      	cmp	r1, #29
    b5b4:	d83a      	bhi.n	b62c <__sflush_r+0xfc>
    b5b6:	4a20      	ldr	r2, [pc, #128]	; (b638 <__sflush_r+0x108>)
    b5b8:	40ca      	lsrs	r2, r1
    b5ba:	07d2      	lsls	r2, r2, #31
    b5bc:	d536      	bpl.n	b62c <__sflush_r+0xfc>
    b5be:	2200      	movs	r2, #0
    b5c0:	6062      	str	r2, [r4, #4]
    b5c2:	6922      	ldr	r2, [r4, #16]
    b5c4:	6022      	str	r2, [r4, #0]
    b5c6:	04db      	lsls	r3, r3, #19
    b5c8:	d505      	bpl.n	b5d6 <__sflush_r+0xa6>
    b5ca:	1c43      	adds	r3, r0, #1
    b5cc:	d102      	bne.n	b5d4 <__sflush_r+0xa4>
    b5ce:	682b      	ldr	r3, [r5, #0]
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	d100      	bne.n	b5d6 <__sflush_r+0xa6>
    b5d4:	6560      	str	r0, [r4, #84]	; 0x54
    b5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b5d8:	602e      	str	r6, [r5, #0]
    b5da:	2900      	cmp	r1, #0
    b5dc:	d0ce      	beq.n	b57c <__sflush_r+0x4c>
    b5de:	0023      	movs	r3, r4
    b5e0:	3344      	adds	r3, #68	; 0x44
    b5e2:	4299      	cmp	r1, r3
    b5e4:	d002      	beq.n	b5ec <__sflush_r+0xbc>
    b5e6:	0028      	movs	r0, r5
    b5e8:	f000 f998 	bl	b91c <_free_r>
    b5ec:	2000      	movs	r0, #0
    b5ee:	6360      	str	r0, [r4, #52]	; 0x34
    b5f0:	e021      	b.n	b636 <__sflush_r+0x106>
    b5f2:	690f      	ldr	r7, [r1, #16]
    b5f4:	2f00      	cmp	r7, #0
    b5f6:	d0c1      	beq.n	b57c <__sflush_r+0x4c>
    b5f8:	680b      	ldr	r3, [r1, #0]
    b5fa:	600f      	str	r7, [r1, #0]
    b5fc:	1bdb      	subs	r3, r3, r7
    b5fe:	9301      	str	r3, [sp, #4]
    b600:	2300      	movs	r3, #0
    b602:	0792      	lsls	r2, r2, #30
    b604:	d100      	bne.n	b608 <__sflush_r+0xd8>
    b606:	694b      	ldr	r3, [r1, #20]
    b608:	60a3      	str	r3, [r4, #8]
    b60a:	e003      	b.n	b614 <__sflush_r+0xe4>
    b60c:	9b01      	ldr	r3, [sp, #4]
    b60e:	183f      	adds	r7, r7, r0
    b610:	1a1b      	subs	r3, r3, r0
    b612:	9301      	str	r3, [sp, #4]
    b614:	9b01      	ldr	r3, [sp, #4]
    b616:	2b00      	cmp	r3, #0
    b618:	ddb0      	ble.n	b57c <__sflush_r+0x4c>
    b61a:	9b01      	ldr	r3, [sp, #4]
    b61c:	003a      	movs	r2, r7
    b61e:	6a21      	ldr	r1, [r4, #32]
    b620:	0028      	movs	r0, r5
    b622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b624:	47b0      	blx	r6
    b626:	2800      	cmp	r0, #0
    b628:	dcf0      	bgt.n	b60c <__sflush_r+0xdc>
    b62a:	89a3      	ldrh	r3, [r4, #12]
    b62c:	2240      	movs	r2, #64	; 0x40
    b62e:	2001      	movs	r0, #1
    b630:	4313      	orrs	r3, r2
    b632:	81a3      	strh	r3, [r4, #12]
    b634:	4240      	negs	r0, r0
    b636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b638:	20400001 	.word	0x20400001

0000b63c <_fflush_r>:
    b63c:	690b      	ldr	r3, [r1, #16]
    b63e:	b570      	push	{r4, r5, r6, lr}
    b640:	0005      	movs	r5, r0
    b642:	000c      	movs	r4, r1
    b644:	2b00      	cmp	r3, #0
    b646:	d101      	bne.n	b64c <_fflush_r+0x10>
    b648:	2000      	movs	r0, #0
    b64a:	e01c      	b.n	b686 <_fflush_r+0x4a>
    b64c:	2800      	cmp	r0, #0
    b64e:	d004      	beq.n	b65a <_fflush_r+0x1e>
    b650:	6983      	ldr	r3, [r0, #24]
    b652:	2b00      	cmp	r3, #0
    b654:	d101      	bne.n	b65a <_fflush_r+0x1e>
    b656:	f000 f85f 	bl	b718 <__sinit>
    b65a:	4b0b      	ldr	r3, [pc, #44]	; (b688 <_fflush_r+0x4c>)
    b65c:	429c      	cmp	r4, r3
    b65e:	d101      	bne.n	b664 <_fflush_r+0x28>
    b660:	686c      	ldr	r4, [r5, #4]
    b662:	e008      	b.n	b676 <_fflush_r+0x3a>
    b664:	4b09      	ldr	r3, [pc, #36]	; (b68c <_fflush_r+0x50>)
    b666:	429c      	cmp	r4, r3
    b668:	d101      	bne.n	b66e <_fflush_r+0x32>
    b66a:	68ac      	ldr	r4, [r5, #8]
    b66c:	e003      	b.n	b676 <_fflush_r+0x3a>
    b66e:	4b08      	ldr	r3, [pc, #32]	; (b690 <_fflush_r+0x54>)
    b670:	429c      	cmp	r4, r3
    b672:	d100      	bne.n	b676 <_fflush_r+0x3a>
    b674:	68ec      	ldr	r4, [r5, #12]
    b676:	220c      	movs	r2, #12
    b678:	5ea3      	ldrsh	r3, [r4, r2]
    b67a:	2b00      	cmp	r3, #0
    b67c:	d0e4      	beq.n	b648 <_fflush_r+0xc>
    b67e:	0021      	movs	r1, r4
    b680:	0028      	movs	r0, r5
    b682:	f7ff ff55 	bl	b530 <__sflush_r>
    b686:	bd70      	pop	{r4, r5, r6, pc}
    b688:	0000dafc 	.word	0x0000dafc
    b68c:	0000db1c 	.word	0x0000db1c
    b690:	0000db3c 	.word	0x0000db3c

0000b694 <_cleanup_r>:
    b694:	b510      	push	{r4, lr}
    b696:	4902      	ldr	r1, [pc, #8]	; (b6a0 <_cleanup_r+0xc>)
    b698:	f000 f8b0 	bl	b7fc <_fwalk_reent>
    b69c:	bd10      	pop	{r4, pc}
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	0000b63d 	.word	0x0000b63d

0000b6a4 <std.isra.0>:
    b6a4:	2300      	movs	r3, #0
    b6a6:	b510      	push	{r4, lr}
    b6a8:	0004      	movs	r4, r0
    b6aa:	6003      	str	r3, [r0, #0]
    b6ac:	6043      	str	r3, [r0, #4]
    b6ae:	6083      	str	r3, [r0, #8]
    b6b0:	8181      	strh	r1, [r0, #12]
    b6b2:	6643      	str	r3, [r0, #100]	; 0x64
    b6b4:	81c2      	strh	r2, [r0, #14]
    b6b6:	6103      	str	r3, [r0, #16]
    b6b8:	6143      	str	r3, [r0, #20]
    b6ba:	6183      	str	r3, [r0, #24]
    b6bc:	0019      	movs	r1, r3
    b6be:	2208      	movs	r2, #8
    b6c0:	305c      	adds	r0, #92	; 0x5c
    b6c2:	f7ff fcd4 	bl	b06e <memset>
    b6c6:	4b05      	ldr	r3, [pc, #20]	; (b6dc <std.isra.0+0x38>)
    b6c8:	6224      	str	r4, [r4, #32]
    b6ca:	6263      	str	r3, [r4, #36]	; 0x24
    b6cc:	4b04      	ldr	r3, [pc, #16]	; (b6e0 <std.isra.0+0x3c>)
    b6ce:	62a3      	str	r3, [r4, #40]	; 0x28
    b6d0:	4b04      	ldr	r3, [pc, #16]	; (b6e4 <std.isra.0+0x40>)
    b6d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    b6d4:	4b04      	ldr	r3, [pc, #16]	; (b6e8 <std.isra.0+0x44>)
    b6d6:	6323      	str	r3, [r4, #48]	; 0x30
    b6d8:	bd10      	pop	{r4, pc}
    b6da:	46c0      	nop			; (mov r8, r8)
    b6dc:	0000c34d 	.word	0x0000c34d
    b6e0:	0000c375 	.word	0x0000c375
    b6e4:	0000c3ad 	.word	0x0000c3ad
    b6e8:	0000c3d9 	.word	0x0000c3d9

0000b6ec <__sfmoreglue>:
    b6ec:	b570      	push	{r4, r5, r6, lr}
    b6ee:	2568      	movs	r5, #104	; 0x68
    b6f0:	1e4b      	subs	r3, r1, #1
    b6f2:	435d      	muls	r5, r3
    b6f4:	000e      	movs	r6, r1
    b6f6:	0029      	movs	r1, r5
    b6f8:	3174      	adds	r1, #116	; 0x74
    b6fa:	f000 f955 	bl	b9a8 <_malloc_r>
    b6fe:	1e04      	subs	r4, r0, #0
    b700:	d008      	beq.n	b714 <__sfmoreglue+0x28>
    b702:	2100      	movs	r1, #0
    b704:	002a      	movs	r2, r5
    b706:	6001      	str	r1, [r0, #0]
    b708:	6046      	str	r6, [r0, #4]
    b70a:	300c      	adds	r0, #12
    b70c:	60a0      	str	r0, [r4, #8]
    b70e:	3268      	adds	r2, #104	; 0x68
    b710:	f7ff fcad 	bl	b06e <memset>
    b714:	0020      	movs	r0, r4
    b716:	bd70      	pop	{r4, r5, r6, pc}

0000b718 <__sinit>:
    b718:	6983      	ldr	r3, [r0, #24]
    b71a:	b513      	push	{r0, r1, r4, lr}
    b71c:	0004      	movs	r4, r0
    b71e:	2b00      	cmp	r3, #0
    b720:	d128      	bne.n	b774 <__sinit+0x5c>
    b722:	6483      	str	r3, [r0, #72]	; 0x48
    b724:	64c3      	str	r3, [r0, #76]	; 0x4c
    b726:	6503      	str	r3, [r0, #80]	; 0x50
    b728:	4b13      	ldr	r3, [pc, #76]	; (b778 <__sinit+0x60>)
    b72a:	4a14      	ldr	r2, [pc, #80]	; (b77c <__sinit+0x64>)
    b72c:	681b      	ldr	r3, [r3, #0]
    b72e:	6282      	str	r2, [r0, #40]	; 0x28
    b730:	9301      	str	r3, [sp, #4]
    b732:	4298      	cmp	r0, r3
    b734:	d101      	bne.n	b73a <__sinit+0x22>
    b736:	2301      	movs	r3, #1
    b738:	6183      	str	r3, [r0, #24]
    b73a:	0020      	movs	r0, r4
    b73c:	f000 f820 	bl	b780 <__sfp>
    b740:	6060      	str	r0, [r4, #4]
    b742:	0020      	movs	r0, r4
    b744:	f000 f81c 	bl	b780 <__sfp>
    b748:	60a0      	str	r0, [r4, #8]
    b74a:	0020      	movs	r0, r4
    b74c:	f000 f818 	bl	b780 <__sfp>
    b750:	2200      	movs	r2, #0
    b752:	60e0      	str	r0, [r4, #12]
    b754:	2104      	movs	r1, #4
    b756:	6860      	ldr	r0, [r4, #4]
    b758:	f7ff ffa4 	bl	b6a4 <std.isra.0>
    b75c:	2201      	movs	r2, #1
    b75e:	2109      	movs	r1, #9
    b760:	68a0      	ldr	r0, [r4, #8]
    b762:	f7ff ff9f 	bl	b6a4 <std.isra.0>
    b766:	2202      	movs	r2, #2
    b768:	2112      	movs	r1, #18
    b76a:	68e0      	ldr	r0, [r4, #12]
    b76c:	f7ff ff9a 	bl	b6a4 <std.isra.0>
    b770:	2301      	movs	r3, #1
    b772:	61a3      	str	r3, [r4, #24]
    b774:	bd13      	pop	{r0, r1, r4, pc}
    b776:	46c0      	nop			; (mov r8, r8)
    b778:	0000daf8 	.word	0x0000daf8
    b77c:	0000b695 	.word	0x0000b695

0000b780 <__sfp>:
    b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b782:	4b1d      	ldr	r3, [pc, #116]	; (b7f8 <__sfp+0x78>)
    b784:	0006      	movs	r6, r0
    b786:	681d      	ldr	r5, [r3, #0]
    b788:	69ab      	ldr	r3, [r5, #24]
    b78a:	2b00      	cmp	r3, #0
    b78c:	d102      	bne.n	b794 <__sfp+0x14>
    b78e:	0028      	movs	r0, r5
    b790:	f7ff ffc2 	bl	b718 <__sinit>
    b794:	3548      	adds	r5, #72	; 0x48
    b796:	68ac      	ldr	r4, [r5, #8]
    b798:	686b      	ldr	r3, [r5, #4]
    b79a:	3b01      	subs	r3, #1
    b79c:	d405      	bmi.n	b7aa <__sfp+0x2a>
    b79e:	220c      	movs	r2, #12
    b7a0:	5ea7      	ldrsh	r7, [r4, r2]
    b7a2:	2f00      	cmp	r7, #0
    b7a4:	d010      	beq.n	b7c8 <__sfp+0x48>
    b7a6:	3468      	adds	r4, #104	; 0x68
    b7a8:	e7f7      	b.n	b79a <__sfp+0x1a>
    b7aa:	682b      	ldr	r3, [r5, #0]
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d001      	beq.n	b7b4 <__sfp+0x34>
    b7b0:	682d      	ldr	r5, [r5, #0]
    b7b2:	e7f0      	b.n	b796 <__sfp+0x16>
    b7b4:	2104      	movs	r1, #4
    b7b6:	0030      	movs	r0, r6
    b7b8:	f7ff ff98 	bl	b6ec <__sfmoreglue>
    b7bc:	6028      	str	r0, [r5, #0]
    b7be:	2800      	cmp	r0, #0
    b7c0:	d1f6      	bne.n	b7b0 <__sfp+0x30>
    b7c2:	230c      	movs	r3, #12
    b7c4:	6033      	str	r3, [r6, #0]
    b7c6:	e016      	b.n	b7f6 <__sfp+0x76>
    b7c8:	2301      	movs	r3, #1
    b7ca:	0020      	movs	r0, r4
    b7cc:	425b      	negs	r3, r3
    b7ce:	81e3      	strh	r3, [r4, #14]
    b7d0:	3302      	adds	r3, #2
    b7d2:	81a3      	strh	r3, [r4, #12]
    b7d4:	6667      	str	r7, [r4, #100]	; 0x64
    b7d6:	6027      	str	r7, [r4, #0]
    b7d8:	60a7      	str	r7, [r4, #8]
    b7da:	6067      	str	r7, [r4, #4]
    b7dc:	6127      	str	r7, [r4, #16]
    b7de:	6167      	str	r7, [r4, #20]
    b7e0:	61a7      	str	r7, [r4, #24]
    b7e2:	305c      	adds	r0, #92	; 0x5c
    b7e4:	2208      	movs	r2, #8
    b7e6:	0039      	movs	r1, r7
    b7e8:	f7ff fc41 	bl	b06e <memset>
    b7ec:	0020      	movs	r0, r4
    b7ee:	6367      	str	r7, [r4, #52]	; 0x34
    b7f0:	63a7      	str	r7, [r4, #56]	; 0x38
    b7f2:	64a7      	str	r7, [r4, #72]	; 0x48
    b7f4:	64e7      	str	r7, [r4, #76]	; 0x4c
    b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7f8:	0000daf8 	.word	0x0000daf8

0000b7fc <_fwalk_reent>:
    b7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b7fe:	0004      	movs	r4, r0
    b800:	0007      	movs	r7, r0
    b802:	2600      	movs	r6, #0
    b804:	9101      	str	r1, [sp, #4]
    b806:	3448      	adds	r4, #72	; 0x48
    b808:	2c00      	cmp	r4, #0
    b80a:	d016      	beq.n	b83a <_fwalk_reent+0x3e>
    b80c:	6863      	ldr	r3, [r4, #4]
    b80e:	68a5      	ldr	r5, [r4, #8]
    b810:	9300      	str	r3, [sp, #0]
    b812:	9b00      	ldr	r3, [sp, #0]
    b814:	3b01      	subs	r3, #1
    b816:	9300      	str	r3, [sp, #0]
    b818:	d40d      	bmi.n	b836 <_fwalk_reent+0x3a>
    b81a:	89ab      	ldrh	r3, [r5, #12]
    b81c:	2b01      	cmp	r3, #1
    b81e:	d908      	bls.n	b832 <_fwalk_reent+0x36>
    b820:	220e      	movs	r2, #14
    b822:	5eab      	ldrsh	r3, [r5, r2]
    b824:	3301      	adds	r3, #1
    b826:	d004      	beq.n	b832 <_fwalk_reent+0x36>
    b828:	0029      	movs	r1, r5
    b82a:	0038      	movs	r0, r7
    b82c:	9b01      	ldr	r3, [sp, #4]
    b82e:	4798      	blx	r3
    b830:	4306      	orrs	r6, r0
    b832:	3568      	adds	r5, #104	; 0x68
    b834:	e7ed      	b.n	b812 <_fwalk_reent+0x16>
    b836:	6824      	ldr	r4, [r4, #0]
    b838:	e7e6      	b.n	b808 <_fwalk_reent+0xc>
    b83a:	0030      	movs	r0, r6
    b83c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000b840 <__swhatbuf_r>:
    b840:	b570      	push	{r4, r5, r6, lr}
    b842:	000e      	movs	r6, r1
    b844:	001d      	movs	r5, r3
    b846:	230e      	movs	r3, #14
    b848:	5ec9      	ldrsh	r1, [r1, r3]
    b84a:	b090      	sub	sp, #64	; 0x40
    b84c:	0014      	movs	r4, r2
    b84e:	2900      	cmp	r1, #0
    b850:	da06      	bge.n	b860 <__swhatbuf_r+0x20>
    b852:	2300      	movs	r3, #0
    b854:	602b      	str	r3, [r5, #0]
    b856:	89b3      	ldrh	r3, [r6, #12]
    b858:	061b      	lsls	r3, r3, #24
    b85a:	d50f      	bpl.n	b87c <__swhatbuf_r+0x3c>
    b85c:	2340      	movs	r3, #64	; 0x40
    b85e:	e00f      	b.n	b880 <__swhatbuf_r+0x40>
    b860:	aa01      	add	r2, sp, #4
    b862:	f000 fde5 	bl	c430 <_fstat_r>
    b866:	2800      	cmp	r0, #0
    b868:	dbf3      	blt.n	b852 <__swhatbuf_r+0x12>
    b86a:	23f0      	movs	r3, #240	; 0xf0
    b86c:	9a02      	ldr	r2, [sp, #8]
    b86e:	021b      	lsls	r3, r3, #8
    b870:	4013      	ands	r3, r2
    b872:	4a05      	ldr	r2, [pc, #20]	; (b888 <__swhatbuf_r+0x48>)
    b874:	189b      	adds	r3, r3, r2
    b876:	425a      	negs	r2, r3
    b878:	4153      	adcs	r3, r2
    b87a:	602b      	str	r3, [r5, #0]
    b87c:	2380      	movs	r3, #128	; 0x80
    b87e:	00db      	lsls	r3, r3, #3
    b880:	2000      	movs	r0, #0
    b882:	6023      	str	r3, [r4, #0]
    b884:	b010      	add	sp, #64	; 0x40
    b886:	bd70      	pop	{r4, r5, r6, pc}
    b888:	ffffe000 	.word	0xffffe000

0000b88c <__smakebuf_r>:
    b88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b88e:	2602      	movs	r6, #2
    b890:	898b      	ldrh	r3, [r1, #12]
    b892:	0005      	movs	r5, r0
    b894:	000c      	movs	r4, r1
    b896:	4233      	tst	r3, r6
    b898:	d110      	bne.n	b8bc <__smakebuf_r+0x30>
    b89a:	ab01      	add	r3, sp, #4
    b89c:	466a      	mov	r2, sp
    b89e:	f7ff ffcf 	bl	b840 <__swhatbuf_r>
    b8a2:	9900      	ldr	r1, [sp, #0]
    b8a4:	0007      	movs	r7, r0
    b8a6:	0028      	movs	r0, r5
    b8a8:	f000 f87e 	bl	b9a8 <_malloc_r>
    b8ac:	2800      	cmp	r0, #0
    b8ae:	d10c      	bne.n	b8ca <__smakebuf_r+0x3e>
    b8b0:	220c      	movs	r2, #12
    b8b2:	5ea3      	ldrsh	r3, [r4, r2]
    b8b4:	059a      	lsls	r2, r3, #22
    b8b6:	d423      	bmi.n	b900 <__smakebuf_r+0x74>
    b8b8:	4333      	orrs	r3, r6
    b8ba:	81a3      	strh	r3, [r4, #12]
    b8bc:	0023      	movs	r3, r4
    b8be:	3347      	adds	r3, #71	; 0x47
    b8c0:	6023      	str	r3, [r4, #0]
    b8c2:	6123      	str	r3, [r4, #16]
    b8c4:	2301      	movs	r3, #1
    b8c6:	6163      	str	r3, [r4, #20]
    b8c8:	e01a      	b.n	b900 <__smakebuf_r+0x74>
    b8ca:	2280      	movs	r2, #128	; 0x80
    b8cc:	4b0d      	ldr	r3, [pc, #52]	; (b904 <__smakebuf_r+0x78>)
    b8ce:	62ab      	str	r3, [r5, #40]	; 0x28
    b8d0:	89a3      	ldrh	r3, [r4, #12]
    b8d2:	6020      	str	r0, [r4, #0]
    b8d4:	4313      	orrs	r3, r2
    b8d6:	81a3      	strh	r3, [r4, #12]
    b8d8:	9b00      	ldr	r3, [sp, #0]
    b8da:	6120      	str	r0, [r4, #16]
    b8dc:	6163      	str	r3, [r4, #20]
    b8de:	9b01      	ldr	r3, [sp, #4]
    b8e0:	2b00      	cmp	r3, #0
    b8e2:	d00a      	beq.n	b8fa <__smakebuf_r+0x6e>
    b8e4:	230e      	movs	r3, #14
    b8e6:	5ee1      	ldrsh	r1, [r4, r3]
    b8e8:	0028      	movs	r0, r5
    b8ea:	f000 fdb3 	bl	c454 <_isatty_r>
    b8ee:	2800      	cmp	r0, #0
    b8f0:	d003      	beq.n	b8fa <__smakebuf_r+0x6e>
    b8f2:	2201      	movs	r2, #1
    b8f4:	89a3      	ldrh	r3, [r4, #12]
    b8f6:	4313      	orrs	r3, r2
    b8f8:	81a3      	strh	r3, [r4, #12]
    b8fa:	89a3      	ldrh	r3, [r4, #12]
    b8fc:	431f      	orrs	r7, r3
    b8fe:	81a7      	strh	r7, [r4, #12]
    b900:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b902:	46c0      	nop			; (mov r8, r8)
    b904:	0000b695 	.word	0x0000b695

0000b908 <malloc>:
    b908:	b510      	push	{r4, lr}
    b90a:	4b03      	ldr	r3, [pc, #12]	; (b918 <malloc+0x10>)
    b90c:	0001      	movs	r1, r0
    b90e:	6818      	ldr	r0, [r3, #0]
    b910:	f000 f84a 	bl	b9a8 <_malloc_r>
    b914:	bd10      	pop	{r4, pc}
    b916:	46c0      	nop			; (mov r8, r8)
    b918:	2000007c 	.word	0x2000007c

0000b91c <_free_r>:
    b91c:	b530      	push	{r4, r5, lr}
    b91e:	2900      	cmp	r1, #0
    b920:	d03e      	beq.n	b9a0 <_free_r+0x84>
    b922:	3904      	subs	r1, #4
    b924:	680b      	ldr	r3, [r1, #0]
    b926:	2b00      	cmp	r3, #0
    b928:	da00      	bge.n	b92c <_free_r+0x10>
    b92a:	18c9      	adds	r1, r1, r3
    b92c:	4a1d      	ldr	r2, [pc, #116]	; (b9a4 <_free_r+0x88>)
    b92e:	6813      	ldr	r3, [r2, #0]
    b930:	0014      	movs	r4, r2
    b932:	2b00      	cmp	r3, #0
    b934:	d102      	bne.n	b93c <_free_r+0x20>
    b936:	604b      	str	r3, [r1, #4]
    b938:	6011      	str	r1, [r2, #0]
    b93a:	e031      	b.n	b9a0 <_free_r+0x84>
    b93c:	428b      	cmp	r3, r1
    b93e:	d90d      	bls.n	b95c <_free_r+0x40>
    b940:	680a      	ldr	r2, [r1, #0]
    b942:	1888      	adds	r0, r1, r2
    b944:	4283      	cmp	r3, r0
    b946:	d103      	bne.n	b950 <_free_r+0x34>
    b948:	6818      	ldr	r0, [r3, #0]
    b94a:	685b      	ldr	r3, [r3, #4]
    b94c:	1882      	adds	r2, r0, r2
    b94e:	600a      	str	r2, [r1, #0]
    b950:	604b      	str	r3, [r1, #4]
    b952:	6021      	str	r1, [r4, #0]
    b954:	e024      	b.n	b9a0 <_free_r+0x84>
    b956:	428a      	cmp	r2, r1
    b958:	d803      	bhi.n	b962 <_free_r+0x46>
    b95a:	0013      	movs	r3, r2
    b95c:	685a      	ldr	r2, [r3, #4]
    b95e:	2a00      	cmp	r2, #0
    b960:	d1f9      	bne.n	b956 <_free_r+0x3a>
    b962:	681d      	ldr	r5, [r3, #0]
    b964:	195c      	adds	r4, r3, r5
    b966:	428c      	cmp	r4, r1
    b968:	d10b      	bne.n	b982 <_free_r+0x66>
    b96a:	6809      	ldr	r1, [r1, #0]
    b96c:	1869      	adds	r1, r5, r1
    b96e:	1858      	adds	r0, r3, r1
    b970:	6019      	str	r1, [r3, #0]
    b972:	4282      	cmp	r2, r0
    b974:	d114      	bne.n	b9a0 <_free_r+0x84>
    b976:	6810      	ldr	r0, [r2, #0]
    b978:	6852      	ldr	r2, [r2, #4]
    b97a:	1841      	adds	r1, r0, r1
    b97c:	6019      	str	r1, [r3, #0]
    b97e:	605a      	str	r2, [r3, #4]
    b980:	e00e      	b.n	b9a0 <_free_r+0x84>
    b982:	428c      	cmp	r4, r1
    b984:	d902      	bls.n	b98c <_free_r+0x70>
    b986:	230c      	movs	r3, #12
    b988:	6003      	str	r3, [r0, #0]
    b98a:	e009      	b.n	b9a0 <_free_r+0x84>
    b98c:	6808      	ldr	r0, [r1, #0]
    b98e:	180c      	adds	r4, r1, r0
    b990:	42a2      	cmp	r2, r4
    b992:	d103      	bne.n	b99c <_free_r+0x80>
    b994:	6814      	ldr	r4, [r2, #0]
    b996:	6852      	ldr	r2, [r2, #4]
    b998:	1820      	adds	r0, r4, r0
    b99a:	6008      	str	r0, [r1, #0]
    b99c:	604a      	str	r2, [r1, #4]
    b99e:	6059      	str	r1, [r3, #4]
    b9a0:	bd30      	pop	{r4, r5, pc}
    b9a2:	46c0      	nop			; (mov r8, r8)
    b9a4:	200001cc 	.word	0x200001cc

0000b9a8 <_malloc_r>:
    b9a8:	2303      	movs	r3, #3
    b9aa:	b570      	push	{r4, r5, r6, lr}
    b9ac:	1ccd      	adds	r5, r1, #3
    b9ae:	439d      	bics	r5, r3
    b9b0:	3508      	adds	r5, #8
    b9b2:	0006      	movs	r6, r0
    b9b4:	2d0c      	cmp	r5, #12
    b9b6:	d201      	bcs.n	b9bc <_malloc_r+0x14>
    b9b8:	250c      	movs	r5, #12
    b9ba:	e005      	b.n	b9c8 <_malloc_r+0x20>
    b9bc:	2d00      	cmp	r5, #0
    b9be:	da03      	bge.n	b9c8 <_malloc_r+0x20>
    b9c0:	230c      	movs	r3, #12
    b9c2:	2000      	movs	r0, #0
    b9c4:	6033      	str	r3, [r6, #0]
    b9c6:	e040      	b.n	ba4a <_malloc_r+0xa2>
    b9c8:	42a9      	cmp	r1, r5
    b9ca:	d8f9      	bhi.n	b9c0 <_malloc_r+0x18>
    b9cc:	4b1f      	ldr	r3, [pc, #124]	; (ba4c <_malloc_r+0xa4>)
    b9ce:	681c      	ldr	r4, [r3, #0]
    b9d0:	001a      	movs	r2, r3
    b9d2:	0021      	movs	r1, r4
    b9d4:	2900      	cmp	r1, #0
    b9d6:	d013      	beq.n	ba00 <_malloc_r+0x58>
    b9d8:	680b      	ldr	r3, [r1, #0]
    b9da:	1b5b      	subs	r3, r3, r5
    b9dc:	d40d      	bmi.n	b9fa <_malloc_r+0x52>
    b9de:	2b0b      	cmp	r3, #11
    b9e0:	d902      	bls.n	b9e8 <_malloc_r+0x40>
    b9e2:	600b      	str	r3, [r1, #0]
    b9e4:	18cc      	adds	r4, r1, r3
    b9e6:	e01e      	b.n	ba26 <_malloc_r+0x7e>
    b9e8:	428c      	cmp	r4, r1
    b9ea:	d102      	bne.n	b9f2 <_malloc_r+0x4a>
    b9ec:	6863      	ldr	r3, [r4, #4]
    b9ee:	6013      	str	r3, [r2, #0]
    b9f0:	e01a      	b.n	ba28 <_malloc_r+0x80>
    b9f2:	684b      	ldr	r3, [r1, #4]
    b9f4:	6063      	str	r3, [r4, #4]
    b9f6:	000c      	movs	r4, r1
    b9f8:	e016      	b.n	ba28 <_malloc_r+0x80>
    b9fa:	000c      	movs	r4, r1
    b9fc:	6849      	ldr	r1, [r1, #4]
    b9fe:	e7e9      	b.n	b9d4 <_malloc_r+0x2c>
    ba00:	4c13      	ldr	r4, [pc, #76]	; (ba50 <_malloc_r+0xa8>)
    ba02:	6823      	ldr	r3, [r4, #0]
    ba04:	2b00      	cmp	r3, #0
    ba06:	d103      	bne.n	ba10 <_malloc_r+0x68>
    ba08:	0030      	movs	r0, r6
    ba0a:	f000 fc8d 	bl	c328 <_sbrk_r>
    ba0e:	6020      	str	r0, [r4, #0]
    ba10:	0029      	movs	r1, r5
    ba12:	0030      	movs	r0, r6
    ba14:	f000 fc88 	bl	c328 <_sbrk_r>
    ba18:	1c43      	adds	r3, r0, #1
    ba1a:	d0d1      	beq.n	b9c0 <_malloc_r+0x18>
    ba1c:	2303      	movs	r3, #3
    ba1e:	1cc4      	adds	r4, r0, #3
    ba20:	439c      	bics	r4, r3
    ba22:	42a0      	cmp	r0, r4
    ba24:	d10a      	bne.n	ba3c <_malloc_r+0x94>
    ba26:	6025      	str	r5, [r4, #0]
    ba28:	0020      	movs	r0, r4
    ba2a:	2207      	movs	r2, #7
    ba2c:	300b      	adds	r0, #11
    ba2e:	1d23      	adds	r3, r4, #4
    ba30:	4390      	bics	r0, r2
    ba32:	1ac3      	subs	r3, r0, r3
    ba34:	d009      	beq.n	ba4a <_malloc_r+0xa2>
    ba36:	425a      	negs	r2, r3
    ba38:	50e2      	str	r2, [r4, r3]
    ba3a:	e006      	b.n	ba4a <_malloc_r+0xa2>
    ba3c:	1a21      	subs	r1, r4, r0
    ba3e:	0030      	movs	r0, r6
    ba40:	f000 fc72 	bl	c328 <_sbrk_r>
    ba44:	1c43      	adds	r3, r0, #1
    ba46:	d1ee      	bne.n	ba26 <_malloc_r+0x7e>
    ba48:	e7ba      	b.n	b9c0 <_malloc_r+0x18>
    ba4a:	bd70      	pop	{r4, r5, r6, pc}
    ba4c:	200001cc 	.word	0x200001cc
    ba50:	200001c8 	.word	0x200001c8

0000ba54 <__ssputs_r>:
    ba54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba56:	688e      	ldr	r6, [r1, #8]
    ba58:	b085      	sub	sp, #20
    ba5a:	0007      	movs	r7, r0
    ba5c:	000c      	movs	r4, r1
    ba5e:	9203      	str	r2, [sp, #12]
    ba60:	9301      	str	r3, [sp, #4]
    ba62:	429e      	cmp	r6, r3
    ba64:	d843      	bhi.n	baee <__ssputs_r+0x9a>
    ba66:	2390      	movs	r3, #144	; 0x90
    ba68:	898a      	ldrh	r2, [r1, #12]
    ba6a:	00db      	lsls	r3, r3, #3
    ba6c:	421a      	tst	r2, r3
    ba6e:	d03e      	beq.n	baee <__ssputs_r+0x9a>
    ba70:	2503      	movs	r5, #3
    ba72:	6909      	ldr	r1, [r1, #16]
    ba74:	6823      	ldr	r3, [r4, #0]
    ba76:	9801      	ldr	r0, [sp, #4]
    ba78:	1a5b      	subs	r3, r3, r1
    ba7a:	9302      	str	r3, [sp, #8]
    ba7c:	6963      	ldr	r3, [r4, #20]
    ba7e:	435d      	muls	r5, r3
    ba80:	0feb      	lsrs	r3, r5, #31
    ba82:	195d      	adds	r5, r3, r5
    ba84:	9b02      	ldr	r3, [sp, #8]
    ba86:	106d      	asrs	r5, r5, #1
    ba88:	3301      	adds	r3, #1
    ba8a:	181b      	adds	r3, r3, r0
    ba8c:	42ab      	cmp	r3, r5
    ba8e:	d900      	bls.n	ba92 <__ssputs_r+0x3e>
    ba90:	001d      	movs	r5, r3
    ba92:	0553      	lsls	r3, r2, #21
    ba94:	d510      	bpl.n	bab8 <__ssputs_r+0x64>
    ba96:	0029      	movs	r1, r5
    ba98:	0038      	movs	r0, r7
    ba9a:	f7ff ff85 	bl	b9a8 <_malloc_r>
    ba9e:	1e06      	subs	r6, r0, #0
    baa0:	d014      	beq.n	bacc <__ssputs_r+0x78>
    baa2:	9a02      	ldr	r2, [sp, #8]
    baa4:	6921      	ldr	r1, [r4, #16]
    baa6:	f7ff fad9 	bl	b05c <memcpy>
    baaa:	89a2      	ldrh	r2, [r4, #12]
    baac:	4b19      	ldr	r3, [pc, #100]	; (bb14 <__ssputs_r+0xc0>)
    baae:	4013      	ands	r3, r2
    bab0:	2280      	movs	r2, #128	; 0x80
    bab2:	4313      	orrs	r3, r2
    bab4:	81a3      	strh	r3, [r4, #12]
    bab6:	e012      	b.n	bade <__ssputs_r+0x8a>
    bab8:	002a      	movs	r2, r5
    baba:	0038      	movs	r0, r7
    babc:	f000 fd10 	bl	c4e0 <_realloc_r>
    bac0:	1e06      	subs	r6, r0, #0
    bac2:	d10c      	bne.n	bade <__ssputs_r+0x8a>
    bac4:	6921      	ldr	r1, [r4, #16]
    bac6:	0038      	movs	r0, r7
    bac8:	f7ff ff28 	bl	b91c <_free_r>
    bacc:	230c      	movs	r3, #12
    bace:	2240      	movs	r2, #64	; 0x40
    bad0:	2001      	movs	r0, #1
    bad2:	603b      	str	r3, [r7, #0]
    bad4:	89a3      	ldrh	r3, [r4, #12]
    bad6:	4240      	negs	r0, r0
    bad8:	4313      	orrs	r3, r2
    bada:	81a3      	strh	r3, [r4, #12]
    badc:	e017      	b.n	bb0e <__ssputs_r+0xba>
    bade:	9b02      	ldr	r3, [sp, #8]
    bae0:	6126      	str	r6, [r4, #16]
    bae2:	18f6      	adds	r6, r6, r3
    bae4:	6026      	str	r6, [r4, #0]
    bae6:	6165      	str	r5, [r4, #20]
    bae8:	9e01      	ldr	r6, [sp, #4]
    baea:	1aed      	subs	r5, r5, r3
    baec:	60a5      	str	r5, [r4, #8]
    baee:	9b01      	ldr	r3, [sp, #4]
    baf0:	42b3      	cmp	r3, r6
    baf2:	d200      	bcs.n	baf6 <__ssputs_r+0xa2>
    baf4:	001e      	movs	r6, r3
    baf6:	0032      	movs	r2, r6
    baf8:	9903      	ldr	r1, [sp, #12]
    bafa:	6820      	ldr	r0, [r4, #0]
    bafc:	f000 fcdb 	bl	c4b6 <memmove>
    bb00:	2000      	movs	r0, #0
    bb02:	68a3      	ldr	r3, [r4, #8]
    bb04:	1b9b      	subs	r3, r3, r6
    bb06:	60a3      	str	r3, [r4, #8]
    bb08:	6823      	ldr	r3, [r4, #0]
    bb0a:	199e      	adds	r6, r3, r6
    bb0c:	6026      	str	r6, [r4, #0]
    bb0e:	b005      	add	sp, #20
    bb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb12:	46c0      	nop			; (mov r8, r8)
    bb14:	fffffb7f 	.word	0xfffffb7f

0000bb18 <_svfiprintf_r>:
    bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb1a:	b09f      	sub	sp, #124	; 0x7c
    bb1c:	9002      	str	r0, [sp, #8]
    bb1e:	9305      	str	r3, [sp, #20]
    bb20:	898b      	ldrh	r3, [r1, #12]
    bb22:	000f      	movs	r7, r1
    bb24:	0016      	movs	r6, r2
    bb26:	061b      	lsls	r3, r3, #24
    bb28:	d510      	bpl.n	bb4c <_svfiprintf_r+0x34>
    bb2a:	690b      	ldr	r3, [r1, #16]
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d10d      	bne.n	bb4c <_svfiprintf_r+0x34>
    bb30:	2140      	movs	r1, #64	; 0x40
    bb32:	f7ff ff39 	bl	b9a8 <_malloc_r>
    bb36:	6038      	str	r0, [r7, #0]
    bb38:	6138      	str	r0, [r7, #16]
    bb3a:	2800      	cmp	r0, #0
    bb3c:	d104      	bne.n	bb48 <_svfiprintf_r+0x30>
    bb3e:	230c      	movs	r3, #12
    bb40:	9a02      	ldr	r2, [sp, #8]
    bb42:	3801      	subs	r0, #1
    bb44:	6013      	str	r3, [r2, #0]
    bb46:	e0d8      	b.n	bcfa <_svfiprintf_r+0x1e2>
    bb48:	2340      	movs	r3, #64	; 0x40
    bb4a:	617b      	str	r3, [r7, #20]
    bb4c:	2300      	movs	r3, #0
    bb4e:	ad06      	add	r5, sp, #24
    bb50:	616b      	str	r3, [r5, #20]
    bb52:	3320      	adds	r3, #32
    bb54:	766b      	strb	r3, [r5, #25]
    bb56:	3310      	adds	r3, #16
    bb58:	76ab      	strb	r3, [r5, #26]
    bb5a:	0034      	movs	r4, r6
    bb5c:	7823      	ldrb	r3, [r4, #0]
    bb5e:	2b00      	cmp	r3, #0
    bb60:	d103      	bne.n	bb6a <_svfiprintf_r+0x52>
    bb62:	1ba3      	subs	r3, r4, r6
    bb64:	9304      	str	r3, [sp, #16]
    bb66:	d012      	beq.n	bb8e <_svfiprintf_r+0x76>
    bb68:	e003      	b.n	bb72 <_svfiprintf_r+0x5a>
    bb6a:	2b25      	cmp	r3, #37	; 0x25
    bb6c:	d0f9      	beq.n	bb62 <_svfiprintf_r+0x4a>
    bb6e:	3401      	adds	r4, #1
    bb70:	e7f4      	b.n	bb5c <_svfiprintf_r+0x44>
    bb72:	1ba3      	subs	r3, r4, r6
    bb74:	0032      	movs	r2, r6
    bb76:	0039      	movs	r1, r7
    bb78:	9802      	ldr	r0, [sp, #8]
    bb7a:	f7ff ff6b 	bl	ba54 <__ssputs_r>
    bb7e:	1c43      	adds	r3, r0, #1
    bb80:	d100      	bne.n	bb84 <_svfiprintf_r+0x6c>
    bb82:	e0b4      	b.n	bcee <_svfiprintf_r+0x1d6>
    bb84:	696a      	ldr	r2, [r5, #20]
    bb86:	9b04      	ldr	r3, [sp, #16]
    bb88:	4694      	mov	ip, r2
    bb8a:	4463      	add	r3, ip
    bb8c:	616b      	str	r3, [r5, #20]
    bb8e:	7823      	ldrb	r3, [r4, #0]
    bb90:	2b00      	cmp	r3, #0
    bb92:	d100      	bne.n	bb96 <_svfiprintf_r+0x7e>
    bb94:	e0ab      	b.n	bcee <_svfiprintf_r+0x1d6>
    bb96:	2201      	movs	r2, #1
    bb98:	2300      	movs	r3, #0
    bb9a:	4252      	negs	r2, r2
    bb9c:	606a      	str	r2, [r5, #4]
    bb9e:	a902      	add	r1, sp, #8
    bba0:	3254      	adds	r2, #84	; 0x54
    bba2:	1852      	adds	r2, r2, r1
    bba4:	3401      	adds	r4, #1
    bba6:	602b      	str	r3, [r5, #0]
    bba8:	60eb      	str	r3, [r5, #12]
    bbaa:	60ab      	str	r3, [r5, #8]
    bbac:	7013      	strb	r3, [r2, #0]
    bbae:	65ab      	str	r3, [r5, #88]	; 0x58
    bbb0:	4e53      	ldr	r6, [pc, #332]	; (bd00 <_svfiprintf_r+0x1e8>)
    bbb2:	7821      	ldrb	r1, [r4, #0]
    bbb4:	2205      	movs	r2, #5
    bbb6:	0030      	movs	r0, r6
    bbb8:	f000 fc72 	bl	c4a0 <memchr>
    bbbc:	2800      	cmp	r0, #0
    bbbe:	d007      	beq.n	bbd0 <_svfiprintf_r+0xb8>
    bbc0:	2301      	movs	r3, #1
    bbc2:	1b80      	subs	r0, r0, r6
    bbc4:	4083      	lsls	r3, r0
    bbc6:	682a      	ldr	r2, [r5, #0]
    bbc8:	3401      	adds	r4, #1
    bbca:	4313      	orrs	r3, r2
    bbcc:	602b      	str	r3, [r5, #0]
    bbce:	e7ef      	b.n	bbb0 <_svfiprintf_r+0x98>
    bbd0:	682b      	ldr	r3, [r5, #0]
    bbd2:	06da      	lsls	r2, r3, #27
    bbd4:	d504      	bpl.n	bbe0 <_svfiprintf_r+0xc8>
    bbd6:	2253      	movs	r2, #83	; 0x53
    bbd8:	2120      	movs	r1, #32
    bbda:	a802      	add	r0, sp, #8
    bbdc:	1812      	adds	r2, r2, r0
    bbde:	7011      	strb	r1, [r2, #0]
    bbe0:	071a      	lsls	r2, r3, #28
    bbe2:	d504      	bpl.n	bbee <_svfiprintf_r+0xd6>
    bbe4:	2253      	movs	r2, #83	; 0x53
    bbe6:	212b      	movs	r1, #43	; 0x2b
    bbe8:	a802      	add	r0, sp, #8
    bbea:	1812      	adds	r2, r2, r0
    bbec:	7011      	strb	r1, [r2, #0]
    bbee:	7822      	ldrb	r2, [r4, #0]
    bbf0:	2a2a      	cmp	r2, #42	; 0x2a
    bbf2:	d003      	beq.n	bbfc <_svfiprintf_r+0xe4>
    bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bbf6:	2000      	movs	r0, #0
    bbf8:	210a      	movs	r1, #10
    bbfa:	e00e      	b.n	bc1a <_svfiprintf_r+0x102>
    bbfc:	9a05      	ldr	r2, [sp, #20]
    bbfe:	1d11      	adds	r1, r2, #4
    bc00:	6812      	ldr	r2, [r2, #0]
    bc02:	9105      	str	r1, [sp, #20]
    bc04:	2a00      	cmp	r2, #0
    bc06:	db01      	blt.n	bc0c <_svfiprintf_r+0xf4>
    bc08:	9209      	str	r2, [sp, #36]	; 0x24
    bc0a:	e004      	b.n	bc16 <_svfiprintf_r+0xfe>
    bc0c:	4252      	negs	r2, r2
    bc0e:	60ea      	str	r2, [r5, #12]
    bc10:	2202      	movs	r2, #2
    bc12:	4313      	orrs	r3, r2
    bc14:	602b      	str	r3, [r5, #0]
    bc16:	3401      	adds	r4, #1
    bc18:	e00b      	b.n	bc32 <_svfiprintf_r+0x11a>
    bc1a:	7822      	ldrb	r2, [r4, #0]
    bc1c:	3a30      	subs	r2, #48	; 0x30
    bc1e:	2a09      	cmp	r2, #9
    bc20:	d804      	bhi.n	bc2c <_svfiprintf_r+0x114>
    bc22:	434b      	muls	r3, r1
    bc24:	3401      	adds	r4, #1
    bc26:	189b      	adds	r3, r3, r2
    bc28:	2001      	movs	r0, #1
    bc2a:	e7f6      	b.n	bc1a <_svfiprintf_r+0x102>
    bc2c:	2800      	cmp	r0, #0
    bc2e:	d000      	beq.n	bc32 <_svfiprintf_r+0x11a>
    bc30:	9309      	str	r3, [sp, #36]	; 0x24
    bc32:	7823      	ldrb	r3, [r4, #0]
    bc34:	2b2e      	cmp	r3, #46	; 0x2e
    bc36:	d11e      	bne.n	bc76 <_svfiprintf_r+0x15e>
    bc38:	7863      	ldrb	r3, [r4, #1]
    bc3a:	2b2a      	cmp	r3, #42	; 0x2a
    bc3c:	d10a      	bne.n	bc54 <_svfiprintf_r+0x13c>
    bc3e:	9b05      	ldr	r3, [sp, #20]
    bc40:	3402      	adds	r4, #2
    bc42:	1d1a      	adds	r2, r3, #4
    bc44:	681b      	ldr	r3, [r3, #0]
    bc46:	9205      	str	r2, [sp, #20]
    bc48:	2b00      	cmp	r3, #0
    bc4a:	da01      	bge.n	bc50 <_svfiprintf_r+0x138>
    bc4c:	2301      	movs	r3, #1
    bc4e:	425b      	negs	r3, r3
    bc50:	9307      	str	r3, [sp, #28]
    bc52:	e010      	b.n	bc76 <_svfiprintf_r+0x15e>
    bc54:	2300      	movs	r3, #0
    bc56:	200a      	movs	r0, #10
    bc58:	001a      	movs	r2, r3
    bc5a:	3401      	adds	r4, #1
    bc5c:	606b      	str	r3, [r5, #4]
    bc5e:	7821      	ldrb	r1, [r4, #0]
    bc60:	3930      	subs	r1, #48	; 0x30
    bc62:	2909      	cmp	r1, #9
    bc64:	d804      	bhi.n	bc70 <_svfiprintf_r+0x158>
    bc66:	4342      	muls	r2, r0
    bc68:	3401      	adds	r4, #1
    bc6a:	1852      	adds	r2, r2, r1
    bc6c:	2301      	movs	r3, #1
    bc6e:	e7f6      	b.n	bc5e <_svfiprintf_r+0x146>
    bc70:	2b00      	cmp	r3, #0
    bc72:	d000      	beq.n	bc76 <_svfiprintf_r+0x15e>
    bc74:	9207      	str	r2, [sp, #28]
    bc76:	4e23      	ldr	r6, [pc, #140]	; (bd04 <_svfiprintf_r+0x1ec>)
    bc78:	7821      	ldrb	r1, [r4, #0]
    bc7a:	2203      	movs	r2, #3
    bc7c:	0030      	movs	r0, r6
    bc7e:	f000 fc0f 	bl	c4a0 <memchr>
    bc82:	2800      	cmp	r0, #0
    bc84:	d006      	beq.n	bc94 <_svfiprintf_r+0x17c>
    bc86:	2340      	movs	r3, #64	; 0x40
    bc88:	1b80      	subs	r0, r0, r6
    bc8a:	4083      	lsls	r3, r0
    bc8c:	682a      	ldr	r2, [r5, #0]
    bc8e:	3401      	adds	r4, #1
    bc90:	4313      	orrs	r3, r2
    bc92:	602b      	str	r3, [r5, #0]
    bc94:	7821      	ldrb	r1, [r4, #0]
    bc96:	2206      	movs	r2, #6
    bc98:	481b      	ldr	r0, [pc, #108]	; (bd08 <_svfiprintf_r+0x1f0>)
    bc9a:	1c66      	adds	r6, r4, #1
    bc9c:	7629      	strb	r1, [r5, #24]
    bc9e:	f000 fbff 	bl	c4a0 <memchr>
    bca2:	2800      	cmp	r0, #0
    bca4:	d012      	beq.n	bccc <_svfiprintf_r+0x1b4>
    bca6:	4b19      	ldr	r3, [pc, #100]	; (bd0c <_svfiprintf_r+0x1f4>)
    bca8:	2b00      	cmp	r3, #0
    bcaa:	d106      	bne.n	bcba <_svfiprintf_r+0x1a2>
    bcac:	2207      	movs	r2, #7
    bcae:	9b05      	ldr	r3, [sp, #20]
    bcb0:	3307      	adds	r3, #7
    bcb2:	4393      	bics	r3, r2
    bcb4:	3308      	adds	r3, #8
    bcb6:	9305      	str	r3, [sp, #20]
    bcb8:	e014      	b.n	bce4 <_svfiprintf_r+0x1cc>
    bcba:	ab05      	add	r3, sp, #20
    bcbc:	9300      	str	r3, [sp, #0]
    bcbe:	003a      	movs	r2, r7
    bcc0:	4b13      	ldr	r3, [pc, #76]	; (bd10 <_svfiprintf_r+0x1f8>)
    bcc2:	0029      	movs	r1, r5
    bcc4:	9802      	ldr	r0, [sp, #8]
    bcc6:	e000      	b.n	bcca <_svfiprintf_r+0x1b2>
    bcc8:	bf00      	nop
    bcca:	e007      	b.n	bcdc <_svfiprintf_r+0x1c4>
    bccc:	ab05      	add	r3, sp, #20
    bcce:	9300      	str	r3, [sp, #0]
    bcd0:	003a      	movs	r2, r7
    bcd2:	4b0f      	ldr	r3, [pc, #60]	; (bd10 <_svfiprintf_r+0x1f8>)
    bcd4:	0029      	movs	r1, r5
    bcd6:	9802      	ldr	r0, [sp, #8]
    bcd8:	f000 f9ce 	bl	c078 <_printf_i>
    bcdc:	9003      	str	r0, [sp, #12]
    bcde:	9b03      	ldr	r3, [sp, #12]
    bce0:	3301      	adds	r3, #1
    bce2:	d004      	beq.n	bcee <_svfiprintf_r+0x1d6>
    bce4:	696b      	ldr	r3, [r5, #20]
    bce6:	9a03      	ldr	r2, [sp, #12]
    bce8:	189b      	adds	r3, r3, r2
    bcea:	616b      	str	r3, [r5, #20]
    bcec:	e735      	b.n	bb5a <_svfiprintf_r+0x42>
    bcee:	89bb      	ldrh	r3, [r7, #12]
    bcf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bcf2:	065b      	lsls	r3, r3, #25
    bcf4:	d501      	bpl.n	bcfa <_svfiprintf_r+0x1e2>
    bcf6:	2001      	movs	r0, #1
    bcf8:	4240      	negs	r0, r0
    bcfa:	b01f      	add	sp, #124	; 0x7c
    bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcfe:	46c0      	nop			; (mov r8, r8)
    bd00:	0000db5c 	.word	0x0000db5c
    bd04:	0000db62 	.word	0x0000db62
    bd08:	0000db66 	.word	0x0000db66
    bd0c:	00000000 	.word	0x00000000
    bd10:	0000ba55 	.word	0x0000ba55

0000bd14 <__sfputc_r>:
    bd14:	6893      	ldr	r3, [r2, #8]
    bd16:	b510      	push	{r4, lr}
    bd18:	3b01      	subs	r3, #1
    bd1a:	6093      	str	r3, [r2, #8]
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	da05      	bge.n	bd2c <__sfputc_r+0x18>
    bd20:	6994      	ldr	r4, [r2, #24]
    bd22:	42a3      	cmp	r3, r4
    bd24:	db08      	blt.n	bd38 <__sfputc_r+0x24>
    bd26:	b2cb      	uxtb	r3, r1
    bd28:	2b0a      	cmp	r3, #10
    bd2a:	d005      	beq.n	bd38 <__sfputc_r+0x24>
    bd2c:	6813      	ldr	r3, [r2, #0]
    bd2e:	1c58      	adds	r0, r3, #1
    bd30:	6010      	str	r0, [r2, #0]
    bd32:	7019      	strb	r1, [r3, #0]
    bd34:	b2c8      	uxtb	r0, r1
    bd36:	e001      	b.n	bd3c <__sfputc_r+0x28>
    bd38:	f7ff fb2c 	bl	b394 <__swbuf_r>
    bd3c:	bd10      	pop	{r4, pc}

0000bd3e <__sfputs_r>:
    bd3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd40:	0006      	movs	r6, r0
    bd42:	000f      	movs	r7, r1
    bd44:	0014      	movs	r4, r2
    bd46:	18d5      	adds	r5, r2, r3
    bd48:	42ac      	cmp	r4, r5
    bd4a:	d008      	beq.n	bd5e <__sfputs_r+0x20>
    bd4c:	7821      	ldrb	r1, [r4, #0]
    bd4e:	003a      	movs	r2, r7
    bd50:	0030      	movs	r0, r6
    bd52:	f7ff ffdf 	bl	bd14 <__sfputc_r>
    bd56:	3401      	adds	r4, #1
    bd58:	1c43      	adds	r3, r0, #1
    bd5a:	d1f5      	bne.n	bd48 <__sfputs_r+0xa>
    bd5c:	e000      	b.n	bd60 <__sfputs_r+0x22>
    bd5e:	2000      	movs	r0, #0
    bd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000bd64 <_vfiprintf_r>:
    bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd66:	b09f      	sub	sp, #124	; 0x7c
    bd68:	0006      	movs	r6, r0
    bd6a:	000f      	movs	r7, r1
    bd6c:	9202      	str	r2, [sp, #8]
    bd6e:	9305      	str	r3, [sp, #20]
    bd70:	2800      	cmp	r0, #0
    bd72:	d004      	beq.n	bd7e <_vfiprintf_r+0x1a>
    bd74:	6983      	ldr	r3, [r0, #24]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d101      	bne.n	bd7e <_vfiprintf_r+0x1a>
    bd7a:	f7ff fccd 	bl	b718 <__sinit>
    bd7e:	4b7f      	ldr	r3, [pc, #508]	; (bf7c <_vfiprintf_r+0x218>)
    bd80:	429f      	cmp	r7, r3
    bd82:	d101      	bne.n	bd88 <_vfiprintf_r+0x24>
    bd84:	6877      	ldr	r7, [r6, #4]
    bd86:	e008      	b.n	bd9a <_vfiprintf_r+0x36>
    bd88:	4b7d      	ldr	r3, [pc, #500]	; (bf80 <_vfiprintf_r+0x21c>)
    bd8a:	429f      	cmp	r7, r3
    bd8c:	d101      	bne.n	bd92 <_vfiprintf_r+0x2e>
    bd8e:	68b7      	ldr	r7, [r6, #8]
    bd90:	e003      	b.n	bd9a <_vfiprintf_r+0x36>
    bd92:	4b7c      	ldr	r3, [pc, #496]	; (bf84 <_vfiprintf_r+0x220>)
    bd94:	429f      	cmp	r7, r3
    bd96:	d100      	bne.n	bd9a <_vfiprintf_r+0x36>
    bd98:	68f7      	ldr	r7, [r6, #12]
    bd9a:	89bb      	ldrh	r3, [r7, #12]
    bd9c:	071b      	lsls	r3, r3, #28
    bd9e:	d50a      	bpl.n	bdb6 <_vfiprintf_r+0x52>
    bda0:	693b      	ldr	r3, [r7, #16]
    bda2:	2b00      	cmp	r3, #0
    bda4:	d007      	beq.n	bdb6 <_vfiprintf_r+0x52>
    bda6:	2300      	movs	r3, #0
    bda8:	ad06      	add	r5, sp, #24
    bdaa:	616b      	str	r3, [r5, #20]
    bdac:	3320      	adds	r3, #32
    bdae:	766b      	strb	r3, [r5, #25]
    bdb0:	3310      	adds	r3, #16
    bdb2:	76ab      	strb	r3, [r5, #26]
    bdb4:	e03d      	b.n	be32 <_vfiprintf_r+0xce>
    bdb6:	0039      	movs	r1, r7
    bdb8:	0030      	movs	r0, r6
    bdba:	f7ff fb43 	bl	b444 <__swsetup_r>
    bdbe:	2800      	cmp	r0, #0
    bdc0:	d0f1      	beq.n	bda6 <_vfiprintf_r+0x42>
    bdc2:	2001      	movs	r0, #1
    bdc4:	4240      	negs	r0, r0
    bdc6:	e0d6      	b.n	bf76 <_vfiprintf_r+0x212>
    bdc8:	9a05      	ldr	r2, [sp, #20]
    bdca:	1d11      	adds	r1, r2, #4
    bdcc:	6812      	ldr	r2, [r2, #0]
    bdce:	9105      	str	r1, [sp, #20]
    bdd0:	2a00      	cmp	r2, #0
    bdd2:	da00      	bge.n	bdd6 <_vfiprintf_r+0x72>
    bdd4:	e07f      	b.n	bed6 <_vfiprintf_r+0x172>
    bdd6:	9209      	str	r2, [sp, #36]	; 0x24
    bdd8:	3401      	adds	r4, #1
    bdda:	7823      	ldrb	r3, [r4, #0]
    bddc:	2b2e      	cmp	r3, #46	; 0x2e
    bdde:	d100      	bne.n	bde2 <_vfiprintf_r+0x7e>
    bde0:	e08d      	b.n	befe <_vfiprintf_r+0x19a>
    bde2:	7821      	ldrb	r1, [r4, #0]
    bde4:	2203      	movs	r2, #3
    bde6:	4868      	ldr	r0, [pc, #416]	; (bf88 <_vfiprintf_r+0x224>)
    bde8:	f000 fb5a 	bl	c4a0 <memchr>
    bdec:	2800      	cmp	r0, #0
    bdee:	d007      	beq.n	be00 <_vfiprintf_r+0x9c>
    bdf0:	4b65      	ldr	r3, [pc, #404]	; (bf88 <_vfiprintf_r+0x224>)
    bdf2:	682a      	ldr	r2, [r5, #0]
    bdf4:	1ac0      	subs	r0, r0, r3
    bdf6:	2340      	movs	r3, #64	; 0x40
    bdf8:	4083      	lsls	r3, r0
    bdfa:	4313      	orrs	r3, r2
    bdfc:	602b      	str	r3, [r5, #0]
    bdfe:	3401      	adds	r4, #1
    be00:	7821      	ldrb	r1, [r4, #0]
    be02:	1c63      	adds	r3, r4, #1
    be04:	2206      	movs	r2, #6
    be06:	4861      	ldr	r0, [pc, #388]	; (bf8c <_vfiprintf_r+0x228>)
    be08:	9302      	str	r3, [sp, #8]
    be0a:	7629      	strb	r1, [r5, #24]
    be0c:	f000 fb48 	bl	c4a0 <memchr>
    be10:	2800      	cmp	r0, #0
    be12:	d100      	bne.n	be16 <_vfiprintf_r+0xb2>
    be14:	e09d      	b.n	bf52 <_vfiprintf_r+0x1ee>
    be16:	4b5e      	ldr	r3, [pc, #376]	; (bf90 <_vfiprintf_r+0x22c>)
    be18:	2b00      	cmp	r3, #0
    be1a:	d000      	beq.n	be1e <_vfiprintf_r+0xba>
    be1c:	e090      	b.n	bf40 <_vfiprintf_r+0x1dc>
    be1e:	2207      	movs	r2, #7
    be20:	9b05      	ldr	r3, [sp, #20]
    be22:	3307      	adds	r3, #7
    be24:	4393      	bics	r3, r2
    be26:	3308      	adds	r3, #8
    be28:	9305      	str	r3, [sp, #20]
    be2a:	696b      	ldr	r3, [r5, #20]
    be2c:	9a03      	ldr	r2, [sp, #12]
    be2e:	189b      	adds	r3, r3, r2
    be30:	616b      	str	r3, [r5, #20]
    be32:	9c02      	ldr	r4, [sp, #8]
    be34:	7823      	ldrb	r3, [r4, #0]
    be36:	2b00      	cmp	r3, #0
    be38:	d104      	bne.n	be44 <_vfiprintf_r+0xe0>
    be3a:	9b02      	ldr	r3, [sp, #8]
    be3c:	1ae3      	subs	r3, r4, r3
    be3e:	9304      	str	r3, [sp, #16]
    be40:	d012      	beq.n	be68 <_vfiprintf_r+0x104>
    be42:	e003      	b.n	be4c <_vfiprintf_r+0xe8>
    be44:	2b25      	cmp	r3, #37	; 0x25
    be46:	d0f8      	beq.n	be3a <_vfiprintf_r+0xd6>
    be48:	3401      	adds	r4, #1
    be4a:	e7f3      	b.n	be34 <_vfiprintf_r+0xd0>
    be4c:	9b04      	ldr	r3, [sp, #16]
    be4e:	9a02      	ldr	r2, [sp, #8]
    be50:	0039      	movs	r1, r7
    be52:	0030      	movs	r0, r6
    be54:	f7ff ff73 	bl	bd3e <__sfputs_r>
    be58:	1c43      	adds	r3, r0, #1
    be5a:	d100      	bne.n	be5e <_vfiprintf_r+0xfa>
    be5c:	e086      	b.n	bf6c <_vfiprintf_r+0x208>
    be5e:	696a      	ldr	r2, [r5, #20]
    be60:	9b04      	ldr	r3, [sp, #16]
    be62:	4694      	mov	ip, r2
    be64:	4463      	add	r3, ip
    be66:	616b      	str	r3, [r5, #20]
    be68:	7823      	ldrb	r3, [r4, #0]
    be6a:	2b00      	cmp	r3, #0
    be6c:	d07e      	beq.n	bf6c <_vfiprintf_r+0x208>
    be6e:	2201      	movs	r2, #1
    be70:	2300      	movs	r3, #0
    be72:	4252      	negs	r2, r2
    be74:	606a      	str	r2, [r5, #4]
    be76:	a902      	add	r1, sp, #8
    be78:	3254      	adds	r2, #84	; 0x54
    be7a:	1852      	adds	r2, r2, r1
    be7c:	3401      	adds	r4, #1
    be7e:	602b      	str	r3, [r5, #0]
    be80:	60eb      	str	r3, [r5, #12]
    be82:	60ab      	str	r3, [r5, #8]
    be84:	7013      	strb	r3, [r2, #0]
    be86:	65ab      	str	r3, [r5, #88]	; 0x58
    be88:	7821      	ldrb	r1, [r4, #0]
    be8a:	2205      	movs	r2, #5
    be8c:	4841      	ldr	r0, [pc, #260]	; (bf94 <_vfiprintf_r+0x230>)
    be8e:	f000 fb07 	bl	c4a0 <memchr>
    be92:	2800      	cmp	r0, #0
    be94:	d008      	beq.n	bea8 <_vfiprintf_r+0x144>
    be96:	4b3f      	ldr	r3, [pc, #252]	; (bf94 <_vfiprintf_r+0x230>)
    be98:	682a      	ldr	r2, [r5, #0]
    be9a:	1ac0      	subs	r0, r0, r3
    be9c:	2301      	movs	r3, #1
    be9e:	4083      	lsls	r3, r0
    bea0:	4313      	orrs	r3, r2
    bea2:	602b      	str	r3, [r5, #0]
    bea4:	3401      	adds	r4, #1
    bea6:	e7ef      	b.n	be88 <_vfiprintf_r+0x124>
    bea8:	682b      	ldr	r3, [r5, #0]
    beaa:	06da      	lsls	r2, r3, #27
    beac:	d504      	bpl.n	beb8 <_vfiprintf_r+0x154>
    beae:	2253      	movs	r2, #83	; 0x53
    beb0:	2120      	movs	r1, #32
    beb2:	a802      	add	r0, sp, #8
    beb4:	1812      	adds	r2, r2, r0
    beb6:	7011      	strb	r1, [r2, #0]
    beb8:	071a      	lsls	r2, r3, #28
    beba:	d504      	bpl.n	bec6 <_vfiprintf_r+0x162>
    bebc:	2253      	movs	r2, #83	; 0x53
    bebe:	212b      	movs	r1, #43	; 0x2b
    bec0:	a802      	add	r0, sp, #8
    bec2:	1812      	adds	r2, r2, r0
    bec4:	7011      	strb	r1, [r2, #0]
    bec6:	7822      	ldrb	r2, [r4, #0]
    bec8:	2a2a      	cmp	r2, #42	; 0x2a
    beca:	d100      	bne.n	bece <_vfiprintf_r+0x16a>
    becc:	e77c      	b.n	bdc8 <_vfiprintf_r+0x64>
    bece:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bed0:	2000      	movs	r0, #0
    bed2:	210a      	movs	r1, #10
    bed4:	e005      	b.n	bee2 <_vfiprintf_r+0x17e>
    bed6:	4252      	negs	r2, r2
    bed8:	60ea      	str	r2, [r5, #12]
    beda:	2202      	movs	r2, #2
    bedc:	4313      	orrs	r3, r2
    bede:	602b      	str	r3, [r5, #0]
    bee0:	e77a      	b.n	bdd8 <_vfiprintf_r+0x74>
    bee2:	7822      	ldrb	r2, [r4, #0]
    bee4:	3a30      	subs	r2, #48	; 0x30
    bee6:	2a09      	cmp	r2, #9
    bee8:	d804      	bhi.n	bef4 <_vfiprintf_r+0x190>
    beea:	434b      	muls	r3, r1
    beec:	3401      	adds	r4, #1
    beee:	189b      	adds	r3, r3, r2
    bef0:	2001      	movs	r0, #1
    bef2:	e7f6      	b.n	bee2 <_vfiprintf_r+0x17e>
    bef4:	2800      	cmp	r0, #0
    bef6:	d100      	bne.n	befa <_vfiprintf_r+0x196>
    bef8:	e76f      	b.n	bdda <_vfiprintf_r+0x76>
    befa:	9309      	str	r3, [sp, #36]	; 0x24
    befc:	e76d      	b.n	bdda <_vfiprintf_r+0x76>
    befe:	7863      	ldrb	r3, [r4, #1]
    bf00:	2b2a      	cmp	r3, #42	; 0x2a
    bf02:	d10a      	bne.n	bf1a <_vfiprintf_r+0x1b6>
    bf04:	9b05      	ldr	r3, [sp, #20]
    bf06:	3402      	adds	r4, #2
    bf08:	1d1a      	adds	r2, r3, #4
    bf0a:	681b      	ldr	r3, [r3, #0]
    bf0c:	9205      	str	r2, [sp, #20]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	da01      	bge.n	bf16 <_vfiprintf_r+0x1b2>
    bf12:	2301      	movs	r3, #1
    bf14:	425b      	negs	r3, r3
    bf16:	9307      	str	r3, [sp, #28]
    bf18:	e763      	b.n	bde2 <_vfiprintf_r+0x7e>
    bf1a:	2300      	movs	r3, #0
    bf1c:	200a      	movs	r0, #10
    bf1e:	001a      	movs	r2, r3
    bf20:	3401      	adds	r4, #1
    bf22:	606b      	str	r3, [r5, #4]
    bf24:	7821      	ldrb	r1, [r4, #0]
    bf26:	3930      	subs	r1, #48	; 0x30
    bf28:	2909      	cmp	r1, #9
    bf2a:	d804      	bhi.n	bf36 <_vfiprintf_r+0x1d2>
    bf2c:	4342      	muls	r2, r0
    bf2e:	3401      	adds	r4, #1
    bf30:	1852      	adds	r2, r2, r1
    bf32:	2301      	movs	r3, #1
    bf34:	e7f6      	b.n	bf24 <_vfiprintf_r+0x1c0>
    bf36:	2b00      	cmp	r3, #0
    bf38:	d100      	bne.n	bf3c <_vfiprintf_r+0x1d8>
    bf3a:	e752      	b.n	bde2 <_vfiprintf_r+0x7e>
    bf3c:	9207      	str	r2, [sp, #28]
    bf3e:	e750      	b.n	bde2 <_vfiprintf_r+0x7e>
    bf40:	ab05      	add	r3, sp, #20
    bf42:	9300      	str	r3, [sp, #0]
    bf44:	003a      	movs	r2, r7
    bf46:	4b14      	ldr	r3, [pc, #80]	; (bf98 <_vfiprintf_r+0x234>)
    bf48:	0029      	movs	r1, r5
    bf4a:	0030      	movs	r0, r6
    bf4c:	e000      	b.n	bf50 <_vfiprintf_r+0x1ec>
    bf4e:	bf00      	nop
    bf50:	e007      	b.n	bf62 <_vfiprintf_r+0x1fe>
    bf52:	ab05      	add	r3, sp, #20
    bf54:	9300      	str	r3, [sp, #0]
    bf56:	003a      	movs	r2, r7
    bf58:	4b0f      	ldr	r3, [pc, #60]	; (bf98 <_vfiprintf_r+0x234>)
    bf5a:	0029      	movs	r1, r5
    bf5c:	0030      	movs	r0, r6
    bf5e:	f000 f88b 	bl	c078 <_printf_i>
    bf62:	9003      	str	r0, [sp, #12]
    bf64:	9b03      	ldr	r3, [sp, #12]
    bf66:	3301      	adds	r3, #1
    bf68:	d000      	beq.n	bf6c <_vfiprintf_r+0x208>
    bf6a:	e75e      	b.n	be2a <_vfiprintf_r+0xc6>
    bf6c:	89bb      	ldrh	r3, [r7, #12]
    bf6e:	065b      	lsls	r3, r3, #25
    bf70:	d500      	bpl.n	bf74 <_vfiprintf_r+0x210>
    bf72:	e726      	b.n	bdc2 <_vfiprintf_r+0x5e>
    bf74:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bf76:	b01f      	add	sp, #124	; 0x7c
    bf78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf7a:	46c0      	nop			; (mov r8, r8)
    bf7c:	0000dafc 	.word	0x0000dafc
    bf80:	0000db1c 	.word	0x0000db1c
    bf84:	0000db3c 	.word	0x0000db3c
    bf88:	0000db62 	.word	0x0000db62
    bf8c:	0000db66 	.word	0x0000db66
    bf90:	00000000 	.word	0x00000000
    bf94:	0000db5c 	.word	0x0000db5c
    bf98:	0000bd3f 	.word	0x0000bd3f

0000bf9c <_printf_common>:
    bf9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bf9e:	0017      	movs	r7, r2
    bfa0:	9301      	str	r3, [sp, #4]
    bfa2:	688a      	ldr	r2, [r1, #8]
    bfa4:	690b      	ldr	r3, [r1, #16]
    bfa6:	9000      	str	r0, [sp, #0]
    bfa8:	000c      	movs	r4, r1
    bfaa:	4293      	cmp	r3, r2
    bfac:	da00      	bge.n	bfb0 <_printf_common+0x14>
    bfae:	0013      	movs	r3, r2
    bfb0:	0022      	movs	r2, r4
    bfb2:	603b      	str	r3, [r7, #0]
    bfb4:	3243      	adds	r2, #67	; 0x43
    bfb6:	7812      	ldrb	r2, [r2, #0]
    bfb8:	2a00      	cmp	r2, #0
    bfba:	d001      	beq.n	bfc0 <_printf_common+0x24>
    bfbc:	3301      	adds	r3, #1
    bfbe:	603b      	str	r3, [r7, #0]
    bfc0:	6823      	ldr	r3, [r4, #0]
    bfc2:	069b      	lsls	r3, r3, #26
    bfc4:	d502      	bpl.n	bfcc <_printf_common+0x30>
    bfc6:	683b      	ldr	r3, [r7, #0]
    bfc8:	3302      	adds	r3, #2
    bfca:	603b      	str	r3, [r7, #0]
    bfcc:	2506      	movs	r5, #6
    bfce:	6823      	ldr	r3, [r4, #0]
    bfd0:	401d      	ands	r5, r3
    bfd2:	d01e      	beq.n	c012 <_printf_common+0x76>
    bfd4:	0023      	movs	r3, r4
    bfd6:	3343      	adds	r3, #67	; 0x43
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	1e5a      	subs	r2, r3, #1
    bfdc:	4193      	sbcs	r3, r2
    bfde:	6822      	ldr	r2, [r4, #0]
    bfe0:	0692      	lsls	r2, r2, #26
    bfe2:	d51c      	bpl.n	c01e <_printf_common+0x82>
    bfe4:	2030      	movs	r0, #48	; 0x30
    bfe6:	18e1      	adds	r1, r4, r3
    bfe8:	3143      	adds	r1, #67	; 0x43
    bfea:	7008      	strb	r0, [r1, #0]
    bfec:	0021      	movs	r1, r4
    bfee:	1c5a      	adds	r2, r3, #1
    bff0:	3145      	adds	r1, #69	; 0x45
    bff2:	7809      	ldrb	r1, [r1, #0]
    bff4:	18a2      	adds	r2, r4, r2
    bff6:	3243      	adds	r2, #67	; 0x43
    bff8:	3302      	adds	r3, #2
    bffa:	7011      	strb	r1, [r2, #0]
    bffc:	e00f      	b.n	c01e <_printf_common+0x82>
    bffe:	0022      	movs	r2, r4
    c000:	2301      	movs	r3, #1
    c002:	3219      	adds	r2, #25
    c004:	9901      	ldr	r1, [sp, #4]
    c006:	9800      	ldr	r0, [sp, #0]
    c008:	9e08      	ldr	r6, [sp, #32]
    c00a:	47b0      	blx	r6
    c00c:	1c43      	adds	r3, r0, #1
    c00e:	d00e      	beq.n	c02e <_printf_common+0x92>
    c010:	3501      	adds	r5, #1
    c012:	68e3      	ldr	r3, [r4, #12]
    c014:	683a      	ldr	r2, [r7, #0]
    c016:	1a9b      	subs	r3, r3, r2
    c018:	429d      	cmp	r5, r3
    c01a:	dbf0      	blt.n	bffe <_printf_common+0x62>
    c01c:	e7da      	b.n	bfd4 <_printf_common+0x38>
    c01e:	0022      	movs	r2, r4
    c020:	9901      	ldr	r1, [sp, #4]
    c022:	3243      	adds	r2, #67	; 0x43
    c024:	9800      	ldr	r0, [sp, #0]
    c026:	9d08      	ldr	r5, [sp, #32]
    c028:	47a8      	blx	r5
    c02a:	1c43      	adds	r3, r0, #1
    c02c:	d102      	bne.n	c034 <_printf_common+0x98>
    c02e:	2001      	movs	r0, #1
    c030:	4240      	negs	r0, r0
    c032:	e020      	b.n	c076 <_printf_common+0xda>
    c034:	2306      	movs	r3, #6
    c036:	6820      	ldr	r0, [r4, #0]
    c038:	68e1      	ldr	r1, [r4, #12]
    c03a:	683a      	ldr	r2, [r7, #0]
    c03c:	4003      	ands	r3, r0
    c03e:	2500      	movs	r5, #0
    c040:	2b04      	cmp	r3, #4
    c042:	d103      	bne.n	c04c <_printf_common+0xb0>
    c044:	1a8d      	subs	r5, r1, r2
    c046:	43eb      	mvns	r3, r5
    c048:	17db      	asrs	r3, r3, #31
    c04a:	401d      	ands	r5, r3
    c04c:	68a3      	ldr	r3, [r4, #8]
    c04e:	6922      	ldr	r2, [r4, #16]
    c050:	4293      	cmp	r3, r2
    c052:	dd01      	ble.n	c058 <_printf_common+0xbc>
    c054:	1a9b      	subs	r3, r3, r2
    c056:	18ed      	adds	r5, r5, r3
    c058:	2700      	movs	r7, #0
    c05a:	42bd      	cmp	r5, r7
    c05c:	d00a      	beq.n	c074 <_printf_common+0xd8>
    c05e:	0022      	movs	r2, r4
    c060:	2301      	movs	r3, #1
    c062:	321a      	adds	r2, #26
    c064:	9901      	ldr	r1, [sp, #4]
    c066:	9800      	ldr	r0, [sp, #0]
    c068:	9e08      	ldr	r6, [sp, #32]
    c06a:	47b0      	blx	r6
    c06c:	1c43      	adds	r3, r0, #1
    c06e:	d0de      	beq.n	c02e <_printf_common+0x92>
    c070:	3701      	adds	r7, #1
    c072:	e7f2      	b.n	c05a <_printf_common+0xbe>
    c074:	2000      	movs	r0, #0
    c076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000c078 <_printf_i>:
    c078:	b5f0      	push	{r4, r5, r6, r7, lr}
    c07a:	b08b      	sub	sp, #44	; 0x2c
    c07c:	9206      	str	r2, [sp, #24]
    c07e:	000a      	movs	r2, r1
    c080:	3243      	adds	r2, #67	; 0x43
    c082:	9307      	str	r3, [sp, #28]
    c084:	9005      	str	r0, [sp, #20]
    c086:	9204      	str	r2, [sp, #16]
    c088:	7e0a      	ldrb	r2, [r1, #24]
    c08a:	000c      	movs	r4, r1
    c08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c08e:	2a6e      	cmp	r2, #110	; 0x6e
    c090:	d100      	bne.n	c094 <_printf_i+0x1c>
    c092:	e0ab      	b.n	c1ec <_printf_i+0x174>
    c094:	d811      	bhi.n	c0ba <_printf_i+0x42>
    c096:	2a63      	cmp	r2, #99	; 0x63
    c098:	d022      	beq.n	c0e0 <_printf_i+0x68>
    c09a:	d809      	bhi.n	c0b0 <_printf_i+0x38>
    c09c:	2a00      	cmp	r2, #0
    c09e:	d100      	bne.n	c0a2 <_printf_i+0x2a>
    c0a0:	e0b5      	b.n	c20e <_printf_i+0x196>
    c0a2:	2a58      	cmp	r2, #88	; 0x58
    c0a4:	d000      	beq.n	c0a8 <_printf_i+0x30>
    c0a6:	e0c5      	b.n	c234 <_printf_i+0x1bc>
    c0a8:	3145      	adds	r1, #69	; 0x45
    c0aa:	700a      	strb	r2, [r1, #0]
    c0ac:	4a81      	ldr	r2, [pc, #516]	; (c2b4 <_printf_i+0x23c>)
    c0ae:	e04f      	b.n	c150 <_printf_i+0xd8>
    c0b0:	2a64      	cmp	r2, #100	; 0x64
    c0b2:	d01d      	beq.n	c0f0 <_printf_i+0x78>
    c0b4:	2a69      	cmp	r2, #105	; 0x69
    c0b6:	d01b      	beq.n	c0f0 <_printf_i+0x78>
    c0b8:	e0bc      	b.n	c234 <_printf_i+0x1bc>
    c0ba:	2a73      	cmp	r2, #115	; 0x73
    c0bc:	d100      	bne.n	c0c0 <_printf_i+0x48>
    c0be:	e0aa      	b.n	c216 <_printf_i+0x19e>
    c0c0:	d809      	bhi.n	c0d6 <_printf_i+0x5e>
    c0c2:	2a6f      	cmp	r2, #111	; 0x6f
    c0c4:	d029      	beq.n	c11a <_printf_i+0xa2>
    c0c6:	2a70      	cmp	r2, #112	; 0x70
    c0c8:	d000      	beq.n	c0cc <_printf_i+0x54>
    c0ca:	e0b3      	b.n	c234 <_printf_i+0x1bc>
    c0cc:	2220      	movs	r2, #32
    c0ce:	6809      	ldr	r1, [r1, #0]
    c0d0:	430a      	orrs	r2, r1
    c0d2:	6022      	str	r2, [r4, #0]
    c0d4:	e037      	b.n	c146 <_printf_i+0xce>
    c0d6:	2a75      	cmp	r2, #117	; 0x75
    c0d8:	d01f      	beq.n	c11a <_printf_i+0xa2>
    c0da:	2a78      	cmp	r2, #120	; 0x78
    c0dc:	d033      	beq.n	c146 <_printf_i+0xce>
    c0de:	e0a9      	b.n	c234 <_printf_i+0x1bc>
    c0e0:	000e      	movs	r6, r1
    c0e2:	681a      	ldr	r2, [r3, #0]
    c0e4:	3642      	adds	r6, #66	; 0x42
    c0e6:	1d11      	adds	r1, r2, #4
    c0e8:	6019      	str	r1, [r3, #0]
    c0ea:	6813      	ldr	r3, [r2, #0]
    c0ec:	7033      	strb	r3, [r6, #0]
    c0ee:	e0a4      	b.n	c23a <_printf_i+0x1c2>
    c0f0:	6821      	ldr	r1, [r4, #0]
    c0f2:	681a      	ldr	r2, [r3, #0]
    c0f4:	0608      	lsls	r0, r1, #24
    c0f6:	d406      	bmi.n	c106 <_printf_i+0x8e>
    c0f8:	0649      	lsls	r1, r1, #25
    c0fa:	d504      	bpl.n	c106 <_printf_i+0x8e>
    c0fc:	1d11      	adds	r1, r2, #4
    c0fe:	6019      	str	r1, [r3, #0]
    c100:	2300      	movs	r3, #0
    c102:	5ed5      	ldrsh	r5, [r2, r3]
    c104:	e002      	b.n	c10c <_printf_i+0x94>
    c106:	1d11      	adds	r1, r2, #4
    c108:	6019      	str	r1, [r3, #0]
    c10a:	6815      	ldr	r5, [r2, #0]
    c10c:	2d00      	cmp	r5, #0
    c10e:	da3b      	bge.n	c188 <_printf_i+0x110>
    c110:	232d      	movs	r3, #45	; 0x2d
    c112:	9a04      	ldr	r2, [sp, #16]
    c114:	426d      	negs	r5, r5
    c116:	7013      	strb	r3, [r2, #0]
    c118:	e036      	b.n	c188 <_printf_i+0x110>
    c11a:	6821      	ldr	r1, [r4, #0]
    c11c:	681a      	ldr	r2, [r3, #0]
    c11e:	0608      	lsls	r0, r1, #24
    c120:	d406      	bmi.n	c130 <_printf_i+0xb8>
    c122:	0649      	lsls	r1, r1, #25
    c124:	d504      	bpl.n	c130 <_printf_i+0xb8>
    c126:	6815      	ldr	r5, [r2, #0]
    c128:	1d11      	adds	r1, r2, #4
    c12a:	6019      	str	r1, [r3, #0]
    c12c:	b2ad      	uxth	r5, r5
    c12e:	e002      	b.n	c136 <_printf_i+0xbe>
    c130:	1d11      	adds	r1, r2, #4
    c132:	6019      	str	r1, [r3, #0]
    c134:	6815      	ldr	r5, [r2, #0]
    c136:	4b5f      	ldr	r3, [pc, #380]	; (c2b4 <_printf_i+0x23c>)
    c138:	7e22      	ldrb	r2, [r4, #24]
    c13a:	9303      	str	r3, [sp, #12]
    c13c:	2708      	movs	r7, #8
    c13e:	2a6f      	cmp	r2, #111	; 0x6f
    c140:	d01d      	beq.n	c17e <_printf_i+0x106>
    c142:	270a      	movs	r7, #10
    c144:	e01b      	b.n	c17e <_printf_i+0x106>
    c146:	0022      	movs	r2, r4
    c148:	2178      	movs	r1, #120	; 0x78
    c14a:	3245      	adds	r2, #69	; 0x45
    c14c:	7011      	strb	r1, [r2, #0]
    c14e:	4a5a      	ldr	r2, [pc, #360]	; (c2b8 <_printf_i+0x240>)
    c150:	6819      	ldr	r1, [r3, #0]
    c152:	9203      	str	r2, [sp, #12]
    c154:	1d08      	adds	r0, r1, #4
    c156:	6822      	ldr	r2, [r4, #0]
    c158:	6018      	str	r0, [r3, #0]
    c15a:	680d      	ldr	r5, [r1, #0]
    c15c:	0610      	lsls	r0, r2, #24
    c15e:	d402      	bmi.n	c166 <_printf_i+0xee>
    c160:	0650      	lsls	r0, r2, #25
    c162:	d500      	bpl.n	c166 <_printf_i+0xee>
    c164:	b2ad      	uxth	r5, r5
    c166:	07d3      	lsls	r3, r2, #31
    c168:	d502      	bpl.n	c170 <_printf_i+0xf8>
    c16a:	2320      	movs	r3, #32
    c16c:	431a      	orrs	r2, r3
    c16e:	6022      	str	r2, [r4, #0]
    c170:	2710      	movs	r7, #16
    c172:	2d00      	cmp	r5, #0
    c174:	d103      	bne.n	c17e <_printf_i+0x106>
    c176:	2320      	movs	r3, #32
    c178:	6822      	ldr	r2, [r4, #0]
    c17a:	439a      	bics	r2, r3
    c17c:	6022      	str	r2, [r4, #0]
    c17e:	0023      	movs	r3, r4
    c180:	2200      	movs	r2, #0
    c182:	3343      	adds	r3, #67	; 0x43
    c184:	701a      	strb	r2, [r3, #0]
    c186:	e002      	b.n	c18e <_printf_i+0x116>
    c188:	270a      	movs	r7, #10
    c18a:	4b4a      	ldr	r3, [pc, #296]	; (c2b4 <_printf_i+0x23c>)
    c18c:	9303      	str	r3, [sp, #12]
    c18e:	6863      	ldr	r3, [r4, #4]
    c190:	60a3      	str	r3, [r4, #8]
    c192:	2b00      	cmp	r3, #0
    c194:	db09      	blt.n	c1aa <_printf_i+0x132>
    c196:	2204      	movs	r2, #4
    c198:	6821      	ldr	r1, [r4, #0]
    c19a:	4391      	bics	r1, r2
    c19c:	6021      	str	r1, [r4, #0]
    c19e:	2d00      	cmp	r5, #0
    c1a0:	d105      	bne.n	c1ae <_printf_i+0x136>
    c1a2:	9e04      	ldr	r6, [sp, #16]
    c1a4:	2b00      	cmp	r3, #0
    c1a6:	d011      	beq.n	c1cc <_printf_i+0x154>
    c1a8:	e07b      	b.n	c2a2 <_printf_i+0x22a>
    c1aa:	2d00      	cmp	r5, #0
    c1ac:	d079      	beq.n	c2a2 <_printf_i+0x22a>
    c1ae:	9e04      	ldr	r6, [sp, #16]
    c1b0:	0028      	movs	r0, r5
    c1b2:	0039      	movs	r1, r7
    c1b4:	f7fe fefa 	bl	afac <__aeabi_uidivmod>
    c1b8:	9b03      	ldr	r3, [sp, #12]
    c1ba:	3e01      	subs	r6, #1
    c1bc:	5c5b      	ldrb	r3, [r3, r1]
    c1be:	0028      	movs	r0, r5
    c1c0:	7033      	strb	r3, [r6, #0]
    c1c2:	0039      	movs	r1, r7
    c1c4:	f7fe fe6c 	bl	aea0 <__aeabi_uidiv>
    c1c8:	1e05      	subs	r5, r0, #0
    c1ca:	d1f1      	bne.n	c1b0 <_printf_i+0x138>
    c1cc:	2f08      	cmp	r7, #8
    c1ce:	d109      	bne.n	c1e4 <_printf_i+0x16c>
    c1d0:	6823      	ldr	r3, [r4, #0]
    c1d2:	07db      	lsls	r3, r3, #31
    c1d4:	d506      	bpl.n	c1e4 <_printf_i+0x16c>
    c1d6:	6863      	ldr	r3, [r4, #4]
    c1d8:	6922      	ldr	r2, [r4, #16]
    c1da:	4293      	cmp	r3, r2
    c1dc:	dc02      	bgt.n	c1e4 <_printf_i+0x16c>
    c1de:	2330      	movs	r3, #48	; 0x30
    c1e0:	3e01      	subs	r6, #1
    c1e2:	7033      	strb	r3, [r6, #0]
    c1e4:	9b04      	ldr	r3, [sp, #16]
    c1e6:	1b9b      	subs	r3, r3, r6
    c1e8:	6123      	str	r3, [r4, #16]
    c1ea:	e02b      	b.n	c244 <_printf_i+0x1cc>
    c1ec:	6809      	ldr	r1, [r1, #0]
    c1ee:	681a      	ldr	r2, [r3, #0]
    c1f0:	0608      	lsls	r0, r1, #24
    c1f2:	d407      	bmi.n	c204 <_printf_i+0x18c>
    c1f4:	0649      	lsls	r1, r1, #25
    c1f6:	d505      	bpl.n	c204 <_printf_i+0x18c>
    c1f8:	1d11      	adds	r1, r2, #4
    c1fa:	6019      	str	r1, [r3, #0]
    c1fc:	6813      	ldr	r3, [r2, #0]
    c1fe:	8aa2      	ldrh	r2, [r4, #20]
    c200:	801a      	strh	r2, [r3, #0]
    c202:	e004      	b.n	c20e <_printf_i+0x196>
    c204:	1d11      	adds	r1, r2, #4
    c206:	6019      	str	r1, [r3, #0]
    c208:	6813      	ldr	r3, [r2, #0]
    c20a:	6962      	ldr	r2, [r4, #20]
    c20c:	601a      	str	r2, [r3, #0]
    c20e:	2300      	movs	r3, #0
    c210:	9e04      	ldr	r6, [sp, #16]
    c212:	6123      	str	r3, [r4, #16]
    c214:	e016      	b.n	c244 <_printf_i+0x1cc>
    c216:	681a      	ldr	r2, [r3, #0]
    c218:	1d11      	adds	r1, r2, #4
    c21a:	6019      	str	r1, [r3, #0]
    c21c:	6816      	ldr	r6, [r2, #0]
    c21e:	2100      	movs	r1, #0
    c220:	6862      	ldr	r2, [r4, #4]
    c222:	0030      	movs	r0, r6
    c224:	f000 f93c 	bl	c4a0 <memchr>
    c228:	2800      	cmp	r0, #0
    c22a:	d001      	beq.n	c230 <_printf_i+0x1b8>
    c22c:	1b80      	subs	r0, r0, r6
    c22e:	6060      	str	r0, [r4, #4]
    c230:	6863      	ldr	r3, [r4, #4]
    c232:	e003      	b.n	c23c <_printf_i+0x1c4>
    c234:	0026      	movs	r6, r4
    c236:	3642      	adds	r6, #66	; 0x42
    c238:	7032      	strb	r2, [r6, #0]
    c23a:	2301      	movs	r3, #1
    c23c:	6123      	str	r3, [r4, #16]
    c23e:	2300      	movs	r3, #0
    c240:	9a04      	ldr	r2, [sp, #16]
    c242:	7013      	strb	r3, [r2, #0]
    c244:	9b07      	ldr	r3, [sp, #28]
    c246:	aa09      	add	r2, sp, #36	; 0x24
    c248:	9300      	str	r3, [sp, #0]
    c24a:	0021      	movs	r1, r4
    c24c:	9b06      	ldr	r3, [sp, #24]
    c24e:	9805      	ldr	r0, [sp, #20]
    c250:	f7ff fea4 	bl	bf9c <_printf_common>
    c254:	1c43      	adds	r3, r0, #1
    c256:	d102      	bne.n	c25e <_printf_i+0x1e6>
    c258:	2001      	movs	r0, #1
    c25a:	4240      	negs	r0, r0
    c25c:	e027      	b.n	c2ae <_printf_i+0x236>
    c25e:	6923      	ldr	r3, [r4, #16]
    c260:	0032      	movs	r2, r6
    c262:	9906      	ldr	r1, [sp, #24]
    c264:	9805      	ldr	r0, [sp, #20]
    c266:	9d07      	ldr	r5, [sp, #28]
    c268:	47a8      	blx	r5
    c26a:	1c43      	adds	r3, r0, #1
    c26c:	d0f4      	beq.n	c258 <_printf_i+0x1e0>
    c26e:	6823      	ldr	r3, [r4, #0]
    c270:	2500      	movs	r5, #0
    c272:	079b      	lsls	r3, r3, #30
    c274:	d40f      	bmi.n	c296 <_printf_i+0x21e>
    c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c278:	68e0      	ldr	r0, [r4, #12]
    c27a:	4298      	cmp	r0, r3
    c27c:	da17      	bge.n	c2ae <_printf_i+0x236>
    c27e:	0018      	movs	r0, r3
    c280:	e015      	b.n	c2ae <_printf_i+0x236>
    c282:	0022      	movs	r2, r4
    c284:	2301      	movs	r3, #1
    c286:	3219      	adds	r2, #25
    c288:	9906      	ldr	r1, [sp, #24]
    c28a:	9805      	ldr	r0, [sp, #20]
    c28c:	9e07      	ldr	r6, [sp, #28]
    c28e:	47b0      	blx	r6
    c290:	1c43      	adds	r3, r0, #1
    c292:	d0e1      	beq.n	c258 <_printf_i+0x1e0>
    c294:	3501      	adds	r5, #1
    c296:	68e3      	ldr	r3, [r4, #12]
    c298:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c29a:	1a9b      	subs	r3, r3, r2
    c29c:	429d      	cmp	r5, r3
    c29e:	dbf0      	blt.n	c282 <_printf_i+0x20a>
    c2a0:	e7e9      	b.n	c276 <_printf_i+0x1fe>
    c2a2:	0026      	movs	r6, r4
    c2a4:	9b03      	ldr	r3, [sp, #12]
    c2a6:	3642      	adds	r6, #66	; 0x42
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	7033      	strb	r3, [r6, #0]
    c2ac:	e78e      	b.n	c1cc <_printf_i+0x154>
    c2ae:	b00b      	add	sp, #44	; 0x2c
    c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b2:	46c0      	nop			; (mov r8, r8)
    c2b4:	0000db6d 	.word	0x0000db6d
    c2b8:	0000db7e 	.word	0x0000db7e

0000c2bc <_putc_r>:
    c2bc:	b570      	push	{r4, r5, r6, lr}
    c2be:	0006      	movs	r6, r0
    c2c0:	000d      	movs	r5, r1
    c2c2:	0014      	movs	r4, r2
    c2c4:	2800      	cmp	r0, #0
    c2c6:	d004      	beq.n	c2d2 <_putc_r+0x16>
    c2c8:	6983      	ldr	r3, [r0, #24]
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	d101      	bne.n	c2d2 <_putc_r+0x16>
    c2ce:	f7ff fa23 	bl	b718 <__sinit>
    c2d2:	4b12      	ldr	r3, [pc, #72]	; (c31c <_putc_r+0x60>)
    c2d4:	429c      	cmp	r4, r3
    c2d6:	d101      	bne.n	c2dc <_putc_r+0x20>
    c2d8:	6874      	ldr	r4, [r6, #4]
    c2da:	e008      	b.n	c2ee <_putc_r+0x32>
    c2dc:	4b10      	ldr	r3, [pc, #64]	; (c320 <_putc_r+0x64>)
    c2de:	429c      	cmp	r4, r3
    c2e0:	d101      	bne.n	c2e6 <_putc_r+0x2a>
    c2e2:	68b4      	ldr	r4, [r6, #8]
    c2e4:	e003      	b.n	c2ee <_putc_r+0x32>
    c2e6:	4b0f      	ldr	r3, [pc, #60]	; (c324 <_putc_r+0x68>)
    c2e8:	429c      	cmp	r4, r3
    c2ea:	d100      	bne.n	c2ee <_putc_r+0x32>
    c2ec:	68f4      	ldr	r4, [r6, #12]
    c2ee:	68a3      	ldr	r3, [r4, #8]
    c2f0:	3b01      	subs	r3, #1
    c2f2:	60a3      	str	r3, [r4, #8]
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	da05      	bge.n	c304 <_putc_r+0x48>
    c2f8:	69a2      	ldr	r2, [r4, #24]
    c2fa:	4293      	cmp	r3, r2
    c2fc:	db08      	blt.n	c310 <_putc_r+0x54>
    c2fe:	b2eb      	uxtb	r3, r5
    c300:	2b0a      	cmp	r3, #10
    c302:	d005      	beq.n	c310 <_putc_r+0x54>
    c304:	6823      	ldr	r3, [r4, #0]
    c306:	b2e8      	uxtb	r0, r5
    c308:	1c5a      	adds	r2, r3, #1
    c30a:	6022      	str	r2, [r4, #0]
    c30c:	701d      	strb	r5, [r3, #0]
    c30e:	e004      	b.n	c31a <_putc_r+0x5e>
    c310:	0022      	movs	r2, r4
    c312:	0029      	movs	r1, r5
    c314:	0030      	movs	r0, r6
    c316:	f7ff f83d 	bl	b394 <__swbuf_r>
    c31a:	bd70      	pop	{r4, r5, r6, pc}
    c31c:	0000dafc 	.word	0x0000dafc
    c320:	0000db1c 	.word	0x0000db1c
    c324:	0000db3c 	.word	0x0000db3c

0000c328 <_sbrk_r>:
    c328:	2300      	movs	r3, #0
    c32a:	b570      	push	{r4, r5, r6, lr}
    c32c:	4c06      	ldr	r4, [pc, #24]	; (c348 <_sbrk_r+0x20>)
    c32e:	0005      	movs	r5, r0
    c330:	0008      	movs	r0, r1
    c332:	6023      	str	r3, [r4, #0]
    c334:	f7fd f980 	bl	9638 <_sbrk>
    c338:	1c43      	adds	r3, r0, #1
    c33a:	d103      	bne.n	c344 <_sbrk_r+0x1c>
    c33c:	6823      	ldr	r3, [r4, #0]
    c33e:	2b00      	cmp	r3, #0
    c340:	d000      	beq.n	c344 <_sbrk_r+0x1c>
    c342:	602b      	str	r3, [r5, #0]
    c344:	bd70      	pop	{r4, r5, r6, pc}
    c346:	46c0      	nop			; (mov r8, r8)
    c348:	200003d4 	.word	0x200003d4

0000c34c <__sread>:
    c34c:	b570      	push	{r4, r5, r6, lr}
    c34e:	000c      	movs	r4, r1
    c350:	250e      	movs	r5, #14
    c352:	5f49      	ldrsh	r1, [r1, r5]
    c354:	f000 f8ea 	bl	c52c <_read_r>
    c358:	2800      	cmp	r0, #0
    c35a:	db03      	blt.n	c364 <__sread+0x18>
    c35c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c35e:	181b      	adds	r3, r3, r0
    c360:	6563      	str	r3, [r4, #84]	; 0x54
    c362:	e003      	b.n	c36c <__sread+0x20>
    c364:	89a2      	ldrh	r2, [r4, #12]
    c366:	4b02      	ldr	r3, [pc, #8]	; (c370 <__sread+0x24>)
    c368:	4013      	ands	r3, r2
    c36a:	81a3      	strh	r3, [r4, #12]
    c36c:	bd70      	pop	{r4, r5, r6, pc}
    c36e:	46c0      	nop			; (mov r8, r8)
    c370:	ffffefff 	.word	0xffffefff

0000c374 <__swrite>:
    c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c376:	001f      	movs	r7, r3
    c378:	898b      	ldrh	r3, [r1, #12]
    c37a:	0005      	movs	r5, r0
    c37c:	000c      	movs	r4, r1
    c37e:	0016      	movs	r6, r2
    c380:	05db      	lsls	r3, r3, #23
    c382:	d505      	bpl.n	c390 <__swrite+0x1c>
    c384:	230e      	movs	r3, #14
    c386:	5ec9      	ldrsh	r1, [r1, r3]
    c388:	2200      	movs	r2, #0
    c38a:	2302      	movs	r3, #2
    c38c:	f000 f874 	bl	c478 <_lseek_r>
    c390:	89a2      	ldrh	r2, [r4, #12]
    c392:	4b05      	ldr	r3, [pc, #20]	; (c3a8 <__swrite+0x34>)
    c394:	0028      	movs	r0, r5
    c396:	4013      	ands	r3, r2
    c398:	81a3      	strh	r3, [r4, #12]
    c39a:	0032      	movs	r2, r6
    c39c:	230e      	movs	r3, #14
    c39e:	5ee1      	ldrsh	r1, [r4, r3]
    c3a0:	003b      	movs	r3, r7
    c3a2:	f000 f81f 	bl	c3e4 <_write_r>
    c3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3a8:	ffffefff 	.word	0xffffefff

0000c3ac <__sseek>:
    c3ac:	b570      	push	{r4, r5, r6, lr}
    c3ae:	000c      	movs	r4, r1
    c3b0:	250e      	movs	r5, #14
    c3b2:	5f49      	ldrsh	r1, [r1, r5]
    c3b4:	f000 f860 	bl	c478 <_lseek_r>
    c3b8:	89a3      	ldrh	r3, [r4, #12]
    c3ba:	1c42      	adds	r2, r0, #1
    c3bc:	d103      	bne.n	c3c6 <__sseek+0x1a>
    c3be:	4a05      	ldr	r2, [pc, #20]	; (c3d4 <__sseek+0x28>)
    c3c0:	4013      	ands	r3, r2
    c3c2:	81a3      	strh	r3, [r4, #12]
    c3c4:	e004      	b.n	c3d0 <__sseek+0x24>
    c3c6:	2280      	movs	r2, #128	; 0x80
    c3c8:	0152      	lsls	r2, r2, #5
    c3ca:	4313      	orrs	r3, r2
    c3cc:	81a3      	strh	r3, [r4, #12]
    c3ce:	6560      	str	r0, [r4, #84]	; 0x54
    c3d0:	bd70      	pop	{r4, r5, r6, pc}
    c3d2:	46c0      	nop			; (mov r8, r8)
    c3d4:	ffffefff 	.word	0xffffefff

0000c3d8 <__sclose>:
    c3d8:	b510      	push	{r4, lr}
    c3da:	230e      	movs	r3, #14
    c3dc:	5ec9      	ldrsh	r1, [r1, r3]
    c3de:	f000 f815 	bl	c40c <_close_r>
    c3e2:	bd10      	pop	{r4, pc}

0000c3e4 <_write_r>:
    c3e4:	b570      	push	{r4, r5, r6, lr}
    c3e6:	0005      	movs	r5, r0
    c3e8:	0008      	movs	r0, r1
    c3ea:	0011      	movs	r1, r2
    c3ec:	2200      	movs	r2, #0
    c3ee:	4c06      	ldr	r4, [pc, #24]	; (c408 <_write_r+0x24>)
    c3f0:	6022      	str	r2, [r4, #0]
    c3f2:	001a      	movs	r2, r3
    c3f4:	f7fd f8ea 	bl	95cc <_write>
    c3f8:	1c43      	adds	r3, r0, #1
    c3fa:	d103      	bne.n	c404 <_write_r+0x20>
    c3fc:	6823      	ldr	r3, [r4, #0]
    c3fe:	2b00      	cmp	r3, #0
    c400:	d000      	beq.n	c404 <_write_r+0x20>
    c402:	602b      	str	r3, [r5, #0]
    c404:	bd70      	pop	{r4, r5, r6, pc}
    c406:	46c0      	nop			; (mov r8, r8)
    c408:	200003d4 	.word	0x200003d4

0000c40c <_close_r>:
    c40c:	2300      	movs	r3, #0
    c40e:	b570      	push	{r4, r5, r6, lr}
    c410:	4c06      	ldr	r4, [pc, #24]	; (c42c <_close_r+0x20>)
    c412:	0005      	movs	r5, r0
    c414:	0008      	movs	r0, r1
    c416:	6023      	str	r3, [r4, #0]
    c418:	f7fd f92c 	bl	9674 <_close>
    c41c:	1c43      	adds	r3, r0, #1
    c41e:	d103      	bne.n	c428 <_close_r+0x1c>
    c420:	6823      	ldr	r3, [r4, #0]
    c422:	2b00      	cmp	r3, #0
    c424:	d000      	beq.n	c428 <_close_r+0x1c>
    c426:	602b      	str	r3, [r5, #0]
    c428:	bd70      	pop	{r4, r5, r6, pc}
    c42a:	46c0      	nop			; (mov r8, r8)
    c42c:	200003d4 	.word	0x200003d4

0000c430 <_fstat_r>:
    c430:	2300      	movs	r3, #0
    c432:	b570      	push	{r4, r5, r6, lr}
    c434:	4c06      	ldr	r4, [pc, #24]	; (c450 <_fstat_r+0x20>)
    c436:	0005      	movs	r5, r0
    c438:	0008      	movs	r0, r1
    c43a:	0011      	movs	r1, r2
    c43c:	6023      	str	r3, [r4, #0]
    c43e:	f7fd f923 	bl	9688 <_fstat>
    c442:	1c43      	adds	r3, r0, #1
    c444:	d103      	bne.n	c44e <_fstat_r+0x1e>
    c446:	6823      	ldr	r3, [r4, #0]
    c448:	2b00      	cmp	r3, #0
    c44a:	d000      	beq.n	c44e <_fstat_r+0x1e>
    c44c:	602b      	str	r3, [r5, #0]
    c44e:	bd70      	pop	{r4, r5, r6, pc}
    c450:	200003d4 	.word	0x200003d4

0000c454 <_isatty_r>:
    c454:	2300      	movs	r3, #0
    c456:	b570      	push	{r4, r5, r6, lr}
    c458:	4c06      	ldr	r4, [pc, #24]	; (c474 <_isatty_r+0x20>)
    c45a:	0005      	movs	r5, r0
    c45c:	0008      	movs	r0, r1
    c45e:	6023      	str	r3, [r4, #0]
    c460:	f7fd f920 	bl	96a4 <_isatty>
    c464:	1c43      	adds	r3, r0, #1
    c466:	d103      	bne.n	c470 <_isatty_r+0x1c>
    c468:	6823      	ldr	r3, [r4, #0]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d000      	beq.n	c470 <_isatty_r+0x1c>
    c46e:	602b      	str	r3, [r5, #0]
    c470:	bd70      	pop	{r4, r5, r6, pc}
    c472:	46c0      	nop			; (mov r8, r8)
    c474:	200003d4 	.word	0x200003d4

0000c478 <_lseek_r>:
    c478:	b570      	push	{r4, r5, r6, lr}
    c47a:	0005      	movs	r5, r0
    c47c:	0008      	movs	r0, r1
    c47e:	0011      	movs	r1, r2
    c480:	2200      	movs	r2, #0
    c482:	4c06      	ldr	r4, [pc, #24]	; (c49c <_lseek_r+0x24>)
    c484:	6022      	str	r2, [r4, #0]
    c486:	001a      	movs	r2, r3
    c488:	f7fd f916 	bl	96b8 <_lseek>
    c48c:	1c43      	adds	r3, r0, #1
    c48e:	d103      	bne.n	c498 <_lseek_r+0x20>
    c490:	6823      	ldr	r3, [r4, #0]
    c492:	2b00      	cmp	r3, #0
    c494:	d000      	beq.n	c498 <_lseek_r+0x20>
    c496:	602b      	str	r3, [r5, #0]
    c498:	bd70      	pop	{r4, r5, r6, pc}
    c49a:	46c0      	nop			; (mov r8, r8)
    c49c:	200003d4 	.word	0x200003d4

0000c4a0 <memchr>:
    c4a0:	b2c9      	uxtb	r1, r1
    c4a2:	1882      	adds	r2, r0, r2
    c4a4:	4290      	cmp	r0, r2
    c4a6:	d004      	beq.n	c4b2 <memchr+0x12>
    c4a8:	7803      	ldrb	r3, [r0, #0]
    c4aa:	428b      	cmp	r3, r1
    c4ac:	d002      	beq.n	c4b4 <memchr+0x14>
    c4ae:	3001      	adds	r0, #1
    c4b0:	e7f8      	b.n	c4a4 <memchr+0x4>
    c4b2:	2000      	movs	r0, #0
    c4b4:	4770      	bx	lr

0000c4b6 <memmove>:
    c4b6:	b510      	push	{r4, lr}
    c4b8:	4288      	cmp	r0, r1
    c4ba:	d902      	bls.n	c4c2 <memmove+0xc>
    c4bc:	188b      	adds	r3, r1, r2
    c4be:	4298      	cmp	r0, r3
    c4c0:	d301      	bcc.n	c4c6 <memmove+0x10>
    c4c2:	2300      	movs	r3, #0
    c4c4:	e005      	b.n	c4d2 <memmove+0x1c>
    c4c6:	1a9b      	subs	r3, r3, r2
    c4c8:	3a01      	subs	r2, #1
    c4ca:	d308      	bcc.n	c4de <memmove+0x28>
    c4cc:	5c99      	ldrb	r1, [r3, r2]
    c4ce:	5481      	strb	r1, [r0, r2]
    c4d0:	e7fa      	b.n	c4c8 <memmove+0x12>
    c4d2:	4293      	cmp	r3, r2
    c4d4:	d003      	beq.n	c4de <memmove+0x28>
    c4d6:	5ccc      	ldrb	r4, [r1, r3]
    c4d8:	54c4      	strb	r4, [r0, r3]
    c4da:	3301      	adds	r3, #1
    c4dc:	e7f9      	b.n	c4d2 <memmove+0x1c>
    c4de:	bd10      	pop	{r4, pc}

0000c4e0 <_realloc_r>:
    c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4e2:	0006      	movs	r6, r0
    c4e4:	000c      	movs	r4, r1
    c4e6:	0015      	movs	r5, r2
    c4e8:	2900      	cmp	r1, #0
    c4ea:	d104      	bne.n	c4f6 <_realloc_r+0x16>
    c4ec:	0011      	movs	r1, r2
    c4ee:	f7ff fa5b 	bl	b9a8 <_malloc_r>
    c4f2:	0004      	movs	r4, r0
    c4f4:	e018      	b.n	c528 <_realloc_r+0x48>
    c4f6:	2a00      	cmp	r2, #0
    c4f8:	d103      	bne.n	c502 <_realloc_r+0x22>
    c4fa:	f7ff fa0f 	bl	b91c <_free_r>
    c4fe:	002c      	movs	r4, r5
    c500:	e012      	b.n	c528 <_realloc_r+0x48>
    c502:	f000 f827 	bl	c554 <_malloc_usable_size_r>
    c506:	4285      	cmp	r5, r0
    c508:	d90e      	bls.n	c528 <_realloc_r+0x48>
    c50a:	0029      	movs	r1, r5
    c50c:	0030      	movs	r0, r6
    c50e:	f7ff fa4b 	bl	b9a8 <_malloc_r>
    c512:	1e07      	subs	r7, r0, #0
    c514:	d007      	beq.n	c526 <_realloc_r+0x46>
    c516:	0021      	movs	r1, r4
    c518:	002a      	movs	r2, r5
    c51a:	f7fe fd9f 	bl	b05c <memcpy>
    c51e:	0021      	movs	r1, r4
    c520:	0030      	movs	r0, r6
    c522:	f7ff f9fb 	bl	b91c <_free_r>
    c526:	003c      	movs	r4, r7
    c528:	0020      	movs	r0, r4
    c52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c52c <_read_r>:
    c52c:	b570      	push	{r4, r5, r6, lr}
    c52e:	0005      	movs	r5, r0
    c530:	0008      	movs	r0, r1
    c532:	0011      	movs	r1, r2
    c534:	2200      	movs	r2, #0
    c536:	4c06      	ldr	r4, [pc, #24]	; (c550 <_read_r+0x24>)
    c538:	6022      	str	r2, [r4, #0]
    c53a:	001a      	movs	r2, r3
    c53c:	f7fd f81c 	bl	9578 <_read>
    c540:	1c43      	adds	r3, r0, #1
    c542:	d103      	bne.n	c54c <_read_r+0x20>
    c544:	6823      	ldr	r3, [r4, #0]
    c546:	2b00      	cmp	r3, #0
    c548:	d000      	beq.n	c54c <_read_r+0x20>
    c54a:	602b      	str	r3, [r5, #0]
    c54c:	bd70      	pop	{r4, r5, r6, pc}
    c54e:	46c0      	nop			; (mov r8, r8)
    c550:	200003d4 	.word	0x200003d4

0000c554 <_malloc_usable_size_r>:
    c554:	1f0b      	subs	r3, r1, #4
    c556:	681a      	ldr	r2, [r3, #0]
    c558:	1f10      	subs	r0, r2, #4
    c55a:	2a00      	cmp	r2, #0
    c55c:	da04      	bge.n	c568 <_malloc_usable_size_r+0x14>
    c55e:	1889      	adds	r1, r1, r2
    c560:	3904      	subs	r1, #4
    c562:	680b      	ldr	r3, [r1, #0]
    c564:	18d0      	adds	r0, r2, r3
    c566:	3804      	subs	r0, #4
    c568:	4770      	bx	lr
    c56a:	0000      	movs	r0, r0
    c56c:	42002c00 	.word	0x42002c00
    c570:	42003000 	.word	0x42003000
    c574:	42003400 	.word	0x42003400
    c578:	42003800 	.word	0x42003800
    c57c:	42003c00 	.word	0x42003c00
    c580:	1d1c1c1b 	.word	0x1d1c1c1b
    c584:	0000001d 	.word	0x0000001d
    c588:	10000800 	.word	0x10000800
    c58c:	40002000 	.word	0x40002000
    c590:	00008000 	.word	0x00008000
    c594:	50504128 	.word	0x50504128
    c598:	52452829 	.word	0x52452829
    c59c:	255b2952 	.word	0x255b2952
    c5a0:	255b5d73 	.word	0x255b5d73
    c5a4:	00005d64 	.word	0x00005d64
    c5a8:	61766e69 	.word	0x61766e69
    c5ac:	6564696c 	.word	0x6564696c
    c5b0:	636f6920 	.word	0x636f6920
    c5b4:	6320746c 	.word	0x6320746c
    c5b8:	0000646d 	.word	0x0000646d

0000c5bc <__FUNCTION__.13304>:
    c5bc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    c5cc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    c5dc:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
    c5ec:	6b617720 74207075 63206568 00706968      wakup the chip.
    c5fc:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    c60c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    c61c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    c62c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    c63c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    c64c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    c65c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    c66c:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    c67c:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    c68c:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    c69c:	64207070 276e6469 65732074 58522074     pp didn't set RX
    c6ac:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    c6bc:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    c6cc:	61462029 2065736c 65746e69 70757272     ) False interrup
    c6dc:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    c6ec:	74206c69 6552206f 69206461 7265746e     il to Read inter
    c6fc:	74707572 67657220 00000000 66696828     rupt reg....(hif
    c70c:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    c71c:	65687420 69686320 00000070 46494828      the chip...(HIF
    c72c:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    c73c:	746e6920 75727265 25207470 72742064      interrupt %d tr
    c74c:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    c75c:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    c76c:	72612064 656d7567 0000746e 20505041     d argument..APP 
    c77c:	75716552 65747365 69532064 6920657a     Requested Size i
    c78c:	616c2073 72656772 61687420 6874206e     s larger than th
    c79c:	65722065 65766963 75622064 72656666     e recived buffer
    c7ac:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    c7bc:	20505041 75716552 65747365 64412064     APP Requested Ad
    c7cc:	73657264 65622073 646e6f79 65687420     dress beyond the
    c7dc:	63657220 64657669 66756220 20726566      recived buffer 
    c7ec:	72646461 20737365 20646e61 676e656c     address and leng
    c7fc:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
    c80c:	00002474 0000244c 00002444 0000245c     t$..L$..D$..\$..
    c81c:	00002454 00002474 00002464 0000246c     T$..t$..d$..l$..

0000c82c <__FUNCTION__.12484>:
    c82c:	5f666968 646e6573 00000000              hif_send....

0000c838 <__FUNCTION__.12494>:
    c838:	5f666968 00727369                       hif_isr.

0000c840 <__FUNCTION__.12500>:
    c840:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000c850 <__FUNCTION__.12515>:
    c850:	5f666968 65636572 00657669              hif_receive.

0000c85c <__FUNCTION__.12530>:
    c85c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    c86c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    c87c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    c88c:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    c89c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    c8ac:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    c8bc:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    c8cc:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    c8dc:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    c8ec:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    c8fc:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    c90c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    c91c:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
    c92c:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
    c93c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    c94c:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    c95c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    c96c:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
    c97c:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
    c98c:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
    c99c:	2065626f 75716572 73747365 72657020     obe requests per
    c9ac:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
    c9bc:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
    c9cc:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
    c9dc:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
    c9ec:	00000a75 206e694d 76697264 76207265     u...Min driver v
    c9fc:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
    ca0c:	72727543 69726420 20726576 3a726576     Curr driver ver:
    ca1c:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
    ca2c:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
    ca3c:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
    ca4c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    ca5c:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    ca6c:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    ca7c:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    ca8c:	20706557 2079656b 65646e69 64252078     Wep key index %d
    ca9c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    caac:	2079656b 676e656c 25206874 00000a64     key length %d...
    cabc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    cacc:	656c2079 6874676e 00000000 65646e75     y length....unde
    cadc:	656e6966 65732064 79742063 00006570     fined sec type..
    caec:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
    cafc:	6420746f 6e696665 00006465 7473694c     ot defined..List
    cb0c:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
    cb1c:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
    cb2c:	31312072 00000000 45574f50 41532052     r 11....POWER SA
    cb3c:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    cb4c:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    cb5c:	66754220 20726566 65637865 64656465      Buffer exceeded
    cb6c:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    cb7c:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    cb8c:	00000000                                ....

0000cb90 <__FUNCTION__.12457>:
    cb90:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000cb9c <__FUNCTION__.12481>:
    cb9c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000cbac <__FUNCTION__.12509>:
    cbac:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    cbbc:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    cbcc:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    cbdc:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
    cbec:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
    cbfc:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
    cc0c:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
    cc1c:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
    cc2c:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
    cc3c:	61747320 3a5d7472 69616620 6572206c      start]: fail re
    cc4c:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
    cc5c:	0000002e 6c696166 74206465 6564206f     ....failed to de
    cc6c:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
    cc7c:	68772072 20656c69 74697277 20676e69     r while writing 
    cc8c:	00676572 6f727245 68772072 20656c69     reg.Error while 
    cc9c:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
    ccac:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    ccbc:	6f742064 61657220 00000064 6c75705b     d to read...[pul
    cccc:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    ccdc:	6f742064 69727720 00006574              d to write..

0000cce8 <__FUNCTION__.12294>:
    cce8:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0000ccf8 <__FUNCTION__.12388>:
    ccf8:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
    cd08:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    cd18:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    cd28:	6e69206c 62207469 00007375 50504128     l init bus..(APP
    cd38:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
    cd48:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
    cd58:	6e65206f 656c6261 746e6920 75727265     o enable interru
    cd68:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
    cd78:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
    cd88:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
    cd98:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
    cda8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
    cdb8:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    cdc8:	75622074 00000073                       t bus...

0000cdd0 <__FUNCTION__.12375>:
    cdd0:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000cddc <__FUNCTION__.12382>:
    cddc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0000cdec <crc7_syndrome_table>:
    cdec:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    cdfc:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    ce0c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    ce1c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    ce2c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    ce3c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    ce4c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    ce5c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    ce6c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    ce7c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    ce8c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    ce9c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    ceac:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    cebc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    cecc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    cedc:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    ceec:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    cefc:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    cf0c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    cf1c:	73756220 72726520 2e2e726f 0000002e      bus error......
    cf2c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    cf3c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    cf4c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    cf5c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    cf6c:	656c6961 61642064 72206174 6f707365     ailed data respo
    cf7c:	2065736e 64616572 7562202c 72652073     nse read, bus er
    cf8c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    cf9c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    cfac:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    cfbc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    cfcc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    cfdc:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    cfec:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    cffc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d00c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    d01c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    d02c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    d03c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    d04c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    d05c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d06c:	656c6961 61642064 62206174 6b636f6c     ailed data block
    d07c:	69727720 202c6574 20737562 6f727265      write, bus erro
    d08c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    d09c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d0ac:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    d0bc:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    d0cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d0dc:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    d0ec:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    d0fc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    d10c:	65722064 6e6f7073 202c6573 74697277     d response, writ
    d11c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    d12c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d13c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    d14c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    d15c:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    d16c:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    d17c:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    d18c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    d19c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    d1ac:	206b636f 61746164 69727720 2e2e6574     ock data write..
    d1bc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d1cc:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    d1dc:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    d1ec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d1fc:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    d20c:	64616572 67657220 30252820 2e297838     read reg (%08x).
    d21c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d22c:	656c6961 61642064 72206174 2e646165     ailed data read.
    d23c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d24c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    d25c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    d26c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d27c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    d28c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    d29c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    d2ac:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    d2bc:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    d2cc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d2dc:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    d2ec:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    d2fc:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    d30c:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    d31c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d32c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    d33c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    d34c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d35c:	6e692064 6e726574 77206c61 65746972     d internal write
    d36c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    d37c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d38c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    d39c:	64692070 002e2e2e 00003f28 00003f28     p id....(?..(?..
    d3ac:	00003fb8 00003e7c 00003ec2 00003ee4     .?..|>...>...>..
    d3bc:	00003f6a 00003f6a 00004024 00003e50     j?..j?..$@..P>..
    d3cc:	0000407e 0000407e 0000407e 0000407e     ~@..~@..~@..~@..
    d3dc:	00003f06                                .?..

0000d3e0 <__FUNCTION__.11759>:
    d3e0:	5f697073 00646d63                       spi_cmd.

0000d3e8 <__FUNCTION__.11767>:
    d3e8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000d3f4 <__FUNCTION__.11783>:
    d3f4:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000d404 <__FUNCTION__.11798>:
    d404:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000d414 <__FUNCTION__.11808>:
    d414:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000d424 <__FUNCTION__.11816>:
    d424:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000d434 <__FUNCTION__.11825>:
    d434:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000d444 <__FUNCTION__.11833>:
    d444:	735f6d6e 725f6970 00646165              nm_spi_read.

0000d450 <__FUNCTION__.11850>:
    d450:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
    d460:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
    d470:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
    d480:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    d490:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
    d4a0:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
    d4b0:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
    d4c0:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
    d4d0:	6b636f53 00007465 42000800 42000c00     Socket.....B...B
    d4e0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    d4f0:	0c0b0a09 00000e0d 000086ee 00008766     ............f...
    d500:	00008766 0000870c 00008706 00008712     f...............
    d510:	000086f4 00008718 0000874c 00008a30     ........L...0...
    d520:	00008a80 00008a80 00008a7c 00008a22     ........|..."...
    d530:	00008a42 00008a12 00008a54 00008a66     B.......T...f...
    d540:	00008ace 00008afc 00008afc 00008af8     ................
    d550:	00008ac8 00008ad4 00008ac2 00008ada     ................
    d560:	00008ae0                                ....

0000d564 <gau8HexDigits>:
    d564:	33323130 37363534 62613938 66656463     0123456789abcdef
    d574:	00000000 20544547 6275702f 6163696c     ....GET /publica
    d584:	6e2f6970 6669746f 70613f79 79656b69     pi/notify?apikey
    d594:	0000003d 20544547 6275702f 6163696c     =...GET /publica
    d5a4:	612f6970 613f6464 656b6970 00003d79     pi/add?apikey=..
    d5b4:	70706126 6163696c 6e6f6974 0000003d     &application=...
    d5c4:	65766526 003d746e 73656426 70697263     &event=.&descrip
    d5d4:	6e6f6974 0000003d 54544820 2e312f50     tion=... HTTP/1.
    d5e4:	480a0d31 3a74736f 00000020 2e777777     1..Host: ...www.
    d5f4:	69746f6e 796d7966 72646e61 2e64696f     notifymyandroid.
    d604:	006d6f63 2e697061 776f7270 7070616c     com.api.prowlapp
    d614:	6d6f632e 00000000 0a0d0a0d 00000000     .com............
    d624:	50545448 312e312f 00000020 00303032     HTTP/1.1 ...200.
    d634:	00303034 00313034 00323034 00363034     400.401.402.406.
    d644:	00393034 50504128 52452829 255b2952     409.(APP)(ERR)[%
    d654:	255b5d73 00005d64 574f5247 6553204c     s][%d]..GROWL Se
    d664:	4520646e 726f7272 0a642520 00000000     nd Error %d.....
    d674:	50504128 4e492829 00294f46 776f7250     (APP)(INFO).Prow
    d684:	656b206c 6f4e2079 61562074 00646c69     l key Not Vaild.
    d694:	20414d4e 2079656b 20746f4e 6c696156     NMA key Not Vail
    d6a4:	00000064 69746f6e 796d7966 72646e61     d...notifymyandr
    d6b4:	0064696f 776f7270 0000006c 73206f4e     oid.prowl...No s
    d6c4:	656b636f 61207374 6c696176 656c6261     ockets available
    d6d4:	726f6620 65687420 72756320 746e6572      for the current
    d6e4:	71657220 74736575 00000000 2067734d      request....Msg 
    d6f4:	657a6973 20736920 206f6f74 676e6f6c     size is too long
    d704:	00000000 00414d4e 574f5250 0000004c     ....NMA.PROWL...
    d714:	746f6e41 20726568 52207325 65757165     Another %s Reque
    d724:	69207473 65702073 6e69646e 00000a67     st is pending...

0000d734 <__FUNCTION__.11865>:
    d734:	574f5247 50415f4c 636f5350 4574656b     GROWL_APPSocketE
    d744:	746e6576 646e6148 0072656c              ventHandler.

0000d750 <__FUNCTION__.11891>:
    d750:	5f494d4e 776f7247 6e65536c 746f4e64     NMI_GrowlSendNot
    d760:	63696669 6f697461 0000006e              ification...

0000d76c <app_string>:
    d76c:	20313244 776f7250 0072656c 6c313025     D21 Prowler.%01l
    d77c:	30253a64 3a646c32 6c323025 30253a64     d:%02ld:%02ld:%0
    d78c:	20646c32 00000000 646e6553 20676e69     2ld ....Sending 
    d79c:	776f7250 25203a6c 3e3d2073 00000020     Prowl: %s => ...
    d7ac:	462d6957 6f632069 63656e6e 0d646574     Wi-Fi connected.
    d7bc:	00000000 462d6957 69642069 6e6f6373     ....Wi-Fi discon
    d7cc:	7463656e 000d6465 50434844 6d6f6320     nected..DHCP com
    d7dc:	74656c70 202d2065 462d6957 50492069     plete - Wi-Fi IP
    d7ec:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
    d7fc:	0000000a 38373139 34303637 30356465     ....91787604ed50
    d80c:	66633661 33643263 64333866 31656531     a6cfc2d3f83d1ee1
    d81c:	62633639 61303363 30626333 65376138     96cbc30a3cb08a7e
    d82c:	30613936 00000000 35336364 64663839     69a0....dc3598fd
    d83c:	66343636 38303536 30303666 65316462     664f6508f600bd1e
    d84c:	65666466 35616334 66303434 38303362     fdfe4ca5440fb308
    d85c:	00000000 6e6e6f43 69746365 45206e6f     ....Connection E
    d86c:	62617473 6873696c 00006465 74617453     stablished..Stat
    d87c:	55207375 74616470 00000065 69666977     us Update...wifi
    d88c:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
    d89c:	505f5053 49564f52 4e4f4953 464e495f     SP_PROVISION_INF
    d8ac:	000d2e4f 69666977 3a62635f 6f725020     O...wifi_cb: Pro
    d8bc:	69736976 66206e6f 656c6961 000d2e64     vision failed...
    d8cc:	776f7247 736d206c 65732067 7320746e     Growl msg sent s
    d8dc:	65636375 75667373 2e796c6c 0000000d     uccessfully.....
    d8ec:	4f525245 47203a52 6c776f72 20424320     ERROR: Growl CB 
    d8fc:	65646f43 6425203a 000a0d20 72483432     Code: %d ...24Hr
    d90c:	61654820 65627472 50207461 00676e69      Heartbeat Ping.
    d91c:	72616548 61656274 00000074 5f5f5f20     Heartbeat... ___
    d92c:	5f205f5f 20202020 20202020 20202020     __ _            
    d93c:	5f5f5f5f 20202020 20202020 20202020     ____            
    d94c:	20202020 20202020 7c0a0d5f 2020205f             _..|_   
    d95c:	7c207c5f 20205f5f 5f5f5f20 207c2020     _| |__   ___  | 
    d96c:	5c205f20 5f205f20 5f5f205f 205f5f5f      _ \ _ __ _____ 
    d97c:	20202020 207c5f20 5f5f207c 205f205f          _| | ___ _ 
    d98c:	0a0d5f5f 207c2020 207c207c 5c205f27     __..  | | | '_ \
    d99c:	5f202f20 7c205c20 295f7c20 27207c20      / _ \ | |_) | '
    d9ac:	202f5f5f 205c205f 5c2f205c 2f202f20     __/ _ \ \ /\ / /
    d9bc:	202f7c20 205c205f 7c5f5f27 20200a0d      |/ _ \ '__|..  
    d9cc:	207c207c 207c207c 207c207c 2f5f5f20     | | | | | |  __/
    d9dc:	20207c20 7c2f5f5f 7c207c20 295f2820      |  __/| | | (_)
    d9ec:	56205c20 20562020 7c207c2f 5f5f2020      \ V  V /| |  __
    d9fc:	0d7c202f 7c20200a 7c207c5f 7c207c5f     / |..  |_| |_| |
    da0c:	5f5c7c5f 207c5f5f 207c5f7c 5f7c2020     _|\___| |_|   |_
    da1c:	5c20207c 2f5f5f5f 2f5f5c20 202f5f5c     |  \___/ \_/\_/ 
    da2c:	5c7c5f7c 7c5f5f5f 000d7c5f 776f7250     |_|\___|_|..Prow
    da3c:	61622d6c 20646573 74697773 6d206863     l-based switch m
    da4c:	74696e6f 0a0d726f 72616f42 41533a64     onitor..Board:SA
    da5c:	3132444d 4c50585f 454e4941 52505f44     MD21_XPLAINED_PR
    da6c:	430a0d4f 69706d6f 3a64656c 6c754a20     O..Compiled: Jul
    da7c:	20303320 36313032 3a393020 343a3735      30 2016 09:57:4
    da8c:	2d2d2032 0000000d 6e69616d 326d203a     2 --....main: m2
    da9c:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
    daac:	72726520 2821726f 0d296425 0000000a      error!(%d).....
    dabc:	796d6149 6672756f 65687461 00000072     Iamyourfather...
    dacc:	6f676544 00686162 6e65704f 00006465     Degobah.Opened..
    dadc:	74617453 68432065 65676e61 00000000     State Change....
    daec:	736f6c43 43006465 00000000              Closed.C....

0000daf8 <_global_impure_ptr>:
    daf8:	2000001c                                ... 

0000dafc <__sf_fake_stdin>:
	...

0000db1c <__sf_fake_stdout>:
	...

0000db3c <__sf_fake_stderr>:
	...
    db5c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    db6c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    db7c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    db8c:	00006665                                ef..

0000db90 <_init>:
    db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db92:	46c0      	nop			; (mov r8, r8)
    db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    db96:	bc08      	pop	{r3}
    db98:	469e      	mov	lr, r3
    db9a:	4770      	bx	lr

0000db9c <__init_array_start>:
    db9c:	000000dd 	.word	0x000000dd

0000dba0 <_fini>:
    dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dba2:	46c0      	nop			; (mov r8, r8)
    dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dba6:	bc08      	pop	{r3}
    dba8:	469e      	mov	lr, r3
    dbaa:	4770      	bx	lr

0000dbac <__fini_array_start>:
    dbac:	000000b5 	.word	0x000000b5
