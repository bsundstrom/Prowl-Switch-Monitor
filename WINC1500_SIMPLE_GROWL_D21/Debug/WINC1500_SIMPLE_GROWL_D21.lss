
WINC1500_SIMPLE_GROWL_D21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008168  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00008168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000304  20000078  000081e0  00020078  2**2
                  ALLOC
  3 .stack        00002004  2000037c  000084e4  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d48f  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000061cf  00000000  00000000  0005d588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010d38  00000000  00000000  00063757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d20  00000000  00000000  0007448f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010e8  00000000  00000000  000751af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022454  00000000  00000000  00076297  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a4ce  00000000  00000000  000986eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009603a  00000000  00000000  000b2bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b8c  00000000  00000000  00148bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002380 	.word	0x20002380
       4:	00004c01 	.word	0x00004c01
       8:	00004bfd 	.word	0x00004bfd
       c:	00004bfd 	.word	0x00004bfd
	...
      2c:	00004bfd 	.word	0x00004bfd
	...
      38:	00004bfd 	.word	0x00004bfd
      3c:	00004bfd 	.word	0x00004bfd
      40:	00004bfd 	.word	0x00004bfd
      44:	00004bfd 	.word	0x00004bfd
      48:	00004bfd 	.word	0x00004bfd
      4c:	00004bfd 	.word	0x00004bfd
      50:	00003411 	.word	0x00003411
      54:	00004bfd 	.word	0x00004bfd
      58:	00004bfd 	.word	0x00004bfd
      5c:	00004bfd 	.word	0x00004bfd
      60:	00004bfd 	.word	0x00004bfd
      64:	00003a15 	.word	0x00003a15
      68:	00003a25 	.word	0x00003a25
      6c:	00003a35 	.word	0x00003a35
      70:	00003a45 	.word	0x00003a45
      74:	00003a55 	.word	0x00003a55
      78:	00003a65 	.word	0x00003a65
      7c:	00004bfd 	.word	0x00004bfd
      80:	00004bfd 	.word	0x00004bfd
      84:	00004bfd 	.word	0x00004bfd
      88:	000001a1 	.word	0x000001a1
      8c:	000001b1 	.word	0x000001b1
      90:	000001c1 	.word	0x000001c1
      94:	000001d1 	.word	0x000001d1
      98:	000001e1 	.word	0x000001e1
      9c:	00004bfd 	.word	0x00004bfd
      a0:	00004bfd 	.word	0x00004bfd
      a4:	00004bfd 	.word	0x00004bfd
      a8:	00004bfd 	.word	0x00004bfd
      ac:	00004bfd 	.word	0x00004bfd
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	00008168 	.word	0x00008168

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	00008168 	.word	0x00008168
     10c:	00008168 	.word	0x00008168
     110:	00000000 	.word	0x00000000

00000114 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     114:	1c93      	adds	r3, r2, #2
     116:	009b      	lsls	r3, r3, #2
     118:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     11a:	2a02      	cmp	r2, #2
     11c:	d104      	bne.n	128 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     11e:	7e02      	ldrb	r2, [r0, #24]
     120:	2310      	movs	r3, #16
     122:	4313      	orrs	r3, r2
     124:	7603      	strb	r3, [r0, #24]
     126:	e00b      	b.n	140 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     128:	2a03      	cmp	r2, #3
     12a:	d104      	bne.n	136 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     12c:	7e02      	ldrb	r2, [r0, #24]
     12e:	2320      	movs	r3, #32
     130:	4313      	orrs	r3, r2
     132:	7603      	strb	r3, [r0, #24]
     134:	e004      	b.n	140 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     136:	2301      	movs	r3, #1
     138:	4093      	lsls	r3, r2
     13a:	7e02      	ldrb	r2, [r0, #24]
     13c:	4313      	orrs	r3, r2
     13e:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     140:	2000      	movs	r0, #0
     142:	4770      	bx	lr

00000144 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     144:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     146:	0080      	lsls	r0, r0, #2
     148:	4b14      	ldr	r3, [pc, #80]	; (19c <_tc_interrupt_handler+0x58>)
     14a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     14c:	682b      	ldr	r3, [r5, #0]
     14e:	7b9c      	ldrb	r4, [r3, #14]
     150:	7e2b      	ldrb	r3, [r5, #24]
     152:	401c      	ands	r4, r3
     154:	7e6b      	ldrb	r3, [r5, #25]
     156:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     158:	07e3      	lsls	r3, r4, #31
     15a:	d505      	bpl.n	168 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     15c:	0028      	movs	r0, r5
     15e:	68ab      	ldr	r3, [r5, #8]
     160:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     162:	2301      	movs	r3, #1
     164:	682a      	ldr	r2, [r5, #0]
     166:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     168:	07a3      	lsls	r3, r4, #30
     16a:	d505      	bpl.n	178 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     16c:	0028      	movs	r0, r5
     16e:	68eb      	ldr	r3, [r5, #12]
     170:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     172:	2302      	movs	r3, #2
     174:	682a      	ldr	r2, [r5, #0]
     176:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     178:	06e3      	lsls	r3, r4, #27
     17a:	d505      	bpl.n	188 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     17c:	0028      	movs	r0, r5
     17e:	692b      	ldr	r3, [r5, #16]
     180:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     182:	2310      	movs	r3, #16
     184:	682a      	ldr	r2, [r5, #0]
     186:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     188:	06a3      	lsls	r3, r4, #26
     18a:	d505      	bpl.n	198 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     18c:	0028      	movs	r0, r5
     18e:	696b      	ldr	r3, [r5, #20]
     190:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     192:	682b      	ldr	r3, [r5, #0]
     194:	2220      	movs	r2, #32
     196:	739a      	strb	r2, [r3, #14]
	}
}
     198:	bd70      	pop	{r4, r5, r6, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	200001cc 	.word	0x200001cc

000001a0 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     1a0:	b510      	push	{r4, lr}
     1a2:	2000      	movs	r0, #0
     1a4:	4b01      	ldr	r3, [pc, #4]	; (1ac <TC3_Handler+0xc>)
     1a6:	4798      	blx	r3
     1a8:	bd10      	pop	{r4, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	00000145 	.word	0x00000145

000001b0 <TC4_Handler>:
     1b0:	b510      	push	{r4, lr}
     1b2:	2001      	movs	r0, #1
     1b4:	4b01      	ldr	r3, [pc, #4]	; (1bc <TC4_Handler+0xc>)
     1b6:	4798      	blx	r3
     1b8:	bd10      	pop	{r4, pc}
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	00000145 	.word	0x00000145

000001c0 <TC5_Handler>:
     1c0:	b510      	push	{r4, lr}
     1c2:	2002      	movs	r0, #2
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <TC5_Handler+0xc>)
     1c6:	4798      	blx	r3
     1c8:	bd10      	pop	{r4, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	00000145 	.word	0x00000145

000001d0 <TC6_Handler>:
     1d0:	b510      	push	{r4, lr}
     1d2:	2003      	movs	r0, #3
     1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <TC6_Handler+0xc>)
     1d6:	4798      	blx	r3
     1d8:	bd10      	pop	{r4, pc}
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	00000145 	.word	0x00000145

000001e0 <TC7_Handler>:
     1e0:	b510      	push	{r4, lr}
     1e2:	2004      	movs	r0, #4
     1e4:	4b01      	ldr	r3, [pc, #4]	; (1ec <TC7_Handler+0xc>)
     1e6:	4798      	blx	r3
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	00000145 	.word	0x00000145

000001f0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     1f0:	b530      	push	{r4, r5, lr}
     1f2:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     1f4:	a901      	add	r1, sp, #4
     1f6:	4b0c      	ldr	r3, [pc, #48]	; (228 <_tc_get_inst_index+0x38>)
     1f8:	000a      	movs	r2, r1
     1fa:	cb32      	ldmia	r3!, {r1, r4, r5}
     1fc:	c232      	stmia	r2!, {r1, r4, r5}
     1fe:	cb12      	ldmia	r3!, {r1, r4}
     200:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     202:	9b01      	ldr	r3, [sp, #4]
     204:	4298      	cmp	r0, r3
     206:	d006      	beq.n	216 <_tc_get_inst_index+0x26>
     208:	2301      	movs	r3, #1
     20a:	009a      	lsls	r2, r3, #2
     20c:	a901      	add	r1, sp, #4
     20e:	5852      	ldr	r2, [r2, r1]
     210:	4282      	cmp	r2, r0
     212:	d103      	bne.n	21c <_tc_get_inst_index+0x2c>
     214:	e000      	b.n	218 <_tc_get_inst_index+0x28>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     216:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
     218:	b2d8      	uxtb	r0, r3
     21a:	e003      	b.n	224 <_tc_get_inst_index+0x34>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     21c:	3301      	adds	r3, #1
     21e:	2b05      	cmp	r3, #5
     220:	d1f3      	bne.n	20a <_tc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     222:	2000      	movs	r0, #0
}
     224:	b007      	add	sp, #28
     226:	bd30      	pop	{r4, r5, pc}
     228:	00006cf0 	.word	0x00006cf0

0000022c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     22c:	b5f0      	push	{r4, r5, r6, r7, lr}
     22e:	464f      	mov	r7, r9
     230:	4646      	mov	r6, r8
     232:	b4c0      	push	{r6, r7}
     234:	b089      	sub	sp, #36	; 0x24
     236:	0004      	movs	r4, r0
     238:	000e      	movs	r6, r1
     23a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     23c:	0008      	movs	r0, r1
     23e:	4b92      	ldr	r3, [pc, #584]	; (488 <tc_init+0x25c>)
     240:	4798      	blx	r3
     242:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     244:	4d91      	ldr	r5, [pc, #580]	; (48c <tc_init+0x260>)
     246:	0029      	movs	r1, r5
     248:	3114      	adds	r1, #20
     24a:	2205      	movs	r2, #5
     24c:	a806      	add	r0, sp, #24
     24e:	4f90      	ldr	r7, [pc, #576]	; (490 <tc_init+0x264>)
     250:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     252:	0029      	movs	r1, r5
     254:	311c      	adds	r1, #28
     256:	220a      	movs	r2, #10
     258:	a803      	add	r0, sp, #12
     25a:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     25c:	2300      	movs	r3, #0
     25e:	60a3      	str	r3, [r4, #8]
     260:	60e3      	str	r3, [r4, #12]
     262:	6123      	str	r3, [r4, #16]
     264:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     266:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     268:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     26a:	464b      	mov	r3, r9
     26c:	009a      	lsls	r2, r3, #2
     26e:	4b89      	ldr	r3, [pc, #548]	; (494 <tc_init+0x268>)
     270:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     272:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     274:	4643      	mov	r3, r8
     276:	789b      	ldrb	r3, [r3, #2]
     278:	2b08      	cmp	r3, #8
     27a:	d104      	bne.n	286 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     27c:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     27e:	464a      	mov	r2, r9
     280:	07d2      	lsls	r2, r2, #31
     282:	d400      	bmi.n	286 <tc_init+0x5a>
     284:	e0fb      	b.n	47e <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     286:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     288:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     28a:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     28c:	07db      	lsls	r3, r3, #31
     28e:	d500      	bpl.n	292 <tc_init+0x66>
     290:	e0f5      	b.n	47e <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     292:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     294:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     296:	06db      	lsls	r3, r3, #27
     298:	d500      	bpl.n	29c <tc_init+0x70>
     29a:	e0f0      	b.n	47e <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     29c:	8833      	ldrh	r3, [r6, #0]
     29e:	079b      	lsls	r3, r3, #30
     2a0:	d500      	bpl.n	2a4 <tc_init+0x78>
     2a2:	e0ec      	b.n	47e <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     2a4:	4643      	mov	r3, r8
     2a6:	7c1b      	ldrb	r3, [r3, #16]
     2a8:	2b00      	cmp	r3, #0
     2aa:	d00c      	beq.n	2c6 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2ac:	a902      	add	r1, sp, #8
     2ae:	2301      	movs	r3, #1
     2b0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2b2:	2200      	movs	r2, #0
     2b4:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     2b6:	4642      	mov	r2, r8
     2b8:	7e12      	ldrb	r2, [r2, #24]
     2ba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2bc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2be:	4643      	mov	r3, r8
     2c0:	7d18      	ldrb	r0, [r3, #20]
     2c2:	4b75      	ldr	r3, [pc, #468]	; (498 <tc_init+0x26c>)
     2c4:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     2c6:	4643      	mov	r3, r8
     2c8:	7f1b      	ldrb	r3, [r3, #28]
     2ca:	2b00      	cmp	r3, #0
     2cc:	d00d      	beq.n	2ea <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2ce:	a902      	add	r1, sp, #8
     2d0:	2301      	movs	r3, #1
     2d2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2d4:	2200      	movs	r2, #0
     2d6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     2d8:	4642      	mov	r2, r8
     2da:	6a52      	ldr	r2, [r2, #36]	; 0x24
     2dc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2de:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2e0:	4643      	mov	r3, r8
     2e2:	6a1b      	ldr	r3, [r3, #32]
     2e4:	b2d8      	uxtb	r0, r3
     2e6:	4b6c      	ldr	r3, [pc, #432]	; (498 <tc_init+0x26c>)
     2e8:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2ea:	496c      	ldr	r1, [pc, #432]	; (49c <tc_init+0x270>)
     2ec:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     2ee:	464a      	mov	r2, r9
     2f0:	0052      	lsls	r2, r2, #1
     2f2:	a803      	add	r0, sp, #12
     2f4:	5a12      	ldrh	r2, [r2, r0]
     2f6:	4313      	orrs	r3, r2
     2f8:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     2fa:	4643      	mov	r3, r8
     2fc:	789b      	ldrb	r3, [r3, #2]
     2fe:	2b08      	cmp	r3, #8
     300:	d106      	bne.n	310 <tc_init+0xe4>
     302:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     304:	464a      	mov	r2, r9
     306:	3201      	adds	r2, #1
     308:	0052      	lsls	r2, r2, #1
     30a:	5a12      	ldrh	r2, [r2, r0]
     30c:	4313      	orrs	r3, r2
     30e:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     310:	a901      	add	r1, sp, #4
     312:	4643      	mov	r3, r8
     314:	781b      	ldrb	r3, [r3, #0]
     316:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     318:	ab06      	add	r3, sp, #24
     31a:	464a      	mov	r2, r9
     31c:	5c9d      	ldrb	r5, [r3, r2]
     31e:	0028      	movs	r0, r5
     320:	4b5f      	ldr	r3, [pc, #380]	; (4a0 <tc_init+0x274>)
     322:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     324:	0028      	movs	r0, r5
     326:	4b5f      	ldr	r3, [pc, #380]	; (4a4 <tc_init+0x278>)
     328:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     32a:	4643      	mov	r3, r8
     32c:	7898      	ldrb	r0, [r3, #2]
     32e:	799b      	ldrb	r3, [r3, #6]
     330:	0002      	movs	r2, r0
     332:	431a      	orrs	r2, r3
     334:	4643      	mov	r3, r8
     336:	8918      	ldrh	r0, [r3, #8]
     338:	889b      	ldrh	r3, [r3, #4]
     33a:	4303      	orrs	r3, r0
     33c:	431a      	orrs	r2, r3
     33e:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     340:	4643      	mov	r3, r8
     342:	785b      	ldrb	r3, [r3, #1]
     344:	2b00      	cmp	r3, #0
     346:	d002      	beq.n	34e <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     348:	2380      	movs	r3, #128	; 0x80
     34a:	011b      	lsls	r3, r3, #4
     34c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     34e:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     350:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     352:	7bcb      	ldrb	r3, [r1, #15]
     354:	4393      	bics	r3, r2
     356:	d1fc      	bne.n	352 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     358:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     35a:	4643      	mov	r3, r8
     35c:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     35e:	1e43      	subs	r3, r0, #1
     360:	4198      	sbcs	r0, r3
     362:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
     364:	4643      	mov	r3, r8
     366:	7b9b      	ldrb	r3, [r3, #14]
     368:	2b00      	cmp	r3, #0
     36a:	d001      	beq.n	370 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     36c:	2301      	movs	r3, #1
     36e:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     370:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     372:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     374:	7bcb      	ldrb	r3, [r1, #15]
     376:	4393      	bics	r3, r2
     378:	d1fc      	bne.n	374 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     37a:	33ff      	adds	r3, #255	; 0xff
     37c:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     37e:	2800      	cmp	r0, #0
     380:	d005      	beq.n	38e <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     382:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
     384:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     386:	7bcb      	ldrb	r3, [r1, #15]
     388:	4393      	bics	r3, r2
     38a:	d1fc      	bne.n	386 <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     38c:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     38e:	4643      	mov	r3, r8
     390:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     392:	7adb      	ldrb	r3, [r3, #11]
     394:	2b00      	cmp	r3, #0
     396:	d001      	beq.n	39c <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     398:	2310      	movs	r3, #16
     39a:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     39c:	4643      	mov	r3, r8
     39e:	7b1b      	ldrb	r3, [r3, #12]
     3a0:	2b00      	cmp	r3, #0
     3a2:	d001      	beq.n	3a8 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     3a4:	2320      	movs	r3, #32
     3a6:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3a8:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     3aa:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3ac:	7bcb      	ldrb	r3, [r1, #15]
     3ae:	4393      	bics	r3, r2
     3b0:	d1fc      	bne.n	3ac <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     3b2:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3b4:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     3b6:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3b8:	7bd3      	ldrb	r3, [r2, #15]
     3ba:	438b      	bics	r3, r1
     3bc:	d1fc      	bne.n	3b8 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     3be:	7923      	ldrb	r3, [r4, #4]
     3c0:	2b04      	cmp	r3, #4
     3c2:	d005      	beq.n	3d0 <tc_init+0x1a4>
     3c4:	2b08      	cmp	r3, #8
     3c6:	d041      	beq.n	44c <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     3c8:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     3ca:	2b00      	cmp	r3, #0
     3cc:	d157      	bne.n	47e <tc_init+0x252>
     3ce:	e024      	b.n	41a <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     3d0:	217f      	movs	r1, #127	; 0x7f
     3d2:	7bd3      	ldrb	r3, [r2, #15]
     3d4:	438b      	bics	r3, r1
     3d6:	d1fc      	bne.n	3d2 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     3d8:	3328      	adds	r3, #40	; 0x28
     3da:	4642      	mov	r2, r8
     3dc:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     3de:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3e0:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     3e2:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3e4:	7bcb      	ldrb	r3, [r1, #15]
     3e6:	4393      	bics	r3, r2
     3e8:	d1fc      	bne.n	3e4 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     3ea:	3329      	adds	r3, #41	; 0x29
     3ec:	4642      	mov	r2, r8
     3ee:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     3f0:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3f2:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     3f4:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3f6:	7bcb      	ldrb	r3, [r1, #15]
     3f8:	4393      	bics	r3, r2
     3fa:	d1fc      	bne.n	3f6 <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     3fc:	332a      	adds	r3, #42	; 0x2a
     3fe:	4642      	mov	r2, r8
     400:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     402:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     404:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     406:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     408:	7bcb      	ldrb	r3, [r1, #15]
     40a:	4393      	bics	r3, r2
     40c:	d1fc      	bne.n	408 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     40e:	332b      	adds	r3, #43	; 0x2b
     410:	4642      	mov	r2, r8
     412:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     414:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     416:	2000      	movs	r0, #0
     418:	e031      	b.n	47e <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     41a:	217f      	movs	r1, #127	; 0x7f
     41c:	7bd3      	ldrb	r3, [r2, #15]
     41e:	438b      	bics	r3, r1
     420:	d1fc      	bne.n	41c <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     422:	4643      	mov	r3, r8
     424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     426:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     428:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     42a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     42c:	7bcb      	ldrb	r3, [r1, #15]
     42e:	4393      	bics	r3, r2
     430:	d1fc      	bne.n	42c <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     432:	4643      	mov	r3, r8
     434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     436:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     438:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     43a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     43c:	7bcb      	ldrb	r3, [r1, #15]
     43e:	4393      	bics	r3, r2
     440:	d1fc      	bne.n	43c <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     442:	4643      	mov	r3, r8
     444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     446:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     448:	2000      	movs	r0, #0
     44a:	e018      	b.n	47e <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     44c:	217f      	movs	r1, #127	; 0x7f
     44e:	7bd3      	ldrb	r3, [r2, #15]
     450:	438b      	bics	r3, r1
     452:	d1fc      	bne.n	44e <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     454:	4643      	mov	r3, r8
     456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     458:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     45a:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     45c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     45e:	7bcb      	ldrb	r3, [r1, #15]
     460:	4393      	bics	r3, r2
     462:	d1fc      	bne.n	45e <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     464:	4643      	mov	r3, r8
     466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     468:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     46a:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     46c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     46e:	7bcb      	ldrb	r3, [r1, #15]
     470:	4393      	bics	r3, r2
     472:	d1fc      	bne.n	46e <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     474:	4643      	mov	r3, r8
     476:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     478:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     47a:	2000      	movs	r0, #0
     47c:	e7ff      	b.n	47e <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     47e:	b009      	add	sp, #36	; 0x24
     480:	bc0c      	pop	{r2, r3}
     482:	4690      	mov	r8, r2
     484:	4699      	mov	r9, r3
     486:	bdf0      	pop	{r4, r5, r6, r7, pc}
     488:	000001f1 	.word	0x000001f1
     48c:	00006cf0 	.word	0x00006cf0
     490:	00005b89 	.word	0x00005b89
     494:	200001cc 	.word	0x200001cc
     498:	00004b9d 	.word	0x00004b9d
     49c:	40000400 	.word	0x40000400
     4a0:	00004aa5 	.word	0x00004aa5
     4a4:	00004a19 	.word	0x00004a19

000004a8 <tc_callback>:
#include "main.h"

struct tc_module tc_instance;

void tc_callback(struct tc_module *const module_inst)
{
     4a8:	b510      	push	{r4, lr}
	TimerCallback();
     4aa:	4b01      	ldr	r3, [pc, #4]	; (4b0 <tc_callback+0x8>)
     4ac:	4798      	blx	r3
}
     4ae:	bd10      	pop	{r4, pc}
     4b0:	00005775 	.word	0x00005775

000004b4 <configure_tc>:

void configure_tc(void)
{
     4b4:	b510      	push	{r4, lr}
     4b6:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     4b8:	aa01      	add	r2, sp, #4
     4ba:	2300      	movs	r3, #0
     4bc:	2100      	movs	r1, #0
     4be:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     4c0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     4c2:	2000      	movs	r0, #0
     4c4:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     4c6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     4c8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     4ca:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     4cc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     4ce:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     4d0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     4d2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     4d4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     4d6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     4d8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     4da:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     4dc:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     4de:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     4e0:	3304      	adds	r3, #4
     4e2:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
     4e4:	3b03      	subs	r3, #3
     4e6:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
     4e8:	23c0      	movs	r3, #192	; 0xc0
     4ea:	00db      	lsls	r3, r3, #3
     4ec:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 64; //This sets interrupt time - 128cnts/sec - 64=.5sec
     4ee:	2140      	movs	r1, #64	; 0x40
     4f0:	2329      	movs	r3, #41	; 0x29
     4f2:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
     4f4:	390e      	subs	r1, #14
     4f6:	3301      	adds	r3, #1
     4f8:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[1] = 99;
     4fa:	3131      	adds	r1, #49	; 0x31
     4fc:	3301      	adds	r3, #1
     4fe:	54d1      	strb	r1, [r2, r3]

	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     500:	4c07      	ldr	r4, [pc, #28]	; (520 <configure_tc+0x6c>)
     502:	4908      	ldr	r1, [pc, #32]	; (524 <configure_tc+0x70>)
     504:	0020      	movs	r0, r4
     506:	4b08      	ldr	r3, [pc, #32]	; (528 <configure_tc+0x74>)
     508:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     50a:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     50c:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     50e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     510:	438b      	bics	r3, r1
     512:	d1fc      	bne.n	50e <configure_tc+0x5a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     514:	8811      	ldrh	r1, [r2, #0]
     516:	3302      	adds	r3, #2
     518:	430b      	orrs	r3, r1
     51a:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
}
     51c:	b00e      	add	sp, #56	; 0x38
     51e:	bd10      	pop	{r4, pc}
     520:	200001e0 	.word	0x200001e0
     524:	42002c00 	.word	0x42002c00
     528:	0000022d 	.word	0x0000022d

0000052c <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
     52c:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_OVERFLOW);
     52e:	4c0c      	ldr	r4, [pc, #48]	; (560 <configure_tc_callbacks+0x34>)
     530:	2200      	movs	r2, #0
     532:	490c      	ldr	r1, [pc, #48]	; (564 <configure_tc_callbacks+0x38>)
     534:	0020      	movs	r0, r4
     536:	4b0c      	ldr	r3, [pc, #48]	; (568 <configure_tc_callbacks+0x3c>)
     538:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     53a:	6820      	ldr	r0, [r4, #0]
     53c:	4b0b      	ldr	r3, [pc, #44]	; (56c <configure_tc_callbacks+0x40>)
     53e:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     540:	4b0b      	ldr	r3, [pc, #44]	; (570 <configure_tc_callbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     542:	5c1b      	ldrb	r3, [r3, r0]
     544:	221f      	movs	r2, #31
     546:	4013      	ands	r3, r2
     548:	3a1e      	subs	r2, #30
     54a:	0011      	movs	r1, r2
     54c:	4099      	lsls	r1, r3
     54e:	4b09      	ldr	r3, [pc, #36]	; (574 <configure_tc_callbacks+0x48>)
     550:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     552:	7e61      	ldrb	r1, [r4, #25]
     554:	2301      	movs	r3, #1
     556:	430b      	orrs	r3, r1
     558:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     55a:	6823      	ldr	r3, [r4, #0]
     55c:	735a      	strb	r2, [r3, #13]
	//tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_CC_CHANNEL0);
	//tc_register_callback(&tc_instance, tc_callback, TC_CALLBACK_CC_CHANNEL1);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL1);
     55e:	bd10      	pop	{r4, pc}
     560:	200001e0 	.word	0x200001e0
     564:	000004a9 	.word	0x000004a9
     568:	00000115 	.word	0x00000115
     56c:	000001f1 	.word	0x000001f1
     570:	00006d18 	.word	0x00006d18
     574:	e000e100 	.word	0xe000e100

00000578 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     578:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     57a:	2000      	movs	r0, #0
     57c:	4b08      	ldr	r3, [pc, #32]	; (5a0 <delay_init+0x28>)
     57e:	4798      	blx	r3
     580:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     582:	4c08      	ldr	r4, [pc, #32]	; (5a4 <delay_init+0x2c>)
     584:	21fa      	movs	r1, #250	; 0xfa
     586:	0089      	lsls	r1, r1, #2
     588:	47a0      	blx	r4
     58a:	4b07      	ldr	r3, [pc, #28]	; (5a8 <delay_init+0x30>)
     58c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     58e:	4907      	ldr	r1, [pc, #28]	; (5ac <delay_init+0x34>)
     590:	0028      	movs	r0, r5
     592:	47a0      	blx	r4
     594:	4b06      	ldr	r3, [pc, #24]	; (5b0 <delay_init+0x38>)
     596:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     598:	2205      	movs	r2, #5
     59a:	4b06      	ldr	r3, [pc, #24]	; (5b4 <delay_init+0x3c>)
     59c:	601a      	str	r2, [r3, #0]
}
     59e:	bd70      	pop	{r4, r5, r6, pc}
     5a0:	0000498d 	.word	0x0000498d
     5a4:	000059cd 	.word	0x000059cd
     5a8:	20000004 	.word	0x20000004
     5ac:	000f4240 	.word	0x000f4240
     5b0:	20000000 	.word	0x20000000
     5b4:	e000e010 	.word	0xe000e010

000005b8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     5b8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     5ba:	4b08      	ldr	r3, [pc, #32]	; (5dc <delay_cycles_ms+0x24>)
     5bc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     5be:	4a08      	ldr	r2, [pc, #32]	; (5e0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     5c0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5c2:	2180      	movs	r1, #128	; 0x80
     5c4:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     5c6:	e006      	b.n	5d6 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     5c8:	2c00      	cmp	r4, #0
     5ca:	d004      	beq.n	5d6 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     5cc:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5ce:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5d0:	6813      	ldr	r3, [r2, #0]
     5d2:	420b      	tst	r3, r1
     5d4:	d0fc      	beq.n	5d0 <delay_cycles_ms+0x18>
     5d6:	3801      	subs	r0, #1
     5d8:	d2f6      	bcs.n	5c8 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     5da:	bd30      	pop	{r4, r5, pc}
     5dc:	20000004 	.word	0x20000004
     5e0:	e000e010 	.word	0xe000e010

000005e4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     5e4:	b510      	push	{r4, lr}
	if (gpfIsr) {
     5e6:	4b03      	ldr	r3, [pc, #12]	; (5f4 <chip_isr+0x10>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d000      	beq.n	5f0 <chip_isr+0xc>
		gpfIsr();
     5ee:	4798      	blx	r3
	}
}
     5f0:	bd10      	pop	{r4, pc}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	20000094 	.word	0x20000094

000005f8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     5f8:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     5fa:	2800      	cmp	r0, #0
     5fc:	d006      	beq.n	60c <nm_bsp_sleep+0x14>
     5fe:	0004      	movs	r4, r0
		delay_ms(1);
     600:	4d03      	ldr	r5, [pc, #12]	; (610 <nm_bsp_sleep+0x18>)
     602:	2001      	movs	r0, #1
     604:	47a8      	blx	r5
     606:	3c01      	subs	r4, #1
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     608:	2c00      	cmp	r4, #0
     60a:	d1fa      	bne.n	602 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     60c:	bd70      	pop	{r4, r5, r6, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	000005b9 	.word	0x000005b9

00000614 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     616:	4c07      	ldr	r4, [pc, #28]	; (634 <nm_bsp_reset+0x20>)
     618:	2720      	movs	r7, #32
     61a:	6167      	str	r7, [r4, #20]
     61c:	2640      	movs	r6, #64	; 0x40
     61e:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	nm_bsp_sleep(100);
     620:	2064      	movs	r0, #100	; 0x64
     622:	4d05      	ldr	r5, [pc, #20]	; (638 <nm_bsp_reset+0x24>)
     624:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     626:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
	nm_bsp_sleep(10);
     628:	200a      	movs	r0, #10
     62a:	47a8      	blx	r5
     62c:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
	nm_bsp_sleep(10);
     62e:	200a      	movs	r0, #10
     630:	47a8      	blx	r5
}
     632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     634:	41004480 	.word	0x41004480
     638:	000005f9 	.word	0x000005f9

0000063c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	b082      	sub	sp, #8
	gpfIsr = NULL;
     640:	2300      	movs	r3, #0
     642:	4a13      	ldr	r2, [pc, #76]	; (690 <nm_bsp_init+0x54>)
     644:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     646:	ac01      	add	r4, sp, #4
     648:	2501      	movs	r5, #1
     64a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     64c:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     64e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     650:	0021      	movs	r1, r4
     652:	2026      	movs	r0, #38	; 0x26
     654:	4e0f      	ldr	r6, [pc, #60]	; (694 <nm_bsp_init+0x58>)
     656:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     658:	0021      	movs	r1, r4
     65a:	2025      	movs	r0, #37	; 0x25
     65c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     65e:	0021      	movs	r1, r4
     660:	2027      	movs	r0, #39	; 0x27
     662:	47b0      	blx	r6

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     664:	4b0c      	ldr	r3, [pc, #48]	; (698 <nm_bsp_init+0x5c>)
     666:	681b      	ldr	r3, [r3, #0]
     668:	421d      	tst	r5, r3
     66a:	d003      	beq.n	674 <nm_bsp_init+0x38>
     66c:	4b0a      	ldr	r3, [pc, #40]	; (698 <nm_bsp_init+0x5c>)
     66e:	681b      	ldr	r3, [r3, #0]
     670:	079b      	lsls	r3, r3, #30
     672:	d401      	bmi.n	678 <nm_bsp_init+0x3c>
	    delay_init();
     674:	4b09      	ldr	r3, [pc, #36]	; (69c <nm_bsp_init+0x60>)
     676:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     678:	4b09      	ldr	r3, [pc, #36]	; (6a0 <nm_bsp_init+0x64>)
     67a:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     67c:	2201      	movs	r2, #1
     67e:	4b09      	ldr	r3, [pc, #36]	; (6a4 <nm_bsp_init+0x68>)
     680:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     682:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     686:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     688:	2000      	movs	r0, #0
     68a:	b002      	add	sp, #8
     68c:	bd70      	pop	{r4, r5, r6, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	20000094 	.word	0x20000094
     694:	00003585 	.word	0x00003585
     698:	e000e010 	.word	0xe000e010
     69c:	00000579 	.word	0x00000579
     6a0:	00000615 	.word	0x00000615
     6a4:	20000010 	.word	0x20000010

000006a8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     6a8:	b510      	push	{r4, lr}
     6aa:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     6ac:	4b0e      	ldr	r3, [pc, #56]	; (6e8 <nm_bsp_register_isr+0x40>)
     6ae:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     6b0:	ac01      	add	r4, sp, #4
     6b2:	0020      	movs	r0, r4
     6b4:	4b0d      	ldr	r3, [pc, #52]	; (6ec <nm_bsp_register_isr+0x44>)
     6b6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     6b8:	2324      	movs	r3, #36	; 0x24
     6ba:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     6bc:	2300      	movs	r3, #0
     6be:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     6c0:	3301      	adds	r3, #1
     6c2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     6c4:	3301      	adds	r3, #1
     6c6:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     6c8:	0021      	movs	r1, r4
     6ca:	2004      	movs	r0, #4
     6cc:	4b08      	ldr	r3, [pc, #32]	; (6f0 <nm_bsp_register_isr+0x48>)
     6ce:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     6d0:	2200      	movs	r2, #0
     6d2:	2104      	movs	r1, #4
     6d4:	4807      	ldr	r0, [pc, #28]	; (6f4 <nm_bsp_register_isr+0x4c>)
     6d6:	4b08      	ldr	r3, [pc, #32]	; (6f8 <nm_bsp_register_isr+0x50>)
     6d8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     6da:	2100      	movs	r1, #0
     6dc:	2004      	movs	r0, #4
     6de:	4b07      	ldr	r3, [pc, #28]	; (6fc <nm_bsp_register_isr+0x54>)
     6e0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     6e2:	b004      	add	sp, #16
     6e4:	bd10      	pop	{r4, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	20000094 	.word	0x20000094
     6ec:	000034fd 	.word	0x000034fd
     6f0:	00003511 	.word	0x00003511
     6f4:	000005e5 	.word	0x000005e5
     6f8:	000033a5 	.word	0x000033a5
     6fc:	000033d1 	.word	0x000033d1

00000700 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     700:	b510      	push	{r4, lr}
	if (u8Enable) {
     702:	2800      	cmp	r0, #0
     704:	d004      	beq.n	710 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     706:	2100      	movs	r1, #0
     708:	2004      	movs	r0, #4
     70a:	4b04      	ldr	r3, [pc, #16]	; (71c <nm_bsp_interrupt_ctrl+0x1c>)
     70c:	4798      	blx	r3
     70e:	e003      	b.n	718 <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     710:	2100      	movs	r1, #0
     712:	2004      	movs	r0, #4
     714:	4b02      	ldr	r3, [pc, #8]	; (720 <nm_bsp_interrupt_ctrl+0x20>)
     716:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     718:	bd10      	pop	{r4, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	000033d1 	.word	0x000033d1
     720:	000033f1 	.word	0x000033f1

00000724 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     724:	b530      	push	{r4, r5, lr}
     726:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     728:	4c30      	ldr	r4, [pc, #192]	; (7ec <nm_bus_init+0xc8>)
     72a:	2305      	movs	r3, #5
     72c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     72e:	2300      	movs	r3, #0
     730:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     732:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     734:	a901      	add	r1, sp, #4
     736:	2201      	movs	r2, #1
     738:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     73a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     73c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     73e:	2005      	movs	r0, #5
     740:	4b2b      	ldr	r3, [pc, #172]	; (7f0 <nm_bus_init+0xcc>)
     742:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     744:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     746:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     748:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     74a:	2900      	cmp	r1, #0
     74c:	d104      	bne.n	758 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     74e:	095a      	lsrs	r2, r3, #5
     750:	01d2      	lsls	r2, r2, #7
     752:	4928      	ldr	r1, [pc, #160]	; (7f4 <nm_bus_init+0xd0>)
     754:	468c      	mov	ip, r1
     756:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     758:	211f      	movs	r1, #31
     75a:	400b      	ands	r3, r1
     75c:	391e      	subs	r1, #30
     75e:	0008      	movs	r0, r1
     760:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     762:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     764:	ac02      	add	r4, sp, #8
     766:	7021      	strb	r1, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     768:	2300      	movs	r3, #0
     76a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     76c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     76e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     770:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     772:	74a1      	strb	r1, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     774:	74e1      	strb	r1, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     776:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     778:	2224      	movs	r2, #36	; 0x24
     77a:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     77c:	3a18      	subs	r2, #24
     77e:	2100      	movs	r1, #0
     780:	a808      	add	r0, sp, #32
     782:	4b1d      	ldr	r3, [pc, #116]	; (7f8 <nm_bus_init+0xd4>)
     784:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     786:	2380      	movs	r3, #128	; 0x80
     788:	025b      	lsls	r3, r3, #9
     78a:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     78c:	4b1b      	ldr	r3, [pc, #108]	; (7fc <nm_bus_init+0xd8>)
     78e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     790:	2301      	movs	r3, #1
     792:	425b      	negs	r3, r3
     794:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     796:	4b1a      	ldr	r3, [pc, #104]	; (800 <nm_bus_init+0xdc>)
     798:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     79a:	4b1a      	ldr	r3, [pc, #104]	; (804 <nm_bus_init+0xe0>)
     79c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     79e:	4b1a      	ldr	r3, [pc, #104]	; (808 <nm_bus_init+0xe4>)
     7a0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     7a2:	0022      	movs	r2, r4
     7a4:	4919      	ldr	r1, [pc, #100]	; (80c <nm_bus_init+0xe8>)
     7a6:	481a      	ldr	r0, [pc, #104]	; (810 <nm_bus_init+0xec>)
     7a8:	4b1a      	ldr	r3, [pc, #104]	; (814 <nm_bus_init+0xf0>)
     7aa:	4798      	blx	r3
     7ac:	2800      	cmp	r0, #0
     7ae:	d119      	bne.n	7e4 <nm_bus_init+0xc0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7b0:	4d17      	ldr	r5, [pc, #92]	; (810 <nm_bus_init+0xec>)
     7b2:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7b4:	0020      	movs	r0, r4
     7b6:	4b18      	ldr	r3, [pc, #96]	; (818 <nm_bus_init+0xf4>)
     7b8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7ba:	231f      	movs	r3, #31
     7bc:	4018      	ands	r0, r3
     7be:	3b1e      	subs	r3, #30
     7c0:	4083      	lsls	r3, r0
     7c2:	4a16      	ldr	r2, [pc, #88]	; (81c <nm_bus_init+0xf8>)
     7c4:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7c6:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     7c8:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     7ca:	2b00      	cmp	r3, #0
     7cc:	d1fc      	bne.n	7c8 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     7ce:	6822      	ldr	r2, [r4, #0]
     7d0:	3302      	adds	r3, #2
     7d2:	4313      	orrs	r3, r2
     7d4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     7d6:	4b12      	ldr	r3, [pc, #72]	; (820 <nm_bus_init+0xfc>)
     7d8:	4798      	blx	r3
	nm_bsp_sleep(1);
     7da:	2001      	movs	r0, #1
     7dc:	4b11      	ldr	r3, [pc, #68]	; (824 <nm_bus_init+0x100>)
     7de:	4798      	blx	r3
#endif
	return result;
     7e0:	2000      	movs	r0, #0
     7e2:	e001      	b.n	7e8 <nm_bus_init+0xc4>
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
     7e4:	2006      	movs	r0, #6
     7e6:	4240      	negs	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
     7e8:	b011      	add	sp, #68	; 0x44
     7ea:	bd30      	pop	{r4, r5, pc}
     7ec:	200001fc 	.word	0x200001fc
     7f0:	00003585 	.word	0x00003585
     7f4:	41004400 	.word	0x41004400
     7f8:	00005b9b 	.word	0x00005b9b
     7fc:	00040003 	.word	0x00040003
     800:	00060003 	.word	0x00060003
     804:	00070003 	.word	0x00070003
     808:	00b71b00 	.word	0x00b71b00
     80c:	42000800 	.word	0x42000800
     810:	20000200 	.word	0x20000200
     814:	00003a75 	.word	0x00003a75
     818:	000039e9 	.word	0x000039e9
     81c:	e000e100 	.word	0xe000e100
     820:	00000615 	.word	0x00000615
     824:	000005f9 	.word	0x000005f9

00000828 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	465f      	mov	r7, fp
     82c:	4656      	mov	r6, sl
     82e:	464d      	mov	r5, r9
     830:	4644      	mov	r4, r8
     832:	b4f0      	push	{r4, r5, r6, r7}
     834:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     836:	2803      	cmp	r0, #3
     838:	d165      	bne.n	906 <nm_bus_ioctl+0xde>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     83a:	680f      	ldr	r7, [r1, #0]
     83c:	684e      	ldr	r6, [r1, #4]
     83e:	890d      	ldrh	r5, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
     840:	2200      	movs	r2, #0
     842:	466b      	mov	r3, sp
     844:	71da      	strb	r2, [r3, #7]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
     846:	2f00      	cmp	r7, #0
     848:	d008      	beq.n	85c <nm_bus_ioctl+0x34>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
     84a:	2e00      	cmp	r6, #0
     84c:	d158      	bne.n	900 <nm_bus_ioctl+0xd8>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
     84e:	2301      	movs	r3, #1
     850:	4699      	mov	r9, r3
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     852:	2300      	movs	r3, #0
     854:	4698      	mov	r8, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
     856:	466b      	mov	r3, sp
     858:	1dde      	adds	r6, r3, #7
     85a:	e005      	b.n	868 <nm_bus_ioctl+0x40>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     85c:	2300      	movs	r3, #0
     85e:	4699      	mov	r9, r3
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
     860:	3301      	adds	r3, #1
     862:	4698      	mov	r8, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
     864:	466b      	mov	r3, sp
     866:	1ddf      	adds	r7, r3, #7
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);
     868:	2201      	movs	r2, #1
     86a:	4931      	ldr	r1, [pc, #196]	; (930 <nm_bus_ioctl+0x108>)
     86c:	4831      	ldr	r0, [pc, #196]	; (934 <nm_bus_ioctl+0x10c>)
     86e:	4b32      	ldr	r3, [pc, #200]	; (938 <nm_bus_ioctl+0x110>)
     870:	4798      	blx	r3

	while (u16Sz) {
     872:	2d00      	cmp	r5, #0
     874:	d037      	beq.n	8e6 <nm_bus_ioctl+0xbe>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     876:	4b2f      	ldr	r3, [pc, #188]	; (934 <nm_bus_ioctl+0x10c>)
     878:	469b      	mov	fp, r3
		txd_data = *pu8Mosi;
		while (!spi_is_ready_to_write(&master))
     87a:	2401      	movs	r4, #1
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     87c:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     87e:	469a      	mov	sl, r3
			;
		*pu8Miso = rxd_data;

		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
     880:	4649      	mov	r1, r9
     882:	424b      	negs	r3, r1
     884:	4159      	adcs	r1, r3
     886:	4689      	mov	r9, r1
		if (!u8SkipMosi)
			pu8Mosi++;
     888:	4641      	mov	r1, r8
     88a:	424b      	negs	r3, r1
     88c:	4159      	adcs	r1, r3
     88e:	4688      	mov	r8, r1
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
     890:	7838      	ldrb	r0, [r7, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     892:	465b      	mov	r3, fp
     894:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     896:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     898:	4221      	tst	r1, r4
     89a:	d0fc      	beq.n	896 <nm_bus_ioctl+0x6e>
     89c:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     89e:	4221      	tst	r1, r4
     8a0:	d0fc      	beq.n	89c <nm_bus_ioctl+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8a2:	6298      	str	r0, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8a4:	7e19      	ldrb	r1, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     8a6:	4211      	tst	r1, r2
     8a8:	d0fc      	beq.n	8a4 <nm_bus_ioctl+0x7c>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8aa:	4651      	mov	r1, sl
     8ac:	7989      	ldrb	r1, [r1, #6]
     8ae:	468c      	mov	ip, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8b0:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8b2:	4211      	tst	r1, r2
     8b4:	d0fc      	beq.n	8b0 <nm_bus_ioctl+0x88>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8b6:	8b58      	ldrh	r0, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     8b8:	2100      	movs	r1, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8ba:	4210      	tst	r0, r2
     8bc:	d001      	beq.n	8c2 <nm_bus_ioctl+0x9a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8be:	835a      	strh	r2, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     8c0:	311e      	adds	r1, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8c2:	4660      	mov	r0, ip
     8c4:	2801      	cmp	r0, #1
     8c6:	d103      	bne.n	8d0 <nm_bus_ioctl+0xa8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
     8ca:	05c0      	lsls	r0, r0, #23
     8cc:	0dc0      	lsrs	r0, r0, #23
     8ce:	e001      	b.n	8d4 <nm_bus_ioctl+0xac>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
     8d2:	b2c0      	uxtb	r0, r0
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     8d4:	2900      	cmp	r1, #0
     8d6:	d1eb      	bne.n	8b0 <nm_bus_ioctl+0x88>
			;
		*pu8Miso = rxd_data;
     8d8:	7030      	strb	r0, [r6, #0]

		u16Sz--;
     8da:	3d01      	subs	r5, #1
     8dc:	b2ad      	uxth	r5, r5
		if (!u8SkipMiso)
			pu8Miso++;
     8de:	444e      	add	r6, r9
		if (!u8SkipMosi)
			pu8Mosi++;
     8e0:	4447      	add	r7, r8
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     8e2:	2d00      	cmp	r5, #0
     8e4:	d1d4      	bne.n	890 <nm_bus_ioctl+0x68>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8e6:	4b13      	ldr	r3, [pc, #76]	; (934 <nm_bus_ioctl+0x10c>)
     8e8:	6819      	ldr	r1, [r3, #0]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     8ea:	2202      	movs	r2, #2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     8ec:	7e0b      	ldrb	r3, [r1, #24]
     8ee:	4213      	tst	r3, r2
     8f0:	d0fc      	beq.n	8ec <nm_bus_ioctl+0xc4>
		;

	spi_select_slave(&master, &slave_inst, false);
     8f2:	2200      	movs	r2, #0
     8f4:	490e      	ldr	r1, [pc, #56]	; (930 <nm_bus_ioctl+0x108>)
     8f6:	480f      	ldr	r0, [pc, #60]	; (934 <nm_bus_ioctl+0x10c>)
     8f8:	4b0f      	ldr	r3, [pc, #60]	; (938 <nm_bus_ioctl+0x110>)
     8fa:	4798      	blx	r3

	return M2M_SUCCESS;
     8fc:	2000      	movs	r0, #0
     8fe:	e010      	b.n	922 <nm_bus_ioctl+0xfa>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
     900:	2006      	movs	r0, #6
     902:	4240      	negs	r0, r0
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
     904:	e00d      	b.n	922 <nm_bus_ioctl+0xfa>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
     906:	2286      	movs	r2, #134	; 0x86
     908:	0052      	lsls	r2, r2, #1
     90a:	490c      	ldr	r1, [pc, #48]	; (93c <nm_bus_ioctl+0x114>)
     90c:	480c      	ldr	r0, [pc, #48]	; (940 <nm_bus_ioctl+0x118>)
     90e:	4b0d      	ldr	r3, [pc, #52]	; (944 <nm_bus_ioctl+0x11c>)
     910:	4798      	blx	r3
     912:	480d      	ldr	r0, [pc, #52]	; (948 <nm_bus_ioctl+0x120>)
     914:	4b0d      	ldr	r3, [pc, #52]	; (94c <nm_bus_ioctl+0x124>)
     916:	4798      	blx	r3
     918:	200d      	movs	r0, #13
     91a:	4b0d      	ldr	r3, [pc, #52]	; (950 <nm_bus_ioctl+0x128>)
     91c:	4798      	blx	r3
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
     91e:	2001      	movs	r0, #1
     920:	4240      	negs	r0, r0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     922:	b003      	add	sp, #12
     924:	bc3c      	pop	{r2, r3, r4, r5}
     926:	4690      	mov	r8, r2
     928:	4699      	mov	r9, r3
     92a:	46a2      	mov	sl, r4
     92c:	46ab      	mov	fp, r5
     92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     930:	200001fc 	.word	0x200001fc
     934:	20000200 	.word	0x20000200
     938:	00003c41 	.word	0x00003c41
     93c:	00006d20 	.word	0x00006d20
     940:	00006d30 	.word	0x00006d30
     944:	00005bad 	.word	0x00005bad
     948:	00006d44 	.word	0x00006d44
     94c:	00005ccd 	.word	0x00005ccd
     950:	00005be1 	.word	0x00005be1

00000954 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     954:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     956:	4d0b      	ldr	r5, [pc, #44]	; (984 <nm_bus_deinit+0x30>)
     958:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     95a:	0020      	movs	r0, r4
     95c:	4b0a      	ldr	r3, [pc, #40]	; (988 <nm_bus_deinit+0x34>)
     95e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     960:	231f      	movs	r3, #31
     962:	4018      	ands	r0, r3
     964:	3b1e      	subs	r3, #30
     966:	4083      	lsls	r3, r0
     968:	2280      	movs	r2, #128	; 0x80
     96a:	4908      	ldr	r1, [pc, #32]	; (98c <nm_bus_deinit+0x38>)
     96c:	508b      	str	r3, [r1, r2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     96e:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     970:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     972:	2b00      	cmp	r3, #0
     974:	d1fc      	bne.n	970 <nm_bus_deinit+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     976:	6823      	ldr	r3, [r4, #0]
     978:	2202      	movs	r2, #2
     97a:	4393      	bics	r3, r2
     97c:	6023      	str	r3, [r4, #0]
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	

#endif /* CONF_WINC_USE_SPI */
	return result;
}
     97e:	2000      	movs	r0, #0
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000200 	.word	0x20000200
     988:	000039e9 	.word	0x000039e9
     98c:	e000e100 	.word	0xe000e100

00000990 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     990:	2a00      	cmp	r2, #0
     992:	d006      	beq.n	9a2 <m2m_memcpy+0x12>
     994:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     996:	780b      	ldrb	r3, [r1, #0]
     998:	7003      	strb	r3, [r0, #0]
		pDst++;
     99a:	3001      	adds	r0, #1
		pSrc++;
     99c:	3101      	adds	r1, #1
	}while(--sz);
     99e:	4290      	cmp	r0, r2
     9a0:	d1f9      	bne.n	996 <m2m_memcpy+0x6>
}
     9a2:	4770      	bx	lr

000009a4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     9a4:	2a00      	cmp	r2, #0
     9a6:	d004      	beq.n	9b2 <m2m_memset+0xe>
     9a8:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     9aa:	7001      	strb	r1, [r0, #0]
		pBuf++;
     9ac:	3001      	adds	r0, #1
	}while(--sz);
     9ae:	4290      	cmp	r0, r2
     9b0:	d1fb      	bne.n	9aa <m2m_memset+0x6>
}
     9b2:	4770      	bx	lr

000009b4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     9b4:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     9b6:	7802      	ldrb	r2, [r0, #0]
     9b8:	2a00      	cmp	r2, #0
     9ba:	d007      	beq.n	9cc <m2m_strlen+0x18>
     9bc:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     9be:	3001      	adds	r0, #1
     9c0:	b280      	uxth	r0, r0
		pcStr++;
     9c2:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     9c4:	781a      	ldrb	r2, [r3, #0]
     9c6:	2a00      	cmp	r2, #0
     9c8:	d1f9      	bne.n	9be <m2m_strlen+0xa>
     9ca:	e000      	b.n	9ce <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
     9cc:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
     9ce:	4770      	bx	lr

000009d0 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
     9d0:	b510      	push	{r4, lr}
     9d2:	0003      	movs	r3, r0
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
     9d4:	2a00      	cmp	r2, #0
     9d6:	d01a      	beq.n	a0e <m2m_strncmp+0x3e>
	if (*pcS1 != *pcS2)
     9d8:	7800      	ldrb	r0, [r0, #0]
     9da:	780c      	ldrb	r4, [r1, #0]
     9dc:	42a0      	cmp	r0, r4
     9de:	d10a      	bne.n	9f6 <m2m_strncmp+0x26>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
     9e0:	2800      	cmp	r0, #0
     9e2:	d017      	beq.n	a14 <m2m_strncmp+0x44>
     9e4:	3a01      	subs	r2, #1
     9e6:	b292      	uxth	r2, r2
     9e8:	3201      	adds	r2, #1
     9ea:	189a      	adds	r2, r3, r2
     9ec:	e009      	b.n	a02 <m2m_strncmp+0x32>
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
	if (*pcS1 != *pcS2)
     9ee:	7818      	ldrb	r0, [r3, #0]
     9f0:	780c      	ldrb	r4, [r1, #0]
     9f2:	42a0      	cmp	r0, r4
     9f4:	d003      	beq.n	9fe <m2m_strncmp+0x2e>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
     9f6:	42a0      	cmp	r0, r4
     9f8:	d30b      	bcc.n	a12 <m2m_strncmp+0x42>
     9fa:	2001      	movs	r0, #1
     9fc:	e00a      	b.n	a14 <m2m_strncmp+0x44>
	else if (*pcS1 == '\0')
     9fe:	2800      	cmp	r0, #0
     a00:	d008      	beq.n	a14 <m2m_strncmp+0x44>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
     a02:	3301      	adds	r3, #1
     a04:	3101      	adds	r1, #1
     a06:	4293      	cmp	r3, r2
     a08:	d1f1      	bne.n	9ee <m2m_strncmp+0x1e>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
     a0a:	2000      	movs	r0, #0
     a0c:	e002      	b.n	a14 <m2m_strncmp+0x44>
     a0e:	2000      	movs	r0, #0
     a10:	e000      	b.n	a14 <m2m_strncmp+0x44>

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
     a12:	20ff      	movs	r0, #255	; 0xff
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
}
     a14:	bd10      	pop	{r4, pc}
     a16:	46c0      	nop			; (mov r8, r8)

00000a18 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
     a18:	b5f0      	push	{r4, r5, r6, r7, lr}
     a1a:	b083      	sub	sp, #12
     a1c:	0004      	movs	r4, r0
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
     a1e:	780e      	ldrb	r6, [r1, #0]
    if (!u8c)
     a20:	2e00      	cmp	r6, #0
     a22:	d017      	beq.n	a54 <m2m_strstr+0x3c>
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
     a24:	1c4b      	adds	r3, r1, #1
     a26:	9300      	str	r3, [sp, #0]
    if (!u8c)
        return (uint8 *) pcIn;	// Trivial empty string case

    u16StrLen = m2m_strlen(pcStr);
     a28:	0018      	movs	r0, r3
     a2a:	4b0b      	ldr	r3, [pc, #44]	; (a58 <m2m_strstr+0x40>)
     a2c:	4798      	blx	r3
     a2e:	9001      	str	r0, [sp, #4]
        do {
            u8Sc = *pcIn++;
            if (!u8Sc)
                return (uint8 *) 0;
        } while (u8Sc != u8c);
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
     a30:	4f0a      	ldr	r7, [pc, #40]	; (a5c <m2m_strstr+0x44>)
     a32:	e000      	b.n	a36 <m2m_strstr+0x1e>
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
     a34:	002c      	movs	r4, r5
    u16StrLen = m2m_strlen(pcStr);
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
     a36:	1c65      	adds	r5, r4, #1
     a38:	7823      	ldrb	r3, [r4, #0]
            if (!u8Sc)
     a3a:	2b00      	cmp	r3, #0
     a3c:	d009      	beq.n	a52 <m2m_strstr+0x3a>
                return (uint8 *) 0;
        } while (u8Sc != u8c);
     a3e:	429e      	cmp	r6, r3
     a40:	d1f8      	bne.n	a34 <m2m_strstr+0x1c>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
     a42:	9a01      	ldr	r2, [sp, #4]
     a44:	9900      	ldr	r1, [sp, #0]
     a46:	0028      	movs	r0, r5
     a48:	47b8      	blx	r7
     a4a:	2800      	cmp	r0, #0
     a4c:	d1f2      	bne.n	a34 <m2m_strstr+0x1c>
     a4e:	0020      	movs	r0, r4
     a50:	e000      	b.n	a54 <m2m_strstr+0x3c>
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
            if (!u8Sc)
                return (uint8 *) 0;
     a52:	2000      	movs	r0, #0
        } while (u8Sc != u8c);
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);

    return (uint8 *) (pcIn - 1);
}
     a54:	b003      	add	sp, #12
     a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a58:	000009b5 	.word	0x000009b5
     a5c:	000009d1 	.word	0x000009d1

00000a60 <m2m_memcmp>:

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
     a60:	b530      	push	{r4, r5, lr}
	uint32	i;
	sint8		s8Result = 0;
	for(i	 = 0 ; i < u32Size ; i++)
     a62:	2a00      	cmp	r2, #0
     a64:	d00e      	beq.n	a84 <m2m_memcmp+0x24>
	{
		if(pu8Buff1[i] != pu8Buff2[i])
     a66:	7804      	ldrb	r4, [r0, #0]
     a68:	780b      	ldrb	r3, [r1, #0]
     a6a:	429c      	cmp	r4, r3
     a6c:	d10c      	bne.n	a88 <m2m_memcmp+0x28>
     a6e:	2300      	movs	r3, #0
     a70:	e003      	b.n	a7a <m2m_memcmp+0x1a>
     a72:	5cc5      	ldrb	r5, [r0, r3]
     a74:	5ccc      	ldrb	r4, [r1, r3]
     a76:	42a5      	cmp	r5, r4
     a78:	d108      	bne.n	a8c <m2m_memcmp+0x2c>

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
	uint32	i;
	sint8		s8Result = 0;
	for(i	 = 0 ; i < u32Size ; i++)
     a7a:	3301      	adds	r3, #1
     a7c:	429a      	cmp	r2, r3
     a7e:	d1f8      	bne.n	a72 <m2m_memcmp+0x12>
}

sint8 m2m_memcmp(uint8 *pu8Buff1,uint8 *pu8Buff2 ,uint32 u32Size)
{
	uint32	i;
	sint8		s8Result = 0;
     a80:	2000      	movs	r0, #0
     a82:	e004      	b.n	a8e <m2m_memcmp+0x2e>
     a84:	2000      	movs	r0, #0
     a86:	e002      	b.n	a8e <m2m_memcmp+0x2e>
	for(i	 = 0 ; i < u32Size ; i++)
	{
		if(pu8Buff1[i] != pu8Buff2[i])
		{
			s8Result = 1;
     a88:	2001      	movs	r0, #1
     a8a:	e000      	b.n	a8e <m2m_memcmp+0x2e>
     a8c:	2001      	movs	r0, #1
			break;
		}
	}
	return s8Result;
}
     a8e:	bd30      	pop	{r4, r5, pc}

00000a90 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
     a90:	4a02      	ldr	r2, [pc, #8]	; (a9c <isr+0xc>)
     a92:	7813      	ldrb	r3, [r2, #0]
     a94:	3301      	adds	r3, #1
     a96:	b2db      	uxtb	r3, r3
     a98:	7013      	strb	r3, [r2, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     a9a:	4770      	bx	lr
     a9c:	200000a0 	.word	0x200000a0

00000aa0 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     aa0:	4770      	bx	lr
     aa2:	46c0      	nop			; (mov r8, r8)

00000aa4 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
     aa4:	b500      	push	{lr}
     aa6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     aa8:	2001      	movs	r0, #1
     aaa:	4b08      	ldr	r3, [pc, #32]	; (acc <hif_set_rx_done+0x28>)
     aac:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     aae:	a901      	add	r1, sp, #4
     ab0:	4807      	ldr	r0, [pc, #28]	; (ad0 <hif_set_rx_done+0x2c>)
     ab2:	4b08      	ldr	r3, [pc, #32]	; (ad4 <hif_set_rx_done+0x30>)
     ab4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     ab6:	2800      	cmp	r0, #0
     ab8:	d106      	bne.n	ac8 <hif_set_rx_done+0x24>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     aba:	2102      	movs	r1, #2
     abc:	9b01      	ldr	r3, [sp, #4]
     abe:	4319      	orrs	r1, r3
     ac0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     ac2:	4803      	ldr	r0, [pc, #12]	; (ad0 <hif_set_rx_done+0x2c>)
     ac4:	4b04      	ldr	r3, [pc, #16]	; (ad8 <hif_set_rx_done+0x34>)
     ac6:	4798      	blx	r3
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
     ac8:	b003      	add	sp, #12
     aca:	bd00      	pop	{pc}
     acc:	00000701 	.word	0x00000701
     ad0:	00001070 	.word	0x00001070
     ad4:	00001e25 	.word	0x00001e25
     ad8:	00001e31 	.word	0x00001e31

00000adc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     adc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
     ade:	4b0e      	ldr	r3, [pc, #56]	; (b18 <hif_chip_wake+0x3c>)
     ae0:	781b      	ldrb	r3, [r3, #0]
     ae2:	2b00      	cmp	r3, #0
     ae4:	d111      	bne.n	b0a <hif_chip_wake+0x2e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     ae6:	4b0d      	ldr	r3, [pc, #52]	; (b1c <hif_chip_wake+0x40>)
     ae8:	781b      	ldrb	r3, [r3, #0]
     aea:	2b03      	cmp	r3, #3
     aec:	d003      	beq.n	af6 <hif_chip_wake+0x1a>
     aee:	4b0b      	ldr	r3, [pc, #44]	; (b1c <hif_chip_wake+0x40>)
     af0:	781b      	ldrb	r3, [r3, #0]
     af2:	2b04      	cmp	r3, #4
     af4:	d109      	bne.n	b0a <hif_chip_wake+0x2e>
		{
			ret = nm_clkless_wake();
     af6:	4b0a      	ldr	r3, [pc, #40]	; (b20 <hif_chip_wake+0x44>)
     af8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     afa:	2800      	cmp	r0, #0
     afc:	d10b      	bne.n	b16 <hif_chip_wake+0x3a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     afe:	4909      	ldr	r1, [pc, #36]	; (b24 <hif_chip_wake+0x48>)
     b00:	4809      	ldr	r0, [pc, #36]	; (b28 <hif_chip_wake+0x4c>)
     b02:	4b0a      	ldr	r3, [pc, #40]	; (b2c <hif_chip_wake+0x50>)
     b04:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     b06:	2800      	cmp	r0, #0
     b08:	d105      	bne.n	b16 <hif_chip_wake+0x3a>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     b0a:	4a03      	ldr	r2, [pc, #12]	; (b18 <hif_chip_wake+0x3c>)
     b0c:	7813      	ldrb	r3, [r2, #0]
     b0e:	3301      	adds	r3, #1
     b10:	b2db      	uxtb	r3, r3
     b12:	7013      	strb	r3, [r2, #0]
     b14:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     b16:	bd10      	pop	{r4, pc}
     b18:	200000bc 	.word	0x200000bc
     b1c:	200000ac 	.word	0x200000ac
     b20:	00001951 	.word	0x00001951
     b24:	00005678 	.word	0x00005678
     b28:	00001074 	.word	0x00001074
     b2c:	00001e31 	.word	0x00001e31

00000b30 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     b30:	b500      	push	{lr}
     b32:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
     b34:	4b17      	ldr	r3, [pc, #92]	; (b94 <hif_chip_sleep+0x64>)
     b36:	781b      	ldrb	r3, [r3, #0]
     b38:	2b00      	cmp	r3, #0
     b3a:	d004      	beq.n	b46 <hif_chip_sleep+0x16>
	{
		gu8ChipSleep--;
     b3c:	4a15      	ldr	r2, [pc, #84]	; (b94 <hif_chip_sleep+0x64>)
     b3e:	7813      	ldrb	r3, [r2, #0]
     b40:	3b01      	subs	r3, #1
     b42:	b2db      	uxtb	r3, r3
     b44:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
     b46:	4b13      	ldr	r3, [pc, #76]	; (b94 <hif_chip_sleep+0x64>)
     b48:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
     b4a:	2000      	movs	r0, #0
	if(gu8ChipSleep >= 1)
	{
		gu8ChipSleep--;
	}
	
	if(gu8ChipSleep == 0)
     b4c:	2b00      	cmp	r3, #0
     b4e:	d11e      	bne.n	b8e <hif_chip_sleep+0x5e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     b50:	4b11      	ldr	r3, [pc, #68]	; (b98 <hif_chip_sleep+0x68>)
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	2b03      	cmp	r3, #3
     b56:	d003      	beq.n	b60 <hif_chip_sleep+0x30>
     b58:	4b0f      	ldr	r3, [pc, #60]	; (b98 <hif_chip_sleep+0x68>)
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	2b04      	cmp	r3, #4
     b5e:	d116      	bne.n	b8e <hif_chip_sleep+0x5e>
		{
			uint32 reg = 0;
     b60:	2300      	movs	r3, #0
     b62:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     b64:	490d      	ldr	r1, [pc, #52]	; (b9c <hif_chip_sleep+0x6c>)
     b66:	480e      	ldr	r0, [pc, #56]	; (ba0 <hif_chip_sleep+0x70>)
     b68:	4b0e      	ldr	r3, [pc, #56]	; (ba4 <hif_chip_sleep+0x74>)
     b6a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     b6c:	2800      	cmp	r0, #0
     b6e:	d10e      	bne.n	b8e <hif_chip_sleep+0x5e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     b70:	a901      	add	r1, sp, #4
     b72:	3001      	adds	r0, #1
     b74:	4b0c      	ldr	r3, [pc, #48]	; (ba8 <hif_chip_sleep+0x78>)
     b76:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     b78:	2800      	cmp	r0, #0
     b7a:	d108      	bne.n	b8e <hif_chip_sleep+0x5e>
			if(reg&0x2)
     b7c:	9901      	ldr	r1, [sp, #4]
     b7e:	078b      	lsls	r3, r1, #30
     b80:	d505      	bpl.n	b8e <hif_chip_sleep+0x5e>
			{
				reg &=~(1 << 1);
     b82:	2302      	movs	r3, #2
     b84:	4399      	bics	r1, r3
     b86:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
     b88:	3001      	adds	r0, #1
     b8a:	4b06      	ldr	r3, [pc, #24]	; (ba4 <hif_chip_sleep+0x74>)
     b8c:	4798      	blx	r3
		{
		}
	}
ERR1:
	return ret;
}
     b8e:	b003      	add	sp, #12
     b90:	bd00      	pop	{pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	200000bc 	.word	0x200000bc
     b98:	200000ac 	.word	0x200000ac
     b9c:	00004321 	.word	0x00004321
     ba0:	00001074 	.word	0x00001074
     ba4:	00001e31 	.word	0x00001e31
     ba8:	00001e25 	.word	0x00001e25

00000bac <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	465f      	mov	r7, fp
     bb0:	4656      	mov	r6, sl
     bb2:	b4c0      	push	{r6, r7}
     bb4:	b089      	sub	sp, #36	; 0x24
     bb6:	4683      	mov	fp, r0
     bb8:	468a      	mov	sl, r1
     bba:	9201      	str	r2, [sp, #4]
     bbc:	9300      	str	r3, [sp, #0]
     bbe:	ab10      	add	r3, sp, #64	; 0x40
     bc0:	cb80      	ldmia	r3!, {r7}
     bc2:	881e      	ldrh	r6, [r3, #0]
     bc4:	ab12      	add	r3, sp, #72	; 0x48
     bc6:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     bc8:	227f      	movs	r2, #127	; 0x7f
     bca:	400a      	ands	r2, r1
     bcc:	ab07      	add	r3, sp, #28
     bce:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     bd0:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     bd2:	2208      	movs	r2, #8
     bd4:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     bd6:	2f00      	cmp	r7, #0
     bd8:	d005      	beq.n	be6 <hif_send+0x3a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     bda:	885a      	ldrh	r2, [r3, #2]
     bdc:	1992      	adds	r2, r2, r6
     bde:	18aa      	adds	r2, r5, r2
     be0:	b292      	uxth	r2, r2
     be2:	805a      	strh	r2, [r3, #2]
     be4:	e006      	b.n	bf4 <hif_send+0x48>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     be6:	ab07      	add	r3, sp, #28
     be8:	885a      	ldrh	r2, [r3, #2]
     bea:	9900      	ldr	r1, [sp, #0]
     bec:	468c      	mov	ip, r1
     bee:	4462      	add	r2, ip
     bf0:	b292      	uxth	r2, r2
     bf2:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     bf4:	4b56      	ldr	r3, [pc, #344]	; (d50 <hif_send+0x1a4>)
     bf6:	4798      	blx	r3
     bf8:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     bfa:	d000      	beq.n	bfe <hif_send+0x52>
     bfc:	e08e      	b.n	d1c <hif_send+0x170>
	{
		volatile uint32 reg, dma_addr = 0;
     bfe:	2300      	movs	r3, #0
     c00:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     c02:	aa02      	add	r2, sp, #8
     c04:	80d3      	strh	r3, [r2, #6]

		reg = 0UL;
     c06:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     c08:	9b04      	ldr	r3, [sp, #16]
     c0a:	465a      	mov	r2, fp
     c0c:	431a      	orrs	r2, r3
     c0e:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     c10:	9a04      	ldr	r2, [sp, #16]
     c12:	4653      	mov	r3, sl
     c14:	021b      	lsls	r3, r3, #8
     c16:	4313      	orrs	r3, r2
     c18:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     c1a:	ab07      	add	r3, sp, #28
     c1c:	885b      	ldrh	r3, [r3, #2]
     c1e:	9a04      	ldr	r2, [sp, #16]
     c20:	041b      	lsls	r3, r3, #16
     c22:	4313      	orrs	r3, r2
     c24:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     c26:	9904      	ldr	r1, [sp, #16]
     c28:	484a      	ldr	r0, [pc, #296]	; (d54 <hif_send+0x1a8>)
     c2a:	4b4b      	ldr	r3, [pc, #300]	; (d58 <hif_send+0x1ac>)
     c2c:	4798      	blx	r3
     c2e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     c30:	d000      	beq.n	c34 <hif_send+0x88>
     c32:	e086      	b.n	d42 <hif_send+0x196>


		reg = 0;
     c34:	2300      	movs	r3, #0
     c36:	9304      	str	r3, [sp, #16]
		reg |= (1<<1);
     c38:	9a04      	ldr	r2, [sp, #16]
     c3a:	3302      	adds	r3, #2
     c3c:	4313      	orrs	r3, r2
     c3e:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     c40:	9904      	ldr	r1, [sp, #16]
     c42:	4846      	ldr	r0, [pc, #280]	; (d5c <hif_send+0x1b0>)
     c44:	4b44      	ldr	r3, [pc, #272]	; (d58 <hif_send+0x1ac>)
     c46:	4798      	blx	r3
     c48:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     c4a:	d000      	beq.n	c4e <hif_send+0xa2>
     c4c:	e079      	b.n	d42 <hif_send+0x196>
		dma_addr = 0;
     c4e:	2200      	movs	r2, #0
     c50:	9205      	str	r2, [sp, #20]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     c52:	ab02      	add	r3, sp, #8
     c54:	80da      	strh	r2, [r3, #6]
     c56:	3306      	adds	r3, #6
     c58:	881b      	ldrh	r3, [r3, #0]
     c5a:	b29b      	uxth	r3, r3
     c5c:	4a40      	ldr	r2, [pc, #256]	; (d60 <hif_send+0x1b4>)
     c5e:	4293      	cmp	r3, r2
     c60:	d81c      	bhi.n	c9c <hif_send+0xf0>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     c62:	4c40      	ldr	r4, [pc, #256]	; (d64 <hif_send+0x1b8>)
     c64:	a904      	add	r1, sp, #16
     c66:	483d      	ldr	r0, [pc, #244]	; (d5c <hif_send+0x1b0>)
     c68:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     c6a:	2800      	cmp	r0, #0
     c6c:	d116      	bne.n	c9c <hif_send+0xf0>
			if (!(reg & 0x2))
     c6e:	9b04      	ldr	r3, [sp, #16]
     c70:	079b      	lsls	r3, r3, #30
     c72:	d408      	bmi.n	c86 <hif_send+0xda>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     c74:	a905      	add	r1, sp, #20
     c76:	483c      	ldr	r0, [pc, #240]	; (d68 <hif_send+0x1bc>)
     c78:	4b3a      	ldr	r3, [pc, #232]	; (d64 <hif_send+0x1b8>)
     c7a:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
     c7c:	2800      	cmp	r0, #0
     c7e:	d00d      	beq.n	c9c <hif_send+0xf0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
     c80:	2300      	movs	r3, #0
     c82:	9305      	str	r3, [sp, #20]
     c84:	e00a      	b.n	c9c <hif_send+0xf0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     c86:	ab02      	add	r3, sp, #8
     c88:	88da      	ldrh	r2, [r3, #6]
     c8a:	3201      	adds	r2, #1
     c8c:	b292      	uxth	r2, r2
     c8e:	80da      	strh	r2, [r3, #6]
     c90:	3306      	adds	r3, #6
     c92:	881b      	ldrh	r3, [r3, #0]
     c94:	b29b      	uxth	r3, r3
     c96:	4a32      	ldr	r2, [pc, #200]	; (d60 <hif_send+0x1b4>)
     c98:	4293      	cmp	r3, r2
     c9a:	d9e3      	bls.n	c64 <hif_send+0xb8>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     c9c:	9b05      	ldr	r3, [sp, #20]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d04d      	beq.n	d3e <hif_send+0x192>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     ca2:	9b05      	ldr	r3, [sp, #20]
     ca4:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     ca6:	a907      	add	r1, sp, #28
     ca8:	884b      	ldrh	r3, [r1, #2]
     caa:	b29b      	uxth	r3, r3
     cac:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     cae:	9806      	ldr	r0, [sp, #24]
     cb0:	2208      	movs	r2, #8
     cb2:	4b2e      	ldr	r3, [pc, #184]	; (d6c <hif_send+0x1c0>)
     cb4:	4798      	blx	r3
     cb6:	1e04      	subs	r4, r0, #0
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
     cb8:	d143      	bne.n	d42 <hif_send+0x196>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     cba:	9b06      	ldr	r3, [sp, #24]
     cbc:	3308      	adds	r3, #8
     cbe:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     cc0:	9b01      	ldr	r3, [sp, #4]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d00b      	beq.n	cde <hif_send+0x132>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     cc6:	9806      	ldr	r0, [sp, #24]
     cc8:	9a00      	ldr	r2, [sp, #0]
     cca:	0019      	movs	r1, r3
     ccc:	4b27      	ldr	r3, [pc, #156]	; (d6c <hif_send+0x1c0>)
     cce:	4798      	blx	r3
     cd0:	1e04      	subs	r4, r0, #0
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     cd2:	d136      	bne.n	d42 <hif_send+0x196>
				u32CurrAddr += u16CtrlBufSize;
     cd4:	9b06      	ldr	r3, [sp, #24]
     cd6:	9a00      	ldr	r2, [sp, #0]
     cd8:	4694      	mov	ip, r2
     cda:	4463      	add	r3, ip
     cdc:	9306      	str	r3, [sp, #24]
			}
			if(pu8DataBuf != NULL)
     cde:	2f00      	cmp	r7, #0
     ce0:	d00e      	beq.n	d00 <hif_send+0x154>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     ce2:	9b06      	ldr	r3, [sp, #24]
     ce4:	9a00      	ldr	r2, [sp, #0]
     ce6:	1aad      	subs	r5, r5, r2
     ce8:	18ed      	adds	r5, r5, r3
     cea:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     cec:	9806      	ldr	r0, [sp, #24]
     cee:	0032      	movs	r2, r6
     cf0:	0039      	movs	r1, r7
     cf2:	4b1e      	ldr	r3, [pc, #120]	; (d6c <hif_send+0x1c0>)
     cf4:	4798      	blx	r3
     cf6:	1e04      	subs	r4, r0, #0
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     cf8:	d123      	bne.n	d42 <hif_send+0x196>
				u32CurrAddr += u16DataSize;
     cfa:	9b06      	ldr	r3, [sp, #24]
     cfc:	18f3      	adds	r3, r6, r3
     cfe:	9306      	str	r3, [sp, #24]
			}

			reg = dma_addr << 2;
     d00:	9b05      	ldr	r3, [sp, #20]
     d02:	009b      	lsls	r3, r3, #2
     d04:	9304      	str	r3, [sp, #16]
			reg |= (1 << 1);
     d06:	9a04      	ldr	r2, [sp, #16]
     d08:	2302      	movs	r3, #2
     d0a:	4313      	orrs	r3, r2
     d0c:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     d0e:	9904      	ldr	r1, [sp, #16]
     d10:	4817      	ldr	r0, [pc, #92]	; (d70 <hif_send+0x1c4>)
     d12:	4b11      	ldr	r3, [pc, #68]	; (d58 <hif_send+0x1ac>)
     d14:	4798      	blx	r3
     d16:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     d18:	d113      	bne.n	d42 <hif_send+0x196>
     d1a:	e00c      	b.n	d36 <hif_send+0x18a>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     d1c:	22a0      	movs	r2, #160	; 0xa0
     d1e:	32ff      	adds	r2, #255	; 0xff
     d20:	4914      	ldr	r1, [pc, #80]	; (d74 <hif_send+0x1c8>)
     d22:	4815      	ldr	r0, [pc, #84]	; (d78 <hif_send+0x1cc>)
     d24:	4b15      	ldr	r3, [pc, #84]	; (d7c <hif_send+0x1d0>)
     d26:	4798      	blx	r3
     d28:	4815      	ldr	r0, [pc, #84]	; (d80 <hif_send+0x1d4>)
     d2a:	4b16      	ldr	r3, [pc, #88]	; (d84 <hif_send+0x1d8>)
     d2c:	4798      	blx	r3
     d2e:	200d      	movs	r0, #13
     d30:	4b15      	ldr	r3, [pc, #84]	; (d88 <hif_send+0x1dc>)
     d32:	4798      	blx	r3
		goto ERR1;
     d34:	e005      	b.n	d42 <hif_send+0x196>
	}
	ret = hif_chip_sleep();
     d36:	4b15      	ldr	r3, [pc, #84]	; (d8c <hif_send+0x1e0>)
     d38:	4798      	blx	r3
     d3a:	0004      	movs	r4, r0
     d3c:	e001      	b.n	d42 <hif_send+0x196>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
     d3e:	2403      	movs	r4, #3
     d40:	4264      	negs	r4, r4
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
     d42:	0020      	movs	r0, r4
     d44:	b009      	add	sp, #36	; 0x24
     d46:	bc0c      	pop	{r2, r3}
     d48:	4692      	mov	sl, r2
     d4a:	469b      	mov	fp, r3
     d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	00000add 	.word	0x00000add
     d54:	0000108c 	.word	0x0000108c
     d58:	00001e31 	.word	0x00001e31
     d5c:	00001078 	.word	0x00001078
     d60:	000003e7 	.word	0x000003e7
     d64:	00001e25 	.word	0x00001e25
     d68:	00150400 	.word	0x00150400
     d6c:	00001ea5 	.word	0x00001ea5
     d70:	0000106c 	.word	0x0000106c
     d74:	00006d78 	.word	0x00006d78
     d78:	00006d30 	.word	0x00006d30
     d7c:	00005bad 	.word	0x00005bad
     d80:	00006d8c 	.word	0x00006d8c
     d84:	00005ccd 	.word	0x00005ccd
     d88:	00005be1 	.word	0x00005be1
     d8c:	00000b31 	.word	0x00000b31

00000d90 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     d90:	b5f0      	push	{r4, r5, r6, r7, lr}
     d92:	464f      	mov	r7, r9
     d94:	4646      	mov	r6, r8
     d96:	b4c0      	push	{r6, r7}
     d98:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     d9a:	4ba8      	ldr	r3, [pc, #672]	; (103c <hif_handle_isr+0x2ac>)
     d9c:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     d9e:	4699      	mov	r9, r3
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     da0:	4ea7      	ldr	r6, [pc, #668]	; (1040 <hif_handle_isr+0x2b0>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     da2:	e13f      	b.n	1024 <hif_handle_isr+0x294>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     da4:	464b      	mov	r3, r9
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	3b01      	subs	r3, #1
     daa:	b2db      	uxtb	r3, r3
     dac:	464a      	mov	r2, r9
     dae:	7013      	strb	r3, [r2, #0]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     db0:	47b0      	blx	r6
     db2:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     db4:	d000      	beq.n	db8 <hif_handle_isr+0x28>
     db6:	e117      	b.n	fe8 <hif_handle_isr+0x258>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     db8:	a903      	add	r1, sp, #12
     dba:	48a2      	ldr	r0, [pc, #648]	; (1044 <hif_handle_isr+0x2b4>)
     dbc:	4ba2      	ldr	r3, [pc, #648]	; (1048 <hif_handle_isr+0x2b8>)
     dbe:	4798      	blx	r3
     dc0:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS == ret)
     dc2:	d000      	beq.n	dc6 <hif_handle_isr+0x36>
     dc4:	e104      	b.n	fd0 <hif_handle_isr+0x240>
		{
			if(reg & 0x1)	/* New interrupt has been received */
     dc6:	9b03      	ldr	r3, [sp, #12]
     dc8:	07db      	lsls	r3, r3, #31
     dca:	d400      	bmi.n	dce <hif_handle_isr+0x3e>
     dcc:	e0f3      	b.n	fb6 <hif_handle_isr+0x226>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
     dce:	2000      	movs	r0, #0
     dd0:	4b9e      	ldr	r3, [pc, #632]	; (104c <hif_handle_isr+0x2bc>)
     dd2:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
     dd4:	2301      	movs	r3, #1
     dd6:	9903      	ldr	r1, [sp, #12]
     dd8:	4399      	bics	r1, r3
     dda:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     ddc:	4899      	ldr	r0, [pc, #612]	; (1044 <hif_handle_isr+0x2b4>)
     dde:	4b9c      	ldr	r3, [pc, #624]	; (1050 <hif_handle_isr+0x2c0>)
     de0:	4798      	blx	r3
     de2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     de4:	d000      	beq.n	de8 <hif_handle_isr+0x58>
     de6:	e111      	b.n	100c <hif_handle_isr+0x27c>
				gu8HifSizeDone = 0;
     de8:	2200      	movs	r2, #0
     dea:	4b9a      	ldr	r3, [pc, #616]	; (1054 <hif_handle_isr+0x2c4>)
     dec:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
     dee:	9b03      	ldr	r3, [sp, #12]
     df0:	049b      	lsls	r3, r3, #18
     df2:	0d1f      	lsrs	r7, r3, #20
				if (size > 0) {
     df4:	d100      	bne.n	df8 <hif_handle_isr+0x68>
     df6:	e0d0      	b.n	f9a <hif_handle_isr+0x20a>
					uint32 address = 0;
     df8:	2300      	movs	r3, #0
     dfa:	9305      	str	r3, [sp, #20]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     dfc:	a905      	add	r1, sp, #20
     dfe:	4896      	ldr	r0, [pc, #600]	; (1058 <hif_handle_isr+0x2c8>)
     e00:	4b91      	ldr	r3, [pc, #580]	; (1048 <hif_handle_isr+0x2b8>)
     e02:	4798      	blx	r3
     e04:	1e04      	subs	r4, r0, #0
					if(M2M_SUCCESS != ret)
     e06:	d00f      	beq.n	e28 <hif_handle_isr+0x98>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     e08:	22e7      	movs	r2, #231	; 0xe7
     e0a:	0052      	lsls	r2, r2, #1
     e0c:	4993      	ldr	r1, [pc, #588]	; (105c <hif_handle_isr+0x2cc>)
     e0e:	4894      	ldr	r0, [pc, #592]	; (1060 <hif_handle_isr+0x2d0>)
     e10:	4b94      	ldr	r3, [pc, #592]	; (1064 <hif_handle_isr+0x2d4>)
     e12:	4798      	blx	r3
     e14:	4894      	ldr	r0, [pc, #592]	; (1068 <hif_handle_isr+0x2d8>)
     e16:	4b95      	ldr	r3, [pc, #596]	; (106c <hif_handle_isr+0x2dc>)
     e18:	4798      	blx	r3
     e1a:	200d      	movs	r0, #13
     e1c:	4b94      	ldr	r3, [pc, #592]	; (1070 <hif_handle_isr+0x2e0>)
     e1e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     e20:	2001      	movs	r0, #1
     e22:	4b8a      	ldr	r3, [pc, #552]	; (104c <hif_handle_isr+0x2bc>)
     e24:	4798      	blx	r3
     e26:	e0ef      	b.n	1008 <hif_handle_isr+0x278>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     e28:	ad04      	add	r5, sp, #16
     e2a:	2204      	movs	r2, #4
     e2c:	0029      	movs	r1, r5
     e2e:	9805      	ldr	r0, [sp, #20]
     e30:	4b90      	ldr	r3, [pc, #576]	; (1074 <hif_handle_isr+0x2e4>)
     e32:	4798      	blx	r3
     e34:	0004      	movs	r4, r0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     e36:	886b      	ldrh	r3, [r5, #2]
     e38:	b29b      	uxth	r3, r3
     e3a:	806b      	strh	r3, [r5, #2]
					if(M2M_SUCCESS != ret)
     e3c:	2800      	cmp	r0, #0
     e3e:	d00f      	beq.n	e60 <hif_handle_isr+0xd0>
					{
						M2M_ERR("(hif) address bus fail\n");
     e40:	22eb      	movs	r2, #235	; 0xeb
     e42:	0052      	lsls	r2, r2, #1
     e44:	4985      	ldr	r1, [pc, #532]	; (105c <hif_handle_isr+0x2cc>)
     e46:	4886      	ldr	r0, [pc, #536]	; (1060 <hif_handle_isr+0x2d0>)
     e48:	4b86      	ldr	r3, [pc, #536]	; (1064 <hif_handle_isr+0x2d4>)
     e4a:	4798      	blx	r3
     e4c:	488a      	ldr	r0, [pc, #552]	; (1078 <hif_handle_isr+0x2e8>)
     e4e:	4b87      	ldr	r3, [pc, #540]	; (106c <hif_handle_isr+0x2dc>)
     e50:	4798      	blx	r3
     e52:	200d      	movs	r0, #13
     e54:	4b86      	ldr	r3, [pc, #536]	; (1070 <hif_handle_isr+0x2e0>)
     e56:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     e58:	2001      	movs	r0, #1
     e5a:	4b7c      	ldr	r3, [pc, #496]	; (104c <hif_handle_isr+0x2bc>)
     e5c:	4798      	blx	r3
     e5e:	e0d3      	b.n	1008 <hif_handle_isr+0x278>
						goto ERR1;
					}
					if(strHif.u16Length != size)
     e60:	ab04      	add	r3, sp, #16
     e62:	885b      	ldrh	r3, [r3, #2]
     e64:	b29b      	uxth	r3, r3
     e66:	429f      	cmp	r7, r3
     e68:	d01d      	beq.n	ea6 <hif_handle_isr+0x116>
					{
						if((size - strHif.u16Length) > 4)
     e6a:	ab04      	add	r3, sp, #16
     e6c:	885b      	ldrh	r3, [r3, #2]
     e6e:	1afb      	subs	r3, r7, r3
     e70:	2b04      	cmp	r3, #4
     e72:	dd18      	ble.n	ea6 <hif_handle_isr+0x116>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     e74:	22e0      	movs	r2, #224	; 0xe0
     e76:	32ff      	adds	r2, #255	; 0xff
     e78:	4978      	ldr	r1, [pc, #480]	; (105c <hif_handle_isr+0x2cc>)
     e7a:	4879      	ldr	r0, [pc, #484]	; (1060 <hif_handle_isr+0x2d0>)
     e7c:	4c79      	ldr	r4, [pc, #484]	; (1064 <hif_handle_isr+0x2d4>)
     e7e:	47a0      	blx	r4
     e80:	a904      	add	r1, sp, #16
     e82:	884a      	ldrh	r2, [r1, #2]
     e84:	b292      	uxth	r2, r2
     e86:	780b      	ldrb	r3, [r1, #0]
     e88:	b2db      	uxtb	r3, r3
     e8a:	7849      	ldrb	r1, [r1, #1]
     e8c:	9100      	str	r1, [sp, #0]
     e8e:	0039      	movs	r1, r7
     e90:	487a      	ldr	r0, [pc, #488]	; (107c <hif_handle_isr+0x2ec>)
     e92:	47a0      	blx	r4
     e94:	200d      	movs	r0, #13
     e96:	4b76      	ldr	r3, [pc, #472]	; (1070 <hif_handle_isr+0x2e0>)
     e98:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
     e9a:	2001      	movs	r0, #1
     e9c:	4b6b      	ldr	r3, [pc, #428]	; (104c <hif_handle_isr+0x2bc>)
     e9e:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
     ea0:	2406      	movs	r4, #6
     ea2:	4264      	negs	r4, r4
     ea4:	e0b0      	b.n	1008 <hif_handle_isr+0x278>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     ea6:	ab04      	add	r3, sp, #16
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	2b01      	cmp	r3, #1
     eac:	d10d      	bne.n	eca <hif_handle_isr+0x13a>
					{
						if(pfWifiCb)
     eae:	4b74      	ldr	r3, [pc, #464]	; (1080 <hif_handle_isr+0x2f0>)
     eb0:	681b      	ldr	r3, [r3, #0]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d05f      	beq.n	f76 <hif_handle_isr+0x1e6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     eb6:	aa04      	add	r2, sp, #16
     eb8:	7850      	ldrb	r0, [r2, #1]
     eba:	b2c0      	uxtb	r0, r0
     ebc:	8851      	ldrh	r1, [r2, #2]
     ebe:	9a05      	ldr	r2, [sp, #20]
     ec0:	3208      	adds	r2, #8
     ec2:	3908      	subs	r1, #8
     ec4:	b289      	uxth	r1, r1
     ec6:	4798      	blx	r3
     ec8:	e055      	b.n	f76 <hif_handle_isr+0x1e6>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     eca:	ab04      	add	r3, sp, #16
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	2b02      	cmp	r3, #2
     ed0:	d10d      	bne.n	eee <hif_handle_isr+0x15e>
					{
						if(pfIpCb)
     ed2:	4b6c      	ldr	r3, [pc, #432]	; (1084 <hif_handle_isr+0x2f4>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d04d      	beq.n	f76 <hif_handle_isr+0x1e6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     eda:	aa04      	add	r2, sp, #16
     edc:	7850      	ldrb	r0, [r2, #1]
     ede:	b2c0      	uxtb	r0, r0
     ee0:	8851      	ldrh	r1, [r2, #2]
     ee2:	9a05      	ldr	r2, [sp, #20]
     ee4:	3208      	adds	r2, #8
     ee6:	3908      	subs	r1, #8
     ee8:	b289      	uxth	r1, r1
     eea:	4798      	blx	r3
     eec:	e043      	b.n	f76 <hif_handle_isr+0x1e6>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     eee:	ab04      	add	r3, sp, #16
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	2b04      	cmp	r3, #4
     ef4:	d10d      	bne.n	f12 <hif_handle_isr+0x182>
					{
						if(pfOtaCb)
     ef6:	4b64      	ldr	r3, [pc, #400]	; (1088 <hif_handle_isr+0x2f8>)
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	2b00      	cmp	r3, #0
     efc:	d03b      	beq.n	f76 <hif_handle_isr+0x1e6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     efe:	aa04      	add	r2, sp, #16
     f00:	7850      	ldrb	r0, [r2, #1]
     f02:	b2c0      	uxtb	r0, r0
     f04:	8851      	ldrh	r1, [r2, #2]
     f06:	9a05      	ldr	r2, [sp, #20]
     f08:	3208      	adds	r2, #8
     f0a:	3908      	subs	r1, #8
     f0c:	b289      	uxth	r1, r1
     f0e:	4798      	blx	r3
     f10:	e031      	b.n	f76 <hif_handle_isr+0x1e6>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     f12:	ab04      	add	r3, sp, #16
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	2b06      	cmp	r3, #6
     f18:	d10d      	bne.n	f36 <hif_handle_isr+0x1a6>
					{
						if(pfCryptoCb)
     f1a:	4b5c      	ldr	r3, [pc, #368]	; (108c <hif_handle_isr+0x2fc>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	2b00      	cmp	r3, #0
     f20:	d029      	beq.n	f76 <hif_handle_isr+0x1e6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     f22:	aa04      	add	r2, sp, #16
     f24:	7850      	ldrb	r0, [r2, #1]
     f26:	b2c0      	uxtb	r0, r0
     f28:	8851      	ldrh	r1, [r2, #2]
     f2a:	9a05      	ldr	r2, [sp, #20]
     f2c:	3208      	adds	r2, #8
     f2e:	3908      	subs	r1, #8
     f30:	b289      	uxth	r1, r1
     f32:	4798      	blx	r3
     f34:	e01f      	b.n	f76 <hif_handle_isr+0x1e6>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     f36:	ab04      	add	r3, sp, #16
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	2b07      	cmp	r3, #7
     f3c:	d10d      	bne.n	f5a <hif_handle_isr+0x1ca>
					{
						if(pfSigmaCb)
     f3e:	4b54      	ldr	r3, [pc, #336]	; (1090 <hif_handle_isr+0x300>)
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	2b00      	cmp	r3, #0
     f44:	d017      	beq.n	f76 <hif_handle_isr+0x1e6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     f46:	aa04      	add	r2, sp, #16
     f48:	7850      	ldrb	r0, [r2, #1]
     f4a:	b2c0      	uxtb	r0, r0
     f4c:	8851      	ldrh	r1, [r2, #2]
     f4e:	9a05      	ldr	r2, [sp, #20]
     f50:	3208      	adds	r2, #8
     f52:	3908      	subs	r1, #8
     f54:	b289      	uxth	r1, r1
     f56:	4798      	blx	r3
     f58:	e00d      	b.n	f76 <hif_handle_isr+0x1e6>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
     f5a:	4a4e      	ldr	r2, [pc, #312]	; (1094 <hif_handle_isr+0x304>)
     f5c:	493f      	ldr	r1, [pc, #252]	; (105c <hif_handle_isr+0x2cc>)
     f5e:	4840      	ldr	r0, [pc, #256]	; (1060 <hif_handle_isr+0x2d0>)
     f60:	4b40      	ldr	r3, [pc, #256]	; (1064 <hif_handle_isr+0x2d4>)
     f62:	4798      	blx	r3
     f64:	484c      	ldr	r0, [pc, #304]	; (1098 <hif_handle_isr+0x308>)
     f66:	4b41      	ldr	r3, [pc, #260]	; (106c <hif_handle_isr+0x2dc>)
     f68:	4798      	blx	r3
     f6a:	200d      	movs	r0, #13
     f6c:	4b40      	ldr	r3, [pc, #256]	; (1070 <hif_handle_isr+0x2e0>)
     f6e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     f70:	2406      	movs	r4, #6
     f72:	4264      	negs	r4, r4
     f74:	e048      	b.n	1008 <hif_handle_isr+0x278>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
     f76:	4b37      	ldr	r3, [pc, #220]	; (1054 <hif_handle_isr+0x2c4>)
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d141      	bne.n	1002 <hif_handle_isr+0x272>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
     f7e:	4a47      	ldr	r2, [pc, #284]	; (109c <hif_handle_isr+0x30c>)
     f80:	4936      	ldr	r1, [pc, #216]	; (105c <hif_handle_isr+0x2cc>)
     f82:	4837      	ldr	r0, [pc, #220]	; (1060 <hif_handle_isr+0x2d0>)
     f84:	4b37      	ldr	r3, [pc, #220]	; (1064 <hif_handle_isr+0x2d4>)
     f86:	4798      	blx	r3
     f88:	4845      	ldr	r0, [pc, #276]	; (10a0 <hif_handle_isr+0x310>)
     f8a:	4b38      	ldr	r3, [pc, #224]	; (106c <hif_handle_isr+0x2dc>)
     f8c:	4798      	blx	r3
     f8e:	200d      	movs	r0, #13
     f90:	4b37      	ldr	r3, [pc, #220]	; (1070 <hif_handle_isr+0x2e0>)
     f92:	4798      	blx	r3
						ret = hif_set_rx_done();
     f94:	4b43      	ldr	r3, [pc, #268]	; (10a4 <hif_handle_isr+0x314>)
     f96:	4798      	blx	r3
     f98:	e033      	b.n	1002 <hif_handle_isr+0x272>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
     f9a:	4a43      	ldr	r2, [pc, #268]	; (10a8 <hif_handle_isr+0x318>)
     f9c:	492f      	ldr	r1, [pc, #188]	; (105c <hif_handle_isr+0x2cc>)
     f9e:	4830      	ldr	r0, [pc, #192]	; (1060 <hif_handle_isr+0x2d0>)
     fa0:	4b30      	ldr	r3, [pc, #192]	; (1064 <hif_handle_isr+0x2d4>)
     fa2:	4798      	blx	r3
     fa4:	4841      	ldr	r0, [pc, #260]	; (10ac <hif_handle_isr+0x31c>)
     fa6:	4b31      	ldr	r3, [pc, #196]	; (106c <hif_handle_isr+0x2dc>)
     fa8:	4798      	blx	r3
     faa:	200d      	movs	r0, #13
     fac:	4b30      	ldr	r3, [pc, #192]	; (1070 <hif_handle_isr+0x2e0>)
     fae:	4798      	blx	r3
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
     fb0:	2402      	movs	r4, #2
     fb2:	4264      	negs	r4, r4
     fb4:	e02a      	b.n	100c <hif_handle_isr+0x27c>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
     fb6:	2286      	movs	r2, #134	; 0x86
     fb8:	0092      	lsls	r2, r2, #2
     fba:	4928      	ldr	r1, [pc, #160]	; (105c <hif_handle_isr+0x2cc>)
     fbc:	4828      	ldr	r0, [pc, #160]	; (1060 <hif_handle_isr+0x2d0>)
     fbe:	4c29      	ldr	r4, [pc, #164]	; (1064 <hif_handle_isr+0x2d4>)
     fc0:	47a0      	blx	r4
     fc2:	9903      	ldr	r1, [sp, #12]
     fc4:	483a      	ldr	r0, [pc, #232]	; (10b0 <hif_handle_isr+0x320>)
     fc6:	47a0      	blx	r4
     fc8:	200d      	movs	r0, #13
     fca:	4b29      	ldr	r3, [pc, #164]	; (1070 <hif_handle_isr+0x2e0>)
     fcc:	4798      	blx	r3
     fce:	e018      	b.n	1002 <hif_handle_isr+0x272>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
     fd0:	4a38      	ldr	r2, [pc, #224]	; (10b4 <hif_handle_isr+0x324>)
     fd2:	4922      	ldr	r1, [pc, #136]	; (105c <hif_handle_isr+0x2cc>)
     fd4:	4822      	ldr	r0, [pc, #136]	; (1060 <hif_handle_isr+0x2d0>)
     fd6:	4b23      	ldr	r3, [pc, #140]	; (1064 <hif_handle_isr+0x2d4>)
     fd8:	4798      	blx	r3
     fda:	4837      	ldr	r0, [pc, #220]	; (10b8 <hif_handle_isr+0x328>)
     fdc:	4b23      	ldr	r3, [pc, #140]	; (106c <hif_handle_isr+0x2dc>)
     fde:	4798      	blx	r3
     fe0:	200d      	movs	r0, #13
     fe2:	4b23      	ldr	r3, [pc, #140]	; (1070 <hif_handle_isr+0x2e0>)
     fe4:	4798      	blx	r3
     fe6:	e011      	b.n	100c <hif_handle_isr+0x27c>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
     fe8:	2289      	movs	r2, #137	; 0x89
     fea:	0092      	lsls	r2, r2, #2
     fec:	491b      	ldr	r1, [pc, #108]	; (105c <hif_handle_isr+0x2cc>)
     fee:	481c      	ldr	r0, [pc, #112]	; (1060 <hif_handle_isr+0x2d0>)
     ff0:	4b1c      	ldr	r3, [pc, #112]	; (1064 <hif_handle_isr+0x2d4>)
     ff2:	4798      	blx	r3
     ff4:	4831      	ldr	r0, [pc, #196]	; (10bc <hif_handle_isr+0x32c>)
     ff6:	4b1d      	ldr	r3, [pc, #116]	; (106c <hif_handle_isr+0x2dc>)
     ff8:	4798      	blx	r3
     ffa:	200d      	movs	r0, #13
     ffc:	4b1c      	ldr	r3, [pc, #112]	; (1070 <hif_handle_isr+0x2e0>)
     ffe:	4798      	blx	r3
    1000:	e004      	b.n	100c <hif_handle_isr+0x27c>
		goto ERR1;
	}

	ret = hif_chip_sleep();
    1002:	4b2f      	ldr	r3, [pc, #188]	; (10c0 <hif_handle_isr+0x330>)
    1004:	4798      	blx	r3
    1006:	0004      	movs	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
    1008:	2c00      	cmp	r4, #0
    100a:	d00b      	beq.n	1024 <hif_handle_isr+0x294>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    100c:	4a2d      	ldr	r2, [pc, #180]	; (10c4 <hif_handle_isr+0x334>)
    100e:	492e      	ldr	r1, [pc, #184]	; (10c8 <hif_handle_isr+0x338>)
    1010:	4813      	ldr	r0, [pc, #76]	; (1060 <hif_handle_isr+0x2d0>)
    1012:	4d14      	ldr	r5, [pc, #80]	; (1064 <hif_handle_isr+0x2d4>)
    1014:	47a8      	blx	r5
    1016:	0021      	movs	r1, r4
    1018:	482c      	ldr	r0, [pc, #176]	; (10cc <hif_handle_isr+0x33c>)
    101a:	47a8      	blx	r5
    101c:	200d      	movs	r0, #13
    101e:	4b14      	ldr	r3, [pc, #80]	; (1070 <hif_handle_isr+0x2e0>)
    1020:	4798      	blx	r3
			}
		}
    1022:	e6c5      	b.n	db0 <hif_handle_isr+0x20>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    1024:	4643      	mov	r3, r8
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	2b00      	cmp	r3, #0
    102a:	d000      	beq.n	102e <hif_handle_isr+0x29e>
    102c:	e6ba      	b.n	da4 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
    102e:	2000      	movs	r0, #0
    1030:	b007      	add	sp, #28
    1032:	bc0c      	pop	{r2, r3}
    1034:	4690      	mov	r8, r2
    1036:	4699      	mov	r9, r3
    1038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	200000a0 	.word	0x200000a0
    1040:	00000add 	.word	0x00000add
    1044:	00001070 	.word	0x00001070
    1048:	00001e25 	.word	0x00001e25
    104c:	00000701 	.word	0x00000701
    1050:	00001e31 	.word	0x00001e31
    1054:	200000b4 	.word	0x200000b4
    1058:	00001084 	.word	0x00001084
    105c:	00006d84 	.word	0x00006d84
    1060:	00006d30 	.word	0x00006d30
    1064:	00005bad 	.word	0x00005bad
    1068:	00006da8 	.word	0x00006da8
    106c:	00005ccd 	.word	0x00005ccd
    1070:	00005be1 	.word	0x00005be1
    1074:	00001e3d 	.word	0x00001e3d
    1078:	00006dcc 	.word	0x00006dcc
    107c:	00006de4 	.word	0x00006de4
    1080:	2000009c 	.word	0x2000009c
    1084:	200000b0 	.word	0x200000b0
    1088:	200000b8 	.word	0x200000b8
    108c:	20000098 	.word	0x20000098
    1090:	200000a8 	.word	0x200000a8
    1094:	00000202 	.word	0x00000202
    1098:	00006e24 	.word	0x00006e24
    109c:	00000209 	.word	0x00000209
    10a0:	00006e3c 	.word	0x00006e3c
    10a4:	00000aa5 	.word	0x00000aa5
    10a8:	00000211 	.word	0x00000211
    10ac:	00006e60 	.word	0x00006e60
    10b0:	00006e74 	.word	0x00006e74
    10b4:	0000021e 	.word	0x0000021e
    10b8:	00006e90 	.word	0x00006e90
    10bc:	00006eb4 	.word	0x00006eb4
    10c0:	00000b31 	.word	0x00000b31
    10c4:	00000243 	.word	0x00000243
    10c8:	00006fb8 	.word	0x00006fb8
    10cc:	00006ed4 	.word	0x00006ed4

000010d0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    10d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d2:	464f      	mov	r7, r9
    10d4:	4646      	mov	r6, r8
    10d6:	b4c0      	push	{r6, r7}
    10d8:	b083      	sub	sp, #12
    10da:	0006      	movs	r6, r0
    10dc:	000c      	movs	r4, r1
    10de:	0015      	movs	r5, r2
    10e0:	001f      	movs	r7, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    10e2:	2800      	cmp	r0, #0
    10e4:	d003      	beq.n	10ee <hif_receive+0x1e>
    10e6:	2900      	cmp	r1, #0
    10e8:	d001      	beq.n	10ee <hif_receive+0x1e>
    10ea:	2a00      	cmp	r2, #0
    10ec:	d115      	bne.n	111a <hif_receive+0x4a>
	{
		if(isDone)
    10ee:	2f00      	cmp	r7, #0
    10f0:	d005      	beq.n	10fe <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
    10f2:	2201      	movs	r2, #1
    10f4:	4b31      	ldr	r3, [pc, #196]	; (11bc <hif_receive+0xec>)
    10f6:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    10f8:	4b31      	ldr	r3, [pc, #196]	; (11c0 <hif_receive+0xf0>)
    10fa:	4798      	blx	r3
    10fc:	e059      	b.n	11b2 <hif_receive+0xe2>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
    10fe:	4a31      	ldr	r2, [pc, #196]	; (11c4 <hif_receive+0xf4>)
    1100:	4931      	ldr	r1, [pc, #196]	; (11c8 <hif_receive+0xf8>)
    1102:	4832      	ldr	r0, [pc, #200]	; (11cc <hif_receive+0xfc>)
    1104:	4b32      	ldr	r3, [pc, #200]	; (11d0 <hif_receive+0x100>)
    1106:	4798      	blx	r3
    1108:	4832      	ldr	r0, [pc, #200]	; (11d4 <hif_receive+0x104>)
    110a:	4b33      	ldr	r3, [pc, #204]	; (11d8 <hif_receive+0x108>)
    110c:	4798      	blx	r3
    110e:	200d      	movs	r0, #13
    1110:	4b32      	ldr	r3, [pc, #200]	; (11dc <hif_receive+0x10c>)
    1112:	4798      	blx	r3
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    1114:	200c      	movs	r0, #12
    1116:	4240      	negs	r0, r0
    1118:	e04b      	b.n	11b2 <hif_receive+0xe2>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    111a:	4669      	mov	r1, sp
    111c:	4830      	ldr	r0, [pc, #192]	; (11e0 <hif_receive+0x110>)
    111e:	4b31      	ldr	r3, [pc, #196]	; (11e4 <hif_receive+0x114>)
    1120:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1122:	2800      	cmp	r0, #0
    1124:	d145      	bne.n	11b2 <hif_receive+0xe2>


	size = (uint16)((reg >> 2) & 0xfff);
    1126:	9b00      	ldr	r3, [sp, #0]
    1128:	4698      	mov	r8, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    112a:	a901      	add	r1, sp, #4
    112c:	482e      	ldr	r0, [pc, #184]	; (11e8 <hif_receive+0x118>)
    112e:	4b2d      	ldr	r3, [pc, #180]	; (11e4 <hif_receive+0x114>)
    1130:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1132:	2800      	cmp	r0, #0
    1134:	d13d      	bne.n	11b2 <hif_receive+0xe2>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
    1136:	4643      	mov	r3, r8
    1138:	049b      	lsls	r3, r3, #18
    113a:	0d1b      	lsrs	r3, r3, #20
    113c:	4698      	mov	r8, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
    113e:	429d      	cmp	r5, r3
    1140:	d90e      	bls.n	1160 <hif_receive+0x90>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    1142:	4a2a      	ldr	r2, [pc, #168]	; (11ec <hif_receive+0x11c>)
    1144:	4920      	ldr	r1, [pc, #128]	; (11c8 <hif_receive+0xf8>)
    1146:	4821      	ldr	r0, [pc, #132]	; (11cc <hif_receive+0xfc>)
    1148:	4c21      	ldr	r4, [pc, #132]	; (11d0 <hif_receive+0x100>)
    114a:	47a0      	blx	r4
    114c:	4642      	mov	r2, r8
    114e:	0029      	movs	r1, r5
    1150:	4827      	ldr	r0, [pc, #156]	; (11f0 <hif_receive+0x120>)
    1152:	47a0      	blx	r4
    1154:	200d      	movs	r0, #13
    1156:	4b21      	ldr	r3, [pc, #132]	; (11dc <hif_receive+0x10c>)
    1158:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
    115a:	200c      	movs	r0, #12
    115c:	4240      	negs	r0, r0
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
    115e:	e028      	b.n	11b2 <hif_receive+0xe2>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    1160:	9b01      	ldr	r3, [sp, #4]
    1162:	429e      	cmp	r6, r3
    1164:	d304      	bcc.n	1170 <hif_receive+0xa0>
    1166:	1972      	adds	r2, r6, r5
    1168:	4691      	mov	r9, r2
    116a:	4443      	add	r3, r8
    116c:	429a      	cmp	r2, r3
    116e:	d90e      	bls.n	118e <hif_receive+0xbe>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1170:	22a0      	movs	r2, #160	; 0xa0
    1172:	0092      	lsls	r2, r2, #2
    1174:	4914      	ldr	r1, [pc, #80]	; (11c8 <hif_receive+0xf8>)
    1176:	4815      	ldr	r0, [pc, #84]	; (11cc <hif_receive+0xfc>)
    1178:	4b15      	ldr	r3, [pc, #84]	; (11d0 <hif_receive+0x100>)
    117a:	4798      	blx	r3
    117c:	481d      	ldr	r0, [pc, #116]	; (11f4 <hif_receive+0x124>)
    117e:	4b16      	ldr	r3, [pc, #88]	; (11d8 <hif_receive+0x108>)
    1180:	4798      	blx	r3
    1182:	200d      	movs	r0, #13
    1184:	4b15      	ldr	r3, [pc, #84]	; (11dc <hif_receive+0x10c>)
    1186:	4798      	blx	r3
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
    1188:	200c      	movs	r0, #12
    118a:	4240      	negs	r0, r0
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    118c:	e011      	b.n	11b2 <hif_receive+0xe2>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    118e:	002a      	movs	r2, r5
    1190:	0021      	movs	r1, r4
    1192:	0030      	movs	r0, r6
    1194:	4b18      	ldr	r3, [pc, #96]	; (11f8 <hif_receive+0x128>)
    1196:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1198:	2800      	cmp	r0, #0
    119a:	d10a      	bne.n	11b2 <hif_receive+0xe2>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    119c:	9b01      	ldr	r3, [sp, #4]
    119e:	4443      	add	r3, r8
    11a0:	4599      	cmp	r9, r3
    11a2:	d001      	beq.n	11a8 <hif_receive+0xd8>
    11a4:	2f00      	cmp	r7, #0
    11a6:	d004      	beq.n	11b2 <hif_receive+0xe2>
	{
		gu8HifSizeDone = 1;
    11a8:	2201      	movs	r2, #1
    11aa:	4b04      	ldr	r3, [pc, #16]	; (11bc <hif_receive+0xec>)
    11ac:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    11ae:	4b04      	ldr	r3, [pc, #16]	; (11c0 <hif_receive+0xf0>)
    11b0:	4798      	blx	r3



ERR1:
	return ret;
}
    11b2:	b003      	add	sp, #12
    11b4:	bc0c      	pop	{r2, r3}
    11b6:	4690      	mov	r8, r2
    11b8:	4699      	mov	r9, r3
    11ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11bc:	200000b4 	.word	0x200000b4
    11c0:	00000aa5 	.word	0x00000aa5
    11c4:	00000269 	.word	0x00000269
    11c8:	00006fc8 	.word	0x00006fc8
    11cc:	00006d30 	.word	0x00006d30
    11d0:	00005bad 	.word	0x00005bad
    11d4:	00006f04 	.word	0x00006f04
    11d8:	00005ccd 	.word	0x00005ccd
    11dc:	00005be1 	.word	0x00005be1
    11e0:	00001070 	.word	0x00001070
    11e4:	00001e25 	.word	0x00001e25
    11e8:	00001084 	.word	0x00001084
    11ec:	0000027a 	.word	0x0000027a
    11f0:	00006f24 	.word	0x00006f24
    11f4:	00006f68 	.word	0x00006f68
    11f8:	00001e3d 	.word	0x00001e3d

000011fc <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    11fc:	b570      	push	{r4, r5, r6, lr}
    11fe:	1e04      	subs	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1200:	2c07      	cmp	r4, #7
    1202:	d81b      	bhi.n	123c <hif_register_cb+0x40>
    1204:	0083      	lsls	r3, r0, #2
    1206:	4a14      	ldr	r2, [pc, #80]	; (1258 <hif_register_cb+0x5c>)
    1208:	58d3      	ldr	r3, [r2, r3]
    120a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    120c:	4b13      	ldr	r3, [pc, #76]	; (125c <hif_register_cb+0x60>)
    120e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1210:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
    1212:	e020      	b.n	1256 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    1214:	4b12      	ldr	r3, [pc, #72]	; (1260 <hif_register_cb+0x64>)
    1216:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1218:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
    121a:	e01c      	b.n	1256 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    121c:	4b11      	ldr	r3, [pc, #68]	; (1264 <hif_register_cb+0x68>)
    121e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1220:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
    1222:	e018      	b.n	1256 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    1224:	4b10      	ldr	r3, [pc, #64]	; (1268 <hif_register_cb+0x6c>)
    1226:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1228:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
    122a:	e014      	b.n	1256 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    122c:	4b0f      	ldr	r3, [pc, #60]	; (126c <hif_register_cb+0x70>)
    122e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1230:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
    1232:	e010      	b.n	1256 <hif_register_cb+0x5a>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    1234:	4b0e      	ldr	r3, [pc, #56]	; (1270 <hif_register_cb+0x74>)
    1236:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1238:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
    123a:	e00c      	b.n	1256 <hif_register_cb+0x5a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    123c:	4a0d      	ldr	r2, [pc, #52]	; (1274 <hif_register_cb+0x78>)
    123e:	490e      	ldr	r1, [pc, #56]	; (1278 <hif_register_cb+0x7c>)
    1240:	480e      	ldr	r0, [pc, #56]	; (127c <hif_register_cb+0x80>)
    1242:	4d0f      	ldr	r5, [pc, #60]	; (1280 <hif_register_cb+0x84>)
    1244:	47a8      	blx	r5
    1246:	0021      	movs	r1, r4
    1248:	480e      	ldr	r0, [pc, #56]	; (1284 <hif_register_cb+0x88>)
    124a:	47a8      	blx	r5
    124c:	200d      	movs	r0, #13
    124e:	4b0e      	ldr	r3, [pc, #56]	; (1288 <hif_register_cb+0x8c>)
    1250:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1252:	200c      	movs	r0, #12
    1254:	4240      	negs	r0, r0
			break;
	}
	return ret;
}
    1256:	bd70      	pop	{r4, r5, r6, pc}
    1258:	00006d58 	.word	0x00006d58
    125c:	200000b0 	.word	0x200000b0
    1260:	2000009c 	.word	0x2000009c
    1264:	200000b8 	.word	0x200000b8
    1268:	200000a4 	.word	0x200000a4
    126c:	20000098 	.word	0x20000098
    1270:	200000a8 	.word	0x200000a8
    1274:	000002b9 	.word	0x000002b9
    1278:	00006fd4 	.word	0x00006fd4
    127c:	00006d30 	.word	0x00006d30
    1280:	00005bad 	.word	0x00005bad
    1284:	00006fac 	.word	0x00006fac
    1288:	00005be1 	.word	0x00005be1

0000128c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    128c:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
    128e:	2300      	movs	r3, #0
    1290:	4a09      	ldr	r2, [pc, #36]	; (12b8 <hif_init+0x2c>)
    1292:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
    1294:	4a09      	ldr	r2, [pc, #36]	; (12bc <hif_init+0x30>)
    1296:	6013      	str	r3, [r2, #0]

	gu8ChipSleep = 0;
    1298:	4a09      	ldr	r2, [pc, #36]	; (12c0 <hif_init+0x34>)
    129a:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
    129c:	4a09      	ldr	r2, [pc, #36]	; (12c4 <hif_init+0x38>)
    129e:	7013      	strb	r3, [r2, #0]

	gu8Interrupt = 0;
    12a0:	4a09      	ldr	r2, [pc, #36]	; (12c8 <hif_init+0x3c>)
    12a2:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
    12a4:	4809      	ldr	r0, [pc, #36]	; (12cc <hif_init+0x40>)
    12a6:	4b0a      	ldr	r3, [pc, #40]	; (12d0 <hif_init+0x44>)
    12a8:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    12aa:	490a      	ldr	r1, [pc, #40]	; (12d4 <hif_init+0x48>)
    12ac:	2003      	movs	r0, #3
    12ae:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <hif_init+0x4c>)
    12b0:	4798      	blx	r3

	return M2M_SUCCESS;
}
    12b2:	2000      	movs	r0, #0
    12b4:	bd10      	pop	{r4, pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	2000009c 	.word	0x2000009c
    12bc:	200000b0 	.word	0x200000b0
    12c0:	200000bc 	.word	0x200000bc
    12c4:	200000ac 	.word	0x200000ac
    12c8:	200000a0 	.word	0x200000a0
    12cc:	00000a91 	.word	0x00000a91
    12d0:	000006a9 	.word	0x000006a9
    12d4:	00000aa1 	.word	0x00000aa1
    12d8:	000011fd 	.word	0x000011fd

000012dc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    12dc:	b530      	push	{r4, r5, lr}
    12de:	b09f      	sub	sp, #124	; 0x7c
    12e0:	0004      	movs	r4, r0
    12e2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    12e4:	282c      	cmp	r0, #44	; 0x2c
    12e6:	d111      	bne.n	130c <m2m_wifi_cb+0x30>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    12e8:	2300      	movs	r3, #0
    12ea:	2204      	movs	r2, #4
    12ec:	a903      	add	r1, sp, #12
    12ee:	0028      	movs	r0, r5
    12f0:	4c94      	ldr	r4, [pc, #592]	; (1544 <m2m_wifi_cb+0x268>)
    12f2:	47a0      	blx	r4
    12f4:	2800      	cmp	r0, #0
    12f6:	d000      	beq.n	12fa <m2m_wifi_cb+0x1e>
    12f8:	e122      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    12fa:	4b93      	ldr	r3, [pc, #588]	; (1548 <m2m_wifi_cb+0x26c>)
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	2b00      	cmp	r3, #0
    1300:	d100      	bne.n	1304 <m2m_wifi_cb+0x28>
    1302:	e11d      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1304:	a903      	add	r1, sp, #12
    1306:	302c      	adds	r0, #44	; 0x2c
    1308:	4798      	blx	r3
    130a:	e119      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    130c:	281b      	cmp	r0, #27
    130e:	d111      	bne.n	1334 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1310:	2300      	movs	r3, #0
    1312:	2208      	movs	r2, #8
    1314:	a903      	add	r1, sp, #12
    1316:	0028      	movs	r0, r5
    1318:	4c8a      	ldr	r4, [pc, #552]	; (1544 <m2m_wifi_cb+0x268>)
    131a:	47a0      	blx	r4
    131c:	2800      	cmp	r0, #0
    131e:	d000      	beq.n	1322 <m2m_wifi_cb+0x46>
    1320:	e10e      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1322:	4b89      	ldr	r3, [pc, #548]	; (1548 <m2m_wifi_cb+0x26c>)
    1324:	681b      	ldr	r3, [r3, #0]
    1326:	2b00      	cmp	r3, #0
    1328:	d100      	bne.n	132c <m2m_wifi_cb+0x50>
    132a:	e109      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    132c:	a903      	add	r1, sp, #12
    132e:	301b      	adds	r0, #27
    1330:	4798      	blx	r3
    1332:	e105      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1334:	2806      	cmp	r0, #6
    1336:	d111      	bne.n	135c <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1338:	2301      	movs	r3, #1
    133a:	2230      	movs	r2, #48	; 0x30
    133c:	a903      	add	r1, sp, #12
    133e:	0028      	movs	r0, r5
    1340:	4c80      	ldr	r4, [pc, #512]	; (1544 <m2m_wifi_cb+0x268>)
    1342:	47a0      	blx	r4
    1344:	2800      	cmp	r0, #0
    1346:	d000      	beq.n	134a <m2m_wifi_cb+0x6e>
    1348:	e0fa      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    134a:	4b7f      	ldr	r3, [pc, #508]	; (1548 <m2m_wifi_cb+0x26c>)
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	2b00      	cmp	r3, #0
    1350:	d100      	bne.n	1354 <m2m_wifi_cb+0x78>
    1352:	e0f5      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1354:	a903      	add	r1, sp, #12
    1356:	3006      	adds	r0, #6
    1358:	4798      	blx	r3
    135a:	e0f1      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    135c:	280e      	cmp	r0, #14
    135e:	d100      	bne.n	1362 <m2m_wifi_cb+0x86>
    1360:	e0ee      	b.n	1540 <m2m_wifi_cb+0x264>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1362:	2832      	cmp	r0, #50	; 0x32
    1364:	d111      	bne.n	138a <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1366:	2300      	movs	r3, #0
    1368:	2210      	movs	r2, #16
    136a:	a903      	add	r1, sp, #12
    136c:	0028      	movs	r0, r5
    136e:	4c75      	ldr	r4, [pc, #468]	; (1544 <m2m_wifi_cb+0x268>)
    1370:	47a0      	blx	r4
    1372:	2800      	cmp	r0, #0
    1374:	d000      	beq.n	1378 <m2m_wifi_cb+0x9c>
    1376:	e0e3      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1378:	4b73      	ldr	r3, [pc, #460]	; (1548 <m2m_wifi_cb+0x26c>)
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	2b00      	cmp	r3, #0
    137e:	d100      	bne.n	1382 <m2m_wifi_cb+0xa6>
    1380:	e0de      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1382:	a903      	add	r1, sp, #12
    1384:	3032      	adds	r0, #50	; 0x32
    1386:	4798      	blx	r3
    1388:	e0da      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    138a:	282f      	cmp	r0, #47	; 0x2f
    138c:	d116      	bne.n	13bc <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    138e:	2264      	movs	r2, #100	; 0x64
    1390:	2100      	movs	r1, #0
    1392:	a803      	add	r0, sp, #12
    1394:	4b6d      	ldr	r3, [pc, #436]	; (154c <m2m_wifi_cb+0x270>)
    1396:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1398:	2300      	movs	r3, #0
    139a:	2264      	movs	r2, #100	; 0x64
    139c:	a903      	add	r1, sp, #12
    139e:	0028      	movs	r0, r5
    13a0:	4c68      	ldr	r4, [pc, #416]	; (1544 <m2m_wifi_cb+0x268>)
    13a2:	47a0      	blx	r4
    13a4:	2800      	cmp	r0, #0
    13a6:	d000      	beq.n	13aa <m2m_wifi_cb+0xce>
    13a8:	e0ca      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    13aa:	4b67      	ldr	r3, [pc, #412]	; (1548 <m2m_wifi_cb+0x26c>)
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	2b00      	cmp	r3, #0
    13b0:	d100      	bne.n	13b4 <m2m_wifi_cb+0xd8>
    13b2:	e0c5      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    13b4:	a903      	add	r1, sp, #12
    13b6:	302f      	adds	r0, #47	; 0x2f
    13b8:	4798      	blx	r3
    13ba:	e0c1      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    13bc:	2834      	cmp	r0, #52	; 0x34
    13be:	d122      	bne.n	1406 <m2m_wifi_cb+0x12a>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    13c0:	2300      	movs	r3, #0
    13c2:	2204      	movs	r2, #4
    13c4:	a903      	add	r1, sp, #12
    13c6:	0028      	movs	r0, r5
    13c8:	4c5e      	ldr	r4, [pc, #376]	; (1544 <m2m_wifi_cb+0x268>)
    13ca:	47a0      	blx	r4
    13cc:	2800      	cmp	r0, #0
    13ce:	d000      	beq.n	13d2 <m2m_wifi_cb+0xf6>
    13d0:	e0b6      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    13d2:	485f      	ldr	r0, [pc, #380]	; (1550 <m2m_wifi_cb+0x274>)
    13d4:	4c5f      	ldr	r4, [pc, #380]	; (1554 <m2m_wifi_cb+0x278>)
    13d6:	47a0      	blx	r4
    13d8:	9803      	ldr	r0, [sp, #12]
    13da:	0c03      	lsrs	r3, r0, #16
    13dc:	21ff      	movs	r1, #255	; 0xff
    13de:	400b      	ands	r3, r1
    13e0:	0a02      	lsrs	r2, r0, #8
    13e2:	400a      	ands	r2, r1
    13e4:	4001      	ands	r1, r0
    13e6:	0e00      	lsrs	r0, r0, #24
    13e8:	9000      	str	r0, [sp, #0]
    13ea:	485b      	ldr	r0, [pc, #364]	; (1558 <m2m_wifi_cb+0x27c>)
    13ec:	47a0      	blx	r4
    13ee:	200d      	movs	r0, #13
    13f0:	4b5a      	ldr	r3, [pc, #360]	; (155c <m2m_wifi_cb+0x280>)
    13f2:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    13f4:	4b54      	ldr	r3, [pc, #336]	; (1548 <m2m_wifi_cb+0x26c>)
    13f6:	681b      	ldr	r3, [r3, #0]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d100      	bne.n	13fe <m2m_wifi_cb+0x122>
    13fc:	e0a0      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    13fe:	2100      	movs	r1, #0
    1400:	2034      	movs	r0, #52	; 0x34
    1402:	4798      	blx	r3
    1404:	e09c      	b.n	1540 <m2m_wifi_cb+0x264>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1406:	2811      	cmp	r0, #17
    1408:	d118      	bne.n	143c <m2m_wifi_cb+0x160>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    140a:	2200      	movs	r2, #0
    140c:	4b54      	ldr	r3, [pc, #336]	; (1560 <m2m_wifi_cb+0x284>)
    140e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1410:	2300      	movs	r3, #0
    1412:	3204      	adds	r2, #4
    1414:	a903      	add	r1, sp, #12
    1416:	0028      	movs	r0, r5
    1418:	4c4a      	ldr	r4, [pc, #296]	; (1544 <m2m_wifi_cb+0x268>)
    141a:	47a0      	blx	r4
    141c:	2800      	cmp	r0, #0
    141e:	d000      	beq.n	1422 <m2m_wifi_cb+0x146>
    1420:	e08e      	b.n	1540 <m2m_wifi_cb+0x264>
		{
			gu8ChNum = strState.u8NumofCh;
    1422:	ab03      	add	r3, sp, #12
    1424:	781a      	ldrb	r2, [r3, #0]
    1426:	4b4f      	ldr	r3, [pc, #316]	; (1564 <m2m_wifi_cb+0x288>)
    1428:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    142a:	4b47      	ldr	r3, [pc, #284]	; (1548 <m2m_wifi_cb+0x26c>)
    142c:	681b      	ldr	r3, [r3, #0]
    142e:	2b00      	cmp	r3, #0
    1430:	d100      	bne.n	1434 <m2m_wifi_cb+0x158>
    1432:	e085      	b.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1434:	a903      	add	r1, sp, #12
    1436:	3011      	adds	r0, #17
    1438:	4798      	blx	r3
    143a:	e081      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    143c:	2813      	cmp	r0, #19
    143e:	d10f      	bne.n	1460 <m2m_wifi_cb+0x184>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1440:	2300      	movs	r3, #0
    1442:	222c      	movs	r2, #44	; 0x2c
    1444:	a903      	add	r1, sp, #12
    1446:	0028      	movs	r0, r5
    1448:	4c3e      	ldr	r4, [pc, #248]	; (1544 <m2m_wifi_cb+0x268>)
    144a:	47a0      	blx	r4
    144c:	2800      	cmp	r0, #0
    144e:	d177      	bne.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1450:	4b3d      	ldr	r3, [pc, #244]	; (1548 <m2m_wifi_cb+0x26c>)
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	2b00      	cmp	r3, #0
    1456:	d073      	beq.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1458:	a903      	add	r1, sp, #12
    145a:	3013      	adds	r0, #19
    145c:	4798      	blx	r3
    145e:	e06f      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1460:	2804      	cmp	r0, #4
    1462:	d10f      	bne.n	1484 <m2m_wifi_cb+0x1a8>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1464:	2300      	movs	r3, #0
    1466:	2204      	movs	r2, #4
    1468:	a91c      	add	r1, sp, #112	; 0x70
    146a:	0028      	movs	r0, r5
    146c:	4c35      	ldr	r4, [pc, #212]	; (1544 <m2m_wifi_cb+0x268>)
    146e:	47a0      	blx	r4
    1470:	2800      	cmp	r0, #0
    1472:	d165      	bne.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1474:	4b34      	ldr	r3, [pc, #208]	; (1548 <m2m_wifi_cb+0x26c>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	2b00      	cmp	r3, #0
    147a:	d061      	beq.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    147c:	a91c      	add	r1, sp, #112	; 0x70
    147e:	3004      	adds	r0, #4
    1480:	4798      	blx	r3
    1482:	e05d      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1484:	2865      	cmp	r0, #101	; 0x65
    1486:	d10f      	bne.n	14a8 <m2m_wifi_cb+0x1cc>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1488:	2300      	movs	r3, #0
    148a:	2204      	movs	r2, #4
    148c:	a91c      	add	r1, sp, #112	; 0x70
    148e:	0028      	movs	r0, r5
    1490:	4c2c      	ldr	r4, [pc, #176]	; (1544 <m2m_wifi_cb+0x268>)
    1492:	47a0      	blx	r4
    1494:	2800      	cmp	r0, #0
    1496:	d153      	bne.n	1540 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    1498:	4b2b      	ldr	r3, [pc, #172]	; (1548 <m2m_wifi_cb+0x26c>)
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	2b00      	cmp	r3, #0
    149e:	d04f      	beq.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    14a0:	a91c      	add	r1, sp, #112	; 0x70
    14a2:	3065      	adds	r0, #101	; 0x65
    14a4:	4798      	blx	r3
    14a6:	e04b      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    14a8:	2809      	cmp	r0, #9
    14aa:	d10f      	bne.n	14cc <m2m_wifi_cb+0x1f0>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    14ac:	2301      	movs	r3, #1
    14ae:	2264      	movs	r2, #100	; 0x64
    14b0:	a903      	add	r1, sp, #12
    14b2:	0028      	movs	r0, r5
    14b4:	4c23      	ldr	r4, [pc, #140]	; (1544 <m2m_wifi_cb+0x268>)
    14b6:	47a0      	blx	r4
    14b8:	2800      	cmp	r0, #0
    14ba:	d141      	bne.n	1540 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    14bc:	4b22      	ldr	r3, [pc, #136]	; (1548 <m2m_wifi_cb+0x26c>)
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d03d      	beq.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    14c4:	a903      	add	r1, sp, #12
    14c6:	3009      	adds	r0, #9
    14c8:	4798      	blx	r3
    14ca:	e039      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    14cc:	282a      	cmp	r0, #42	; 0x2a
    14ce:	d10f      	bne.n	14f0 <m2m_wifi_cb+0x214>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    14d0:	2301      	movs	r3, #1
    14d2:	2204      	movs	r2, #4
    14d4:	a903      	add	r1, sp, #12
    14d6:	0028      	movs	r0, r5
    14d8:	4c1a      	ldr	r4, [pc, #104]	; (1544 <m2m_wifi_cb+0x268>)
    14da:	47a0      	blx	r4
    14dc:	2800      	cmp	r0, #0
    14de:	d12f      	bne.n	1540 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    14e0:	4b19      	ldr	r3, [pc, #100]	; (1548 <m2m_wifi_cb+0x26c>)
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d02b      	beq.n	1540 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    14e8:	a903      	add	r1, sp, #12
    14ea:	302a      	adds	r0, #42	; 0x2a
    14ec:	4798      	blx	r3
    14ee:	e027      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    14f0:	2820      	cmp	r0, #32
    14f2:	d119      	bne.n	1528 <m2m_wifi_cb+0x24c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    14f4:	2300      	movs	r3, #0
    14f6:	2208      	movs	r2, #8
    14f8:	a903      	add	r1, sp, #12
    14fa:	0028      	movs	r0, r5
    14fc:	4c11      	ldr	r4, [pc, #68]	; (1544 <m2m_wifi_cb+0x268>)
    14fe:	47a0      	blx	r4
    1500:	2800      	cmp	r0, #0
    1502:	d11d      	bne.n	1540 <m2m_wifi_cb+0x264>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1504:	ab03      	add	r3, sp, #12
    1506:	889a      	ldrh	r2, [r3, #4]
    1508:	0028      	movs	r0, r5
    150a:	3008      	adds	r0, #8
    150c:	2301      	movs	r3, #1
    150e:	9903      	ldr	r1, [sp, #12]
    1510:	4c0c      	ldr	r4, [pc, #48]	; (1544 <m2m_wifi_cb+0x268>)
    1512:	47a0      	blx	r4
    1514:	2800      	cmp	r0, #0
    1516:	d113      	bne.n	1540 <m2m_wifi_cb+0x264>
			{
				if(gpfAppWifiCb)
    1518:	4b0b      	ldr	r3, [pc, #44]	; (1548 <m2m_wifi_cb+0x26c>)
    151a:	681b      	ldr	r3, [r3, #0]
    151c:	2b00      	cmp	r3, #0
    151e:	d00f      	beq.n	1540 <m2m_wifi_cb+0x264>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1520:	a903      	add	r1, sp, #12
    1522:	3020      	adds	r0, #32
    1524:	4798      	blx	r3
    1526:	e00b      	b.n	1540 <m2m_wifi_cb+0x264>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1528:	2292      	movs	r2, #146	; 0x92
    152a:	0052      	lsls	r2, r2, #1
    152c:	490e      	ldr	r1, [pc, #56]	; (1568 <m2m_wifi_cb+0x28c>)
    152e:	480f      	ldr	r0, [pc, #60]	; (156c <m2m_wifi_cb+0x290>)
    1530:	4d08      	ldr	r5, [pc, #32]	; (1554 <m2m_wifi_cb+0x278>)
    1532:	47a8      	blx	r5
    1534:	0021      	movs	r1, r4
    1536:	480e      	ldr	r0, [pc, #56]	; (1570 <m2m_wifi_cb+0x294>)
    1538:	47a8      	blx	r5
    153a:	200d      	movs	r0, #13
    153c:	4b07      	ldr	r3, [pc, #28]	; (155c <m2m_wifi_cb+0x280>)
    153e:	4798      	blx	r3
	}
}
    1540:	b01f      	add	sp, #124	; 0x7c
    1542:	bd30      	pop	{r4, r5, pc}
    1544:	000010d1 	.word	0x000010d1
    1548:	200000c0 	.word	0x200000c0
    154c:	000009a5 	.word	0x000009a5
    1550:	00006fe4 	.word	0x00006fe4
    1554:	00005bad 	.word	0x00005bad
    1558:	00006ff0 	.word	0x00006ff0
    155c:	00005be1 	.word	0x00005be1
    1560:	200000c4 	.word	0x200000c4
    1564:	200000c5 	.word	0x200000c5
    1568:	00007308 	.word	0x00007308
    156c:	00006d30 	.word	0x00006d30
    1570:	00007010 	.word	0x00007010

00001574 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1574:	b5f0      	push	{r4, r5, r6, r7, lr}
    1576:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1578:	2201      	movs	r2, #1
    157a:	466b      	mov	r3, sp
    157c:	71da      	strb	r2, [r3, #7]
	
	if(param == NULL) {
    157e:	2800      	cmp	r0, #0
    1580:	d04a      	beq.n	1618 <m2m_wifi_init+0xa4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1582:	6802      	ldr	r2, [r0, #0]
    1584:	4b27      	ldr	r3, [pc, #156]	; (1624 <m2m_wifi_init+0xb0>)
    1586:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1588:	2200      	movs	r2, #0
    158a:	4b27      	ldr	r3, [pc, #156]	; (1628 <m2m_wifi_init+0xb4>)
    158c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    158e:	466b      	mov	r3, sp
    1590:	1dd8      	adds	r0, r3, #7
    1592:	4b26      	ldr	r3, [pc, #152]	; (162c <m2m_wifi_init+0xb8>)
    1594:	4798      	blx	r3
    1596:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1598:	d140      	bne.n	161c <m2m_wifi_init+0xa8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    159a:	2000      	movs	r0, #0
    159c:	4b24      	ldr	r3, [pc, #144]	; (1630 <m2m_wifi_init+0xbc>)
    159e:	4798      	blx	r3
    15a0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    15a2:	d135      	bne.n	1610 <m2m_wifi_init+0x9c>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    15a4:	4923      	ldr	r1, [pc, #140]	; (1634 <m2m_wifi_init+0xc0>)
    15a6:	2001      	movs	r0, #1
    15a8:	4b23      	ldr	r3, [pc, #140]	; (1638 <m2m_wifi_init+0xc4>)
    15aa:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    15ac:	ad02      	add	r5, sp, #8
    15ae:	0028      	movs	r0, r5
    15b0:	4b22      	ldr	r3, [pc, #136]	; (163c <m2m_wifi_init+0xc8>)
    15b2:	4798      	blx	r3
    15b4:	0004      	movs	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    15b6:	4822      	ldr	r0, [pc, #136]	; (1640 <m2m_wifi_init+0xcc>)
    15b8:	4e22      	ldr	r6, [pc, #136]	; (1644 <m2m_wifi_init+0xd0>)
    15ba:	47b0      	blx	r6
    15bc:	79ab      	ldrb	r3, [r5, #6]
    15be:	796a      	ldrb	r2, [r5, #5]
    15c0:	7929      	ldrb	r1, [r5, #4]
    15c2:	4821      	ldr	r0, [pc, #132]	; (1648 <m2m_wifi_init+0xd4>)
    15c4:	47b0      	blx	r6
    15c6:	200d      	movs	r0, #13
    15c8:	4f20      	ldr	r7, [pc, #128]	; (164c <m2m_wifi_init+0xd8>)
    15ca:	47b8      	blx	r7
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    15cc:	481c      	ldr	r0, [pc, #112]	; (1640 <m2m_wifi_init+0xcc>)
    15ce:	47b0      	blx	r6
    15d0:	7a6b      	ldrb	r3, [r5, #9]
    15d2:	7a2a      	ldrb	r2, [r5, #8]
    15d4:	79e9      	ldrb	r1, [r5, #7]
    15d6:	481e      	ldr	r0, [pc, #120]	; (1650 <m2m_wifi_init+0xdc>)
    15d8:	47b0      	blx	r6
    15da:	200d      	movs	r0, #13
    15dc:	47b8      	blx	r7
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    15de:	4818      	ldr	r0, [pc, #96]	; (1640 <m2m_wifi_init+0xcc>)
    15e0:	47b0      	blx	r6
    15e2:	2300      	movs	r3, #0
    15e4:	2203      	movs	r2, #3
    15e6:	2113      	movs	r1, #19
    15e8:	481a      	ldr	r0, [pc, #104]	; (1654 <m2m_wifi_init+0xe0>)
    15ea:	47b0      	blx	r6
    15ec:	200d      	movs	r0, #13
    15ee:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    15f0:	0023      	movs	r3, r4
    15f2:	330d      	adds	r3, #13
    15f4:	d112      	bne.n	161c <m2m_wifi_init+0xa8>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    15f6:	22d0      	movs	r2, #208	; 0xd0
    15f8:	32ff      	adds	r2, #255	; 0xff
    15fa:	4917      	ldr	r1, [pc, #92]	; (1658 <m2m_wifi_init+0xe4>)
    15fc:	4817      	ldr	r0, [pc, #92]	; (165c <m2m_wifi_init+0xe8>)
    15fe:	4b11      	ldr	r3, [pc, #68]	; (1644 <m2m_wifi_init+0xd0>)
    1600:	4798      	blx	r3
    1602:	4817      	ldr	r0, [pc, #92]	; (1660 <m2m_wifi_init+0xec>)
    1604:	4b17      	ldr	r3, [pc, #92]	; (1664 <m2m_wifi_init+0xf0>)
    1606:	4798      	blx	r3
    1608:	200d      	movs	r0, #13
    160a:	4b10      	ldr	r3, [pc, #64]	; (164c <m2m_wifi_init+0xd8>)
    160c:	4798      	blx	r3
    160e:	e005      	b.n	161c <m2m_wifi_init+0xa8>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    1610:	2000      	movs	r0, #0
    1612:	4b15      	ldr	r3, [pc, #84]	; (1668 <m2m_wifi_init+0xf4>)
    1614:	4798      	blx	r3
    1616:	e001      	b.n	161c <m2m_wifi_init+0xa8>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
    1618:	240c      	movs	r4, #12
    161a:	4264      	negs	r4, r4

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    161c:	0020      	movs	r0, r4
    161e:	b00b      	add	sp, #44	; 0x2c
    1620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	200000c0 	.word	0x200000c0
    1628:	200000c4 	.word	0x200000c4
    162c:	00001fb9 	.word	0x00001fb9
    1630:	0000128d 	.word	0x0000128d
    1634:	000012dd 	.word	0x000012dd
    1638:	000011fd 	.word	0x000011fd
    163c:	00001f0d 	.word	0x00001f0d
    1640:	00006fe4 	.word	0x00006fe4
    1644:	00005bad 	.word	0x00005bad
    1648:	000070bc 	.word	0x000070bc
    164c:	00005be1 	.word	0x00005be1
    1650:	000070d8 	.word	0x000070d8
    1654:	000070f4 	.word	0x000070f4
    1658:	00007314 	.word	0x00007314
    165c:	00006d30 	.word	0x00006d30
    1660:	00007110 	.word	0x00007110
    1664:	00005ccd 	.word	0x00005ccd
    1668:	0000208d 	.word	0x0000208d

0000166c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    166c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    166e:	4b01      	ldr	r3, [pc, #4]	; (1674 <m2m_wifi_handle_events+0x8>)
    1670:	4798      	blx	r3
}
    1672:	bd10      	pop	{r4, pc}
    1674:	00000d91 	.word	0x00000d91

00001678 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	464f      	mov	r7, r9
    167c:	4646      	mov	r6, r8
    167e:	b4c0      	push	{r6, r7}
    1680:	b0a3      	sub	sp, #140	; 0x8c
    1682:	9005      	str	r0, [sp, #20]
    1684:	000c      	movs	r4, r1
    1686:	0015      	movs	r5, r2
    1688:	001f      	movs	r7, r3
    168a:	ab2a      	add	r3, sp, #168	; 0xa8
    168c:	881b      	ldrh	r3, [r3, #0]
    168e:	4699      	mov	r9, r3
    1690:	ab2b      	add	r3, sp, #172	; 0xac
    1692:	781b      	ldrb	r3, [r3, #0]
    1694:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1696:	2a01      	cmp	r2, #1
    1698:	d041      	beq.n	171e <m2m_wifi_connect_sc+0xa6>
	{
		if(pvAuthInfo == NULL)
    169a:	2f00      	cmp	r7, #0
    169c:	d10e      	bne.n	16bc <m2m_wifi_connect_sc+0x44>
		{
			M2M_ERR("Key is not valid\n");
    169e:	22fe      	movs	r2, #254	; 0xfe
    16a0:	32ff      	adds	r2, #255	; 0xff
    16a2:	497e      	ldr	r1, [pc, #504]	; (189c <m2m_wifi_connect_sc+0x224>)
    16a4:	487e      	ldr	r0, [pc, #504]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    16a6:	4b7f      	ldr	r3, [pc, #508]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    16a8:	4798      	blx	r3
    16aa:	487f      	ldr	r0, [pc, #508]	; (18a8 <m2m_wifi_connect_sc+0x230>)
    16ac:	4b7f      	ldr	r3, [pc, #508]	; (18ac <m2m_wifi_connect_sc+0x234>)
    16ae:	4798      	blx	r3
    16b0:	200d      	movs	r0, #13
    16b2:	4b7f      	ldr	r3, [pc, #508]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    16b4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    16b6:	200c      	movs	r0, #12
    16b8:	4240      	negs	r0, r0
			goto ERR1;
    16ba:	e0e9      	b.n	1890 <m2m_wifi_connect_sc+0x218>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    16bc:	2a02      	cmp	r2, #2
    16be:	d12e      	bne.n	171e <m2m_wifi_connect_sc+0xa6>
    16c0:	0038      	movs	r0, r7
    16c2:	4b7c      	ldr	r3, [pc, #496]	; (18b4 <m2m_wifi_connect_sc+0x23c>)
    16c4:	4798      	blx	r3
    16c6:	2840      	cmp	r0, #64	; 0x40
    16c8:	d129      	bne.n	171e <m2m_wifi_connect_sc+0xa6>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    16ca:	783b      	ldrb	r3, [r7, #0]
    16cc:	001a      	movs	r2, r3
    16ce:	3a30      	subs	r2, #48	; 0x30
    16d0:	2a36      	cmp	r2, #54	; 0x36
    16d2:	d813      	bhi.n	16fc <m2m_wifi_connect_sc+0x84>
    16d4:	3a0a      	subs	r2, #10
    16d6:	2a06      	cmp	r2, #6
    16d8:	d910      	bls.n	16fc <m2m_wifi_connect_sc+0x84>
    16da:	3b47      	subs	r3, #71	; 0x47
    16dc:	2b19      	cmp	r3, #25
    16de:	d90d      	bls.n	16fc <m2m_wifi_connect_sc+0x84>
    16e0:	1c7a      	adds	r2, r7, #1
    16e2:	0038      	movs	r0, r7
    16e4:	3040      	adds	r0, #64	; 0x40
    16e6:	7813      	ldrb	r3, [r2, #0]
    16e8:	0019      	movs	r1, r3
    16ea:	3930      	subs	r1, #48	; 0x30
    16ec:	2936      	cmp	r1, #54	; 0x36
    16ee:	d805      	bhi.n	16fc <m2m_wifi_connect_sc+0x84>
    16f0:	390a      	subs	r1, #10
    16f2:	2906      	cmp	r1, #6
    16f4:	d902      	bls.n	16fc <m2m_wifi_connect_sc+0x84>
    16f6:	3b47      	subs	r3, #71	; 0x47
    16f8:	2b19      	cmp	r3, #25
    16fa:	d80d      	bhi.n	1718 <m2m_wifi_connect_sc+0xa0>
				{
					M2M_ERR("Invalid Key\n");
    16fc:	4a6e      	ldr	r2, [pc, #440]	; (18b8 <m2m_wifi_connect_sc+0x240>)
    16fe:	4967      	ldr	r1, [pc, #412]	; (189c <m2m_wifi_connect_sc+0x224>)
    1700:	4867      	ldr	r0, [pc, #412]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    1702:	4b68      	ldr	r3, [pc, #416]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    1704:	4798      	blx	r3
    1706:	486d      	ldr	r0, [pc, #436]	; (18bc <m2m_wifi_connect_sc+0x244>)
    1708:	4b68      	ldr	r3, [pc, #416]	; (18ac <m2m_wifi_connect_sc+0x234>)
    170a:	4798      	blx	r3
    170c:	200d      	movs	r0, #13
    170e:	4b68      	ldr	r3, [pc, #416]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    1710:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1712:	200c      	movs	r0, #12
    1714:	4240      	negs	r0, r0
					goto ERR1;
    1716:	e0bb      	b.n	1890 <m2m_wifi_connect_sc+0x218>
    1718:	3201      	adds	r2, #1
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    171a:	4282      	cmp	r2, r0
    171c:	d1e3      	bne.n	16e6 <m2m_wifi_connect_sc+0x6e>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    171e:	1e63      	subs	r3, r4, #1
    1720:	2b1f      	cmp	r3, #31
    1722:	d90d      	bls.n	1740 <m2m_wifi_connect_sc+0xc8>
	{
		M2M_ERR("SSID LEN INVALID\n");
    1724:	4a66      	ldr	r2, [pc, #408]	; (18c0 <m2m_wifi_connect_sc+0x248>)
    1726:	495d      	ldr	r1, [pc, #372]	; (189c <m2m_wifi_connect_sc+0x224>)
    1728:	485d      	ldr	r0, [pc, #372]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    172a:	4b5e      	ldr	r3, [pc, #376]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    172c:	4798      	blx	r3
    172e:	4865      	ldr	r0, [pc, #404]	; (18c4 <m2m_wifi_connect_sc+0x24c>)
    1730:	4b5e      	ldr	r3, [pc, #376]	; (18ac <m2m_wifi_connect_sc+0x234>)
    1732:	4798      	blx	r3
    1734:	200d      	movs	r0, #13
    1736:	4b5e      	ldr	r3, [pc, #376]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    1738:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    173a:	200c      	movs	r0, #12
    173c:	4240      	negs	r0, r0
		goto ERR1;
    173e:	e0a7      	b.n	1890 <m2m_wifi_connect_sc+0x218>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    1740:	464b      	mov	r3, r9
    1742:	2b0d      	cmp	r3, #13
    1744:	d910      	bls.n	1768 <m2m_wifi_connect_sc+0xf0>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1746:	2bff      	cmp	r3, #255	; 0xff
    1748:	d00e      	beq.n	1768 <m2m_wifi_connect_sc+0xf0>
		{
			M2M_ERR("CH INVALID\n");
    174a:	2287      	movs	r2, #135	; 0x87
    174c:	0092      	lsls	r2, r2, #2
    174e:	4953      	ldr	r1, [pc, #332]	; (189c <m2m_wifi_connect_sc+0x224>)
    1750:	4853      	ldr	r0, [pc, #332]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    1752:	4b54      	ldr	r3, [pc, #336]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    1754:	4798      	blx	r3
    1756:	485c      	ldr	r0, [pc, #368]	; (18c8 <m2m_wifi_connect_sc+0x250>)
    1758:	4b54      	ldr	r3, [pc, #336]	; (18ac <m2m_wifi_connect_sc+0x234>)
    175a:	4798      	blx	r3
    175c:	200d      	movs	r0, #13
    175e:	4b54      	ldr	r3, [pc, #336]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    1760:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1762:	200c      	movs	r0, #12
    1764:	4240      	negs	r0, r0
			goto ERR1;
    1766:	e093      	b.n	1890 <m2m_wifi_connect_sc+0x218>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1768:	ae07      	add	r6, sp, #28
    176a:	0022      	movs	r2, r4
    176c:	9905      	ldr	r1, [sp, #20]
    176e:	205a      	movs	r0, #90	; 0x5a
    1770:	ab02      	add	r3, sp, #8
    1772:	469c      	mov	ip, r3
    1774:	4460      	add	r0, ip
    1776:	4b55      	ldr	r3, [pc, #340]	; (18cc <m2m_wifi_connect_sc+0x254>)
    1778:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    177a:	1934      	adds	r4, r6, r4
    177c:	3446      	adds	r4, #70	; 0x46
    177e:	2300      	movs	r3, #0
    1780:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1782:	3344      	adds	r3, #68	; 0x44
    1784:	464a      	mov	r2, r9
    1786:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1788:	4643      	mov	r3, r8
    178a:	1e5a      	subs	r2, r3, #1
    178c:	4193      	sbcs	r3, r2
    178e:	2267      	movs	r2, #103	; 0x67
    1790:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1792:	2341      	movs	r3, #65	; 0x41
    1794:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1796:	2d03      	cmp	r5, #3
    1798:	d13b      	bne.n	1812 <m2m_wifi_connect_sc+0x19a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    179a:	783b      	ldrb	r3, [r7, #0]
    179c:	3b01      	subs	r3, #1
    179e:	b2db      	uxtb	r3, r3
    17a0:	aa07      	add	r2, sp, #28
    17a2:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    17a4:	2b03      	cmp	r3, #3
    17a6:	d90e      	bls.n	17c6 <m2m_wifi_connect_sc+0x14e>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    17a8:	4a49      	ldr	r2, [pc, #292]	; (18d0 <m2m_wifi_connect_sc+0x258>)
    17aa:	493c      	ldr	r1, [pc, #240]	; (189c <m2m_wifi_connect_sc+0x224>)
    17ac:	483c      	ldr	r0, [pc, #240]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    17ae:	4c3d      	ldr	r4, [pc, #244]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    17b0:	47a0      	blx	r4
    17b2:	ab07      	add	r3, sp, #28
    17b4:	7819      	ldrb	r1, [r3, #0]
    17b6:	4847      	ldr	r0, [pc, #284]	; (18d4 <m2m_wifi_connect_sc+0x25c>)
    17b8:	47a0      	blx	r4
    17ba:	200d      	movs	r0, #13
    17bc:	4b3c      	ldr	r3, [pc, #240]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    17be:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    17c0:	200c      	movs	r0, #12
    17c2:	4240      	negs	r0, r0
			goto ERR1;
    17c4:	e064      	b.n	1890 <m2m_wifi_connect_sc+0x218>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    17c6:	787a      	ldrb	r2, [r7, #1]
    17c8:	1e51      	subs	r1, r2, #1
    17ca:	ab07      	add	r3, sp, #28
    17cc:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    17ce:	2310      	movs	r3, #16
    17d0:	0011      	movs	r1, r2
    17d2:	4399      	bics	r1, r3
    17d4:	290b      	cmp	r1, #11
    17d6:	d00e      	beq.n	17f6 <m2m_wifi_connect_sc+0x17e>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    17d8:	4a3f      	ldr	r2, [pc, #252]	; (18d8 <m2m_wifi_connect_sc+0x260>)
    17da:	4930      	ldr	r1, [pc, #192]	; (189c <m2m_wifi_connect_sc+0x224>)
    17dc:	4830      	ldr	r0, [pc, #192]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    17de:	4c31      	ldr	r4, [pc, #196]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    17e0:	47a0      	blx	r4
    17e2:	ab07      	add	r3, sp, #28
    17e4:	7859      	ldrb	r1, [r3, #1]
    17e6:	483d      	ldr	r0, [pc, #244]	; (18dc <m2m_wifi_connect_sc+0x264>)
    17e8:	47a0      	blx	r4
    17ea:	200d      	movs	r0, #13
    17ec:	4b30      	ldr	r3, [pc, #192]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    17ee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    17f0:	200c      	movs	r0, #12
    17f2:	4240      	negs	r0, r0
			goto ERR1;
    17f4:	e04c      	b.n	1890 <m2m_wifi_connect_sc+0x218>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    17f6:	1cb9      	adds	r1, r7, #2
    17f8:	2016      	movs	r0, #22
    17fa:	ab02      	add	r3, sp, #8
    17fc:	469c      	mov	ip, r3
    17fe:	4460      	add	r0, ip
    1800:	4b32      	ldr	r3, [pc, #200]	; (18cc <m2m_wifi_connect_sc+0x254>)
    1802:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1804:	787b      	ldrb	r3, [r7, #1]
    1806:	aa07      	add	r2, sp, #28
    1808:	4694      	mov	ip, r2
    180a:	4463      	add	r3, ip
    180c:	2200      	movs	r2, #0
    180e:	709a      	strb	r2, [r3, #2]
    1810:	e034      	b.n	187c <m2m_wifi_connect_sc+0x204>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1812:	2d02      	cmp	r5, #2
    1814:	d11a      	bne.n	184c <m2m_wifi_connect_sc+0x1d4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1816:	0038      	movs	r0, r7
    1818:	4b26      	ldr	r3, [pc, #152]	; (18b4 <m2m_wifi_connect_sc+0x23c>)
    181a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    181c:	1e43      	subs	r3, r0, #1
    181e:	b29b      	uxth	r3, r3
    1820:	2b3f      	cmp	r3, #63	; 0x3f
    1822:	d90d      	bls.n	1840 <m2m_wifi_connect_sc+0x1c8>
		{
			M2M_ERR("Incorrect PSK key length\n");
    1824:	4a2e      	ldr	r2, [pc, #184]	; (18e0 <m2m_wifi_connect_sc+0x268>)
    1826:	491d      	ldr	r1, [pc, #116]	; (189c <m2m_wifi_connect_sc+0x224>)
    1828:	481d      	ldr	r0, [pc, #116]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    182a:	4b1e      	ldr	r3, [pc, #120]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    182c:	4798      	blx	r3
    182e:	482d      	ldr	r0, [pc, #180]	; (18e4 <m2m_wifi_connect_sc+0x26c>)
    1830:	4b1e      	ldr	r3, [pc, #120]	; (18ac <m2m_wifi_connect_sc+0x234>)
    1832:	4798      	blx	r3
    1834:	200d      	movs	r0, #13
    1836:	4b1e      	ldr	r3, [pc, #120]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    1838:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    183a:	200c      	movs	r0, #12
    183c:	4240      	negs	r0, r0
			goto ERR1;
    183e:	e027      	b.n	1890 <m2m_wifi_connect_sc+0x218>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1840:	1c42      	adds	r2, r0, #1
    1842:	0039      	movs	r1, r7
    1844:	a807      	add	r0, sp, #28
    1846:	4b21      	ldr	r3, [pc, #132]	; (18cc <m2m_wifi_connect_sc+0x254>)
    1848:	4798      	blx	r3
    184a:	e017      	b.n	187c <m2m_wifi_connect_sc+0x204>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    184c:	2d04      	cmp	r5, #4
    184e:	d105      	bne.n	185c <m2m_wifi_connect_sc+0x1e4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1850:	223e      	movs	r2, #62	; 0x3e
    1852:	0039      	movs	r1, r7
    1854:	a807      	add	r0, sp, #28
    1856:	4b1d      	ldr	r3, [pc, #116]	; (18cc <m2m_wifi_connect_sc+0x254>)
    1858:	4798      	blx	r3
    185a:	e00f      	b.n	187c <m2m_wifi_connect_sc+0x204>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    185c:	2d01      	cmp	r5, #1
    185e:	d00d      	beq.n	187c <m2m_wifi_connect_sc+0x204>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    1860:	4a21      	ldr	r2, [pc, #132]	; (18e8 <m2m_wifi_connect_sc+0x270>)
    1862:	490e      	ldr	r1, [pc, #56]	; (189c <m2m_wifi_connect_sc+0x224>)
    1864:	480e      	ldr	r0, [pc, #56]	; (18a0 <m2m_wifi_connect_sc+0x228>)
    1866:	4b0f      	ldr	r3, [pc, #60]	; (18a4 <m2m_wifi_connect_sc+0x22c>)
    1868:	4798      	blx	r3
    186a:	4820      	ldr	r0, [pc, #128]	; (18ec <m2m_wifi_connect_sc+0x274>)
    186c:	4b0f      	ldr	r3, [pc, #60]	; (18ac <m2m_wifi_connect_sc+0x234>)
    186e:	4798      	blx	r3
    1870:	200d      	movs	r0, #13
    1872:	4b0f      	ldr	r3, [pc, #60]	; (18b0 <m2m_wifi_connect_sc+0x238>)
    1874:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1876:	200c      	movs	r0, #12
    1878:	4240      	negs	r0, r0
		goto ERR1;
    187a:	e009      	b.n	1890 <m2m_wifi_connect_sc+0x218>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    187c:	2300      	movs	r3, #0
    187e:	9302      	str	r3, [sp, #8]
    1880:	9301      	str	r3, [sp, #4]
    1882:	9300      	str	r3, [sp, #0]
    1884:	336c      	adds	r3, #108	; 0x6c
    1886:	aa07      	add	r2, sp, #28
    1888:	2128      	movs	r1, #40	; 0x28
    188a:	2001      	movs	r0, #1
    188c:	4c18      	ldr	r4, [pc, #96]	; (18f0 <m2m_wifi_connect_sc+0x278>)
    188e:	47a0      	blx	r4

ERR1:
	return ret;
}
    1890:	b023      	add	sp, #140	; 0x8c
    1892:	bc0c      	pop	{r2, r3}
    1894:	4690      	mov	r8, r2
    1896:	4699      	mov	r9, r3
    1898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	000072f4 	.word	0x000072f4
    18a0:	00006d30 	.word	0x00006d30
    18a4:	00005bad 	.word	0x00005bad
    18a8:	0000712c 	.word	0x0000712c
    18ac:	00005ccd 	.word	0x00005ccd
    18b0:	00005be1 	.word	0x00005be1
    18b4:	000009b5 	.word	0x000009b5
    18b8:	00000209 	.word	0x00000209
    18bc:	00007140 	.word	0x00007140
    18c0:	00000213 	.word	0x00000213
    18c4:	0000714c 	.word	0x0000714c
    18c8:	00007160 	.word	0x00007160
    18cc:	00000991 	.word	0x00000991
    18d0:	00000233 	.word	0x00000233
    18d4:	0000716c 	.word	0x0000716c
    18d8:	0000023a 	.word	0x0000023a
    18dc:	00007188 	.word	0x00007188
    18e0:	00000249 	.word	0x00000249
    18e4:	000071a4 	.word	0x000071a4
    18e8:	00000259 	.word	0x00000259
    18ec:	000071c0 	.word	0x000071c0
    18f0:	00000bad 	.word	0x00000bad

000018f4 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    18f4:	b530      	push	{r4, r5, lr}
    18f6:	b083      	sub	sp, #12
    18f8:	ac06      	add	r4, sp, #24
    18fa:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    18fc:	2500      	movs	r5, #0
    18fe:	9501      	str	r5, [sp, #4]
    1900:	9400      	str	r4, [sp, #0]
    1902:	4c02      	ldr	r4, [pc, #8]	; (190c <m2m_wifi_connect+0x18>)
    1904:	47a0      	blx	r4
}
    1906:	b003      	add	sp, #12
    1908:	bd30      	pop	{r4, r5, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00001679 	.word	0x00001679

00001910 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1910:	2000      	movs	r0, #0
    1912:	4770      	bx	lr

00001914 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    1914:	b5f0      	push	{r4, r5, r6, r7, lr}
    1916:	b083      	sub	sp, #12
    1918:	0004      	movs	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    191a:	25a5      	movs	r5, #165	; 0xa5
    191c:	016d      	lsls	r5, r5, #5
    191e:	4e0a      	ldr	r6, [pc, #40]	; (1948 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1920:	4f0a      	ldr	r7, [pc, #40]	; (194c <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    1922:	0021      	movs	r1, r4
    1924:	0028      	movs	r0, r5
    1926:	47b0      	blx	r6
		if(val32 != 0) {		
    1928:	2c00      	cmp	r4, #0
    192a:	d009      	beq.n	1940 <chip_apply_conf+0x2c>
			uint32 reg = 0;
    192c:	2300      	movs	r3, #0
    192e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1930:	a901      	add	r1, sp, #4
    1932:	0028      	movs	r0, r5
    1934:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
    1936:	2800      	cmp	r0, #0
    1938:	d1f3      	bne.n	1922 <chip_apply_conf+0xe>
				if(reg == val32)
    193a:	9b01      	ldr	r3, [sp, #4]
    193c:	429c      	cmp	r4, r3
    193e:	d1f0      	bne.n	1922 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    1940:	2000      	movs	r0, #0
    1942:	b003      	add	sp, #12
    1944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	00001e31 	.word	0x00001e31
    194c:	00001e25 	.word	0x00001e25

00001950 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	465f      	mov	r7, fp
    1954:	4656      	mov	r6, sl
    1956:	4645      	mov	r5, r8
    1958:	b4e0      	push	{r5, r6, r7}
    195a:	b084      	sub	sp, #16
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    195c:	2001      	movs	r0, #1
    195e:	4b43      	ldr	r3, [pc, #268]	; (1a6c <nm_clkless_wake+0x11c>)
    1960:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    1962:	a903      	add	r1, sp, #12
    1964:	2001      	movs	r0, #1
    1966:	4b42      	ldr	r3, [pc, #264]	; (1a70 <nm_clkless_wake+0x120>)
    1968:	4798      	blx	r3
    196a:	9001      	str	r0, [sp, #4]
    196c:	2400      	movs	r4, #0
	if(ret != M2M_SUCCESS) {
    196e:	2800      	cmp	r0, #0
    1970:	d00b      	beq.n	198a <nm_clkless_wake+0x3a>
		M2M_ERR("Bus error (1). Wake up failed\n");
    1972:	2272      	movs	r2, #114	; 0x72
    1974:	493f      	ldr	r1, [pc, #252]	; (1a74 <nm_clkless_wake+0x124>)
    1976:	4840      	ldr	r0, [pc, #256]	; (1a78 <nm_clkless_wake+0x128>)
    1978:	4b40      	ldr	r3, [pc, #256]	; (1a7c <nm_clkless_wake+0x12c>)
    197a:	4798      	blx	r3
    197c:	4840      	ldr	r0, [pc, #256]	; (1a80 <nm_clkless_wake+0x130>)
    197e:	4b41      	ldr	r3, [pc, #260]	; (1a84 <nm_clkless_wake+0x134>)
    1980:	4798      	blx	r3
    1982:	200d      	movs	r0, #13
    1984:	4b40      	ldr	r3, [pc, #256]	; (1a88 <nm_clkless_wake+0x138>)
    1986:	4798      	blx	r3
		goto _WAKE_EXIT;
    1988:	e068      	b.n	1a5c <nm_clkless_wake+0x10c>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    198a:	4b40      	ldr	r3, [pc, #256]	; (1a8c <nm_clkless_wake+0x13c>)
    198c:	469b      	mov	fp, r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    198e:	4b37      	ldr	r3, [pc, #220]	; (1a6c <nm_clkless_wake+0x11c>)
    1990:	469a      	mov	sl, r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1992:	4b3f      	ldr	r3, [pc, #252]	; (1a90 <nm_clkless_wake+0x140>)
    1994:	4698      	mov	r8, r3
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    1996:	2102      	movs	r1, #2
    1998:	9b03      	ldr	r3, [sp, #12]
    199a:	4319      	orrs	r1, r3
    199c:	2001      	movs	r0, #1
    199e:	47d8      	blx	fp
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    19a0:	2001      	movs	r0, #1
    19a2:	47d0      	blx	sl
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19a4:	a902      	add	r1, sp, #8
    19a6:	4643      	mov	r3, r8
    19a8:	6818      	ldr	r0, [r3, #0]
    19aa:	4b31      	ldr	r3, [pc, #196]	; (1a70 <nm_clkless_wake+0x120>)
    19ac:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    19ae:	2800      	cmp	r0, #0
    19b0:	d106      	bne.n	19c0 <nm_clkless_wake+0x70>
    19b2:	9b02      	ldr	r3, [sp, #8]
    19b4:	2b00      	cmp	r3, #0
    19b6:	d003      	beq.n	19c0 <nm_clkless_wake+0x70>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    19b8:	4d36      	ldr	r5, [pc, #216]	; (1a94 <nm_clkless_wake+0x144>)
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    19ba:	4f2c      	ldr	r7, [pc, #176]	; (1a6c <nm_clkless_wake+0x11c>)

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19bc:	4e34      	ldr	r6, [pc, #208]	; (1a90 <nm_clkless_wake+0x140>)
    19be:	e03b      	b.n	1a38 <nm_clkless_wake+0xe8>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    19c0:	4d33      	ldr	r5, [pc, #204]	; (1a90 <nm_clkless_wake+0x140>)
    19c2:	230e      	movs	r3, #14
    19c4:	602b      	str	r3, [r5, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    19c6:	2001      	movs	r0, #1
    19c8:	4b28      	ldr	r3, [pc, #160]	; (1a6c <nm_clkless_wake+0x11c>)
    19ca:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19cc:	6828      	ldr	r0, [r5, #0]
    19ce:	a902      	add	r1, sp, #8
    19d0:	4b27      	ldr	r3, [pc, #156]	; (1a70 <nm_clkless_wake+0x120>)
    19d2:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    19d4:	2800      	cmp	r0, #0
    19d6:	d102      	bne.n	19de <nm_clkless_wake+0x8e>
    19d8:	9b02      	ldr	r3, [sp, #8]
    19da:	2b00      	cmp	r3, #0
    19dc:	d1ec      	bne.n	19b8 <nm_clkless_wake+0x68>
				 
				clk_status_reg_adr = 0x13;
    19de:	4d2c      	ldr	r5, [pc, #176]	; (1a90 <nm_clkless_wake+0x140>)
    19e0:	2313      	movs	r3, #19
    19e2:	602b      	str	r3, [r5, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    19e4:	2001      	movs	r0, #1
    19e6:	4b21      	ldr	r3, [pc, #132]	; (1a6c <nm_clkless_wake+0x11c>)
    19e8:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19ea:	6828      	ldr	r0, [r5, #0]
    19ec:	a902      	add	r1, sp, #8
    19ee:	4b20      	ldr	r3, [pc, #128]	; (1a70 <nm_clkless_wake+0x120>)
    19f0:	4798      	blx	r3
    19f2:	1e05      	subs	r5, r0, #0
			
				if(ret != M2M_SUCCESS) {
    19f4:	d0e0      	beq.n	19b8 <nm_clkless_wake+0x68>
					M2M_ERR("Bus error (2). Wake up failed\n");
    19f6:	2296      	movs	r2, #150	; 0x96
    19f8:	491e      	ldr	r1, [pc, #120]	; (1a74 <nm_clkless_wake+0x124>)
    19fa:	481f      	ldr	r0, [pc, #124]	; (1a78 <nm_clkless_wake+0x128>)
    19fc:	4b1f      	ldr	r3, [pc, #124]	; (1a7c <nm_clkless_wake+0x12c>)
    19fe:	4798      	blx	r3
    1a00:	4825      	ldr	r0, [pc, #148]	; (1a98 <nm_clkless_wake+0x148>)
    1a02:	4b20      	ldr	r3, [pc, #128]	; (1a84 <nm_clkless_wake+0x134>)
    1a04:	4798      	blx	r3
    1a06:	200d      	movs	r0, #13
    1a08:	4b1f      	ldr	r3, [pc, #124]	; (1a88 <nm_clkless_wake+0x138>)
    1a0a:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1a0c:	9501      	str	r5, [sp, #4]
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
    1a0e:	e025      	b.n	1a5c <nm_clkless_wake+0x10c>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    1a10:	2002      	movs	r0, #2
    1a12:	47b8      	blx	r7

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1a14:	a902      	add	r1, sp, #8
    1a16:	6830      	ldr	r0, [r6, #0]
    1a18:	4b15      	ldr	r3, [pc, #84]	; (1a70 <nm_clkless_wake+0x120>)
    1a1a:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    1a1c:	9b02      	ldr	r3, [sp, #8]
    1a1e:	075b      	lsls	r3, r3, #29
    1a20:	d40a      	bmi.n	1a38 <nm_clkless_wake+0xe8>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    1a22:	22aa      	movs	r2, #170	; 0xaa
    1a24:	4913      	ldr	r1, [pc, #76]	; (1a74 <nm_clkless_wake+0x124>)
    1a26:	4814      	ldr	r0, [pc, #80]	; (1a78 <nm_clkless_wake+0x128>)
    1a28:	4b14      	ldr	r3, [pc, #80]	; (1a7c <nm_clkless_wake+0x12c>)
    1a2a:	4798      	blx	r3
    1a2c:	481b      	ldr	r0, [pc, #108]	; (1a9c <nm_clkless_wake+0x14c>)
    1a2e:	4b15      	ldr	r3, [pc, #84]	; (1a84 <nm_clkless_wake+0x134>)
    1a30:	4798      	blx	r3
    1a32:	200d      	movs	r0, #13
    1a34:	4b14      	ldr	r3, [pc, #80]	; (1a88 <nm_clkless_wake+0x138>)
    1a36:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1a38:	9b02      	ldr	r3, [sp, #8]
    1a3a:	075b      	lsls	r3, r3, #29
    1a3c:	d40e      	bmi.n	1a5c <nm_clkless_wake+0x10c>
    1a3e:	3401      	adds	r4, #1
    1a40:	2103      	movs	r1, #3
    1a42:	0020      	movs	r0, r4
    1a44:	47a8      	blx	r5
    1a46:	2900      	cmp	r1, #0
    1a48:	d0e2      	beq.n	1a10 <nm_clkless_wake+0xc0>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    1a4a:	2102      	movs	r1, #2
    1a4c:	9b03      	ldr	r3, [sp, #12]
    1a4e:	4319      	orrs	r1, r3
    1a50:	2001      	movs	r0, #1
    1a52:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <nm_clkless_wake+0x13c>)
    1a54:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    1a56:	9b02      	ldr	r3, [sp, #8]
    1a58:	075b      	lsls	r3, r3, #29
    1a5a:	d59c      	bpl.n	1996 <nm_clkless_wake+0x46>

_WAKE_EXIT:
	return ret;
}
    1a5c:	9801      	ldr	r0, [sp, #4]
    1a5e:	b004      	add	sp, #16
    1a60:	bc1c      	pop	{r2, r3, r4}
    1a62:	4690      	mov	r8, r2
    1a64:	469a      	mov	sl, r3
    1a66:	46a3      	mov	fp, r4
    1a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	000005f9 	.word	0x000005f9
    1a70:	00001e25 	.word	0x00001e25
    1a74:	00007444 	.word	0x00007444
    1a78:	00006d30 	.word	0x00006d30
    1a7c:	00005bad 	.word	0x00005bad
    1a80:	00007330 	.word	0x00007330
    1a84:	00005ccd 	.word	0x00005ccd
    1a88:	00005be1 	.word	0x00005be1
    1a8c:	00001e31 	.word	0x00001e31
    1a90:	2000000c 	.word	0x2000000c
    1a94:	00005ad9 	.word	0x00005ad9
    1a98:	00007350 	.word	0x00007350
    1a9c:	00007370 	.word	0x00007370

00001aa0 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    1aa0:	b500      	push	{lr}
    1aa2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1aa4:	a901      	add	r1, sp, #4
    1aa6:	4817      	ldr	r0, [pc, #92]	; (1b04 <enable_interrupts+0x64>)
    1aa8:	4b17      	ldr	r3, [pc, #92]	; (1b08 <enable_interrupts+0x68>)
    1aaa:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1aac:	2800      	cmp	r0, #0
    1aae:	d11c      	bne.n	1aea <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    1ab0:	2180      	movs	r1, #128	; 0x80
    1ab2:	0049      	lsls	r1, r1, #1
    1ab4:	9b01      	ldr	r3, [sp, #4]
    1ab6:	4319      	orrs	r1, r3
    1ab8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    1aba:	4812      	ldr	r0, [pc, #72]	; (1b04 <enable_interrupts+0x64>)
    1abc:	4b13      	ldr	r3, [pc, #76]	; (1b0c <enable_interrupts+0x6c>)
    1abe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1ac0:	2800      	cmp	r0, #0
    1ac2:	d115      	bne.n	1af0 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1ac4:	a901      	add	r1, sp, #4
    1ac6:	20d0      	movs	r0, #208	; 0xd0
    1ac8:	0140      	lsls	r0, r0, #5
    1aca:	4b0f      	ldr	r3, [pc, #60]	; (1b08 <enable_interrupts+0x68>)
    1acc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1ace:	2800      	cmp	r0, #0
    1ad0:	d111      	bne.n	1af6 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    1ad2:	2180      	movs	r1, #128	; 0x80
    1ad4:	0249      	lsls	r1, r1, #9
    1ad6:	9b01      	ldr	r3, [sp, #4]
    1ad8:	4319      	orrs	r1, r3
    1ada:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1adc:	20d0      	movs	r0, #208	; 0xd0
    1ade:	0140      	lsls	r0, r0, #5
    1ae0:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <enable_interrupts+0x6c>)
    1ae2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d109      	bne.n	1afc <enable_interrupts+0x5c>
    1ae8:	e00a      	b.n	1b00 <enable_interrupts+0x60>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1aea:	2006      	movs	r0, #6
    1aec:	4240      	negs	r0, r0
    1aee:	e007      	b.n	1b00 <enable_interrupts+0x60>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1af0:	2006      	movs	r0, #6
    1af2:	4240      	negs	r0, r0
    1af4:	e004      	b.n	1b00 <enable_interrupts+0x60>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1af6:	2006      	movs	r0, #6
    1af8:	4240      	negs	r0, r0
    1afa:	e001      	b.n	1b00 <enable_interrupts+0x60>
	}
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1afc:	2006      	movs	r0, #6
    1afe:	4240      	negs	r0, r0
	}
	return M2M_SUCCESS;
}
    1b00:	b003      	add	sp, #12
    1b02:	bd00      	pop	{pc}
    1b04:	00001408 	.word	0x00001408
    1b08:	00001e25 	.word	0x00001e25
    1b0c:	00001e31 	.word	0x00001e31

00001b10 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1b10:	b510      	push	{r4, lr}
    1b12:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1b14:	4b27      	ldr	r3, [pc, #156]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b16:	681c      	ldr	r4, [r3, #0]
    1b18:	2c00      	cmp	r4, #0
    1b1a:	d146      	bne.n	1baa <nmi_get_chipid+0x9a>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    1b1c:	0019      	movs	r1, r3
    1b1e:	2080      	movs	r0, #128	; 0x80
    1b20:	0140      	lsls	r0, r0, #5
    1b22:	4b25      	ldr	r3, [pc, #148]	; (1bb8 <nmi_get_chipid+0xa8>)
    1b24:	4798      	blx	r3
    1b26:	2800      	cmp	r0, #0
    1b28:	d003      	beq.n	1b32 <nmi_get_chipid+0x22>
			chipid = 0;
    1b2a:	2200      	movs	r2, #0
    1b2c:	4b21      	ldr	r3, [pc, #132]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b2e:	601a      	str	r2, [r3, #0]
			return 0;
    1b30:	e03d      	b.n	1bae <nmi_get_chipid+0x9e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1b32:	a901      	add	r1, sp, #4
    1b34:	4821      	ldr	r0, [pc, #132]	; (1bbc <nmi_get_chipid+0xac>)
    1b36:	4b20      	ldr	r3, [pc, #128]	; (1bb8 <nmi_get_chipid+0xa8>)
    1b38:	4798      	blx	r3
    1b3a:	2800      	cmp	r0, #0
    1b3c:	d003      	beq.n	1b46 <nmi_get_chipid+0x36>
			chipid = 0;
    1b3e:	2200      	movs	r2, #0
    1b40:	4b1c      	ldr	r3, [pc, #112]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b42:	601a      	str	r2, [r3, #0]
			return 0;
    1b44:	e033      	b.n	1bae <nmi_get_chipid+0x9e>
		}

		if (chipid == 0x1002a0)  {
    1b46:	4b1b      	ldr	r3, [pc, #108]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	4a1d      	ldr	r2, [pc, #116]	; (1bc0 <nmi_get_chipid+0xb0>)
    1b4c:	4293      	cmp	r3, r2
    1b4e:	d106      	bne.n	1b5e <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	2b01      	cmp	r3, #1
    1b54:	d021      	beq.n	1b9a <nmi_get_chipid+0x8a>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    1b56:	4a1b      	ldr	r2, [pc, #108]	; (1bc4 <nmi_get_chipid+0xb4>)
    1b58:	4b16      	ldr	r3, [pc, #88]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b5a:	601a      	str	r2, [r3, #0]
    1b5c:	e01d      	b.n	1b9a <nmi_get_chipid+0x8a>
			}
		} else if(chipid == 0x1002b0) {
    1b5e:	4a1a      	ldr	r2, [pc, #104]	; (1bc8 <nmi_get_chipid+0xb8>)
    1b60:	4293      	cmp	r3, r2
    1b62:	d10c      	bne.n	1b7e <nmi_get_chipid+0x6e>
			if(rfrevid == 3) { /* 1002B0 */
    1b64:	9b01      	ldr	r3, [sp, #4]
    1b66:	2b03      	cmp	r3, #3
    1b68:	d017      	beq.n	1b9a <nmi_get_chipid+0x8a>
			} else if(rfrevid == 4) { /* 1002B1 */
    1b6a:	2b04      	cmp	r3, #4
    1b6c:	d103      	bne.n	1b76 <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    1b6e:	4a17      	ldr	r2, [pc, #92]	; (1bcc <nmi_get_chipid+0xbc>)
    1b70:	4b10      	ldr	r3, [pc, #64]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b72:	601a      	str	r2, [r3, #0]
    1b74:	e011      	b.n	1b9a <nmi_get_chipid+0x8a>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    1b76:	4a16      	ldr	r2, [pc, #88]	; (1bd0 <nmi_get_chipid+0xc0>)
    1b78:	4b0e      	ldr	r3, [pc, #56]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b7a:	601a      	str	r2, [r3, #0]
    1b7c:	e00d      	b.n	1b9a <nmi_get_chipid+0x8a>
			}
		} else if(chipid == 0x1000F0) { 
    1b7e:	4a15      	ldr	r2, [pc, #84]	; (1bd4 <nmi_get_chipid+0xc4>)
    1b80:	4293      	cmp	r3, r2
    1b82:	d10a      	bne.n	1b9a <nmi_get_chipid+0x8a>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    1b84:	490b      	ldr	r1, [pc, #44]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b86:	20ec      	movs	r0, #236	; 0xec
    1b88:	0380      	lsls	r0, r0, #14
    1b8a:	4b0b      	ldr	r3, [pc, #44]	; (1bb8 <nmi_get_chipid+0xa8>)
    1b8c:	4798      	blx	r3
    1b8e:	2800      	cmp	r0, #0
    1b90:	d003      	beq.n	1b9a <nmi_get_chipid+0x8a>
			chipid = 0;
    1b92:	2200      	movs	r2, #0
    1b94:	4b07      	ldr	r3, [pc, #28]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b96:	601a      	str	r2, [r3, #0]
			return 0;
    1b98:	e009      	b.n	1bae <nmi_get_chipid+0x9e>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    1b9a:	4a06      	ldr	r2, [pc, #24]	; (1bb4 <nmi_get_chipid+0xa4>)
    1b9c:	4b0e      	ldr	r3, [pc, #56]	; (1bd8 <nmi_get_chipid+0xc8>)
    1b9e:	6811      	ldr	r1, [r2, #0]
    1ba0:	400b      	ands	r3, r1
    1ba2:	21a0      	movs	r1, #160	; 0xa0
    1ba4:	02c9      	lsls	r1, r1, #11
    1ba6:	430b      	orrs	r3, r1
    1ba8:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    1baa:	4b02      	ldr	r3, [pc, #8]	; (1bb4 <nmi_get_chipid+0xa4>)
    1bac:	681c      	ldr	r4, [r3, #0]
}
    1bae:	0020      	movs	r0, r4
    1bb0:	b002      	add	sp, #8
    1bb2:	bd10      	pop	{r4, pc}
    1bb4:	200000c8 	.word	0x200000c8
    1bb8:	00001e25 	.word	0x00001e25
    1bbc:	000013f4 	.word	0x000013f4
    1bc0:	001002a0 	.word	0x001002a0
    1bc4:	001002a1 	.word	0x001002a1
    1bc8:	001002b0 	.word	0x001002b0
    1bcc:	001002b1 	.word	0x001002b1
    1bd0:	001002b2 	.word	0x001002b2
    1bd4:	001000f0 	.word	0x001000f0
    1bd8:	fff0ffff 	.word	0xfff0ffff

00001bdc <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bde:	0007      	movs	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1be0:	4d24      	ldr	r5, [pc, #144]	; (1c74 <wait_for_bootrom+0x98>)
    1be2:	4c25      	ldr	r4, [pc, #148]	; (1c78 <wait_for_bootrom+0x9c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1be4:	4e25      	ldr	r6, [pc, #148]	; (1c7c <wait_for_bootrom+0xa0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1be6:	0028      	movs	r0, r5
    1be8:	47a0      	blx	r4
		if (reg & 0x80000000) {
    1bea:	2800      	cmp	r0, #0
    1bec:	db02      	blt.n	1bf4 <wait_for_bootrom+0x18>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1bee:	2001      	movs	r0, #1
    1bf0:	47b0      	blx	r6
	}
    1bf2:	e7f8      	b.n	1be6 <wait_for_bootrom+0xa>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1bf4:	4822      	ldr	r0, [pc, #136]	; (1c80 <wait_for_bootrom+0xa4>)
    1bf6:	4b20      	ldr	r3, [pc, #128]	; (1c78 <wait_for_bootrom+0x9c>)
    1bf8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    1bfa:	07c3      	lsls	r3, r0, #31
    1bfc:	d409      	bmi.n	1c12 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1bfe:	4e1f      	ldr	r6, [pc, #124]	; (1c7c <wait_for_bootrom+0xa0>)
			reg = nm_read_reg(BOOTROM_REG);
    1c00:	4c20      	ldr	r4, [pc, #128]	; (1c84 <wait_for_bootrom+0xa8>)
    1c02:	4d1d      	ldr	r5, [pc, #116]	; (1c78 <wait_for_bootrom+0x9c>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1c04:	2001      	movs	r0, #1
    1c06:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    1c08:	0020      	movs	r0, r4
    1c0a:	47a8      	blx	r5

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    1c0c:	4b1e      	ldr	r3, [pc, #120]	; (1c88 <wait_for_bootrom+0xac>)
    1c0e:	4298      	cmp	r0, r3
    1c10:	d1f8      	bne.n	1c04 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    1c12:	2f02      	cmp	r7, #2
    1c14:	d109      	bne.n	1c2a <wait_for_bootrom+0x4e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1c16:	491d      	ldr	r1, [pc, #116]	; (1c8c <wait_for_bootrom+0xb0>)
    1c18:	481d      	ldr	r0, [pc, #116]	; (1c90 <wait_for_bootrom+0xb4>)
    1c1a:	4c1e      	ldr	r4, [pc, #120]	; (1c94 <wait_for_bootrom+0xb8>)
    1c1c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    1c1e:	2180      	movs	r1, #128	; 0x80
    1c20:	0349      	lsls	r1, r1, #13
    1c22:	481d      	ldr	r0, [pc, #116]	; (1c98 <wait_for_bootrom+0xbc>)
    1c24:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    1c26:	2700      	movs	r7, #0
    1c28:	e00e      	b.n	1c48 <wait_for_bootrom+0x6c>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    1c2a:	2f03      	cmp	r7, #3
    1c2c:	d108      	bne.n	1c40 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1c2e:	4917      	ldr	r1, [pc, #92]	; (1c8c <wait_for_bootrom+0xb0>)
    1c30:	4817      	ldr	r0, [pc, #92]	; (1c90 <wait_for_bootrom+0xb4>)
    1c32:	4c18      	ldr	r4, [pc, #96]	; (1c94 <wait_for_bootrom+0xb8>)
    1c34:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    1c36:	2100      	movs	r1, #0
    1c38:	4817      	ldr	r0, [pc, #92]	; (1c98 <wait_for_bootrom+0xbc>)
    1c3a:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    1c3c:	2700      	movs	r7, #0
    1c3e:	e003      	b.n	1c48 <wait_for_bootrom+0x6c>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    1c40:	3f04      	subs	r7, #4
    1c42:	427b      	negs	r3, r7
    1c44:	415f      	adcs	r7, r3
    1c46:	01ff      	lsls	r7, r7, #7
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    1c48:	4b14      	ldr	r3, [pc, #80]	; (1c9c <wait_for_bootrom+0xc0>)
    1c4a:	4798      	blx	r3
    1c4c:	0500      	lsls	r0, r0, #20
    1c4e:	0d00      	lsrs	r0, r0, #20
    1c50:	23e8      	movs	r3, #232	; 0xe8
    1c52:	009b      	lsls	r3, r3, #2
    1c54:	4298      	cmp	r0, r3
    1c56:	d104      	bne.n	1c62 <wait_for_bootrom+0x86>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    1c58:	2002      	movs	r0, #2
    1c5a:	4338      	orrs	r0, r7
    1c5c:	4b10      	ldr	r3, [pc, #64]	; (1ca0 <wait_for_bootrom+0xc4>)
    1c5e:	4798      	blx	r3
    1c60:	e002      	b.n	1c68 <wait_for_bootrom+0x8c>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    1c62:	0038      	movs	r0, r7
    1c64:	4b0e      	ldr	r3, [pc, #56]	; (1ca0 <wait_for_bootrom+0xc4>)
    1c66:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    1c68:	490e      	ldr	r1, [pc, #56]	; (1ca4 <wait_for_bootrom+0xc8>)
    1c6a:	4806      	ldr	r0, [pc, #24]	; (1c84 <wait_for_bootrom+0xa8>)
    1c6c:	4b09      	ldr	r3, [pc, #36]	; (1c94 <wait_for_bootrom+0xb8>)
    1c6e:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    1c70:	2000      	movs	r0, #0
    1c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c74:	00001014 	.word	0x00001014
    1c78:	00001e19 	.word	0x00001e19
    1c7c:	000005f9 	.word	0x000005f9
    1c80:	000207bc 	.word	0x000207bc
    1c84:	000c000c 	.word	0x000c000c
    1c88:	10add09e 	.word	0x10add09e
    1c8c:	3c1cd57d 	.word	0x3c1cd57d
    1c90:	000207ac 	.word	0x000207ac
    1c94:	00001e31 	.word	0x00001e31
    1c98:	0000108c 	.word	0x0000108c
    1c9c:	00001b11 	.word	0x00001b11
    1ca0:	00001915 	.word	0x00001915
    1ca4:	ef522f61 	.word	0xef522f61

00001ca8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1ca8:	b570      	push	{r4, r5, r6, lr}
    1caa:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    1cac:	4b15      	ldr	r3, [pc, #84]	; (1d04 <wait_for_firmware_start+0x5c>)
    1cae:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1cb0:	4b15      	ldr	r3, [pc, #84]	; (1d08 <wait_for_firmware_start+0x60>)
    1cb2:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1cb4:	3802      	subs	r0, #2
    1cb6:	2801      	cmp	r0, #1
    1cb8:	d80c      	bhi.n	1cd4 <wait_for_firmware_start+0x2c>
		regAddress = NMI_REV_REG;
    1cba:	4b14      	ldr	r3, [pc, #80]	; (1d0c <wait_for_firmware_start+0x64>)
    1cbc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    1cbe:	4b14      	ldr	r3, [pc, #80]	; (1d10 <wait_for_firmware_start+0x68>)
    1cc0:	9300      	str	r3, [sp, #0]
    1cc2:	e007      	b.n	1cd4 <wait_for_firmware_start+0x2c>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1cc4:	2002      	movs	r0, #2
    1cc6:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1cc8:	9801      	ldr	r0, [sp, #4]
    1cca:	47a8      	blx	r5
    1ccc:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1cce:	2c00      	cmp	r4, #0
    1cd0:	d105      	bne.n	1cde <wait_for_firmware_start+0x36>
    1cd2:	e012      	b.n	1cfa <wait_for_firmware_start+0x52>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    1cd4:	2401      	movs	r4, #1
    1cd6:	4264      	negs	r4, r4
    1cd8:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1cda:	4e0e      	ldr	r6, [pc, #56]	; (1d14 <wait_for_firmware_start+0x6c>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1cdc:	4d0e      	ldr	r5, [pc, #56]	; (1d18 <wait_for_firmware_start+0x70>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    1cde:	9b00      	ldr	r3, [sp, #0]
    1ce0:	4298      	cmp	r0, r3
    1ce2:	d1ef      	bne.n	1cc4 <wait_for_firmware_start+0x1c>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1ce4:	9a00      	ldr	r2, [sp, #0]
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1ce6:	2000      	movs	r0, #0
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1ce8:	4b07      	ldr	r3, [pc, #28]	; (1d08 <wait_for_firmware_start+0x60>)
    1cea:	429a      	cmp	r2, r3
    1cec:	d107      	bne.n	1cfe <wait_for_firmware_start+0x56>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    1cee:	2100      	movs	r1, #0
    1cf0:	4804      	ldr	r0, [pc, #16]	; (1d04 <wait_for_firmware_start+0x5c>)
    1cf2:	4b0a      	ldr	r3, [pc, #40]	; (1d1c <wait_for_firmware_start+0x74>)
    1cf4:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1cf6:	2000      	movs	r0, #0
    1cf8:	e001      	b.n	1cfe <wait_for_firmware_start+0x56>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1cfa:	2005      	movs	r0, #5
    1cfc:	4240      	negs	r0, r0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    1cfe:	b002      	add	sp, #8
    1d00:	bd70      	pop	{r4, r5, r6, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	0000108c 	.word	0x0000108c
    1d08:	02532636 	.word	0x02532636
    1d0c:	000207ac 	.word	0x000207ac
    1d10:	d75dc1c3 	.word	0xd75dc1c3
    1d14:	000005f9 	.word	0x000005f9
    1d18:	00001e19 	.word	0x00001e19
    1d1c:	00001e31 	.word	0x00001e31

00001d20 <chip_deinit>:

sint8 chip_deinit(void)
{
    1d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d22:	b083      	sub	sp, #12
	uint32 reg = 0;
    1d24:	2300      	movs	r3, #0
    1d26:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d28:	a901      	add	r1, sp, #4
    1d2a:	20a0      	movs	r0, #160	; 0xa0
    1d2c:	0140      	lsls	r0, r0, #5
    1d2e:	4b27      	ldr	r3, [pc, #156]	; (1dcc <chip_deinit+0xac>)
    1d30:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    1d32:	2800      	cmp	r0, #0
    1d34:	d00a      	beq.n	1d4c <chip_deinit+0x2c>
		M2M_ERR("failed to de-initialize\n");
    1d36:	4a26      	ldr	r2, [pc, #152]	; (1dd0 <chip_deinit+0xb0>)
    1d38:	4926      	ldr	r1, [pc, #152]	; (1dd4 <chip_deinit+0xb4>)
    1d3a:	4827      	ldr	r0, [pc, #156]	; (1dd8 <chip_deinit+0xb8>)
    1d3c:	4b27      	ldr	r3, [pc, #156]	; (1ddc <chip_deinit+0xbc>)
    1d3e:	4798      	blx	r3
    1d40:	4827      	ldr	r0, [pc, #156]	; (1de0 <chip_deinit+0xc0>)
    1d42:	4b28      	ldr	r3, [pc, #160]	; (1de4 <chip_deinit+0xc4>)
    1d44:	4798      	blx	r3
    1d46:	200d      	movs	r0, #13
    1d48:	4b27      	ldr	r3, [pc, #156]	; (1de8 <chip_deinit+0xc8>)
    1d4a:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    1d4c:	4927      	ldr	r1, [pc, #156]	; (1dec <chip_deinit+0xcc>)
    1d4e:	9b01      	ldr	r3, [sp, #4]
    1d50:	4019      	ands	r1, r3
    1d52:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1d54:	20a0      	movs	r0, #160	; 0xa0
    1d56:	0140      	lsls	r0, r0, #5
    1d58:	4b25      	ldr	r3, [pc, #148]	; (1df0 <chip_deinit+0xd0>)
    1d5a:	4798      	blx	r3
    1d5c:	0004      	movs	r4, r0
    1d5e:	250a      	movs	r5, #10

	if (ret != M2M_SUCCESS) {
    1d60:	2800      	cmp	r0, #0
    1d62:	d00c      	beq.n	1d7e <chip_deinit+0x5e>
		M2M_ERR("Error while writing reg\n");
    1d64:	4a23      	ldr	r2, [pc, #140]	; (1df4 <chip_deinit+0xd4>)
    1d66:	491b      	ldr	r1, [pc, #108]	; (1dd4 <chip_deinit+0xb4>)
    1d68:	481b      	ldr	r0, [pc, #108]	; (1dd8 <chip_deinit+0xb8>)
    1d6a:	4b1c      	ldr	r3, [pc, #112]	; (1ddc <chip_deinit+0xbc>)
    1d6c:	4798      	blx	r3
    1d6e:	4822      	ldr	r0, [pc, #136]	; (1df8 <chip_deinit+0xd8>)
    1d70:	4b1c      	ldr	r3, [pc, #112]	; (1de4 <chip_deinit+0xc4>)
    1d72:	4798      	blx	r3
    1d74:	200d      	movs	r0, #13
    1d76:	4b1c      	ldr	r3, [pc, #112]	; (1de8 <chip_deinit+0xc8>)
    1d78:	4798      	blx	r3
		return ret;
    1d7a:	0020      	movs	r0, r4
    1d7c:	e024      	b.n	1dc8 <chip_deinit+0xa8>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d7e:	4e13      	ldr	r6, [pc, #76]	; (1dcc <chip_deinit+0xac>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1d80:	4f1b      	ldr	r7, [pc, #108]	; (1df0 <chip_deinit+0xd0>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1d82:	a901      	add	r1, sp, #4
    1d84:	20a0      	movs	r0, #160	; 0xa0
    1d86:	0140      	lsls	r0, r0, #5
    1d88:	47b0      	blx	r6
    1d8a:	1e04      	subs	r4, r0, #0
		if (ret != M2M_SUCCESS) {
    1d8c:	d00d      	beq.n	1daa <chip_deinit+0x8a>
			M2M_ERR("Error while reading reg\n");
    1d8e:	228f      	movs	r2, #143	; 0x8f
    1d90:	0092      	lsls	r2, r2, #2
    1d92:	4910      	ldr	r1, [pc, #64]	; (1dd4 <chip_deinit+0xb4>)
    1d94:	4810      	ldr	r0, [pc, #64]	; (1dd8 <chip_deinit+0xb8>)
    1d96:	4b11      	ldr	r3, [pc, #68]	; (1ddc <chip_deinit+0xbc>)
    1d98:	4798      	blx	r3
    1d9a:	4818      	ldr	r0, [pc, #96]	; (1dfc <chip_deinit+0xdc>)
    1d9c:	4b11      	ldr	r3, [pc, #68]	; (1de4 <chip_deinit+0xc4>)
    1d9e:	4798      	blx	r3
    1da0:	200d      	movs	r0, #13
    1da2:	4b11      	ldr	r3, [pc, #68]	; (1de8 <chip_deinit+0xc8>)
    1da4:	4798      	blx	r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1da6:	0020      	movs	r0, r4
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
    1da8:	e00e      	b.n	1dc8 <chip_deinit+0xa8>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    1daa:	9901      	ldr	r1, [sp, #4]
    1dac:	054b      	lsls	r3, r1, #21
    1dae:	d50a      	bpl.n	1dc6 <chip_deinit+0xa6>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    1db0:	4b0e      	ldr	r3, [pc, #56]	; (1dec <chip_deinit+0xcc>)
    1db2:	4019      	ands	r1, r3
    1db4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1db6:	20a0      	movs	r0, #160	; 0xa0
    1db8:	0140      	lsls	r0, r0, #5
    1dba:	47b8      	blx	r7
    1dbc:	3d01      	subs	r5, #1
    1dbe:	b2ed      	uxtb	r5, r5
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    1dc0:	2d00      	cmp	r5, #0
    1dc2:	d1de      	bne.n	1d82 <chip_deinit+0x62>
    1dc4:	e000      	b.n	1dc8 <chip_deinit+0xa8>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1dc6:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
    1dc8:	b003      	add	sp, #12
    1dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dcc:	00001e25 	.word	0x00001e25
    1dd0:	0000022f 	.word	0x0000022f
    1dd4:	00007324 	.word	0x00007324
    1dd8:	00006d30 	.word	0x00006d30
    1ddc:	00005bad 	.word	0x00005bad
    1de0:	000073bc 	.word	0x000073bc
    1de4:	00005ccd 	.word	0x00005ccd
    1de8:	00005be1 	.word	0x00005be1
    1dec:	fffffbff 	.word	0xfffffbff
    1df0:	00001e31 	.word	0x00001e31
    1df4:	00000235 	.word	0x00000235
    1df8:	000073d4 	.word	0x000073d4
    1dfc:	000073ec 	.word	0x000073ec

00001e00 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1e00:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    1e02:	4b01      	ldr	r3, [pc, #4]	; (1e08 <nm_bus_iface_init+0x8>)
    1e04:	4798      	blx	r3

	return ret;
}
    1e06:	bd10      	pop	{r4, pc}
    1e08:	00000725 	.word	0x00000725

00001e0c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1e0c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1e0e:	4b01      	ldr	r3, [pc, #4]	; (1e14 <nm_bus_iface_deinit+0x8>)
    1e10:	4798      	blx	r3

	return ret;
}
    1e12:	bd10      	pop	{r4, pc}
    1e14:	00000955 	.word	0x00000955

00001e18 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1e18:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1e1a:	4b01      	ldr	r3, [pc, #4]	; (1e20 <nm_read_reg+0x8>)
    1e1c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1e1e:	bd10      	pop	{r4, pc}
    1e20:	000026ad 	.word	0x000026ad

00001e24 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1e24:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1e26:	4b01      	ldr	r3, [pc, #4]	; (1e2c <nm_read_reg_with_ret+0x8>)
    1e28:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1e2a:	bd10      	pop	{r4, pc}
    1e2c:	000026c1 	.word	0x000026c1

00001e30 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1e30:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1e32:	4b01      	ldr	r3, [pc, #4]	; (1e38 <nm_write_reg+0x8>)
    1e34:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1e36:	bd10      	pop	{r4, pc}
    1e38:	000026d9 	.word	0x000026d9

00001e3c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3e:	4657      	mov	r7, sl
    1e40:	464e      	mov	r6, r9
    1e42:	4645      	mov	r5, r8
    1e44:	b4e0      	push	{r5, r6, r7}
    1e46:	b082      	sub	sp, #8
    1e48:	4680      	mov	r8, r0
    1e4a:	4689      	mov	r9, r1
    1e4c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1e4e:	4b13      	ldr	r3, [pc, #76]	; (1e9c <nm_read_block+0x60>)
    1e50:	881f      	ldrh	r7, [r3, #0]
    1e52:	3f08      	subs	r7, #8
    1e54:	b2bb      	uxth	r3, r7
    1e56:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1e58:	001e      	movs	r6, r3
    1e5a:	0004      	movs	r4, r0
    1e5c:	429a      	cmp	r2, r3
    1e5e:	d806      	bhi.n	1e6e <nm_read_block+0x32>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1e60:	2100      	movs	r1, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1e62:	b2aa      	uxth	r2, r5
    1e64:	4449      	add	r1, r9
    1e66:	0020      	movs	r0, r4
    1e68:	4b0d      	ldr	r3, [pc, #52]	; (1ea0 <nm_read_block+0x64>)
    1e6a:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    1e6c:	e010      	b.n	1e90 <nm_read_block+0x54>
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1e6e:	4b0c      	ldr	r3, [pc, #48]	; (1ea0 <nm_read_block+0x64>)
    1e70:	469a      	mov	sl, r3
    1e72:	1a37      	subs	r7, r6, r0
    1e74:	4643      	mov	r3, r8
    1e76:	1ae1      	subs	r1, r4, r3
    1e78:	4449      	add	r1, r9
    1e7a:	9a01      	ldr	r2, [sp, #4]
    1e7c:	0020      	movs	r0, r4
    1e7e:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1e80:	2800      	cmp	r0, #0
    1e82:	d105      	bne.n	1e90 <nm_read_block+0x54>
			u32Sz -= u16MaxTrxSz;
    1e84:	1bad      	subs	r5, r5, r6
    1e86:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1e88:	19a4      	adds	r4, r4, r6
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1e8a:	42b5      	cmp	r5, r6
    1e8c:	d8f2      	bhi.n	1e74 <nm_read_block+0x38>
    1e8e:	e7e8      	b.n	1e62 <nm_read_block+0x26>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    1e90:	b002      	add	sp, #8
    1e92:	bc1c      	pop	{r2, r3, r4}
    1e94:	4690      	mov	r8, r2
    1e96:	4699      	mov	r9, r3
    1e98:	46a2      	mov	sl, r4
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9c:	20000008 	.word	0x20000008
    1ea0:	00002819 	.word	0x00002819

00001ea4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea6:	4657      	mov	r7, sl
    1ea8:	464e      	mov	r6, r9
    1eaa:	4645      	mov	r5, r8
    1eac:	b4e0      	push	{r5, r6, r7}
    1eae:	b082      	sub	sp, #8
    1eb0:	4680      	mov	r8, r0
    1eb2:	4689      	mov	r9, r1
    1eb4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1eb6:	4b13      	ldr	r3, [pc, #76]	; (1f04 <nm_write_block+0x60>)
    1eb8:	881f      	ldrh	r7, [r3, #0]
    1eba:	3f08      	subs	r7, #8
    1ebc:	b2bb      	uxth	r3, r7
    1ebe:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1ec0:	001e      	movs	r6, r3
    1ec2:	0004      	movs	r4, r0
    1ec4:	429a      	cmp	r2, r3
    1ec6:	d806      	bhi.n	1ed6 <nm_write_block+0x32>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1ec8:	2100      	movs	r1, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1eca:	b2aa      	uxth	r2, r5
    1ecc:	4449      	add	r1, r9
    1ece:	0020      	movs	r0, r4
    1ed0:	4b0d      	ldr	r3, [pc, #52]	; (1f08 <nm_write_block+0x64>)
    1ed2:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    1ed4:	e010      	b.n	1ef8 <nm_write_block+0x54>
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1ed6:	4b0c      	ldr	r3, [pc, #48]	; (1f08 <nm_write_block+0x64>)
    1ed8:	469a      	mov	sl, r3
    1eda:	1a37      	subs	r7, r6, r0
    1edc:	4643      	mov	r3, r8
    1ede:	1ae1      	subs	r1, r4, r3
    1ee0:	4449      	add	r1, r9
    1ee2:	9a01      	ldr	r2, [sp, #4]
    1ee4:	0020      	movs	r0, r4
    1ee6:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1ee8:	2800      	cmp	r0, #0
    1eea:	d105      	bne.n	1ef8 <nm_write_block+0x54>
			u32Sz -= u16MaxTrxSz;
    1eec:	1bad      	subs	r5, r5, r6
    1eee:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1ef0:	19a4      	adds	r4, r4, r6
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1ef2:	42b5      	cmp	r5, r6
    1ef4:	d8f2      	bhi.n	1edc <nm_write_block+0x38>
    1ef6:	e7e8      	b.n	1eca <nm_write_block+0x26>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    1ef8:	b002      	add	sp, #8
    1efa:	bc1c      	pop	{r2, r3, r4}
    1efc:	4690      	mov	r8, r2
    1efe:	4699      	mov	r9, r3
    1f00:	46a2      	mov	sl, r4
    1f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f04:	20000008 	.word	0x20000008
    1f08:	000028f1 	.word	0x000028f1

00001f0c <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    1f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f0e:	b083      	sub	sp, #12
    1f10:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1f12:	2300      	movs	r3, #0
    1f14:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    1f16:	a901      	add	r1, sp, #4
    1f18:	4820      	ldr	r0, [pc, #128]	; (1f9c <nm_get_firmware_info+0x90>)
    1f1a:	4b21      	ldr	r3, [pc, #132]	; (1fa0 <nm_get_firmware_info+0x94>)
    1f1c:	4798      	blx	r3
    1f1e:	0005      	movs	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    1f20:	4b20      	ldr	r3, [pc, #128]	; (1fa4 <nm_get_firmware_info+0x98>)
    1f22:	9a01      	ldr	r2, [sp, #4]
    1f24:	429a      	cmp	r2, r3
    1f26:	d104      	bne.n	1f32 <nm_get_firmware_info+0x26>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    1f28:	a901      	add	r1, sp, #4
    1f2a:	481f      	ldr	r0, [pc, #124]	; (1fa8 <nm_get_firmware_info+0x9c>)
    1f2c:	4b1c      	ldr	r3, [pc, #112]	; (1fa0 <nm_get_firmware_info+0x94>)
    1f2e:	4798      	blx	r3
    1f30:	0005      	movs	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    1f32:	9b01      	ldr	r3, [sp, #4]
    1f34:	0c1a      	lsrs	r2, r3, #16
    1f36:	1211      	asrs	r1, r2, #8
    1f38:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    1f3a:	1111      	asrs	r1, r2, #4
    1f3c:	260f      	movs	r6, #15
    1f3e:	4031      	ands	r1, r6
    1f40:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    1f42:	4032      	ands	r2, r6
    1f44:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    1f46:	121a      	asrs	r2, r3, #8
    1f48:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    1f4a:	111a      	asrs	r2, r3, #4
    1f4c:	4032      	ands	r2, r6
    1f4e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    1f50:	4033      	ands	r3, r6
    1f52:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    1f54:	4b15      	ldr	r3, [pc, #84]	; (1fac <nm_get_firmware_info+0xa0>)
    1f56:	4798      	blx	r3
    1f58:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    1f5a:	7923      	ldrb	r3, [r4, #4]
    1f5c:	021a      	lsls	r2, r3, #8
    1f5e:	79a3      	ldrb	r3, [r4, #6]
    1f60:	4033      	ands	r3, r6
    1f62:	4313      	orrs	r3, r2
    1f64:	7960      	ldrb	r0, [r4, #5]
    1f66:	0100      	lsls	r0, r0, #4
    1f68:	27ff      	movs	r7, #255	; 0xff
    1f6a:	4038      	ands	r0, r7
    1f6c:	4303      	orrs	r3, r0
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
    1f6e:	79e0      	ldrb	r0, [r4, #7]
    1f70:	0200      	lsls	r0, r0, #8
    1f72:	7a62      	ldrb	r2, [r4, #9]
    1f74:	4016      	ands	r6, r2
    1f76:	4306      	orrs	r6, r0
    1f78:	7a21      	ldrb	r1, [r4, #8]
    1f7a:	0109      	lsls	r1, r1, #4
    1f7c:	4039      	ands	r1, r7
    1f7e:	0032      	movs	r2, r6
    1f80:	430a      	orrs	r2, r1
    1f82:	490b      	ldr	r1, [pc, #44]	; (1fb0 <nm_get_firmware_info+0xa4>)
    1f84:	428a      	cmp	r2, r1
    1f86:	d901      	bls.n	1f8c <nm_get_firmware_info+0x80>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    1f88:	250d      	movs	r5, #13
    1f8a:	426d      	negs	r5, r5
	}
	if(curr_drv_ver >  curr_firm_ver) {
    1f8c:	4a09      	ldr	r2, [pc, #36]	; (1fb4 <nm_get_firmware_info+0xa8>)
    1f8e:	4293      	cmp	r3, r2
    1f90:	d801      	bhi.n	1f96 <nm_get_firmware_info+0x8a>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    1f92:	250d      	movs	r5, #13
    1f94:	426d      	negs	r5, r5
	}
	return ret;
}
    1f96:	0028      	movs	r0, r5
    1f98:	b003      	add	sp, #12
    1f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f9c:	000207ac 	.word	0x000207ac
    1fa0:	00001e25 	.word	0x00001e25
    1fa4:	d75dc1c3 	.word	0xd75dc1c3
    1fa8:	00001048 	.word	0x00001048
    1fac:	00001b11 	.word	0x00001b11
    1fb0:	00001330 	.word	0x00001330
    1fb4:	0000132f 	.word	0x0000132f

00001fb8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1fb8:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1fba:	2800      	cmp	r0, #0
    1fbc:	d005      	beq.n	1fca <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
    1fbe:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1fc0:	1e6b      	subs	r3, r5, #1
    1fc2:	2b03      	cmp	r3, #3
    1fc4:	d902      	bls.n	1fcc <nm_drv_init+0x14>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1fc6:	2501      	movs	r5, #1
    1fc8:	e000      	b.n	1fcc <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1fca:	2501      	movs	r5, #1
	}
	
	ret = nm_bus_iface_init(NULL);
    1fcc:	2000      	movs	r0, #0
    1fce:	4b1f      	ldr	r3, [pc, #124]	; (204c <STACK_SIZE+0x4c>)
    1fd0:	4798      	blx	r3
    1fd2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1fd4:	d00c      	beq.n	1ff0 <nm_drv_init+0x38>
		M2M_ERR("[nmi start]: fail init bus\n");
    1fd6:	2292      	movs	r2, #146	; 0x92
    1fd8:	0052      	lsls	r2, r2, #1
    1fda:	491d      	ldr	r1, [pc, #116]	; (2050 <STACK_SIZE+0x50>)
    1fdc:	481d      	ldr	r0, [pc, #116]	; (2054 <STACK_SIZE+0x54>)
    1fde:	4b1e      	ldr	r3, [pc, #120]	; (2058 <STACK_SIZE+0x58>)
    1fe0:	4798      	blx	r3
    1fe2:	481e      	ldr	r0, [pc, #120]	; (205c <STACK_SIZE+0x5c>)
    1fe4:	4b1e      	ldr	r3, [pc, #120]	; (2060 <STACK_SIZE+0x60>)
    1fe6:	4798      	blx	r3
    1fe8:	200d      	movs	r0, #13
    1fea:	4b1e      	ldr	r3, [pc, #120]	; (2064 <STACK_SIZE+0x64>)
    1fec:	4798      	blx	r3
		goto ERR1;
    1fee:	e02b      	b.n	2048 <STACK_SIZE+0x48>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1ff0:	481d      	ldr	r0, [pc, #116]	; (2068 <STACK_SIZE+0x68>)
    1ff2:	4c19      	ldr	r4, [pc, #100]	; (2058 <STACK_SIZE+0x58>)
    1ff4:	47a0      	blx	r4
    1ff6:	4b1d      	ldr	r3, [pc, #116]	; (206c <STACK_SIZE+0x6c>)
    1ff8:	4798      	blx	r3
    1ffa:	0001      	movs	r1, r0
    1ffc:	481c      	ldr	r0, [pc, #112]	; (2070 <STACK_SIZE+0x70>)
    1ffe:	47a0      	blx	r4
    2000:	200d      	movs	r0, #13
    2002:	4b18      	ldr	r3, [pc, #96]	; (2064 <STACK_SIZE+0x64>)
    2004:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2006:	4b1b      	ldr	r3, [pc, #108]	; (2074 <STACK_SIZE+0x74>)
    2008:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    200a:	0028      	movs	r0, r5
    200c:	4b1a      	ldr	r3, [pc, #104]	; (2078 <STACK_SIZE+0x78>)
    200e:	4798      	blx	r3
    2010:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2012:	d117      	bne.n	2044 <STACK_SIZE+0x44>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2014:	0028      	movs	r0, r5
    2016:	4b19      	ldr	r3, [pc, #100]	; (207c <STACK_SIZE+0x7c>)
    2018:	4798      	blx	r3
    201a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    201c:	d112      	bne.n	2044 <STACK_SIZE+0x44>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    201e:	1ea8      	subs	r0, r5, #2
    2020:	2801      	cmp	r0, #1
    2022:	d911      	bls.n	2048 <STACK_SIZE+0x48>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2024:	4b16      	ldr	r3, [pc, #88]	; (2080 <STACK_SIZE+0x80>)
    2026:	4798      	blx	r3
    2028:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    202a:	d00d      	beq.n	2048 <STACK_SIZE+0x48>
		M2M_ERR("failed to enable interrupts..\n");
    202c:	22ae      	movs	r2, #174	; 0xae
    202e:	0052      	lsls	r2, r2, #1
    2030:	4907      	ldr	r1, [pc, #28]	; (2050 <STACK_SIZE+0x50>)
    2032:	4808      	ldr	r0, [pc, #32]	; (2054 <STACK_SIZE+0x54>)
    2034:	4b08      	ldr	r3, [pc, #32]	; (2058 <STACK_SIZE+0x58>)
    2036:	4798      	blx	r3
    2038:	4812      	ldr	r0, [pc, #72]	; (2084 <STACK_SIZE+0x84>)
    203a:	4b09      	ldr	r3, [pc, #36]	; (2060 <STACK_SIZE+0x60>)
    203c:	4798      	blx	r3
    203e:	200d      	movs	r0, #13
    2040:	4b08      	ldr	r3, [pc, #32]	; (2064 <STACK_SIZE+0x64>)
    2042:	4798      	blx	r3
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2044:	4b10      	ldr	r3, [pc, #64]	; (2088 <STACK_SIZE+0x88>)
    2046:	4798      	blx	r3
ERR1:
	return ret;
}
    2048:	0020      	movs	r0, r4
    204a:	bd70      	pop	{r4, r5, r6, pc}
    204c:	00001e01 	.word	0x00001e01
    2050:	00007454 	.word	0x00007454
    2054:	00006d30 	.word	0x00006d30
    2058:	00005bad 	.word	0x00005bad
    205c:	00007470 	.word	0x00007470
    2060:	00005ccd 	.word	0x00005ccd
    2064:	00005be1 	.word	0x00005be1
    2068:	00006fe4 	.word	0x00006fe4
    206c:	00001b11 	.word	0x00001b11
    2070:	0000748c 	.word	0x0000748c
    2074:	000026f1 	.word	0x000026f1
    2078:	00001bdd 	.word	0x00001bdd
    207c:	00001ca9 	.word	0x00001ca9
    2080:	00001aa1 	.word	0x00001aa1
    2084:	0000749c 	.word	0x0000749c
    2088:	00001e0d 	.word	0x00001e0d

0000208c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    208c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    208e:	4b1c      	ldr	r3, [pc, #112]	; (2100 <nm_drv_deinit+0x74>)
    2090:	4798      	blx	r3
    2092:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2094:	d00c      	beq.n	20b0 <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2096:	22ba      	movs	r2, #186	; 0xba
    2098:	0052      	lsls	r2, r2, #1
    209a:	491a      	ldr	r1, [pc, #104]	; (2104 <nm_drv_deinit+0x78>)
    209c:	481a      	ldr	r0, [pc, #104]	; (2108 <nm_drv_deinit+0x7c>)
    209e:	4b1b      	ldr	r3, [pc, #108]	; (210c <nm_drv_deinit+0x80>)
    20a0:	4798      	blx	r3
    20a2:	481b      	ldr	r0, [pc, #108]	; (2110 <nm_drv_deinit+0x84>)
    20a4:	4b1b      	ldr	r3, [pc, #108]	; (2114 <nm_drv_deinit+0x88>)
    20a6:	4798      	blx	r3
    20a8:	200d      	movs	r0, #13
    20aa:	4b1b      	ldr	r3, [pc, #108]	; (2118 <nm_drv_deinit+0x8c>)
    20ac:	4798      	blx	r3
		goto ERR1;
    20ae:	e024      	b.n	20fa <nm_drv_deinit+0x6e>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    20b0:	2000      	movs	r0, #0
    20b2:	4b1a      	ldr	r3, [pc, #104]	; (211c <nm_drv_deinit+0x90>)
    20b4:	4798      	blx	r3
    20b6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    20b8:	d00c      	beq.n	20d4 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    20ba:	227c      	movs	r2, #124	; 0x7c
    20bc:	32ff      	adds	r2, #255	; 0xff
    20be:	4911      	ldr	r1, [pc, #68]	; (2104 <nm_drv_deinit+0x78>)
    20c0:	4811      	ldr	r0, [pc, #68]	; (2108 <nm_drv_deinit+0x7c>)
    20c2:	4b12      	ldr	r3, [pc, #72]	; (210c <nm_drv_deinit+0x80>)
    20c4:	4798      	blx	r3
    20c6:	4816      	ldr	r0, [pc, #88]	; (2120 <nm_drv_deinit+0x94>)
    20c8:	4b12      	ldr	r3, [pc, #72]	; (2114 <nm_drv_deinit+0x88>)
    20ca:	4798      	blx	r3
    20cc:	200d      	movs	r0, #13
    20ce:	4b12      	ldr	r3, [pc, #72]	; (2118 <nm_drv_deinit+0x8c>)
    20d0:	4798      	blx	r3
		goto ERR1;
    20d2:	e012      	b.n	20fa <nm_drv_deinit+0x6e>
	}

	ret = nm_bus_iface_deinit();
    20d4:	4b13      	ldr	r3, [pc, #76]	; (2124 <nm_drv_deinit+0x98>)
    20d6:	4798      	blx	r3
    20d8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    20da:	d00c      	beq.n	20f6 <nm_drv_deinit+0x6a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    20dc:	2282      	movs	r2, #130	; 0x82
    20de:	32ff      	adds	r2, #255	; 0xff
    20e0:	4908      	ldr	r1, [pc, #32]	; (2104 <nm_drv_deinit+0x78>)
    20e2:	4809      	ldr	r0, [pc, #36]	; (2108 <nm_drv_deinit+0x7c>)
    20e4:	4b09      	ldr	r3, [pc, #36]	; (210c <nm_drv_deinit+0x80>)
    20e6:	4798      	blx	r3
    20e8:	480f      	ldr	r0, [pc, #60]	; (2128 <nm_drv_deinit+0x9c>)
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <nm_drv_deinit+0x88>)
    20ec:	4798      	blx	r3
    20ee:	200d      	movs	r0, #13
    20f0:	4b09      	ldr	r3, [pc, #36]	; (2118 <nm_drv_deinit+0x8c>)
    20f2:	4798      	blx	r3
		goto ERR1;
    20f4:	e001      	b.n	20fa <nm_drv_deinit+0x6e>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    20f6:	4b0d      	ldr	r3, [pc, #52]	; (212c <nm_drv_deinit+0xa0>)
    20f8:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    20fa:	0020      	movs	r0, r4
    20fc:	bd10      	pop	{r4, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	00001d21 	.word	0x00001d21
    2104:	00007460 	.word	0x00007460
    2108:	00006d30 	.word	0x00006d30
    210c:	00005bad 	.word	0x00005bad
    2110:	000074bc 	.word	0x000074bc
    2114:	00005ccd 	.word	0x00005ccd
    2118:	00005be1 	.word	0x00005be1
    211c:	00003219 	.word	0x00003219
    2120:	000074dc 	.word	0x000074dc
    2124:	00001e0d 	.word	0x00001e0d
    2128:	00007500 	.word	0x00007500
    212c:	0000269d 	.word	0x0000269d

00002130 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    2130:	b500      	push	{lr}
    2132:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    2134:	ab01      	add	r3, sp, #4
    2136:	2200      	movs	r2, #0
    2138:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    213a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    213c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    213e:	0019      	movs	r1, r3
    2140:	2003      	movs	r0, #3
    2142:	4b02      	ldr	r3, [pc, #8]	; (214c <nmi_spi_read+0x1c>)
    2144:	4798      	blx	r3
}
    2146:	b005      	add	sp, #20
    2148:	bd00      	pop	{pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	00000829 	.word	0x00000829

00002150 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2150:	b5f0      	push	{r4, r5, r6, r7, lr}
    2152:	b083      	sub	sp, #12
    2154:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2156:	2ecf      	cmp	r6, #207	; 0xcf
    2158:	d004      	beq.n	2164 <spi_cmd_rsp+0x14>
    215a:	0003      	movs	r3, r0
    215c:	333b      	adds	r3, #59	; 0x3b
    215e:	b2db      	uxtb	r3, r3
    2160:	2b01      	cmp	r3, #1
    2162:	d807      	bhi.n	2174 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2164:	2101      	movs	r1, #1
    2166:	466b      	mov	r3, sp
    2168:	1dd8      	adds	r0, r3, #7
    216a:	4b24      	ldr	r3, [pc, #144]	; (21fc <spi_cmd_rsp+0xac>)
    216c:	4798      	blx	r3
			result = N_FAIL;
    216e:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2170:	2800      	cmp	r0, #0
    2172:	d140      	bne.n	21f6 <spi_cmd_rsp+0xa6>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2174:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2176:	466b      	mov	r3, sp
    2178:	1ddd      	adds	r5, r3, #7
    217a:	4f20      	ldr	r7, [pc, #128]	; (21fc <spi_cmd_rsp+0xac>)
    217c:	2101      	movs	r1, #1
    217e:	0028      	movs	r0, r5
    2180:	47b8      	blx	r7
    2182:	2800      	cmp	r0, #0
    2184:	d00d      	beq.n	21a2 <spi_cmd_rsp+0x52>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2186:	2228      	movs	r2, #40	; 0x28
    2188:	32ff      	adds	r2, #255	; 0xff
    218a:	491d      	ldr	r1, [pc, #116]	; (2200 <spi_cmd_rsp+0xb0>)
    218c:	481d      	ldr	r0, [pc, #116]	; (2204 <spi_cmd_rsp+0xb4>)
    218e:	4b1e      	ldr	r3, [pc, #120]	; (2208 <spi_cmd_rsp+0xb8>)
    2190:	4798      	blx	r3
    2192:	481e      	ldr	r0, [pc, #120]	; (220c <spi_cmd_rsp+0xbc>)
    2194:	4b1e      	ldr	r3, [pc, #120]	; (2210 <spi_cmd_rsp+0xc0>)
    2196:	4798      	blx	r3
    2198:	200d      	movs	r0, #13
    219a:	4b1e      	ldr	r3, [pc, #120]	; (2214 <spi_cmd_rsp+0xc4>)
    219c:	4798      	blx	r3
			result = N_FAIL;
    219e:	2300      	movs	r3, #0
			goto _fail_;
    21a0:	e029      	b.n	21f6 <spi_cmd_rsp+0xa6>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    21a2:	782b      	ldrb	r3, [r5, #0]
    21a4:	42b3      	cmp	r3, r6
    21a6:	d005      	beq.n	21b4 <spi_cmd_rsp+0x64>
    21a8:	3c01      	subs	r4, #1
    21aa:	b2e4      	uxtb	r4, r4
    21ac:	2c00      	cmp	r4, #0
    21ae:	d1e5      	bne.n	217c <spi_cmd_rsp+0x2c>
    21b0:	340b      	adds	r4, #11
    21b2:	e000      	b.n	21b6 <spi_cmd_rsp+0x66>
    21b4:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    21b6:	466b      	mov	r3, sp
    21b8:	1ddd      	adds	r5, r3, #7
    21ba:	4e10      	ldr	r6, [pc, #64]	; (21fc <spi_cmd_rsp+0xac>)
    21bc:	2101      	movs	r1, #1
    21be:	0028      	movs	r0, r5
    21c0:	47b0      	blx	r6
    21c2:	2800      	cmp	r0, #0
    21c4:	d00d      	beq.n	21e2 <spi_cmd_rsp+0x92>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    21c6:	2236      	movs	r2, #54	; 0x36
    21c8:	32ff      	adds	r2, #255	; 0xff
    21ca:	490d      	ldr	r1, [pc, #52]	; (2200 <spi_cmd_rsp+0xb0>)
    21cc:	480d      	ldr	r0, [pc, #52]	; (2204 <spi_cmd_rsp+0xb4>)
    21ce:	4b0e      	ldr	r3, [pc, #56]	; (2208 <spi_cmd_rsp+0xb8>)
    21d0:	4798      	blx	r3
    21d2:	480e      	ldr	r0, [pc, #56]	; (220c <spi_cmd_rsp+0xbc>)
    21d4:	4b0e      	ldr	r3, [pc, #56]	; (2210 <spi_cmd_rsp+0xc0>)
    21d6:	4798      	blx	r3
    21d8:	200d      	movs	r0, #13
    21da:	4b0e      	ldr	r3, [pc, #56]	; (2214 <spi_cmd_rsp+0xc4>)
    21dc:	4798      	blx	r3
			result = N_FAIL;
    21de:	2300      	movs	r3, #0
			goto _fail_;
    21e0:	e009      	b.n	21f6 <spi_cmd_rsp+0xa6>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    21e2:	782b      	ldrb	r3, [r5, #0]
    21e4:	2b00      	cmp	r3, #0
    21e6:	d005      	beq.n	21f4 <spi_cmd_rsp+0xa4>
    21e8:	3c01      	subs	r4, #1
    21ea:	b2e4      	uxtb	r4, r4
    21ec:	2c00      	cmp	r4, #0
    21ee:	d1e5      	bne.n	21bc <spi_cmd_rsp+0x6c>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    21f0:	2301      	movs	r3, #1
    21f2:	e000      	b.n	21f6 <spi_cmd_rsp+0xa6>
    21f4:	2301      	movs	r3, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
    21f6:	0018      	movs	r0, r3
    21f8:	b003      	add	sp, #12
    21fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21fc:	00002131 	.word	0x00002131
    2200:	00007580 	.word	0x00007580
    2204:	00006d30 	.word	0x00006d30
    2208:	00005bad 	.word	0x00005bad
    220c:	000075ac 	.word	0x000075ac
    2210:	00005ccd 	.word	0x00005ccd
    2214:	00005be1 	.word	0x00005be1

00002218 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2218:	b5f0      	push	{r4, r5, r6, r7, lr}
    221a:	465f      	mov	r7, fp
    221c:	4656      	mov	r6, sl
    221e:	464d      	mov	r5, r9
    2220:	4644      	mov	r4, r8
    2222:	b4f0      	push	{r4, r5, r6, r7}
    2224:	b083      	sub	sp, #12
    2226:	4682      	mov	sl, r0
    2228:	4689      	mov	r9, r1
    222a:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    222c:	2300      	movs	r3, #0
    222e:	4698      	mov	r8, r3
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2230:	4f3e      	ldr	r7, [pc, #248]	; (232c <spi_data_read+0x114>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    2232:	2380      	movs	r3, #128	; 0x80
    2234:	019b      	lsls	r3, r3, #6
    2236:	4599      	cmp	r9, r3
    2238:	d802      	bhi.n	2240 <spi_data_read+0x28>
			nbytes = sz;
    223a:	464b      	mov	r3, r9
    223c:	b21e      	sxth	r6, r3
    223e:	e001      	b.n	2244 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
    2240:	2680      	movs	r6, #128	; 0x80
    2242:	01b6      	lsls	r6, r6, #6

		/**
			Data Respnose header
		**/
		retry = 10;
    2244:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2246:	466b      	mov	r3, sp
    2248:	1cdd      	adds	r5, r3, #3
    224a:	2101      	movs	r1, #1
    224c:	0028      	movs	r0, r5
    224e:	47b8      	blx	r7
    2250:	2800      	cmp	r0, #0
    2252:	d00d      	beq.n	2270 <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2254:	2258      	movs	r2, #88	; 0x58
    2256:	32ff      	adds	r2, #255	; 0xff
    2258:	4935      	ldr	r1, [pc, #212]	; (2330 <spi_data_read+0x118>)
    225a:	4836      	ldr	r0, [pc, #216]	; (2334 <spi_data_read+0x11c>)
    225c:	4b36      	ldr	r3, [pc, #216]	; (2338 <spi_data_read+0x120>)
    225e:	4798      	blx	r3
    2260:	4836      	ldr	r0, [pc, #216]	; (233c <spi_data_read+0x124>)
    2262:	4b37      	ldr	r3, [pc, #220]	; (2340 <spi_data_read+0x128>)
    2264:	4798      	blx	r3
    2266:	200d      	movs	r0, #13
    2268:	4b36      	ldr	r3, [pc, #216]	; (2344 <spi_data_read+0x12c>)
    226a:	4798      	blx	r3
    226c:	2000      	movs	r0, #0
    226e:	e055      	b.n	231c <spi_data_read+0x104>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    2270:	782b      	ldrb	r3, [r5, #0]
    2272:	091b      	lsrs	r3, r3, #4
    2274:	2b0f      	cmp	r3, #15
    2276:	d004      	beq.n	2282 <spi_data_read+0x6a>
    2278:	3c01      	subs	r4, #1
    227a:	b224      	sxth	r4, r4
				break;
		} while (retry--);
    227c:	1c63      	adds	r3, r4, #1
    227e:	d1e4      	bne.n	224a <spi_data_read+0x32>
    2280:	e001      	b.n	2286 <spi_data_read+0x6e>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    2282:	2c00      	cmp	r4, #0
    2284:	dc0e      	bgt.n	22a4 <spi_data_read+0x8c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2286:	2264      	movs	r2, #100	; 0x64
    2288:	32ff      	adds	r2, #255	; 0xff
    228a:	4929      	ldr	r1, [pc, #164]	; (2330 <spi_data_read+0x118>)
    228c:	4829      	ldr	r0, [pc, #164]	; (2334 <spi_data_read+0x11c>)
    228e:	4c2a      	ldr	r4, [pc, #168]	; (2338 <spi_data_read+0x120>)
    2290:	47a0      	blx	r4
    2292:	466b      	mov	r3, sp
    2294:	78d9      	ldrb	r1, [r3, #3]
    2296:	482c      	ldr	r0, [pc, #176]	; (2348 <spi_data_read+0x130>)
    2298:	47a0      	blx	r4
    229a:	200d      	movs	r0, #13
    229c:	4b29      	ldr	r3, [pc, #164]	; (2344 <spi_data_read+0x12c>)
    229e:	4798      	blx	r3
			result = N_FAIL;
    22a0:	2000      	movs	r0, #0
			break;
    22a2:	e03b      	b.n	231c <spi_data_read+0x104>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    22a4:	b2b6      	uxth	r6, r6
    22a6:	4650      	mov	r0, sl
    22a8:	4440      	add	r0, r8
    22aa:	0031      	movs	r1, r6
    22ac:	4b1f      	ldr	r3, [pc, #124]	; (232c <spi_data_read+0x114>)
    22ae:	4798      	blx	r3
    22b0:	2800      	cmp	r0, #0
    22b2:	d00d      	beq.n	22d0 <spi_data_read+0xb8>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    22b4:	22b6      	movs	r2, #182	; 0xb6
    22b6:	0052      	lsls	r2, r2, #1
    22b8:	491d      	ldr	r1, [pc, #116]	; (2330 <spi_data_read+0x118>)
    22ba:	481e      	ldr	r0, [pc, #120]	; (2334 <spi_data_read+0x11c>)
    22bc:	4b1e      	ldr	r3, [pc, #120]	; (2338 <spi_data_read+0x120>)
    22be:	4798      	blx	r3
    22c0:	4822      	ldr	r0, [pc, #136]	; (234c <spi_data_read+0x134>)
    22c2:	4b1f      	ldr	r3, [pc, #124]	; (2340 <spi_data_read+0x128>)
    22c4:	4798      	blx	r3
    22c6:	200d      	movs	r0, #13
    22c8:	4b1e      	ldr	r3, [pc, #120]	; (2344 <spi_data_read+0x12c>)
    22ca:	4798      	blx	r3
			result = N_FAIL;
    22cc:	2000      	movs	r0, #0
			break;
    22ce:	e025      	b.n	231c <spi_data_read+0x104>
		}
		if(!clockless)
    22d0:	465b      	mov	r3, fp
    22d2:	2b00      	cmp	r3, #0
    22d4:	d117      	bne.n	2306 <spi_data_read+0xee>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    22d6:	4b1e      	ldr	r3, [pc, #120]	; (2350 <spi_data_read+0x138>)
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2b00      	cmp	r3, #0
    22dc:	d113      	bne.n	2306 <spi_data_read+0xee>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    22de:	2102      	movs	r1, #2
    22e0:	a801      	add	r0, sp, #4
    22e2:	4b12      	ldr	r3, [pc, #72]	; (232c <spi_data_read+0x114>)
    22e4:	4798      	blx	r3
    22e6:	2800      	cmp	r0, #0
    22e8:	d00d      	beq.n	2306 <spi_data_read+0xee>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    22ea:	2278      	movs	r2, #120	; 0x78
    22ec:	32ff      	adds	r2, #255	; 0xff
    22ee:	4910      	ldr	r1, [pc, #64]	; (2330 <spi_data_read+0x118>)
    22f0:	4810      	ldr	r0, [pc, #64]	; (2334 <spi_data_read+0x11c>)
    22f2:	4b11      	ldr	r3, [pc, #68]	; (2338 <spi_data_read+0x120>)
    22f4:	4798      	blx	r3
    22f6:	4817      	ldr	r0, [pc, #92]	; (2354 <spi_data_read+0x13c>)
    22f8:	4b11      	ldr	r3, [pc, #68]	; (2340 <spi_data_read+0x128>)
    22fa:	4798      	blx	r3
    22fc:	200d      	movs	r0, #13
    22fe:	4b11      	ldr	r3, [pc, #68]	; (2344 <spi_data_read+0x12c>)
    2300:	4798      	blx	r3
					result = N_FAIL;
    2302:	2000      	movs	r0, #0
					break;
    2304:	e00a      	b.n	231c <spi_data_read+0x104>
				}
			}
		}
		ix += nbytes;
    2306:	4643      	mov	r3, r8
    2308:	18f3      	adds	r3, r6, r3
    230a:	b21b      	sxth	r3, r3
    230c:	4698      	mov	r8, r3
		sz -= nbytes;
    230e:	464b      	mov	r3, r9
    2310:	1b9e      	subs	r6, r3, r6
    2312:	b2b3      	uxth	r3, r6
    2314:	4699      	mov	r9, r3

	} while (sz);
    2316:	2b00      	cmp	r3, #0
    2318:	d18b      	bne.n	2232 <spi_data_read+0x1a>
    231a:	2001      	movs	r0, #1

	return result;
}
    231c:	b003      	add	sp, #12
    231e:	bc3c      	pop	{r2, r3, r4, r5}
    2320:	4690      	mov	r8, r2
    2322:	4699      	mov	r9, r3
    2324:	46a2      	mov	sl, r4
    2326:	46ab      	mov	fp, r5
    2328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	00002131 	.word	0x00002131
    2330:	0000759c 	.word	0x0000759c
    2334:	00006d30 	.word	0x00006d30
    2338:	00005bad 	.word	0x00005bad
    233c:	000075e0 	.word	0x000075e0
    2340:	00005ccd 	.word	0x00005ccd
    2344:	00005be1 	.word	0x00005be1
    2348:	00007614 	.word	0x00007614
    234c:	00007644 	.word	0x00007644
    2350:	200000cc 	.word	0x200000cc
    2354:	00007674 	.word	0x00007674

00002358 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2358:	b500      	push	{lr}
    235a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    235c:	ab01      	add	r3, sp, #4
    235e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2360:	2200      	movs	r2, #0
    2362:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2364:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2366:	0019      	movs	r1, r3
    2368:	2003      	movs	r0, #3
    236a:	4b02      	ldr	r3, [pc, #8]	; (2374 <nmi_spi_write+0x1c>)
    236c:	4798      	blx	r3
}
    236e:	b005      	add	sp, #20
    2370:	bd00      	pop	{pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	00000829 	.word	0x00000829

00002378 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	b084      	sub	sp, #16
    237c:	ac08      	add	r4, sp, #32
    237e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2380:	ac01      	add	r4, sp, #4
    2382:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2384:	303f      	adds	r0, #63	; 0x3f
    2386:	b2c4      	uxtb	r4, r0
    2388:	2c0e      	cmp	r4, #14
    238a:	d900      	bls.n	238e <spi_cmd+0x16>
    238c:	e092      	b.n	24b4 <spi_cmd+0x13c>
    238e:	00a0      	lsls	r0, r4, #2
    2390:	4c50      	ldr	r4, [pc, #320]	; (24d4 <spi_cmd+0x15c>)
    2392:	5820      	ldr	r0, [r4, r0]
    2394:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2396:	ab01      	add	r3, sp, #4
    2398:	0c0a      	lsrs	r2, r1, #16
    239a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    239c:	0a0a      	lsrs	r2, r1, #8
    239e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    23a0:	70d9      	strb	r1, [r3, #3]
		len = 5;
    23a2:	2105      	movs	r1, #5
		break;
    23a4:	e08e      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    23a6:	0a0b      	lsrs	r3, r1, #8
    23a8:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    23aa:	2d00      	cmp	r5, #0
    23ac:	d102      	bne.n	23b4 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    23ae:	aa01      	add	r2, sp, #4
    23b0:	7053      	strb	r3, [r2, #1]
    23b2:	e004      	b.n	23be <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    23b4:	2280      	movs	r2, #128	; 0x80
    23b6:	4252      	negs	r2, r2
    23b8:	4313      	orrs	r3, r2
    23ba:	aa01      	add	r2, sp, #4
    23bc:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    23be:	ab01      	add	r3, sp, #4
    23c0:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    23c2:	2200      	movs	r2, #0
    23c4:	70da      	strb	r2, [r3, #3]
		len = 5;
    23c6:	2105      	movs	r1, #5
		break;
    23c8:	e07c      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    23ca:	ab01      	add	r3, sp, #4
    23cc:	2200      	movs	r2, #0
    23ce:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    23d0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    23d2:	70da      	strb	r2, [r3, #3]
		len = 5;
    23d4:	2105      	movs	r1, #5
		break;
    23d6:	e075      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    23d8:	ab01      	add	r3, sp, #4
    23da:	2200      	movs	r2, #0
    23dc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    23de:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    23e0:	70da      	strb	r2, [r3, #3]
		len = 5;
    23e2:	2105      	movs	r1, #5
		break;
    23e4:	e06e      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    23e6:	ab01      	add	r3, sp, #4
    23e8:	22ff      	movs	r2, #255	; 0xff
    23ea:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    23ec:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    23ee:	70da      	strb	r2, [r3, #3]
		len = 5;
    23f0:	2105      	movs	r1, #5
		break;
    23f2:	e067      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    23f4:	aa01      	add	r2, sp, #4
    23f6:	0c08      	lsrs	r0, r1, #16
    23f8:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    23fa:	0a08      	lsrs	r0, r1, #8
    23fc:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    23fe:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2400:	0a19      	lsrs	r1, r3, #8
    2402:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2404:	7153      	strb	r3, [r2, #5]
		len = 7;
    2406:	2107      	movs	r1, #7
		break;
    2408:	e05c      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    240a:	aa01      	add	r2, sp, #4
    240c:	0c08      	lsrs	r0, r1, #16
    240e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2410:	0a08      	lsrs	r0, r1, #8
    2412:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2414:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2416:	0c19      	lsrs	r1, r3, #16
    2418:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    241a:	0a19      	lsrs	r1, r3, #8
    241c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    241e:	7193      	strb	r3, [r2, #6]
		len = 8;
    2420:	2108      	movs	r1, #8
		break;
    2422:	e04f      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2424:	0a0b      	lsrs	r3, r1, #8
    2426:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2428:	2d00      	cmp	r5, #0
    242a:	d102      	bne.n	2432 <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    242c:	a801      	add	r0, sp, #4
    242e:	7043      	strb	r3, [r0, #1]
    2430:	e004      	b.n	243c <spi_cmd+0xc4>
		if(clockless)  bc[1] |= (1 << 7);
    2432:	2080      	movs	r0, #128	; 0x80
    2434:	4240      	negs	r0, r0
    2436:	4303      	orrs	r3, r0
    2438:	a801      	add	r0, sp, #4
    243a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    243c:	ab01      	add	r3, sp, #4
    243e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2440:	0e11      	lsrs	r1, r2, #24
    2442:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2444:	0c11      	lsrs	r1, r2, #16
    2446:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2448:	0a11      	lsrs	r1, r2, #8
    244a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    244c:	719a      	strb	r2, [r3, #6]
		len = 8;
    244e:	2108      	movs	r1, #8
		break;
    2450:	e038      	b.n	24c4 <spi_cmd+0x14c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2452:	ab01      	add	r3, sp, #4
    2454:	0c08      	lsrs	r0, r1, #16
    2456:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2458:	0a08      	lsrs	r0, r1, #8
    245a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    245c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    245e:	0e11      	lsrs	r1, r2, #24
    2460:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2462:	0c11      	lsrs	r1, r2, #16
    2464:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2466:	0a11      	lsrs	r1, r2, #8
    2468:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    246a:	71da      	strb	r2, [r3, #7]
		len = 9;
    246c:	2109      	movs	r1, #9
		break;
    246e:	e029      	b.n	24c4 <spi_cmd+0x14c>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    2470:	005b      	lsls	r3, r3, #1
    2472:	7810      	ldrb	r0, [r2, #0]
    2474:	4043      	eors	r3, r0
    2476:	5ce3      	ldrb	r3, [r4, r3]
    2478:	3201      	adds	r2, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    247a:	4295      	cmp	r5, r2
    247c:	d1f8      	bne.n	2470 <spi_cmd+0xf8>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    247e:	005b      	lsls	r3, r3, #1
    2480:	aa01      	add	r2, sp, #4
    2482:	5593      	strb	r3, [r2, r6]
    2484:	e001      	b.n	248a <spi_cmd+0x112>
		else
			len-=1;
    2486:	3901      	subs	r1, #1
    2488:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    248a:	b289      	uxth	r1, r1
    248c:	a801      	add	r0, sp, #4
    248e:	4b12      	ldr	r3, [pc, #72]	; (24d8 <spi_cmd+0x160>)
    2490:	4798      	blx	r3
    2492:	2301      	movs	r3, #1
    2494:	2800      	cmp	r0, #0
    2496:	d01a      	beq.n	24ce <spi_cmd+0x156>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2498:	2284      	movs	r2, #132	; 0x84
    249a:	0052      	lsls	r2, r2, #1
    249c:	490f      	ldr	r1, [pc, #60]	; (24dc <spi_cmd+0x164>)
    249e:	4810      	ldr	r0, [pc, #64]	; (24e0 <spi_cmd+0x168>)
    24a0:	4b10      	ldr	r3, [pc, #64]	; (24e4 <spi_cmd+0x16c>)
    24a2:	4798      	blx	r3
    24a4:	4810      	ldr	r0, [pc, #64]	; (24e8 <spi_cmd+0x170>)
    24a6:	4b11      	ldr	r3, [pc, #68]	; (24ec <spi_cmd+0x174>)
    24a8:	4798      	blx	r3
    24aa:	200d      	movs	r0, #13
    24ac:	4b10      	ldr	r3, [pc, #64]	; (24f0 <spi_cmd+0x178>)
    24ae:	4798      	blx	r3
			result = N_FAIL;
    24b0:	2300      	movs	r3, #0
    24b2:	e00c      	b.n	24ce <spi_cmd+0x156>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    24b4:	2300      	movs	r3, #0
    24b6:	e00a      	b.n	24ce <spi_cmd+0x156>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    24b8:	1e4e      	subs	r6, r1, #1
    24ba:	aa01      	add	r2, sp, #4
    24bc:	1995      	adds	r5, r2, r6
    24be:	237f      	movs	r3, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    24c0:	4c0c      	ldr	r4, [pc, #48]	; (24f4 <spi_cmd+0x17c>)
    24c2:	e7d5      	b.n	2470 <spi_cmd+0xf8>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    24c4:	4b0c      	ldr	r3, [pc, #48]	; (24f8 <spi_cmd+0x180>)
    24c6:	781b      	ldrb	r3, [r3, #0]
    24c8:	2b00      	cmp	r3, #0
    24ca:	d1dc      	bne.n	2486 <spi_cmd+0x10e>
    24cc:	e7f4      	b.n	24b8 <spi_cmd+0x140>
			result = N_FAIL;
		}
	}

	return result;
}
    24ce:	0018      	movs	r0, r3
    24d0:	b004      	add	sp, #16
    24d2:	bd70      	pop	{r4, r5, r6, pc}
    24d4:	0000751c 	.word	0x0000751c
    24d8:	00002359 	.word	0x00002359
    24dc:	00007568 	.word	0x00007568
    24e0:	00006d30 	.word	0x00006d30
    24e4:	00005bad 	.word	0x00005bad
    24e8:	000076a8 	.word	0x000076a8
    24ec:	00005ccd 	.word	0x00005ccd
    24f0:	00005be1 	.word	0x00005be1
    24f4:	00007a78 	.word	0x00007a78
    24f8:	200000cc 	.word	0x200000cc

000024fc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    24fc:	b570      	push	{r4, r5, r6, lr}
    24fe:	b082      	sub	sp, #8
    2500:	0004      	movs	r4, r0
    2502:	000a      	movs	r2, r1
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    2504:	2830      	cmp	r0, #48	; 0x30
    2506:	d902      	bls.n	250e <spi_write_reg+0x12>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    2508:	2300      	movs	r3, #0
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    250a:	25c9      	movs	r5, #201	; 0xc9
    250c:	e001      	b.n	2512 <spi_write_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
    250e:	2301      	movs	r3, #1
	if (addr <= 0x30)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    2510:	25c3      	movs	r5, #195	; 0xc3
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2512:	9300      	str	r3, [sp, #0]
    2514:	2304      	movs	r3, #4
    2516:	0021      	movs	r1, r4
    2518:	0028      	movs	r0, r5
    251a:	4e17      	ldr	r6, [pc, #92]	; (2578 <spi_write_reg+0x7c>)
    251c:	47b0      	blx	r6
	if (result != N_OK) {
    251e:	2801      	cmp	r0, #1
    2520:	d00d      	beq.n	253e <spi_write_reg+0x42>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2522:	22ec      	movs	r2, #236	; 0xec
    2524:	32ff      	adds	r2, #255	; 0xff
    2526:	4915      	ldr	r1, [pc, #84]	; (257c <spi_write_reg+0x80>)
    2528:	4815      	ldr	r0, [pc, #84]	; (2580 <spi_write_reg+0x84>)
    252a:	4d16      	ldr	r5, [pc, #88]	; (2584 <spi_write_reg+0x88>)
    252c:	47a8      	blx	r5
    252e:	0021      	movs	r1, r4
    2530:	4815      	ldr	r0, [pc, #84]	; (2588 <spi_write_reg+0x8c>)
    2532:	47a8      	blx	r5
    2534:	200d      	movs	r0, #13
    2536:	4b15      	ldr	r3, [pc, #84]	; (258c <spi_write_reg+0x90>)
    2538:	4798      	blx	r3
		return N_FAIL;
    253a:	2000      	movs	r0, #0
    253c:	e01a      	b.n	2574 <spi_write_reg+0x78>
	}

	result = spi_cmd_rsp(cmd);
    253e:	0028      	movs	r0, r5
    2540:	4b13      	ldr	r3, [pc, #76]	; (2590 <spi_write_reg+0x94>)
    2542:	4798      	blx	r3
    2544:	0003      	movs	r3, r0
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	return N_OK;
    2546:	2001      	movs	r0, #1
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
    2548:	2b01      	cmp	r3, #1
    254a:	d013      	beq.n	2574 <spi_write_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    254c:	22f2      	movs	r2, #242	; 0xf2
    254e:	32ff      	adds	r2, #255	; 0xff
    2550:	490a      	ldr	r1, [pc, #40]	; (257c <spi_write_reg+0x80>)
    2552:	480b      	ldr	r0, [pc, #44]	; (2580 <spi_write_reg+0x84>)
    2554:	4d0b      	ldr	r5, [pc, #44]	; (2584 <spi_write_reg+0x88>)
    2556:	47a8      	blx	r5
    2558:	0021      	movs	r1, r4
    255a:	480e      	ldr	r0, [pc, #56]	; (2594 <spi_write_reg+0x98>)
    255c:	47a8      	blx	r5
    255e:	200d      	movs	r0, #13
    2560:	4b0a      	ldr	r3, [pc, #40]	; (258c <spi_write_reg+0x90>)
    2562:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2564:	2300      	movs	r3, #0
    2566:	9300      	str	r3, [sp, #0]
    2568:	2200      	movs	r2, #0
    256a:	2100      	movs	r1, #0
    256c:	20cf      	movs	r0, #207	; 0xcf
    256e:	4c02      	ldr	r4, [pc, #8]	; (2578 <spi_write_reg+0x7c>)
    2570:	47a0      	blx	r4
		return N_FAIL;
    2572:	2000      	movs	r0, #0
	}

	return result;

#endif
}
    2574:	b002      	add	sp, #8
    2576:	bd70      	pop	{r4, r5, r6, pc}
    2578:	00002379 	.word	0x00002379
    257c:	00007558 	.word	0x00007558
    2580:	00006d30 	.word	0x00006d30
    2584:	00005bad 	.word	0x00005bad
    2588:	000076d4 	.word	0x000076d4
    258c:	00005be1 	.word	0x00005be1
    2590:	00002151 	.word	0x00002151
    2594:	00007700 	.word	0x00007700

00002598 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2598:	b5f0      	push	{r4, r5, r6, r7, lr}
    259a:	b087      	sub	sp, #28
    259c:	1e04      	subs	r4, r0, #0
    259e:	9103      	str	r1, [sp, #12]
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    25a0:	2cff      	cmp	r4, #255	; 0xff
    25a2:	d902      	bls.n	25aa <spi_read_reg+0x12>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    25a4:	2600      	movs	r6, #0
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    25a6:	25ca      	movs	r5, #202	; 0xca
    25a8:	e001      	b.n	25ae <spi_read_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
    25aa:	2601      	movs	r6, #1
	if (addr <= 0xff)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    25ac:	25c4      	movs	r5, #196	; 0xc4
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    25ae:	9600      	str	r6, [sp, #0]
    25b0:	2304      	movs	r3, #4
    25b2:	2200      	movs	r2, #0
    25b4:	0021      	movs	r1, r4
    25b6:	0028      	movs	r0, r5
    25b8:	4f2a      	ldr	r7, [pc, #168]	; (2664 <spi_read_reg+0xcc>)
    25ba:	47b8      	blx	r7
	if (result != N_OK) {
    25bc:	2801      	cmp	r0, #1
    25be:	d00c      	beq.n	25da <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    25c0:	4a29      	ldr	r2, [pc, #164]	; (2668 <spi_read_reg+0xd0>)
    25c2:	492a      	ldr	r1, [pc, #168]	; (266c <spi_read_reg+0xd4>)
    25c4:	482a      	ldr	r0, [pc, #168]	; (2670 <spi_read_reg+0xd8>)
    25c6:	4d2b      	ldr	r5, [pc, #172]	; (2674 <spi_read_reg+0xdc>)
    25c8:	47a8      	blx	r5
    25ca:	0021      	movs	r1, r4
    25cc:	482a      	ldr	r0, [pc, #168]	; (2678 <spi_read_reg+0xe0>)
    25ce:	47a8      	blx	r5
    25d0:	200d      	movs	r0, #13
    25d2:	4b2a      	ldr	r3, [pc, #168]	; (267c <spi_read_reg+0xe4>)
    25d4:	4798      	blx	r3
		return N_FAIL;
    25d6:	2000      	movs	r0, #0
    25d8:	e041      	b.n	265e <spi_read_reg+0xc6>
	}

	result = spi_cmd_rsp(cmd);
    25da:	0028      	movs	r0, r5
    25dc:	4b28      	ldr	r3, [pc, #160]	; (2680 <spi_read_reg+0xe8>)
    25de:	4798      	blx	r3
	if (result != N_OK) {
    25e0:	2801      	cmp	r0, #1
    25e2:	d013      	beq.n	260c <spi_read_reg+0x74>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    25e4:	4a27      	ldr	r2, [pc, #156]	; (2684 <spi_read_reg+0xec>)
    25e6:	4921      	ldr	r1, [pc, #132]	; (266c <spi_read_reg+0xd4>)
    25e8:	4821      	ldr	r0, [pc, #132]	; (2670 <spi_read_reg+0xd8>)
    25ea:	4d22      	ldr	r5, [pc, #136]	; (2674 <spi_read_reg+0xdc>)
    25ec:	47a8      	blx	r5
    25ee:	0021      	movs	r1, r4
    25f0:	4825      	ldr	r0, [pc, #148]	; (2688 <spi_read_reg+0xf0>)
    25f2:	47a8      	blx	r5
    25f4:	200d      	movs	r0, #13
    25f6:	4b21      	ldr	r3, [pc, #132]	; (267c <spi_read_reg+0xe4>)
    25f8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    25fa:	2300      	movs	r3, #0
    25fc:	9300      	str	r3, [sp, #0]
    25fe:	2200      	movs	r2, #0
    2600:	2100      	movs	r1, #0
    2602:	20cf      	movs	r0, #207	; 0xcf
    2604:	4c17      	ldr	r4, [pc, #92]	; (2664 <spi_read_reg+0xcc>)
    2606:	47a0      	blx	r4
		return N_FAIL;
    2608:	2000      	movs	r0, #0
    260a:	e028      	b.n	265e <spi_read_reg+0xc6>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    260c:	0032      	movs	r2, r6
    260e:	2104      	movs	r1, #4
    2610:	a805      	add	r0, sp, #20
    2612:	4b1e      	ldr	r3, [pc, #120]	; (268c <spi_read_reg+0xf4>)
    2614:	4798      	blx	r3
	if (result != N_OK) {
    2616:	2801      	cmp	r0, #1
    2618:	d013      	beq.n	2642 <spi_read_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    261a:	4a1d      	ldr	r2, [pc, #116]	; (2690 <spi_read_reg+0xf8>)
    261c:	4913      	ldr	r1, [pc, #76]	; (266c <spi_read_reg+0xd4>)
    261e:	4814      	ldr	r0, [pc, #80]	; (2670 <spi_read_reg+0xd8>)
    2620:	4b14      	ldr	r3, [pc, #80]	; (2674 <spi_read_reg+0xdc>)
    2622:	4798      	blx	r3
    2624:	481b      	ldr	r0, [pc, #108]	; (2694 <spi_read_reg+0xfc>)
    2626:	4b1c      	ldr	r3, [pc, #112]	; (2698 <spi_read_reg+0x100>)
    2628:	4798      	blx	r3
    262a:	200d      	movs	r0, #13
    262c:	4b13      	ldr	r3, [pc, #76]	; (267c <spi_read_reg+0xe4>)
    262e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2630:	2300      	movs	r3, #0
    2632:	9300      	str	r3, [sp, #0]
    2634:	2200      	movs	r2, #0
    2636:	2100      	movs	r1, #0
    2638:	20cf      	movs	r0, #207	; 0xcf
    263a:	4c0a      	ldr	r4, [pc, #40]	; (2664 <spi_read_reg+0xcc>)
    263c:	47a0      	blx	r4
		return N_FAIL;
    263e:	2000      	movs	r0, #0
    2640:	e00d      	b.n	265e <spi_read_reg+0xc6>
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    2642:	aa05      	add	r2, sp, #20
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2644:	7853      	ldrb	r3, [r2, #1]
    2646:	0219      	lsls	r1, r3, #8
    2648:	7893      	ldrb	r3, [r2, #2]
    264a:	041b      	lsls	r3, r3, #16
    264c:	430b      	orrs	r3, r1
    264e:	7811      	ldrb	r1, [r2, #0]
    2650:	430b      	orrs	r3, r1
    2652:	78d2      	ldrb	r2, [r2, #3]
    2654:	0612      	lsls	r2, r2, #24
    2656:	4313      	orrs	r3, r2
    2658:	9a03      	ldr	r2, [sp, #12]
    265a:	6013      	str	r3, [r2, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    265c:	2001      	movs	r0, #1
}
    265e:	b007      	add	sp, #28
    2660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	00002379 	.word	0x00002379
    2668:	00000245 	.word	0x00000245
    266c:	0000758c 	.word	0x0000758c
    2670:	00006d30 	.word	0x00006d30
    2674:	00005bad 	.word	0x00005bad
    2678:	00007738 	.word	0x00007738
    267c:	00005be1 	.word	0x00005be1
    2680:	00002151 	.word	0x00002151
    2684:	0000024b 	.word	0x0000024b
    2688:	00007764 	.word	0x00007764
    268c:	00002219 	.word	0x00002219
    2690:	00000253 	.word	0x00000253
    2694:	00007798 	.word	0x00007798
    2698:	00005ccd 	.word	0x00005ccd

0000269c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    269c:	2200      	movs	r2, #0
    269e:	4b02      	ldr	r3, [pc, #8]	; (26a8 <nm_spi_deinit+0xc>)
    26a0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    26a2:	2000      	movs	r0, #0
    26a4:	4770      	bx	lr
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	200000cc 	.word	0x200000cc

000026ac <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    26ac:	b500      	push	{lr}
    26ae:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    26b0:	a901      	add	r1, sp, #4
    26b2:	4b02      	ldr	r3, [pc, #8]	; (26bc <nm_spi_read_reg+0x10>)
    26b4:	4798      	blx	r3

	return u32Val;
}
    26b6:	9801      	ldr	r0, [sp, #4]
    26b8:	b003      	add	sp, #12
    26ba:	bd00      	pop	{pc}
    26bc:	00002599 	.word	0x00002599

000026c0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    26c0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    26c2:	4b04      	ldr	r3, [pc, #16]	; (26d4 <nm_spi_read_reg_with_ret+0x14>)
    26c4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    26c6:	2300      	movs	r3, #0
    26c8:	2801      	cmp	r0, #1
    26ca:	d000      	beq.n	26ce <nm_spi_read_reg_with_ret+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    26cc:	3b06      	subs	r3, #6

	return s8Ret;
}
    26ce:	0018      	movs	r0, r3
    26d0:	bd10      	pop	{r4, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	00002599 	.word	0x00002599

000026d8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    26d8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    26da:	4b04      	ldr	r3, [pc, #16]	; (26ec <nm_spi_write_reg+0x14>)
    26dc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    26de:	2300      	movs	r3, #0
    26e0:	2801      	cmp	r0, #1
    26e2:	d000      	beq.n	26e6 <nm_spi_write_reg+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    26e4:	3b06      	subs	r3, #6

	return s8Ret;
}
    26e6:	0018      	movs	r0, r3
    26e8:	bd10      	pop	{r4, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	000024fd 	.word	0x000024fd

000026f0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    26f0:	b510      	push	{r4, lr}
    26f2:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg =0;
    26f4:	2300      	movs	r3, #0
    26f6:	9300      	str	r3, [sp, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    26f8:	4a36      	ldr	r2, [pc, #216]	; (27d4 <nm_spi_init+0xe4>)
    26fa:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    26fc:	4669      	mov	r1, sp
    26fe:	4836      	ldr	r0, [pc, #216]	; (27d8 <nm_spi_init+0xe8>)
    2700:	4b36      	ldr	r3, [pc, #216]	; (27dc <nm_spi_init+0xec>)
    2702:	4798      	blx	r3
    2704:	2800      	cmp	r0, #0
    2706:	d120      	bne.n	274a <nm_spi_init+0x5a>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    2708:	2201      	movs	r2, #1
    270a:	4b32      	ldr	r3, [pc, #200]	; (27d4 <nm_spi_init+0xe4>)
    270c:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    270e:	4a34      	ldr	r2, [pc, #208]	; (27e0 <nm_spi_init+0xf0>)
    2710:	4934      	ldr	r1, [pc, #208]	; (27e4 <nm_spi_init+0xf4>)
    2712:	4835      	ldr	r0, [pc, #212]	; (27e8 <nm_spi_init+0xf8>)
    2714:	4b35      	ldr	r3, [pc, #212]	; (27ec <nm_spi_init+0xfc>)
    2716:	4798      	blx	r3
    2718:	4835      	ldr	r0, [pc, #212]	; (27f0 <nm_spi_init+0x100>)
    271a:	4b36      	ldr	r3, [pc, #216]	; (27f4 <nm_spi_init+0x104>)
    271c:	4798      	blx	r3
    271e:	200d      	movs	r0, #13
    2720:	4b35      	ldr	r3, [pc, #212]	; (27f8 <nm_spi_init+0x108>)
    2722:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2724:	4669      	mov	r1, sp
    2726:	482c      	ldr	r0, [pc, #176]	; (27d8 <nm_spi_init+0xe8>)
    2728:	4b2c      	ldr	r3, [pc, #176]	; (27dc <nm_spi_init+0xec>)
    272a:	4798      	blx	r3
    272c:	1e04      	subs	r4, r0, #0
    272e:	d10c      	bne.n	274a <nm_spi_init+0x5a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2730:	22b2      	movs	r2, #178	; 0xb2
    2732:	0092      	lsls	r2, r2, #2
    2734:	492b      	ldr	r1, [pc, #172]	; (27e4 <nm_spi_init+0xf4>)
    2736:	482c      	ldr	r0, [pc, #176]	; (27e8 <nm_spi_init+0xf8>)
    2738:	4b2c      	ldr	r3, [pc, #176]	; (27ec <nm_spi_init+0xfc>)
    273a:	4798      	blx	r3
    273c:	482f      	ldr	r0, [pc, #188]	; (27fc <nm_spi_init+0x10c>)
    273e:	4b2d      	ldr	r3, [pc, #180]	; (27f4 <nm_spi_init+0x104>)
    2740:	4798      	blx	r3
    2742:	200d      	movs	r0, #13
    2744:	4b2c      	ldr	r3, [pc, #176]	; (27f8 <nm_spi_init+0x108>)
    2746:	4798      	blx	r3
			return 0;
    2748:	e040      	b.n	27cc <nm_spi_init+0xdc>
		}
	}
	if(gu8Crc_off == 0)
    274a:	4b22      	ldr	r3, [pc, #136]	; (27d4 <nm_spi_init+0xe4>)
    274c:	781b      	ldrb	r3, [r3, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d119      	bne.n	2786 <nm_spi_init+0x96>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    2752:	337c      	adds	r3, #124	; 0x7c
    2754:	9900      	ldr	r1, [sp, #0]
    2756:	4399      	bics	r1, r3
    2758:	3b2c      	subs	r3, #44	; 0x2c
    275a:	4319      	orrs	r1, r3
    275c:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    275e:	481e      	ldr	r0, [pc, #120]	; (27d8 <nm_spi_init+0xe8>)
    2760:	4b27      	ldr	r3, [pc, #156]	; (2800 <nm_spi_init+0x110>)
    2762:	4798      	blx	r3
    2764:	1e04      	subs	r4, r0, #0
    2766:	d10b      	bne.n	2780 <nm_spi_init+0x90>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2768:	4a26      	ldr	r2, [pc, #152]	; (2804 <nm_spi_init+0x114>)
    276a:	491e      	ldr	r1, [pc, #120]	; (27e4 <nm_spi_init+0xf4>)
    276c:	481e      	ldr	r0, [pc, #120]	; (27e8 <nm_spi_init+0xf8>)
    276e:	4b1f      	ldr	r3, [pc, #124]	; (27ec <nm_spi_init+0xfc>)
    2770:	4798      	blx	r3
    2772:	4825      	ldr	r0, [pc, #148]	; (2808 <nm_spi_init+0x118>)
    2774:	4b1f      	ldr	r3, [pc, #124]	; (27f4 <nm_spi_init+0x104>)
    2776:	4798      	blx	r3
    2778:	200d      	movs	r0, #13
    277a:	4b1f      	ldr	r3, [pc, #124]	; (27f8 <nm_spi_init+0x108>)
    277c:	4798      	blx	r3
			return 0;
    277e:	e025      	b.n	27cc <nm_spi_init+0xdc>
		}
		gu8Crc_off = 1;
    2780:	2201      	movs	r2, #1
    2782:	4b14      	ldr	r3, [pc, #80]	; (27d4 <nm_spi_init+0xe4>)
    2784:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    2786:	a901      	add	r1, sp, #4
    2788:	2080      	movs	r0, #128	; 0x80
    278a:	0140      	lsls	r0, r0, #5
    278c:	4b13      	ldr	r3, [pc, #76]	; (27dc <nm_spi_init+0xec>)
    278e:	4798      	blx	r3
    2790:	2800      	cmp	r0, #0
    2792:	d10e      	bne.n	27b2 <nm_spi_init+0xc2>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2794:	22b7      	movs	r2, #183	; 0xb7
    2796:	0092      	lsls	r2, r2, #2
    2798:	4912      	ldr	r1, [pc, #72]	; (27e4 <nm_spi_init+0xf4>)
    279a:	4813      	ldr	r0, [pc, #76]	; (27e8 <nm_spi_init+0xf8>)
    279c:	4b13      	ldr	r3, [pc, #76]	; (27ec <nm_spi_init+0xfc>)
    279e:	4798      	blx	r3
    27a0:	481a      	ldr	r0, [pc, #104]	; (280c <nm_spi_init+0x11c>)
    27a2:	4b14      	ldr	r3, [pc, #80]	; (27f4 <nm_spi_init+0x104>)
    27a4:	4798      	blx	r3
    27a6:	200d      	movs	r0, #13
    27a8:	4b13      	ldr	r3, [pc, #76]	; (27f8 <nm_spi_init+0x108>)
    27aa:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    27ac:	2406      	movs	r4, #6
    27ae:	4264      	negs	r4, r4
    27b0:	e00c      	b.n	27cc <nm_spi_init+0xdc>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    27b2:	4c09      	ldr	r4, [pc, #36]	; (27d8 <nm_spi_init+0xe8>)
    27b4:	0020      	movs	r0, r4
    27b6:	4b16      	ldr	r3, [pc, #88]	; (2810 <nm_spi_init+0x120>)
    27b8:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    27ba:	2370      	movs	r3, #112	; 0x70
    27bc:	0001      	movs	r1, r0
    27be:	4399      	bics	r1, r3
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    27c0:	3b20      	subs	r3, #32
    27c2:	4319      	orrs	r1, r3
    27c4:	0020      	movs	r0, r4
    27c6:	4b13      	ldr	r3, [pc, #76]	; (2814 <nm_spi_init+0x124>)
    27c8:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    27ca:	2400      	movs	r4, #0
}
    27cc:	0020      	movs	r0, r4
    27ce:	b002      	add	sp, #8
    27d0:	bd10      	pop	{r4, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	200000cc 	.word	0x200000cc
    27d8:	0000e824 	.word	0x0000e824
    27dc:	00002599 	.word	0x00002599
    27e0:	000002c5 	.word	0x000002c5
    27e4:	00007a50 	.word	0x00007a50
    27e8:	00006d30 	.word	0x00006d30
    27ec:	00005bad 	.word	0x00005bad
    27f0:	000077b8 	.word	0x000077b8
    27f4:	00005ccd 	.word	0x00005ccd
    27f8:	00005be1 	.word	0x00005be1
    27fc:	00007808 	.word	0x00007808
    2800:	000024fd 	.word	0x000024fd
    2804:	000002d2 	.word	0x000002d2
    2808:	00007834 	.word	0x00007834
    280c:	00007868 	.word	0x00007868
    2810:	000026ad 	.word	0x000026ad
    2814:	000026d9 	.word	0x000026d9

00002818 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2818:	b5f0      	push	{r4, r5, r6, r7, lr}
    281a:	b083      	sub	sp, #12
    281c:	0004      	movs	r4, r0
    281e:	000e      	movs	r6, r1
    2820:	0015      	movs	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2822:	2300      	movs	r3, #0
    2824:	9300      	str	r3, [sp, #0]
    2826:	0013      	movs	r3, r2
    2828:	2200      	movs	r2, #0
    282a:	0001      	movs	r1, r0
    282c:	20c8      	movs	r0, #200	; 0xc8
    282e:	4f24      	ldr	r7, [pc, #144]	; (28c0 <nm_spi_read_block+0xa8>)
    2830:	47b8      	blx	r7
	if (result != N_OK) {
    2832:	2801      	cmp	r0, #1
    2834:	d00c      	beq.n	2850 <nm_spi_read_block+0x38>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2836:	229d      	movs	r2, #157	; 0x9d
    2838:	0092      	lsls	r2, r2, #2
    283a:	4922      	ldr	r1, [pc, #136]	; (28c4 <nm_spi_read_block+0xac>)
    283c:	4822      	ldr	r0, [pc, #136]	; (28c8 <nm_spi_read_block+0xb0>)
    283e:	4d23      	ldr	r5, [pc, #140]	; (28cc <nm_spi_read_block+0xb4>)
    2840:	47a8      	blx	r5
    2842:	0021      	movs	r1, r4
    2844:	4822      	ldr	r0, [pc, #136]	; (28d0 <nm_spi_read_block+0xb8>)
    2846:	47a8      	blx	r5
    2848:	200d      	movs	r0, #13
    284a:	4b22      	ldr	r3, [pc, #136]	; (28d4 <nm_spi_read_block+0xbc>)
    284c:	4798      	blx	r3
    284e:	e033      	b.n	28b8 <nm_spi_read_block+0xa0>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    2850:	20c8      	movs	r0, #200	; 0xc8
    2852:	4b21      	ldr	r3, [pc, #132]	; (28d8 <nm_spi_read_block+0xc0>)
    2854:	4798      	blx	r3
	if (result != N_OK) {
    2856:	2801      	cmp	r0, #1
    2858:	d012      	beq.n	2880 <nm_spi_read_block+0x68>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    285a:	4a20      	ldr	r2, [pc, #128]	; (28dc <nm_spi_read_block+0xc4>)
    285c:	4919      	ldr	r1, [pc, #100]	; (28c4 <nm_spi_read_block+0xac>)
    285e:	481a      	ldr	r0, [pc, #104]	; (28c8 <nm_spi_read_block+0xb0>)
    2860:	4d1a      	ldr	r5, [pc, #104]	; (28cc <nm_spi_read_block+0xb4>)
    2862:	47a8      	blx	r5
    2864:	0021      	movs	r1, r4
    2866:	481e      	ldr	r0, [pc, #120]	; (28e0 <nm_spi_read_block+0xc8>)
    2868:	47a8      	blx	r5
    286a:	200d      	movs	r0, #13
    286c:	4b19      	ldr	r3, [pc, #100]	; (28d4 <nm_spi_read_block+0xbc>)
    286e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2870:	2300      	movs	r3, #0
    2872:	9300      	str	r3, [sp, #0]
    2874:	2200      	movs	r2, #0
    2876:	2100      	movs	r1, #0
    2878:	20cf      	movs	r0, #207	; 0xcf
    287a:	4c11      	ldr	r4, [pc, #68]	; (28c0 <nm_spi_read_block+0xa8>)
    287c:	47a0      	blx	r4
    287e:	e01b      	b.n	28b8 <nm_spi_read_block+0xa0>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2880:	2200      	movs	r2, #0
    2882:	0029      	movs	r1, r5
    2884:	0030      	movs	r0, r6
    2886:	4b17      	ldr	r3, [pc, #92]	; (28e4 <nm_spi_read_block+0xcc>)
    2888:	4798      	blx	r3
    288a:	0003      	movs	r3, r0
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    288c:	2000      	movs	r0, #0

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
	if (result != N_OK) {
    288e:	2b01      	cmp	r3, #1
    2890:	d014      	beq.n	28bc <nm_spi_read_block+0xa4>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2892:	22a1      	movs	r2, #161	; 0xa1
    2894:	0092      	lsls	r2, r2, #2
    2896:	490b      	ldr	r1, [pc, #44]	; (28c4 <nm_spi_read_block+0xac>)
    2898:	480b      	ldr	r0, [pc, #44]	; (28c8 <nm_spi_read_block+0xb0>)
    289a:	4b0c      	ldr	r3, [pc, #48]	; (28cc <nm_spi_read_block+0xb4>)
    289c:	4798      	blx	r3
    289e:	4812      	ldr	r0, [pc, #72]	; (28e8 <nm_spi_read_block+0xd0>)
    28a0:	4b12      	ldr	r3, [pc, #72]	; (28ec <nm_spi_read_block+0xd4>)
    28a2:	4798      	blx	r3
    28a4:	200d      	movs	r0, #13
    28a6:	4b0b      	ldr	r3, [pc, #44]	; (28d4 <nm_spi_read_block+0xbc>)
    28a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    28aa:	2300      	movs	r3, #0
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	2200      	movs	r2, #0
    28b0:	2100      	movs	r1, #0
    28b2:	20cf      	movs	r0, #207	; 0xcf
    28b4:	4c02      	ldr	r4, [pc, #8]	; (28c0 <nm_spi_read_block+0xa8>)
    28b6:	47a0      	blx	r4
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    28b8:	2006      	movs	r0, #6
    28ba:	4240      	negs	r0, r0

	return s8Ret;
}
    28bc:	b003      	add	sp, #12
    28be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c0:	00002379 	.word	0x00002379
    28c4:	00007a6c 	.word	0x00007a6c
    28c8:	00006d30 	.word	0x00006d30
    28cc:	00005bad 	.word	0x00005bad
    28d0:	0000788c 	.word	0x0000788c
    28d4:	00005be1 	.word	0x00005be1
    28d8:	00002151 	.word	0x00002151
    28dc:	0000027a 	.word	0x0000027a
    28e0:	000078bc 	.word	0x000078bc
    28e4:	00002219 	.word	0x00002219
    28e8:	000078f4 	.word	0x000078f4
    28ec:	00005ccd 	.word	0x00005ccd

000028f0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	4657      	mov	r7, sl
    28f4:	b480      	push	{r7}
    28f6:	b086      	sub	sp, #24
    28f8:	0004      	movs	r4, r0
    28fa:	468a      	mov	sl, r1
    28fc:	0015      	movs	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    28fe:	2300      	movs	r3, #0
    2900:	9300      	str	r3, [sp, #0]
    2902:	0013      	movs	r3, r2
    2904:	2200      	movs	r2, #0
    2906:	0001      	movs	r1, r0
    2908:	20c7      	movs	r0, #199	; 0xc7
    290a:	4e54      	ldr	r6, [pc, #336]	; (2a5c <nm_spi_write_block+0x16c>)
    290c:	47b0      	blx	r6
	if (result != N_OK) {
    290e:	2801      	cmp	r0, #1
    2910:	d00b      	beq.n	292a <nm_spi_write_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2912:	4a53      	ldr	r2, [pc, #332]	; (2a60 <nm_spi_write_block+0x170>)
    2914:	4953      	ldr	r1, [pc, #332]	; (2a64 <nm_spi_write_block+0x174>)
    2916:	4854      	ldr	r0, [pc, #336]	; (2a68 <nm_spi_write_block+0x178>)
    2918:	4d54      	ldr	r5, [pc, #336]	; (2a6c <nm_spi_write_block+0x17c>)
    291a:	47a8      	blx	r5
    291c:	0021      	movs	r1, r4
    291e:	4854      	ldr	r0, [pc, #336]	; (2a70 <nm_spi_write_block+0x180>)
    2920:	47a8      	blx	r5
    2922:	200d      	movs	r0, #13
    2924:	4b53      	ldr	r3, [pc, #332]	; (2a74 <nm_spi_write_block+0x184>)
    2926:	4798      	blx	r3
    2928:	e092      	b.n	2a50 <nm_spi_write_block+0x160>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    292a:	20c7      	movs	r0, #199	; 0xc7
    292c:	4b52      	ldr	r3, [pc, #328]	; (2a78 <nm_spi_write_block+0x188>)
    292e:	4798      	blx	r3
	if (result != N_OK) {
    2930:	2801      	cmp	r0, #1
    2932:	d012      	beq.n	295a <nm_spi_write_block+0x6a>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2934:	4a51      	ldr	r2, [pc, #324]	; (2a7c <nm_spi_write_block+0x18c>)
    2936:	494b      	ldr	r1, [pc, #300]	; (2a64 <nm_spi_write_block+0x174>)
    2938:	484b      	ldr	r0, [pc, #300]	; (2a68 <nm_spi_write_block+0x178>)
    293a:	4d4c      	ldr	r5, [pc, #304]	; (2a6c <nm_spi_write_block+0x17c>)
    293c:	47a8      	blx	r5
    293e:	0021      	movs	r1, r4
    2940:	484f      	ldr	r0, [pc, #316]	; (2a80 <nm_spi_write_block+0x190>)
    2942:	47a8      	blx	r5
    2944:	200d      	movs	r0, #13
    2946:	4b4b      	ldr	r3, [pc, #300]	; (2a74 <nm_spi_write_block+0x184>)
    2948:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    294a:	2300      	movs	r3, #0
    294c:	9300      	str	r3, [sp, #0]
    294e:	2200      	movs	r2, #0
    2950:	2100      	movs	r1, #0
    2952:	20cf      	movs	r0, #207	; 0xcf
    2954:	4c41      	ldr	r4, [pc, #260]	; (2a5c <nm_spi_write_block+0x16c>)
    2956:	47a0      	blx	r4
    2958:	e07a      	b.n	2a50 <nm_spi_write_block+0x160>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    295a:	2200      	movs	r2, #0
    295c:	ab05      	add	r3, sp, #20
    295e:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2960:	2600      	movs	r6, #0
    2962:	2780      	movs	r7, #128	; 0x80
    2964:	01bf      	lsls	r7, r7, #6
    2966:	466b      	mov	r3, sp
    2968:	81df      	strh	r7, [r3, #14]
    296a:	1c2c      	adds	r4, r5, #0
    296c:	42bd      	cmp	r5, r7
    296e:	d901      	bls.n	2974 <nm_spi_write_block+0x84>
    2970:	466b      	mov	r3, sp
    2972:	89dc      	ldrh	r4, [r3, #14]
    2974:	b2a4      	uxth	r4, r4

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    2976:	2e00      	cmp	r6, #0
    2978:	d104      	bne.n	2984 <nm_spi_write_block+0x94>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    297a:	2303      	movs	r3, #3
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    297c:	42bd      	cmp	r5, r7
    297e:	d905      	bls.n	298c <nm_spi_write_block+0x9c>
				order = 0x3;
			else
				order = 0x1;
    2980:	3b02      	subs	r3, #2
    2982:	e003      	b.n	298c <nm_spi_write_block+0x9c>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    2984:	2300      	movs	r3, #0
    2986:	42af      	cmp	r7, r5
    2988:	415b      	adcs	r3, r3
    298a:	3302      	adds	r3, #2
		}
		cmd |= order;
    298c:	200b      	movs	r0, #11
    298e:	aa02      	add	r2, sp, #8
    2990:	4694      	mov	ip, r2
    2992:	4460      	add	r0, ip
    2994:	2210      	movs	r2, #16
    2996:	4252      	negs	r2, r2
    2998:	4313      	orrs	r3, r2
    299a:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    299c:	2101      	movs	r1, #1
    299e:	4b39      	ldr	r3, [pc, #228]	; (2a84 <nm_spi_write_block+0x194>)
    29a0:	4798      	blx	r3
    29a2:	2800      	cmp	r0, #0
    29a4:	d00c      	beq.n	29c0 <nm_spi_write_block+0xd0>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    29a6:	22d4      	movs	r2, #212	; 0xd4
    29a8:	0052      	lsls	r2, r2, #1
    29aa:	4937      	ldr	r1, [pc, #220]	; (2a88 <nm_spi_write_block+0x198>)
    29ac:	482e      	ldr	r0, [pc, #184]	; (2a68 <nm_spi_write_block+0x178>)
    29ae:	4b2f      	ldr	r3, [pc, #188]	; (2a6c <nm_spi_write_block+0x17c>)
    29b0:	4798      	blx	r3
    29b2:	4836      	ldr	r0, [pc, #216]	; (2a8c <nm_spi_write_block+0x19c>)
    29b4:	4b36      	ldr	r3, [pc, #216]	; (2a90 <nm_spi_write_block+0x1a0>)
    29b6:	4798      	blx	r3
    29b8:	200d      	movs	r0, #13
    29ba:	4b2e      	ldr	r3, [pc, #184]	; (2a74 <nm_spi_write_block+0x184>)
    29bc:	4798      	blx	r3
    29be:	e031      	b.n	2a24 <nm_spi_write_block+0x134>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    29c0:	4653      	mov	r3, sl
    29c2:	1998      	adds	r0, r3, r6
    29c4:	0021      	movs	r1, r4
    29c6:	4b2f      	ldr	r3, [pc, #188]	; (2a84 <nm_spi_write_block+0x194>)
    29c8:	4798      	blx	r3
    29ca:	2800      	cmp	r0, #0
    29cc:	d00c      	beq.n	29e8 <nm_spi_write_block+0xf8>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    29ce:	22b2      	movs	r2, #178	; 0xb2
    29d0:	32ff      	adds	r2, #255	; 0xff
    29d2:	492d      	ldr	r1, [pc, #180]	; (2a88 <nm_spi_write_block+0x198>)
    29d4:	4824      	ldr	r0, [pc, #144]	; (2a68 <nm_spi_write_block+0x178>)
    29d6:	4b25      	ldr	r3, [pc, #148]	; (2a6c <nm_spi_write_block+0x17c>)
    29d8:	4798      	blx	r3
    29da:	482e      	ldr	r0, [pc, #184]	; (2a94 <nm_spi_write_block+0x1a4>)
    29dc:	4b2c      	ldr	r3, [pc, #176]	; (2a90 <nm_spi_write_block+0x1a0>)
    29de:	4798      	blx	r3
    29e0:	200d      	movs	r0, #13
    29e2:	4b24      	ldr	r3, [pc, #144]	; (2a74 <nm_spi_write_block+0x184>)
    29e4:	4798      	blx	r3
    29e6:	e01d      	b.n	2a24 <nm_spi_write_block+0x134>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    29e8:	4b2b      	ldr	r3, [pc, #172]	; (2a98 <nm_spi_write_block+0x1a8>)
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d112      	bne.n	2a16 <nm_spi_write_block+0x126>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    29f0:	2102      	movs	r1, #2
    29f2:	a805      	add	r0, sp, #20
    29f4:	4b23      	ldr	r3, [pc, #140]	; (2a84 <nm_spi_write_block+0x194>)
    29f6:	4798      	blx	r3
    29f8:	2800      	cmp	r0, #0
    29fa:	d00c      	beq.n	2a16 <nm_spi_write_block+0x126>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    29fc:	22bc      	movs	r2, #188	; 0xbc
    29fe:	32ff      	adds	r2, #255	; 0xff
    2a00:	4921      	ldr	r1, [pc, #132]	; (2a88 <nm_spi_write_block+0x198>)
    2a02:	4819      	ldr	r0, [pc, #100]	; (2a68 <nm_spi_write_block+0x178>)
    2a04:	4b19      	ldr	r3, [pc, #100]	; (2a6c <nm_spi_write_block+0x17c>)
    2a06:	4798      	blx	r3
    2a08:	4824      	ldr	r0, [pc, #144]	; (2a9c <nm_spi_write_block+0x1ac>)
    2a0a:	4b21      	ldr	r3, [pc, #132]	; (2a90 <nm_spi_write_block+0x1a0>)
    2a0c:	4798      	blx	r3
    2a0e:	200d      	movs	r0, #13
    2a10:	4b18      	ldr	r3, [pc, #96]	; (2a74 <nm_spi_write_block+0x184>)
    2a12:	4798      	blx	r3
    2a14:	e006      	b.n	2a24 <nm_spi_write_block+0x134>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    2a16:	19a3      	adds	r3, r4, r6
    2a18:	b21e      	sxth	r6, r3
		sz -= nbytes;
    2a1a:	1b2d      	subs	r5, r5, r4
    2a1c:	b2ad      	uxth	r5, r5
	} while (sz);
    2a1e:	2d00      	cmp	r5, #0
    2a20:	d1a3      	bne.n	296a <nm_spi_write_block+0x7a>
    2a22:	e013      	b.n	2a4c <nm_spi_write_block+0x15c>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2a24:	4a1e      	ldr	r2, [pc, #120]	; (2aa0 <nm_spi_write_block+0x1b0>)
    2a26:	490f      	ldr	r1, [pc, #60]	; (2a64 <nm_spi_write_block+0x174>)
    2a28:	480f      	ldr	r0, [pc, #60]	; (2a68 <nm_spi_write_block+0x178>)
    2a2a:	4b10      	ldr	r3, [pc, #64]	; (2a6c <nm_spi_write_block+0x17c>)
    2a2c:	4798      	blx	r3
    2a2e:	481d      	ldr	r0, [pc, #116]	; (2aa4 <nm_spi_write_block+0x1b4>)
    2a30:	4b17      	ldr	r3, [pc, #92]	; (2a90 <nm_spi_write_block+0x1a0>)
    2a32:	4798      	blx	r3
    2a34:	200d      	movs	r0, #13
    2a36:	4b0f      	ldr	r3, [pc, #60]	; (2a74 <nm_spi_write_block+0x184>)
    2a38:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2a3a:	2300      	movs	r3, #0
    2a3c:	9300      	str	r3, [sp, #0]
    2a3e:	2200      	movs	r2, #0
    2a40:	2100      	movs	r1, #0
    2a42:	20cf      	movs	r0, #207	; 0xcf
    2a44:	4c05      	ldr	r4, [pc, #20]	; (2a5c <nm_spi_write_block+0x16c>)
    2a46:	47a0      	blx	r4
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2a48:	2000      	movs	r0, #0
    2a4a:	e003      	b.n	2a54 <nm_spi_write_block+0x164>
    2a4c:	2000      	movs	r0, #0
    2a4e:	e001      	b.n	2a54 <nm_spi_write_block+0x164>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2a50:	2006      	movs	r0, #6
    2a52:	4240      	negs	r0, r0

	return s8Ret;
}
    2a54:	b006      	add	sp, #24
    2a56:	bc04      	pop	{r2}
    2a58:	4692      	mov	sl, r2
    2a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5c:	00002379 	.word	0x00002379
    2a60:	0000020f 	.word	0x0000020f
    2a64:	00007570 	.word	0x00007570
    2a68:	00006d30 	.word	0x00006d30
    2a6c:	00005bad 	.word	0x00005bad
    2a70:	0000791c 	.word	0x0000791c
    2a74:	00005be1 	.word	0x00005be1
    2a78:	00002151 	.word	0x00002151
    2a7c:	00000215 	.word	0x00000215
    2a80:	0000794c 	.word	0x0000794c
    2a84:	00002359 	.word	0x00002359
    2a88:	00007a5c 	.word	0x00007a5c
    2a8c:	00007984 	.word	0x00007984
    2a90:	00005ccd 	.word	0x00005ccd
    2a94:	000079bc 	.word	0x000079bc
    2a98:	200000cc 	.word	0x200000cc
    2a9c:	000079f0 	.word	0x000079f0
    2aa0:	00000226 	.word	0x00000226
    2aa4:	00007a28 	.word	0x00007a28

00002aa8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    2aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aaa:	465f      	mov	r7, fp
    2aac:	4656      	mov	r6, sl
    2aae:	464d      	mov	r5, r9
    2ab0:	4644      	mov	r4, r8
    2ab2:	b4f0      	push	{r4, r5, r6, r7}
    2ab4:	b085      	sub	sp, #20
    2ab6:	9002      	str	r0, [sp, #8]
    2ab8:	000e      	movs	r6, r1
    2aba:	9203      	str	r2, [sp, #12]
    2abc:	001f      	movs	r7, r3
    2abe:	ab0e      	add	r3, sp, #56	; 0x38
    2ac0:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    2ac2:	2c00      	cmp	r4, #0
    2ac4:	d052      	beq.n	2b6c <Socket_ReadSocketData+0xc4>
    2ac6:	0103      	lsls	r3, r0, #4
    2ac8:	492c      	ldr	r1, [pc, #176]	; (2b7c <Socket_ReadSocketData+0xd4>)
    2aca:	585b      	ldr	r3, [r3, r1]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d04d      	beq.n	2b6c <Socket_ReadSocketData+0xc4>
    2ad0:	0103      	lsls	r3, r0, #4
    2ad2:	18cb      	adds	r3, r1, r3
    2ad4:	889b      	ldrh	r3, [r3, #4]
    2ad6:	b29b      	uxth	r3, r3
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d047      	beq.n	2b6c <Socket_ReadSocketData+0xc4>
    2adc:	0103      	lsls	r3, r0, #4
    2ade:	18cb      	adds	r3, r1, r3
    2ae0:	7a9b      	ldrb	r3, [r3, #10]
    2ae2:	2b01      	cmp	r3, #1
    2ae4:	d142      	bne.n	2b6c <Socket_ReadSocketData+0xc4>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    2ae6:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2ae8:	0103      	lsls	r3, r0, #4
    2aea:	4699      	mov	r9, r3
    2aec:	000b      	movs	r3, r1
    2aee:	444b      	add	r3, r9
    2af0:	469b      	mov	fp, r3
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2af2:	46d8      	mov	r8, fp
    2af4:	9701      	str	r7, [sp, #4]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2af6:	465b      	mov	r3, fp
    2af8:	889b      	ldrh	r3, [r3, #4]
			if(s16Diff > 0)
    2afa:	1ae3      	subs	r3, r4, r3
    2afc:	b21b      	sxth	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	dd04      	ble.n	2b0c <Socket_ReadSocketData+0x64>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2b02:	4643      	mov	r3, r8
    2b04:	889d      	ldrh	r5, [r3, #4]
    2b06:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    2b08:	2300      	movs	r3, #0
    2b0a:	e001      	b.n	2b10 <Socket_ReadSocketData+0x68>
    2b0c:	0025      	movs	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    2b0e:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    2b10:	4a1a      	ldr	r2, [pc, #104]	; (2b7c <Socket_ReadSocketData+0xd4>)
    2b12:	4649      	mov	r1, r9
    2b14:	5889      	ldr	r1, [r1, r2]
    2b16:	002a      	movs	r2, r5
    2b18:	9801      	ldr	r0, [sp, #4]
    2b1a:	4f19      	ldr	r7, [pc, #100]	; (2b80 <Socket_ReadSocketData+0xd8>)
    2b1c:	47b8      	blx	r7
    2b1e:	2800      	cmp	r0, #0
    2b20:	d11b      	bne.n	2b5a <Socket_ReadSocketData+0xb2>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    2b22:	4b16      	ldr	r3, [pc, #88]	; (2b7c <Socket_ReadSocketData+0xd4>)
    2b24:	464a      	mov	r2, r9
    2b26:	58d3      	ldr	r3, [r2, r3]
    2b28:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2b2a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2b2c:	88f3      	ldrh	r3, [r6, #6]
    2b2e:	1b5b      	subs	r3, r3, r5
    2b30:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
    2b32:	4b14      	ldr	r3, [pc, #80]	; (2b84 <Socket_ReadSocketData+0xdc>)
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d005      	beq.n	2b46 <Socket_ReadSocketData+0x9e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2b3a:	4b12      	ldr	r3, [pc, #72]	; (2b84 <Socket_ReadSocketData+0xdc>)
    2b3c:	681b      	ldr	r3, [r3, #0]
    2b3e:	0032      	movs	r2, r6
    2b40:	9903      	ldr	r1, [sp, #12]
    2b42:	9802      	ldr	r0, [sp, #8]
    2b44:	4798      	blx	r3

				u16ReadCount -= u16Read;
    2b46:	1b64      	subs	r4, r4, r5
    2b48:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2b4a:	9b01      	ldr	r3, [sp, #4]
    2b4c:	469c      	mov	ip, r3
    2b4e:	44ac      	add	ip, r5
    2b50:	4663      	mov	r3, ip
    2b52:	9301      	str	r3, [sp, #4]
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    2b54:	2c00      	cmp	r4, #0
    2b56:	d1ce      	bne.n	2af6 <Socket_ReadSocketData+0x4e>
    2b58:	e008      	b.n	2b6c <Socket_ReadSocketData+0xc4>
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2b5a:	480b      	ldr	r0, [pc, #44]	; (2b88 <Socket_ReadSocketData+0xe0>)
    2b5c:	4d0b      	ldr	r5, [pc, #44]	; (2b8c <Socket_ReadSocketData+0xe4>)
    2b5e:	47a8      	blx	r5
    2b60:	0021      	movs	r1, r4
    2b62:	480b      	ldr	r0, [pc, #44]	; (2b90 <Socket_ReadSocketData+0xe8>)
    2b64:	47a8      	blx	r5
    2b66:	200d      	movs	r0, #13
    2b68:	4b0a      	ldr	r3, [pc, #40]	; (2b94 <Socket_ReadSocketData+0xec>)
    2b6a:	4798      	blx	r3
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    2b6c:	b005      	add	sp, #20
    2b6e:	bc3c      	pop	{r2, r3, r4, r5}
    2b70:	4690      	mov	r8, r2
    2b72:	4699      	mov	r9, r3
    2b74:	46a2      	mov	sl, r4
    2b76:	46ab      	mov	fp, r5
    2b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	20000240 	.word	0x20000240
    2b80:	000010d1 	.word	0x000010d1
    2b84:	200002f0 	.word	0x200002f0
    2b88:	00006fe4 	.word	0x00006fe4
    2b8c:	00005bad 	.word	0x00005bad
    2b90:	00007b78 	.word	0x00007b78
    2b94:	00005be1 	.word	0x00005be1

00002b98 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    2b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9a:	464f      	mov	r7, r9
    2b9c:	4646      	mov	r6, r8
    2b9e:	b4c0      	push	{r6, r7}
    2ba0:	b09b      	sub	sp, #108	; 0x6c
    2ba2:	000d      	movs	r5, r1
    2ba4:	0014      	movs	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
    2ba6:	2841      	cmp	r0, #65	; 0x41
    2ba8:	d11a      	bne.n	2be0 <m2m_ip_cb+0x48>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2baa:	2300      	movs	r3, #0
    2bac:	2204      	movs	r2, #4
    2bae:	a909      	add	r1, sp, #36	; 0x24
    2bb0:	0020      	movs	r0, r4
    2bb2:	4caa      	ldr	r4, [pc, #680]	; (2e5c <m2m_ip_cb+0x2c4>)
    2bb4:	47a0      	blx	r4
    2bb6:	2800      	cmp	r0, #0
    2bb8:	d000      	beq.n	2bbc <m2m_ip_cb+0x24>
    2bba:	e149      	b.n	2e50 <m2m_ip_cb+0x2b8>
		{
			strBind.status = strBindReply.s8Status;
    2bbc:	ab09      	add	r3, sp, #36	; 0x24
    2bbe:	785a      	ldrb	r2, [r3, #1]
    2bc0:	ab05      	add	r3, sp, #20
    2bc2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2bc4:	4ba6      	ldr	r3, [pc, #664]	; (2e60 <m2m_ip_cb+0x2c8>)
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d100      	bne.n	2bce <m2m_ip_cb+0x36>
    2bcc:	e140      	b.n	2e50 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2bce:	4ba4      	ldr	r3, [pc, #656]	; (2e60 <m2m_ip_cb+0x2c8>)
    2bd0:	681b      	ldr	r3, [r3, #0]
    2bd2:	aa09      	add	r2, sp, #36	; 0x24
    2bd4:	2000      	movs	r0, #0
    2bd6:	5610      	ldrsb	r0, [r2, r0]
    2bd8:	aa05      	add	r2, sp, #20
    2bda:	2101      	movs	r1, #1
    2bdc:	4798      	blx	r3
    2bde:	e137      	b.n	2e50 <m2m_ip_cb+0x2b8>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2be0:	2842      	cmp	r0, #66	; 0x42
    2be2:	d11a      	bne.n	2c1a <m2m_ip_cb+0x82>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2be4:	2300      	movs	r3, #0
    2be6:	2204      	movs	r2, #4
    2be8:	a909      	add	r1, sp, #36	; 0x24
    2bea:	0020      	movs	r0, r4
    2bec:	4c9b      	ldr	r4, [pc, #620]	; (2e5c <m2m_ip_cb+0x2c4>)
    2bee:	47a0      	blx	r4
    2bf0:	2800      	cmp	r0, #0
    2bf2:	d000      	beq.n	2bf6 <m2m_ip_cb+0x5e>
    2bf4:	e12c      	b.n	2e50 <m2m_ip_cb+0x2b8>
		{
			strListen.status = strListenReply.s8Status;
    2bf6:	ab09      	add	r3, sp, #36	; 0x24
    2bf8:	785a      	ldrb	r2, [r3, #1]
    2bfa:	ab05      	add	r3, sp, #20
    2bfc:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2bfe:	4b98      	ldr	r3, [pc, #608]	; (2e60 <m2m_ip_cb+0x2c8>)
    2c00:	681b      	ldr	r3, [r3, #0]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d100      	bne.n	2c08 <m2m_ip_cb+0x70>
    2c06:	e123      	b.n	2e50 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2c08:	4b95      	ldr	r3, [pc, #596]	; (2e60 <m2m_ip_cb+0x2c8>)
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	aa09      	add	r2, sp, #36	; 0x24
    2c0e:	2000      	movs	r0, #0
    2c10:	5610      	ldrsb	r0, [r2, r0]
    2c12:	aa05      	add	r2, sp, #20
    2c14:	2102      	movs	r1, #2
    2c16:	4798      	blx	r3
    2c18:	e11a      	b.n	2e50 <m2m_ip_cb+0x2b8>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    2c1a:	2843      	cmp	r0, #67	; 0x43
    2c1c:	d13f      	bne.n	2c9e <m2m_ip_cb+0x106>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2c1e:	2300      	movs	r3, #0
    2c20:	220c      	movs	r2, #12
    2c22:	a905      	add	r1, sp, #20
    2c24:	0020      	movs	r0, r4
    2c26:	4c8d      	ldr	r4, [pc, #564]	; (2e5c <m2m_ip_cb+0x2c4>)
    2c28:	47a0      	blx	r4
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d000      	beq.n	2c30 <m2m_ip_cb+0x98>
    2c2e:	e10f      	b.n	2e50 <m2m_ip_cb+0x2b8>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    2c30:	ab05      	add	r3, sp, #20
    2c32:	2109      	movs	r1, #9
    2c34:	5659      	ldrsb	r1, [r3, r1]
    2c36:	2900      	cmp	r1, #0
    2c38:	db1a      	blt.n	2c70 <m2m_ip_cb+0xd8>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    2c3a:	010a      	lsls	r2, r1, #4
    2c3c:	4b89      	ldr	r3, [pc, #548]	; (2e64 <m2m_ip_cb+0x2cc>)
    2c3e:	189b      	adds	r3, r3, r2
    2c40:	2200      	movs	r2, #0
    2c42:	72da      	strb	r2, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    2c44:	3201      	adds	r2, #1
    2c46:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2c48:	4a87      	ldr	r2, [pc, #540]	; (2e68 <m2m_ip_cb+0x2d0>)
    2c4a:	8813      	ldrh	r3, [r2, #0]
    2c4c:	3301      	adds	r3, #1
    2c4e:	b29b      	uxth	r3, r3
    2c50:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
    2c52:	8813      	ldrh	r3, [r2, #0]
    2c54:	b29b      	uxth	r3, r3
    2c56:	2b00      	cmp	r3, #0
    2c58:	d103      	bne.n	2c62 <m2m_ip_cb+0xca>
					++gu16SessionID;
    2c5a:	8813      	ldrh	r3, [r2, #0]
    2c5c:	3301      	adds	r3, #1
    2c5e:	b29b      	uxth	r3, r3
    2c60:	8013      	strh	r3, [r2, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2c62:	4b81      	ldr	r3, [pc, #516]	; (2e68 <m2m_ip_cb+0x2d0>)
    2c64:	881a      	ldrh	r2, [r3, #0]
    2c66:	b292      	uxth	r2, r2
    2c68:	010b      	lsls	r3, r1, #4
    2c6a:	487e      	ldr	r0, [pc, #504]	; (2e64 <m2m_ip_cb+0x2cc>)
    2c6c:	18c3      	adds	r3, r0, r3
    2c6e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    2c70:	ab09      	add	r3, sp, #36	; 0x24
    2c72:	7019      	strb	r1, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2c74:	2202      	movs	r2, #2
    2c76:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2c78:	aa05      	add	r2, sp, #20
    2c7a:	8851      	ldrh	r1, [r2, #2]
    2c7c:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2c7e:	9a06      	ldr	r2, [sp, #24]
    2c80:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2c82:	4b77      	ldr	r3, [pc, #476]	; (2e60 <m2m_ip_cb+0x2c8>)
    2c84:	681b      	ldr	r3, [r3, #0]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d100      	bne.n	2c8c <m2m_ip_cb+0xf4>
    2c8a:	e0e1      	b.n	2e50 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2c8c:	4b74      	ldr	r3, [pc, #464]	; (2e60 <m2m_ip_cb+0x2c8>)
    2c8e:	681b      	ldr	r3, [r3, #0]
    2c90:	aa05      	add	r2, sp, #20
    2c92:	2008      	movs	r0, #8
    2c94:	5610      	ldrsb	r0, [r2, r0]
    2c96:	aa09      	add	r2, sp, #36	; 0x24
    2c98:	2104      	movs	r1, #4
    2c9a:	4798      	blx	r3
    2c9c:	e0d8      	b.n	2e50 <m2m_ip_cb+0x2b8>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    2c9e:	2844      	cmp	r0, #68	; 0x44
    2ca0:	d001      	beq.n	2ca6 <m2m_ip_cb+0x10e>
    2ca2:	284b      	cmp	r0, #75	; 0x4b
    2ca4:	d125      	bne.n	2cf2 <m2m_ip_cb+0x15a>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2ca6:	2300      	movs	r3, #0
    2ca8:	2204      	movs	r2, #4
    2caa:	a909      	add	r1, sp, #36	; 0x24
    2cac:	0020      	movs	r0, r4
    2cae:	4c6b      	ldr	r4, [pc, #428]	; (2e5c <m2m_ip_cb+0x2c4>)
    2cb0:	47a0      	blx	r4
    2cb2:	2800      	cmp	r0, #0
    2cb4:	d000      	beq.n	2cb8 <m2m_ip_cb+0x120>
    2cb6:	e0cb      	b.n	2e50 <m2m_ip_cb+0x2b8>
		{
			strConnMsg.sock		= strConnectReply.sock;
    2cb8:	ab09      	add	r3, sp, #36	; 0x24
    2cba:	2000      	movs	r0, #0
    2cbc:	5618      	ldrsb	r0, [r3, r0]
    2cbe:	aa05      	add	r2, sp, #20
    2cc0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2cc2:	785b      	ldrb	r3, [r3, #1]
    2cc4:	b25b      	sxtb	r3, r3
    2cc6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d107      	bne.n	2cdc <m2m_ip_cb+0x144>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2ccc:	ab09      	add	r3, sp, #36	; 0x24
    2cce:	885a      	ldrh	r2, [r3, #2]
    2cd0:	3a08      	subs	r2, #8
    2cd2:	b292      	uxth	r2, r2
    2cd4:	0103      	lsls	r3, r0, #4
    2cd6:	4963      	ldr	r1, [pc, #396]	; (2e64 <m2m_ip_cb+0x2cc>)
    2cd8:	18cb      	adds	r3, r1, r3
    2cda:	811a      	strh	r2, [r3, #8]
			}
			if(gpfAppSocketCb)
    2cdc:	4b60      	ldr	r3, [pc, #384]	; (2e60 <m2m_ip_cb+0x2c8>)
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d100      	bne.n	2ce6 <m2m_ip_cb+0x14e>
    2ce4:	e0b4      	b.n	2e50 <m2m_ip_cb+0x2b8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2ce6:	4b5e      	ldr	r3, [pc, #376]	; (2e60 <m2m_ip_cb+0x2c8>)
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	aa05      	add	r2, sp, #20
    2cec:	2105      	movs	r1, #5
    2cee:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    2cf0:	e0ae      	b.n	2e50 <m2m_ip_cb+0x2b8>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2cf2:	284a      	cmp	r0, #74	; 0x4a
    2cf4:	d115      	bne.n	2d22 <m2m_ip_cb+0x18a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2cf6:	2300      	movs	r3, #0
    2cf8:	2244      	movs	r2, #68	; 0x44
    2cfa:	a909      	add	r1, sp, #36	; 0x24
    2cfc:	0020      	movs	r0, r4
    2cfe:	4c57      	ldr	r4, [pc, #348]	; (2e5c <m2m_ip_cb+0x2c4>)
    2d00:	47a0      	blx	r4
    2d02:	2800      	cmp	r0, #0
    2d04:	d000      	beq.n	2d08 <m2m_ip_cb+0x170>
    2d06:	e0a3      	b.n	2e50 <m2m_ip_cb+0x2b8>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
    2d08:	4b58      	ldr	r3, [pc, #352]	; (2e6c <m2m_ip_cb+0x2d4>)
    2d0a:	681b      	ldr	r3, [r3, #0]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d100      	bne.n	2d12 <m2m_ip_cb+0x17a>
    2d10:	e09e      	b.n	2e50 <m2m_ip_cb+0x2b8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2d12:	4b56      	ldr	r3, [pc, #344]	; (2e6c <m2m_ip_cb+0x2d4>)
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2d18:	9203      	str	r2, [sp, #12]
    2d1a:	0011      	movs	r1, r2
    2d1c:	a809      	add	r0, sp, #36	; 0x24
    2d1e:	4798      	blx	r3
    2d20:	e096      	b.n	2e50 <m2m_ip_cb+0x2b8>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2d22:	2846      	cmp	r0, #70	; 0x46
    2d24:	d005      	beq.n	2d32 <m2m_ip_cb+0x19a>
    2d26:	2848      	cmp	r0, #72	; 0x48
    2d28:	d005      	beq.n	2d36 <m2m_ip_cb+0x19e>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2d2a:	2606      	movs	r6, #6
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2d2c:	284d      	cmp	r0, #77	; 0x4d
    2d2e:	d003      	beq.n	2d38 <m2m_ip_cb+0x1a0>
    2d30:	e04c      	b.n	2dcc <m2m_ip_cb+0x234>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2d32:	2606      	movs	r6, #6
    2d34:	e000      	b.n	2d38 <m2m_ip_cb+0x1a0>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2d36:	2609      	movs	r6, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2d38:	2300      	movs	r3, #0
    2d3a:	2210      	movs	r2, #16
    2d3c:	a905      	add	r1, sp, #20
    2d3e:	0020      	movs	r0, r4
    2d40:	4f46      	ldr	r7, [pc, #280]	; (2e5c <m2m_ip_cb+0x2c4>)
    2d42:	47b8      	blx	r7
    2d44:	2800      	cmp	r0, #0
    2d46:	d000      	beq.n	2d4a <m2m_ip_cb+0x1b2>
    2d48:	e082      	b.n	2e50 <m2m_ip_cb+0x2b8>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
    2d4a:	aa05      	add	r2, sp, #20
    2d4c:	200c      	movs	r0, #12
    2d4e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2d50:	89d3      	ldrh	r3, [r2, #14]
    2d52:	469c      	mov	ip, r3
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    2d54:	0103      	lsls	r3, r0, #4
    2d56:	4943      	ldr	r1, [pc, #268]	; (2e64 <m2m_ip_cb+0x2cc>)
    2d58:	18c9      	adds	r1, r1, r3
    2d5a:	2300      	movs	r3, #0
    2d5c:	730b      	strb	r3, [r1, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2d5e:	2708      	movs	r7, #8
    2d60:	5fd3      	ldrsh	r3, [r2, r7]
    2d62:	4698      	mov	r8, r3
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2d64:	8953      	ldrh	r3, [r2, #10]
    2d66:	4699      	mov	r9, r3
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2d68:	af09      	add	r7, sp, #36	; 0x24
    2d6a:	8853      	ldrh	r3, [r2, #2]
    2d6c:	817b      	strh	r3, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2d6e:	9b06      	ldr	r3, [sp, #24]
    2d70:	930c      	str	r3, [sp, #48]	; 0x30

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2d72:	88ca      	ldrh	r2, [r1, #6]
    2d74:	b292      	uxth	r2, r2
    2d76:	4594      	cmp	ip, r2
    2d78:	d11f      	bne.n	2dba <m2m_ip_cb+0x222>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2d7a:	4643      	mov	r3, r8
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	dd0d      	ble.n	2d9c <m2m_ip_cb+0x204>
    2d80:	45a8      	cmp	r8, r5
    2d82:	da0b      	bge.n	2d9c <m2m_ip_cb+0x204>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2d84:	0023      	movs	r3, r4
    2d86:	444b      	add	r3, r9
    2d88:	4642      	mov	r2, r8
    2d8a:	4669      	mov	r1, sp
    2d8c:	818a      	strh	r2, [r1, #12]
    2d8e:	898a      	ldrh	r2, [r1, #12]
    2d90:	9200      	str	r2, [sp, #0]
    2d92:	0032      	movs	r2, r6
    2d94:	0039      	movs	r1, r7
    2d96:	4c36      	ldr	r4, [pc, #216]	; (2e70 <m2m_ip_cb+0x2d8>)
    2d98:	47a0      	blx	r4
    2d9a:	e059      	b.n	2e50 <m2m_ip_cb+0x2b8>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2d9c:	ab09      	add	r3, sp, #36	; 0x24
    2d9e:	4642      	mov	r2, r8
    2da0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2da2:	2300      	movs	r3, #0
    2da4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2da6:	4b2e      	ldr	r3, [pc, #184]	; (2e60 <m2m_ip_cb+0x2c8>)
    2da8:	681b      	ldr	r3, [r3, #0]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d050      	beq.n	2e50 <m2m_ip_cb+0x2b8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2dae:	4b2c      	ldr	r3, [pc, #176]	; (2e60 <m2m_ip_cb+0x2c8>)
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	aa09      	add	r2, sp, #36	; 0x24
    2db4:	0031      	movs	r1, r6
    2db6:	4798      	blx	r3
    2db8:	e04a      	b.n	2e50 <m2m_ip_cb+0x2b8>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    2dba:	2d10      	cmp	r5, #16
    2dbc:	d948      	bls.n	2e50 <m2m_ip_cb+0x2b8>
					hif_receive(0, NULL, 0, 1);
    2dbe:	2301      	movs	r3, #1
    2dc0:	2200      	movs	r2, #0
    2dc2:	2100      	movs	r1, #0
    2dc4:	2000      	movs	r0, #0
    2dc6:	4c25      	ldr	r4, [pc, #148]	; (2e5c <m2m_ip_cb+0x2c4>)
    2dc8:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    2dca:	e041      	b.n	2e50 <m2m_ip_cb+0x2b8>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2dcc:	2845      	cmp	r0, #69	; 0x45
    2dce:	d005      	beq.n	2ddc <m2m_ip_cb+0x244>
    2dd0:	2847      	cmp	r0, #71	; 0x47
    2dd2:	d005      	beq.n	2de0 <m2m_ip_cb+0x248>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2dd4:	2507      	movs	r5, #7
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2dd6:	284c      	cmp	r0, #76	; 0x4c
    2dd8:	d003      	beq.n	2de2 <m2m_ip_cb+0x24a>
    2dda:	e022      	b.n	2e22 <m2m_ip_cb+0x28a>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2ddc:	2507      	movs	r5, #7
    2dde:	e000      	b.n	2de2 <m2m_ip_cb+0x24a>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2de0:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2de2:	2300      	movs	r3, #0
    2de4:	2208      	movs	r2, #8
    2de6:	a909      	add	r1, sp, #36	; 0x24
    2de8:	0020      	movs	r0, r4
    2dea:	4c1c      	ldr	r4, [pc, #112]	; (2e5c <m2m_ip_cb+0x2c4>)
    2dec:	47a0      	blx	r4
    2dee:	2800      	cmp	r0, #0
    2df0:	d12e      	bne.n	2e50 <m2m_ip_cb+0x2b8>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
    2df2:	ab09      	add	r3, sp, #36	; 0x24
    2df4:	2000      	movs	r0, #0
    2df6:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2df8:	889a      	ldrh	r2, [r3, #4]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2dfa:	8859      	ldrh	r1, [r3, #2]
    2dfc:	ab05      	add	r3, sp, #20
    2dfe:	8019      	strh	r1, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2e00:	0103      	lsls	r3, r0, #4
    2e02:	4918      	ldr	r1, [pc, #96]	; (2e64 <m2m_ip_cb+0x2cc>)
    2e04:	18cb      	adds	r3, r1, r3
    2e06:	88db      	ldrh	r3, [r3, #6]
    2e08:	b29b      	uxth	r3, r3
    2e0a:	429a      	cmp	r2, r3
    2e0c:	d120      	bne.n	2e50 <m2m_ip_cb+0x2b8>
			{
				if(gpfAppSocketCb)
    2e0e:	4b14      	ldr	r3, [pc, #80]	; (2e60 <m2m_ip_cb+0x2c8>)
    2e10:	681b      	ldr	r3, [r3, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d01c      	beq.n	2e50 <m2m_ip_cb+0x2b8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2e16:	4b12      	ldr	r3, [pc, #72]	; (2e60 <m2m_ip_cb+0x2c8>)
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	aa05      	add	r2, sp, #20
    2e1c:	0029      	movs	r1, r5
    2e1e:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    2e20:	e016      	b.n	2e50 <m2m_ip_cb+0x2b8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2e22:	2852      	cmp	r0, #82	; 0x52
    2e24:	d114      	bne.n	2e50 <m2m_ip_cb+0x2b8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2e26:	2301      	movs	r3, #1
    2e28:	2214      	movs	r2, #20
    2e2a:	a909      	add	r1, sp, #36	; 0x24
    2e2c:	0020      	movs	r0, r4
    2e2e:	4c0b      	ldr	r4, [pc, #44]	; (2e5c <m2m_ip_cb+0x2c4>)
    2e30:	47a0      	blx	r4
    2e32:	2800      	cmp	r0, #0
    2e34:	d10c      	bne.n	2e50 <m2m_ip_cb+0x2b8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2e36:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <m2m_ip_cb+0x2dc>)
    2e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2e3a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d006      	beq.n	2e50 <m2m_ip_cb+0x2b8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2e42:	4b0c      	ldr	r3, [pc, #48]	; (2e74 <m2m_ip_cb+0x2dc>)
    2e44:	681c      	ldr	r4, [r3, #0]
    2e46:	ab09      	add	r3, sp, #36	; 0x24
    2e48:	7c1a      	ldrb	r2, [r3, #16]
    2e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e4e:	47a0      	blx	r4
			}
		}
	}
}
    2e50:	b01b      	add	sp, #108	; 0x6c
    2e52:	bc0c      	pop	{r2, r3}
    2e54:	4690      	mov	r8, r2
    2e56:	4699      	mov	r9, r3
    2e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	000010d1 	.word	0x000010d1
    2e60:	200002f0 	.word	0x200002f0
    2e64:	20000240 	.word	0x20000240
    2e68:	200000ce 	.word	0x200000ce
    2e6c:	200002f8 	.word	0x200002f8
    2e70:	00002aa9 	.word	0x00002aa9
    2e74:	200002f4 	.word	0x200002f4

00002e78 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2e78:	b510      	push	{r4, lr}
	if(gbSocketInit==0)
    2e7a:	4b0a      	ldr	r3, [pc, #40]	; (2ea4 <socketInit+0x2c>)
    2e7c:	781b      	ldrb	r3, [r3, #0]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d10e      	bne.n	2ea0 <socketInit+0x28>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2e82:	22b0      	movs	r2, #176	; 0xb0
    2e84:	2100      	movs	r1, #0
    2e86:	4808      	ldr	r0, [pc, #32]	; (2ea8 <socketInit+0x30>)
    2e88:	4b08      	ldr	r3, [pc, #32]	; (2eac <socketInit+0x34>)
    2e8a:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2e8c:	4908      	ldr	r1, [pc, #32]	; (2eb0 <socketInit+0x38>)
    2e8e:	2002      	movs	r0, #2
    2e90:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <socketInit+0x3c>)
    2e92:	4798      	blx	r3
		gbSocketInit=1;
    2e94:	2201      	movs	r2, #1
    2e96:	4b03      	ldr	r3, [pc, #12]	; (2ea4 <socketInit+0x2c>)
    2e98:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    2e9a:	2200      	movs	r2, #0
    2e9c:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <socketInit+0x40>)
    2e9e:	801a      	strh	r2, [r3, #0]
	}
}
    2ea0:	bd10      	pop	{r4, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	200000cd 	.word	0x200000cd
    2ea8:	20000240 	.word	0x20000240
    2eac:	000009a5 	.word	0x000009a5
    2eb0:	00002b99 	.word	0x00002b99
    2eb4:	000011fd 	.word	0x000011fd
    2eb8:	200000ce 	.word	0x200000ce

00002ebc <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2ebc:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <registerSocketCallback+0xc>)
    2ebe:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2ec0:	4b02      	ldr	r3, [pc, #8]	; (2ecc <registerSocketCallback+0x10>)
    2ec2:	6019      	str	r1, [r3, #0]
}
    2ec4:	4770      	bx	lr
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	200002f0 	.word	0x200002f0
    2ecc:	200002f8 	.word	0x200002f8

00002ed0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2ed0:	b570      	push	{r4, r5, r6, lr}
    2ed2:	b086      	sub	sp, #24
    2ed4:	0016      	movs	r6, r2
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2ed6:	2802      	cmp	r0, #2
    2ed8:	d148      	bne.n	2f6c <socket+0x9c>
	{
		if(u8Type == SOCK_STREAM)
    2eda:	2901      	cmp	r1, #1
    2edc:	d049      	beq.n	2f72 <socket+0xa2>
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    2ede:	220b      	movs	r2, #11
			u8Count = TCP_SOCK_MAX;
    2ee0:	2407      	movs	r4, #7
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
    2ee2:	2902      	cmp	r1, #2
    2ee4:	d047      	beq.n	2f76 <socket+0xa6>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
    2ee6:	3c08      	subs	r4, #8
    2ee8:	e04f      	b.n	2f8a <socket+0xba>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2eea:	0025      	movs	r5, r4
			if(pstrSock->bIsUsed == 0)
    2eec:	0123      	lsls	r3, r4, #4
    2eee:	18cb      	adds	r3, r1, r3
    2ef0:	7a9b      	ldrb	r3, [r3, #10]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d133      	bne.n	2f5e <socket+0x8e>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2ef6:	0120      	lsls	r0, r4, #4
    2ef8:	4b25      	ldr	r3, [pc, #148]	; (2f90 <socket+0xc0>)
    2efa:	18c0      	adds	r0, r0, r3
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2efc:	2210      	movs	r2, #16
    2efe:	2100      	movs	r1, #0
    2f00:	4b24      	ldr	r3, [pc, #144]	; (2f94 <socket+0xc4>)
    2f02:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    2f04:	012b      	lsls	r3, r5, #4
    2f06:	4a22      	ldr	r2, [pc, #136]	; (2f90 <socket+0xc0>)
    2f08:	18d3      	adds	r3, r2, r3
    2f0a:	2201      	movs	r2, #1
    2f0c:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2f0e:	4a22      	ldr	r2, [pc, #136]	; (2f98 <socket+0xc8>)
    2f10:	8813      	ldrh	r3, [r2, #0]
    2f12:	3301      	adds	r3, #1
    2f14:	b29b      	uxth	r3, r3
    2f16:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
    2f18:	8813      	ldrh	r3, [r2, #0]
    2f1a:	b29b      	uxth	r3, r3
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d103      	bne.n	2f28 <socket+0x58>
					++gu16SessionID;
    2f20:	8813      	ldrh	r3, [r2, #0]
    2f22:	3301      	adds	r3, #1
    2f24:	b29b      	uxth	r3, r3
    2f26:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    2f28:	4b1b      	ldr	r3, [pc, #108]	; (2f98 <socket+0xc8>)
    2f2a:	881a      	ldrh	r2, [r3, #0]
    2f2c:	b292      	uxth	r2, r2
    2f2e:	012b      	lsls	r3, r5, #4
    2f30:	4917      	ldr	r1, [pc, #92]	; (2f90 <socket+0xc0>)
    2f32:	18cb      	adds	r3, r1, r3
    2f34:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    2f36:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
    2f38:	07f3      	lsls	r3, r6, #31
    2f3a:	d526      	bpl.n	2f8a <socket+0xba>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    2f3c:	aa05      	add	r2, sp, #20
    2f3e:	7014      	strb	r4, [r2, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2f40:	012d      	lsls	r5, r5, #4
    2f42:	194d      	adds	r5, r1, r5
    2f44:	2321      	movs	r3, #33	; 0x21
    2f46:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2f48:	2300      	movs	r3, #0
    2f4a:	9302      	str	r3, [sp, #8]
    2f4c:	9301      	str	r3, [sp, #4]
    2f4e:	9300      	str	r3, [sp, #0]
    2f50:	3304      	adds	r3, #4
    2f52:	2150      	movs	r1, #80	; 0x50
    2f54:	2002      	movs	r0, #2
    2f56:	4d11      	ldr	r5, [pc, #68]	; (2f9c <socket+0xcc>)
    2f58:	47a8      	blx	r5
    2f5a:	e016      	b.n	2f8a <socket+0xba>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
    2f5c:	490c      	ldr	r1, [pc, #48]	; (2f90 <socket+0xc0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    2f5e:	3401      	adds	r4, #1
    2f60:	b2e4      	uxtb	r4, r4
    2f62:	4294      	cmp	r4, r2
    2f64:	d3c1      	bcc.n	2eea <socket+0x1a>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
    2f66:	2401      	movs	r4, #1
    2f68:	4264      	negs	r4, r4
    2f6a:	e00e      	b.n	2f8a <socket+0xba>
    2f6c:	2401      	movs	r4, #1
    2f6e:	4264      	negs	r4, r4
    2f70:	e00b      	b.n	2f8a <socket+0xba>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
    2f72:	2207      	movs	r2, #7
			u8Count = 0;
    2f74:	2400      	movs	r4, #0
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2f76:	0025      	movs	r5, r4
			if(pstrSock->bIsUsed == 0)
    2f78:	0123      	lsls	r3, r4, #4
    2f7a:	4905      	ldr	r1, [pc, #20]	; (2f90 <socket+0xc0>)
    2f7c:	18cb      	adds	r3, r1, r3
    2f7e:	7a9b      	ldrb	r3, [r3, #10]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1eb      	bne.n	2f5c <socket+0x8c>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2f84:	0120      	lsls	r0, r4, #4
    2f86:	1840      	adds	r0, r0, r1
    2f88:	e7b8      	b.n	2efc <socket+0x2c>
				break;
			}
		}
	}
	return sock;
}
    2f8a:	0020      	movs	r0, r4
    2f8c:	b006      	add	sp, #24
    2f8e:	bd70      	pop	{r4, r5, r6, pc}
    2f90:	20000240 	.word	0x20000240
    2f94:	000009a5 	.word	0x000009a5
    2f98:	200000ce 	.word	0x200000ce
    2f9c:	00000bad 	.word	0x00000bad

00002fa0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2fa0:	b570      	push	{r4, r5, r6, lr}
    2fa2:	b088      	sub	sp, #32
    2fa4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2fa6:	db2f      	blt.n	3008 <connect+0x68>
    2fa8:	2900      	cmp	r1, #0
    2faa:	d030      	beq.n	300e <connect+0x6e>
    2fac:	0103      	lsls	r3, r0, #4
    2fae:	481d      	ldr	r0, [pc, #116]	; (3024 <connect+0x84>)
    2fb0:	18c3      	adds	r3, r0, r3
    2fb2:	7a9b      	ldrb	r3, [r3, #10]
    2fb4:	2b01      	cmp	r3, #1
    2fb6:	d12d      	bne.n	3014 <connect+0x74>
    2fb8:	2a00      	cmp	r2, #0
    2fba:	d02e      	beq.n	301a <connect+0x7a>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2fbc:	0123      	lsls	r3, r4, #4
    2fbe:	18c3      	adds	r3, r0, r3
    2fc0:	7adb      	ldrb	r3, [r3, #11]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2fc2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2fc4:	07db      	lsls	r3, r3, #31
    2fc6:	d505      	bpl.n	2fd4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2fc8:	0123      	lsls	r3, r4, #4
    2fca:	18c3      	adds	r3, r0, r3
    2fcc:	7ada      	ldrb	r2, [r3, #11]
    2fce:	ab05      	add	r3, sp, #20
    2fd0:	725a      	strb	r2, [r3, #9]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2fd2:	3607      	adds	r6, #7
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    2fd4:	ad05      	add	r5, sp, #20
    2fd6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2fd8:	2208      	movs	r2, #8
    2fda:	0028      	movs	r0, r5
    2fdc:	4b12      	ldr	r3, [pc, #72]	; (3028 <connect+0x88>)
    2fde:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2fe0:	0124      	lsls	r4, r4, #4
    2fe2:	4b10      	ldr	r3, [pc, #64]	; (3024 <connect+0x84>)
    2fe4:	191c      	adds	r4, r3, r4
    2fe6:	88e3      	ldrh	r3, [r4, #6]
    2fe8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2fea:	2300      	movs	r3, #0
    2fec:	9302      	str	r3, [sp, #8]
    2fee:	9301      	str	r3, [sp, #4]
    2ff0:	9300      	str	r3, [sp, #0]
    2ff2:	330c      	adds	r3, #12
    2ff4:	002a      	movs	r2, r5
    2ff6:	0031      	movs	r1, r6
    2ff8:	2002      	movs	r0, #2
    2ffa:	4c0c      	ldr	r4, [pc, #48]	; (302c <connect+0x8c>)
    2ffc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2ffe:	2800      	cmp	r0, #0
    3000:	d00d      	beq.n	301e <connect+0x7e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3002:	2009      	movs	r0, #9
    3004:	4240      	negs	r0, r0
    3006:	e00a      	b.n	301e <connect+0x7e>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3008:	2006      	movs	r0, #6
    300a:	4240      	negs	r0, r0
    300c:	e007      	b.n	301e <connect+0x7e>
    300e:	2006      	movs	r0, #6
    3010:	4240      	negs	r0, r0
    3012:	e004      	b.n	301e <connect+0x7e>
    3014:	2006      	movs	r0, #6
    3016:	4240      	negs	r0, r0
    3018:	e001      	b.n	301e <connect+0x7e>
    301a:	2006      	movs	r0, #6
    301c:	4240      	negs	r0, r0
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
    301e:	b008      	add	sp, #32
    3020:	bd70      	pop	{r4, r5, r6, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	20000240 	.word	0x20000240
    3028:	00000991 	.word	0x00000991
    302c:	00000bad 	.word	0x00000bad

00003030 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3030:	b530      	push	{r4, r5, lr}
    3032:	b089      	sub	sp, #36	; 0x24
    3034:	000c      	movs	r4, r1
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3036:	2800      	cmp	r0, #0
    3038:	db33      	blt.n	30a2 <send+0x72>
    303a:	2900      	cmp	r1, #0
    303c:	d034      	beq.n	30a8 <send+0x78>
    303e:	23af      	movs	r3, #175	; 0xaf
    3040:	00db      	lsls	r3, r3, #3
    3042:	429a      	cmp	r2, r3
    3044:	d833      	bhi.n	30ae <send+0x7e>
    3046:	0103      	lsls	r3, r0, #4
    3048:	491d      	ldr	r1, [pc, #116]	; (30c0 <send+0x90>)
    304a:	18cb      	adds	r3, r1, r3
    304c:	7a9b      	ldrb	r3, [r3, #10]
    304e:	2b01      	cmp	r3, #1
    3050:	d130      	bne.n	30b4 <send+0x84>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3052:	a904      	add	r1, sp, #16
    3054:	7008      	strb	r0, [r1, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3056:	804a      	strh	r2, [r1, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3058:	0103      	lsls	r3, r0, #4
    305a:	4d19      	ldr	r5, [pc, #100]	; (30c0 <send+0x90>)
    305c:	18eb      	adds	r3, r5, r3
    305e:	88db      	ldrh	r3, [r3, #6]
    3060:	818b      	strh	r3, [r1, #12]
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3062:	2550      	movs	r5, #80	; 0x50

		strSend.sock			= sock;
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;

		if(sock >= TCP_SOCK_MAX)
    3064:	2806      	cmp	r0, #6
    3066:	dd00      	ble.n	306a <send+0x3a>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3068:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    306a:	0103      	lsls	r3, r0, #4
    306c:	4914      	ldr	r1, [pc, #80]	; (30c0 <send+0x90>)
    306e:	18cb      	adds	r3, r1, r3
    3070:	7adb      	ldrb	r3, [r3, #11]
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    3072:	2145      	movs	r1, #69	; 0x45

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3074:	07db      	lsls	r3, r3, #31
    3076:	d505      	bpl.n	3084 <send+0x54>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3078:	0100      	lsls	r0, r0, #4
    307a:	4b11      	ldr	r3, [pc, #68]	; (30c0 <send+0x90>)
    307c:	1818      	adds	r0, r3, r0
    307e:	8905      	ldrh	r5, [r0, #8]
    3080:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3082:	3107      	adds	r1, #7
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3084:	2380      	movs	r3, #128	; 0x80
    3086:	4319      	orrs	r1, r3
    3088:	9502      	str	r5, [sp, #8]
    308a:	9201      	str	r2, [sp, #4]
    308c:	9400      	str	r4, [sp, #0]
    308e:	3b70      	subs	r3, #112	; 0x70
    3090:	aa04      	add	r2, sp, #16
    3092:	2002      	movs	r0, #2
    3094:	4c0b      	ldr	r4, [pc, #44]	; (30c4 <send+0x94>)
    3096:	47a0      	blx	r4
    3098:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    309a:	2800      	cmp	r0, #0
    309c:	d00c      	beq.n	30b8 <send+0x88>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    309e:	3b0e      	subs	r3, #14
    30a0:	e00a      	b.n	30b8 <send+0x88>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30a2:	2306      	movs	r3, #6
    30a4:	425b      	negs	r3, r3
    30a6:	e007      	b.n	30b8 <send+0x88>
    30a8:	2306      	movs	r3, #6
    30aa:	425b      	negs	r3, r3
    30ac:	e004      	b.n	30b8 <send+0x88>
    30ae:	2306      	movs	r3, #6
    30b0:	425b      	negs	r3, r3
    30b2:	e001      	b.n	30b8 <send+0x88>
    30b4:	2306      	movs	r3, #6
    30b6:	425b      	negs	r3, r3
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
    30b8:	0018      	movs	r0, r3
    30ba:	b009      	add	sp, #36	; 0x24
    30bc:	bd30      	pop	{r4, r5, pc}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	20000240 	.word	0x20000240
    30c4:	00000bad 	.word	0x00000bad

000030c8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    30c8:	b530      	push	{r4, r5, lr}
    30ca:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    30cc:	2800      	cmp	r0, #0
    30ce:	db33      	blt.n	3138 <recv+0x70>
    30d0:	2900      	cmp	r1, #0
    30d2:	d034      	beq.n	313e <recv+0x76>
    30d4:	2a00      	cmp	r2, #0
    30d6:	d035      	beq.n	3144 <recv+0x7c>
    30d8:	0104      	lsls	r4, r0, #4
    30da:	4d1e      	ldr	r5, [pc, #120]	; (3154 <recv+0x8c>)
    30dc:	192c      	adds	r4, r5, r4
    30de:	7aa4      	ldrb	r4, [r4, #10]
    30e0:	2c01      	cmp	r4, #1
    30e2:	d132      	bne.n	314a <recv+0x82>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    30e4:	0104      	lsls	r4, r0, #4
    30e6:	5161      	str	r1, [r4, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    30e8:	1929      	adds	r1, r5, r4
    30ea:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    30ec:	7b09      	ldrb	r1, [r1, #12]
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    30ee:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    30f0:	2900      	cmp	r1, #0
    30f2:	d12c      	bne.n	314e <recv+0x86>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    30f4:	192a      	adds	r2, r5, r4
    30f6:	2101      	movs	r1, #1
    30f8:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    30fa:	7ad2      	ldrb	r2, [r2, #11]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    30fc:	3145      	adds	r1, #69	; 0x45

			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    30fe:	07d2      	lsls	r2, r2, #31
    3100:	d500      	bpl.n	3104 <recv+0x3c>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3102:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3104:	2b00      	cmp	r3, #0
    3106:	d102      	bne.n	310e <recv+0x46>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3108:	3b01      	subs	r3, #1
    310a:	9304      	str	r3, [sp, #16]
    310c:	e000      	b.n	3110 <recv+0x48>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    310e:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    3110:	aa04      	add	r2, sp, #16
    3112:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3114:	0100      	lsls	r0, r0, #4
    3116:	4b0f      	ldr	r3, [pc, #60]	; (3154 <recv+0x8c>)
    3118:	1818      	adds	r0, r3, r0
    311a:	88c3      	ldrh	r3, [r0, #6]
    311c:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    311e:	2300      	movs	r3, #0
    3120:	9302      	str	r3, [sp, #8]
    3122:	9301      	str	r3, [sp, #4]
    3124:	9300      	str	r3, [sp, #0]
    3126:	3308      	adds	r3, #8
    3128:	2002      	movs	r0, #2
    312a:	4c0b      	ldr	r4, [pc, #44]	; (3158 <recv+0x90>)
    312c:	47a0      	blx	r4
    312e:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3130:	2800      	cmp	r0, #0
    3132:	d00c      	beq.n	314e <recv+0x86>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3134:	3a0e      	subs	r2, #14
    3136:	e00a      	b.n	314e <recv+0x86>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3138:	2206      	movs	r2, #6
    313a:	4252      	negs	r2, r2
    313c:	e007      	b.n	314e <recv+0x86>
    313e:	2206      	movs	r2, #6
    3140:	4252      	negs	r2, r2
    3142:	e004      	b.n	314e <recv+0x86>
    3144:	2206      	movs	r2, #6
    3146:	4252      	negs	r2, r2
    3148:	e001      	b.n	314e <recv+0x86>
    314a:	2206      	movs	r2, #6
    314c:	4252      	negs	r2, r2
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    314e:	0010      	movs	r0, r2
    3150:	b007      	add	sp, #28
    3152:	bd30      	pop	{r4, r5, pc}
    3154:	20000240 	.word	0x20000240
    3158:	00000bad 	.word	0x00000bad

0000315c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    315c:	b530      	push	{r4, r5, lr}
    315e:	b087      	sub	sp, #28
    3160:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3162:	db29      	blt.n	31b8 <close+0x5c>
    3164:	0103      	lsls	r3, r0, #4
    3166:	4a18      	ldr	r2, [pc, #96]	; (31c8 <close+0x6c>)
    3168:	18d3      	adds	r3, r2, r3
    316a:	7a9b      	ldrb	r3, [r3, #10]
    316c:	2b01      	cmp	r3, #1
    316e:	d126      	bne.n	31be <close+0x62>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3170:	a905      	add	r1, sp, #20
    3172:	7008      	strb	r0, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3174:	0102      	lsls	r2, r0, #4
    3176:	4b14      	ldr	r3, [pc, #80]	; (31c8 <close+0x6c>)
    3178:	189b      	adds	r3, r3, r2
    317a:	88da      	ldrh	r2, [r3, #6]
    317c:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    317e:	2200      	movs	r2, #0
    3180:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3182:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3184:	7adb      	ldrb	r3, [r3, #11]
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3186:	2149      	movs	r1, #73	; 0x49
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
		gastrSockets[sock].u16SessionID =0;
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3188:	07db      	lsls	r3, r3, #31
    318a:	d500      	bpl.n	318e <close+0x32>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    318c:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    318e:	2300      	movs	r3, #0
    3190:	9302      	str	r3, [sp, #8]
    3192:	9301      	str	r3, [sp, #4]
    3194:	9300      	str	r3, [sp, #0]
    3196:	3304      	adds	r3, #4
    3198:	aa05      	add	r2, sp, #20
    319a:	2002      	movs	r0, #2
    319c:	4d0b      	ldr	r5, [pc, #44]	; (31cc <close+0x70>)
    319e:	47a8      	blx	r5
    31a0:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    31a2:	d001      	beq.n	31a8 <close+0x4c>
		{
			s8Ret = SOCK_ERR_INVALID;
    31a4:	2509      	movs	r5, #9
    31a6:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    31a8:	0124      	lsls	r4, r4, #4
    31aa:	4807      	ldr	r0, [pc, #28]	; (31c8 <close+0x6c>)
    31ac:	1820      	adds	r0, r4, r0
    31ae:	2210      	movs	r2, #16
    31b0:	2100      	movs	r1, #0
    31b2:	4b07      	ldr	r3, [pc, #28]	; (31d0 <close+0x74>)
    31b4:	4798      	blx	r3
    31b6:	e004      	b.n	31c2 <close+0x66>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    31b8:	2506      	movs	r5, #6
    31ba:	426d      	negs	r5, r5
    31bc:	e001      	b.n	31c2 <close+0x66>
    31be:	2506      	movs	r5, #6
    31c0:	426d      	negs	r5, r5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
    31c2:	0028      	movs	r0, r5
    31c4:	b007      	add	sp, #28
    31c6:	bd30      	pop	{r4, r5, pc}
    31c8:	20000240 	.word	0x20000240
    31cc:	00000bad 	.word	0x00000bad
    31d0:	000009a5 	.word	0x000009a5

000031d4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    31d4:	b510      	push	{r4, lr}
    31d6:	b084      	sub	sp, #16
    31d8:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    31da:	4b0d      	ldr	r3, [pc, #52]	; (3210 <gethostbyname+0x3c>)
    31dc:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    31de:	b2c3      	uxtb	r3, r0
    31e0:	2b40      	cmp	r3, #64	; 0x40
    31e2:	d810      	bhi.n	3206 <gethostbyname+0x32>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    31e4:	23ff      	movs	r3, #255	; 0xff
    31e6:	4018      	ands	r0, r3
    31e8:	1c43      	adds	r3, r0, #1
    31ea:	2200      	movs	r2, #0
    31ec:	9202      	str	r2, [sp, #8]
    31ee:	9201      	str	r2, [sp, #4]
    31f0:	9200      	str	r2, [sp, #0]
    31f2:	0022      	movs	r2, r4
    31f4:	21ca      	movs	r1, #202	; 0xca
    31f6:	2002      	movs	r0, #2
    31f8:	4c06      	ldr	r4, [pc, #24]	; (3214 <gethostbyname+0x40>)
    31fa:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
    31fc:	2800      	cmp	r0, #0
    31fe:	d004      	beq.n	320a <gethostbyname+0x36>
		{
			s8Err = SOCK_ERR_INVALID;
    3200:	2009      	movs	r0, #9
    3202:	4240      	negs	r0, r0
    3204:	e001      	b.n	320a <gethostbyname+0x36>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3206:	2006      	movs	r0, #6
    3208:	4240      	negs	r0, r0
		{
			s8Err = SOCK_ERR_INVALID;
		}
	}
	return s8Err;
}
    320a:	b004      	add	sp, #16
    320c:	bd10      	pop	{r4, pc}
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	000009b5 	.word	0x000009b5
    3214:	00000bad 	.word	0x00000bad

00003218 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    3218:	b570      	push	{r4, r5, r6, lr}
    321a:	b082      	sub	sp, #8
    321c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    321e:	4b29      	ldr	r3, [pc, #164]	; (32c4 <spi_flash_enable+0xac>)
    3220:	4798      	blx	r3
    3222:	0500      	lsls	r0, r0, #20
    3224:	0d00      	lsrs	r0, r0, #20
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
    3226:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3228:	4b27      	ldr	r3, [pc, #156]	; (32c8 <spi_flash_enable+0xb0>)
    322a:	4298      	cmp	r0, r3
    322c:	d947      	bls.n	32be <spi_flash_enable+0xa6>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    322e:	a901      	add	r1, sp, #4
    3230:	4826      	ldr	r0, [pc, #152]	; (32cc <spi_flash_enable+0xb4>)
    3232:	4b27      	ldr	r3, [pc, #156]	; (32d0 <spi_flash_enable+0xb8>)
    3234:	4798      	blx	r3
    3236:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3238:	d141      	bne.n	32be <spi_flash_enable+0xa6>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
    323a:	4926      	ldr	r1, [pc, #152]	; (32d4 <spi_flash_enable+0xbc>)
    323c:	9b01      	ldr	r3, [sp, #4]
    323e:	4019      	ands	r1, r3
    3240:	4b25      	ldr	r3, [pc, #148]	; (32d8 <spi_flash_enable+0xc0>)
    3242:	4319      	orrs	r1, r3
    3244:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3246:	4821      	ldr	r0, [pc, #132]	; (32cc <spi_flash_enable+0xb4>)
    3248:	4b24      	ldr	r3, [pc, #144]	; (32dc <spi_flash_enable+0xc4>)
    324a:	4798      	blx	r3
		if(enable) {
    324c:	2c00      	cmp	r4, #0
    324e:	d016      	beq.n	327e <spi_flash_enable+0x66>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3250:	2100      	movs	r1, #0
    3252:	4823      	ldr	r0, [pc, #140]	; (32e0 <spi_flash_enable+0xc8>)
    3254:	4c21      	ldr	r4, [pc, #132]	; (32dc <spi_flash_enable+0xc4>)
    3256:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3258:	21ab      	movs	r1, #171	; 0xab
    325a:	4822      	ldr	r0, [pc, #136]	; (32e4 <spi_flash_enable+0xcc>)
    325c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    325e:	2101      	movs	r1, #1
    3260:	4821      	ldr	r0, [pc, #132]	; (32e8 <spi_flash_enable+0xd0>)
    3262:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3264:	2100      	movs	r1, #0
    3266:	4821      	ldr	r0, [pc, #132]	; (32ec <spi_flash_enable+0xd4>)
    3268:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    326a:	2181      	movs	r1, #129	; 0x81
    326c:	4820      	ldr	r0, [pc, #128]	; (32f0 <spi_flash_enable+0xd8>)
    326e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3270:	4e20      	ldr	r6, [pc, #128]	; (32f4 <spi_flash_enable+0xdc>)
    3272:	4c21      	ldr	r4, [pc, #132]	; (32f8 <spi_flash_enable+0xe0>)
    3274:	0030      	movs	r0, r6
    3276:	47a0      	blx	r4
    3278:	2801      	cmp	r0, #1
    327a:	d1fb      	bne.n	3274 <spi_flash_enable+0x5c>
    327c:	e015      	b.n	32aa <spi_flash_enable+0x92>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    327e:	2100      	movs	r1, #0
    3280:	4817      	ldr	r0, [pc, #92]	; (32e0 <spi_flash_enable+0xc8>)
    3282:	4c16      	ldr	r4, [pc, #88]	; (32dc <spi_flash_enable+0xc4>)
    3284:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3286:	21b9      	movs	r1, #185	; 0xb9
    3288:	4816      	ldr	r0, [pc, #88]	; (32e4 <spi_flash_enable+0xcc>)
    328a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    328c:	2101      	movs	r1, #1
    328e:	4816      	ldr	r0, [pc, #88]	; (32e8 <spi_flash_enable+0xd0>)
    3290:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3292:	2100      	movs	r1, #0
    3294:	4815      	ldr	r0, [pc, #84]	; (32ec <spi_flash_enable+0xd4>)
    3296:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3298:	2181      	movs	r1, #129	; 0x81
    329a:	4815      	ldr	r0, [pc, #84]	; (32f0 <spi_flash_enable+0xd8>)
    329c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    329e:	4e15      	ldr	r6, [pc, #84]	; (32f4 <spi_flash_enable+0xdc>)
    32a0:	4c15      	ldr	r4, [pc, #84]	; (32f8 <spi_flash_enable+0xe0>)
    32a2:	0030      	movs	r0, r6
    32a4:	47a0      	blx	r4
    32a6:	2801      	cmp	r0, #1
    32a8:	d1fb      	bne.n	32a2 <spi_flash_enable+0x8a>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
    32aa:	490a      	ldr	r1, [pc, #40]	; (32d4 <spi_flash_enable+0xbc>)
    32ac:	9b01      	ldr	r3, [sp, #4]
    32ae:	4019      	ands	r1, r3
    32b0:	2380      	movs	r3, #128	; 0x80
    32b2:	025b      	lsls	r3, r3, #9
    32b4:	4319      	orrs	r1, r3
    32b6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    32b8:	4804      	ldr	r0, [pc, #16]	; (32cc <spi_flash_enable+0xb4>)
    32ba:	4b08      	ldr	r3, [pc, #32]	; (32dc <spi_flash_enable+0xc4>)
    32bc:	4798      	blx	r3
	}
ERR1:
	return s8Ret;
}
    32be:	0028      	movs	r0, r5
    32c0:	b002      	add	sp, #8
    32c2:	bd70      	pop	{r4, r5, r6, pc}
    32c4:	00001b11 	.word	0x00001b11
    32c8:	0000039f 	.word	0x0000039f
    32cc:	00001410 	.word	0x00001410
    32d0:	00001e25 	.word	0x00001e25
    32d4:	f8888fff 	.word	0xf8888fff
    32d8:	01111000 	.word	0x01111000
    32dc:	00001e31 	.word	0x00001e31
    32e0:	00010208 	.word	0x00010208
    32e4:	0001020c 	.word	0x0001020c
    32e8:	00010214 	.word	0x00010214
    32ec:	0001021c 	.word	0x0001021c
    32f0:	00010204 	.word	0x00010204
    32f4:	00010218 	.word	0x00010218
    32f8:	00001e19 	.word	0x00001e19

000032fc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    32fc:	4b0c      	ldr	r3, [pc, #48]	; (3330 <cpu_irq_enter_critical+0x34>)
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	2b00      	cmp	r3, #0
    3302:	d110      	bne.n	3326 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3304:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3308:	2b00      	cmp	r3, #0
    330a:	d109      	bne.n	3320 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    330c:	b672      	cpsid	i
    330e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3312:	2200      	movs	r2, #0
    3314:	4b07      	ldr	r3, [pc, #28]	; (3334 <cpu_irq_enter_critical+0x38>)
    3316:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3318:	3201      	adds	r2, #1
    331a:	4b07      	ldr	r3, [pc, #28]	; (3338 <cpu_irq_enter_critical+0x3c>)
    331c:	701a      	strb	r2, [r3, #0]
    331e:	e002      	b.n	3326 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3320:	2200      	movs	r2, #0
    3322:	4b05      	ldr	r3, [pc, #20]	; (3338 <cpu_irq_enter_critical+0x3c>)
    3324:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3326:	4a02      	ldr	r2, [pc, #8]	; (3330 <cpu_irq_enter_critical+0x34>)
    3328:	6813      	ldr	r3, [r2, #0]
    332a:	3301      	adds	r3, #1
    332c:	6013      	str	r3, [r2, #0]
}
    332e:	4770      	bx	lr
    3330:	200000d0 	.word	0x200000d0
    3334:	20000010 	.word	0x20000010
    3338:	200000d4 	.word	0x200000d4

0000333c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    333c:	4b08      	ldr	r3, [pc, #32]	; (3360 <cpu_irq_leave_critical+0x24>)
    333e:	681a      	ldr	r2, [r3, #0]
    3340:	3a01      	subs	r2, #1
    3342:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3344:	681b      	ldr	r3, [r3, #0]
    3346:	2b00      	cmp	r3, #0
    3348:	d109      	bne.n	335e <cpu_irq_leave_critical+0x22>
    334a:	4b06      	ldr	r3, [pc, #24]	; (3364 <cpu_irq_leave_critical+0x28>)
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	2b00      	cmp	r3, #0
    3350:	d005      	beq.n	335e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3352:	2201      	movs	r2, #1
    3354:	4b04      	ldr	r3, [pc, #16]	; (3368 <cpu_irq_leave_critical+0x2c>)
    3356:	701a      	strb	r2, [r3, #0]
    3358:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    335c:	b662      	cpsie	i
	}
}
    335e:	4770      	bx	lr
    3360:	200000d0 	.word	0x200000d0
    3364:	200000d4 	.word	0x200000d4
    3368:	20000010 	.word	0x20000010

0000336c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    336c:	b5f0      	push	{r4, r5, r6, r7, lr}
    336e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3370:	ac01      	add	r4, sp, #4
    3372:	2501      	movs	r5, #1
    3374:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3376:	2700      	movs	r7, #0
    3378:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    337a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    337c:	0021      	movs	r1, r4
    337e:	203e      	movs	r0, #62	; 0x3e
    3380:	4e06      	ldr	r6, [pc, #24]	; (339c <system_board_init+0x30>)
    3382:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3384:	2280      	movs	r2, #128	; 0x80
    3386:	05d2      	lsls	r2, r2, #23
    3388:	4b05      	ldr	r3, [pc, #20]	; (33a0 <system_board_init+0x34>)
    338a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    338c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    338e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3390:	0021      	movs	r1, r4
    3392:	200f      	movs	r0, #15
    3394:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3396:	b003      	add	sp, #12
    3398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00003585 	.word	0x00003585
    33a0:	41004480 	.word	0x41004480

000033a4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33a4:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    33a6:	2a00      	cmp	r2, #0
    33a8:	d10d      	bne.n	33c6 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    33aa:	008b      	lsls	r3, r1, #2
    33ac:	4a07      	ldr	r2, [pc, #28]	; (33cc <extint_register_callback+0x28>)
    33ae:	589b      	ldr	r3, [r3, r2]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d103      	bne.n	33bc <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    33b4:	0089      	lsls	r1, r1, #2
    33b6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    33b8:	2300      	movs	r3, #0
    33ba:	e004      	b.n	33c6 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    33bc:	4283      	cmp	r3, r0
    33be:	d001      	beq.n	33c4 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    33c0:	231d      	movs	r3, #29
    33c2:	e000      	b.n	33c6 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    33c4:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    33c6:	0018      	movs	r0, r3
    33c8:	4770      	bx	lr
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	20000300 	.word	0x20000300

000033d0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33d0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    33d2:	2900      	cmp	r1, #0
    33d4:	d107      	bne.n	33e6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    33d6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    33d8:	281f      	cmp	r0, #31
    33da:	d800      	bhi.n	33de <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    33dc:	4a03      	ldr	r2, [pc, #12]	; (33ec <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    33de:	2301      	movs	r3, #1
    33e0:	4083      	lsls	r3, r0
    33e2:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    33e4:	2300      	movs	r3, #0
}
    33e6:	0018      	movs	r0, r3
    33e8:	4770      	bx	lr
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	40001800 	.word	0x40001800

000033f0 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33f0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    33f2:	2900      	cmp	r1, #0
    33f4:	d107      	bne.n	3406 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    33f6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    33f8:	281f      	cmp	r0, #31
    33fa:	d800      	bhi.n	33fe <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    33fc:	4a03      	ldr	r2, [pc, #12]	; (340c <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    33fe:	2301      	movs	r3, #1
    3400:	4083      	lsls	r3, r0
    3402:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3404:	2300      	movs	r3, #0
}
    3406:	0018      	movs	r0, r3
    3408:	4770      	bx	lr
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	40001800 	.word	0x40001800

00003410 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3410:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3412:	2200      	movs	r2, #0
    3414:	4b15      	ldr	r3, [pc, #84]	; (346c <EIC_Handler+0x5c>)
    3416:	701a      	strb	r2, [r3, #0]
    3418:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    341a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    341c:	4e14      	ldr	r6, [pc, #80]	; (3470 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    341e:	4c13      	ldr	r4, [pc, #76]	; (346c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3420:	2b1f      	cmp	r3, #31
    3422:	d919      	bls.n	3458 <EIC_Handler+0x48>
    3424:	e00f      	b.n	3446 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3426:	2100      	movs	r1, #0
    3428:	e000      	b.n	342c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    342a:	4912      	ldr	r1, [pc, #72]	; (3474 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    342c:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    342e:	009b      	lsls	r3, r3, #2
    3430:	599b      	ldr	r3, [r3, r6]
    3432:	2b00      	cmp	r3, #0
    3434:	d000      	beq.n	3438 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3436:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3438:	7823      	ldrb	r3, [r4, #0]
    343a:	3301      	adds	r3, #1
    343c:	b2db      	uxtb	r3, r3
    343e:	7023      	strb	r3, [r4, #0]
    3440:	2b0f      	cmp	r3, #15
    3442:	d9ed      	bls.n	3420 <EIC_Handler+0x10>
    3444:	e011      	b.n	346a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3446:	0029      	movs	r1, r5
    3448:	4019      	ands	r1, r3
    344a:	2201      	movs	r2, #1
    344c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    344e:	2100      	movs	r1, #0
    3450:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3452:	4211      	tst	r1, r2
    3454:	d1e7      	bne.n	3426 <EIC_Handler+0x16>
    3456:	e7ef      	b.n	3438 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3458:	0029      	movs	r1, r5
    345a:	4019      	ands	r1, r3
    345c:	2201      	movs	r2, #1
    345e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3460:	4904      	ldr	r1, [pc, #16]	; (3474 <EIC_Handler+0x64>)
    3462:	6909      	ldr	r1, [r1, #16]
    3464:	4211      	tst	r1, r2
    3466:	d1e0      	bne.n	342a <EIC_Handler+0x1a>
    3468:	e7e6      	b.n	3438 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    346a:	bd70      	pop	{r4, r5, r6, pc}
    346c:	200002fc 	.word	0x200002fc
    3470:	20000300 	.word	0x20000300
    3474:	40001800 	.word	0x40001800

00003478 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3478:	4a04      	ldr	r2, [pc, #16]	; (348c <_extint_enable+0x14>)
    347a:	7811      	ldrb	r1, [r2, #0]
    347c:	2302      	movs	r3, #2
    347e:	430b      	orrs	r3, r1
    3480:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3482:	7853      	ldrb	r3, [r2, #1]
    3484:	b25b      	sxtb	r3, r3
    3486:	2b00      	cmp	r3, #0
    3488:	dbfb      	blt.n	3482 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    348a:	4770      	bx	lr
    348c:	40001800 	.word	0x40001800

00003490 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3490:	b500      	push	{lr}
    3492:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3494:	4a12      	ldr	r2, [pc, #72]	; (34e0 <_system_extint_init+0x50>)
    3496:	6991      	ldr	r1, [r2, #24]
    3498:	2340      	movs	r3, #64	; 0x40
    349a:	430b      	orrs	r3, r1
    349c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    349e:	a901      	add	r1, sp, #4
    34a0:	2300      	movs	r3, #0
    34a2:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    34a4:	2005      	movs	r0, #5
    34a6:	4b0f      	ldr	r3, [pc, #60]	; (34e4 <_system_extint_init+0x54>)
    34a8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    34aa:	2005      	movs	r0, #5
    34ac:	4b0e      	ldr	r3, [pc, #56]	; (34e8 <_system_extint_init+0x58>)
    34ae:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    34b0:	4a0e      	ldr	r2, [pc, #56]	; (34ec <_system_extint_init+0x5c>)
    34b2:	7811      	ldrb	r1, [r2, #0]
    34b4:	2301      	movs	r3, #1
    34b6:	430b      	orrs	r3, r1
    34b8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    34ba:	7853      	ldrb	r3, [r2, #1]
    34bc:	b25b      	sxtb	r3, r3
    34be:	2b00      	cmp	r3, #0
    34c0:	dbfb      	blt.n	34ba <_system_extint_init+0x2a>
    34c2:	4b0b      	ldr	r3, [pc, #44]	; (34f0 <_system_extint_init+0x60>)
    34c4:	0019      	movs	r1, r3
    34c6:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    34c8:	2200      	movs	r2, #0
    34ca:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    34cc:	4299      	cmp	r1, r3
    34ce:	d1fc      	bne.n	34ca <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34d0:	2210      	movs	r2, #16
    34d2:	4b08      	ldr	r3, [pc, #32]	; (34f4 <_system_extint_init+0x64>)
    34d4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    34d6:	4b08      	ldr	r3, [pc, #32]	; (34f8 <_system_extint_init+0x68>)
    34d8:	4798      	blx	r3
}
    34da:	b003      	add	sp, #12
    34dc:	bd00      	pop	{pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	40000400 	.word	0x40000400
    34e4:	00004aa5 	.word	0x00004aa5
    34e8:	00004a19 	.word	0x00004a19
    34ec:	40001800 	.word	0x40001800
    34f0:	20000300 	.word	0x20000300
    34f4:	e000e100 	.word	0xe000e100
    34f8:	00003479 	.word	0x00003479

000034fc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    34fc:	2300      	movs	r3, #0
    34fe:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3500:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3502:	2201      	movs	r2, #1
    3504:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    3506:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    3508:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    350a:	3302      	adds	r3, #2
    350c:	72c3      	strb	r3, [r0, #11]
}
    350e:	4770      	bx	lr

00003510 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3510:	b5f0      	push	{r4, r5, r6, r7, lr}
    3512:	b083      	sub	sp, #12
    3514:	0005      	movs	r5, r0
    3516:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3518:	a901      	add	r1, sp, #4
    351a:	2300      	movs	r3, #0
    351c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    351e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3520:	7923      	ldrb	r3, [r4, #4]
    3522:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3524:	7a23      	ldrb	r3, [r4, #8]
    3526:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3528:	7820      	ldrb	r0, [r4, #0]
    352a:	4b14      	ldr	r3, [pc, #80]	; (357c <extint_chan_set_config+0x6c>)
    352c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    352e:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3530:	2d1f      	cmp	r5, #31
    3532:	d800      	bhi.n	3536 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3534:	4812      	ldr	r0, [pc, #72]	; (3580 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    3536:	2107      	movs	r1, #7
    3538:	4029      	ands	r1, r5
    353a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    353c:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    353e:	7aa3      	ldrb	r3, [r4, #10]
    3540:	2b00      	cmp	r3, #0
    3542:	d001      	beq.n	3548 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    3544:	2308      	movs	r3, #8
    3546:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    3548:	08eb      	lsrs	r3, r5, #3
    354a:	009b      	lsls	r3, r3, #2
    354c:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    354e:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3550:	270f      	movs	r7, #15
    3552:	408f      	lsls	r7, r1
    3554:	43be      	bics	r6, r7
    3556:	408a      	lsls	r2, r1
    3558:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    355a:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    355c:	7a63      	ldrb	r3, [r4, #9]
    355e:	2b00      	cmp	r3, #0
    3560:	d005      	beq.n	356e <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    3562:	6942      	ldr	r2, [r0, #20]
    3564:	2301      	movs	r3, #1
    3566:	40ab      	lsls	r3, r5
    3568:	4313      	orrs	r3, r2
    356a:	6143      	str	r3, [r0, #20]
    356c:	e004      	b.n	3578 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    356e:	6943      	ldr	r3, [r0, #20]
    3570:	2201      	movs	r2, #1
    3572:	40aa      	lsls	r2, r5
    3574:	4393      	bics	r3, r2
    3576:	6143      	str	r3, [r0, #20]
	}
}
    3578:	b003      	add	sp, #12
    357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    357c:	00004b9d 	.word	0x00004b9d
    3580:	40001800 	.word	0x40001800

00003584 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3584:	b500      	push	{lr}
    3586:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3588:	ab01      	add	r3, sp, #4
    358a:	2280      	movs	r2, #128	; 0x80
    358c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    358e:	780a      	ldrb	r2, [r1, #0]
    3590:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3592:	784a      	ldrb	r2, [r1, #1]
    3594:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3596:	788a      	ldrb	r2, [r1, #2]
    3598:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    359a:	0019      	movs	r1, r3
    359c:	4b01      	ldr	r3, [pc, #4]	; (35a4 <port_pin_set_config+0x20>)
    359e:	4798      	blx	r3
}
    35a0:	b003      	add	sp, #12
    35a2:	bd00      	pop	{pc}
    35a4:	00004b9d 	.word	0x00004b9d

000035a8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    35a8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    35aa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35ac:	2340      	movs	r3, #64	; 0x40
    35ae:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    35b0:	4281      	cmp	r1, r0
    35b2:	d201      	bcs.n	35b8 <_sercom_get_sync_baud_val+0x10>
    35b4:	e00a      	b.n	35cc <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    35b6:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    35b8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    35ba:	1c63      	adds	r3, r4, #1
    35bc:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    35be:	4288      	cmp	r0, r1
    35c0:	d9f9      	bls.n	35b6 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35c2:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    35c4:	2cff      	cmp	r4, #255	; 0xff
    35c6:	d801      	bhi.n	35cc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    35c8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    35ca:	2300      	movs	r3, #0
	}
}
    35cc:	0018      	movs	r0, r3
    35ce:	bd10      	pop	{r4, pc}

000035d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    35d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35d2:	465f      	mov	r7, fp
    35d4:	4656      	mov	r6, sl
    35d6:	464d      	mov	r5, r9
    35d8:	4644      	mov	r4, r8
    35da:	b4f0      	push	{r4, r5, r6, r7}
    35dc:	b089      	sub	sp, #36	; 0x24
    35de:	000c      	movs	r4, r1
    35e0:	9205      	str	r2, [sp, #20]
    35e2:	aa12      	add	r2, sp, #72	; 0x48
    35e4:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35e6:	0002      	movs	r2, r0
    35e8:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35ea:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35ec:	42a2      	cmp	r2, r4
    35ee:	d900      	bls.n	35f2 <_sercom_get_async_baud_val+0x22>
    35f0:	e0c6      	b.n	3780 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    35f2:	2b00      	cmp	r3, #0
    35f4:	d151      	bne.n	369a <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    35f6:	0002      	movs	r2, r0
    35f8:	0008      	movs	r0, r1
    35fa:	2100      	movs	r1, #0
    35fc:	4d64      	ldr	r5, [pc, #400]	; (3790 <_sercom_get_async_baud_val+0x1c0>)
    35fe:	47a8      	blx	r5
    3600:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3602:	0026      	movs	r6, r4
    3604:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3606:	2300      	movs	r3, #0
    3608:	2400      	movs	r4, #0
    360a:	9300      	str	r3, [sp, #0]
    360c:	9401      	str	r4, [sp, #4]
    360e:	2200      	movs	r2, #0
    3610:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3612:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3614:	2120      	movs	r1, #32
    3616:	468c      	mov	ip, r1
    3618:	391f      	subs	r1, #31
    361a:	9602      	str	r6, [sp, #8]
    361c:	9703      	str	r7, [sp, #12]
    361e:	2420      	movs	r4, #32
    3620:	4264      	negs	r4, r4
    3622:	1904      	adds	r4, r0, r4
    3624:	d403      	bmi.n	362e <_sercom_get_async_baud_val+0x5e>
    3626:	000d      	movs	r5, r1
    3628:	40a5      	lsls	r5, r4
    362a:	46a8      	mov	r8, r5
    362c:	e004      	b.n	3638 <_sercom_get_async_baud_val+0x68>
    362e:	4664      	mov	r4, ip
    3630:	1a24      	subs	r4, r4, r0
    3632:	000d      	movs	r5, r1
    3634:	40e5      	lsrs	r5, r4
    3636:	46a8      	mov	r8, r5
    3638:	000c      	movs	r4, r1
    363a:	4084      	lsls	r4, r0
    363c:	46a1      	mov	r9, r4

		r = r << 1;
    363e:	0014      	movs	r4, r2
    3640:	001d      	movs	r5, r3
    3642:	18a4      	adds	r4, r4, r2
    3644:	415d      	adcs	r5, r3
    3646:	0022      	movs	r2, r4
    3648:	002b      	movs	r3, r5

		if (n & bit_shift) {
    364a:	4646      	mov	r6, r8
    364c:	465f      	mov	r7, fp
    364e:	423e      	tst	r6, r7
    3650:	d003      	beq.n	365a <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    3652:	000e      	movs	r6, r1
    3654:	4326      	orrs	r6, r4
    3656:	0032      	movs	r2, r6
    3658:	002b      	movs	r3, r5
		}

		if (r >= d) {
    365a:	9c02      	ldr	r4, [sp, #8]
    365c:	9d03      	ldr	r5, [sp, #12]
    365e:	429d      	cmp	r5, r3
    3660:	d80f      	bhi.n	3682 <_sercom_get_async_baud_val+0xb2>
    3662:	d101      	bne.n	3668 <_sercom_get_async_baud_val+0x98>
    3664:	4294      	cmp	r4, r2
    3666:	d80c      	bhi.n	3682 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    3668:	9c02      	ldr	r4, [sp, #8]
    366a:	9d03      	ldr	r5, [sp, #12]
    366c:	1b12      	subs	r2, r2, r4
    366e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3670:	464d      	mov	r5, r9
    3672:	9e00      	ldr	r6, [sp, #0]
    3674:	9f01      	ldr	r7, [sp, #4]
    3676:	4335      	orrs	r5, r6
    3678:	003c      	movs	r4, r7
    367a:	4646      	mov	r6, r8
    367c:	4334      	orrs	r4, r6
    367e:	9500      	str	r5, [sp, #0]
    3680:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3682:	3801      	subs	r0, #1
    3684:	d2cb      	bcs.n	361e <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    3686:	2200      	movs	r2, #0
    3688:	2301      	movs	r3, #1
    368a:	9800      	ldr	r0, [sp, #0]
    368c:	9901      	ldr	r1, [sp, #4]
    368e:	1a12      	subs	r2, r2, r0
    3690:	418b      	sbcs	r3, r1
    3692:	0c12      	lsrs	r2, r2, #16
    3694:	041b      	lsls	r3, r3, #16
    3696:	431a      	orrs	r2, r3
    3698:	e06f      	b.n	377a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    369a:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    369c:	2b01      	cmp	r3, #1
    369e:	d16c      	bne.n	377a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    36a0:	0f63      	lsrs	r3, r4, #29
    36a2:	9304      	str	r3, [sp, #16]
    36a4:	00e3      	lsls	r3, r4, #3
    36a6:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    36a8:	000a      	movs	r2, r1
    36aa:	2300      	movs	r3, #0
    36ac:	2100      	movs	r1, #0
    36ae:	4c38      	ldr	r4, [pc, #224]	; (3790 <_sercom_get_async_baud_val+0x1c0>)
    36b0:	47a0      	blx	r4
    36b2:	0004      	movs	r4, r0
    36b4:	000d      	movs	r5, r1
    36b6:	2300      	movs	r3, #0
    36b8:	469c      	mov	ip, r3
    36ba:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    36bc:	3320      	adds	r3, #32
    36be:	469b      	mov	fp, r3
    36c0:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    36c2:	4663      	mov	r3, ip
    36c4:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    36c6:	2300      	movs	r3, #0
    36c8:	9302      	str	r3, [sp, #8]
    36ca:	2200      	movs	r2, #0
    36cc:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    36ce:	213f      	movs	r1, #63	; 0x3f
    36d0:	9400      	str	r4, [sp, #0]
    36d2:	9501      	str	r5, [sp, #4]
    36d4:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    36d6:	2120      	movs	r1, #32
    36d8:	4249      	negs	r1, r1
    36da:	1879      	adds	r1, r7, r1
    36dc:	d403      	bmi.n	36e6 <_sercom_get_async_baud_val+0x116>
    36de:	0030      	movs	r0, r6
    36e0:	4088      	lsls	r0, r1
    36e2:	4684      	mov	ip, r0
    36e4:	e004      	b.n	36f0 <_sercom_get_async_baud_val+0x120>
    36e6:	4659      	mov	r1, fp
    36e8:	1bc9      	subs	r1, r1, r7
    36ea:	0030      	movs	r0, r6
    36ec:	40c8      	lsrs	r0, r1
    36ee:	4684      	mov	ip, r0
    36f0:	0031      	movs	r1, r6
    36f2:	40b9      	lsls	r1, r7
    36f4:	4689      	mov	r9, r1

		r = r << 1;
    36f6:	0010      	movs	r0, r2
    36f8:	0019      	movs	r1, r3
    36fa:	1880      	adds	r0, r0, r2
    36fc:	4159      	adcs	r1, r3
    36fe:	0002      	movs	r2, r0
    3700:	000b      	movs	r3, r1

		if (n & bit_shift) {
    3702:	4644      	mov	r4, r8
    3704:	464d      	mov	r5, r9
    3706:	402c      	ands	r4, r5
    3708:	46a2      	mov	sl, r4
    370a:	4664      	mov	r4, ip
    370c:	9d04      	ldr	r5, [sp, #16]
    370e:	402c      	ands	r4, r5
    3710:	46a4      	mov	ip, r4
    3712:	4654      	mov	r4, sl
    3714:	4665      	mov	r5, ip
    3716:	432c      	orrs	r4, r5
    3718:	d003      	beq.n	3722 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    371a:	0034      	movs	r4, r6
    371c:	4304      	orrs	r4, r0
    371e:	0022      	movs	r2, r4
    3720:	000b      	movs	r3, r1
		}

		if (r >= d) {
    3722:	9800      	ldr	r0, [sp, #0]
    3724:	9901      	ldr	r1, [sp, #4]
    3726:	4299      	cmp	r1, r3
    3728:	d80a      	bhi.n	3740 <_sercom_get_async_baud_val+0x170>
    372a:	d101      	bne.n	3730 <_sercom_get_async_baud_val+0x160>
    372c:	4290      	cmp	r0, r2
    372e:	d807      	bhi.n	3740 <_sercom_get_async_baud_val+0x170>
			r = r - d;
    3730:	9800      	ldr	r0, [sp, #0]
    3732:	9901      	ldr	r1, [sp, #4]
    3734:	1a12      	subs	r2, r2, r0
    3736:	418b      	sbcs	r3, r1
			q |= bit_shift;
    3738:	9902      	ldr	r1, [sp, #8]
    373a:	4648      	mov	r0, r9
    373c:	4301      	orrs	r1, r0
    373e:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3740:	3f01      	subs	r7, #1
    3742:	d2c8      	bcs.n	36d6 <_sercom_get_async_baud_val+0x106>
    3744:	9c00      	ldr	r4, [sp, #0]
    3746:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    3748:	9902      	ldr	r1, [sp, #8]
    374a:	9a07      	ldr	r2, [sp, #28]
    374c:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    374e:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    3750:	4910      	ldr	r1, [pc, #64]	; (3794 <_sercom_get_async_baud_val+0x1c4>)
    3752:	428b      	cmp	r3, r1
    3754:	d90b      	bls.n	376e <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3756:	9b06      	ldr	r3, [sp, #24]
    3758:	3301      	adds	r3, #1
    375a:	b2db      	uxtb	r3, r3
    375c:	0019      	movs	r1, r3
    375e:	9306      	str	r3, [sp, #24]
    3760:	0013      	movs	r3, r2
    3762:	3301      	adds	r3, #1
    3764:	9307      	str	r3, [sp, #28]
    3766:	2908      	cmp	r1, #8
    3768:	d1ad      	bne.n	36c6 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    376a:	2540      	movs	r5, #64	; 0x40
    376c:	e008      	b.n	3780 <_sercom_get_async_baud_val+0x1b0>
    376e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    3770:	9a06      	ldr	r2, [sp, #24]
    3772:	2a08      	cmp	r2, #8
    3774:	d004      	beq.n	3780 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    3776:	0352      	lsls	r2, r2, #13
    3778:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    377a:	9b05      	ldr	r3, [sp, #20]
    377c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    377e:	2500      	movs	r5, #0
}
    3780:	0028      	movs	r0, r5
    3782:	b009      	add	sp, #36	; 0x24
    3784:	bc3c      	pop	{r2, r3, r4, r5}
    3786:	4690      	mov	r8, r2
    3788:	4699      	mov	r9, r3
    378a:	46a2      	mov	sl, r4
    378c:	46ab      	mov	fp, r5
    378e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3790:	00005ae5 	.word	0x00005ae5
    3794:	00001fff 	.word	0x00001fff

00003798 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3798:	b510      	push	{r4, lr}
    379a:	b082      	sub	sp, #8
    379c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    379e:	4b0e      	ldr	r3, [pc, #56]	; (37d8 <sercom_set_gclk_generator+0x40>)
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	2b00      	cmp	r3, #0
    37a4:	d001      	beq.n	37aa <sercom_set_gclk_generator+0x12>
    37a6:	2900      	cmp	r1, #0
    37a8:	d00d      	beq.n	37c6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    37aa:	a901      	add	r1, sp, #4
    37ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    37ae:	2013      	movs	r0, #19
    37b0:	4b0a      	ldr	r3, [pc, #40]	; (37dc <sercom_set_gclk_generator+0x44>)
    37b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    37b4:	2013      	movs	r0, #19
    37b6:	4b0a      	ldr	r3, [pc, #40]	; (37e0 <sercom_set_gclk_generator+0x48>)
    37b8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    37ba:	4b07      	ldr	r3, [pc, #28]	; (37d8 <sercom_set_gclk_generator+0x40>)
    37bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    37be:	2201      	movs	r2, #1
    37c0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    37c2:	2000      	movs	r0, #0
    37c4:	e006      	b.n	37d4 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    37c6:	4b04      	ldr	r3, [pc, #16]	; (37d8 <sercom_set_gclk_generator+0x40>)
    37c8:	785b      	ldrb	r3, [r3, #1]
    37ca:	4283      	cmp	r3, r0
    37cc:	d001      	beq.n	37d2 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    37ce:	201d      	movs	r0, #29
    37d0:	e000      	b.n	37d4 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    37d2:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    37d4:	b002      	add	sp, #8
    37d6:	bd10      	pop	{r4, pc}
    37d8:	200000d8 	.word	0x200000d8
    37dc:	00004aa5 	.word	0x00004aa5
    37e0:	00004a19 	.word	0x00004a19

000037e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    37e4:	4b44      	ldr	r3, [pc, #272]	; (38f8 <_sercom_get_default_pad+0x114>)
    37e6:	4298      	cmp	r0, r3
    37e8:	d033      	beq.n	3852 <_sercom_get_default_pad+0x6e>
    37ea:	d806      	bhi.n	37fa <_sercom_get_default_pad+0x16>
    37ec:	4b43      	ldr	r3, [pc, #268]	; (38fc <_sercom_get_default_pad+0x118>)
    37ee:	4298      	cmp	r0, r3
    37f0:	d00d      	beq.n	380e <_sercom_get_default_pad+0x2a>
    37f2:	4b43      	ldr	r3, [pc, #268]	; (3900 <_sercom_get_default_pad+0x11c>)
    37f4:	4298      	cmp	r0, r3
    37f6:	d01b      	beq.n	3830 <_sercom_get_default_pad+0x4c>
    37f8:	e06f      	b.n	38da <_sercom_get_default_pad+0xf6>
    37fa:	4b42      	ldr	r3, [pc, #264]	; (3904 <_sercom_get_default_pad+0x120>)
    37fc:	4298      	cmp	r0, r3
    37fe:	d04a      	beq.n	3896 <_sercom_get_default_pad+0xb2>
    3800:	4b41      	ldr	r3, [pc, #260]	; (3908 <_sercom_get_default_pad+0x124>)
    3802:	4298      	cmp	r0, r3
    3804:	d058      	beq.n	38b8 <_sercom_get_default_pad+0xd4>
    3806:	4b41      	ldr	r3, [pc, #260]	; (390c <_sercom_get_default_pad+0x128>)
    3808:	4298      	cmp	r0, r3
    380a:	d166      	bne.n	38da <_sercom_get_default_pad+0xf6>
    380c:	e032      	b.n	3874 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    380e:	2901      	cmp	r1, #1
    3810:	d006      	beq.n	3820 <_sercom_get_default_pad+0x3c>
    3812:	2900      	cmp	r1, #0
    3814:	d063      	beq.n	38de <_sercom_get_default_pad+0xfa>
    3816:	2902      	cmp	r1, #2
    3818:	d006      	beq.n	3828 <_sercom_get_default_pad+0x44>
    381a:	2903      	cmp	r1, #3
    381c:	d006      	beq.n	382c <_sercom_get_default_pad+0x48>
    381e:	e001      	b.n	3824 <_sercom_get_default_pad+0x40>
    3820:	483b      	ldr	r0, [pc, #236]	; (3910 <_sercom_get_default_pad+0x12c>)
    3822:	e067      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3824:	2000      	movs	r0, #0
    3826:	e065      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3828:	483a      	ldr	r0, [pc, #232]	; (3914 <_sercom_get_default_pad+0x130>)
    382a:	e063      	b.n	38f4 <_sercom_get_default_pad+0x110>
    382c:	483a      	ldr	r0, [pc, #232]	; (3918 <_sercom_get_default_pad+0x134>)
    382e:	e061      	b.n	38f4 <_sercom_get_default_pad+0x110>
    3830:	2901      	cmp	r1, #1
    3832:	d006      	beq.n	3842 <_sercom_get_default_pad+0x5e>
    3834:	2900      	cmp	r1, #0
    3836:	d054      	beq.n	38e2 <_sercom_get_default_pad+0xfe>
    3838:	2902      	cmp	r1, #2
    383a:	d006      	beq.n	384a <_sercom_get_default_pad+0x66>
    383c:	2903      	cmp	r1, #3
    383e:	d006      	beq.n	384e <_sercom_get_default_pad+0x6a>
    3840:	e001      	b.n	3846 <_sercom_get_default_pad+0x62>
    3842:	4836      	ldr	r0, [pc, #216]	; (391c <_sercom_get_default_pad+0x138>)
    3844:	e056      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3846:	2000      	movs	r0, #0
    3848:	e054      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    384a:	4835      	ldr	r0, [pc, #212]	; (3920 <_sercom_get_default_pad+0x13c>)
    384c:	e052      	b.n	38f4 <_sercom_get_default_pad+0x110>
    384e:	4835      	ldr	r0, [pc, #212]	; (3924 <_sercom_get_default_pad+0x140>)
    3850:	e050      	b.n	38f4 <_sercom_get_default_pad+0x110>
    3852:	2901      	cmp	r1, #1
    3854:	d006      	beq.n	3864 <_sercom_get_default_pad+0x80>
    3856:	2900      	cmp	r1, #0
    3858:	d045      	beq.n	38e6 <_sercom_get_default_pad+0x102>
    385a:	2902      	cmp	r1, #2
    385c:	d006      	beq.n	386c <_sercom_get_default_pad+0x88>
    385e:	2903      	cmp	r1, #3
    3860:	d006      	beq.n	3870 <_sercom_get_default_pad+0x8c>
    3862:	e001      	b.n	3868 <_sercom_get_default_pad+0x84>
    3864:	4830      	ldr	r0, [pc, #192]	; (3928 <_sercom_get_default_pad+0x144>)
    3866:	e045      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3868:	2000      	movs	r0, #0
    386a:	e043      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    386c:	482f      	ldr	r0, [pc, #188]	; (392c <_sercom_get_default_pad+0x148>)
    386e:	e041      	b.n	38f4 <_sercom_get_default_pad+0x110>
    3870:	482f      	ldr	r0, [pc, #188]	; (3930 <_sercom_get_default_pad+0x14c>)
    3872:	e03f      	b.n	38f4 <_sercom_get_default_pad+0x110>
    3874:	2901      	cmp	r1, #1
    3876:	d006      	beq.n	3886 <_sercom_get_default_pad+0xa2>
    3878:	2900      	cmp	r1, #0
    387a:	d036      	beq.n	38ea <_sercom_get_default_pad+0x106>
    387c:	2902      	cmp	r1, #2
    387e:	d006      	beq.n	388e <_sercom_get_default_pad+0xaa>
    3880:	2903      	cmp	r1, #3
    3882:	d006      	beq.n	3892 <_sercom_get_default_pad+0xae>
    3884:	e001      	b.n	388a <_sercom_get_default_pad+0xa6>
    3886:	482b      	ldr	r0, [pc, #172]	; (3934 <_sercom_get_default_pad+0x150>)
    3888:	e034      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    388a:	2000      	movs	r0, #0
    388c:	e032      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    388e:	482a      	ldr	r0, [pc, #168]	; (3938 <_sercom_get_default_pad+0x154>)
    3890:	e030      	b.n	38f4 <_sercom_get_default_pad+0x110>
    3892:	482a      	ldr	r0, [pc, #168]	; (393c <_sercom_get_default_pad+0x158>)
    3894:	e02e      	b.n	38f4 <_sercom_get_default_pad+0x110>
    3896:	2901      	cmp	r1, #1
    3898:	d006      	beq.n	38a8 <_sercom_get_default_pad+0xc4>
    389a:	2900      	cmp	r1, #0
    389c:	d027      	beq.n	38ee <_sercom_get_default_pad+0x10a>
    389e:	2902      	cmp	r1, #2
    38a0:	d006      	beq.n	38b0 <_sercom_get_default_pad+0xcc>
    38a2:	2903      	cmp	r1, #3
    38a4:	d006      	beq.n	38b4 <_sercom_get_default_pad+0xd0>
    38a6:	e001      	b.n	38ac <_sercom_get_default_pad+0xc8>
    38a8:	4825      	ldr	r0, [pc, #148]	; (3940 <_sercom_get_default_pad+0x15c>)
    38aa:	e023      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38ac:	2000      	movs	r0, #0
    38ae:	e021      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38b0:	4824      	ldr	r0, [pc, #144]	; (3944 <_sercom_get_default_pad+0x160>)
    38b2:	e01f      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38b4:	4824      	ldr	r0, [pc, #144]	; (3948 <_sercom_get_default_pad+0x164>)
    38b6:	e01d      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38b8:	2901      	cmp	r1, #1
    38ba:	d006      	beq.n	38ca <_sercom_get_default_pad+0xe6>
    38bc:	2900      	cmp	r1, #0
    38be:	d018      	beq.n	38f2 <_sercom_get_default_pad+0x10e>
    38c0:	2902      	cmp	r1, #2
    38c2:	d006      	beq.n	38d2 <_sercom_get_default_pad+0xee>
    38c4:	2903      	cmp	r1, #3
    38c6:	d006      	beq.n	38d6 <_sercom_get_default_pad+0xf2>
    38c8:	e001      	b.n	38ce <_sercom_get_default_pad+0xea>
    38ca:	4820      	ldr	r0, [pc, #128]	; (394c <_sercom_get_default_pad+0x168>)
    38cc:	e012      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38ce:	2000      	movs	r0, #0
    38d0:	e010      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38d2:	481f      	ldr	r0, [pc, #124]	; (3950 <_sercom_get_default_pad+0x16c>)
    38d4:	e00e      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38d6:	481f      	ldr	r0, [pc, #124]	; (3954 <_sercom_get_default_pad+0x170>)
    38d8:	e00c      	b.n	38f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38da:	2000      	movs	r0, #0
    38dc:	e00a      	b.n	38f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38de:	481e      	ldr	r0, [pc, #120]	; (3958 <_sercom_get_default_pad+0x174>)
    38e0:	e008      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38e2:	2003      	movs	r0, #3
    38e4:	e006      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38e6:	481d      	ldr	r0, [pc, #116]	; (395c <_sercom_get_default_pad+0x178>)
    38e8:	e004      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38ea:	481d      	ldr	r0, [pc, #116]	; (3960 <_sercom_get_default_pad+0x17c>)
    38ec:	e002      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38ee:	481d      	ldr	r0, [pc, #116]	; (3964 <_sercom_get_default_pad+0x180>)
    38f0:	e000      	b.n	38f4 <_sercom_get_default_pad+0x110>
    38f2:	481d      	ldr	r0, [pc, #116]	; (3968 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    38f4:	4770      	bx	lr
    38f6:	46c0      	nop			; (mov r8, r8)
    38f8:	42001000 	.word	0x42001000
    38fc:	42000800 	.word	0x42000800
    3900:	42000c00 	.word	0x42000c00
    3904:	42001800 	.word	0x42001800
    3908:	42001c00 	.word	0x42001c00
    390c:	42001400 	.word	0x42001400
    3910:	00050003 	.word	0x00050003
    3914:	00060003 	.word	0x00060003
    3918:	00070003 	.word	0x00070003
    391c:	00010003 	.word	0x00010003
    3920:	001e0003 	.word	0x001e0003
    3924:	001f0003 	.word	0x001f0003
    3928:	00090003 	.word	0x00090003
    392c:	000a0003 	.word	0x000a0003
    3930:	000b0003 	.word	0x000b0003
    3934:	00110003 	.word	0x00110003
    3938:	00120003 	.word	0x00120003
    393c:	00130003 	.word	0x00130003
    3940:	000d0003 	.word	0x000d0003
    3944:	000e0003 	.word	0x000e0003
    3948:	000f0003 	.word	0x000f0003
    394c:	00170003 	.word	0x00170003
    3950:	00180003 	.word	0x00180003
    3954:	00190003 	.word	0x00190003
    3958:	00040003 	.word	0x00040003
    395c:	00080003 	.word	0x00080003
    3960:	00100003 	.word	0x00100003
    3964:	000c0003 	.word	0x000c0003
    3968:	00160003 	.word	0x00160003

0000396c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    396c:	b530      	push	{r4, r5, lr}
    396e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3970:	4b0c      	ldr	r3, [pc, #48]	; (39a4 <_sercom_get_sercom_inst_index+0x38>)
    3972:	466a      	mov	r2, sp
    3974:	cb32      	ldmia	r3!, {r1, r4, r5}
    3976:	c232      	stmia	r2!, {r1, r4, r5}
    3978:	cb32      	ldmia	r3!, {r1, r4, r5}
    397a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    397c:	9b00      	ldr	r3, [sp, #0]
    397e:	4283      	cmp	r3, r0
    3980:	d006      	beq.n	3990 <_sercom_get_sercom_inst_index+0x24>
    3982:	2301      	movs	r3, #1
    3984:	009a      	lsls	r2, r3, #2
    3986:	4669      	mov	r1, sp
    3988:	5852      	ldr	r2, [r2, r1]
    398a:	4282      	cmp	r2, r0
    398c:	d103      	bne.n	3996 <_sercom_get_sercom_inst_index+0x2a>
    398e:	e000      	b.n	3992 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3990:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    3992:	b2d8      	uxtb	r0, r3
    3994:	e003      	b.n	399e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3996:	3301      	adds	r3, #1
    3998:	2b06      	cmp	r3, #6
    399a:	d1f3      	bne.n	3984 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    399c:	2000      	movs	r0, #0
}
    399e:	b007      	add	sp, #28
    39a0:	bd30      	pop	{r4, r5, pc}
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	00007bd4 	.word	0x00007bd4

000039a8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    39a8:	4770      	bx	lr
    39aa:	46c0      	nop			; (mov r8, r8)

000039ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    39ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    39ae:	4b0a      	ldr	r3, [pc, #40]	; (39d8 <_sercom_set_handler+0x2c>)
    39b0:	781b      	ldrb	r3, [r3, #0]
    39b2:	2b00      	cmp	r3, #0
    39b4:	d10c      	bne.n	39d0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    39b6:	4f09      	ldr	r7, [pc, #36]	; (39dc <_sercom_set_handler+0x30>)
    39b8:	4e09      	ldr	r6, [pc, #36]	; (39e0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    39ba:	4d0a      	ldr	r5, [pc, #40]	; (39e4 <_sercom_set_handler+0x38>)
    39bc:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    39be:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    39c0:	195a      	adds	r2, r3, r5
    39c2:	6014      	str	r4, [r2, #0]
    39c4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    39c6:	2b18      	cmp	r3, #24
    39c8:	d1f9      	bne.n	39be <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    39ca:	2201      	movs	r2, #1
    39cc:	4b02      	ldr	r3, [pc, #8]	; (39d8 <_sercom_set_handler+0x2c>)
    39ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    39d0:	0080      	lsls	r0, r0, #2
    39d2:	4b02      	ldr	r3, [pc, #8]	; (39dc <_sercom_set_handler+0x30>)
    39d4:	50c1      	str	r1, [r0, r3]
}
    39d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d8:	200000da 	.word	0x200000da
    39dc:	200000dc 	.word	0x200000dc
    39e0:	000039a9 	.word	0x000039a9
    39e4:	20000340 	.word	0x20000340

000039e8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    39e8:	b510      	push	{r4, lr}
    39ea:	b082      	sub	sp, #8
    39ec:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    39ee:	2206      	movs	r2, #6
    39f0:	4905      	ldr	r1, [pc, #20]	; (3a08 <_sercom_get_interrupt_vector+0x20>)
    39f2:	4668      	mov	r0, sp
    39f4:	4b05      	ldr	r3, [pc, #20]	; (3a0c <_sercom_get_interrupt_vector+0x24>)
    39f6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39f8:	0020      	movs	r0, r4
    39fa:	4b05      	ldr	r3, [pc, #20]	; (3a10 <_sercom_get_interrupt_vector+0x28>)
    39fc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    39fe:	466b      	mov	r3, sp
    3a00:	5618      	ldrsb	r0, [r3, r0]
}
    3a02:	b002      	add	sp, #8
    3a04:	bd10      	pop	{r4, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	00007bec 	.word	0x00007bec
    3a0c:	00005b89 	.word	0x00005b89
    3a10:	0000396d 	.word	0x0000396d

00003a14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3a14:	b510      	push	{r4, lr}
    3a16:	4b02      	ldr	r3, [pc, #8]	; (3a20 <SERCOM0_Handler+0xc>)
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	2000      	movs	r0, #0
    3a1c:	4798      	blx	r3
    3a1e:	bd10      	pop	{r4, pc}
    3a20:	200000dc 	.word	0x200000dc

00003a24 <SERCOM1_Handler>:
    3a24:	b510      	push	{r4, lr}
    3a26:	4b02      	ldr	r3, [pc, #8]	; (3a30 <SERCOM1_Handler+0xc>)
    3a28:	685b      	ldr	r3, [r3, #4]
    3a2a:	2001      	movs	r0, #1
    3a2c:	4798      	blx	r3
    3a2e:	bd10      	pop	{r4, pc}
    3a30:	200000dc 	.word	0x200000dc

00003a34 <SERCOM2_Handler>:
    3a34:	b510      	push	{r4, lr}
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <SERCOM2_Handler+0xc>)
    3a38:	689b      	ldr	r3, [r3, #8]
    3a3a:	2002      	movs	r0, #2
    3a3c:	4798      	blx	r3
    3a3e:	bd10      	pop	{r4, pc}
    3a40:	200000dc 	.word	0x200000dc

00003a44 <SERCOM3_Handler>:
    3a44:	b510      	push	{r4, lr}
    3a46:	4b02      	ldr	r3, [pc, #8]	; (3a50 <SERCOM3_Handler+0xc>)
    3a48:	68db      	ldr	r3, [r3, #12]
    3a4a:	2003      	movs	r0, #3
    3a4c:	4798      	blx	r3
    3a4e:	bd10      	pop	{r4, pc}
    3a50:	200000dc 	.word	0x200000dc

00003a54 <SERCOM4_Handler>:
    3a54:	b510      	push	{r4, lr}
    3a56:	4b02      	ldr	r3, [pc, #8]	; (3a60 <SERCOM4_Handler+0xc>)
    3a58:	691b      	ldr	r3, [r3, #16]
    3a5a:	2004      	movs	r0, #4
    3a5c:	4798      	blx	r3
    3a5e:	bd10      	pop	{r4, pc}
    3a60:	200000dc 	.word	0x200000dc

00003a64 <SERCOM5_Handler>:
    3a64:	b510      	push	{r4, lr}
    3a66:	4b02      	ldr	r3, [pc, #8]	; (3a70 <SERCOM5_Handler+0xc>)
    3a68:	695b      	ldr	r3, [r3, #20]
    3a6a:	2005      	movs	r0, #5
    3a6c:	4798      	blx	r3
    3a6e:	bd10      	pop	{r4, pc}
    3a70:	200000dc 	.word	0x200000dc

00003a74 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a76:	b08b      	sub	sp, #44	; 0x2c
    3a78:	0005      	movs	r5, r0
    3a7a:	000c      	movs	r4, r1
    3a7c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3a7e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a80:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3a82:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a84:	079b      	lsls	r3, r3, #30
    3a86:	d500      	bpl.n	3a8a <spi_init+0x16>
    3a88:	e0be      	b.n	3c08 <spi_init+0x194>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a8a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3a8c:	3817      	subs	r0, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a8e:	07db      	lsls	r3, r3, #31
    3a90:	d500      	bpl.n	3a94 <spi_init+0x20>
    3a92:	e0b9      	b.n	3c08 <spi_init+0x194>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a94:	0008      	movs	r0, r1
    3a96:	4b5d      	ldr	r3, [pc, #372]	; (3c0c <spi_init+0x198>)
    3a98:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3a9a:	495d      	ldr	r1, [pc, #372]	; (3c10 <spi_init+0x19c>)
    3a9c:	6a0a      	ldr	r2, [r1, #32]
    3a9e:	1c87      	adds	r7, r0, #2
    3aa0:	2301      	movs	r3, #1
    3aa2:	40bb      	lsls	r3, r7
    3aa4:	4313      	orrs	r3, r2
    3aa6:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3aa8:	a909      	add	r1, sp, #36	; 0x24
    3aaa:	2724      	movs	r7, #36	; 0x24
    3aac:	5df3      	ldrb	r3, [r6, r7]
    3aae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3ab0:	3014      	adds	r0, #20
    3ab2:	b2c3      	uxtb	r3, r0
    3ab4:	9301      	str	r3, [sp, #4]
    3ab6:	0018      	movs	r0, r3
    3ab8:	4b56      	ldr	r3, [pc, #344]	; (3c14 <spi_init+0x1a0>)
    3aba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3abc:	9801      	ldr	r0, [sp, #4]
    3abe:	4b56      	ldr	r3, [pc, #344]	; (3c18 <spi_init+0x1a4>)
    3ac0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3ac2:	5df0      	ldrb	r0, [r6, r7]
    3ac4:	2100      	movs	r1, #0
    3ac6:	4b55      	ldr	r3, [pc, #340]	; (3c1c <spi_init+0x1a8>)
    3ac8:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3aca:	7833      	ldrb	r3, [r6, #0]
    3acc:	2b01      	cmp	r3, #1
    3ace:	d103      	bne.n	3ad8 <spi_init+0x64>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3ad0:	6822      	ldr	r2, [r4, #0]
    3ad2:	330b      	adds	r3, #11
    3ad4:	4313      	orrs	r3, r2
    3ad6:	6023      	str	r3, [r4, #0]
    3ad8:	002b      	movs	r3, r5
    3ada:	330c      	adds	r3, #12
    3adc:	0029      	movs	r1, r5
    3ade:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    3ae0:	2200      	movs	r2, #0
    3ae2:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3ae4:	4299      	cmp	r1, r3
    3ae6:	d1fc      	bne.n	3ae2 <spi_init+0x6e>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3ae8:	2300      	movs	r3, #0
    3aea:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3aec:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3aee:	2400      	movs	r4, #0
    3af0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3af2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3af4:	3336      	adds	r3, #54	; 0x36
    3af6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3af8:	3301      	adds	r3, #1
    3afa:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3afc:	3301      	adds	r3, #1
    3afe:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3b00:	3b35      	subs	r3, #53	; 0x35
    3b02:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3b04:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3b06:	6828      	ldr	r0, [r5, #0]
    3b08:	4b40      	ldr	r3, [pc, #256]	; (3c0c <spi_init+0x198>)
    3b0a:	4798      	blx	r3
    3b0c:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3b0e:	4944      	ldr	r1, [pc, #272]	; (3c20 <spi_init+0x1ac>)
    3b10:	4b44      	ldr	r3, [pc, #272]	; (3c24 <spi_init+0x1b0>)
    3b12:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3b14:	00b8      	lsls	r0, r7, #2
    3b16:	4b44      	ldr	r3, [pc, #272]	; (3c28 <spi_init+0x1b4>)
    3b18:	50c5      	str	r5, [r0, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b1a:	682f      	ldr	r7, [r5, #0]
    3b1c:	ab04      	add	r3, sp, #16
    3b1e:	2280      	movs	r2, #128	; 0x80
    3b20:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b22:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b24:	3a7f      	subs	r2, #127	; 0x7f
    3b26:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3b28:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    3b2a:	7833      	ldrb	r3, [r6, #0]
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d102      	bne.n	3b36 <spi_init+0xc2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3b30:	2200      	movs	r2, #0
    3b32:	ab04      	add	r3, sp, #16
    3b34:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    3b36:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3b38:	9305      	str	r3, [sp, #20]
    3b3a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3b3c:	9306      	str	r3, [sp, #24]
    3b3e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3b40:	9307      	str	r3, [sp, #28]
    3b42:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3b44:	9308      	str	r3, [sp, #32]
    3b46:	2400      	movs	r4, #0
    3b48:	b2e1      	uxtb	r1, r4
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3b4a:	00a3      	lsls	r3, r4, #2
    3b4c:	aa05      	add	r2, sp, #20
    3b4e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3b50:	2800      	cmp	r0, #0
    3b52:	d102      	bne.n	3b5a <spi_init+0xe6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3b54:	0038      	movs	r0, r7
    3b56:	4b35      	ldr	r3, [pc, #212]	; (3c2c <spi_init+0x1b8>)
    3b58:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3b5a:	1c43      	adds	r3, r0, #1
    3b5c:	d006      	beq.n	3b6c <spi_init+0xf8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3b5e:	ab02      	add	r3, sp, #8
    3b60:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3b62:	0c00      	lsrs	r0, r0, #16
    3b64:	b2c0      	uxtb	r0, r0
    3b66:	a904      	add	r1, sp, #16
    3b68:	4b31      	ldr	r3, [pc, #196]	; (3c30 <spi_init+0x1bc>)
    3b6a:	4798      	blx	r3
    3b6c:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3b6e:	2c04      	cmp	r4, #4
    3b70:	d1ea      	bne.n	3b48 <spi_init+0xd4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    3b72:	7833      	ldrb	r3, [r6, #0]
    3b74:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3b76:	7c33      	ldrb	r3, [r6, #16]
    3b78:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3b7a:	7cb3      	ldrb	r3, [r6, #18]
    3b7c:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3b7e:	7d33      	ldrb	r3, [r6, #20]
    3b80:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3b82:	2200      	movs	r2, #0
    3b84:	ab02      	add	r3, sp, #8
    3b86:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3b88:	7833      	ldrb	r3, [r6, #0]
    3b8a:	2b01      	cmp	r3, #1
    3b8c:	d114      	bne.n	3bb8 <spi_init+0x144>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b8e:	6828      	ldr	r0, [r5, #0]
    3b90:	4b1e      	ldr	r3, [pc, #120]	; (3c0c <spi_init+0x198>)
    3b92:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3b94:	3014      	adds	r0, #20
    3b96:	b2c0      	uxtb	r0, r0
    3b98:	4b26      	ldr	r3, [pc, #152]	; (3c34 <spi_init+0x1c0>)
    3b9a:	4798      	blx	r3
    3b9c:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3b9e:	ab02      	add	r3, sp, #8
    3ba0:	1d9a      	adds	r2, r3, #6
    3ba2:	69b0      	ldr	r0, [r6, #24]
    3ba4:	4b24      	ldr	r3, [pc, #144]	; (3c38 <spi_init+0x1c4>)
    3ba6:	4798      	blx	r3
    3ba8:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3baa:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3bac:	2b00      	cmp	r3, #0
    3bae:	d12b      	bne.n	3c08 <spi_init+0x194>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3bb0:	ab02      	add	r3, sp, #8
    3bb2:	3306      	adds	r3, #6
    3bb4:	781b      	ldrb	r3, [r3, #0]
    3bb6:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3bb8:	6873      	ldr	r3, [r6, #4]
    3bba:	68b2      	ldr	r2, [r6, #8]
    3bbc:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3bbe:	68f2      	ldr	r2, [r6, #12]
    3bc0:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3bc2:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3bc4:	7c71      	ldrb	r1, [r6, #17]
    3bc6:	2900      	cmp	r1, #0
    3bc8:	d103      	bne.n	3bd2 <spi_init+0x15e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3bca:	491c      	ldr	r1, [pc, #112]	; (3c3c <spi_init+0x1c8>)
    3bcc:	7889      	ldrb	r1, [r1, #2]
    3bce:	0789      	lsls	r1, r1, #30
    3bd0:	d501      	bpl.n	3bd6 <spi_init+0x162>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3bd2:	2180      	movs	r1, #128	; 0x80
    3bd4:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    3bd6:	7cb1      	ldrb	r1, [r6, #18]
    3bd8:	2900      	cmp	r1, #0
    3bda:	d002      	beq.n	3be2 <spi_init+0x16e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3bdc:	2180      	movs	r1, #128	; 0x80
    3bde:	0289      	lsls	r1, r1, #10
    3be0:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3be2:	7cf1      	ldrb	r1, [r6, #19]
    3be4:	2900      	cmp	r1, #0
    3be6:	d002      	beq.n	3bee <spi_init+0x17a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3be8:	2180      	movs	r1, #128	; 0x80
    3bea:	0089      	lsls	r1, r1, #2
    3bec:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3bee:	7d31      	ldrb	r1, [r6, #20]
    3bf0:	2900      	cmp	r1, #0
    3bf2:	d002      	beq.n	3bfa <spi_init+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3bf4:	2180      	movs	r1, #128	; 0x80
    3bf6:	0189      	lsls	r1, r1, #6
    3bf8:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3bfa:	6839      	ldr	r1, [r7, #0]
    3bfc:	430b      	orrs	r3, r1
    3bfe:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3c00:	687b      	ldr	r3, [r7, #4]
    3c02:	4313      	orrs	r3, r2
    3c04:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    3c06:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3c08:	b00b      	add	sp, #44	; 0x2c
    3c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c0c:	0000396d 	.word	0x0000396d
    3c10:	40000400 	.word	0x40000400
    3c14:	00004aa5 	.word	0x00004aa5
    3c18:	00004a19 	.word	0x00004a19
    3c1c:	00003799 	.word	0x00003799
    3c20:	00003d31 	.word	0x00003d31
    3c24:	000039ad 	.word	0x000039ad
    3c28:	20000340 	.word	0x20000340
    3c2c:	000037e5 	.word	0x000037e5
    3c30:	00004b9d 	.word	0x00004b9d
    3c34:	00004ac1 	.word	0x00004ac1
    3c38:	000035a9 	.word	0x000035a9
    3c3c:	41002000 	.word	0x41002000

00003c40 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3c40:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3c42:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3c44:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3c46:	2c01      	cmp	r4, #1
    3c48:	d16e      	bne.n	3d28 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3c4a:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3c4c:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3c4e:	2c00      	cmp	r4, #0
    3c50:	d16a      	bne.n	3d28 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    3c52:	2a00      	cmp	r2, #0
    3c54:	d058      	beq.n	3d08 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3c56:	784b      	ldrb	r3, [r1, #1]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d044      	beq.n	3ce6 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c5c:	6803      	ldr	r3, [r0, #0]
    3c5e:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3c60:	07db      	lsls	r3, r3, #31
    3c62:	d410      	bmi.n	3c86 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3c64:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c66:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c68:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c6a:	2900      	cmp	r1, #0
    3c6c:	d104      	bne.n	3c78 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    3c6e:	095a      	lsrs	r2, r3, #5
    3c70:	01d2      	lsls	r2, r2, #7
    3c72:	492e      	ldr	r1, [pc, #184]	; (3d2c <spi_select_slave+0xec>)
    3c74:	468c      	mov	ip, r1
    3c76:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c78:	211f      	movs	r1, #31
    3c7a:	400b      	ands	r3, r1
    3c7c:	391e      	subs	r1, #30
    3c7e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c80:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    3c82:	2305      	movs	r3, #5
    3c84:	e050      	b.n	3d28 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3c86:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c88:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c8a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c8c:	2c00      	cmp	r4, #0
    3c8e:	d104      	bne.n	3c9a <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    3c90:	095a      	lsrs	r2, r3, #5
    3c92:	01d2      	lsls	r2, r2, #7
    3c94:	4c25      	ldr	r4, [pc, #148]	; (3d2c <spi_select_slave+0xec>)
    3c96:	46a4      	mov	ip, r4
    3c98:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c9a:	241f      	movs	r4, #31
    3c9c:	4023      	ands	r3, r4
    3c9e:	3c1e      	subs	r4, #30
    3ca0:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3ca2:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ca4:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ca6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ca8:	07d2      	lsls	r2, r2, #31
    3caa:	d501      	bpl.n	3cb0 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cac:	788a      	ldrb	r2, [r1, #2]
    3cae:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3cb0:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3cb2:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3cb4:	2a00      	cmp	r2, #0
    3cb6:	d137      	bne.n	3d28 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cb8:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3cba:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cbc:	7e13      	ldrb	r3, [r2, #24]
    3cbe:	420b      	tst	r3, r1
    3cc0:	d0fc      	beq.n	3cbc <spi_select_slave+0x7c>
    3cc2:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3cc4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3cc6:	0749      	lsls	r1, r1, #29
    3cc8:	d52e      	bpl.n	3d28 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cca:	8b53      	ldrh	r3, [r2, #26]
    3ccc:	075b      	lsls	r3, r3, #29
    3cce:	d501      	bpl.n	3cd4 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cd0:	2304      	movs	r3, #4
    3cd2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cd4:	7983      	ldrb	r3, [r0, #6]
    3cd6:	2b01      	cmp	r3, #1
    3cd8:	d102      	bne.n	3ce0 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cda:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cdc:	2300      	movs	r3, #0
    3cde:	e023      	b.n	3d28 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ce0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ce2:	2300      	movs	r3, #0
    3ce4:	e020      	b.n	3d28 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3ce6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3ce8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3cea:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3cec:	2900      	cmp	r1, #0
    3cee:	d104      	bne.n	3cfa <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    3cf0:	095a      	lsrs	r2, r3, #5
    3cf2:	01d2      	lsls	r2, r2, #7
    3cf4:	490d      	ldr	r1, [pc, #52]	; (3d2c <spi_select_slave+0xec>)
    3cf6:	468c      	mov	ip, r1
    3cf8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cfa:	211f      	movs	r1, #31
    3cfc:	400b      	ands	r3, r1
    3cfe:	391e      	subs	r1, #30
    3d00:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d02:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3d04:	2300      	movs	r3, #0
    3d06:	e00f      	b.n	3d28 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3d08:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d0a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3d0c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d0e:	2900      	cmp	r1, #0
    3d10:	d104      	bne.n	3d1c <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    3d12:	095a      	lsrs	r2, r3, #5
    3d14:	01d2      	lsls	r2, r2, #7
    3d16:	4905      	ldr	r1, [pc, #20]	; (3d2c <spi_select_slave+0xec>)
    3d18:	468c      	mov	ip, r1
    3d1a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d1c:	211f      	movs	r1, #31
    3d1e:	400b      	ands	r3, r1
    3d20:	391e      	subs	r1, #30
    3d22:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3d24:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    3d26:	2300      	movs	r3, #0
}
    3d28:	0018      	movs	r0, r3
    3d2a:	bd10      	pop	{r4, pc}
    3d2c:	41004400 	.word	0x41004400

00003d30 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3d32:	0080      	lsls	r0, r0, #2
    3d34:	4b67      	ldr	r3, [pc, #412]	; (3ed4 <_spi_interrupt_handler+0x1a4>)
    3d36:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d38:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3d3a:	2337      	movs	r3, #55	; 0x37

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    3d3c:	5ce3      	ldrb	r3, [r4, r3]
    3d3e:	2236      	movs	r2, #54	; 0x36
    3d40:	5ca7      	ldrb	r7, [r4, r2]
    3d42:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3d44:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3d46:	7db5      	ldrb	r5, [r6, #22]
    3d48:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3d4a:	07eb      	lsls	r3, r5, #31
    3d4c:	d53d      	bpl.n	3dca <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3d4e:	7963      	ldrb	r3, [r4, #5]
    3d50:	2b01      	cmp	r3, #1
    3d52:	d13a      	bne.n	3dca <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
    3d54:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3d56:	2b00      	cmp	r3, #0
    3d58:	d10f      	bne.n	3d7a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    3d5a:	4b5f      	ldr	r3, [pc, #380]	; (3ed8 <_spi_interrupt_handler+0x1a8>)
    3d5c:	881b      	ldrh	r3, [r3, #0]
    3d5e:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3d60:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d62:	3b01      	subs	r3, #1
    3d64:	b29b      	uxth	r3, r3
    3d66:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    3d68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d6a:	b29b      	uxth	r3, r3
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d101      	bne.n	3d74 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d70:	3301      	adds	r3, #1
    3d72:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
    3d74:	7963      	ldrb	r3, [r4, #5]
    3d76:	2b01      	cmp	r3, #1
    3d78:	d127      	bne.n	3dca <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3d7a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d024      	beq.n	3dca <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d80:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3d84:	780b      	ldrb	r3, [r1, #0]
    3d86:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3d88:	1c4b      	adds	r3, r1, #1
    3d8a:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d8c:	79a3      	ldrb	r3, [r4, #6]
    3d8e:	2b01      	cmp	r3, #1
    3d90:	d001      	beq.n	3d96 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d92:	b293      	uxth	r3, r2
    3d94:	e004      	b.n	3da0 <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3d96:	784b      	ldrb	r3, [r1, #1]
    3d98:	021b      	lsls	r3, r3, #8
    3d9a:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    3d9c:	3102      	adds	r1, #2
    3d9e:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3da0:	05db      	lsls	r3, r3, #23
    3da2:	0ddb      	lsrs	r3, r3, #23
    3da4:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    3da6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3da8:	3b01      	subs	r3, #1
    3daa:	b29b      	uxth	r3, r3
    3dac:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3dae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3db0:	b29b      	uxth	r3, r3
    3db2:	2b00      	cmp	r3, #0
    3db4:	d109      	bne.n	3dca <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3db6:	3301      	adds	r3, #1
    3db8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3dba:	7a63      	ldrb	r3, [r4, #9]
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d104      	bne.n	3dca <_spi_interrupt_handler+0x9a>
    3dc0:	79e3      	ldrb	r3, [r4, #7]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d101      	bne.n	3dca <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3dc6:	3302      	adds	r3, #2
    3dc8:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3dca:	076b      	lsls	r3, r5, #29
    3dcc:	d55f      	bpl.n	3e8e <_spi_interrupt_handler+0x15e>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3dce:	8b73      	ldrh	r3, [r6, #26]
    3dd0:	075b      	lsls	r3, r3, #29
    3dd2:	d512      	bpl.n	3dfa <_spi_interrupt_handler+0xca>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3dd4:	7a63      	ldrb	r3, [r4, #9]
    3dd6:	2b01      	cmp	r3, #1
    3dd8:	d00b      	beq.n	3df2 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3dda:	221e      	movs	r2, #30
    3ddc:	2338      	movs	r3, #56	; 0x38
    3dde:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3de0:	3b35      	subs	r3, #53	; 0x35
    3de2:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3de4:	3302      	adds	r3, #2
    3de6:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3de8:	073b      	lsls	r3, r7, #28
    3dea:	d502      	bpl.n	3df2 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3dec:	0020      	movs	r0, r4
    3dee:	69a3      	ldr	r3, [r4, #24]
    3df0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3df2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3df4:	2304      	movs	r3, #4
    3df6:	8373      	strh	r3, [r6, #26]
    3df8:	e049      	b.n	3e8e <_spi_interrupt_handler+0x15e>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    3dfa:	7a63      	ldrb	r3, [r4, #9]
    3dfc:	2b01      	cmp	r3, #1
    3dfe:	d116      	bne.n	3e2e <_spi_interrupt_handler+0xfe>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3e00:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    3e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3e04:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e06:	3b01      	subs	r3, #1
    3e08:	b29b      	uxth	r3, r3
    3e0a:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    3e0c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e0e:	b29b      	uxth	r3, r3
    3e10:	2b00      	cmp	r3, #0
    3e12:	d13c      	bne.n	3e8e <_spi_interrupt_handler+0x15e>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3e14:	3304      	adds	r3, #4
    3e16:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3e18:	2200      	movs	r2, #0
    3e1a:	3334      	adds	r3, #52	; 0x34
    3e1c:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3e1e:	3b35      	subs	r3, #53	; 0x35
    3e20:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    3e22:	07fb      	lsls	r3, r7, #31
    3e24:	d533      	bpl.n	3e8e <_spi_interrupt_handler+0x15e>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3e26:	0020      	movs	r0, r4
    3e28:	68e3      	ldr	r3, [r4, #12]
    3e2a:	4798      	blx	r3
    3e2c:	e02f      	b.n	3e8e <_spi_interrupt_handler+0x15e>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3e2e:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e32:	05db      	lsls	r3, r3, #23
    3e34:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    3e36:	b2da      	uxtb	r2, r3
    3e38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3e3a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    3e3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3e3e:	1c51      	adds	r1, r2, #1
    3e40:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e42:	79a1      	ldrb	r1, [r4, #6]
    3e44:	2901      	cmp	r1, #1
    3e46:	d104      	bne.n	3e52 <_spi_interrupt_handler+0x122>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3e48:	0a1b      	lsrs	r3, r3, #8
    3e4a:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    3e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e4e:	3301      	adds	r3, #1
    3e50:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    3e52:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3e54:	3b01      	subs	r3, #1
    3e56:	b29b      	uxth	r3, r3
    3e58:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    3e5a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3e5c:	b29b      	uxth	r3, r3
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d115      	bne.n	3e8e <_spi_interrupt_handler+0x15e>
					module->status = STATUS_OK;
    3e62:	2200      	movs	r2, #0
    3e64:	3338      	adds	r3, #56	; 0x38
    3e66:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3e68:	3b34      	subs	r3, #52	; 0x34
    3e6a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3e6c:	7a63      	ldrb	r3, [r4, #9]
    3e6e:	2b02      	cmp	r3, #2
    3e70:	d105      	bne.n	3e7e <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3e72:	077b      	lsls	r3, r7, #29
    3e74:	d50b      	bpl.n	3e8e <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3e76:	0020      	movs	r0, r4
    3e78:	6963      	ldr	r3, [r4, #20]
    3e7a:	4798      	blx	r3
    3e7c:	e007      	b.n	3e8e <_spi_interrupt_handler+0x15e>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    3e7e:	7a63      	ldrb	r3, [r4, #9]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d104      	bne.n	3e8e <_spi_interrupt_handler+0x15e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3e84:	07bb      	lsls	r3, r7, #30
    3e86:	d502      	bpl.n	3e8e <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3e88:	0020      	movs	r0, r4
    3e8a:	6923      	ldr	r3, [r4, #16]
    3e8c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3e8e:	07ab      	lsls	r3, r5, #30
    3e90:	d514      	bpl.n	3ebc <_spi_interrupt_handler+0x18c>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e92:	7963      	ldrb	r3, [r4, #5]
    3e94:	2b01      	cmp	r3, #1
    3e96:	d111      	bne.n	3ebc <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e98:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e9a:	2b01      	cmp	r3, #1
    3e9c:	d10e      	bne.n	3ebc <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e9e:	79e3      	ldrb	r3, [r4, #7]
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d10b      	bne.n	3ebc <_spi_interrupt_handler+0x18c>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3ea4:	3302      	adds	r3, #2
    3ea6:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3ea8:	3301      	adds	r3, #1
    3eaa:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3eac:	2200      	movs	r2, #0
    3eae:	3335      	adds	r3, #53	; 0x35
    3eb0:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3eb2:	07fb      	lsls	r3, r7, #31
    3eb4:	d502      	bpl.n	3ebc <_spi_interrupt_handler+0x18c>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3eb6:	0020      	movs	r0, r4
    3eb8:	68e3      	ldr	r3, [r4, #12]
    3eba:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3ebc:	09ed      	lsrs	r5, r5, #7
    3ebe:	d007      	beq.n	3ed0 <_spi_interrupt_handler+0x1a0>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ec0:	2380      	movs	r3, #128	; 0x80
    3ec2:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ec4:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3ec6:	067b      	lsls	r3, r7, #25
    3ec8:	d502      	bpl.n	3ed0 <_spi_interrupt_handler+0x1a0>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ecc:	0020      	movs	r0, r4
    3ece:	4798      	blx	r3
		}
	}
#  endif
}
    3ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	20000340 	.word	0x20000340
    3ed8:	20000358 	.word	0x20000358

00003edc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ede:	465f      	mov	r7, fp
    3ee0:	4656      	mov	r6, sl
    3ee2:	464d      	mov	r5, r9
    3ee4:	4644      	mov	r4, r8
    3ee6:	b4f0      	push	{r4, r5, r6, r7}
    3ee8:	b091      	sub	sp, #68	; 0x44
    3eea:	0005      	movs	r5, r0
    3eec:	000c      	movs	r4, r1
    3eee:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3ef0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3ef2:	0008      	movs	r0, r1
    3ef4:	4bb9      	ldr	r3, [pc, #740]	; (41dc <usart_init+0x300>)
    3ef6:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ef8:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3efa:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3efc:	07d2      	lsls	r2, r2, #31
    3efe:	d500      	bpl.n	3f02 <usart_init+0x26>
    3f00:	e164      	b.n	41cc <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3f02:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3f04:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3f06:	0792      	lsls	r2, r2, #30
    3f08:	d500      	bpl.n	3f0c <usart_init+0x30>
    3f0a:	e15f      	b.n	41cc <usart_init+0x2f0>
    3f0c:	49b4      	ldr	r1, [pc, #720]	; (41e0 <usart_init+0x304>)
    3f0e:	6a0a      	ldr	r2, [r1, #32]
    3f10:	1c87      	adds	r7, r0, #2
    3f12:	3b1b      	subs	r3, #27
    3f14:	40bb      	lsls	r3, r7
    3f16:	4313      	orrs	r3, r2
    3f18:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3f1a:	a90f      	add	r1, sp, #60	; 0x3c
    3f1c:	272d      	movs	r7, #45	; 0x2d
    3f1e:	5df3      	ldrb	r3, [r6, r7]
    3f20:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f22:	3014      	adds	r0, #20
    3f24:	b2c3      	uxtb	r3, r0
    3f26:	9302      	str	r3, [sp, #8]
    3f28:	0018      	movs	r0, r3
    3f2a:	4bae      	ldr	r3, [pc, #696]	; (41e4 <usart_init+0x308>)
    3f2c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f2e:	9802      	ldr	r0, [sp, #8]
    3f30:	4bad      	ldr	r3, [pc, #692]	; (41e8 <usart_init+0x30c>)
    3f32:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f34:	5df0      	ldrb	r0, [r6, r7]
    3f36:	2100      	movs	r1, #0
    3f38:	4bac      	ldr	r3, [pc, #688]	; (41ec <usart_init+0x310>)
    3f3a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3f3c:	7af3      	ldrb	r3, [r6, #11]
    3f3e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3f40:	2324      	movs	r3, #36	; 0x24
    3f42:	5cf3      	ldrb	r3, [r6, r3]
    3f44:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3f46:	2325      	movs	r3, #37	; 0x25
    3f48:	5cf3      	ldrb	r3, [r6, r3]
    3f4a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3f4c:	7ef3      	ldrb	r3, [r6, #27]
    3f4e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3f50:	7f33      	ldrb	r3, [r6, #28]
    3f52:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f54:	682b      	ldr	r3, [r5, #0]
    3f56:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f58:	0018      	movs	r0, r3
    3f5a:	4ba0      	ldr	r3, [pc, #640]	; (41dc <usart_init+0x300>)
    3f5c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f5e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3f60:	2200      	movs	r2, #0
    3f62:	230e      	movs	r3, #14
    3f64:	a906      	add	r1, sp, #24
    3f66:	468c      	mov	ip, r1
    3f68:	4463      	add	r3, ip
    3f6a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3f6c:	8a32      	ldrh	r2, [r6, #16]
    3f6e:	9202      	str	r2, [sp, #8]
    3f70:	2380      	movs	r3, #128	; 0x80
    3f72:	01db      	lsls	r3, r3, #7
    3f74:	429a      	cmp	r2, r3
    3f76:	d01a      	beq.n	3fae <usart_init+0xd2>
    3f78:	d804      	bhi.n	3f84 <usart_init+0xa8>
    3f7a:	2380      	movs	r3, #128	; 0x80
    3f7c:	019b      	lsls	r3, r3, #6
    3f7e:	429a      	cmp	r2, r3
    3f80:	d00b      	beq.n	3f9a <usart_init+0xbe>
    3f82:	e104      	b.n	418e <usart_init+0x2b2>
    3f84:	23c0      	movs	r3, #192	; 0xc0
    3f86:	01db      	lsls	r3, r3, #7
    3f88:	9a02      	ldr	r2, [sp, #8]
    3f8a:	429a      	cmp	r2, r3
    3f8c:	d00a      	beq.n	3fa4 <usart_init+0xc8>
    3f8e:	2380      	movs	r3, #128	; 0x80
    3f90:	021b      	lsls	r3, r3, #8
    3f92:	429a      	cmp	r2, r3
    3f94:	d100      	bne.n	3f98 <usart_init+0xbc>
    3f96:	e0ff      	b.n	4198 <usart_init+0x2bc>
    3f98:	e0f9      	b.n	418e <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f9a:	2310      	movs	r3, #16
    3f9c:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f9e:	3b0f      	subs	r3, #15
    3fa0:	9307      	str	r3, [sp, #28]
    3fa2:	e0fd      	b.n	41a0 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3fa4:	2308      	movs	r3, #8
    3fa6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3fa8:	3b07      	subs	r3, #7
    3faa:	9307      	str	r3, [sp, #28]
    3fac:	e0f8      	b.n	41a0 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3fae:	6833      	ldr	r3, [r6, #0]
    3fb0:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    3fb2:	68f3      	ldr	r3, [r6, #12]
    3fb4:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3fb6:	6973      	ldr	r3, [r6, #20]
    3fb8:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3fba:	7e33      	ldrb	r3, [r6, #24]
    3fbc:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3fbe:	2326      	movs	r3, #38	; 0x26
    3fc0:	5cf3      	ldrb	r3, [r6, r3]
    3fc2:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3fc4:	6873      	ldr	r3, [r6, #4]
    3fc6:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d015      	beq.n	3ff8 <usart_init+0x11c>
    3fcc:	2380      	movs	r3, #128	; 0x80
    3fce:	055b      	lsls	r3, r3, #21
    3fd0:	459a      	cmp	sl, r3
    3fd2:	d136      	bne.n	4042 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3fd4:	2327      	movs	r3, #39	; 0x27
    3fd6:	5cf3      	ldrb	r3, [r6, r3]
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d136      	bne.n	404a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3fdc:	6a33      	ldr	r3, [r6, #32]
    3fde:	001f      	movs	r7, r3
    3fe0:	b2c0      	uxtb	r0, r0
    3fe2:	4b83      	ldr	r3, [pc, #524]	; (41f0 <usart_init+0x314>)
    3fe4:	4798      	blx	r3
    3fe6:	0001      	movs	r1, r0
    3fe8:	220e      	movs	r2, #14
    3fea:	ab06      	add	r3, sp, #24
    3fec:	469c      	mov	ip, r3
    3fee:	4462      	add	r2, ip
    3ff0:	0038      	movs	r0, r7
    3ff2:	4b80      	ldr	r3, [pc, #512]	; (41f4 <usart_init+0x318>)
    3ff4:	4798      	blx	r3
    3ff6:	e025      	b.n	4044 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3ff8:	2308      	movs	r3, #8
    3ffa:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3ffc:	2300      	movs	r3, #0
    3ffe:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4000:	2327      	movs	r3, #39	; 0x27
    4002:	5cf3      	ldrb	r3, [r6, r3]
    4004:	2b00      	cmp	r3, #0
    4006:	d00b      	beq.n	4020 <usart_init+0x144>
				status_code =
    4008:	9b06      	ldr	r3, [sp, #24]
    400a:	9300      	str	r3, [sp, #0]
    400c:	9b07      	ldr	r3, [sp, #28]
    400e:	220e      	movs	r2, #14
    4010:	a906      	add	r1, sp, #24
    4012:	468c      	mov	ip, r1
    4014:	4462      	add	r2, ip
    4016:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4018:	6a30      	ldr	r0, [r6, #32]
    401a:	4f77      	ldr	r7, [pc, #476]	; (41f8 <usart_init+0x31c>)
    401c:	47b8      	blx	r7
    401e:	e011      	b.n	4044 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4020:	6a33      	ldr	r3, [r6, #32]
    4022:	001f      	movs	r7, r3
    4024:	b2c0      	uxtb	r0, r0
    4026:	4b72      	ldr	r3, [pc, #456]	; (41f0 <usart_init+0x314>)
    4028:	4798      	blx	r3
    402a:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    402c:	9b06      	ldr	r3, [sp, #24]
    402e:	9300      	str	r3, [sp, #0]
    4030:	9b07      	ldr	r3, [sp, #28]
    4032:	220e      	movs	r2, #14
    4034:	a806      	add	r0, sp, #24
    4036:	4684      	mov	ip, r0
    4038:	4462      	add	r2, ip
    403a:	0038      	movs	r0, r7
    403c:	4f6e      	ldr	r7, [pc, #440]	; (41f8 <usart_init+0x31c>)
    403e:	47b8      	blx	r7
    4040:	e000      	b.n	4044 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    4042:	2000      	movs	r0, #0
    4044:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4046:	d000      	beq.n	404a <usart_init+0x16e>
    4048:	e0c0      	b.n	41cc <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    404a:	7e73      	ldrb	r3, [r6, #25]
    404c:	2b00      	cmp	r3, #0
    404e:	d002      	beq.n	4056 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4050:	7eb3      	ldrb	r3, [r6, #26]
    4052:	464a      	mov	r2, r9
    4054:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4056:	682a      	ldr	r2, [r5, #0]
    4058:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    405a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    405c:	2b00      	cmp	r3, #0
    405e:	d1fc      	bne.n	405a <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4060:	330e      	adds	r3, #14
    4062:	aa06      	add	r2, sp, #24
    4064:	4694      	mov	ip, r2
    4066:	4463      	add	r3, ip
    4068:	881b      	ldrh	r3, [r3, #0]
    406a:	464a      	mov	r2, r9
    406c:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    406e:	9b04      	ldr	r3, [sp, #16]
    4070:	465a      	mov	r2, fp
    4072:	4313      	orrs	r3, r2
    4074:	9a03      	ldr	r2, [sp, #12]
    4076:	4313      	orrs	r3, r2
    4078:	4652      	mov	r2, sl
    407a:	4313      	orrs	r3, r2
    407c:	433b      	orrs	r3, r7
    407e:	4642      	mov	r2, r8
    4080:	0212      	lsls	r2, r2, #8
    4082:	4313      	orrs	r3, r2
    4084:	9a05      	ldr	r2, [sp, #20]
    4086:	0757      	lsls	r7, r2, #29
    4088:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    408a:	2327      	movs	r3, #39	; 0x27
    408c:	5cf3      	ldrb	r3, [r6, r3]
    408e:	2b00      	cmp	r3, #0
    4090:	d101      	bne.n	4096 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4092:	3304      	adds	r3, #4
    4094:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    4096:	7e71      	ldrb	r1, [r6, #25]
    4098:	0289      	lsls	r1, r1, #10
    409a:	7f33      	ldrb	r3, [r6, #28]
    409c:	025b      	lsls	r3, r3, #9
    409e:	4319      	orrs	r1, r3
    40a0:	7f73      	ldrb	r3, [r6, #29]
    40a2:	021b      	lsls	r3, r3, #8
    40a4:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    40a6:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    40a8:	5cf3      	ldrb	r3, [r6, r3]
    40aa:	045b      	lsls	r3, r3, #17
    40ac:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    40ae:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    40b0:	5cf2      	ldrb	r2, [r6, r3]
    40b2:	0412      	lsls	r2, r2, #16
    40b4:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    40b6:	7af3      	ldrb	r3, [r6, #11]
    40b8:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    40ba:	8933      	ldrh	r3, [r6, #8]
    40bc:	2bff      	cmp	r3, #255	; 0xff
    40be:	d004      	beq.n	40ca <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    40c0:	2280      	movs	r2, #128	; 0x80
    40c2:	0452      	lsls	r2, r2, #17
    40c4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    40c6:	4319      	orrs	r1, r3
    40c8:	e005      	b.n	40d6 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    40ca:	7ef3      	ldrb	r3, [r6, #27]
    40cc:	2b00      	cmp	r3, #0
    40ce:	d002      	beq.n	40d6 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    40d0:	2380      	movs	r3, #128	; 0x80
    40d2:	04db      	lsls	r3, r3, #19
    40d4:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    40d6:	232c      	movs	r3, #44	; 0x2c
    40d8:	5cf3      	ldrb	r3, [r6, r3]
    40da:	2b00      	cmp	r3, #0
    40dc:	d103      	bne.n	40e6 <usart_init+0x20a>
    40de:	4b47      	ldr	r3, [pc, #284]	; (41fc <usart_init+0x320>)
    40e0:	789b      	ldrb	r3, [r3, #2]
    40e2:	079b      	lsls	r3, r3, #30
    40e4:	d501      	bpl.n	40ea <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    40e6:	2380      	movs	r3, #128	; 0x80
    40e8:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    40ea:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40ec:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    40ee:	2b00      	cmp	r3, #0
    40f0:	d1fc      	bne.n	40ec <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    40f2:	464b      	mov	r3, r9
    40f4:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    40f6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40f8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    40fa:	2b00      	cmp	r3, #0
    40fc:	d1fc      	bne.n	40f8 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    40fe:	464b      	mov	r3, r9
    4100:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4102:	ab0e      	add	r3, sp, #56	; 0x38
    4104:	2280      	movs	r2, #128	; 0x80
    4106:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4108:	2200      	movs	r2, #0
    410a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    410c:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    410e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    4110:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4112:	930a      	str	r3, [sp, #40]	; 0x28
    4114:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4116:	930b      	str	r3, [sp, #44]	; 0x2c
    4118:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    411a:	930c      	str	r3, [sp, #48]	; 0x30
    411c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    411e:	9302      	str	r3, [sp, #8]
    4120:	930d      	str	r3, [sp, #52]	; 0x34
    4122:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4124:	ae0e      	add	r6, sp, #56	; 0x38
    4126:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4128:	00bb      	lsls	r3, r7, #2
    412a:	aa0a      	add	r2, sp, #40	; 0x28
    412c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    412e:	2800      	cmp	r0, #0
    4130:	d102      	bne.n	4138 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4132:	0020      	movs	r0, r4
    4134:	4b32      	ldr	r3, [pc, #200]	; (4200 <usart_init+0x324>)
    4136:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4138:	1c43      	adds	r3, r0, #1
    413a:	d005      	beq.n	4148 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    413c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    413e:	0c00      	lsrs	r0, r0, #16
    4140:	b2c0      	uxtb	r0, r0
    4142:	0031      	movs	r1, r6
    4144:	4b2f      	ldr	r3, [pc, #188]	; (4204 <usart_init+0x328>)
    4146:	4798      	blx	r3
    4148:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    414a:	2f04      	cmp	r7, #4
    414c:	d1eb      	bne.n	4126 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    414e:	2300      	movs	r3, #0
    4150:	60eb      	str	r3, [r5, #12]
    4152:	612b      	str	r3, [r5, #16]
    4154:	616b      	str	r3, [r5, #20]
    4156:	61ab      	str	r3, [r5, #24]
    4158:	61eb      	str	r3, [r5, #28]
    415a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    415c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    415e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4160:	2200      	movs	r2, #0
    4162:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4164:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4166:	3330      	adds	r3, #48	; 0x30
    4168:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    416a:	3301      	adds	r3, #1
    416c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    416e:	3301      	adds	r3, #1
    4170:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4172:	3301      	adds	r3, #1
    4174:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4176:	6828      	ldr	r0, [r5, #0]
    4178:	4b18      	ldr	r3, [pc, #96]	; (41dc <usart_init+0x300>)
    417a:	4798      	blx	r3
    417c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    417e:	4922      	ldr	r1, [pc, #136]	; (4208 <usart_init+0x32c>)
    4180:	4b22      	ldr	r3, [pc, #136]	; (420c <usart_init+0x330>)
    4182:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4184:	00a4      	lsls	r4, r4, #2
    4186:	4b22      	ldr	r3, [pc, #136]	; (4210 <usart_init+0x334>)
    4188:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    418a:	2300      	movs	r3, #0
    418c:	e01e      	b.n	41cc <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    418e:	2310      	movs	r3, #16
    4190:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4192:	2300      	movs	r3, #0
    4194:	9307      	str	r3, [sp, #28]
    4196:	e003      	b.n	41a0 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4198:	2303      	movs	r3, #3
    419a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    419c:	2300      	movs	r3, #0
    419e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    41a0:	6833      	ldr	r3, [r6, #0]
    41a2:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    41a4:	68f3      	ldr	r3, [r6, #12]
    41a6:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    41a8:	6973      	ldr	r3, [r6, #20]
    41aa:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    41ac:	7e33      	ldrb	r3, [r6, #24]
    41ae:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    41b0:	2326      	movs	r3, #38	; 0x26
    41b2:	5cf3      	ldrb	r3, [r6, r3]
    41b4:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    41b6:	6873      	ldr	r3, [r6, #4]
    41b8:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    41ba:	2b00      	cmp	r3, #0
    41bc:	d100      	bne.n	41c0 <usart_init+0x2e4>
    41be:	e71f      	b.n	4000 <usart_init+0x124>
    41c0:	2380      	movs	r3, #128	; 0x80
    41c2:	055b      	lsls	r3, r3, #21
    41c4:	459a      	cmp	sl, r3
    41c6:	d100      	bne.n	41ca <usart_init+0x2ee>
    41c8:	e704      	b.n	3fd4 <usart_init+0xf8>
    41ca:	e73e      	b.n	404a <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    41cc:	0018      	movs	r0, r3
    41ce:	b011      	add	sp, #68	; 0x44
    41d0:	bc3c      	pop	{r2, r3, r4, r5}
    41d2:	4690      	mov	r8, r2
    41d4:	4699      	mov	r9, r3
    41d6:	46a2      	mov	sl, r4
    41d8:	46ab      	mov	fp, r5
    41da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41dc:	0000396d 	.word	0x0000396d
    41e0:	40000400 	.word	0x40000400
    41e4:	00004aa5 	.word	0x00004aa5
    41e8:	00004a19 	.word	0x00004a19
    41ec:	00003799 	.word	0x00003799
    41f0:	00004ac1 	.word	0x00004ac1
    41f4:	000035a9 	.word	0x000035a9
    41f8:	000035d1 	.word	0x000035d1
    41fc:	41002000 	.word	0x41002000
    4200:	000037e5 	.word	0x000037e5
    4204:	00004b9d 	.word	0x00004b9d
    4208:	000042b1 	.word	0x000042b1
    420c:	000039ad 	.word	0x000039ad
    4210:	20000340 	.word	0x20000340

00004214 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4214:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4216:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4218:	2a00      	cmp	r2, #0
    421a:	d00e      	beq.n	423a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    421c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    421e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4220:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4222:	2a00      	cmp	r2, #0
    4224:	d109      	bne.n	423a <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4226:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4228:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    422a:	2a00      	cmp	r2, #0
    422c:	d1fc      	bne.n	4228 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    422e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4230:	2102      	movs	r1, #2
    4232:	7e1a      	ldrb	r2, [r3, #24]
    4234:	420a      	tst	r2, r1
    4236:	d0fc      	beq.n	4232 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    4238:	2300      	movs	r3, #0
}
    423a:	0018      	movs	r0, r3
    423c:	4770      	bx	lr
    423e:	46c0      	nop			; (mov r8, r8)

00004240 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4240:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4242:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4244:	2a00      	cmp	r2, #0
    4246:	d030      	beq.n	42aa <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    4248:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    424a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    424c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    424e:	2a00      	cmp	r2, #0
    4250:	d12b      	bne.n	42aa <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4252:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4254:	7e10      	ldrb	r0, [r2, #24]
    4256:	0740      	lsls	r0, r0, #29
    4258:	d527      	bpl.n	42aa <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    425a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    425c:	2b00      	cmp	r3, #0
    425e:	d1fc      	bne.n	425a <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4260:	8b53      	ldrh	r3, [r2, #26]
    4262:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    4264:	0698      	lsls	r0, r3, #26
    4266:	d01d      	beq.n	42a4 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4268:	0798      	lsls	r0, r3, #30
    426a:	d503      	bpl.n	4274 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    426c:	2302      	movs	r3, #2
    426e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    4270:	3318      	adds	r3, #24
    4272:	e01a      	b.n	42aa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4274:	0758      	lsls	r0, r3, #29
    4276:	d503      	bpl.n	4280 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4278:	2304      	movs	r3, #4
    427a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    427c:	331a      	adds	r3, #26
    427e:	e014      	b.n	42aa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4280:	07d8      	lsls	r0, r3, #31
    4282:	d503      	bpl.n	428c <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4284:	2301      	movs	r3, #1
    4286:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    4288:	3312      	adds	r3, #18
    428a:	e00e      	b.n	42aa <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    428c:	06d8      	lsls	r0, r3, #27
    428e:	d503      	bpl.n	4298 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4290:	2310      	movs	r3, #16
    4292:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    4294:	3332      	adds	r3, #50	; 0x32
    4296:	e008      	b.n	42aa <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4298:	069b      	lsls	r3, r3, #26
    429a:	d503      	bpl.n	42a4 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    429c:	2320      	movs	r3, #32
    429e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    42a0:	3321      	adds	r3, #33	; 0x21
    42a2:	e002      	b.n	42aa <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    42a4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    42a6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    42a8:	2300      	movs	r3, #0
}
    42aa:	0018      	movs	r0, r3
    42ac:	4770      	bx	lr
    42ae:	46c0      	nop			; (mov r8, r8)

000042b0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    42b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    42b2:	0080      	lsls	r0, r0, #2
    42b4:	4b60      	ldr	r3, [pc, #384]	; (4438 <_usart_interrupt_handler+0x188>)
    42b6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    42b8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    42ba:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    42bc:	2b00      	cmp	r3, #0
    42be:	d1fc      	bne.n	42ba <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    42c0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    42c2:	7da6      	ldrb	r6, [r4, #22]
    42c4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    42c6:	2330      	movs	r3, #48	; 0x30
    42c8:	5ceb      	ldrb	r3, [r5, r3]
    42ca:	2231      	movs	r2, #49	; 0x31
    42cc:	5caf      	ldrb	r7, [r5, r2]
    42ce:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    42d0:	07f3      	lsls	r3, r6, #31
    42d2:	d522      	bpl.n	431a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    42d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    42d6:	b29b      	uxth	r3, r3
    42d8:	2b00      	cmp	r3, #0
    42da:	d01c      	beq.n	4316 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    42dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    42de:	7813      	ldrb	r3, [r2, #0]
    42e0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    42e2:	1c51      	adds	r1, r2, #1
    42e4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    42e6:	7969      	ldrb	r1, [r5, #5]
    42e8:	2901      	cmp	r1, #1
    42ea:	d001      	beq.n	42f0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    42ec:	b29b      	uxth	r3, r3
    42ee:	e004      	b.n	42fa <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    42f0:	7851      	ldrb	r1, [r2, #1]
    42f2:	0209      	lsls	r1, r1, #8
    42f4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    42f6:	3202      	adds	r2, #2
    42f8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    42fa:	05db      	lsls	r3, r3, #23
    42fc:	0ddb      	lsrs	r3, r3, #23
    42fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4300:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4302:	3b01      	subs	r3, #1
    4304:	b29b      	uxth	r3, r3
    4306:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4308:	2b00      	cmp	r3, #0
    430a:	d106      	bne.n	431a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    430c:	3301      	adds	r3, #1
    430e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4310:	3301      	adds	r3, #1
    4312:	75a3      	strb	r3, [r4, #22]
    4314:	e001      	b.n	431a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4316:	2301      	movs	r3, #1
    4318:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    431a:	07b3      	lsls	r3, r6, #30
    431c:	d509      	bpl.n	4332 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    431e:	2302      	movs	r3, #2
    4320:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4322:	2200      	movs	r2, #0
    4324:	3331      	adds	r3, #49	; 0x31
    4326:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4328:	07fb      	lsls	r3, r7, #31
    432a:	d502      	bpl.n	4332 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    432c:	0028      	movs	r0, r5
    432e:	68eb      	ldr	r3, [r5, #12]
    4330:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4332:	0773      	lsls	r3, r6, #29
    4334:	d560      	bpl.n	43f8 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    4336:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4338:	b29b      	uxth	r3, r3
    433a:	2b00      	cmp	r3, #0
    433c:	d05a      	beq.n	43f4 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    433e:	8b63      	ldrh	r3, [r4, #26]
    4340:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4342:	071a      	lsls	r2, r3, #28
    4344:	d402      	bmi.n	434c <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4346:	223f      	movs	r2, #63	; 0x3f
    4348:	4013      	ands	r3, r2
    434a:	e001      	b.n	4350 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    434c:	2237      	movs	r2, #55	; 0x37
    434e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4350:	2b00      	cmp	r3, #0
    4352:	d02d      	beq.n	43b0 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4354:	079a      	lsls	r2, r3, #30
    4356:	d505      	bpl.n	4364 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4358:	221a      	movs	r2, #26
    435a:	2332      	movs	r3, #50	; 0x32
    435c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    435e:	3b30      	subs	r3, #48	; 0x30
    4360:	8363      	strh	r3, [r4, #26]
    4362:	e01f      	b.n	43a4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4364:	075a      	lsls	r2, r3, #29
    4366:	d505      	bpl.n	4374 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    4368:	221e      	movs	r2, #30
    436a:	2332      	movs	r3, #50	; 0x32
    436c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    436e:	3b2e      	subs	r3, #46	; 0x2e
    4370:	8363      	strh	r3, [r4, #26]
    4372:	e017      	b.n	43a4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4374:	07da      	lsls	r2, r3, #31
    4376:	d505      	bpl.n	4384 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4378:	2213      	movs	r2, #19
    437a:	2332      	movs	r3, #50	; 0x32
    437c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    437e:	3b31      	subs	r3, #49	; 0x31
    4380:	8363      	strh	r3, [r4, #26]
    4382:	e00f      	b.n	43a4 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4384:	06da      	lsls	r2, r3, #27
    4386:	d505      	bpl.n	4394 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4388:	2242      	movs	r2, #66	; 0x42
    438a:	2332      	movs	r3, #50	; 0x32
    438c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    438e:	3b22      	subs	r3, #34	; 0x22
    4390:	8363      	strh	r3, [r4, #26]
    4392:	e007      	b.n	43a4 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4394:	2220      	movs	r2, #32
    4396:	421a      	tst	r2, r3
    4398:	d004      	beq.n	43a4 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    439a:	3221      	adds	r2, #33	; 0x21
    439c:	2332      	movs	r3, #50	; 0x32
    439e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    43a0:	3b12      	subs	r3, #18
    43a2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    43a4:	077b      	lsls	r3, r7, #29
    43a6:	d527      	bpl.n	43f8 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    43a8:	0028      	movs	r0, r5
    43aa:	696b      	ldr	r3, [r5, #20]
    43ac:	4798      	blx	r3
    43ae:	e023      	b.n	43f8 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    43b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    43b2:	05db      	lsls	r3, r3, #23
    43b4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    43b6:	b2da      	uxtb	r2, r3
    43b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    43ba:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    43bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    43be:	1c51      	adds	r1, r2, #1
    43c0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    43c2:	7969      	ldrb	r1, [r5, #5]
    43c4:	2901      	cmp	r1, #1
    43c6:	d104      	bne.n	43d2 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    43c8:	0a1b      	lsrs	r3, r3, #8
    43ca:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    43cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    43ce:	3301      	adds	r3, #1
    43d0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    43d2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    43d4:	3b01      	subs	r3, #1
    43d6:	b29b      	uxth	r3, r3
    43d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    43da:	2b00      	cmp	r3, #0
    43dc:	d10c      	bne.n	43f8 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43de:	3304      	adds	r3, #4
    43e0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    43e2:	2200      	movs	r2, #0
    43e4:	332e      	adds	r3, #46	; 0x2e
    43e6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    43e8:	07bb      	lsls	r3, r7, #30
    43ea:	d505      	bpl.n	43f8 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    43ec:	0028      	movs	r0, r5
    43ee:	692b      	ldr	r3, [r5, #16]
    43f0:	4798      	blx	r3
    43f2:	e001      	b.n	43f8 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43f4:	2304      	movs	r3, #4
    43f6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    43f8:	06f3      	lsls	r3, r6, #27
    43fa:	d507      	bpl.n	440c <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    43fc:	2310      	movs	r3, #16
    43fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4400:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4402:	06fb      	lsls	r3, r7, #27
    4404:	d502      	bpl.n	440c <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4406:	0028      	movs	r0, r5
    4408:	69eb      	ldr	r3, [r5, #28]
    440a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    440c:	06b3      	lsls	r3, r6, #26
    440e:	d507      	bpl.n	4420 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4410:	2320      	movs	r3, #32
    4412:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4414:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4416:	073b      	lsls	r3, r7, #28
    4418:	d502      	bpl.n	4420 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    441a:	0028      	movs	r0, r5
    441c:	69ab      	ldr	r3, [r5, #24]
    441e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4420:	0733      	lsls	r3, r6, #28
    4422:	d507      	bpl.n	4434 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4424:	2308      	movs	r3, #8
    4426:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4428:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    442a:	06bb      	lsls	r3, r7, #26
    442c:	d502      	bpl.n	4434 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    442e:	6a2b      	ldr	r3, [r5, #32]
    4430:	0028      	movs	r0, r5
    4432:	4798      	blx	r3
		}
	}
#endif
}
    4434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	20000340 	.word	0x20000340

0000443c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    443c:	b510      	push	{r4, lr}
	switch (clock_source) {
    443e:	2808      	cmp	r0, #8
    4440:	d803      	bhi.n	444a <system_clock_source_get_hz+0xe>
    4442:	0080      	lsls	r0, r0, #2
    4444:	4b1b      	ldr	r3, [pc, #108]	; (44b4 <system_clock_source_get_hz+0x78>)
    4446:	581b      	ldr	r3, [r3, r0]
    4448:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    444a:	2000      	movs	r0, #0
    444c:	e030      	b.n	44b0 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    444e:	4b1a      	ldr	r3, [pc, #104]	; (44b8 <system_clock_source_get_hz+0x7c>)
    4450:	6918      	ldr	r0, [r3, #16]
    4452:	e02d      	b.n	44b0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4454:	4b19      	ldr	r3, [pc, #100]	; (44bc <system_clock_source_get_hz+0x80>)
    4456:	6a1b      	ldr	r3, [r3, #32]
    4458:	059b      	lsls	r3, r3, #22
    445a:	0f9b      	lsrs	r3, r3, #30
    445c:	4818      	ldr	r0, [pc, #96]	; (44c0 <system_clock_source_get_hz+0x84>)
    445e:	40d8      	lsrs	r0, r3
    4460:	e026      	b.n	44b0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4462:	4b15      	ldr	r3, [pc, #84]	; (44b8 <system_clock_source_get_hz+0x7c>)
    4464:	6958      	ldr	r0, [r3, #20]
    4466:	e023      	b.n	44b0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4468:	4b13      	ldr	r3, [pc, #76]	; (44b8 <system_clock_source_get_hz+0x7c>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	2002      	movs	r0, #2
    446e:	4018      	ands	r0, r3
    4470:	d01e      	beq.n	44b0 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4472:	4912      	ldr	r1, [pc, #72]	; (44bc <system_clock_source_get_hz+0x80>)
    4474:	2210      	movs	r2, #16
    4476:	68cb      	ldr	r3, [r1, #12]
    4478:	421a      	tst	r2, r3
    447a:	d0fc      	beq.n	4476 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    447c:	4b0e      	ldr	r3, [pc, #56]	; (44b8 <system_clock_source_get_hz+0x7c>)
    447e:	681b      	ldr	r3, [r3, #0]
    4480:	075b      	lsls	r3, r3, #29
    4482:	d514      	bpl.n	44ae <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4484:	2000      	movs	r0, #0
    4486:	4b0f      	ldr	r3, [pc, #60]	; (44c4 <system_clock_source_get_hz+0x88>)
    4488:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    448a:	4b0b      	ldr	r3, [pc, #44]	; (44b8 <system_clock_source_get_hz+0x7c>)
    448c:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    448e:	041b      	lsls	r3, r3, #16
    4490:	0c1b      	lsrs	r3, r3, #16
    4492:	4358      	muls	r0, r3
    4494:	e00c      	b.n	44b0 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4496:	2350      	movs	r3, #80	; 0x50
    4498:	4a08      	ldr	r2, [pc, #32]	; (44bc <system_clock_source_get_hz+0x80>)
    449a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    449c:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    449e:	075b      	lsls	r3, r3, #29
    44a0:	d506      	bpl.n	44b0 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    44a2:	4b05      	ldr	r3, [pc, #20]	; (44b8 <system_clock_source_get_hz+0x7c>)
    44a4:	68d8      	ldr	r0, [r3, #12]
    44a6:	e003      	b.n	44b0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    44a8:	2080      	movs	r0, #128	; 0x80
    44aa:	0200      	lsls	r0, r0, #8
    44ac:	e000      	b.n	44b0 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    44ae:	4806      	ldr	r0, [pc, #24]	; (44c8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    44b0:	bd10      	pop	{r4, pc}
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	00007bf4 	.word	0x00007bf4
    44b8:	200000f4 	.word	0x200000f4
    44bc:	40000800 	.word	0x40000800
    44c0:	007a1200 	.word	0x007a1200
    44c4:	00004ac1 	.word	0x00004ac1
    44c8:	02dc6c00 	.word	0x02dc6c00

000044cc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    44cc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    44ce:	4c0c      	ldr	r4, [pc, #48]	; (4500 <system_clock_source_osc8m_set_config+0x34>)
    44d0:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    44d2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    44d4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    44d6:	7842      	ldrb	r2, [r0, #1]
    44d8:	2001      	movs	r0, #1
    44da:	4002      	ands	r2, r0
    44dc:	0192      	lsls	r2, r2, #6
    44de:	2640      	movs	r6, #64	; 0x40
    44e0:	43b3      	bics	r3, r6
    44e2:	4313      	orrs	r3, r2
    44e4:	0002      	movs	r2, r0
    44e6:	402a      	ands	r2, r5
    44e8:	01d2      	lsls	r2, r2, #7
    44ea:	307f      	adds	r0, #127	; 0x7f
    44ec:	4383      	bics	r3, r0
    44ee:	4313      	orrs	r3, r2
    44f0:	2203      	movs	r2, #3
    44f2:	400a      	ands	r2, r1
    44f4:	0212      	lsls	r2, r2, #8
    44f6:	4903      	ldr	r1, [pc, #12]	; (4504 <system_clock_source_osc8m_set_config+0x38>)
    44f8:	400b      	ands	r3, r1
    44fa:	4313      	orrs	r3, r2
    44fc:	6223      	str	r3, [r4, #32]
}
    44fe:	bd70      	pop	{r4, r5, r6, pc}
    4500:	40000800 	.word	0x40000800
    4504:	fffffcff 	.word	0xfffffcff

00004508 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}
    450a:	465f      	mov	r7, fp
    450c:	4656      	mov	r6, sl
    450e:	464d      	mov	r5, r9
    4510:	4644      	mov	r4, r8
    4512:	b4f0      	push	{r4, r5, r6, r7}
    4514:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4516:	4e2e      	ldr	r6, [pc, #184]	; (45d0 <system_clock_source_xosc32k_set_config+0xc8>)
    4518:	8ab3      	ldrh	r3, [r6, #20]
    451a:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    451c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    451e:	7803      	ldrb	r3, [r0, #0]
    4520:	425a      	negs	r2, r3
    4522:	415a      	adcs	r2, r3
    4524:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4526:	7883      	ldrb	r3, [r0, #2]
    4528:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    452a:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    452c:	7902      	ldrb	r2, [r0, #4]
    452e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    4530:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4532:	7b02      	ldrb	r2, [r0, #12]
    4534:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    4536:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4538:	6882      	ldr	r2, [r0, #8]
    453a:	4826      	ldr	r0, [pc, #152]	; (45d4 <system_clock_source_xosc32k_set_config+0xcc>)
    453c:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    453e:	2001      	movs	r0, #1
    4540:	464a      	mov	r2, r9
    4542:	0092      	lsls	r2, r2, #2
    4544:	4691      	mov	r9, r2
    4546:	2204      	movs	r2, #4
    4548:	4692      	mov	sl, r2
    454a:	4662      	mov	r2, ip
    454c:	4651      	mov	r1, sl
    454e:	438a      	bics	r2, r1
    4550:	4694      	mov	ip, r2
    4552:	464a      	mov	r2, r9
    4554:	4661      	mov	r1, ip
    4556:	430a      	orrs	r2, r1
    4558:	4694      	mov	ip, r2
    455a:	4642      	mov	r2, r8
    455c:	4002      	ands	r2, r0
    455e:	00d2      	lsls	r2, r2, #3
    4560:	4690      	mov	r8, r2
    4562:	2208      	movs	r2, #8
    4564:	4691      	mov	r9, r2
    4566:	4662      	mov	r2, ip
    4568:	4649      	mov	r1, r9
    456a:	438a      	bics	r2, r1
    456c:	4694      	mov	ip, r2
    456e:	4642      	mov	r2, r8
    4570:	4661      	mov	r1, ip
    4572:	430a      	orrs	r2, r1
    4574:	4694      	mov	ip, r2
    4576:	4003      	ands	r3, r0
    4578:	011b      	lsls	r3, r3, #4
    457a:	2210      	movs	r2, #16
    457c:	4690      	mov	r8, r2
    457e:	4662      	mov	r2, ip
    4580:	4641      	mov	r1, r8
    4582:	438a      	bics	r2, r1
    4584:	4313      	orrs	r3, r2
    4586:	4659      	mov	r1, fp
    4588:	4001      	ands	r1, r0
    458a:	0149      	lsls	r1, r1, #5
    458c:	2220      	movs	r2, #32
    458e:	4393      	bics	r3, r2
    4590:	430b      	orrs	r3, r1
    4592:	9a01      	ldr	r2, [sp, #4]
    4594:	4002      	ands	r2, r0
    4596:	0192      	lsls	r2, r2, #6
    4598:	2140      	movs	r1, #64	; 0x40
    459a:	438b      	bics	r3, r1
    459c:	4313      	orrs	r3, r2
    459e:	4007      	ands	r7, r0
    45a0:	01ff      	lsls	r7, r7, #7
    45a2:	2280      	movs	r2, #128	; 0x80
    45a4:	4393      	bics	r3, r2
    45a6:	433b      	orrs	r3, r7
    45a8:	3a79      	subs	r2, #121	; 0x79
    45aa:	4015      	ands	r5, r2
    45ac:	022d      	lsls	r5, r5, #8
    45ae:	4f0a      	ldr	r7, [pc, #40]	; (45d8 <system_clock_source_xosc32k_set_config+0xd0>)
    45b0:	403b      	ands	r3, r7
    45b2:	432b      	orrs	r3, r5
    45b4:	4004      	ands	r4, r0
    45b6:	0320      	lsls	r0, r4, #12
    45b8:	4c08      	ldr	r4, [pc, #32]	; (45dc <system_clock_source_xosc32k_set_config+0xd4>)
    45ba:	401c      	ands	r4, r3
    45bc:	4304      	orrs	r4, r0
    45be:	82b4      	strh	r4, [r6, #20]
}
    45c0:	b003      	add	sp, #12
    45c2:	bc3c      	pop	{r2, r3, r4, r5}
    45c4:	4690      	mov	r8, r2
    45c6:	4699      	mov	r9, r3
    45c8:	46a2      	mov	sl, r4
    45ca:	46ab      	mov	fp, r5
    45cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	40000800 	.word	0x40000800
    45d4:	200000f4 	.word	0x200000f4
    45d8:	fffff8ff 	.word	0xfffff8ff
    45dc:	ffffefff 	.word	0xffffefff

000045e0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    45e0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45e2:	7a03      	ldrb	r3, [r0, #8]
    45e4:	069b      	lsls	r3, r3, #26
    45e6:	0c1a      	lsrs	r2, r3, #16
    45e8:	8943      	ldrh	r3, [r0, #10]
    45ea:	059b      	lsls	r3, r3, #22
    45ec:	0d9b      	lsrs	r3, r3, #22
    45ee:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    45f0:	4c19      	ldr	r4, [pc, #100]	; (4658 <system_clock_source_dfll_set_config+0x78>)
    45f2:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    45f4:	7981      	ldrb	r1, [r0, #6]
    45f6:	79c3      	ldrb	r3, [r0, #7]
    45f8:	4319      	orrs	r1, r3
    45fa:	8843      	ldrh	r3, [r0, #2]
    45fc:	8882      	ldrh	r2, [r0, #4]
    45fe:	4313      	orrs	r3, r2
    4600:	430b      	orrs	r3, r1
    4602:	7842      	ldrb	r2, [r0, #1]
    4604:	01d2      	lsls	r2, r2, #7
    4606:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    4608:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    460a:	7803      	ldrb	r3, [r0, #0]
    460c:	2b04      	cmp	r3, #4
    460e:	d10f      	bne.n	4630 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4610:	7b03      	ldrb	r3, [r0, #12]
    4612:	069b      	lsls	r3, r3, #26
    4614:	8a02      	ldrh	r2, [r0, #16]
    4616:	4313      	orrs	r3, r2
    4618:	0019      	movs	r1, r3
    461a:	89c3      	ldrh	r3, [r0, #14]
    461c:	041b      	lsls	r3, r3, #16
    461e:	4a0f      	ldr	r2, [pc, #60]	; (465c <system_clock_source_dfll_set_config+0x7c>)
    4620:	4013      	ands	r3, r2
    4622:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4624:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4626:	6821      	ldr	r1, [r4, #0]
    4628:	2304      	movs	r3, #4
    462a:	430b      	orrs	r3, r1
    462c:	6023      	str	r3, [r4, #0]
    462e:	e011      	b.n	4654 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4630:	2b20      	cmp	r3, #32
    4632:	d10f      	bne.n	4654 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4634:	7b03      	ldrb	r3, [r0, #12]
    4636:	069b      	lsls	r3, r3, #26
    4638:	8a02      	ldrh	r2, [r0, #16]
    463a:	4313      	orrs	r3, r2
    463c:	0019      	movs	r1, r3
    463e:	89c3      	ldrh	r3, [r0, #14]
    4640:	041b      	lsls	r3, r3, #16
    4642:	4a06      	ldr	r2, [pc, #24]	; (465c <system_clock_source_dfll_set_config+0x7c>)
    4644:	4013      	ands	r3, r2
    4646:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4648:	4a03      	ldr	r2, [pc, #12]	; (4658 <system_clock_source_dfll_set_config+0x78>)
    464a:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    464c:	6813      	ldr	r3, [r2, #0]
    464e:	4904      	ldr	r1, [pc, #16]	; (4660 <system_clock_source_dfll_set_config+0x80>)
    4650:	430b      	orrs	r3, r1
    4652:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4654:	bd10      	pop	{r4, pc}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	200000f4 	.word	0x200000f4
    465c:	03ff0000 	.word	0x03ff0000
    4660:	00000424 	.word	0x00000424

00004664 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4664:	2808      	cmp	r0, #8
    4666:	d803      	bhi.n	4670 <system_clock_source_enable+0xc>
    4668:	0080      	lsls	r0, r0, #2
    466a:	4b25      	ldr	r3, [pc, #148]	; (4700 <system_clock_source_enable+0x9c>)
    466c:	581b      	ldr	r3, [r3, r0]
    466e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4670:	2017      	movs	r0, #23
    4672:	e044      	b.n	46fe <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4674:	4a23      	ldr	r2, [pc, #140]	; (4704 <system_clock_source_enable+0xa0>)
    4676:	6a11      	ldr	r1, [r2, #32]
    4678:	2302      	movs	r3, #2
    467a:	430b      	orrs	r3, r1
    467c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    467e:	2000      	movs	r0, #0
    4680:	e03d      	b.n	46fe <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4682:	4a20      	ldr	r2, [pc, #128]	; (4704 <system_clock_source_enable+0xa0>)
    4684:	6991      	ldr	r1, [r2, #24]
    4686:	2302      	movs	r3, #2
    4688:	430b      	orrs	r3, r1
    468a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    468c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    468e:	e036      	b.n	46fe <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4690:	4a1c      	ldr	r2, [pc, #112]	; (4704 <system_clock_source_enable+0xa0>)
    4692:	8a11      	ldrh	r1, [r2, #16]
    4694:	2302      	movs	r3, #2
    4696:	430b      	orrs	r3, r1
    4698:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    469a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    469c:	e02f      	b.n	46fe <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    469e:	4a19      	ldr	r2, [pc, #100]	; (4704 <system_clock_source_enable+0xa0>)
    46a0:	8a91      	ldrh	r1, [r2, #20]
    46a2:	2302      	movs	r3, #2
    46a4:	430b      	orrs	r3, r1
    46a6:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46a8:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    46aa:	e028      	b.n	46fe <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    46ac:	4916      	ldr	r1, [pc, #88]	; (4708 <system_clock_source_enable+0xa4>)
    46ae:	680b      	ldr	r3, [r1, #0]
    46b0:	2202      	movs	r2, #2
    46b2:	4313      	orrs	r3, r2
    46b4:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    46b6:	4b13      	ldr	r3, [pc, #76]	; (4704 <system_clock_source_enable+0xa0>)
    46b8:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46ba:	0019      	movs	r1, r3
    46bc:	320e      	adds	r2, #14
    46be:	68cb      	ldr	r3, [r1, #12]
    46c0:	421a      	tst	r2, r3
    46c2:	d0fc      	beq.n	46be <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    46c4:	4a10      	ldr	r2, [pc, #64]	; (4708 <system_clock_source_enable+0xa4>)
    46c6:	6891      	ldr	r1, [r2, #8]
    46c8:	4b0e      	ldr	r3, [pc, #56]	; (4704 <system_clock_source_enable+0xa0>)
    46ca:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    46cc:	6852      	ldr	r2, [r2, #4]
    46ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    46d0:	2200      	movs	r2, #0
    46d2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46d4:	0019      	movs	r1, r3
    46d6:	3210      	adds	r2, #16
    46d8:	68cb      	ldr	r3, [r1, #12]
    46da:	421a      	tst	r2, r3
    46dc:	d0fc      	beq.n	46d8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    46de:	4b0a      	ldr	r3, [pc, #40]	; (4708 <system_clock_source_enable+0xa4>)
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	b29b      	uxth	r3, r3
    46e4:	4a07      	ldr	r2, [pc, #28]	; (4704 <system_clock_source_enable+0xa0>)
    46e6:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46e8:	2000      	movs	r0, #0
    46ea:	e008      	b.n	46fe <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46ec:	4905      	ldr	r1, [pc, #20]	; (4704 <system_clock_source_enable+0xa0>)
    46ee:	2244      	movs	r2, #68	; 0x44
    46f0:	5c88      	ldrb	r0, [r1, r2]
    46f2:	2302      	movs	r3, #2
    46f4:	4303      	orrs	r3, r0
    46f6:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46f8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    46fa:	e000      	b.n	46fe <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    46fc:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    46fe:	4770      	bx	lr
    4700:	00007c18 	.word	0x00007c18
    4704:	40000800 	.word	0x40000800
    4708:	200000f4 	.word	0x200000f4

0000470c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    470c:	b5f0      	push	{r4, r5, r6, r7, lr}
    470e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4710:	22c2      	movs	r2, #194	; 0xc2
    4712:	00d2      	lsls	r2, r2, #3
    4714:	4b47      	ldr	r3, [pc, #284]	; (4834 <system_clock_init+0x128>)
    4716:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4718:	4947      	ldr	r1, [pc, #284]	; (4838 <system_clock_init+0x12c>)
    471a:	684b      	ldr	r3, [r1, #4]
    471c:	221e      	movs	r2, #30
    471e:	4393      	bics	r3, r2
    4720:	3a1a      	subs	r2, #26
    4722:	4313      	orrs	r3, r2
    4724:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4726:	3a02      	subs	r2, #2
    4728:	ab01      	add	r3, sp, #4
    472a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    472c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    472e:	4d43      	ldr	r5, [pc, #268]	; (483c <system_clock_init+0x130>)
    4730:	b2e0      	uxtb	r0, r4
    4732:	a901      	add	r1, sp, #4
    4734:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4736:	3401      	adds	r4, #1
    4738:	2c25      	cmp	r4, #37	; 0x25
    473a:	d1f9      	bne.n	4730 <system_clock_init+0x24>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    473c:	a80a      	add	r0, sp, #40	; 0x28
    473e:	2300      	movs	r3, #0
    4740:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    4742:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4744:	2280      	movs	r2, #128	; 0x80
    4746:	0212      	lsls	r2, r2, #8
    4748:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    474a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    474c:	2201      	movs	r2, #1
    474e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4750:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    4752:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4754:	3202      	adds	r2, #2
    4756:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4758:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    475a:	4b39      	ldr	r3, [pc, #228]	; (4840 <system_clock_init+0x134>)
    475c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    475e:	2005      	movs	r0, #5
    4760:	4b38      	ldr	r3, [pc, #224]	; (4844 <system_clock_init+0x138>)
    4762:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4764:	4933      	ldr	r1, [pc, #204]	; (4834 <system_clock_init+0x128>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4766:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4768:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    476a:	421a      	tst	r2, r3
    476c:	d0fc      	beq.n	4768 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    476e:	4a31      	ldr	r2, [pc, #196]	; (4834 <system_clock_init+0x128>)
    4770:	8a91      	ldrh	r1, [r2, #20]
    4772:	2380      	movs	r3, #128	; 0x80
    4774:	430b      	orrs	r3, r1
    4776:	8293      	strh	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4778:	ab05      	add	r3, sp, #20
    477a:	2100      	movs	r1, #0
    477c:	2200      	movs	r2, #0
    477e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4780:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4782:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4784:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    4786:	313f      	adds	r1, #63	; 0x3f
    4788:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    478a:	393b      	subs	r1, #59	; 0x3b
    478c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    478e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4790:	4b2d      	ldr	r3, [pc, #180]	; (4848 <system_clock_init+0x13c>)
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4796:	2b3f      	cmp	r3, #63	; 0x3f
    4798:	d100      	bne.n	479c <system_clock_init+0x90>
		coarse = 0x1f;
    479a:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    479c:	a805      	add	r0, sp, #20
    479e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    47a0:	4b2a      	ldr	r3, [pc, #168]	; (484c <system_clock_init+0x140>)
    47a2:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    47a4:	2307      	movs	r3, #7
    47a6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    47a8:	3338      	adds	r3, #56	; 0x38
    47aa:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    47ac:	4b28      	ldr	r3, [pc, #160]	; (4850 <system_clock_init+0x144>)
    47ae:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    47b0:	a804      	add	r0, sp, #16
    47b2:	2500      	movs	r5, #0
    47b4:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    47b6:	2601      	movs	r6, #1
    47b8:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    47ba:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    47bc:	4b25      	ldr	r3, [pc, #148]	; (4854 <system_clock_init+0x148>)
    47be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    47c0:	2006      	movs	r0, #6
    47c2:	4f20      	ldr	r7, [pc, #128]	; (4844 <system_clock_init+0x138>)
    47c4:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    47c6:	4b24      	ldr	r3, [pc, #144]	; (4858 <system_clock_init+0x14c>)
    47c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    47ca:	ac01      	add	r4, sp, #4
    47cc:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    47ce:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    47d0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    47d2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    47d4:	2305      	movs	r3, #5
    47d6:	7023      	strb	r3, [r4, #0]
    47d8:	0021      	movs	r1, r4
    47da:	2001      	movs	r0, #1
    47dc:	4b1f      	ldr	r3, [pc, #124]	; (485c <system_clock_init+0x150>)
    47de:	4798      	blx	r3
    47e0:	2001      	movs	r0, #1
    47e2:	4b1f      	ldr	r3, [pc, #124]	; (4860 <system_clock_init+0x154>)
    47e4:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    47e6:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    47e8:	0021      	movs	r1, r4
    47ea:	2000      	movs	r0, #0
    47ec:	4b13      	ldr	r3, [pc, #76]	; (483c <system_clock_init+0x130>)
    47ee:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    47f0:	2000      	movs	r0, #0
    47f2:	4b1c      	ldr	r3, [pc, #112]	; (4864 <system_clock_init+0x158>)
    47f4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    47f6:	2007      	movs	r0, #7
    47f8:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    47fa:	490e      	ldr	r1, [pc, #56]	; (4834 <system_clock_init+0x128>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    47fc:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    47fe:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4800:	4013      	ands	r3, r2
    4802:	2bd0      	cmp	r3, #208	; 0xd0
    4804:	d1fb      	bne.n	47fe <system_clock_init+0xf2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4806:	4a18      	ldr	r2, [pc, #96]	; (4868 <system_clock_init+0x15c>)
    4808:	2300      	movs	r3, #0
    480a:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    480c:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    480e:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4810:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4812:	a901      	add	r1, sp, #4
    4814:	2201      	movs	r2, #1
    4816:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4818:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    481a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    481c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    481e:	3307      	adds	r3, #7
    4820:	700b      	strb	r3, [r1, #0]
    4822:	2000      	movs	r0, #0
    4824:	4b0d      	ldr	r3, [pc, #52]	; (485c <system_clock_init+0x150>)
    4826:	4798      	blx	r3
    4828:	2000      	movs	r0, #0
    482a:	4b0d      	ldr	r3, [pc, #52]	; (4860 <system_clock_init+0x154>)
    482c:	4798      	blx	r3
#endif
}
    482e:	b00f      	add	sp, #60	; 0x3c
    4830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	40000800 	.word	0x40000800
    4838:	41004000 	.word	0x41004000
    483c:	00004aa5 	.word	0x00004aa5
    4840:	00004509 	.word	0x00004509
    4844:	00004665 	.word	0x00004665
    4848:	00806024 	.word	0x00806024
    484c:	000005b9 	.word	0x000005b9
    4850:	000045e1 	.word	0x000045e1
    4854:	000044cd 	.word	0x000044cd
    4858:	0000486d 	.word	0x0000486d
    485c:	00004891 	.word	0x00004891
    4860:	00004949 	.word	0x00004949
    4864:	00004a19 	.word	0x00004a19
    4868:	40000400 	.word	0x40000400

0000486c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    486c:	4a06      	ldr	r2, [pc, #24]	; (4888 <system_gclk_init+0x1c>)
    486e:	6991      	ldr	r1, [r2, #24]
    4870:	2308      	movs	r3, #8
    4872:	430b      	orrs	r3, r1
    4874:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4876:	2201      	movs	r2, #1
    4878:	4b04      	ldr	r3, [pc, #16]	; (488c <system_gclk_init+0x20>)
    487a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    487c:	0019      	movs	r1, r3
    487e:	780b      	ldrb	r3, [r1, #0]
    4880:	4213      	tst	r3, r2
    4882:	d1fc      	bne.n	487e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4884:	4770      	bx	lr
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	40000400 	.word	0x40000400
    488c:	40000c00 	.word	0x40000c00

00004890 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4890:	b570      	push	{r4, r5, r6, lr}
    4892:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4894:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4896:	780c      	ldrb	r4, [r1, #0]
    4898:	0224      	lsls	r4, r4, #8
    489a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    489c:	784b      	ldrb	r3, [r1, #1]
    489e:	2b00      	cmp	r3, #0
    48a0:	d002      	beq.n	48a8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    48a2:	2380      	movs	r3, #128	; 0x80
    48a4:	02db      	lsls	r3, r3, #11
    48a6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    48a8:	7a4b      	ldrb	r3, [r1, #9]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d002      	beq.n	48b4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    48ae:	2380      	movs	r3, #128	; 0x80
    48b0:	031b      	lsls	r3, r3, #12
    48b2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    48b4:	6848      	ldr	r0, [r1, #4]
    48b6:	2801      	cmp	r0, #1
    48b8:	d918      	bls.n	48ec <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    48ba:	1e43      	subs	r3, r0, #1
    48bc:	4218      	tst	r0, r3
    48be:	d110      	bne.n	48e2 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48c0:	2802      	cmp	r0, #2
    48c2:	d906      	bls.n	48d2 <system_gclk_gen_set_config+0x42>
    48c4:	2302      	movs	r3, #2
    48c6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    48c8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    48ca:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48cc:	4298      	cmp	r0, r3
    48ce:	d8fb      	bhi.n	48c8 <system_gclk_gen_set_config+0x38>
    48d0:	e000      	b.n	48d4 <system_gclk_gen_set_config+0x44>
    48d2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    48d4:	0212      	lsls	r2, r2, #8
    48d6:	4332      	orrs	r2, r6
    48d8:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    48da:	2380      	movs	r3, #128	; 0x80
    48dc:	035b      	lsls	r3, r3, #13
    48de:	431c      	orrs	r4, r3
    48e0:	e004      	b.n	48ec <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    48e2:	0205      	lsls	r5, r0, #8
    48e4:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    48e6:	2380      	movs	r3, #128	; 0x80
    48e8:	029b      	lsls	r3, r3, #10
    48ea:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    48ec:	7a0b      	ldrb	r3, [r1, #8]
    48ee:	2b00      	cmp	r3, #0
    48f0:	d002      	beq.n	48f8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    48f2:	2380      	movs	r3, #128	; 0x80
    48f4:	039b      	lsls	r3, r3, #14
    48f6:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48f8:	4a0f      	ldr	r2, [pc, #60]	; (4938 <system_gclk_gen_set_config+0xa8>)
    48fa:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    48fc:	b25b      	sxtb	r3, r3
    48fe:	2b00      	cmp	r3, #0
    4900:	dbfb      	blt.n	48fa <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4902:	4b0e      	ldr	r3, [pc, #56]	; (493c <system_gclk_gen_set_config+0xac>)
    4904:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4906:	4b0e      	ldr	r3, [pc, #56]	; (4940 <system_gclk_gen_set_config+0xb0>)
    4908:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    490a:	4a0b      	ldr	r2, [pc, #44]	; (4938 <system_gclk_gen_set_config+0xa8>)
    490c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    490e:	b25b      	sxtb	r3, r3
    4910:	2b00      	cmp	r3, #0
    4912:	dbfb      	blt.n	490c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4914:	4b08      	ldr	r3, [pc, #32]	; (4938 <system_gclk_gen_set_config+0xa8>)
    4916:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4918:	001a      	movs	r2, r3
    491a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    491c:	b25b      	sxtb	r3, r3
    491e:	2b00      	cmp	r3, #0
    4920:	dbfb      	blt.n	491a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4922:	4a05      	ldr	r2, [pc, #20]	; (4938 <system_gclk_gen_set_config+0xa8>)
    4924:	6851      	ldr	r1, [r2, #4]
    4926:	2380      	movs	r3, #128	; 0x80
    4928:	025b      	lsls	r3, r3, #9
    492a:	400b      	ands	r3, r1
    492c:	431c      	orrs	r4, r3
    492e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4930:	4b04      	ldr	r3, [pc, #16]	; (4944 <system_gclk_gen_set_config+0xb4>)
    4932:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4934:	bd70      	pop	{r4, r5, r6, pc}
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	40000c00 	.word	0x40000c00
    493c:	000032fd 	.word	0x000032fd
    4940:	40000c08 	.word	0x40000c08
    4944:	0000333d 	.word	0x0000333d

00004948 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4948:	b510      	push	{r4, lr}
    494a:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    494c:	4a0b      	ldr	r2, [pc, #44]	; (497c <system_gclk_gen_enable+0x34>)
    494e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4950:	b25b      	sxtb	r3, r3
    4952:	2b00      	cmp	r3, #0
    4954:	dbfb      	blt.n	494e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4956:	4b0a      	ldr	r3, [pc, #40]	; (4980 <system_gclk_gen_enable+0x38>)
    4958:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    495a:	4b0a      	ldr	r3, [pc, #40]	; (4984 <system_gclk_gen_enable+0x3c>)
    495c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    495e:	4a07      	ldr	r2, [pc, #28]	; (497c <system_gclk_gen_enable+0x34>)
    4960:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4962:	b25b      	sxtb	r3, r3
    4964:	2b00      	cmp	r3, #0
    4966:	dbfb      	blt.n	4960 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4968:	4a04      	ldr	r2, [pc, #16]	; (497c <system_gclk_gen_enable+0x34>)
    496a:	6853      	ldr	r3, [r2, #4]
    496c:	2180      	movs	r1, #128	; 0x80
    496e:	0249      	lsls	r1, r1, #9
    4970:	430b      	orrs	r3, r1
    4972:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4974:	4b04      	ldr	r3, [pc, #16]	; (4988 <system_gclk_gen_enable+0x40>)
    4976:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4978:	bd10      	pop	{r4, pc}
    497a:	46c0      	nop			; (mov r8, r8)
    497c:	40000c00 	.word	0x40000c00
    4980:	000032fd 	.word	0x000032fd
    4984:	40000c04 	.word	0x40000c04
    4988:	0000333d 	.word	0x0000333d

0000498c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    498c:	b570      	push	{r4, r5, r6, lr}
    498e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4990:	4a1a      	ldr	r2, [pc, #104]	; (49fc <system_gclk_gen_get_hz+0x70>)
    4992:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4994:	b25b      	sxtb	r3, r3
    4996:	2b00      	cmp	r3, #0
    4998:	dbfb      	blt.n	4992 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    499a:	4b19      	ldr	r3, [pc, #100]	; (4a00 <system_gclk_gen_get_hz+0x74>)
    499c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    499e:	4b19      	ldr	r3, [pc, #100]	; (4a04 <system_gclk_gen_get_hz+0x78>)
    49a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49a2:	4a16      	ldr	r2, [pc, #88]	; (49fc <system_gclk_gen_get_hz+0x70>)
    49a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    49a6:	b25b      	sxtb	r3, r3
    49a8:	2b00      	cmp	r3, #0
    49aa:	dbfb      	blt.n	49a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    49ac:	4e13      	ldr	r6, [pc, #76]	; (49fc <system_gclk_gen_get_hz+0x70>)
    49ae:	6870      	ldr	r0, [r6, #4]
    49b0:	04c0      	lsls	r0, r0, #19
    49b2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    49b4:	4b14      	ldr	r3, [pc, #80]	; (4a08 <system_gclk_gen_get_hz+0x7c>)
    49b6:	4798      	blx	r3
    49b8:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49ba:	4b12      	ldr	r3, [pc, #72]	; (4a04 <system_gclk_gen_get_hz+0x78>)
    49bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    49be:	6876      	ldr	r6, [r6, #4]
    49c0:	02f6      	lsls	r6, r6, #11
    49c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49c4:	4b11      	ldr	r3, [pc, #68]	; (4a0c <system_gclk_gen_get_hz+0x80>)
    49c6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49c8:	4a0c      	ldr	r2, [pc, #48]	; (49fc <system_gclk_gen_get_hz+0x70>)
    49ca:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    49cc:	b25b      	sxtb	r3, r3
    49ce:	2b00      	cmp	r3, #0
    49d0:	dbfb      	blt.n	49ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    49d2:	4b0a      	ldr	r3, [pc, #40]	; (49fc <system_gclk_gen_get_hz+0x70>)
    49d4:	689c      	ldr	r4, [r3, #8]
    49d6:	0224      	lsls	r4, r4, #8
    49d8:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    49da:	4b0d      	ldr	r3, [pc, #52]	; (4a10 <system_gclk_gen_get_hz+0x84>)
    49dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    49de:	2e00      	cmp	r6, #0
    49e0:	d107      	bne.n	49f2 <system_gclk_gen_get_hz+0x66>
    49e2:	2c01      	cmp	r4, #1
    49e4:	d907      	bls.n	49f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    49e6:	0021      	movs	r1, r4
    49e8:	0028      	movs	r0, r5
    49ea:	4b0a      	ldr	r3, [pc, #40]	; (4a14 <system_gclk_gen_get_hz+0x88>)
    49ec:	4798      	blx	r3
    49ee:	0005      	movs	r5, r0
    49f0:	e001      	b.n	49f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    49f2:	3401      	adds	r4, #1
    49f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    49f6:	0028      	movs	r0, r5
    49f8:	bd70      	pop	{r4, r5, r6, pc}
    49fa:	46c0      	nop			; (mov r8, r8)
    49fc:	40000c00 	.word	0x40000c00
    4a00:	000032fd 	.word	0x000032fd
    4a04:	40000c04 	.word	0x40000c04
    4a08:	0000443d 	.word	0x0000443d
    4a0c:	40000c08 	.word	0x40000c08
    4a10:	0000333d 	.word	0x0000333d
    4a14:	000059cd 	.word	0x000059cd

00004a18 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a18:	b510      	push	{r4, lr}
    4a1a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4a1c:	4b06      	ldr	r3, [pc, #24]	; (4a38 <system_gclk_chan_enable+0x20>)
    4a1e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a20:	4b06      	ldr	r3, [pc, #24]	; (4a3c <system_gclk_chan_enable+0x24>)
    4a22:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a24:	4a06      	ldr	r2, [pc, #24]	; (4a40 <system_gclk_chan_enable+0x28>)
    4a26:	8851      	ldrh	r1, [r2, #2]
    4a28:	2380      	movs	r3, #128	; 0x80
    4a2a:	01db      	lsls	r3, r3, #7
    4a2c:	430b      	orrs	r3, r1
    4a2e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4a30:	4b04      	ldr	r3, [pc, #16]	; (4a44 <system_gclk_chan_enable+0x2c>)
    4a32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a34:	bd10      	pop	{r4, pc}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	000032fd 	.word	0x000032fd
    4a3c:	40000c02 	.word	0x40000c02
    4a40:	40000c00 	.word	0x40000c00
    4a44:	0000333d 	.word	0x0000333d

00004a48 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a48:	b510      	push	{r4, lr}
    4a4a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4a4c:	4b0f      	ldr	r3, [pc, #60]	; (4a8c <system_gclk_chan_disable+0x44>)
    4a4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a50:	4b0f      	ldr	r3, [pc, #60]	; (4a90 <system_gclk_chan_disable+0x48>)
    4a52:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a54:	4b0f      	ldr	r3, [pc, #60]	; (4a94 <system_gclk_chan_disable+0x4c>)
    4a56:	885a      	ldrh	r2, [r3, #2]
    4a58:	0512      	lsls	r2, r2, #20
    4a5a:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4a5c:	8859      	ldrh	r1, [r3, #2]
    4a5e:	4a0e      	ldr	r2, [pc, #56]	; (4a98 <system_gclk_chan_disable+0x50>)
    4a60:	400a      	ands	r2, r1
    4a62:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a64:	8859      	ldrh	r1, [r3, #2]
    4a66:	4a0d      	ldr	r2, [pc, #52]	; (4a9c <system_gclk_chan_disable+0x54>)
    4a68:	400a      	ands	r2, r1
    4a6a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a6c:	0019      	movs	r1, r3
    4a6e:	2280      	movs	r2, #128	; 0x80
    4a70:	01d2      	lsls	r2, r2, #7
    4a72:	884b      	ldrh	r3, [r1, #2]
    4a74:	4213      	tst	r3, r2
    4a76:	d1fc      	bne.n	4a72 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a78:	4906      	ldr	r1, [pc, #24]	; (4a94 <system_gclk_chan_disable+0x4c>)
    4a7a:	884c      	ldrh	r4, [r1, #2]
    4a7c:	0202      	lsls	r2, r0, #8
    4a7e:	4b06      	ldr	r3, [pc, #24]	; (4a98 <system_gclk_chan_disable+0x50>)
    4a80:	4023      	ands	r3, r4
    4a82:	4313      	orrs	r3, r2
    4a84:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4a86:	4b06      	ldr	r3, [pc, #24]	; (4aa0 <system_gclk_chan_disable+0x58>)
    4a88:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a8a:	bd10      	pop	{r4, pc}
    4a8c:	000032fd 	.word	0x000032fd
    4a90:	40000c02 	.word	0x40000c02
    4a94:	40000c00 	.word	0x40000c00
    4a98:	fffff0ff 	.word	0xfffff0ff
    4a9c:	ffffbfff 	.word	0xffffbfff
    4aa0:	0000333d 	.word	0x0000333d

00004aa4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4aa4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4aa6:	780c      	ldrb	r4, [r1, #0]
    4aa8:	0224      	lsls	r4, r4, #8
    4aaa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4aac:	4b02      	ldr	r3, [pc, #8]	; (4ab8 <system_gclk_chan_set_config+0x14>)
    4aae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4ab0:	b2a4      	uxth	r4, r4
    4ab2:	4b02      	ldr	r3, [pc, #8]	; (4abc <system_gclk_chan_set_config+0x18>)
    4ab4:	805c      	strh	r4, [r3, #2]
}
    4ab6:	bd10      	pop	{r4, pc}
    4ab8:	00004a49 	.word	0x00004a49
    4abc:	40000c00 	.word	0x40000c00

00004ac0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4ac0:	b510      	push	{r4, lr}
    4ac2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4ac4:	4b06      	ldr	r3, [pc, #24]	; (4ae0 <system_gclk_chan_get_hz+0x20>)
    4ac6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ac8:	4b06      	ldr	r3, [pc, #24]	; (4ae4 <system_gclk_chan_get_hz+0x24>)
    4aca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4acc:	4b06      	ldr	r3, [pc, #24]	; (4ae8 <system_gclk_chan_get_hz+0x28>)
    4ace:	885c      	ldrh	r4, [r3, #2]
    4ad0:	0524      	lsls	r4, r4, #20
    4ad2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4ad4:	4b05      	ldr	r3, [pc, #20]	; (4aec <system_gclk_chan_get_hz+0x2c>)
    4ad6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4ad8:	0020      	movs	r0, r4
    4ada:	4b05      	ldr	r3, [pc, #20]	; (4af0 <system_gclk_chan_get_hz+0x30>)
    4adc:	4798      	blx	r3
}
    4ade:	bd10      	pop	{r4, pc}
    4ae0:	000032fd 	.word	0x000032fd
    4ae4:	40000c02 	.word	0x40000c02
    4ae8:	40000c00 	.word	0x40000c00
    4aec:	0000333d 	.word	0x0000333d
    4af0:	0000498d 	.word	0x0000498d

00004af4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4af4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4af6:	78d3      	ldrb	r3, [r2, #3]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d11e      	bne.n	4b3a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4afc:	7813      	ldrb	r3, [r2, #0]
    4afe:	2b80      	cmp	r3, #128	; 0x80
    4b00:	d004      	beq.n	4b0c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4b02:	061b      	lsls	r3, r3, #24
    4b04:	2480      	movs	r4, #128	; 0x80
    4b06:	0264      	lsls	r4, r4, #9
    4b08:	4323      	orrs	r3, r4
    4b0a:	e000      	b.n	4b0e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4b0c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b0e:	7854      	ldrb	r4, [r2, #1]
    4b10:	2502      	movs	r5, #2
    4b12:	43ac      	bics	r4, r5
    4b14:	d10a      	bne.n	4b2c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4b16:	7894      	ldrb	r4, [r2, #2]
    4b18:	2c00      	cmp	r4, #0
    4b1a:	d103      	bne.n	4b24 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4b1c:	2480      	movs	r4, #128	; 0x80
    4b1e:	02a4      	lsls	r4, r4, #10
    4b20:	4323      	orrs	r3, r4
    4b22:	e002      	b.n	4b2a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b24:	24c0      	movs	r4, #192	; 0xc0
    4b26:	02e4      	lsls	r4, r4, #11
    4b28:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b2a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b2c:	7854      	ldrb	r4, [r2, #1]
    4b2e:	3c01      	subs	r4, #1
    4b30:	2c01      	cmp	r4, #1
    4b32:	d812      	bhi.n	4b5a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b34:	4c18      	ldr	r4, [pc, #96]	; (4b98 <_system_pinmux_config+0xa4>)
    4b36:	4023      	ands	r3, r4
    4b38:	e00f      	b.n	4b5a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4b3a:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b3c:	040b      	lsls	r3, r1, #16
    4b3e:	0c1b      	lsrs	r3, r3, #16
    4b40:	24a0      	movs	r4, #160	; 0xa0
    4b42:	05e4      	lsls	r4, r4, #23
    4b44:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b46:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b48:	0c0b      	lsrs	r3, r1, #16
    4b4a:	24d0      	movs	r4, #208	; 0xd0
    4b4c:	0624      	lsls	r4, r4, #24
    4b4e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b50:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b52:	78d3      	ldrb	r3, [r2, #3]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d018      	beq.n	4b8a <_system_pinmux_config+0x96>
    4b58:	e01c      	b.n	4b94 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b5a:	040c      	lsls	r4, r1, #16
    4b5c:	0c24      	lsrs	r4, r4, #16
    4b5e:	25a0      	movs	r5, #160	; 0xa0
    4b60:	05ed      	lsls	r5, r5, #23
    4b62:	432c      	orrs	r4, r5
    4b64:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b66:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b68:	0c0c      	lsrs	r4, r1, #16
    4b6a:	25d0      	movs	r5, #208	; 0xd0
    4b6c:	062d      	lsls	r5, r5, #24
    4b6e:	432c      	orrs	r4, r5
    4b70:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b72:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b74:	78d4      	ldrb	r4, [r2, #3]
    4b76:	2c00      	cmp	r4, #0
    4b78:	d10c      	bne.n	4b94 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4b7a:	035b      	lsls	r3, r3, #13
    4b7c:	d505      	bpl.n	4b8a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4b7e:	7893      	ldrb	r3, [r2, #2]
    4b80:	2b01      	cmp	r3, #1
    4b82:	d101      	bne.n	4b88 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    4b84:	6181      	str	r1, [r0, #24]
    4b86:	e000      	b.n	4b8a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    4b88:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b8a:	7853      	ldrb	r3, [r2, #1]
    4b8c:	3b01      	subs	r3, #1
    4b8e:	2b01      	cmp	r3, #1
    4b90:	d800      	bhi.n	4b94 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4b92:	6081      	str	r1, [r0, #8]
		}
	}
}
    4b94:	bd30      	pop	{r4, r5, pc}
    4b96:	46c0      	nop			; (mov r8, r8)
    4b98:	fffbffff 	.word	0xfffbffff

00004b9c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4b9c:	b510      	push	{r4, lr}
    4b9e:	0003      	movs	r3, r0
    4ba0:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4ba2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4ba4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4ba6:	2900      	cmp	r1, #0
    4ba8:	d104      	bne.n	4bb4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    4baa:	0958      	lsrs	r0, r3, #5
    4bac:	01c0      	lsls	r0, r0, #7
    4bae:	4905      	ldr	r1, [pc, #20]	; (4bc4 <system_pinmux_pin_set_config+0x28>)
    4bb0:	468c      	mov	ip, r1
    4bb2:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    4bb4:	211f      	movs	r1, #31
    4bb6:	400b      	ands	r3, r1
    4bb8:	391e      	subs	r1, #30
    4bba:	4099      	lsls	r1, r3
    4bbc:	4b02      	ldr	r3, [pc, #8]	; (4bc8 <system_pinmux_pin_set_config+0x2c>)
    4bbe:	4798      	blx	r3
}
    4bc0:	bd10      	pop	{r4, pc}
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	41004400 	.word	0x41004400
    4bc8:	00004af5 	.word	0x00004af5

00004bcc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4bcc:	4770      	bx	lr
    4bce:	46c0      	nop			; (mov r8, r8)

00004bd0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4bd0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4bd2:	4b05      	ldr	r3, [pc, #20]	; (4be8 <system_init+0x18>)
    4bd4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4bd6:	4b05      	ldr	r3, [pc, #20]	; (4bec <system_init+0x1c>)
    4bd8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4bda:	4b05      	ldr	r3, [pc, #20]	; (4bf0 <system_init+0x20>)
    4bdc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4bde:	4b05      	ldr	r3, [pc, #20]	; (4bf4 <system_init+0x24>)
    4be0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4be2:	4b05      	ldr	r3, [pc, #20]	; (4bf8 <system_init+0x28>)
    4be4:	4798      	blx	r3
}
    4be6:	bd10      	pop	{r4, pc}
    4be8:	0000470d 	.word	0x0000470d
    4bec:	0000336d 	.word	0x0000336d
    4bf0:	00004bcd 	.word	0x00004bcd
    4bf4:	00003491 	.word	0x00003491
    4bf8:	00004bcd 	.word	0x00004bcd

00004bfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4bfc:	e7fe      	b.n	4bfc <Dummy_Handler>
    4bfe:	46c0      	nop			; (mov r8, r8)

00004c00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4c00:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    4c02:	4b2e      	ldr	r3, [pc, #184]	; (4cbc <Reset_Handler+0xbc>)
    4c04:	4a2e      	ldr	r2, [pc, #184]	; (4cc0 <Reset_Handler+0xc0>)
    4c06:	429a      	cmp	r2, r3
    4c08:	d003      	beq.n	4c12 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4c0a:	4b2e      	ldr	r3, [pc, #184]	; (4cc4 <Reset_Handler+0xc4>)
    4c0c:	4a2b      	ldr	r2, [pc, #172]	; (4cbc <Reset_Handler+0xbc>)
    4c0e:	429a      	cmp	r2, r3
    4c10:	d304      	bcc.n	4c1c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4c12:	4b2d      	ldr	r3, [pc, #180]	; (4cc8 <Reset_Handler+0xc8>)
    4c14:	4a2d      	ldr	r2, [pc, #180]	; (4ccc <Reset_Handler+0xcc>)
    4c16:	429a      	cmp	r2, r3
    4c18:	d310      	bcc.n	4c3c <Reset_Handler+0x3c>
    4c1a:	e01e      	b.n	4c5a <Reset_Handler+0x5a>
    4c1c:	4a2c      	ldr	r2, [pc, #176]	; (4cd0 <Reset_Handler+0xd0>)
    4c1e:	4b29      	ldr	r3, [pc, #164]	; (4cc4 <Reset_Handler+0xc4>)
    4c20:	3303      	adds	r3, #3
    4c22:	1a9b      	subs	r3, r3, r2
    4c24:	089b      	lsrs	r3, r3, #2
    4c26:	3301      	adds	r3, #1
    4c28:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4c2a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4c2c:	4823      	ldr	r0, [pc, #140]	; (4cbc <Reset_Handler+0xbc>)
    4c2e:	4924      	ldr	r1, [pc, #144]	; (4cc0 <Reset_Handler+0xc0>)
    4c30:	588c      	ldr	r4, [r1, r2]
    4c32:	5084      	str	r4, [r0, r2]
    4c34:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4c36:	429a      	cmp	r2, r3
    4c38:	d1fa      	bne.n	4c30 <Reset_Handler+0x30>
    4c3a:	e7ea      	b.n	4c12 <Reset_Handler+0x12>
    4c3c:	4a25      	ldr	r2, [pc, #148]	; (4cd4 <Reset_Handler+0xd4>)
    4c3e:	4b22      	ldr	r3, [pc, #136]	; (4cc8 <Reset_Handler+0xc8>)
    4c40:	3303      	adds	r3, #3
    4c42:	1a9b      	subs	r3, r3, r2
    4c44:	089b      	lsrs	r3, r3, #2
    4c46:	3301      	adds	r3, #1
    4c48:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4c4a:	2200      	movs	r2, #0
                *pDest++ = 0;
    4c4c:	481f      	ldr	r0, [pc, #124]	; (4ccc <Reset_Handler+0xcc>)
    4c4e:	2100      	movs	r1, #0
    4c50:	1814      	adds	r4, r2, r0
    4c52:	6021      	str	r1, [r4, #0]
    4c54:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4c56:	429a      	cmp	r2, r3
    4c58:	d1fa      	bne.n	4c50 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4c5a:	4a1f      	ldr	r2, [pc, #124]	; (4cd8 <Reset_Handler+0xd8>)
    4c5c:	21ff      	movs	r1, #255	; 0xff
    4c5e:	4b1f      	ldr	r3, [pc, #124]	; (4cdc <Reset_Handler+0xdc>)
    4c60:	438b      	bics	r3, r1
    4c62:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4c64:	39fd      	subs	r1, #253	; 0xfd
    4c66:	2390      	movs	r3, #144	; 0x90
    4c68:	005b      	lsls	r3, r3, #1
    4c6a:	4a1d      	ldr	r2, [pc, #116]	; (4ce0 <Reset_Handler+0xe0>)
    4c6c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4c6e:	481d      	ldr	r0, [pc, #116]	; (4ce4 <Reset_Handler+0xe4>)
    4c70:	78c3      	ldrb	r3, [r0, #3]
    4c72:	2403      	movs	r4, #3
    4c74:	43a3      	bics	r3, r4
    4c76:	2202      	movs	r2, #2
    4c78:	4313      	orrs	r3, r2
    4c7a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4c7c:	78c3      	ldrb	r3, [r0, #3]
    4c7e:	260c      	movs	r6, #12
    4c80:	43b3      	bics	r3, r6
    4c82:	2108      	movs	r1, #8
    4c84:	430b      	orrs	r3, r1
    4c86:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4c88:	4b17      	ldr	r3, [pc, #92]	; (4ce8 <Reset_Handler+0xe8>)
    4c8a:	7b98      	ldrb	r0, [r3, #14]
    4c8c:	2530      	movs	r5, #48	; 0x30
    4c8e:	43a8      	bics	r0, r5
    4c90:	0005      	movs	r5, r0
    4c92:	2020      	movs	r0, #32
    4c94:	4328      	orrs	r0, r5
    4c96:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4c98:	7b98      	ldrb	r0, [r3, #14]
    4c9a:	43b0      	bics	r0, r6
    4c9c:	4301      	orrs	r1, r0
    4c9e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4ca0:	7b99      	ldrb	r1, [r3, #14]
    4ca2:	43a1      	bics	r1, r4
    4ca4:	430a      	orrs	r2, r1
    4ca6:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4ca8:	4a10      	ldr	r2, [pc, #64]	; (4cec <Reset_Handler+0xec>)
    4caa:	6851      	ldr	r1, [r2, #4]
    4cac:	2380      	movs	r3, #128	; 0x80
    4cae:	430b      	orrs	r3, r1
    4cb0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4cb2:	4b0f      	ldr	r3, [pc, #60]	; (4cf0 <Reset_Handler+0xf0>)
    4cb4:	4798      	blx	r3

        /* Branch to main function */
        main();
    4cb6:	4b0f      	ldr	r3, [pc, #60]	; (4cf4 <Reset_Handler+0xf4>)
    4cb8:	4798      	blx	r3
    4cba:	e7fe      	b.n	4cba <Reset_Handler+0xba>
    4cbc:	20000000 	.word	0x20000000
    4cc0:	00008168 	.word	0x00008168
    4cc4:	20000078 	.word	0x20000078
    4cc8:	2000037c 	.word	0x2000037c
    4ccc:	20000078 	.word	0x20000078
    4cd0:	20000004 	.word	0x20000004
    4cd4:	2000007c 	.word	0x2000007c
    4cd8:	e000ed00 	.word	0xe000ed00
    4cdc:	00000000 	.word	0x00000000
    4ce0:	41007000 	.word	0x41007000
    4ce4:	41005000 	.word	0x41005000
    4ce8:	41004800 	.word	0x41004800
    4cec:	41004000 	.word	0x41004000
    4cf0:	00005b3d 	.word	0x00005b3d
    4cf4:	000057ad 	.word	0x000057ad

00004cf8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfa:	4647      	mov	r7, r8
    4cfc:	b480      	push	{r7}
    4cfe:	000c      	movs	r4, r1
    4d00:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4d02:	2800      	cmp	r0, #0
    4d04:	d10d      	bne.n	4d22 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    4d06:	2a00      	cmp	r2, #0
    4d08:	dd0e      	ble.n	4d28 <_read+0x30>
    4d0a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4d0c:	4e08      	ldr	r6, [pc, #32]	; (4d30 <_read+0x38>)
    4d0e:	4d09      	ldr	r5, [pc, #36]	; (4d34 <_read+0x3c>)
    4d10:	6830      	ldr	r0, [r6, #0]
    4d12:	0021      	movs	r1, r4
    4d14:	682b      	ldr	r3, [r5, #0]
    4d16:	4798      	blx	r3
		ptr++;
    4d18:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    4d1a:	42a7      	cmp	r7, r4
    4d1c:	d1f8      	bne.n	4d10 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    4d1e:	4640      	mov	r0, r8
    4d20:	e003      	b.n	4d2a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    4d22:	2001      	movs	r0, #1
    4d24:	4240      	negs	r0, r0
    4d26:	e000      	b.n	4d2a <_read+0x32>
	}

	for (; len > 0; --len) {
    4d28:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    4d2a:	bc04      	pop	{r2}
    4d2c:	4690      	mov	r8, r2
    4d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d30:	20000364 	.word	0x20000364
    4d34:	2000035c 	.word	0x2000035c

00004d38 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d3a:	4647      	mov	r7, r8
    4d3c:	b480      	push	{r7}
    4d3e:	000e      	movs	r6, r1
    4d40:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4d42:	3801      	subs	r0, #1
    4d44:	2802      	cmp	r0, #2
    4d46:	d811      	bhi.n	4d6c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    4d48:	2a00      	cmp	r2, #0
    4d4a:	d012      	beq.n	4d72 <_write+0x3a>
    4d4c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4d4e:	4b0c      	ldr	r3, [pc, #48]	; (4d80 <_write+0x48>)
    4d50:	4698      	mov	r8, r3
    4d52:	4f0c      	ldr	r7, [pc, #48]	; (4d84 <_write+0x4c>)
    4d54:	4643      	mov	r3, r8
    4d56:	6818      	ldr	r0, [r3, #0]
    4d58:	5d31      	ldrb	r1, [r6, r4]
    4d5a:	683b      	ldr	r3, [r7, #0]
    4d5c:	4798      	blx	r3
    4d5e:	2800      	cmp	r0, #0
    4d60:	db09      	blt.n	4d76 <_write+0x3e>
			return -1;
		}
		++nChars;
    4d62:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    4d64:	42a5      	cmp	r5, r4
    4d66:	d1f5      	bne.n	4d54 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    4d68:	0020      	movs	r0, r4
    4d6a:	e006      	b.n	4d7a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    4d6c:	2001      	movs	r0, #1
    4d6e:	4240      	negs	r0, r0
    4d70:	e003      	b.n	4d7a <_write+0x42>
	}

	for (; len != 0; --len) {
    4d72:	2000      	movs	r0, #0
    4d74:	e001      	b.n	4d7a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    4d76:	2001      	movs	r0, #1
    4d78:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    4d7a:	bc04      	pop	{r2}
    4d7c:	4690      	mov	r8, r2
    4d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d80:	20000364 	.word	0x20000364
    4d84:	20000360 	.word	0x20000360

00004d88 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4d88:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4d8a:	4a06      	ldr	r2, [pc, #24]	; (4da4 <_sbrk+0x1c>)
    4d8c:	6812      	ldr	r2, [r2, #0]
    4d8e:	2a00      	cmp	r2, #0
    4d90:	d102      	bne.n	4d98 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    4d92:	4905      	ldr	r1, [pc, #20]	; (4da8 <_sbrk+0x20>)
    4d94:	4a03      	ldr	r2, [pc, #12]	; (4da4 <_sbrk+0x1c>)
    4d96:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    4d98:	4a02      	ldr	r2, [pc, #8]	; (4da4 <_sbrk+0x1c>)
    4d9a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4d9c:	18c3      	adds	r3, r0, r3
    4d9e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4da0:	4770      	bx	lr
    4da2:	46c0      	nop			; (mov r8, r8)
    4da4:	2000010c 	.word	0x2000010c
    4da8:	20002380 	.word	0x20002380

00004dac <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4dac:	2001      	movs	r0, #1
    4dae:	4240      	negs	r0, r0
    4db0:	4770      	bx	lr
    4db2:	46c0      	nop			; (mov r8, r8)

00004db4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4db4:	2380      	movs	r3, #128	; 0x80
    4db6:	019b      	lsls	r3, r3, #6
    4db8:	604b      	str	r3, [r1, #4]

	return 0;
}
    4dba:	2000      	movs	r0, #0
    4dbc:	4770      	bx	lr
    4dbe:	46c0      	nop			; (mov r8, r8)

00004dc0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4dc0:	2001      	movs	r0, #1
    4dc2:	4770      	bx	lr

00004dc4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4dc4:	2000      	movs	r0, #0
    4dc6:	4770      	bx	lr

00004dc8 <AppServerCb>:
Version: 1.0

Date: 4 June 2012
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
    4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dca:	b085      	sub	sp, #20
    4dcc:	0006      	movs	r6, r0
    4dce:	000d      	movs	r5, r1
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
	uint8					u8ClientID = 0;

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
    4dd0:	492a      	ldr	r1, [pc, #168]	; (4e7c <AppServerCb+0xb4>)
    4dd2:	4b2b      	ldr	r3, [pc, #172]	; (4e80 <AppServerCb+0xb8>)
    4dd4:	4798      	blx	r3
    4dd6:	2800      	cmp	r0, #0
    4dd8:	d108      	bne.n	4dec <AppServerCb+0x24>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
    4dda:	492a      	ldr	r1, [pc, #168]	; (4e84 <AppServerCb+0xbc>)
    4ddc:	0030      	movs	r0, r6
    4dde:	4b28      	ldr	r3, [pc, #160]	; (4e80 <AppServerCb+0xb8>)
    4de0:	4798      	blx	r3
    4de2:	2800      	cmp	r0, #0
    4de4:	d005      	beq.n	4df2 <AppServerCb+0x2a>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		u8ClientID = PROWL_CLIENT;
    4de6:	2701      	movs	r7, #1
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    4de8:	4c27      	ldr	r4, [pc, #156]	; (4e88 <AppServerCb+0xc0>)
    4dea:	e004      	b.n	4df6 <AppServerCb+0x2e>
	uint8					u8ClientID = 0;

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
    4dec:	2702      	movs	r7, #2
	tstrNotification		*pstrNotification = NULL;
	uint8					u8ClientID = 0;

	if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    4dee:	4c27      	ldr	r4, [pc, #156]	; (4e8c <AppServerCb+0xc4>)
    4df0:	e001      	b.n	4df6 <AppServerCb+0x2e>
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
	uint8					u8ClientID = 0;
    4df2:	2700      	movs	r7, #0
Date: 4 June 2012
*********************************************************************/
static void AppServerCb(uint8* pu8HostName, uint32 u32ServerIP)
{
	struct sockaddr_in		strAddr;
	tstrNotification		*pstrNotification = NULL;
    4df4:	2400      	movs	r4, #0
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		u8ClientID = PROWL_CLIENT;
	}

	if(u32ServerIP != 0)
    4df6:	2d00      	cmp	r5, #0
    4df8:	d014      	beq.n	4e24 <AppServerCb+0x5c>
	{

		if(pstrNotification->u32ServerIPAddress == 0)
    4dfa:	6823      	ldr	r3, [r4, #0]
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d100      	bne.n	4e02 <AppServerCb+0x3a>
		{
			pstrNotification->u32ServerIPAddress = u32ServerIP;
    4e00:	6025      	str	r5, [r4, #0]
		}

		strAddr.sin_family = AF_INET;
    4e02:	2302      	movs	r3, #2
    4e04:	466a      	mov	r2, sp
    4e06:	8013      	strh	r3, [r2, #0]
		strAddr.sin_port = _htons(pstrNotification->u16Port);
    4e08:	88a3      	ldrh	r3, [r4, #4]
    4e0a:	021a      	lsls	r2, r3, #8
    4e0c:	0a1b      	lsrs	r3, r3, #8
    4e0e:	4313      	orrs	r3, r2
    4e10:	466a      	mov	r2, sp
    4e12:	8053      	strh	r3, [r2, #2]
		strAddr.sin_addr.s_addr = u32ServerIP;
    4e14:	9501      	str	r5, [sp, #4]

		connect(pstrNotification->Socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
    4e16:	2006      	movs	r0, #6
    4e18:	5620      	ldrsb	r0, [r4, r0]
    4e1a:	2210      	movs	r2, #16
    4e1c:	4669      	mov	r1, sp
    4e1e:	4b1c      	ldr	r3, [pc, #112]	; (4e90 <AppServerCb+0xc8>)
    4e20:	4798      	blx	r3
    4e22:	e028      	b.n	4e76 <AppServerCb+0xae>
	}
	else
	{
		static uint8	u8Retry = GROWL_DNS_RETRY;
		if(u8Retry--)
    4e24:	4a1b      	ldr	r2, [pc, #108]	; (4e94 <AppServerCb+0xcc>)
    4e26:	7813      	ldrb	r3, [r2, #0]
    4e28:	1e59      	subs	r1, r3, #1
    4e2a:	7011      	strb	r1, [r2, #0]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d013      	beq.n	4e58 <AppServerCb+0x90>
		{
			M2M_DBG("Retry Resolving DNS\n");
			if(m2m_strstr(pu8HostName,(uint8*)NMA_CLIENT_STRING_ID))
    4e30:	4912      	ldr	r1, [pc, #72]	; (4e7c <AppServerCb+0xb4>)
    4e32:	0030      	movs	r0, r6
    4e34:	4b12      	ldr	r3, [pc, #72]	; (4e80 <AppServerCb+0xb8>)
    4e36:	4798      	blx	r3
    4e38:	2800      	cmp	r0, #0
    4e3a:	d003      	beq.n	4e44 <AppServerCb+0x7c>
				gethostbyname((uint8*)NMA_DOMAIN_NAME);
    4e3c:	4816      	ldr	r0, [pc, #88]	; (4e98 <AppServerCb+0xd0>)
    4e3e:	4b17      	ldr	r3, [pc, #92]	; (4e9c <AppServerCb+0xd4>)
    4e40:	4798      	blx	r3
    4e42:	e018      	b.n	4e76 <AppServerCb+0xae>
			else if(m2m_strstr(pu8HostName,(uint8*)PROWL_CLIENT_STRING_ID))
    4e44:	490f      	ldr	r1, [pc, #60]	; (4e84 <AppServerCb+0xbc>)
    4e46:	0030      	movs	r0, r6
    4e48:	4b0d      	ldr	r3, [pc, #52]	; (4e80 <AppServerCb+0xb8>)
    4e4a:	4798      	blx	r3
    4e4c:	2800      	cmp	r0, #0
    4e4e:	d012      	beq.n	4e76 <AppServerCb+0xae>
				gethostbyname((uint8*)PROWL_DOMAIN_NAME);
    4e50:	4813      	ldr	r0, [pc, #76]	; (4ea0 <AppServerCb+0xd8>)
    4e52:	4b12      	ldr	r3, [pc, #72]	; (4e9c <AppServerCb+0xd4>)
    4e54:	4798      	blx	r3
    4e56:	e00e      	b.n	4e76 <AppServerCb+0xae>

		}
		else
		{
			close(pstrNotification->Socket);
    4e58:	2006      	movs	r0, #6
    4e5a:	5620      	ldrsb	r0, [r4, r0]
    4e5c:	4b11      	ldr	r3, [pc, #68]	; (4ea4 <AppServerCb+0xdc>)
    4e5e:	4798      	blx	r3
			pstrNotification->Socket = 0xFF;
    4e60:	23ff      	movs	r3, #255	; 0xff
    4e62:	71a3      	strb	r3, [r4, #6]
			pstrNotification->u8State = GROWL_STATE_IDLE;
    4e64:	2300      	movs	r3, #0
    4e66:	71e3      	strb	r3, [r4, #7]
			u8Retry = GROWL_DNS_RETRY;
    4e68:	2203      	movs	r2, #3
    4e6a:	4b0a      	ldr	r3, [pc, #40]	; (4e94 <AppServerCb+0xcc>)
    4e6c:	701a      	strb	r2, [r3, #0]
			M2M_DBG("Failed to Resolve DNS\n\r");
			GrowlCb(GROWL_ERR_RESOLVE_DNS,u8ClientID);
    4e6e:	0039      	movs	r1, r7
    4e70:	200b      	movs	r0, #11
    4e72:	4b0d      	ldr	r3, [pc, #52]	; (4ea8 <AppServerCb+0xe0>)
    4e74:	4798      	blx	r3
		}
	}
}
    4e76:	b005      	add	sp, #20
    4e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	00007c50 	.word	0x00007c50
    4e80:	00000a19 	.word	0x00000a19
    4e84:	00007c60 	.word	0x00007c60
    4e88:	2000012c 	.word	0x2000012c
    4e8c:	20000114 	.word	0x20000114
    4e90:	00002fa1 	.word	0x00002fa1
    4e94:	20000012 	.word	0x20000012
    4e98:	00007c68 	.word	0x00007c68
    4e9c:	000031d5 	.word	0x000031d5
    4ea0:	00007c80 	.word	0x00007c80
    4ea4:	0000315d 	.word	0x0000315d
    4ea8:	000056dd 	.word	0x000056dd

00004eac <Encode>:
Version: 1.0

Date:
*********************************************************************/
uint16 Encode(uint8 *pcStr,uint8 *pcEncoded)
{
    4eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eae:	0002      	movs	r2, r0
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
    4eb0:	7803      	ldrb	r3, [r0, #0]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d02b      	beq.n	4f0e <Encode+0x62>
    4eb6:	2000      	movs	r0, #0
	{
		if (
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    4eb8:	2520      	movs	r5, #32
		{
			*pcbuf++ = *pcTmp;
		}
		else
		{
			*pcbuf++ = '%';
    4eba:	2725      	movs	r7, #37	; 0x25
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    4ebc:	260f      	movs	r6, #15
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
	{
		if (
    4ebe:	001c      	movs	r4, r3
    4ec0:	3c30      	subs	r4, #48	; 0x30
    4ec2:	2c09      	cmp	r4, #9
    4ec4:	d90c      	bls.n	4ee0 <Encode+0x34>
			((*pcTmp >= '0') && (*pcTmp <= '9'))		||
			((*pcTmp >= 'a') && (*pcTmp <= 'z')) 	||
    4ec6:	001c      	movs	r4, r3
    4ec8:	43ac      	bics	r4, r5
    4eca:	3c41      	subs	r4, #65	; 0x41
    4ecc:	2c19      	cmp	r4, #25
    4ece:	d907      	bls.n	4ee0 <Encode+0x34>
			((*pcTmp >= 'A') && (*pcTmp <= 'Z')) 	||
    4ed0:	001c      	movs	r4, r3
    4ed2:	3c2d      	subs	r4, #45	; 0x2d
    4ed4:	2c01      	cmp	r4, #1
    4ed6:	d903      	bls.n	4ee0 <Encode+0x34>
			(*pcTmp == '-') ||
    4ed8:	2b5f      	cmp	r3, #95	; 0x5f
    4eda:	d001      	beq.n	4ee0 <Encode+0x34>
			(*pcTmp == '_') ||
			(*pcTmp == '.') ||
    4edc:	2b7e      	cmp	r3, #126	; 0x7e
    4ede:	d102      	bne.n	4ee6 <Encode+0x3a>
			(*pcTmp == '~')
			)
		{
			*pcbuf++ = *pcTmp;
    4ee0:	700b      	strb	r3, [r1, #0]
    4ee2:	3101      	adds	r1, #1
    4ee4:	e00c      	b.n	4f00 <Encode+0x54>
		}
		else
		{
			*pcbuf++ = '%';
    4ee6:	700f      	strb	r7, [r1, #0]
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
    4ee8:	7813      	ldrb	r3, [r2, #0]
    4eea:	091b      	lsrs	r3, r3, #4
    4eec:	4c09      	ldr	r4, [pc, #36]	; (4f14 <Encode+0x68>)
    4eee:	5ce3      	ldrb	r3, [r4, r3]
    4ef0:	704b      	strb	r3, [r1, #1]
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    4ef2:	7813      	ldrb	r3, [r2, #0]
    4ef4:	4033      	ands	r3, r6
    4ef6:	5ce3      	ldrb	r3, [r4, r3]
    4ef8:	708b      	strb	r3, [r1, #2]
			u16Count += 2;
    4efa:	3002      	adds	r0, #2
    4efc:	b280      	uxth	r0, r0
		}
		else
		{
			*pcbuf++ = '%';
			*pcbuf++ = gau8HexDigits[(*pcTmp>> 4) & 0x0F];
			*pcbuf++ = gau8HexDigits[(*pcTmp & 0x0F)];
    4efe:	3103      	adds	r1, #3
			u16Count += 2;
		}
		pcTmp++;
    4f00:	3201      	adds	r2, #1
		u16Count ++;
    4f02:	3001      	adds	r0, #1
    4f04:	b280      	uxth	r0, r0
{
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;

	while(*pcTmp)
    4f06:	7813      	ldrb	r3, [r2, #0]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d1d8      	bne.n	4ebe <Encode+0x12>
    4f0c:	e000      	b.n	4f10 <Encode+0x64>
*********************************************************************/
uint16 Encode(uint8 *pcStr,uint8 *pcEncoded)
{
	uint8		*pcTmp = pcStr;
	uint8		*pcbuf = pcEncoded;
	uint16		u16Count = 0;
    4f0e:	2000      	movs	r0, #0
		}
		pcTmp++;
		u16Count ++;
	}
	return u16Count;
}
    4f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f12:	46c0      	nop			; (mov r8, r8)
    4f14:	00007c3c 	.word	0x00007c3c

00004f18 <FormatMsg>:
Version: 1.0

Date:
*********************************************************************/
uint16 FormatMsg(uint8 u8clientName, uint8 *pu8Msg)
{
    4f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f1a:	464f      	mov	r7, r9
    4f1c:	4646      	mov	r6, r8
    4f1e:	b4c0      	push	{r6, r7}
    4f20:	0006      	movs	r6, r0
    4f22:	000d      	movs	r5, r1
	uint16	u16Tmp;
	uint16	u16MsgOffset = 0;
	tstrNotification* strNotification;

	if (u8clientName == NMA_CLIENT)
    4f24:	2802      	cmp	r0, #2
    4f26:	d10e      	bne.n	4f46 <FormatMsg+0x2e>
	{
		strNotification = (tstrNotification*)(&gstrNotificationNMA);
		/* Put the start of the HTTP Request message. */
		u16Tmp = sizeof("GET /publicapi/notify?apikey=") - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/notify?apikey=",u16Tmp);
    4f28:	221d      	movs	r2, #29
    4f2a:	4938      	ldr	r1, [pc, #224]	; (500c <FormatMsg+0xf4>)
    4f2c:	0028      	movs	r0, r5
    4f2e:	4c38      	ldr	r4, [pc, #224]	; (5010 <FormatMsg+0xf8>)
    4f30:	47a0      	blx	r4
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
    4f32:	4b38      	ldr	r3, [pc, #224]	; (5014 <FormatMsg+0xfc>)
    4f34:	6819      	ldr	r1, [r3, #0]
    4f36:	2230      	movs	r2, #48	; 0x30
    4f38:	0028      	movs	r0, r5
    4f3a:	301d      	adds	r0, #29
    4f3c:	47a0      	blx	r4
	uint16	u16MsgOffset = 0;
	tstrNotification* strNotification;

	if (u8clientName == NMA_CLIENT)
	{
		strNotification = (tstrNotification*)(&gstrNotificationNMA);
    4f3e:	4b36      	ldr	r3, [pc, #216]	; (5018 <FormatMsg+0x100>)
    4f40:	4699      	mov	r9, r3
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/notify?apikey=",u16Tmp);
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
		u16MsgOffset+= NMA_API_KEY_SIZE;
    4f42:	244d      	movs	r4, #77	; 0x4d
    4f44:	e010      	b.n	4f68 <FormatMsg+0x50>
		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
		u16MsgOffset+= PROWL_API_KEY_SIZE;
	}
	else
		return 0;
    4f46:	2000      	movs	r0, #0

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
		u16MsgOffset+= NMA_API_KEY_SIZE;
	}
	else if (u8clientName == PROWL_CLIENT)
    4f48:	2e01      	cmp	r6, #1
    4f4a:	d15b      	bne.n	5004 <FormatMsg+0xec>
	{
		strNotification = (tstrNotification*)(&gstrNotificationProwl);

		/* Put the start of the HTTP Request message. */
		u16Tmp = sizeof("GET /publicapi/add?apikey=") - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/add?apikey=",u16Tmp);
    4f4c:	221a      	movs	r2, #26
    4f4e:	4933      	ldr	r1, [pc, #204]	; (501c <FormatMsg+0x104>)
    4f50:	0028      	movs	r0, r5
    4f52:	4c2f      	ldr	r4, [pc, #188]	; (5010 <FormatMsg+0xf8>)
    4f54:	47a0      	blx	r4
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
    4f56:	4b32      	ldr	r3, [pc, #200]	; (5020 <FormatMsg+0x108>)
    4f58:	6819      	ldr	r1, [r3, #0]
    4f5a:	2228      	movs	r2, #40	; 0x28
    4f5c:	0028      	movs	r0, r5
    4f5e:	301a      	adds	r0, #26
    4f60:	47a0      	blx	r4
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8NmaKey,NMA_API_KEY_SIZE);
		u16MsgOffset+= NMA_API_KEY_SIZE;
	}
	else if (u8clientName == PROWL_CLIENT)
	{
		strNotification = (tstrNotification*)(&gstrNotificationProwl);
    4f62:	4b30      	ldr	r3, [pc, #192]	; (5024 <FormatMsg+0x10c>)
    4f64:	4699      	mov	r9, r3
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"GET /publicapi/add?apikey=",u16Tmp);
		u16MsgOffset += u16Tmp;

		/* Add the API Key to the message. */
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)gau8PrwKey,PROWL_API_KEY_SIZE);
		u16MsgOffset+= PROWL_API_KEY_SIZE;
    4f66:	2442      	movs	r4, #66	; 0x42
	else
		return 0;

	/* Encode the Application name and append it to the message. */
	u16Tmp = sizeof("&application=") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&application=",u16Tmp);
    4f68:	1928      	adds	r0, r5, r4
    4f6a:	220d      	movs	r2, #13
    4f6c:	492e      	ldr	r1, [pc, #184]	; (5028 <FormatMsg+0x110>)
    4f6e:	4f28      	ldr	r7, [pc, #160]	; (5010 <FormatMsg+0xf8>)
    4f70:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4f72:	340d      	adds	r4, #13
	u16Tmp = Encode((uint8*)strNotification->pu8App,&pu8Msg[u16MsgOffset]);
    4f74:	1929      	adds	r1, r5, r4
    4f76:	464b      	mov	r3, r9
    4f78:	6898      	ldr	r0, [r3, #8]
    4f7a:	4b2c      	ldr	r3, [pc, #176]	; (502c <FormatMsg+0x114>)
    4f7c:	4698      	mov	r8, r3
    4f7e:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
    4f80:	1820      	adds	r0, r4, r0
    4f82:	b284      	uxth	r4, r0

	/* Encode the Event name and append it to the message. */
	u16Tmp = sizeof("&event=") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&event=",u16Tmp);
    4f84:	1928      	adds	r0, r5, r4
    4f86:	2207      	movs	r2, #7
    4f88:	4929      	ldr	r1, [pc, #164]	; (5030 <FormatMsg+0x118>)
    4f8a:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4f8c:	3407      	adds	r4, #7
    4f8e:	b2a4      	uxth	r4, r4
	u16Tmp = Encode((uint8*)strNotification->pu8Event,&pu8Msg[u16MsgOffset]);
    4f90:	1929      	adds	r1, r5, r4
    4f92:	464b      	mov	r3, r9
    4f94:	68d8      	ldr	r0, [r3, #12]
    4f96:	47c0      	blx	r8
	u16MsgOffset += u16Tmp;
    4f98:	1824      	adds	r4, r4, r0
    4f9a:	b2a4      	uxth	r4, r4

	/* Encode the Description message and append it to the message. */
	u16Tmp = sizeof("&description=") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"&description=",u16Tmp);
    4f9c:	1928      	adds	r0, r5, r4
    4f9e:	220d      	movs	r2, #13
    4fa0:	4924      	ldr	r1, [pc, #144]	; (5034 <FormatMsg+0x11c>)
    4fa2:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4fa4:	340d      	adds	r4, #13
    4fa6:	b2a4      	uxth	r4, r4
	u16Tmp = Encode((uint8*)strNotification->pu8Msg,&pu8Msg[u16MsgOffset]);
    4fa8:	1929      	adds	r1, r5, r4
    4faa:	464b      	mov	r3, r9
    4fac:	6918      	ldr	r0, [r3, #16]
    4fae:	47c0      	blx	r8
	u16MsgOffset += u16Tmp;
    4fb0:	1824      	adds	r4, r4, r0
    4fb2:	b2a3      	uxth	r3, r4
    4fb4:	4698      	mov	r8, r3

	u16Tmp = sizeof(" HTTP/1.1\r\nHost: ") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)" HTTP/1.1\r\nHost: ",u16Tmp);
    4fb6:	18e8      	adds	r0, r5, r3
    4fb8:	2211      	movs	r2, #17
    4fba:	491f      	ldr	r1, [pc, #124]	; (5038 <FormatMsg+0x120>)
    4fbc:	47b8      	blx	r7
	u16MsgOffset += u16Tmp;
    4fbe:	4640      	mov	r0, r8
    4fc0:	3011      	adds	r0, #17
    4fc2:	b284      	uxth	r4, r0

	if (u8clientName == NMA_CLIENT)
    4fc4:	2e02      	cmp	r6, #2
    4fc6:	d108      	bne.n	4fda <FormatMsg+0xc2>
	{
		u16Tmp = sizeof(NMA_DOMAIN_NAME) - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)NMA_DOMAIN_NAME,u16Tmp);
    4fc8:	1928      	adds	r0, r5, r4
    4fca:	2217      	movs	r2, #23
    4fcc:	491b      	ldr	r1, [pc, #108]	; (503c <FormatMsg+0x124>)
    4fce:	4b10      	ldr	r3, [pc, #64]	; (5010 <FormatMsg+0xf8>)
    4fd0:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    4fd2:	4644      	mov	r4, r8
    4fd4:	3428      	adds	r4, #40	; 0x28
    4fd6:	b2a4      	uxth	r4, r4
    4fd8:	e009      	b.n	4fee <FormatMsg+0xd6>
	}
	else if (u8clientName == PROWL_CLIENT)
    4fda:	2e01      	cmp	r6, #1
    4fdc:	d107      	bne.n	4fee <FormatMsg+0xd6>
	{
		u16Tmp = sizeof(PROWL_DOMAIN_NAME) - 1;
		m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)PROWL_DOMAIN_NAME,u16Tmp);
    4fde:	1928      	adds	r0, r5, r4
    4fe0:	2210      	movs	r2, #16
    4fe2:	4917      	ldr	r1, [pc, #92]	; (5040 <FormatMsg+0x128>)
    4fe4:	4b0a      	ldr	r3, [pc, #40]	; (5010 <FormatMsg+0xf8>)
    4fe6:	4798      	blx	r3
		u16MsgOffset += u16Tmp;
    4fe8:	4644      	mov	r4, r8
    4fea:	3421      	adds	r4, #33	; 0x21
    4fec:	b2a4      	uxth	r4, r4

	}

	u16Tmp = sizeof("\r\n\r\n") - 1;
	m2m_memcpy(&pu8Msg[u16MsgOffset],(uint8*)"\r\n\r\n",u16Tmp);
    4fee:	1928      	adds	r0, r5, r4
    4ff0:	2204      	movs	r2, #4
    4ff2:	4914      	ldr	r1, [pc, #80]	; (5044 <FormatMsg+0x12c>)
    4ff4:	4b06      	ldr	r3, [pc, #24]	; (5010 <FormatMsg+0xf8>)
    4ff6:	4798      	blx	r3
	u16MsgOffset += u16Tmp;
	pu8Msg[u16MsgOffset] = '\0';
    4ff8:	1d23      	adds	r3, r4, #4
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	2200      	movs	r2, #0
    4ffe:	54ea      	strb	r2, [r5, r3]
	u16MsgOffset ++;
    5000:	1d60      	adds	r0, r4, #5
    5002:	b280      	uxth	r0, r0

	return u16MsgOffset;
}
    5004:	bc0c      	pop	{r2, r3}
    5006:	4690      	mov	r8, r2
    5008:	4699      	mov	r9, r3
    500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    500c:	00007c94 	.word	0x00007c94
    5010:	00000991 	.word	0x00000991
    5014:	20000128 	.word	0x20000128
    5018:	20000114 	.word	0x20000114
    501c:	00007cb4 	.word	0x00007cb4
    5020:	20000110 	.word	0x20000110
    5024:	2000012c 	.word	0x2000012c
    5028:	00007cd0 	.word	0x00007cd0
    502c:	00004ead 	.word	0x00004ead
    5030:	00007ce0 	.word	0x00007ce0
    5034:	00007ce8 	.word	0x00007ce8
    5038:	00007cf8 	.word	0x00007cf8
    503c:	00007c68 	.word	0x00007c68
    5040:	00007c80 	.word	0x00007c80
    5044:	00007d0c 	.word	0x00007d0c

00005048 <GetResponseCode>:
uint8 GetResponseCode
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
    5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504a:	1e06      	subs	r6, r0, #0
	uint8	u8Code = 0xFF;
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
    504c:	d04c      	beq.n	50e8 <GetResponseCode+0xa0>
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
	uint8	u8Code = 0xFF;
    504e:	20ff      	movs	r0, #255	; 0xff
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
    5050:	2900      	cmp	r1, #0
    5052:	d04a      	beq.n	50ea <GetResponseCode+0xa2>
    5054:	2400      	movs	r4, #0
	{
		uint16	u16Offset = 0;
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
    5056:	4d25      	ldr	r5, [pc, #148]	; (50ec <GetResponseCode+0xa4>)
					u8Code = 50;
				}
				break;
			}
			u16Offset ++;
		}while(u16Offset < (u16BufferSize - 9));
    5058:	3909      	subs	r1, #9
    505a:	000f      	movs	r7, r1
	if((pu8Buffer != NULL) && (u16BufferSize > 0))
	{
		uint16	u16Offset = 0;
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
    505c:	1930      	adds	r0, r6, r4
    505e:	2209      	movs	r2, #9
    5060:	4923      	ldr	r1, [pc, #140]	; (50f0 <GetResponseCode+0xa8>)
    5062:	47a8      	blx	r5
    5064:	2800      	cmp	r0, #0
    5066:	d139      	bne.n	50dc <GetResponseCode+0x94>
			{
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
    5068:	3409      	adds	r4, #9
    506a:	b2a4      	uxth	r4, r4
    506c:	1934      	adds	r4, r6, r4
    506e:	2203      	movs	r2, #3
    5070:	4920      	ldr	r1, [pc, #128]	; (50f4 <GetResponseCode+0xac>)
    5072:	0020      	movs	r0, r4
    5074:	4b1d      	ldr	r3, [pc, #116]	; (50ec <GetResponseCode+0xa4>)
    5076:	4798      	blx	r3
    5078:	0003      	movs	r3, r0
				{
					u8Code = 20;
    507a:	2014      	movs	r0, #20
		do
		{
			if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"HTTP/1.1 ", 9))
			{
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
    507c:	2b00      	cmp	r3, #0
    507e:	d034      	beq.n	50ea <GetResponseCode+0xa2>
				{
					u8Code = 20;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
    5080:	2203      	movs	r2, #3
    5082:	491d      	ldr	r1, [pc, #116]	; (50f8 <GetResponseCode+0xb0>)
    5084:	0020      	movs	r0, r4
    5086:	4b19      	ldr	r3, [pc, #100]	; (50ec <GetResponseCode+0xa4>)
    5088:	4798      	blx	r3
    508a:	0003      	movs	r3, r0
				{
					u8Code = 40;
    508c:	2028      	movs	r0, #40	; 0x28
				u16Offset += 9;
				if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"200", 3))
				{
					u8Code = 20;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
    508e:	2b00      	cmp	r3, #0
    5090:	d02b      	beq.n	50ea <GetResponseCode+0xa2>
				{
					u8Code = 40;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
    5092:	2203      	movs	r2, #3
    5094:	4919      	ldr	r1, [pc, #100]	; (50fc <GetResponseCode+0xb4>)
    5096:	0020      	movs	r0, r4
    5098:	4b14      	ldr	r3, [pc, #80]	; (50ec <GetResponseCode+0xa4>)
    509a:	4798      	blx	r3
    509c:	0003      	movs	r3, r0
				{
					u8Code = 41;
    509e:	2029      	movs	r0, #41	; 0x29
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"400", 3))
				{
					u8Code = 40;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
    50a0:	2b00      	cmp	r3, #0
    50a2:	d022      	beq.n	50ea <GetResponseCode+0xa2>
				{
					u8Code = 41;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
    50a4:	2203      	movs	r2, #3
    50a6:	4916      	ldr	r1, [pc, #88]	; (5100 <GetResponseCode+0xb8>)
    50a8:	0020      	movs	r0, r4
    50aa:	4b10      	ldr	r3, [pc, #64]	; (50ec <GetResponseCode+0xa4>)
    50ac:	4798      	blx	r3
    50ae:	0003      	movs	r3, r0
				{
					u8Code = 42;
    50b0:	202a      	movs	r0, #42	; 0x2a
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"401", 3))
				{
					u8Code = 41;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
    50b2:	2b00      	cmp	r3, #0
    50b4:	d019      	beq.n	50ea <GetResponseCode+0xa2>
				{
					u8Code = 42;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"406", 3))
    50b6:	2203      	movs	r2, #3
    50b8:	4912      	ldr	r1, [pc, #72]	; (5104 <GetResponseCode+0xbc>)
    50ba:	0020      	movs	r0, r4
    50bc:	4b0b      	ldr	r3, [pc, #44]	; (50ec <GetResponseCode+0xa4>)
    50be:	4798      	blx	r3
    50c0:	0003      	movs	r3, r0
				{
					u8Code = 46;
    50c2:	202e      	movs	r0, #46	; 0x2e
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"402", 3))
				{
					u8Code = 42;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"406", 3))
    50c4:	2b00      	cmp	r3, #0
    50c6:	d010      	beq.n	50ea <GetResponseCode+0xa2>
				{
					u8Code = 46;
				}
				else if(!m2m_memcmp(&pu8Buffer[u16Offset], (uint8*)"409", 3))
    50c8:	2203      	movs	r2, #3
    50ca:	490f      	ldr	r1, [pc, #60]	; (5108 <GetResponseCode+0xc0>)
    50cc:	0020      	movs	r0, r4
    50ce:	4b07      	ldr	r3, [pc, #28]	; (50ec <GetResponseCode+0xa4>)
    50d0:	4798      	blx	r3
				{
					u8Code = 49;
				}
				else
				{
					u8Code = 50;
    50d2:	4243      	negs	r3, r0
    50d4:	4143      	adcs	r3, r0
    50d6:	2032      	movs	r0, #50	; 0x32
    50d8:	1ac0      	subs	r0, r0, r3
    50da:	e006      	b.n	50ea <GetResponseCode+0xa2>
				}
				break;
			}
			u16Offset ++;
    50dc:	3401      	adds	r4, #1
    50de:	b2a4      	uxth	r4, r4
		}while(u16Offset < (u16BufferSize - 9));
    50e0:	42bc      	cmp	r4, r7
    50e2:	dbbb      	blt.n	505c <GetResponseCode+0x14>
(
 uint8	*pu8Buffer,
 uint16	u16BufferSize
)
{
	uint8	u8Code = 0xFF;
    50e4:	20ff      	movs	r0, #255	; 0xff
    50e6:	e000      	b.n	50ea <GetResponseCode+0xa2>
    50e8:	20ff      	movs	r0, #255	; 0xff
			}
			u16Offset ++;
		}while(u16Offset < (u16BufferSize - 9));
	}
	return u8Code;
}
    50ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50ec:	00000a61 	.word	0x00000a61
    50f0:	00007d14 	.word	0x00007d14
    50f4:	00007d20 	.word	0x00007d20
    50f8:	00007d24 	.word	0x00007d24
    50fc:	00007d28 	.word	0x00007d28
    5100:	00007d2c 	.word	0x00007d2c
    5104:	00007d30 	.word	0x00007d30
    5108:	00007d34 	.word	0x00007d34

0000510c <GROWL_APPSocketEventHandler>:
Version: 1.0

Date:
*********************************************************************/
static void GROWL_APPSocketEventHandler(SOCKET sock, uint8 u8Msg, void * pvMsg)
{
    510c:	b5f0      	push	{r4, r5, r6, r7, lr}
    510e:	b0c1      	sub	sp, #260	; 0x104
    5110:	0004      	movs	r4, r0
    5112:	0015      	movs	r5, r2
	tstrNotification	*pstrNotification;
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
    5114:	4b45      	ldr	r3, [pc, #276]	; (522c <GROWL_APPSocketEventHandler+0x120>)
    5116:	799b      	ldrb	r3, [r3, #6]
    5118:	b25b      	sxtb	r3, r3
    511a:	4283      	cmp	r3, r0
    511c:	d008      	beq.n	5130 <GROWL_APPSocketEventHandler+0x24>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(sock == gstrNotificationProwl.Socket)
    511e:	4b44      	ldr	r3, [pc, #272]	; (5230 <GROWL_APPSocketEventHandler+0x124>)
    5120:	799b      	ldrb	r3, [r3, #6]
    5122:	b25b      	sxtb	r3, r3
    5124:	4298      	cmp	r0, r3
    5126:	d000      	beq.n	512a <GROWL_APPSocketEventHandler+0x1e>
    5128:	e07d      	b.n	5226 <GROWL_APPSocketEventHandler+0x11a>
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		u8ClientID = PROWL_CLIENT;
    512a:	2601      	movs	r6, #1
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
	}
	else if(sock == gstrNotificationProwl.Socket)
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    512c:	4f40      	ldr	r7, [pc, #256]	; (5230 <GROWL_APPSocketEventHandler+0x124>)
    512e:	e001      	b.n	5134 <GROWL_APPSocketEventHandler+0x28>
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		u8ClientID = NMA_CLIENT;
    5130:	2602      	movs	r6, #2
	tstrNotification	*pstrNotification;
	uint8 				u8ClientID;

	if(sock == gstrNotificationNMA.Socket)
	{
		pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    5132:	4f3e      	ldr	r7, [pc, #248]	; (522c <GROWL_APPSocketEventHandler+0x120>)
	else
	{
		return;
	}

	if(u8Msg == SOCKET_MSG_CONNECT)
    5134:	2905      	cmp	r1, #5
    5136:	d13c      	bne.n	51b2 <GROWL_APPSocketEventHandler+0xa6>
	{
		static uint8			u8Retry = GROWL_CONNECT_RETRY;
		tstrSocketConnectMsg	*pstrConnect = (tstrSocketConnectMsg*)pvMsg;
		if(pstrConnect->s8Error == 0)
    5138:	2301      	movs	r3, #1
    513a:	56eb      	ldrsb	r3, [r5, r3]
    513c:	2b00      	cmp	r3, #0
    513e:	d114      	bne.n	516a <GROWL_APPSocketEventHandler+0x5e>
		{
			uint8	acBuffer[GROWL_MSG_SIZE];
			uint16	u16MsgSize;

			u16MsgSize = FormatMsg(u8ClientID, acBuffer);
    5140:	4669      	mov	r1, sp
    5142:	0030      	movs	r0, r6
    5144:	4b3b      	ldr	r3, [pc, #236]	; (5234 <GROWL_APPSocketEventHandler+0x128>)
    5146:	4798      	blx	r3
    5148:	0002      	movs	r2, r0
			send(sock, acBuffer, u16MsgSize, 0);
    514a:	2300      	movs	r3, #0
    514c:	4669      	mov	r1, sp
    514e:	0020      	movs	r0, r4
    5150:	4c39      	ldr	r4, [pc, #228]	; (5238 <GROWL_APPSocketEventHandler+0x12c>)
    5152:	47a0      	blx	r4
			recv(pstrNotification->Socket, (void*)au8Msg,GROWL_DESCRIPTION_MAX_LENGTH, GROWL_RX_TIMEOUT);
    5154:	2006      	movs	r0, #6
    5156:	5638      	ldrsb	r0, [r7, r0]
    5158:	4b38      	ldr	r3, [pc, #224]	; (523c <GROWL_APPSocketEventHandler+0x130>)
    515a:	2248      	movs	r2, #72	; 0x48
    515c:	4938      	ldr	r1, [pc, #224]	; (5240 <GROWL_APPSocketEventHandler+0x134>)
    515e:	4c39      	ldr	r4, [pc, #228]	; (5244 <GROWL_APPSocketEventHandler+0x138>)
    5160:	47a0      	blx	r4
			u8Retry = GROWL_CONNECT_RETRY;
    5162:	2203      	movs	r2, #3
    5164:	4b38      	ldr	r3, [pc, #224]	; (5248 <GROWL_APPSocketEventHandler+0x13c>)
    5166:	701a      	strb	r2, [r3, #0]
    5168:	e05d      	b.n	5226 <GROWL_APPSocketEventHandler+0x11a>
		}
		else
		{
			if((u8Retry--) > 0)
    516a:	4a37      	ldr	r2, [pc, #220]	; (5248 <GROWL_APPSocketEventHandler+0x13c>)
    516c:	7813      	ldrb	r3, [r2, #0]
    516e:	1e59      	subs	r1, r3, #1
    5170:	7011      	strb	r1, [r2, #0]
    5172:	2b00      	cmp	r3, #0
    5174:	d00d      	beq.n	5192 <GROWL_APPSocketEventHandler+0x86>
			{
				M2M_DBG("Retry %s\n",(u8ClientID == NMA_CLIENT) ? "NMA" : "PROWL");
				if (u8ClientID == NMA_CLIENT)
    5176:	2e02      	cmp	r6, #2
    5178:	d104      	bne.n	5184 <GROWL_APPSocketEventHandler+0x78>
					AppServerCb((uint8*)NMA_DOMAIN_NAME, pstrNotification->u32ServerIPAddress);
    517a:	6839      	ldr	r1, [r7, #0]
    517c:	4833      	ldr	r0, [pc, #204]	; (524c <GROWL_APPSocketEventHandler+0x140>)
    517e:	4b34      	ldr	r3, [pc, #208]	; (5250 <GROWL_APPSocketEventHandler+0x144>)
    5180:	4798      	blx	r3
    5182:	e050      	b.n	5226 <GROWL_APPSocketEventHandler+0x11a>
				else if (u8ClientID == PROWL_CLIENT)
    5184:	2e01      	cmp	r6, #1
    5186:	d14e      	bne.n	5226 <GROWL_APPSocketEventHandler+0x11a>
					AppServerCb((uint8*)PROWL_DOMAIN_NAME, pstrNotification->u32ServerIPAddress);
    5188:	6839      	ldr	r1, [r7, #0]
    518a:	4832      	ldr	r0, [pc, #200]	; (5254 <GROWL_APPSocketEventHandler+0x148>)
    518c:	4b30      	ldr	r3, [pc, #192]	; (5250 <GROWL_APPSocketEventHandler+0x144>)
    518e:	4798      	blx	r3
    5190:	e049      	b.n	5226 <GROWL_APPSocketEventHandler+0x11a>
			}
			else
			{
				M2M_DBG("%s Connection Failed\n",(u8ClientID == NMA_CLIENT) ? "NMA" : "PROWL");
				close(pstrNotification->Socket);
    5192:	2006      	movs	r0, #6
    5194:	5638      	ldrsb	r0, [r7, r0]
    5196:	4b30      	ldr	r3, [pc, #192]	; (5258 <GROWL_APPSocketEventHandler+0x14c>)
    5198:	4798      	blx	r3
				pstrNotification->Socket = 0xFF;
    519a:	23ff      	movs	r3, #255	; 0xff
    519c:	71bb      	strb	r3, [r7, #6]
				pstrNotification->u8State = GROWL_STATE_IDLE;
    519e:	2300      	movs	r3, #0
    51a0:	71fb      	strb	r3, [r7, #7]
				GrowlCb(GROWL_ERR_CONN_FAILED,u8ClientID);
    51a2:	0031      	movs	r1, r6
    51a4:	200a      	movs	r0, #10
    51a6:	4b2d      	ldr	r3, [pc, #180]	; (525c <GROWL_APPSocketEventHandler+0x150>)
    51a8:	4798      	blx	r3
				u8Retry = GROWL_CONNECT_RETRY;
    51aa:	2203      	movs	r2, #3
    51ac:	4b26      	ldr	r3, [pc, #152]	; (5248 <GROWL_APPSocketEventHandler+0x13c>)
    51ae:	701a      	strb	r2, [r3, #0]
    51b0:	e039      	b.n	5226 <GROWL_APPSocketEventHandler+0x11a>
			}
		}
	}
	else if(u8Msg == SOCKET_MSG_RECV)
    51b2:	2906      	cmp	r1, #6
    51b4:	d125      	bne.n	5202 <GROWL_APPSocketEventHandler+0xf6>
	{
		tstrSocketRecvMsg		*pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
		static uint8			u8Error = 0xFF;
		uint8				    u8Reset = 1;

		if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
    51b6:	6828      	ldr	r0, [r5, #0]
    51b8:	2800      	cmp	r0, #0
    51ba:	d00c      	beq.n	51d6 <GROWL_APPSocketEventHandler+0xca>
    51bc:	2304      	movs	r3, #4
    51be:	5ee9      	ldrsh	r1, [r5, r3]
    51c0:	2900      	cmp	r1, #0
    51c2:	dd0f      	ble.n	51e4 <GROWL_APPSocketEventHandler+0xd8>
		{
			if(u8Error == 0xFF)
    51c4:	4b26      	ldr	r3, [pc, #152]	; (5260 <GROWL_APPSocketEventHandler+0x154>)
    51c6:	781b      	ldrb	r3, [r3, #0]
    51c8:	2bff      	cmp	r3, #255	; 0xff
    51ca:	d108      	bne.n	51de <GROWL_APPSocketEventHandler+0xd2>
			{
				u8Error = GetResponseCode(pstrRecvMsg->pu8Buffer,pstrRecvMsg->s16BufferSize);
    51cc:	b289      	uxth	r1, r1
    51ce:	4b25      	ldr	r3, [pc, #148]	; (5264 <GROWL_APPSocketEventHandler+0x158>)
    51d0:	4798      	blx	r3
    51d2:	4b23      	ldr	r3, [pc, #140]	; (5260 <GROWL_APPSocketEventHandler+0x154>)
    51d4:	7018      	strb	r0, [r3, #0]
			}
		}
		if((pstrRecvMsg->s16BufferSize > 0) && (pstrRecvMsg->u16RemainingSize != 0))
    51d6:	2204      	movs	r2, #4
    51d8:	5eab      	ldrsh	r3, [r5, r2]
    51da:	2b00      	cmp	r3, #0
    51dc:	dd02      	ble.n	51e4 <GROWL_APPSocketEventHandler+0xd8>
		{
			u8Reset = 0;
		}
		if(u8Reset)
    51de:	88eb      	ldrh	r3, [r5, #6]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d120      	bne.n	5226 <GROWL_APPSocketEventHandler+0x11a>
		{
			close(pstrNotification->Socket);
    51e4:	2006      	movs	r0, #6
    51e6:	5638      	ldrsb	r0, [r7, r0]
    51e8:	4b1b      	ldr	r3, [pc, #108]	; (5258 <GROWL_APPSocketEventHandler+0x14c>)
    51ea:	4798      	blx	r3
			pstrNotification->Socket	= 0xFF;
    51ec:	25ff      	movs	r5, #255	; 0xff
    51ee:	71bd      	strb	r5, [r7, #6]
			pstrNotification->u8State	= GROWL_STATE_IDLE;
    51f0:	2300      	movs	r3, #0
    51f2:	71fb      	strb	r3, [r7, #7]
			GrowlCb(u8Error,u8ClientID);
    51f4:	4c1a      	ldr	r4, [pc, #104]	; (5260 <GROWL_APPSocketEventHandler+0x154>)
    51f6:	7820      	ldrb	r0, [r4, #0]
    51f8:	0031      	movs	r1, r6
    51fa:	4b18      	ldr	r3, [pc, #96]	; (525c <GROWL_APPSocketEventHandler+0x150>)
    51fc:	4798      	blx	r3
			u8Error = 0xFF;
    51fe:	7025      	strb	r5, [r4, #0]
    5200:	e011      	b.n	5226 <GROWL_APPSocketEventHandler+0x11a>
		}
	}
	else if(u8Msg == SOCKET_MSG_SEND)
    5202:	2907      	cmp	r1, #7
    5204:	d10f      	bne.n	5226 <GROWL_APPSocketEventHandler+0x11a>
	{
		sint16	s16Sent = *((sint16*)pvMsg);
    5206:	2300      	movs	r3, #0
    5208:	5eec      	ldrsh	r4, [r5, r3]
		if(s16Sent <= 0)
    520a:	2c00      	cmp	r4, #0
    520c:	dc0b      	bgt.n	5226 <GROWL_APPSocketEventHandler+0x11a>
		{
			M2M_ERR("GROWL Send Error %d\n",s16Sent);
    520e:	22d4      	movs	r2, #212	; 0xd4
    5210:	0052      	lsls	r2, r2, #1
    5212:	4915      	ldr	r1, [pc, #84]	; (5268 <GROWL_APPSocketEventHandler+0x15c>)
    5214:	4815      	ldr	r0, [pc, #84]	; (526c <GROWL_APPSocketEventHandler+0x160>)
    5216:	4d16      	ldr	r5, [pc, #88]	; (5270 <GROWL_APPSocketEventHandler+0x164>)
    5218:	47a8      	blx	r5
    521a:	0021      	movs	r1, r4
    521c:	4815      	ldr	r0, [pc, #84]	; (5274 <GROWL_APPSocketEventHandler+0x168>)
    521e:	47a8      	blx	r5
    5220:	200d      	movs	r0, #13
    5222:	4b15      	ldr	r3, [pc, #84]	; (5278 <GROWL_APPSocketEventHandler+0x16c>)
    5224:	4798      	blx	r3
		}
	}
}
    5226:	b041      	add	sp, #260	; 0x104
    5228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	20000114 	.word	0x20000114
    5230:	2000012c 	.word	0x2000012c
    5234:	00004f19 	.word	0x00004f19
    5238:	00003031 	.word	0x00003031
    523c:	000061a8 	.word	0x000061a8
    5240:	20000140 	.word	0x20000140
    5244:	000030c9 	.word	0x000030c9
    5248:	20000013 	.word	0x20000013
    524c:	00007c68 	.word	0x00007c68
    5250:	00004dc9 	.word	0x00004dc9
    5254:	00007c80 	.word	0x00007c80
    5258:	0000315d 	.word	0x0000315d
    525c:	000056dd 	.word	0x000056dd
    5260:	20000011 	.word	0x20000011
    5264:	00005049 	.word	0x00005049
    5268:	00007e08 	.word	0x00007e08
    526c:	00006d30 	.word	0x00006d30
    5270:	00005bad 	.word	0x00005bad
    5274:	00007d38 	.word	0x00007d38
    5278:	00005be1 	.word	0x00005be1

0000527c <NMI_GrowlInit>:
Version: 1.0

Date:
*********************************************************************/
void NMI_GrowlInit(uint8 *pu8PrwKey,uint8 *pu8NmaKey)
{
    527c:	b570      	push	{r4, r5, r6, lr}
    527e:	0004      	movs	r4, r0
    5280:	000d      	movs	r5, r1
	socketInit();
    5282:	4b18      	ldr	r3, [pc, #96]	; (52e4 <NMI_GrowlInit+0x68>)
    5284:	4798      	blx	r3
	registerSocketCallback(GROWL_APPSocketEventHandler, AppServerCb);
    5286:	4918      	ldr	r1, [pc, #96]	; (52e8 <NMI_GrowlInit+0x6c>)
    5288:	4818      	ldr	r0, [pc, #96]	; (52ec <NMI_GrowlInit+0x70>)
    528a:	4b19      	ldr	r3, [pc, #100]	; (52f0 <NMI_GrowlInit+0x74>)
    528c:	4798      	blx	r3
	if(pu8PrwKey)
    528e:	2c00      	cmp	r4, #0
    5290:	d002      	beq.n	5298 <NMI_GrowlInit+0x1c>
	{
		gau8PrwKey = pu8PrwKey;
    5292:	4b18      	ldr	r3, [pc, #96]	; (52f4 <NMI_GrowlInit+0x78>)
    5294:	601c      	str	r4, [r3, #0]
    5296:	e008      	b.n	52aa <NMI_GrowlInit+0x2e>
	}
	else
	{
		M2M_INFO("Prowl key Not Vaild\n");
    5298:	4817      	ldr	r0, [pc, #92]	; (52f8 <NMI_GrowlInit+0x7c>)
    529a:	4b18      	ldr	r3, [pc, #96]	; (52fc <NMI_GrowlInit+0x80>)
    529c:	4798      	blx	r3
    529e:	4818      	ldr	r0, [pc, #96]	; (5300 <NMI_GrowlInit+0x84>)
    52a0:	4b18      	ldr	r3, [pc, #96]	; (5304 <NMI_GrowlInit+0x88>)
    52a2:	4798      	blx	r3
    52a4:	200d      	movs	r0, #13
    52a6:	4b18      	ldr	r3, [pc, #96]	; (5308 <NMI_GrowlInit+0x8c>)
    52a8:	4798      	blx	r3
	}
	if(pu8NmaKey)
    52aa:	2d00      	cmp	r5, #0
    52ac:	d002      	beq.n	52b4 <NMI_GrowlInit+0x38>
	{

		gau8NmaKey = pu8NmaKey;
    52ae:	4b17      	ldr	r3, [pc, #92]	; (530c <NMI_GrowlInit+0x90>)
    52b0:	601d      	str	r5, [r3, #0]
    52b2:	e008      	b.n	52c6 <NMI_GrowlInit+0x4a>
	}
	else
	{
		M2M_INFO("NMA key Not Vaild\n");
    52b4:	4810      	ldr	r0, [pc, #64]	; (52f8 <NMI_GrowlInit+0x7c>)
    52b6:	4b11      	ldr	r3, [pc, #68]	; (52fc <NMI_GrowlInit+0x80>)
    52b8:	4798      	blx	r3
    52ba:	4815      	ldr	r0, [pc, #84]	; (5310 <NMI_GrowlInit+0x94>)
    52bc:	4b11      	ldr	r3, [pc, #68]	; (5304 <NMI_GrowlInit+0x88>)
    52be:	4798      	blx	r3
    52c0:	200d      	movs	r0, #13
    52c2:	4b11      	ldr	r3, [pc, #68]	; (5308 <NMI_GrowlInit+0x8c>)
    52c4:	4798      	blx	r3
	}
	m2m_memset((uint8*)&gstrNotificationProwl, 0, sizeof(tstrNotification));
    52c6:	4d13      	ldr	r5, [pc, #76]	; (5314 <NMI_GrowlInit+0x98>)
    52c8:	2214      	movs	r2, #20
    52ca:	2100      	movs	r1, #0
    52cc:	0028      	movs	r0, r5
    52ce:	4e12      	ldr	r6, [pc, #72]	; (5318 <NMI_GrowlInit+0x9c>)
    52d0:	47b0      	blx	r6
	m2m_memset((uint8*)&gstrNotificationNMA, 0, sizeof(tstrNotification));
    52d2:	4c12      	ldr	r4, [pc, #72]	; (531c <NMI_GrowlInit+0xa0>)
    52d4:	2214      	movs	r2, #20
    52d6:	2100      	movs	r1, #0
    52d8:	0020      	movs	r0, r4
    52da:	47b0      	blx	r6
	gstrNotificationProwl.Socket = 0xFF;
    52dc:	23ff      	movs	r3, #255	; 0xff
    52de:	71ab      	strb	r3, [r5, #6]
	gstrNotificationNMA.Socket = 0xFF;
    52e0:	71a3      	strb	r3, [r4, #6]
}
    52e2:	bd70      	pop	{r4, r5, r6, pc}
    52e4:	00002e79 	.word	0x00002e79
    52e8:	00004dc9 	.word	0x00004dc9
    52ec:	0000510d 	.word	0x0000510d
    52f0:	00002ebd 	.word	0x00002ebd
    52f4:	20000110 	.word	0x20000110
    52f8:	00006fe4 	.word	0x00006fe4
    52fc:	00005bad 	.word	0x00005bad
    5300:	00007d50 	.word	0x00007d50
    5304:	00005ccd 	.word	0x00005ccd
    5308:	00005be1 	.word	0x00005be1
    530c:	20000128 	.word	0x20000128
    5310:	00007d64 	.word	0x00007d64
    5314:	2000012c 	.word	0x2000012c
    5318:	000009a5 	.word	0x000009a5
    531c:	20000114 	.word	0x20000114

00005320 <NMI_GrowlSendNotification>:

Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
    5320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5322:	464f      	mov	r7, r9
    5324:	4646      	mov	r6, r8
    5326:	b4c0      	push	{r6, r7}
    5328:	0005      	movs	r5, r0
    532a:	000f      	movs	r7, r1
    532c:	4690      	mov	r8, r2
    532e:	001e      	movs	r6, r3
    5330:	ab08      	add	r3, sp, #32
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	4699      	mov	r9, r3
	sint8		retVal = 0;
	uint8		u8Flags = 0;

	if((u8ClientName > 0) && (pu8App != NULL) && (pu8Event != NULL) && (pu8Description != NULL))
    5336:	2800      	cmp	r0, #0
    5338:	d100      	bne.n	533c <NMI_GrowlSendNotification+0x1c>
    533a:	e08d      	b.n	5458 <NMI_GrowlSendNotification+0x138>
    533c:	2900      	cmp	r1, #0
    533e:	d100      	bne.n	5342 <NMI_GrowlSendNotification+0x22>
    5340:	e08d      	b.n	545e <NMI_GrowlSendNotification+0x13e>
    5342:	2a00      	cmp	r2, #0
    5344:	d100      	bne.n	5348 <NMI_GrowlSendNotification+0x28>
    5346:	e08d      	b.n	5464 <NMI_GrowlSendNotification+0x144>
    5348:	2e00      	cmp	r6, #0
    534a:	d100      	bne.n	534e <NMI_GrowlSendNotification+0x2e>
    534c:	e08d      	b.n	546a <NMI_GrowlSendNotification+0x14a>
	{
		tstrNotification* pstrNotification;
		if((u8ClientName == NMA_CLIENT))
    534e:	2802      	cmp	r0, #2
    5350:	d110      	bne.n	5374 <NMI_GrowlSendNotification+0x54>
		{
			if(gau8NmaKey == NULL)
    5352:	4b57      	ldr	r3, [pc, #348]	; (54b0 <NMI_GrowlSendNotification+0x190>)
    5354:	681b      	ldr	r3, [r3, #0]
    5356:	2b00      	cmp	r3, #0
    5358:	d000      	beq.n	535c <NMI_GrowlSendNotification+0x3c>
    535a:	e09f      	b.n	549c <NMI_GrowlSendNotification+0x17c>
			{
				M2M_INFO("NMA key Not Vaild\n");
    535c:	4855      	ldr	r0, [pc, #340]	; (54b4 <NMI_GrowlSendNotification+0x194>)
    535e:	4b56      	ldr	r3, [pc, #344]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    5360:	4798      	blx	r3
    5362:	4856      	ldr	r0, [pc, #344]	; (54bc <NMI_GrowlSendNotification+0x19c>)
    5364:	4b56      	ldr	r3, [pc, #344]	; (54c0 <NMI_GrowlSendNotification+0x1a0>)
    5366:	4798      	blx	r3
    5368:	200d      	movs	r0, #13
    536a:	4b56      	ldr	r3, [pc, #344]	; (54c4 <NMI_GrowlSendNotification+0x1a4>)
    536c:	4798      	blx	r3
				return -1;
    536e:	2001      	movs	r0, #1
    5370:	4240      	negs	r0, r0
    5372:	e099      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
		}
		else if((u8ClientName == PROWL_CLIENT))
    5374:	2801      	cmp	r0, #1
    5376:	d17b      	bne.n	5470 <NMI_GrowlSendNotification+0x150>
		{
			if(gau8PrwKey == NULL)
    5378:	4b53      	ldr	r3, [pc, #332]	; (54c8 <NMI_GrowlSendNotification+0x1a8>)
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	2b00      	cmp	r3, #0
    537e:	d000      	beq.n	5382 <NMI_GrowlSendNotification+0x62>
    5380:	e080      	b.n	5484 <NMI_GrowlSendNotification+0x164>
			{
				M2M_INFO("Prowl key Not Vaild\n");
    5382:	484c      	ldr	r0, [pc, #304]	; (54b4 <NMI_GrowlSendNotification+0x194>)
    5384:	4b4c      	ldr	r3, [pc, #304]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    5386:	4798      	blx	r3
    5388:	4850      	ldr	r0, [pc, #320]	; (54cc <NMI_GrowlSendNotification+0x1ac>)
    538a:	4b4d      	ldr	r3, [pc, #308]	; (54c0 <NMI_GrowlSendNotification+0x1a0>)
    538c:	4798      	blx	r3
    538e:	200d      	movs	r0, #13
    5390:	4b4c      	ldr	r3, [pc, #304]	; (54c4 <NMI_GrowlSendNotification+0x1a4>)
    5392:	4798      	blx	r3
				return -1;
    5394:	2001      	movs	r0, #1
    5396:	4240      	negs	r0, r0
    5398:	e086      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
    539a:	4c4d      	ldr	r4, [pc, #308]	; (54d0 <NMI_GrowlSendNotification+0x1b0>)
    539c:	e000      	b.n	53a0 <NMI_GrowlSendNotification+0x80>
			if(gau8NmaKey == NULL)
			{
				M2M_INFO("NMA key Not Vaild\n");
				return -1;
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationNMA);
    539e:	4c4d      	ldr	r4, [pc, #308]	; (54d4 <NMI_GrowlSendNotification+0x1b4>)
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
    53a0:	0030      	movs	r0, r6
    53a2:	4b4d      	ldr	r3, [pc, #308]	; (54d8 <NMI_GrowlSendNotification+0x1b8>)
    53a4:	4798      	blx	r3
    53a6:	2847      	cmp	r0, #71	; 0x47
    53a8:	d83e      	bhi.n	5428 <NMI_GrowlSendNotification+0x108>
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
    53aa:	0038      	movs	r0, r7
    53ac:	4b4a      	ldr	r3, [pc, #296]	; (54d8 <NMI_GrowlSendNotification+0x1b8>)
    53ae:	4798      	blx	r3
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
    53b0:	280f      	cmp	r0, #15
    53b2:	d839      	bhi.n	5428 <NMI_GrowlSendNotification+0x108>
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
    53b4:	4640      	mov	r0, r8
    53b6:	4b48      	ldr	r3, [pc, #288]	; (54d8 <NMI_GrowlSendNotification+0x1b8>)
    53b8:	4798      	blx	r3
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
		{
			if((m2m_strlen(pu8Description) < GROWL_DESCRIPTION_MAX_LENGTH) &&
				(m2m_strlen(pu8App) < GROWL_APPNAME_MAX_LENGTH) &&
    53ba:	280f      	cmp	r0, #15
    53bc:	d834      	bhi.n	5428 <NMI_GrowlSendNotification+0x108>
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
			{
				pstrNotification->pu8App = pu8App;
    53be:	60a7      	str	r7, [r4, #8]
				pstrNotification->pu8Event = pu8Event;
    53c0:	4643      	mov	r3, r8
    53c2:	60e3      	str	r3, [r4, #12]
				pstrNotification->pu8Msg = pu8Description;
    53c4:	6126      	str	r6, [r4, #16]
				pstrNotification->u16Port = GROWL_HTTP_PORT;

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
    53c6:	464b      	mov	r3, r9
    53c8:	2b00      	cmp	r3, #0
    53ca:	d103      	bne.n	53d4 <NMI_GrowlSendNotification+0xb4>
				(m2m_strlen(pu8Event) < GROWL_EVENT_MAX_LENGTH))
			{
				pstrNotification->pu8App = pu8App;
				pstrNotification->pu8Event = pu8Event;
				pstrNotification->pu8Msg = pu8Description;
				pstrNotification->u16Port = GROWL_HTTP_PORT;
    53cc:	3350      	adds	r3, #80	; 0x50
    53ce:	80a3      	strh	r3, [r4, #4]
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
	sint8		retVal = 0;
	uint8		u8Flags = 0;
    53d0:	2200      	movs	r2, #0
    53d2:	e003      	b.n	53dc <NMI_GrowlSendNotification+0xbc>

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
				{
					u8Flags = SOCKET_FLAGS_SSL;
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
    53d4:	23bc      	movs	r3, #188	; 0xbc
    53d6:	33ff      	adds	r3, #255	; 0xff
    53d8:	80a3      	strh	r3, [r4, #4]
				pstrNotification->u16Port = GROWL_HTTP_PORT;

				/* Create Connection to the NMA Server. */
				if(bUseSSL)
				{
					u8Flags = SOCKET_FLAGS_SSL;
    53da:	2201      	movs	r2, #1
					pstrNotification->u16Port = GROWL_HTTPS_PORT;
				}

				pstrNotification->Socket = socket(AF_INET,SOCK_STREAM,u8Flags);
    53dc:	2101      	movs	r1, #1
    53de:	2002      	movs	r0, #2
    53e0:	4b3e      	ldr	r3, [pc, #248]	; (54dc <NMI_GrowlSendNotification+0x1bc>)
    53e2:	4798      	blx	r3
    53e4:	71a0      	strb	r0, [r4, #6]
				if(pstrNotification->Socket >= 0)
    53e6:	2800      	cmp	r0, #0
    53e8:	db10      	blt.n	540c <NMI_GrowlSendNotification+0xec>
				{
					pstrNotification->u8State = GROWL_STATE_REQ_PENDING;
    53ea:	2301      	movs	r3, #1
    53ec:	71e3      	strb	r3, [r4, #7]
					if(u8ClientName == NMA_CLIENT)
    53ee:	2d02      	cmp	r5, #2
    53f0:	d104      	bne.n	53fc <NMI_GrowlSendNotification+0xdc>
						gethostbyname((uint8*)NMA_DOMAIN_NAME);
    53f2:	483b      	ldr	r0, [pc, #236]	; (54e0 <NMI_GrowlSendNotification+0x1c0>)
    53f4:	4b3b      	ldr	r3, [pc, #236]	; (54e4 <NMI_GrowlSendNotification+0x1c4>)
    53f6:	4798      	blx	r3
Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
	sint8		retVal = 0;
    53f8:	2000      	movs	r0, #0
    53fa:	e055      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
    53fc:	2000      	movs	r0, #0
				if(pstrNotification->Socket >= 0)
				{
					pstrNotification->u8State = GROWL_STATE_REQ_PENDING;
					if(u8ClientName == NMA_CLIENT)
						gethostbyname((uint8*)NMA_DOMAIN_NAME);
					else if(u8ClientName == PROWL_CLIENT)
    53fe:	2d01      	cmp	r5, #1
    5400:	d152      	bne.n	54a8 <NMI_GrowlSendNotification+0x188>
						gethostbyname((uint8*)PROWL_DOMAIN_NAME);
    5402:	4839      	ldr	r0, [pc, #228]	; (54e8 <NMI_GrowlSendNotification+0x1c8>)
    5404:	4b37      	ldr	r3, [pc, #220]	; (54e4 <NMI_GrowlSendNotification+0x1c4>)
    5406:	4798      	blx	r3
Date: 4 June 2012
Note : it's required to keep the {pu8App,pu8Event,pu8Description} pointers const or global not temp val.
*********************************************************************/
sint8 NMI_GrowlSendNotification(uint8 u8ClientName, uint8 *pu8App, uint8 *pu8Event, uint8 *pu8Description,uint8 bUseSSL)
{
	sint8		retVal = 0;
    5408:	2000      	movs	r0, #0
    540a:	e04d      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
					else if(u8ClientName == PROWL_CLIENT)
						gethostbyname((uint8*)PROWL_DOMAIN_NAME);
				}
				else
				{
					M2M_ERR("No sockets available for the current request\n");
    540c:	4a37      	ldr	r2, [pc, #220]	; (54ec <NMI_GrowlSendNotification+0x1cc>)
    540e:	4938      	ldr	r1, [pc, #224]	; (54f0 <NMI_GrowlSendNotification+0x1d0>)
    5410:	4838      	ldr	r0, [pc, #224]	; (54f4 <NMI_GrowlSendNotification+0x1d4>)
    5412:	4b29      	ldr	r3, [pc, #164]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    5414:	4798      	blx	r3
    5416:	4838      	ldr	r0, [pc, #224]	; (54f8 <NMI_GrowlSendNotification+0x1d8>)
    5418:	4b29      	ldr	r3, [pc, #164]	; (54c0 <NMI_GrowlSendNotification+0x1a0>)
    541a:	4798      	blx	r3
    541c:	200d      	movs	r0, #13
    541e:	4b29      	ldr	r3, [pc, #164]	; (54c4 <NMI_GrowlSendNotification+0x1a4>)
    5420:	4798      	blx	r3
					retVal = -1;
    5422:	2001      	movs	r0, #1
    5424:	4240      	negs	r0, r0
    5426:	e03f      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
				}
			}
			else
			{
				M2M_ERR("Msg size is too long\n");
    5428:	229d      	movs	r2, #157	; 0x9d
    542a:	0092      	lsls	r2, r2, #2
    542c:	4930      	ldr	r1, [pc, #192]	; (54f0 <NMI_GrowlSendNotification+0x1d0>)
    542e:	4831      	ldr	r0, [pc, #196]	; (54f4 <NMI_GrowlSendNotification+0x1d4>)
    5430:	4b21      	ldr	r3, [pc, #132]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    5432:	4798      	blx	r3
    5434:	4831      	ldr	r0, [pc, #196]	; (54fc <NMI_GrowlSendNotification+0x1dc>)
    5436:	4b22      	ldr	r3, [pc, #136]	; (54c0 <NMI_GrowlSendNotification+0x1a0>)
    5438:	4798      	blx	r3
    543a:	200d      	movs	r0, #13
    543c:	4b21      	ldr	r3, [pc, #132]	; (54c4 <NMI_GrowlSendNotification+0x1a4>)
    543e:	4798      	blx	r3
				retVal = -1;
    5440:	2001      	movs	r0, #1
    5442:	4240      	negs	r0, r0
    5444:	e030      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    5446:	482e      	ldr	r0, [pc, #184]	; (5500 <NMI_GrowlSendNotification+0x1e0>)
    5448:	4b1b      	ldr	r3, [pc, #108]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    544a:	4798      	blx	r3
    544c:	200d      	movs	r0, #13
    544e:	4b1d      	ldr	r3, [pc, #116]	; (54c4 <NMI_GrowlSendNotification+0x1a4>)
    5450:	4798      	blx	r3
			retVal = -1;
    5452:	2001      	movs	r0, #1
    5454:	4240      	negs	r0, r0
    5456:	e027      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
		}
	}
	else
	{
		retVal = -1;
    5458:	2001      	movs	r0, #1
    545a:	4240      	negs	r0, r0
    545c:	e024      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
    545e:	2001      	movs	r0, #1
    5460:	4240      	negs	r0, r0
    5462:	e021      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
    5464:	2001      	movs	r0, #1
    5466:	4240      	negs	r0, r0
    5468:	e01e      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
    546a:	2001      	movs	r0, #1
    546c:	4240      	negs	r0, r0
    546e:	e01b      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
				return -1;
			}
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		}
		else
			return M2M_ERR_FAIL;
    5470:	200c      	movs	r0, #12
    5472:	4240      	negs	r0, r0
    5474:	e018      	b.n	54a8 <NMI_GrowlSendNotification+0x188>
				retVal = -1;
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    5476:	4a23      	ldr	r2, [pc, #140]	; (5504 <NMI_GrowlSendNotification+0x1e4>)
    5478:	491d      	ldr	r1, [pc, #116]	; (54f0 <NMI_GrowlSendNotification+0x1d0>)
    547a:	481e      	ldr	r0, [pc, #120]	; (54f4 <NMI_GrowlSendNotification+0x1d4>)
    547c:	4b0e      	ldr	r3, [pc, #56]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    547e:	4798      	blx	r3
    5480:	4921      	ldr	r1, [pc, #132]	; (5508 <NMI_GrowlSendNotification+0x1e8>)
    5482:	e7e0      	b.n	5446 <NMI_GrowlSendNotification+0x126>
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		}
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
    5484:	4b12      	ldr	r3, [pc, #72]	; (54d0 <NMI_GrowlSendNotification+0x1b0>)
    5486:	79db      	ldrb	r3, [r3, #7]
    5488:	2b00      	cmp	r3, #0
    548a:	d086      	beq.n	539a <NMI_GrowlSendNotification+0x7a>
    548c:	e7f3      	b.n	5476 <NMI_GrowlSendNotification+0x156>
				retVal = -1;
			}
		}
		else
		{
			M2M_ERR("Another %s Request is pending\n",(u8ClientName == NMA_CLIENT) ? "NMA" : "PROWL");
    548e:	4a1d      	ldr	r2, [pc, #116]	; (5504 <NMI_GrowlSendNotification+0x1e4>)
    5490:	4917      	ldr	r1, [pc, #92]	; (54f0 <NMI_GrowlSendNotification+0x1d0>)
    5492:	4818      	ldr	r0, [pc, #96]	; (54f4 <NMI_GrowlSendNotification+0x1d4>)
    5494:	4b08      	ldr	r3, [pc, #32]	; (54b8 <NMI_GrowlSendNotification+0x198>)
    5496:	4798      	blx	r3
    5498:	491c      	ldr	r1, [pc, #112]	; (550c <NMI_GrowlSendNotification+0x1ec>)
    549a:	e7d4      	b.n	5446 <NMI_GrowlSendNotification+0x126>
			pstrNotification = (tstrNotification*)(&gstrNotificationProwl);
		}
		else
			return M2M_ERR_FAIL;

		if(pstrNotification->u8State == GROWL_STATE_IDLE)
    549c:	4b0d      	ldr	r3, [pc, #52]	; (54d4 <NMI_GrowlSendNotification+0x1b4>)
    549e:	79db      	ldrb	r3, [r3, #7]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d100      	bne.n	54a6 <NMI_GrowlSendNotification+0x186>
    54a4:	e77b      	b.n	539e <NMI_GrowlSendNotification+0x7e>
    54a6:	e7f2      	b.n	548e <NMI_GrowlSendNotification+0x16e>
	else
	{
		retVal = -1;
	}
	return retVal;
}
    54a8:	bc0c      	pop	{r2, r3}
    54aa:	4690      	mov	r8, r2
    54ac:	4699      	mov	r9, r3
    54ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54b0:	20000128 	.word	0x20000128
    54b4:	00006fe4 	.word	0x00006fe4
    54b8:	00005bad 	.word	0x00005bad
    54bc:	00007d64 	.word	0x00007d64
    54c0:	00005ccd 	.word	0x00005ccd
    54c4:	00005be1 	.word	0x00005be1
    54c8:	20000110 	.word	0x20000110
    54cc:	00007d50 	.word	0x00007d50
    54d0:	2000012c 	.word	0x2000012c
    54d4:	20000114 	.word	0x20000114
    54d8:	000009b5 	.word	0x000009b5
    54dc:	00002ed1 	.word	0x00002ed1
    54e0:	00007c68 	.word	0x00007c68
    54e4:	000031d5 	.word	0x000031d5
    54e8:	00007c80 	.word	0x00007c80
    54ec:	0000026e 	.word	0x0000026e
    54f0:	00007dec 	.word	0x00007dec
    54f4:	00006d30 	.word	0x00006d30
    54f8:	00007d84 	.word	0x00007d84
    54fc:	00007db4 	.word	0x00007db4
    5500:	00007dcc 	.word	0x00007dcc
    5504:	0000027a 	.word	0x0000027a
    5508:	00007d7c 	.word	0x00007d7c
    550c:	00007d78 	.word	0x00007d78

00005510 <extint_detection_callback>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    5510:	4b03      	ldr	r3, [pc, #12]	; (5520 <extint_detection_callback+0x10>)
    5512:	6a1b      	ldr	r3, [r3, #32]
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void extint_detection_callback(void)
{
	pin_state = port_pin_get_input_level(BUTTON_0_PIN);
    5514:	041b      	lsls	r3, r3, #16
    5516:	0fdb      	lsrs	r3, r3, #31
    5518:	4a02      	ldr	r2, [pc, #8]	; (5524 <extint_detection_callback+0x14>)
    551a:	7013      	strb	r3, [r2, #0]
}
    551c:	4770      	bx	lr
    551e:	46c0      	nop			; (mov r8, r8)
    5520:	41004400 	.word	0x41004400
    5524:	20000368 	.word	0x20000368

00005528 <growl_send_message_handler>:

/**
 * \brief Send a specific notification to a registered Android(NMA) or IOS(PROWL)
 */
static int growl_send_message_handler(const char* app_name, const char* event_name, const char* event_msg)
{
    5528:	b570      	push	{r4, r5, r6, lr}
    552a:	b082      	sub	sp, #8
    552c:	0005      	movs	r5, r0
    552e:	000e      	movs	r6, r1
    5530:	0014      	movs	r4, r2
	printf("Sending Growl message: %s \r\n", event_msg);
    5532:	0011      	movs	r1, r2
    5534:	4806      	ldr	r0, [pc, #24]	; (5550 <growl_send_message_handler+0x28>)
    5536:	4b07      	ldr	r3, [pc, #28]	; (5554 <growl_send_message_handler+0x2c>)
    5538:	4798      	blx	r3
	NMI_GrowlSendNotification(PROWL_CLIENT, (uint8*) app_name, (uint8*) event_name, (uint8*) event_msg,PROWL_CONNECTION_TYPE); // send by PROWL */
    553a:	2300      	movs	r3, #0
    553c:	9300      	str	r3, [sp, #0]
    553e:	0023      	movs	r3, r4
    5540:	0032      	movs	r2, r6
    5542:	0029      	movs	r1, r5
    5544:	2001      	movs	r0, #1
    5546:	4c04      	ldr	r4, [pc, #16]	; (5558 <growl_send_message_handler+0x30>)
    5548:	47a0      	blx	r4
	//NMI_GrowlSendNotification(NMA_CLIENT, (uint8_t *)"Growl_Sample", (uint8_t *)"Growl_Event", (uint8_t *)"growl_test", NMA_CONNECTION_TYPE);           /* send by NMA */
	return 0;
}
    554a:	2000      	movs	r0, #0
    554c:	b002      	add	sp, #8
    554e:	bd70      	pop	{r4, r5, r6, pc}
    5550:	00007e24 	.word	0x00007e24
    5554:	00005bad 	.word	0x00005bad
    5558:	00005321 	.word	0x00005321

0000555c <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    555c:	b510      	push	{r4, lr}
    555e:	b082      	sub	sp, #8
    5560:	000c      	movs	r4, r1
	switch (u8MsgType) {
    5562:	282c      	cmp	r0, #44	; 0x2c
    5564:	d004      	beq.n	5570 <wifi_cb+0x14>
    5566:	2832      	cmp	r0, #50	; 0x32
    5568:	d014      	beq.n	5594 <wifi_cb+0x38>
    556a:	2809      	cmp	r0, #9
    556c:	d142      	bne.n	55f4 <wifi_cb+0x98>
    556e:	e026      	b.n	55be <wifi_cb+0x62>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    5570:	780b      	ldrb	r3, [r1, #0]
    5572:	2b01      	cmp	r3, #1
    5574:	d105      	bne.n	5582 <wifi_cb+0x26>
			printf("Wi-Fi connected\r\n");
    5576:	4820      	ldr	r0, [pc, #128]	; (55f8 <wifi_cb+0x9c>)
    5578:	4b20      	ldr	r3, [pc, #128]	; (55fc <wifi_cb+0xa0>)
    557a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    557c:	4b20      	ldr	r3, [pc, #128]	; (5600 <wifi_cb+0xa4>)
    557e:	4798      	blx	r3
    5580:	e038      	b.n	55f4 <wifi_cb+0x98>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    5582:	2b00      	cmp	r3, #0
    5584:	d136      	bne.n	55f4 <wifi_cb+0x98>
			printf("Wi-Fi disconnected\r\n");
    5586:	481f      	ldr	r0, [pc, #124]	; (5604 <wifi_cb+0xa8>)
    5588:	4b1c      	ldr	r3, [pc, #112]	; (55fc <wifi_cb+0xa0>)
    558a:	4798      	blx	r3
			connection_state = 0;
    558c:	2200      	movs	r2, #0
    558e:	4b1e      	ldr	r3, [pc, #120]	; (5608 <wifi_cb+0xac>)
    5590:	701a      	strb	r2, [r3, #0]
    5592:	e02f      	b.n	55f4 <wifi_cb+0x98>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("DHCP complete - Wi-Fi IP is %u.%u.%u.%u\r\n",
    5594:	788b      	ldrb	r3, [r1, #2]
    5596:	784a      	ldrb	r2, [r1, #1]
    5598:	7809      	ldrb	r1, [r1, #0]
    559a:	78e0      	ldrb	r0, [r4, #3]
    559c:	9000      	str	r0, [sp, #0]
    559e:	481b      	ldr	r0, [pc, #108]	; (560c <wifi_cb+0xb0>)
    55a0:	4c1b      	ldr	r4, [pc, #108]	; (5610 <wifi_cb+0xb4>)
    55a2:	47a0      	blx	r4
			/** init growl */
			NMI_GrowlInit((uint8_t *)PROWL_API_KEY, (uint8_t *)NMA_API_KEY);
			growl_send_message_handler("Drawer Monitor", "Status Update", "Connection Established");
		}
#else
		NMI_GrowlInit((uint8_t *)PROWL_API_KEY, (uint8_t *)NMA_API_KEY);
    55a4:	491b      	ldr	r1, [pc, #108]	; (5614 <wifi_cb+0xb8>)
    55a6:	481c      	ldr	r0, [pc, #112]	; (5618 <wifi_cb+0xbc>)
    55a8:	4b1c      	ldr	r3, [pc, #112]	; (561c <wifi_cb+0xc0>)
    55aa:	4798      	blx	r3
		growl_send_message_handler("Drawer Monitor", "Status Update", "Connection Established");
    55ac:	4a1c      	ldr	r2, [pc, #112]	; (5620 <wifi_cb+0xc4>)
    55ae:	491d      	ldr	r1, [pc, #116]	; (5624 <wifi_cb+0xc8>)
    55b0:	481d      	ldr	r0, [pc, #116]	; (5628 <wifi_cb+0xcc>)
    55b2:	4b1e      	ldr	r3, [pc, #120]	; (562c <wifi_cb+0xd0>)
    55b4:	4798      	blx	r3
#endif
		connection_state = 1;
    55b6:	2201      	movs	r2, #1
    55b8:	4b13      	ldr	r3, [pc, #76]	; (5608 <wifi_cb+0xac>)
    55ba:	701a      	strb	r2, [r3, #0]
		break;
    55bc:	e01a      	b.n	55f4 <wifi_cb+0x98>
	}

	case M2M_WIFI_RESP_PROVISION_INFO:
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    55be:	481c      	ldr	r0, [pc, #112]	; (5630 <wifi_cb+0xd4>)
    55c0:	4b0e      	ldr	r3, [pc, #56]	; (55fc <wifi_cb+0xa0>)
    55c2:	4798      	blx	r3

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    55c4:	2363      	movs	r3, #99	; 0x63
    55c6:	5ce3      	ldrb	r3, [r4, r3]
    55c8:	2b00      	cmp	r3, #0
    55ca:	d110      	bne.n	55ee <wifi_cb+0x92>
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    55cc:	0020      	movs	r0, r4
    55ce:	4b19      	ldr	r3, [pc, #100]	; (5634 <wifi_cb+0xd8>)
    55d0:	4798      	blx	r3
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    55d2:	0023      	movs	r3, r4
    55d4:	3321      	adds	r3, #33	; 0x21
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    55d6:	2262      	movs	r2, #98	; 0x62
    55d8:	5ca2      	ldrb	r2, [r4, r2]
    55da:	b2c1      	uxtb	r1, r0
    55dc:	20ff      	movs	r0, #255	; 0xff
    55de:	9000      	str	r0, [sp, #0]
    55e0:	0020      	movs	r0, r4
    55e2:	4c15      	ldr	r4, [pc, #84]	; (5638 <wifi_cb+0xdc>)
    55e4:	47a0      	blx	r4
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
			gbRespProvInfo = true;
    55e6:	2201      	movs	r2, #1
    55e8:	4b14      	ldr	r3, [pc, #80]	; (563c <wifi_cb+0xe0>)
    55ea:	701a      	strb	r2, [r3, #0]
    55ec:	e002      	b.n	55f4 <wifi_cb+0x98>
		} else {
			printf("wifi_cb: Provision failed.\r\n");
    55ee:	4814      	ldr	r0, [pc, #80]	; (5640 <wifi_cb+0xe4>)
    55f0:	4b02      	ldr	r3, [pc, #8]	; (55fc <wifi_cb+0xa0>)
    55f2:	4798      	blx	r3
	}

	default:
		break;
	}
}
    55f4:	b002      	add	sp, #8
    55f6:	bd10      	pop	{r4, pc}
    55f8:	00007e44 	.word	0x00007e44
    55fc:	00005ccd 	.word	0x00005ccd
    5600:	00001911 	.word	0x00001911
    5604:	00007e58 	.word	0x00007e58
    5608:	20000375 	.word	0x20000375
    560c:	00007e6c 	.word	0x00007e6c
    5610:	00005bad 	.word	0x00005bad
    5614:	00007e98 	.word	0x00007e98
    5618:	00007ecc 	.word	0x00007ecc
    561c:	0000527d 	.word	0x0000527d
    5620:	00007ef8 	.word	0x00007ef8
    5624:	00007f10 	.word	0x00007f10
    5628:	00007f20 	.word	0x00007f20
    562c:	00005529 	.word	0x00005529
    5630:	00007f30 	.word	0x00007f30
    5634:	00005e55 	.word	0x00005e55
    5638:	000018f5 	.word	0x000018f5
    563c:	200001c0 	.word	0x200001c0
    5640:	00007f58 	.word	0x00007f58

00005644 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5644:	b570      	push	{r4, r5, r6, lr}
    5646:	b082      	sub	sp, #8
    5648:	0005      	movs	r5, r0
    564a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    564c:	2200      	movs	r2, #0
    564e:	466b      	mov	r3, sp
    5650:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5652:	4c06      	ldr	r4, [pc, #24]	; (566c <usart_serial_getchar+0x28>)
    5654:	466b      	mov	r3, sp
    5656:	1d99      	adds	r1, r3, #6
    5658:	0028      	movs	r0, r5
    565a:	47a0      	blx	r4
    565c:	2800      	cmp	r0, #0
    565e:	d1f9      	bne.n	5654 <usart_serial_getchar+0x10>

	*c = temp;
    5660:	466b      	mov	r3, sp
    5662:	3306      	adds	r3, #6
    5664:	881b      	ldrh	r3, [r3, #0]
    5666:	7033      	strb	r3, [r6, #0]
}
    5668:	b002      	add	sp, #8
    566a:	bd70      	pop	{r4, r5, r6, pc}
    566c:	00004241 	.word	0x00004241

00005670 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    5670:	b570      	push	{r4, r5, r6, lr}
    5672:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5674:	b28c      	uxth	r4, r1
    5676:	4e03      	ldr	r6, [pc, #12]	; (5684 <usart_serial_putchar+0x14>)
    5678:	0021      	movs	r1, r4
    567a:	0028      	movs	r0, r5
    567c:	47b0      	blx	r6
    567e:	2800      	cmp	r0, #0
    5680:	d1fa      	bne.n	5678 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    5682:	bd70      	pop	{r4, r5, r6, pc}
    5684:	00004215 	.word	0x00004215

00005688 <configure_extint_channel>:
uint8 connection_state;
uint32 growl_msg_tmr;

//! [setup]
void configure_extint_channel(void)
{
    5688:	b510      	push	{r4, lr}
    568a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    568c:	ac01      	add	r4, sp, #4
    568e:	0020      	movs	r0, r4
    5690:	4b07      	ldr	r3, [pc, #28]	; (56b0 <configure_extint_channel+0x28>)
    5692:	4798      	blx	r3
	config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    5694:	230f      	movs	r3, #15
    5696:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    5698:	2300      	movs	r3, #0
    569a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    569c:	3301      	adds	r3, #1
    569e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    56a0:	3302      	adds	r3, #2
    56a2:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    56a4:	0021      	movs	r1, r4
    56a6:	200f      	movs	r0, #15
    56a8:	4b02      	ldr	r3, [pc, #8]	; (56b4 <configure_extint_channel+0x2c>)
    56aa:	4798      	blx	r3
}
    56ac:	b004      	add	sp, #16
    56ae:	bd10      	pop	{r4, pc}
    56b0:	000034fd 	.word	0x000034fd
    56b4:	00003511 	.word	0x00003511

000056b8 <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
    56b8:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    56ba:	2200      	movs	r2, #0
    56bc:	210f      	movs	r1, #15
    56be:	4804      	ldr	r0, [pc, #16]	; (56d0 <configure_extint_callbacks+0x18>)
    56c0:	4b04      	ldr	r3, [pc, #16]	; (56d4 <configure_extint_callbacks+0x1c>)
    56c2:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    56c4:	2100      	movs	r1, #0
    56c6:	200f      	movs	r0, #15
    56c8:	4b03      	ldr	r3, [pc, #12]	; (56d8 <configure_extint_callbacks+0x20>)
    56ca:	4798      	blx	r3
}
    56cc:	bd10      	pop	{r4, pc}
    56ce:	46c0      	nop			; (mov r8, r8)
    56d0:	00005511 	.word	0x00005511
    56d4:	000033a5 	.word	0x000033a5
    56d8:	000033d1 	.word	0x000033d1

000056dc <GrowlCb>:
 *  - [11] GROWL_ERR_RESOLVE_DNS (@GROWL_ERR_RESOLVE_DNS GROWL_RETRY)
 *  - [12] GROWL_RETRY (@ref GROWL_RETRY)
 *	\param	[u8ClientID] client id returned by the nma server.
 */
void GrowlCb(uint8_t u8Code, uint8_t u8ClientID)
{
    56dc:	b510      	push	{r4, lr}
	if(u8Code == 20)
    56de:	2814      	cmp	r0, #20
    56e0:	d103      	bne.n	56ea <GrowlCb+0xe>
		printf("Growl msg sent successfully.\r\n");
    56e2:	4804      	ldr	r0, [pc, #16]	; (56f4 <GrowlCb+0x18>)
    56e4:	4b04      	ldr	r3, [pc, #16]	; (56f8 <GrowlCb+0x1c>)
    56e6:	4798      	blx	r3
    56e8:	e003      	b.n	56f2 <GrowlCb+0x16>
	else	
		printf("ERROR: Growl CB Code: %d \r\n", u8Code);
    56ea:	0001      	movs	r1, r0
    56ec:	4803      	ldr	r0, [pc, #12]	; (56fc <GrowlCb+0x20>)
    56ee:	4b04      	ldr	r3, [pc, #16]	; (5700 <GrowlCb+0x24>)
    56f0:	4798      	blx	r3
}
    56f2:	bd10      	pop	{r4, pc}
    56f4:	00007f74 	.word	0x00007f74
    56f8:	00005ccd 	.word	0x00005ccd
    56fc:	00007f94 	.word	0x00007f94
    5700:	00005bad 	.word	0x00005bad

00005704 <Service_1hr>:

void Service_1hr(void)
{
    5704:	b510      	push	{r4, lr}
	if(connection_state)
    5706:	4b05      	ldr	r3, [pc, #20]	; (571c <Service_1hr+0x18>)
    5708:	781b      	ldrb	r3, [r3, #0]
    570a:	2b00      	cmp	r3, #0
    570c:	d004      	beq.n	5718 <Service_1hr+0x14>
		growl_send_message_handler("Switch Monitor", "Heartbeat", "1Hr Heartbeat Ping");	
    570e:	4a04      	ldr	r2, [pc, #16]	; (5720 <Service_1hr+0x1c>)
    5710:	4904      	ldr	r1, [pc, #16]	; (5724 <Service_1hr+0x20>)
    5712:	4805      	ldr	r0, [pc, #20]	; (5728 <Service_1hr+0x24>)
    5714:	4b05      	ldr	r3, [pc, #20]	; (572c <Service_1hr+0x28>)
    5716:	4798      	blx	r3
}
    5718:	bd10      	pop	{r4, pc}
    571a:	46c0      	nop			; (mov r8, r8)
    571c:	20000375 	.word	0x20000375
    5720:	00007fb0 	.word	0x00007fb0
    5724:	00007fc4 	.word	0x00007fc4
    5728:	00007fd0 	.word	0x00007fd0
    572c:	00005529 	.word	0x00005529

00005730 <Service_1s>:

void Service_1s(void)
{
    5730:	b510      	push	{r4, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5732:	2280      	movs	r2, #128	; 0x80
    5734:	05d2      	lsls	r2, r2, #23
    5736:	4b0a      	ldr	r3, [pc, #40]	; (5760 <Service_1s+0x30>)
    5738:	61da      	str	r2, [r3, #28]
	static uint16 hour_tmr;
	port_pin_toggle_output_level(LED0_PIN);
	seconds_alive_cnt++;
    573a:	4a0a      	ldr	r2, [pc, #40]	; (5764 <Service_1s+0x34>)
    573c:	6813      	ldr	r3, [r2, #0]
    573e:	3301      	adds	r3, #1
    5740:	6013      	str	r3, [r2, #0]
	
	if(hour_tmr)
    5742:	4b09      	ldr	r3, [pc, #36]	; (5768 <Service_1s+0x38>)
    5744:	881b      	ldrh	r3, [r3, #0]
    5746:	2b00      	cmp	r3, #0
    5748:	d003      	beq.n	5752 <Service_1s+0x22>
	{
		hour_tmr--;
    574a:	3b01      	subs	r3, #1
    574c:	4a06      	ldr	r2, [pc, #24]	; (5768 <Service_1s+0x38>)
    574e:	8013      	strh	r3, [r2, #0]
    5750:	e004      	b.n	575c <Service_1s+0x2c>
	}
	else
	{
		hour_tmr = 60 * 60 - 1;
    5752:	4a06      	ldr	r2, [pc, #24]	; (576c <Service_1s+0x3c>)
    5754:	4b04      	ldr	r3, [pc, #16]	; (5768 <Service_1s+0x38>)
    5756:	801a      	strh	r2, [r3, #0]
		Service_1hr();
    5758:	4b05      	ldr	r3, [pc, #20]	; (5770 <Service_1s+0x40>)
    575a:	4798      	blx	r3
	}
}
    575c:	bd10      	pop	{r4, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	41004480 	.word	0x41004480
    5764:	2000036c 	.word	0x2000036c
    5768:	200001be 	.word	0x200001be
    576c:	00000e0f 	.word	0x00000e0f
    5770:	00005705 	.word	0x00005705

00005774 <TimerCallback>:

void TimerCallback(void) //called every .5s
{
	static uint8_t second_tmr;
	if(second_tmr)
    5774:	4b0a      	ldr	r3, [pc, #40]	; (57a0 <TimerCallback+0x2c>)
    5776:	781b      	ldrb	r3, [r3, #0]
    5778:	2b00      	cmp	r3, #0
    577a:	d003      	beq.n	5784 <TimerCallback+0x10>
	{
		second_tmr--;
    577c:	3b01      	subs	r3, #1
    577e:	4a08      	ldr	r2, [pc, #32]	; (57a0 <TimerCallback+0x2c>)
    5780:	7013      	strb	r3, [r2, #0]
    5782:	e004      	b.n	578e <TimerCallback+0x1a>
	}
	else
	{
		second_tmr = 1;
    5784:	2301      	movs	r3, #1
    5786:	4a06      	ldr	r2, [pc, #24]	; (57a0 <TimerCallback+0x2c>)
    5788:	7013      	strb	r3, [r2, #0]
		service_1s_flag = 1; //let main thread know to call Service1s()	
    578a:	4a06      	ldr	r2, [pc, #24]	; (57a4 <TimerCallback+0x30>)
    578c:	7013      	strb	r3, [r2, #0]
	}
	//Place any code that needs to be serviced at this interval here:
	if(growl_msg_tmr)
    578e:	4b06      	ldr	r3, [pc, #24]	; (57a8 <TimerCallback+0x34>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	2b00      	cmp	r3, #0
    5794:	d002      	beq.n	579c <TimerCallback+0x28>
		growl_msg_tmr--;
    5796:	3b01      	subs	r3, #1
    5798:	4a03      	ldr	r2, [pc, #12]	; (57a8 <TimerCallback+0x34>)
    579a:	6013      	str	r3, [r2, #0]
}
    579c:	4770      	bx	lr
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	200001bc 	.word	0x200001bc
    57a4:	20000374 	.word	0x20000374
    57a8:	20000370 	.word	0x20000370

000057ac <main>:
 * \brief Main application function.
 *
 * \return program return value.
 */
int main(void)
{
    57ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ae:	4647      	mov	r7, r8
    57b0:	b480      	push	{r7}
    57b2:	b098      	sub	sp, #96	; 0x60
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
#endif

	/* Initialize the board. */
	system_init();
    57b4:	4b5b      	ldr	r3, [pc, #364]	; (5924 <main+0x178>)
    57b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    57b8:	aa02      	add	r2, sp, #8
    57ba:	2380      	movs	r3, #128	; 0x80
    57bc:	05db      	lsls	r3, r3, #23
    57be:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    57c0:	2300      	movs	r3, #0
    57c2:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    57c4:	21ff      	movs	r1, #255	; 0xff
    57c6:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    57c8:	2100      	movs	r1, #0
    57ca:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    57cc:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    57ce:	2401      	movs	r4, #1
    57d0:	2024      	movs	r0, #36	; 0x24
    57d2:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    57d4:	3001      	adds	r0, #1
    57d6:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    57d8:	3001      	adds	r0, #1
    57da:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    57dc:	3001      	adds	r0, #1
    57de:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    57e0:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    57e2:	3005      	adds	r0, #5
    57e4:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    57e6:	3001      	adds	r0, #1
    57e8:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    57ea:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    57ec:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    57ee:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    57f0:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    57f2:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    57f4:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    57f6:	2313      	movs	r3, #19
    57f8:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    57fa:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    57fc:	2380      	movs	r3, #128	; 0x80
    57fe:	035b      	lsls	r3, r3, #13
    5800:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5802:	4b49      	ldr	r3, [pc, #292]	; (5928 <main+0x17c>)
    5804:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5806:	4b49      	ldr	r3, [pc, #292]	; (592c <main+0x180>)
    5808:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    580a:	2301      	movs	r3, #1
    580c:	425b      	negs	r3, r3
    580e:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5810:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    5812:	23e1      	movs	r3, #225	; 0xe1
    5814:	025b      	lsls	r3, r3, #9
    5816:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5818:	4d45      	ldr	r5, [pc, #276]	; (5930 <main+0x184>)
    581a:	4b46      	ldr	r3, [pc, #280]	; (5934 <main+0x188>)
    581c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    581e:	4946      	ldr	r1, [pc, #280]	; (5938 <main+0x18c>)
    5820:	4b46      	ldr	r3, [pc, #280]	; (593c <main+0x190>)
    5822:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5824:	4946      	ldr	r1, [pc, #280]	; (5940 <main+0x194>)
    5826:	4b47      	ldr	r3, [pc, #284]	; (5944 <main+0x198>)
    5828:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    582a:	4947      	ldr	r1, [pc, #284]	; (5948 <main+0x19c>)
    582c:	0028      	movs	r0, r5
    582e:	4b47      	ldr	r3, [pc, #284]	; (594c <main+0x1a0>)
    5830:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5832:	4f47      	ldr	r7, [pc, #284]	; (5950 <main+0x1a4>)
    5834:	683b      	ldr	r3, [r7, #0]
    5836:	6898      	ldr	r0, [r3, #8]
    5838:	2100      	movs	r1, #0
    583a:	4e46      	ldr	r6, [pc, #280]	; (5954 <main+0x1a8>)
    583c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    583e:	683b      	ldr	r3, [r7, #0]
    5840:	6858      	ldr	r0, [r3, #4]
    5842:	2100      	movs	r1, #0
    5844:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5846:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5848:	0030      	movs	r0, r6
    584a:	4b43      	ldr	r3, [pc, #268]	; (5958 <main+0x1ac>)
    584c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    584e:	231f      	movs	r3, #31
    5850:	4018      	ands	r0, r3
    5852:	4084      	lsls	r4, r0
    5854:	4b41      	ldr	r3, [pc, #260]	; (595c <main+0x1b0>)
    5856:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5858:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    585a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    585c:	2a00      	cmp	r2, #0
    585e:	d1fc      	bne.n	585a <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5860:	6832      	ldr	r2, [r6, #0]
    5862:	2302      	movs	r3, #2
    5864:	4313      	orrs	r3, r2
    5866:	6033      	str	r3, [r6, #0]
	/* Initialize the board. */
	system_init();

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    5868:	483d      	ldr	r0, [pc, #244]	; (5960 <main+0x1b4>)
    586a:	4b3e      	ldr	r3, [pc, #248]	; (5964 <main+0x1b8>)
    586c:	4798      	blx	r3
	
	configure_tc();
    586e:	4b3e      	ldr	r3, [pc, #248]	; (5968 <main+0x1bc>)
    5870:	4798      	blx	r3
	configure_tc_callbacks();
    5872:	4b3e      	ldr	r3, [pc, #248]	; (596c <main+0x1c0>)
    5874:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    5876:	4b3e      	ldr	r3, [pc, #248]	; (5970 <main+0x1c4>)
    5878:	6a1e      	ldr	r6, [r3, #32]

	pin_state = port_pin_get_input_level(BUTTON_0_PIN);
    587a:	0436      	lsls	r6, r6, #16
    587c:	0ff6      	lsrs	r6, r6, #31
    587e:	4b3d      	ldr	r3, [pc, #244]	; (5974 <main+0x1c8>)
    5880:	701e      	strb	r6, [r3, #0]
	prev_pin_state = pin_state;
	//Configure interupt for SW0
	configure_extint_channel();
    5882:	4b3d      	ldr	r3, [pc, #244]	; (5978 <main+0x1cc>)
    5884:	4798      	blx	r3
	configure_extint_callbacks();
    5886:	4b3d      	ldr	r3, [pc, #244]	; (597c <main+0x1d0>)
    5888:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    588a:	4b3d      	ldr	r3, [pc, #244]	; (5980 <main+0x1d4>)
    588c:	2201      	movs	r2, #1
    588e:	701a      	strb	r2, [r3, #0]
    5890:	f3bf 8f5f 	dmb	sy
    5894:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	/* Initialize the BSP. */
	nm_bsp_init();
    5896:	4b3b      	ldr	r3, [pc, #236]	; (5984 <main+0x1d8>)
    5898:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    589a:	2218      	movs	r2, #24
    589c:	2100      	movs	r1, #0
    589e:	a812      	add	r0, sp, #72	; 0x48
    58a0:	4b39      	ldr	r3, [pc, #228]	; (5988 <main+0x1dc>)
    58a2:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    58a4:	4b39      	ldr	r3, [pc, #228]	; (598c <main+0x1e0>)
    58a6:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    58a8:	a812      	add	r0, sp, #72	; 0x48
    58aa:	4b39      	ldr	r3, [pc, #228]	; (5990 <main+0x1e4>)
    58ac:	4798      	blx	r3
    58ae:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
    58b0:	d003      	beq.n	58ba <main+0x10e>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    58b2:	4838      	ldr	r0, [pc, #224]	; (5994 <main+0x1e8>)
    58b4:	4b38      	ldr	r3, [pc, #224]	; (5998 <main+0x1ec>)
    58b6:	4798      	blx	r3
    58b8:	e7fe      	b.n	58b8 <main+0x10c>

	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
	printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
#else
	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    58ba:	23ff      	movs	r3, #255	; 0xff
    58bc:	9300      	str	r3, [sp, #0]
    58be:	4b37      	ldr	r3, [pc, #220]	; (599c <main+0x1f0>)
    58c0:	2202      	movs	r2, #2
    58c2:	2108      	movs	r1, #8
    58c4:	4836      	ldr	r0, [pc, #216]	; (59a0 <main+0x1f4>)
    58c6:	4c37      	ldr	r4, [pc, #220]	; (59a4 <main+0x1f8>)
    58c8:	47a0      	blx	r4
#endif

	while (1) 
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
    58ca:	4c37      	ldr	r4, [pc, #220]	; (59a8 <main+0x1fc>)
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
    58cc:	4f29      	ldr	r7, [pc, #164]	; (5974 <main+0x1c8>)
    58ce:	4b37      	ldr	r3, [pc, #220]	; (59ac <main+0x200>)
    58d0:	4698      	mov	r8, r3
#endif

	while (1) 
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
    58d2:	2000      	movs	r0, #0
    58d4:	47a0      	blx	r4
    58d6:	2800      	cmp	r0, #0
    58d8:	d1fb      	bne.n	58d2 <main+0x126>
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
    58da:	783d      	ldrb	r5, [r7, #0]
    58dc:	42ae      	cmp	r6, r5
    58de:	d016      	beq.n	590e <main+0x162>
    58e0:	4643      	mov	r3, r8
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	2b00      	cmp	r3, #0
    58e6:	d113      	bne.n	5910 <main+0x164>
		{
			prev_pin_state = pin_state;
			growl_msg_tmr = 2;
    58e8:	2202      	movs	r2, #2
    58ea:	4b30      	ldr	r3, [pc, #192]	; (59ac <main+0x200>)
    58ec:	601a      	str	r2, [r3, #0]
			if(pin_state)
    58ee:	2d00      	cmp	r5, #0
    58f0:	d006      	beq.n	5900 <main+0x154>
			{
				growl_send_message_handler("Switch Monitor", "State Change", "Now Open");
    58f2:	4a2f      	ldr	r2, [pc, #188]	; (59b0 <main+0x204>)
    58f4:	492f      	ldr	r1, [pc, #188]	; (59b4 <main+0x208>)
    58f6:	4830      	ldr	r0, [pc, #192]	; (59b8 <main+0x20c>)
    58f8:	4b30      	ldr	r3, [pc, #192]	; (59bc <main+0x210>)
    58fa:	4798      	blx	r3
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
		{
			prev_pin_state = pin_state;
    58fc:	002e      	movs	r6, r5
    58fe:	e007      	b.n	5910 <main+0x164>
			{
				growl_send_message_handler("Switch Monitor", "State Change", "Now Open");
			}
			else
			{
				growl_send_message_handler("Switch Monitor", "State Change", "Now Closed");
    5900:	4a2f      	ldr	r2, [pc, #188]	; (59c0 <main+0x214>)
    5902:	492c      	ldr	r1, [pc, #176]	; (59b4 <main+0x208>)
    5904:	482c      	ldr	r0, [pc, #176]	; (59b8 <main+0x20c>)
    5906:	4b2d      	ldr	r3, [pc, #180]	; (59bc <main+0x210>)
    5908:	4798      	blx	r3
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
		if(pin_state != prev_pin_state && growl_msg_tmr == 0)
		{
			prev_pin_state = pin_state;
    590a:	002e      	movs	r6, r5
    590c:	e000      	b.n	5910 <main+0x164>
    590e:	002e      	movs	r6, r5
			else
			{
				growl_send_message_handler("Switch Monitor", "State Change", "Now Closed");
			}
		}
		if(service_1s_flag)
    5910:	4b2c      	ldr	r3, [pc, #176]	; (59c4 <main+0x218>)
    5912:	781b      	ldrb	r3, [r3, #0]
    5914:	2b00      	cmp	r3, #0
    5916:	d0dc      	beq.n	58d2 <main+0x126>
		{
			service_1s_flag = 0;
    5918:	2200      	movs	r2, #0
    591a:	4b2a      	ldr	r3, [pc, #168]	; (59c4 <main+0x218>)
    591c:	701a      	strb	r2, [r3, #0]
			Service_1s();
    591e:	4b2a      	ldr	r3, [pc, #168]	; (59c8 <main+0x21c>)
    5920:	4798      	blx	r3
    5922:	e7d6      	b.n	58d2 <main+0x126>
    5924:	00004bd1 	.word	0x00004bd1
    5928:	00160002 	.word	0x00160002
    592c:	00170002 	.word	0x00170002
    5930:	20000188 	.word	0x20000188
    5934:	20000364 	.word	0x20000364
    5938:	00005671 	.word	0x00005671
    593c:	20000360 	.word	0x20000360
    5940:	00005645 	.word	0x00005645
    5944:	2000035c 	.word	0x2000035c
    5948:	42001400 	.word	0x42001400
    594c:	00003edd 	.word	0x00003edd
    5950:	20000074 	.word	0x20000074
    5954:	00005ce1 	.word	0x00005ce1
    5958:	000039e9 	.word	0x000039e9
    595c:	e000e100 	.word	0xe000e100
    5960:	00007fe0 	.word	0x00007fe0
    5964:	00005ccd 	.word	0x00005ccd
    5968:	000004b5 	.word	0x000004b5
    596c:	0000052d 	.word	0x0000052d
    5970:	41004400 	.word	0x41004400
    5974:	20000368 	.word	0x20000368
    5978:	00005689 	.word	0x00005689
    597c:	000056b9 	.word	0x000056b9
    5980:	20000010 	.word	0x20000010
    5984:	0000063d 	.word	0x0000063d
    5988:	00005b9b 	.word	0x00005b9b
    598c:	0000555d 	.word	0x0000555d
    5990:	00001575 	.word	0x00001575
    5994:	00008044 	.word	0x00008044
    5998:	00005bad 	.word	0x00005bad
    599c:	0000806c 	.word	0x0000806c
    59a0:	0000807c 	.word	0x0000807c
    59a4:	000018f5 	.word	0x000018f5
    59a8:	0000166d 	.word	0x0000166d
    59ac:	20000370 	.word	0x20000370
    59b0:	00008084 	.word	0x00008084
    59b4:	00008090 	.word	0x00008090
    59b8:	00007fd0 	.word	0x00007fd0
    59bc:	00005529 	.word	0x00005529
    59c0:	000080a0 	.word	0x000080a0
    59c4:	20000374 	.word	0x20000374
    59c8:	00005731 	.word	0x00005731

000059cc <__aeabi_uidiv>:
    59cc:	2200      	movs	r2, #0
    59ce:	0843      	lsrs	r3, r0, #1
    59d0:	428b      	cmp	r3, r1
    59d2:	d374      	bcc.n	5abe <__aeabi_uidiv+0xf2>
    59d4:	0903      	lsrs	r3, r0, #4
    59d6:	428b      	cmp	r3, r1
    59d8:	d35f      	bcc.n	5a9a <__aeabi_uidiv+0xce>
    59da:	0a03      	lsrs	r3, r0, #8
    59dc:	428b      	cmp	r3, r1
    59de:	d344      	bcc.n	5a6a <__aeabi_uidiv+0x9e>
    59e0:	0b03      	lsrs	r3, r0, #12
    59e2:	428b      	cmp	r3, r1
    59e4:	d328      	bcc.n	5a38 <__aeabi_uidiv+0x6c>
    59e6:	0c03      	lsrs	r3, r0, #16
    59e8:	428b      	cmp	r3, r1
    59ea:	d30d      	bcc.n	5a08 <__aeabi_uidiv+0x3c>
    59ec:	22ff      	movs	r2, #255	; 0xff
    59ee:	0209      	lsls	r1, r1, #8
    59f0:	ba12      	rev	r2, r2
    59f2:	0c03      	lsrs	r3, r0, #16
    59f4:	428b      	cmp	r3, r1
    59f6:	d302      	bcc.n	59fe <__aeabi_uidiv+0x32>
    59f8:	1212      	asrs	r2, r2, #8
    59fa:	0209      	lsls	r1, r1, #8
    59fc:	d065      	beq.n	5aca <__aeabi_uidiv+0xfe>
    59fe:	0b03      	lsrs	r3, r0, #12
    5a00:	428b      	cmp	r3, r1
    5a02:	d319      	bcc.n	5a38 <__aeabi_uidiv+0x6c>
    5a04:	e000      	b.n	5a08 <__aeabi_uidiv+0x3c>
    5a06:	0a09      	lsrs	r1, r1, #8
    5a08:	0bc3      	lsrs	r3, r0, #15
    5a0a:	428b      	cmp	r3, r1
    5a0c:	d301      	bcc.n	5a12 <__aeabi_uidiv+0x46>
    5a0e:	03cb      	lsls	r3, r1, #15
    5a10:	1ac0      	subs	r0, r0, r3
    5a12:	4152      	adcs	r2, r2
    5a14:	0b83      	lsrs	r3, r0, #14
    5a16:	428b      	cmp	r3, r1
    5a18:	d301      	bcc.n	5a1e <__aeabi_uidiv+0x52>
    5a1a:	038b      	lsls	r3, r1, #14
    5a1c:	1ac0      	subs	r0, r0, r3
    5a1e:	4152      	adcs	r2, r2
    5a20:	0b43      	lsrs	r3, r0, #13
    5a22:	428b      	cmp	r3, r1
    5a24:	d301      	bcc.n	5a2a <__aeabi_uidiv+0x5e>
    5a26:	034b      	lsls	r3, r1, #13
    5a28:	1ac0      	subs	r0, r0, r3
    5a2a:	4152      	adcs	r2, r2
    5a2c:	0b03      	lsrs	r3, r0, #12
    5a2e:	428b      	cmp	r3, r1
    5a30:	d301      	bcc.n	5a36 <__aeabi_uidiv+0x6a>
    5a32:	030b      	lsls	r3, r1, #12
    5a34:	1ac0      	subs	r0, r0, r3
    5a36:	4152      	adcs	r2, r2
    5a38:	0ac3      	lsrs	r3, r0, #11
    5a3a:	428b      	cmp	r3, r1
    5a3c:	d301      	bcc.n	5a42 <__aeabi_uidiv+0x76>
    5a3e:	02cb      	lsls	r3, r1, #11
    5a40:	1ac0      	subs	r0, r0, r3
    5a42:	4152      	adcs	r2, r2
    5a44:	0a83      	lsrs	r3, r0, #10
    5a46:	428b      	cmp	r3, r1
    5a48:	d301      	bcc.n	5a4e <__aeabi_uidiv+0x82>
    5a4a:	028b      	lsls	r3, r1, #10
    5a4c:	1ac0      	subs	r0, r0, r3
    5a4e:	4152      	adcs	r2, r2
    5a50:	0a43      	lsrs	r3, r0, #9
    5a52:	428b      	cmp	r3, r1
    5a54:	d301      	bcc.n	5a5a <__aeabi_uidiv+0x8e>
    5a56:	024b      	lsls	r3, r1, #9
    5a58:	1ac0      	subs	r0, r0, r3
    5a5a:	4152      	adcs	r2, r2
    5a5c:	0a03      	lsrs	r3, r0, #8
    5a5e:	428b      	cmp	r3, r1
    5a60:	d301      	bcc.n	5a66 <__aeabi_uidiv+0x9a>
    5a62:	020b      	lsls	r3, r1, #8
    5a64:	1ac0      	subs	r0, r0, r3
    5a66:	4152      	adcs	r2, r2
    5a68:	d2cd      	bcs.n	5a06 <__aeabi_uidiv+0x3a>
    5a6a:	09c3      	lsrs	r3, r0, #7
    5a6c:	428b      	cmp	r3, r1
    5a6e:	d301      	bcc.n	5a74 <__aeabi_uidiv+0xa8>
    5a70:	01cb      	lsls	r3, r1, #7
    5a72:	1ac0      	subs	r0, r0, r3
    5a74:	4152      	adcs	r2, r2
    5a76:	0983      	lsrs	r3, r0, #6
    5a78:	428b      	cmp	r3, r1
    5a7a:	d301      	bcc.n	5a80 <__aeabi_uidiv+0xb4>
    5a7c:	018b      	lsls	r3, r1, #6
    5a7e:	1ac0      	subs	r0, r0, r3
    5a80:	4152      	adcs	r2, r2
    5a82:	0943      	lsrs	r3, r0, #5
    5a84:	428b      	cmp	r3, r1
    5a86:	d301      	bcc.n	5a8c <__aeabi_uidiv+0xc0>
    5a88:	014b      	lsls	r3, r1, #5
    5a8a:	1ac0      	subs	r0, r0, r3
    5a8c:	4152      	adcs	r2, r2
    5a8e:	0903      	lsrs	r3, r0, #4
    5a90:	428b      	cmp	r3, r1
    5a92:	d301      	bcc.n	5a98 <__aeabi_uidiv+0xcc>
    5a94:	010b      	lsls	r3, r1, #4
    5a96:	1ac0      	subs	r0, r0, r3
    5a98:	4152      	adcs	r2, r2
    5a9a:	08c3      	lsrs	r3, r0, #3
    5a9c:	428b      	cmp	r3, r1
    5a9e:	d301      	bcc.n	5aa4 <__aeabi_uidiv+0xd8>
    5aa0:	00cb      	lsls	r3, r1, #3
    5aa2:	1ac0      	subs	r0, r0, r3
    5aa4:	4152      	adcs	r2, r2
    5aa6:	0883      	lsrs	r3, r0, #2
    5aa8:	428b      	cmp	r3, r1
    5aaa:	d301      	bcc.n	5ab0 <__aeabi_uidiv+0xe4>
    5aac:	008b      	lsls	r3, r1, #2
    5aae:	1ac0      	subs	r0, r0, r3
    5ab0:	4152      	adcs	r2, r2
    5ab2:	0843      	lsrs	r3, r0, #1
    5ab4:	428b      	cmp	r3, r1
    5ab6:	d301      	bcc.n	5abc <__aeabi_uidiv+0xf0>
    5ab8:	004b      	lsls	r3, r1, #1
    5aba:	1ac0      	subs	r0, r0, r3
    5abc:	4152      	adcs	r2, r2
    5abe:	1a41      	subs	r1, r0, r1
    5ac0:	d200      	bcs.n	5ac4 <__aeabi_uidiv+0xf8>
    5ac2:	4601      	mov	r1, r0
    5ac4:	4152      	adcs	r2, r2
    5ac6:	4610      	mov	r0, r2
    5ac8:	4770      	bx	lr
    5aca:	e7ff      	b.n	5acc <__aeabi_uidiv+0x100>
    5acc:	b501      	push	{r0, lr}
    5ace:	2000      	movs	r0, #0
    5ad0:	f000 f806 	bl	5ae0 <__aeabi_idiv0>
    5ad4:	bd02      	pop	{r1, pc}
    5ad6:	46c0      	nop			; (mov r8, r8)

00005ad8 <__aeabi_uidivmod>:
    5ad8:	2900      	cmp	r1, #0
    5ada:	d0f7      	beq.n	5acc <__aeabi_uidiv+0x100>
    5adc:	e776      	b.n	59cc <__aeabi_uidiv>
    5ade:	4770      	bx	lr

00005ae0 <__aeabi_idiv0>:
    5ae0:	4770      	bx	lr
    5ae2:	46c0      	nop			; (mov r8, r8)

00005ae4 <__aeabi_lmul>:
    5ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ae6:	464f      	mov	r7, r9
    5ae8:	4646      	mov	r6, r8
    5aea:	b4c0      	push	{r6, r7}
    5aec:	0416      	lsls	r6, r2, #16
    5aee:	0c36      	lsrs	r6, r6, #16
    5af0:	4699      	mov	r9, r3
    5af2:	0033      	movs	r3, r6
    5af4:	0405      	lsls	r5, r0, #16
    5af6:	0c2c      	lsrs	r4, r5, #16
    5af8:	0c07      	lsrs	r7, r0, #16
    5afa:	0c15      	lsrs	r5, r2, #16
    5afc:	4363      	muls	r3, r4
    5afe:	437e      	muls	r6, r7
    5b00:	436f      	muls	r7, r5
    5b02:	4365      	muls	r5, r4
    5b04:	0c1c      	lsrs	r4, r3, #16
    5b06:	19ad      	adds	r5, r5, r6
    5b08:	1964      	adds	r4, r4, r5
    5b0a:	469c      	mov	ip, r3
    5b0c:	42a6      	cmp	r6, r4
    5b0e:	d903      	bls.n	5b18 <__aeabi_lmul+0x34>
    5b10:	2380      	movs	r3, #128	; 0x80
    5b12:	025b      	lsls	r3, r3, #9
    5b14:	4698      	mov	r8, r3
    5b16:	4447      	add	r7, r8
    5b18:	4663      	mov	r3, ip
    5b1a:	0c25      	lsrs	r5, r4, #16
    5b1c:	19ef      	adds	r7, r5, r7
    5b1e:	041d      	lsls	r5, r3, #16
    5b20:	464b      	mov	r3, r9
    5b22:	434a      	muls	r2, r1
    5b24:	4343      	muls	r3, r0
    5b26:	0c2d      	lsrs	r5, r5, #16
    5b28:	0424      	lsls	r4, r4, #16
    5b2a:	1964      	adds	r4, r4, r5
    5b2c:	1899      	adds	r1, r3, r2
    5b2e:	19c9      	adds	r1, r1, r7
    5b30:	0020      	movs	r0, r4
    5b32:	bc0c      	pop	{r2, r3}
    5b34:	4690      	mov	r8, r2
    5b36:	4699      	mov	r9, r3
    5b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b3a:	46c0      	nop			; (mov r8, r8)

00005b3c <__libc_init_array>:
    5b3c:	4b0e      	ldr	r3, [pc, #56]	; (5b78 <__libc_init_array+0x3c>)
    5b3e:	b570      	push	{r4, r5, r6, lr}
    5b40:	2500      	movs	r5, #0
    5b42:	001e      	movs	r6, r3
    5b44:	4c0d      	ldr	r4, [pc, #52]	; (5b7c <__libc_init_array+0x40>)
    5b46:	1ae4      	subs	r4, r4, r3
    5b48:	10a4      	asrs	r4, r4, #2
    5b4a:	42a5      	cmp	r5, r4
    5b4c:	d004      	beq.n	5b58 <__libc_init_array+0x1c>
    5b4e:	00ab      	lsls	r3, r5, #2
    5b50:	58f3      	ldr	r3, [r6, r3]
    5b52:	4798      	blx	r3
    5b54:	3501      	adds	r5, #1
    5b56:	e7f8      	b.n	5b4a <__libc_init_array+0xe>
    5b58:	f002 faf6 	bl	8148 <_init>
    5b5c:	4b08      	ldr	r3, [pc, #32]	; (5b80 <__libc_init_array+0x44>)
    5b5e:	2500      	movs	r5, #0
    5b60:	001e      	movs	r6, r3
    5b62:	4c08      	ldr	r4, [pc, #32]	; (5b84 <__libc_init_array+0x48>)
    5b64:	1ae4      	subs	r4, r4, r3
    5b66:	10a4      	asrs	r4, r4, #2
    5b68:	42a5      	cmp	r5, r4
    5b6a:	d004      	beq.n	5b76 <__libc_init_array+0x3a>
    5b6c:	00ab      	lsls	r3, r5, #2
    5b6e:	58f3      	ldr	r3, [r6, r3]
    5b70:	4798      	blx	r3
    5b72:	3501      	adds	r5, #1
    5b74:	e7f8      	b.n	5b68 <__libc_init_array+0x2c>
    5b76:	bd70      	pop	{r4, r5, r6, pc}
    5b78:	00008154 	.word	0x00008154
    5b7c:	00008154 	.word	0x00008154
    5b80:	00008154 	.word	0x00008154
    5b84:	00008158 	.word	0x00008158

00005b88 <memcpy>:
    5b88:	2300      	movs	r3, #0
    5b8a:	b510      	push	{r4, lr}
    5b8c:	429a      	cmp	r2, r3
    5b8e:	d003      	beq.n	5b98 <memcpy+0x10>
    5b90:	5ccc      	ldrb	r4, [r1, r3]
    5b92:	54c4      	strb	r4, [r0, r3]
    5b94:	3301      	adds	r3, #1
    5b96:	e7f9      	b.n	5b8c <memcpy+0x4>
    5b98:	bd10      	pop	{r4, pc}

00005b9a <memset>:
    5b9a:	0003      	movs	r3, r0
    5b9c:	1882      	adds	r2, r0, r2
    5b9e:	4293      	cmp	r3, r2
    5ba0:	d002      	beq.n	5ba8 <memset+0xe>
    5ba2:	7019      	strb	r1, [r3, #0]
    5ba4:	3301      	adds	r3, #1
    5ba6:	e7fa      	b.n	5b9e <memset+0x4>
    5ba8:	4770      	bx	lr
	...

00005bac <iprintf>:
    5bac:	b40f      	push	{r0, r1, r2, r3}
    5bae:	4b0b      	ldr	r3, [pc, #44]	; (5bdc <iprintf+0x30>)
    5bb0:	b513      	push	{r0, r1, r4, lr}
    5bb2:	681c      	ldr	r4, [r3, #0]
    5bb4:	2c00      	cmp	r4, #0
    5bb6:	d005      	beq.n	5bc4 <iprintf+0x18>
    5bb8:	69a3      	ldr	r3, [r4, #24]
    5bba:	2b00      	cmp	r3, #0
    5bbc:	d102      	bne.n	5bc4 <iprintf+0x18>
    5bbe:	0020      	movs	r0, r4
    5bc0:	f000 fb12 	bl	61e8 <__sinit>
    5bc4:	ab05      	add	r3, sp, #20
    5bc6:	9a04      	ldr	r2, [sp, #16]
    5bc8:	68a1      	ldr	r1, [r4, #8]
    5bca:	0020      	movs	r0, r4
    5bcc:	9301      	str	r3, [sp, #4]
    5bce:	f000 fcd1 	bl	6574 <_vfiprintf_r>
    5bd2:	bc16      	pop	{r1, r2, r4}
    5bd4:	bc08      	pop	{r3}
    5bd6:	b004      	add	sp, #16
    5bd8:	4718      	bx	r3
    5bda:	46c0      	nop			; (mov r8, r8)
    5bdc:	20000074 	.word	0x20000074

00005be0 <putchar>:
    5be0:	4b08      	ldr	r3, [pc, #32]	; (5c04 <putchar+0x24>)
    5be2:	b570      	push	{r4, r5, r6, lr}
    5be4:	681c      	ldr	r4, [r3, #0]
    5be6:	0005      	movs	r5, r0
    5be8:	2c00      	cmp	r4, #0
    5bea:	d005      	beq.n	5bf8 <putchar+0x18>
    5bec:	69a3      	ldr	r3, [r4, #24]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d102      	bne.n	5bf8 <putchar+0x18>
    5bf2:	0020      	movs	r0, r4
    5bf4:	f000 faf8 	bl	61e8 <__sinit>
    5bf8:	0029      	movs	r1, r5
    5bfa:	68a2      	ldr	r2, [r4, #8]
    5bfc:	0020      	movs	r0, r4
    5bfe:	f000 ff65 	bl	6acc <_putc_r>
    5c02:	bd70      	pop	{r4, r5, r6, pc}
    5c04:	20000074 	.word	0x20000074

00005c08 <_puts_r>:
    5c08:	b570      	push	{r4, r5, r6, lr}
    5c0a:	0005      	movs	r5, r0
    5c0c:	000e      	movs	r6, r1
    5c0e:	2800      	cmp	r0, #0
    5c10:	d004      	beq.n	5c1c <_puts_r+0x14>
    5c12:	6983      	ldr	r3, [r0, #24]
    5c14:	2b00      	cmp	r3, #0
    5c16:	d101      	bne.n	5c1c <_puts_r+0x14>
    5c18:	f000 fae6 	bl	61e8 <__sinit>
    5c1c:	69ab      	ldr	r3, [r5, #24]
    5c1e:	68ac      	ldr	r4, [r5, #8]
    5c20:	2b00      	cmp	r3, #0
    5c22:	d102      	bne.n	5c2a <_puts_r+0x22>
    5c24:	0028      	movs	r0, r5
    5c26:	f000 fadf 	bl	61e8 <__sinit>
    5c2a:	4b25      	ldr	r3, [pc, #148]	; (5cc0 <_puts_r+0xb8>)
    5c2c:	429c      	cmp	r4, r3
    5c2e:	d101      	bne.n	5c34 <_puts_r+0x2c>
    5c30:	686c      	ldr	r4, [r5, #4]
    5c32:	e008      	b.n	5c46 <_puts_r+0x3e>
    5c34:	4b23      	ldr	r3, [pc, #140]	; (5cc4 <_puts_r+0xbc>)
    5c36:	429c      	cmp	r4, r3
    5c38:	d101      	bne.n	5c3e <_puts_r+0x36>
    5c3a:	68ac      	ldr	r4, [r5, #8]
    5c3c:	e003      	b.n	5c46 <_puts_r+0x3e>
    5c3e:	4b22      	ldr	r3, [pc, #136]	; (5cc8 <_puts_r+0xc0>)
    5c40:	429c      	cmp	r4, r3
    5c42:	d100      	bne.n	5c46 <_puts_r+0x3e>
    5c44:	68ec      	ldr	r4, [r5, #12]
    5c46:	89a3      	ldrh	r3, [r4, #12]
    5c48:	071b      	lsls	r3, r3, #28
    5c4a:	d502      	bpl.n	5c52 <_puts_r+0x4a>
    5c4c:	6923      	ldr	r3, [r4, #16]
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d111      	bne.n	5c76 <_puts_r+0x6e>
    5c52:	0021      	movs	r1, r4
    5c54:	0028      	movs	r0, r5
    5c56:	f000 f95d 	bl	5f14 <__swsetup_r>
    5c5a:	2800      	cmp	r0, #0
    5c5c:	d00b      	beq.n	5c76 <_puts_r+0x6e>
    5c5e:	2001      	movs	r0, #1
    5c60:	4240      	negs	r0, r0
    5c62:	e02b      	b.n	5cbc <_puts_r+0xb4>
    5c64:	3b01      	subs	r3, #1
    5c66:	3601      	adds	r6, #1
    5c68:	60a3      	str	r3, [r4, #8]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	db08      	blt.n	5c80 <_puts_r+0x78>
    5c6e:	6823      	ldr	r3, [r4, #0]
    5c70:	1c5a      	adds	r2, r3, #1
    5c72:	6022      	str	r2, [r4, #0]
    5c74:	7019      	strb	r1, [r3, #0]
    5c76:	7831      	ldrb	r1, [r6, #0]
    5c78:	68a3      	ldr	r3, [r4, #8]
    5c7a:	2900      	cmp	r1, #0
    5c7c:	d1f2      	bne.n	5c64 <_puts_r+0x5c>
    5c7e:	e00b      	b.n	5c98 <_puts_r+0x90>
    5c80:	69a2      	ldr	r2, [r4, #24]
    5c82:	4293      	cmp	r3, r2
    5c84:	db01      	blt.n	5c8a <_puts_r+0x82>
    5c86:	290a      	cmp	r1, #10
    5c88:	d1f1      	bne.n	5c6e <_puts_r+0x66>
    5c8a:	0022      	movs	r2, r4
    5c8c:	0028      	movs	r0, r5
    5c8e:	f000 f8e9 	bl	5e64 <__swbuf_r>
    5c92:	1c43      	adds	r3, r0, #1
    5c94:	d1ef      	bne.n	5c76 <_puts_r+0x6e>
    5c96:	e7e2      	b.n	5c5e <_puts_r+0x56>
    5c98:	3b01      	subs	r3, #1
    5c9a:	60a3      	str	r3, [r4, #8]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	da08      	bge.n	5cb2 <_puts_r+0xaa>
    5ca0:	0022      	movs	r2, r4
    5ca2:	310a      	adds	r1, #10
    5ca4:	0028      	movs	r0, r5
    5ca6:	f000 f8dd 	bl	5e64 <__swbuf_r>
    5caa:	1c43      	adds	r3, r0, #1
    5cac:	d0d7      	beq.n	5c5e <_puts_r+0x56>
    5cae:	200a      	movs	r0, #10
    5cb0:	e004      	b.n	5cbc <_puts_r+0xb4>
    5cb2:	200a      	movs	r0, #10
    5cb4:	6823      	ldr	r3, [r4, #0]
    5cb6:	1c5a      	adds	r2, r3, #1
    5cb8:	6022      	str	r2, [r4, #0]
    5cba:	7018      	strb	r0, [r3, #0]
    5cbc:	bd70      	pop	{r4, r5, r6, pc}
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	000080b4 	.word	0x000080b4
    5cc4:	000080d4 	.word	0x000080d4
    5cc8:	000080f4 	.word	0x000080f4

00005ccc <puts>:
    5ccc:	b510      	push	{r4, lr}
    5cce:	4b03      	ldr	r3, [pc, #12]	; (5cdc <puts+0x10>)
    5cd0:	0001      	movs	r1, r0
    5cd2:	6818      	ldr	r0, [r3, #0]
    5cd4:	f7ff ff98 	bl	5c08 <_puts_r>
    5cd8:	bd10      	pop	{r4, pc}
    5cda:	46c0      	nop			; (mov r8, r8)
    5cdc:	20000074 	.word	0x20000074

00005ce0 <setbuf>:
    5ce0:	424a      	negs	r2, r1
    5ce2:	414a      	adcs	r2, r1
    5ce4:	2380      	movs	r3, #128	; 0x80
    5ce6:	b510      	push	{r4, lr}
    5ce8:	0052      	lsls	r2, r2, #1
    5cea:	00db      	lsls	r3, r3, #3
    5cec:	f000 f802 	bl	5cf4 <setvbuf>
    5cf0:	bd10      	pop	{r4, pc}
	...

00005cf4 <setvbuf>:
    5cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cf6:	001d      	movs	r5, r3
    5cf8:	4b51      	ldr	r3, [pc, #324]	; (5e40 <setvbuf+0x14c>)
    5cfa:	b085      	sub	sp, #20
    5cfc:	681e      	ldr	r6, [r3, #0]
    5cfe:	0004      	movs	r4, r0
    5d00:	000f      	movs	r7, r1
    5d02:	9200      	str	r2, [sp, #0]
    5d04:	2e00      	cmp	r6, #0
    5d06:	d005      	beq.n	5d14 <setvbuf+0x20>
    5d08:	69b3      	ldr	r3, [r6, #24]
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d102      	bne.n	5d14 <setvbuf+0x20>
    5d0e:	0030      	movs	r0, r6
    5d10:	f000 fa6a 	bl	61e8 <__sinit>
    5d14:	4b4b      	ldr	r3, [pc, #300]	; (5e44 <setvbuf+0x150>)
    5d16:	429c      	cmp	r4, r3
    5d18:	d101      	bne.n	5d1e <setvbuf+0x2a>
    5d1a:	6874      	ldr	r4, [r6, #4]
    5d1c:	e008      	b.n	5d30 <setvbuf+0x3c>
    5d1e:	4b4a      	ldr	r3, [pc, #296]	; (5e48 <setvbuf+0x154>)
    5d20:	429c      	cmp	r4, r3
    5d22:	d101      	bne.n	5d28 <setvbuf+0x34>
    5d24:	68b4      	ldr	r4, [r6, #8]
    5d26:	e003      	b.n	5d30 <setvbuf+0x3c>
    5d28:	4b48      	ldr	r3, [pc, #288]	; (5e4c <setvbuf+0x158>)
    5d2a:	429c      	cmp	r4, r3
    5d2c:	d100      	bne.n	5d30 <setvbuf+0x3c>
    5d2e:	68f4      	ldr	r4, [r6, #12]
    5d30:	9b00      	ldr	r3, [sp, #0]
    5d32:	2b02      	cmp	r3, #2
    5d34:	d005      	beq.n	5d42 <setvbuf+0x4e>
    5d36:	2b01      	cmp	r3, #1
    5d38:	d900      	bls.n	5d3c <setvbuf+0x48>
    5d3a:	e07c      	b.n	5e36 <setvbuf+0x142>
    5d3c:	2d00      	cmp	r5, #0
    5d3e:	da00      	bge.n	5d42 <setvbuf+0x4e>
    5d40:	e079      	b.n	5e36 <setvbuf+0x142>
    5d42:	0021      	movs	r1, r4
    5d44:	0030      	movs	r0, r6
    5d46:	f000 f9e1 	bl	610c <_fflush_r>
    5d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5d4c:	2900      	cmp	r1, #0
    5d4e:	d008      	beq.n	5d62 <setvbuf+0x6e>
    5d50:	0023      	movs	r3, r4
    5d52:	3344      	adds	r3, #68	; 0x44
    5d54:	4299      	cmp	r1, r3
    5d56:	d002      	beq.n	5d5e <setvbuf+0x6a>
    5d58:	0030      	movs	r0, r6
    5d5a:	f000 fb47 	bl	63ec <_free_r>
    5d5e:	2300      	movs	r3, #0
    5d60:	6363      	str	r3, [r4, #52]	; 0x34
    5d62:	2300      	movs	r3, #0
    5d64:	61a3      	str	r3, [r4, #24]
    5d66:	6063      	str	r3, [r4, #4]
    5d68:	89a3      	ldrh	r3, [r4, #12]
    5d6a:	061b      	lsls	r3, r3, #24
    5d6c:	d503      	bpl.n	5d76 <setvbuf+0x82>
    5d6e:	6921      	ldr	r1, [r4, #16]
    5d70:	0030      	movs	r0, r6
    5d72:	f000 fb3b 	bl	63ec <_free_r>
    5d76:	89a2      	ldrh	r2, [r4, #12]
    5d78:	4b35      	ldr	r3, [pc, #212]	; (5e50 <setvbuf+0x15c>)
    5d7a:	4013      	ands	r3, r2
    5d7c:	81a3      	strh	r3, [r4, #12]
    5d7e:	9b00      	ldr	r3, [sp, #0]
    5d80:	2b02      	cmp	r3, #2
    5d82:	d021      	beq.n	5dc8 <setvbuf+0xd4>
    5d84:	ab03      	add	r3, sp, #12
    5d86:	aa02      	add	r2, sp, #8
    5d88:	0021      	movs	r1, r4
    5d8a:	0030      	movs	r0, r6
    5d8c:	f000 fac0 	bl	6310 <__swhatbuf_r>
    5d90:	89a3      	ldrh	r3, [r4, #12]
    5d92:	4318      	orrs	r0, r3
    5d94:	81a0      	strh	r0, [r4, #12]
    5d96:	2d00      	cmp	r5, #0
    5d98:	d101      	bne.n	5d9e <setvbuf+0xaa>
    5d9a:	9d02      	ldr	r5, [sp, #8]
    5d9c:	e001      	b.n	5da2 <setvbuf+0xae>
    5d9e:	2f00      	cmp	r7, #0
    5da0:	d125      	bne.n	5dee <setvbuf+0xfa>
    5da2:	0028      	movs	r0, r5
    5da4:	f000 fb18 	bl	63d8 <malloc>
    5da8:	9501      	str	r5, [sp, #4]
    5daa:	1e07      	subs	r7, r0, #0
    5dac:	d11a      	bne.n	5de4 <setvbuf+0xf0>
    5dae:	9b02      	ldr	r3, [sp, #8]
    5db0:	9301      	str	r3, [sp, #4]
    5db2:	42ab      	cmp	r3, r5
    5db4:	d102      	bne.n	5dbc <setvbuf+0xc8>
    5db6:	2001      	movs	r0, #1
    5db8:	4240      	negs	r0, r0
    5dba:	e006      	b.n	5dca <setvbuf+0xd6>
    5dbc:	9801      	ldr	r0, [sp, #4]
    5dbe:	f000 fb0b 	bl	63d8 <malloc>
    5dc2:	1e07      	subs	r7, r0, #0
    5dc4:	d10e      	bne.n	5de4 <setvbuf+0xf0>
    5dc6:	e7f6      	b.n	5db6 <setvbuf+0xc2>
    5dc8:	2000      	movs	r0, #0
    5dca:	2202      	movs	r2, #2
    5dcc:	89a3      	ldrh	r3, [r4, #12]
    5dce:	4313      	orrs	r3, r2
    5dd0:	81a3      	strh	r3, [r4, #12]
    5dd2:	2300      	movs	r3, #0
    5dd4:	60a3      	str	r3, [r4, #8]
    5dd6:	0023      	movs	r3, r4
    5dd8:	3347      	adds	r3, #71	; 0x47
    5dda:	6023      	str	r3, [r4, #0]
    5ddc:	6123      	str	r3, [r4, #16]
    5dde:	2301      	movs	r3, #1
    5de0:	6163      	str	r3, [r4, #20]
    5de2:	e02a      	b.n	5e3a <setvbuf+0x146>
    5de4:	2280      	movs	r2, #128	; 0x80
    5de6:	89a3      	ldrh	r3, [r4, #12]
    5de8:	9d01      	ldr	r5, [sp, #4]
    5dea:	4313      	orrs	r3, r2
    5dec:	81a3      	strh	r3, [r4, #12]
    5dee:	69b3      	ldr	r3, [r6, #24]
    5df0:	2b00      	cmp	r3, #0
    5df2:	d102      	bne.n	5dfa <setvbuf+0x106>
    5df4:	0030      	movs	r0, r6
    5df6:	f000 f9f7 	bl	61e8 <__sinit>
    5dfa:	9b00      	ldr	r3, [sp, #0]
    5dfc:	2b01      	cmp	r3, #1
    5dfe:	d103      	bne.n	5e08 <setvbuf+0x114>
    5e00:	89a3      	ldrh	r3, [r4, #12]
    5e02:	9a00      	ldr	r2, [sp, #0]
    5e04:	431a      	orrs	r2, r3
    5e06:	81a2      	strh	r2, [r4, #12]
    5e08:	2308      	movs	r3, #8
    5e0a:	89a2      	ldrh	r2, [r4, #12]
    5e0c:	6027      	str	r7, [r4, #0]
    5e0e:	4013      	ands	r3, r2
    5e10:	6127      	str	r7, [r4, #16]
    5e12:	6165      	str	r5, [r4, #20]
    5e14:	1e18      	subs	r0, r3, #0
    5e16:	d00c      	beq.n	5e32 <setvbuf+0x13e>
    5e18:	2301      	movs	r3, #1
    5e1a:	401a      	ands	r2, r3
    5e1c:	2300      	movs	r3, #0
    5e1e:	1e10      	subs	r0, r2, #0
    5e20:	4298      	cmp	r0, r3
    5e22:	d004      	beq.n	5e2e <setvbuf+0x13a>
    5e24:	426d      	negs	r5, r5
    5e26:	60a3      	str	r3, [r4, #8]
    5e28:	61a5      	str	r5, [r4, #24]
    5e2a:	0018      	movs	r0, r3
    5e2c:	e005      	b.n	5e3a <setvbuf+0x146>
    5e2e:	60a5      	str	r5, [r4, #8]
    5e30:	e003      	b.n	5e3a <setvbuf+0x146>
    5e32:	60a3      	str	r3, [r4, #8]
    5e34:	e001      	b.n	5e3a <setvbuf+0x146>
    5e36:	2001      	movs	r0, #1
    5e38:	4240      	negs	r0, r0
    5e3a:	b005      	add	sp, #20
    5e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e3e:	46c0      	nop			; (mov r8, r8)
    5e40:	20000074 	.word	0x20000074
    5e44:	000080b4 	.word	0x000080b4
    5e48:	000080d4 	.word	0x000080d4
    5e4c:	000080f4 	.word	0x000080f4
    5e50:	fffff35c 	.word	0xfffff35c

00005e54 <strlen>:
    5e54:	2300      	movs	r3, #0
    5e56:	5cc2      	ldrb	r2, [r0, r3]
    5e58:	3301      	adds	r3, #1
    5e5a:	2a00      	cmp	r2, #0
    5e5c:	d1fb      	bne.n	5e56 <strlen+0x2>
    5e5e:	1e58      	subs	r0, r3, #1
    5e60:	4770      	bx	lr
	...

00005e64 <__swbuf_r>:
    5e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e66:	0005      	movs	r5, r0
    5e68:	000f      	movs	r7, r1
    5e6a:	0014      	movs	r4, r2
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d004      	beq.n	5e7a <__swbuf_r+0x16>
    5e70:	6983      	ldr	r3, [r0, #24]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d101      	bne.n	5e7a <__swbuf_r+0x16>
    5e76:	f000 f9b7 	bl	61e8 <__sinit>
    5e7a:	4b23      	ldr	r3, [pc, #140]	; (5f08 <__swbuf_r+0xa4>)
    5e7c:	429c      	cmp	r4, r3
    5e7e:	d101      	bne.n	5e84 <__swbuf_r+0x20>
    5e80:	686c      	ldr	r4, [r5, #4]
    5e82:	e008      	b.n	5e96 <__swbuf_r+0x32>
    5e84:	4b21      	ldr	r3, [pc, #132]	; (5f0c <__swbuf_r+0xa8>)
    5e86:	429c      	cmp	r4, r3
    5e88:	d101      	bne.n	5e8e <__swbuf_r+0x2a>
    5e8a:	68ac      	ldr	r4, [r5, #8]
    5e8c:	e003      	b.n	5e96 <__swbuf_r+0x32>
    5e8e:	4b20      	ldr	r3, [pc, #128]	; (5f10 <__swbuf_r+0xac>)
    5e90:	429c      	cmp	r4, r3
    5e92:	d100      	bne.n	5e96 <__swbuf_r+0x32>
    5e94:	68ec      	ldr	r4, [r5, #12]
    5e96:	69a3      	ldr	r3, [r4, #24]
    5e98:	60a3      	str	r3, [r4, #8]
    5e9a:	89a3      	ldrh	r3, [r4, #12]
    5e9c:	071b      	lsls	r3, r3, #28
    5e9e:	d50a      	bpl.n	5eb6 <__swbuf_r+0x52>
    5ea0:	6923      	ldr	r3, [r4, #16]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d007      	beq.n	5eb6 <__swbuf_r+0x52>
    5ea6:	6823      	ldr	r3, [r4, #0]
    5ea8:	6922      	ldr	r2, [r4, #16]
    5eaa:	b2fe      	uxtb	r6, r7
    5eac:	1a98      	subs	r0, r3, r2
    5eae:	6963      	ldr	r3, [r4, #20]
    5eb0:	4298      	cmp	r0, r3
    5eb2:	db0f      	blt.n	5ed4 <__swbuf_r+0x70>
    5eb4:	e008      	b.n	5ec8 <__swbuf_r+0x64>
    5eb6:	0021      	movs	r1, r4
    5eb8:	0028      	movs	r0, r5
    5eba:	f000 f82b 	bl	5f14 <__swsetup_r>
    5ebe:	2800      	cmp	r0, #0
    5ec0:	d0f1      	beq.n	5ea6 <__swbuf_r+0x42>
    5ec2:	2001      	movs	r0, #1
    5ec4:	4240      	negs	r0, r0
    5ec6:	e01d      	b.n	5f04 <__swbuf_r+0xa0>
    5ec8:	0021      	movs	r1, r4
    5eca:	0028      	movs	r0, r5
    5ecc:	f000 f91e 	bl	610c <_fflush_r>
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d1f6      	bne.n	5ec2 <__swbuf_r+0x5e>
    5ed4:	68a3      	ldr	r3, [r4, #8]
    5ed6:	3001      	adds	r0, #1
    5ed8:	3b01      	subs	r3, #1
    5eda:	60a3      	str	r3, [r4, #8]
    5edc:	6823      	ldr	r3, [r4, #0]
    5ede:	1c5a      	adds	r2, r3, #1
    5ee0:	6022      	str	r2, [r4, #0]
    5ee2:	701f      	strb	r7, [r3, #0]
    5ee4:	6963      	ldr	r3, [r4, #20]
    5ee6:	4298      	cmp	r0, r3
    5ee8:	d005      	beq.n	5ef6 <__swbuf_r+0x92>
    5eea:	89a3      	ldrh	r3, [r4, #12]
    5eec:	0030      	movs	r0, r6
    5eee:	07db      	lsls	r3, r3, #31
    5ef0:	d508      	bpl.n	5f04 <__swbuf_r+0xa0>
    5ef2:	2e0a      	cmp	r6, #10
    5ef4:	d106      	bne.n	5f04 <__swbuf_r+0xa0>
    5ef6:	0021      	movs	r1, r4
    5ef8:	0028      	movs	r0, r5
    5efa:	f000 f907 	bl	610c <_fflush_r>
    5efe:	2800      	cmp	r0, #0
    5f00:	d1df      	bne.n	5ec2 <__swbuf_r+0x5e>
    5f02:	0030      	movs	r0, r6
    5f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f06:	46c0      	nop			; (mov r8, r8)
    5f08:	000080b4 	.word	0x000080b4
    5f0c:	000080d4 	.word	0x000080d4
    5f10:	000080f4 	.word	0x000080f4

00005f14 <__swsetup_r>:
    5f14:	4b36      	ldr	r3, [pc, #216]	; (5ff0 <__swsetup_r+0xdc>)
    5f16:	b570      	push	{r4, r5, r6, lr}
    5f18:	681d      	ldr	r5, [r3, #0]
    5f1a:	0006      	movs	r6, r0
    5f1c:	000c      	movs	r4, r1
    5f1e:	2d00      	cmp	r5, #0
    5f20:	d005      	beq.n	5f2e <__swsetup_r+0x1a>
    5f22:	69ab      	ldr	r3, [r5, #24]
    5f24:	2b00      	cmp	r3, #0
    5f26:	d102      	bne.n	5f2e <__swsetup_r+0x1a>
    5f28:	0028      	movs	r0, r5
    5f2a:	f000 f95d 	bl	61e8 <__sinit>
    5f2e:	4b31      	ldr	r3, [pc, #196]	; (5ff4 <__swsetup_r+0xe0>)
    5f30:	429c      	cmp	r4, r3
    5f32:	d101      	bne.n	5f38 <__swsetup_r+0x24>
    5f34:	686c      	ldr	r4, [r5, #4]
    5f36:	e008      	b.n	5f4a <__swsetup_r+0x36>
    5f38:	4b2f      	ldr	r3, [pc, #188]	; (5ff8 <__swsetup_r+0xe4>)
    5f3a:	429c      	cmp	r4, r3
    5f3c:	d101      	bne.n	5f42 <__swsetup_r+0x2e>
    5f3e:	68ac      	ldr	r4, [r5, #8]
    5f40:	e003      	b.n	5f4a <__swsetup_r+0x36>
    5f42:	4b2e      	ldr	r3, [pc, #184]	; (5ffc <__swsetup_r+0xe8>)
    5f44:	429c      	cmp	r4, r3
    5f46:	d100      	bne.n	5f4a <__swsetup_r+0x36>
    5f48:	68ec      	ldr	r4, [r5, #12]
    5f4a:	220c      	movs	r2, #12
    5f4c:	5ea3      	ldrsh	r3, [r4, r2]
    5f4e:	b29a      	uxth	r2, r3
    5f50:	0711      	lsls	r1, r2, #28
    5f52:	d423      	bmi.n	5f9c <__swsetup_r+0x88>
    5f54:	06d1      	lsls	r1, r2, #27
    5f56:	d407      	bmi.n	5f68 <__swsetup_r+0x54>
    5f58:	2209      	movs	r2, #9
    5f5a:	2001      	movs	r0, #1
    5f5c:	6032      	str	r2, [r6, #0]
    5f5e:	3237      	adds	r2, #55	; 0x37
    5f60:	4313      	orrs	r3, r2
    5f62:	81a3      	strh	r3, [r4, #12]
    5f64:	4240      	negs	r0, r0
    5f66:	e042      	b.n	5fee <__swsetup_r+0xda>
    5f68:	0753      	lsls	r3, r2, #29
    5f6a:	d513      	bpl.n	5f94 <__swsetup_r+0x80>
    5f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5f6e:	2900      	cmp	r1, #0
    5f70:	d008      	beq.n	5f84 <__swsetup_r+0x70>
    5f72:	0023      	movs	r3, r4
    5f74:	3344      	adds	r3, #68	; 0x44
    5f76:	4299      	cmp	r1, r3
    5f78:	d002      	beq.n	5f80 <__swsetup_r+0x6c>
    5f7a:	0030      	movs	r0, r6
    5f7c:	f000 fa36 	bl	63ec <_free_r>
    5f80:	2300      	movs	r3, #0
    5f82:	6363      	str	r3, [r4, #52]	; 0x34
    5f84:	2224      	movs	r2, #36	; 0x24
    5f86:	89a3      	ldrh	r3, [r4, #12]
    5f88:	4393      	bics	r3, r2
    5f8a:	81a3      	strh	r3, [r4, #12]
    5f8c:	2300      	movs	r3, #0
    5f8e:	6063      	str	r3, [r4, #4]
    5f90:	6923      	ldr	r3, [r4, #16]
    5f92:	6023      	str	r3, [r4, #0]
    5f94:	2208      	movs	r2, #8
    5f96:	89a3      	ldrh	r3, [r4, #12]
    5f98:	4313      	orrs	r3, r2
    5f9a:	81a3      	strh	r3, [r4, #12]
    5f9c:	6923      	ldr	r3, [r4, #16]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d10b      	bne.n	5fba <__swsetup_r+0xa6>
    5fa2:	23a0      	movs	r3, #160	; 0xa0
    5fa4:	89a2      	ldrh	r2, [r4, #12]
    5fa6:	009b      	lsls	r3, r3, #2
    5fa8:	4013      	ands	r3, r2
    5faa:	2280      	movs	r2, #128	; 0x80
    5fac:	0092      	lsls	r2, r2, #2
    5fae:	4293      	cmp	r3, r2
    5fb0:	d003      	beq.n	5fba <__swsetup_r+0xa6>
    5fb2:	0021      	movs	r1, r4
    5fb4:	0030      	movs	r0, r6
    5fb6:	f000 f9d1 	bl	635c <__smakebuf_r>
    5fba:	2301      	movs	r3, #1
    5fbc:	89a2      	ldrh	r2, [r4, #12]
    5fbe:	4013      	ands	r3, r2
    5fc0:	d005      	beq.n	5fce <__swsetup_r+0xba>
    5fc2:	2300      	movs	r3, #0
    5fc4:	60a3      	str	r3, [r4, #8]
    5fc6:	6963      	ldr	r3, [r4, #20]
    5fc8:	425b      	negs	r3, r3
    5fca:	61a3      	str	r3, [r4, #24]
    5fcc:	e003      	b.n	5fd6 <__swsetup_r+0xc2>
    5fce:	0792      	lsls	r2, r2, #30
    5fd0:	d400      	bmi.n	5fd4 <__swsetup_r+0xc0>
    5fd2:	6963      	ldr	r3, [r4, #20]
    5fd4:	60a3      	str	r3, [r4, #8]
    5fd6:	2000      	movs	r0, #0
    5fd8:	6923      	ldr	r3, [r4, #16]
    5fda:	4283      	cmp	r3, r0
    5fdc:	d107      	bne.n	5fee <__swsetup_r+0xda>
    5fde:	220c      	movs	r2, #12
    5fe0:	5ea3      	ldrsh	r3, [r4, r2]
    5fe2:	061a      	lsls	r2, r3, #24
    5fe4:	d503      	bpl.n	5fee <__swsetup_r+0xda>
    5fe6:	2240      	movs	r2, #64	; 0x40
    5fe8:	4313      	orrs	r3, r2
    5fea:	81a3      	strh	r3, [r4, #12]
    5fec:	3801      	subs	r0, #1
    5fee:	bd70      	pop	{r4, r5, r6, pc}
    5ff0:	20000074 	.word	0x20000074
    5ff4:	000080b4 	.word	0x000080b4
    5ff8:	000080d4 	.word	0x000080d4
    5ffc:	000080f4 	.word	0x000080f4

00006000 <__sflush_r>:
    6000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6002:	898a      	ldrh	r2, [r1, #12]
    6004:	0005      	movs	r5, r0
    6006:	000c      	movs	r4, r1
    6008:	0713      	lsls	r3, r2, #28
    600a:	d45a      	bmi.n	60c2 <__sflush_r+0xc2>
    600c:	684b      	ldr	r3, [r1, #4]
    600e:	2b00      	cmp	r3, #0
    6010:	dc02      	bgt.n	6018 <__sflush_r+0x18>
    6012:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6014:	2b00      	cmp	r3, #0
    6016:	dd19      	ble.n	604c <__sflush_r+0x4c>
    6018:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    601a:	2f00      	cmp	r7, #0
    601c:	d016      	beq.n	604c <__sflush_r+0x4c>
    601e:	2300      	movs	r3, #0
    6020:	682e      	ldr	r6, [r5, #0]
    6022:	602b      	str	r3, [r5, #0]
    6024:	2380      	movs	r3, #128	; 0x80
    6026:	015b      	lsls	r3, r3, #5
    6028:	401a      	ands	r2, r3
    602a:	d001      	beq.n	6030 <__sflush_r+0x30>
    602c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    602e:	e014      	b.n	605a <__sflush_r+0x5a>
    6030:	2301      	movs	r3, #1
    6032:	6a21      	ldr	r1, [r4, #32]
    6034:	0028      	movs	r0, r5
    6036:	47b8      	blx	r7
    6038:	1c43      	adds	r3, r0, #1
    603a:	d10e      	bne.n	605a <__sflush_r+0x5a>
    603c:	682b      	ldr	r3, [r5, #0]
    603e:	2b00      	cmp	r3, #0
    6040:	d00b      	beq.n	605a <__sflush_r+0x5a>
    6042:	2b1d      	cmp	r3, #29
    6044:	d001      	beq.n	604a <__sflush_r+0x4a>
    6046:	2b16      	cmp	r3, #22
    6048:	d102      	bne.n	6050 <__sflush_r+0x50>
    604a:	602e      	str	r6, [r5, #0]
    604c:	2000      	movs	r0, #0
    604e:	e05a      	b.n	6106 <__sflush_r+0x106>
    6050:	2240      	movs	r2, #64	; 0x40
    6052:	89a3      	ldrh	r3, [r4, #12]
    6054:	4313      	orrs	r3, r2
    6056:	81a3      	strh	r3, [r4, #12]
    6058:	e055      	b.n	6106 <__sflush_r+0x106>
    605a:	89a3      	ldrh	r3, [r4, #12]
    605c:	075b      	lsls	r3, r3, #29
    605e:	d506      	bpl.n	606e <__sflush_r+0x6e>
    6060:	6863      	ldr	r3, [r4, #4]
    6062:	1ac0      	subs	r0, r0, r3
    6064:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6066:	2b00      	cmp	r3, #0
    6068:	d001      	beq.n	606e <__sflush_r+0x6e>
    606a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    606c:	1ac0      	subs	r0, r0, r3
    606e:	2300      	movs	r3, #0
    6070:	0002      	movs	r2, r0
    6072:	6a21      	ldr	r1, [r4, #32]
    6074:	0028      	movs	r0, r5
    6076:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6078:	47b8      	blx	r7
    607a:	89a3      	ldrh	r3, [r4, #12]
    607c:	1c42      	adds	r2, r0, #1
    607e:	d106      	bne.n	608e <__sflush_r+0x8e>
    6080:	6829      	ldr	r1, [r5, #0]
    6082:	291d      	cmp	r1, #29
    6084:	d83a      	bhi.n	60fc <__sflush_r+0xfc>
    6086:	4a20      	ldr	r2, [pc, #128]	; (6108 <__sflush_r+0x108>)
    6088:	40ca      	lsrs	r2, r1
    608a:	07d2      	lsls	r2, r2, #31
    608c:	d536      	bpl.n	60fc <__sflush_r+0xfc>
    608e:	2200      	movs	r2, #0
    6090:	6062      	str	r2, [r4, #4]
    6092:	6922      	ldr	r2, [r4, #16]
    6094:	6022      	str	r2, [r4, #0]
    6096:	04db      	lsls	r3, r3, #19
    6098:	d505      	bpl.n	60a6 <__sflush_r+0xa6>
    609a:	1c43      	adds	r3, r0, #1
    609c:	d102      	bne.n	60a4 <__sflush_r+0xa4>
    609e:	682b      	ldr	r3, [r5, #0]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d100      	bne.n	60a6 <__sflush_r+0xa6>
    60a4:	6560      	str	r0, [r4, #84]	; 0x54
    60a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    60a8:	602e      	str	r6, [r5, #0]
    60aa:	2900      	cmp	r1, #0
    60ac:	d0ce      	beq.n	604c <__sflush_r+0x4c>
    60ae:	0023      	movs	r3, r4
    60b0:	3344      	adds	r3, #68	; 0x44
    60b2:	4299      	cmp	r1, r3
    60b4:	d002      	beq.n	60bc <__sflush_r+0xbc>
    60b6:	0028      	movs	r0, r5
    60b8:	f000 f998 	bl	63ec <_free_r>
    60bc:	2000      	movs	r0, #0
    60be:	6360      	str	r0, [r4, #52]	; 0x34
    60c0:	e021      	b.n	6106 <__sflush_r+0x106>
    60c2:	690f      	ldr	r7, [r1, #16]
    60c4:	2f00      	cmp	r7, #0
    60c6:	d0c1      	beq.n	604c <__sflush_r+0x4c>
    60c8:	680b      	ldr	r3, [r1, #0]
    60ca:	600f      	str	r7, [r1, #0]
    60cc:	1bdb      	subs	r3, r3, r7
    60ce:	9301      	str	r3, [sp, #4]
    60d0:	2300      	movs	r3, #0
    60d2:	0792      	lsls	r2, r2, #30
    60d4:	d100      	bne.n	60d8 <__sflush_r+0xd8>
    60d6:	694b      	ldr	r3, [r1, #20]
    60d8:	60a3      	str	r3, [r4, #8]
    60da:	e003      	b.n	60e4 <__sflush_r+0xe4>
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	183f      	adds	r7, r7, r0
    60e0:	1a1b      	subs	r3, r3, r0
    60e2:	9301      	str	r3, [sp, #4]
    60e4:	9b01      	ldr	r3, [sp, #4]
    60e6:	2b00      	cmp	r3, #0
    60e8:	ddb0      	ble.n	604c <__sflush_r+0x4c>
    60ea:	9b01      	ldr	r3, [sp, #4]
    60ec:	003a      	movs	r2, r7
    60ee:	6a21      	ldr	r1, [r4, #32]
    60f0:	0028      	movs	r0, r5
    60f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    60f4:	47b0      	blx	r6
    60f6:	2800      	cmp	r0, #0
    60f8:	dcf0      	bgt.n	60dc <__sflush_r+0xdc>
    60fa:	89a3      	ldrh	r3, [r4, #12]
    60fc:	2240      	movs	r2, #64	; 0x40
    60fe:	2001      	movs	r0, #1
    6100:	4313      	orrs	r3, r2
    6102:	81a3      	strh	r3, [r4, #12]
    6104:	4240      	negs	r0, r0
    6106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6108:	20400001 	.word	0x20400001

0000610c <_fflush_r>:
    610c:	690b      	ldr	r3, [r1, #16]
    610e:	b570      	push	{r4, r5, r6, lr}
    6110:	0005      	movs	r5, r0
    6112:	000c      	movs	r4, r1
    6114:	2b00      	cmp	r3, #0
    6116:	d101      	bne.n	611c <_fflush_r+0x10>
    6118:	2000      	movs	r0, #0
    611a:	e01c      	b.n	6156 <_fflush_r+0x4a>
    611c:	2800      	cmp	r0, #0
    611e:	d004      	beq.n	612a <_fflush_r+0x1e>
    6120:	6983      	ldr	r3, [r0, #24]
    6122:	2b00      	cmp	r3, #0
    6124:	d101      	bne.n	612a <_fflush_r+0x1e>
    6126:	f000 f85f 	bl	61e8 <__sinit>
    612a:	4b0b      	ldr	r3, [pc, #44]	; (6158 <_fflush_r+0x4c>)
    612c:	429c      	cmp	r4, r3
    612e:	d101      	bne.n	6134 <_fflush_r+0x28>
    6130:	686c      	ldr	r4, [r5, #4]
    6132:	e008      	b.n	6146 <_fflush_r+0x3a>
    6134:	4b09      	ldr	r3, [pc, #36]	; (615c <_fflush_r+0x50>)
    6136:	429c      	cmp	r4, r3
    6138:	d101      	bne.n	613e <_fflush_r+0x32>
    613a:	68ac      	ldr	r4, [r5, #8]
    613c:	e003      	b.n	6146 <_fflush_r+0x3a>
    613e:	4b08      	ldr	r3, [pc, #32]	; (6160 <_fflush_r+0x54>)
    6140:	429c      	cmp	r4, r3
    6142:	d100      	bne.n	6146 <_fflush_r+0x3a>
    6144:	68ec      	ldr	r4, [r5, #12]
    6146:	220c      	movs	r2, #12
    6148:	5ea3      	ldrsh	r3, [r4, r2]
    614a:	2b00      	cmp	r3, #0
    614c:	d0e4      	beq.n	6118 <_fflush_r+0xc>
    614e:	0021      	movs	r1, r4
    6150:	0028      	movs	r0, r5
    6152:	f7ff ff55 	bl	6000 <__sflush_r>
    6156:	bd70      	pop	{r4, r5, r6, pc}
    6158:	000080b4 	.word	0x000080b4
    615c:	000080d4 	.word	0x000080d4
    6160:	000080f4 	.word	0x000080f4

00006164 <_cleanup_r>:
    6164:	b510      	push	{r4, lr}
    6166:	4902      	ldr	r1, [pc, #8]	; (6170 <_cleanup_r+0xc>)
    6168:	f000 f8b0 	bl	62cc <_fwalk_reent>
    616c:	bd10      	pop	{r4, pc}
    616e:	46c0      	nop			; (mov r8, r8)
    6170:	0000610d 	.word	0x0000610d

00006174 <std.isra.0>:
    6174:	2300      	movs	r3, #0
    6176:	b510      	push	{r4, lr}
    6178:	0004      	movs	r4, r0
    617a:	6003      	str	r3, [r0, #0]
    617c:	6043      	str	r3, [r0, #4]
    617e:	6083      	str	r3, [r0, #8]
    6180:	8181      	strh	r1, [r0, #12]
    6182:	6643      	str	r3, [r0, #100]	; 0x64
    6184:	81c2      	strh	r2, [r0, #14]
    6186:	6103      	str	r3, [r0, #16]
    6188:	6143      	str	r3, [r0, #20]
    618a:	6183      	str	r3, [r0, #24]
    618c:	0019      	movs	r1, r3
    618e:	2208      	movs	r2, #8
    6190:	305c      	adds	r0, #92	; 0x5c
    6192:	f7ff fd02 	bl	5b9a <memset>
    6196:	4b05      	ldr	r3, [pc, #20]	; (61ac <std.isra.0+0x38>)
    6198:	6224      	str	r4, [r4, #32]
    619a:	6263      	str	r3, [r4, #36]	; 0x24
    619c:	4b04      	ldr	r3, [pc, #16]	; (61b0 <std.isra.0+0x3c>)
    619e:	62a3      	str	r3, [r4, #40]	; 0x28
    61a0:	4b04      	ldr	r3, [pc, #16]	; (61b4 <std.isra.0+0x40>)
    61a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    61a4:	4b04      	ldr	r3, [pc, #16]	; (61b8 <std.isra.0+0x44>)
    61a6:	6323      	str	r3, [r4, #48]	; 0x30
    61a8:	bd10      	pop	{r4, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	00006b5d 	.word	0x00006b5d
    61b0:	00006b85 	.word	0x00006b85
    61b4:	00006bbd 	.word	0x00006bbd
    61b8:	00006be9 	.word	0x00006be9

000061bc <__sfmoreglue>:
    61bc:	b570      	push	{r4, r5, r6, lr}
    61be:	2568      	movs	r5, #104	; 0x68
    61c0:	1e4b      	subs	r3, r1, #1
    61c2:	435d      	muls	r5, r3
    61c4:	000e      	movs	r6, r1
    61c6:	0029      	movs	r1, r5
    61c8:	3174      	adds	r1, #116	; 0x74
    61ca:	f000 f955 	bl	6478 <_malloc_r>
    61ce:	1e04      	subs	r4, r0, #0
    61d0:	d008      	beq.n	61e4 <__sfmoreglue+0x28>
    61d2:	2100      	movs	r1, #0
    61d4:	002a      	movs	r2, r5
    61d6:	6001      	str	r1, [r0, #0]
    61d8:	6046      	str	r6, [r0, #4]
    61da:	300c      	adds	r0, #12
    61dc:	60a0      	str	r0, [r4, #8]
    61de:	3268      	adds	r2, #104	; 0x68
    61e0:	f7ff fcdb 	bl	5b9a <memset>
    61e4:	0020      	movs	r0, r4
    61e6:	bd70      	pop	{r4, r5, r6, pc}

000061e8 <__sinit>:
    61e8:	6983      	ldr	r3, [r0, #24]
    61ea:	b513      	push	{r0, r1, r4, lr}
    61ec:	0004      	movs	r4, r0
    61ee:	2b00      	cmp	r3, #0
    61f0:	d128      	bne.n	6244 <__sinit+0x5c>
    61f2:	6483      	str	r3, [r0, #72]	; 0x48
    61f4:	64c3      	str	r3, [r0, #76]	; 0x4c
    61f6:	6503      	str	r3, [r0, #80]	; 0x50
    61f8:	4b13      	ldr	r3, [pc, #76]	; (6248 <__sinit+0x60>)
    61fa:	4a14      	ldr	r2, [pc, #80]	; (624c <__sinit+0x64>)
    61fc:	681b      	ldr	r3, [r3, #0]
    61fe:	6282      	str	r2, [r0, #40]	; 0x28
    6200:	9301      	str	r3, [sp, #4]
    6202:	4298      	cmp	r0, r3
    6204:	d101      	bne.n	620a <__sinit+0x22>
    6206:	2301      	movs	r3, #1
    6208:	6183      	str	r3, [r0, #24]
    620a:	0020      	movs	r0, r4
    620c:	f000 f820 	bl	6250 <__sfp>
    6210:	6060      	str	r0, [r4, #4]
    6212:	0020      	movs	r0, r4
    6214:	f000 f81c 	bl	6250 <__sfp>
    6218:	60a0      	str	r0, [r4, #8]
    621a:	0020      	movs	r0, r4
    621c:	f000 f818 	bl	6250 <__sfp>
    6220:	2200      	movs	r2, #0
    6222:	60e0      	str	r0, [r4, #12]
    6224:	2104      	movs	r1, #4
    6226:	6860      	ldr	r0, [r4, #4]
    6228:	f7ff ffa4 	bl	6174 <std.isra.0>
    622c:	2201      	movs	r2, #1
    622e:	2109      	movs	r1, #9
    6230:	68a0      	ldr	r0, [r4, #8]
    6232:	f7ff ff9f 	bl	6174 <std.isra.0>
    6236:	2202      	movs	r2, #2
    6238:	2112      	movs	r1, #18
    623a:	68e0      	ldr	r0, [r4, #12]
    623c:	f7ff ff9a 	bl	6174 <std.isra.0>
    6240:	2301      	movs	r3, #1
    6242:	61a3      	str	r3, [r4, #24]
    6244:	bd13      	pop	{r0, r1, r4, pc}
    6246:	46c0      	nop			; (mov r8, r8)
    6248:	000080b0 	.word	0x000080b0
    624c:	00006165 	.word	0x00006165

00006250 <__sfp>:
    6250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6252:	4b1d      	ldr	r3, [pc, #116]	; (62c8 <__sfp+0x78>)
    6254:	0006      	movs	r6, r0
    6256:	681d      	ldr	r5, [r3, #0]
    6258:	69ab      	ldr	r3, [r5, #24]
    625a:	2b00      	cmp	r3, #0
    625c:	d102      	bne.n	6264 <__sfp+0x14>
    625e:	0028      	movs	r0, r5
    6260:	f7ff ffc2 	bl	61e8 <__sinit>
    6264:	3548      	adds	r5, #72	; 0x48
    6266:	68ac      	ldr	r4, [r5, #8]
    6268:	686b      	ldr	r3, [r5, #4]
    626a:	3b01      	subs	r3, #1
    626c:	d405      	bmi.n	627a <__sfp+0x2a>
    626e:	220c      	movs	r2, #12
    6270:	5ea7      	ldrsh	r7, [r4, r2]
    6272:	2f00      	cmp	r7, #0
    6274:	d010      	beq.n	6298 <__sfp+0x48>
    6276:	3468      	adds	r4, #104	; 0x68
    6278:	e7f7      	b.n	626a <__sfp+0x1a>
    627a:	682b      	ldr	r3, [r5, #0]
    627c:	2b00      	cmp	r3, #0
    627e:	d001      	beq.n	6284 <__sfp+0x34>
    6280:	682d      	ldr	r5, [r5, #0]
    6282:	e7f0      	b.n	6266 <__sfp+0x16>
    6284:	2104      	movs	r1, #4
    6286:	0030      	movs	r0, r6
    6288:	f7ff ff98 	bl	61bc <__sfmoreglue>
    628c:	6028      	str	r0, [r5, #0]
    628e:	2800      	cmp	r0, #0
    6290:	d1f6      	bne.n	6280 <__sfp+0x30>
    6292:	230c      	movs	r3, #12
    6294:	6033      	str	r3, [r6, #0]
    6296:	e016      	b.n	62c6 <__sfp+0x76>
    6298:	2301      	movs	r3, #1
    629a:	0020      	movs	r0, r4
    629c:	425b      	negs	r3, r3
    629e:	81e3      	strh	r3, [r4, #14]
    62a0:	3302      	adds	r3, #2
    62a2:	81a3      	strh	r3, [r4, #12]
    62a4:	6667      	str	r7, [r4, #100]	; 0x64
    62a6:	6027      	str	r7, [r4, #0]
    62a8:	60a7      	str	r7, [r4, #8]
    62aa:	6067      	str	r7, [r4, #4]
    62ac:	6127      	str	r7, [r4, #16]
    62ae:	6167      	str	r7, [r4, #20]
    62b0:	61a7      	str	r7, [r4, #24]
    62b2:	305c      	adds	r0, #92	; 0x5c
    62b4:	2208      	movs	r2, #8
    62b6:	0039      	movs	r1, r7
    62b8:	f7ff fc6f 	bl	5b9a <memset>
    62bc:	0020      	movs	r0, r4
    62be:	6367      	str	r7, [r4, #52]	; 0x34
    62c0:	63a7      	str	r7, [r4, #56]	; 0x38
    62c2:	64a7      	str	r7, [r4, #72]	; 0x48
    62c4:	64e7      	str	r7, [r4, #76]	; 0x4c
    62c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62c8:	000080b0 	.word	0x000080b0

000062cc <_fwalk_reent>:
    62cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    62ce:	0004      	movs	r4, r0
    62d0:	0007      	movs	r7, r0
    62d2:	2600      	movs	r6, #0
    62d4:	9101      	str	r1, [sp, #4]
    62d6:	3448      	adds	r4, #72	; 0x48
    62d8:	2c00      	cmp	r4, #0
    62da:	d016      	beq.n	630a <_fwalk_reent+0x3e>
    62dc:	6863      	ldr	r3, [r4, #4]
    62de:	68a5      	ldr	r5, [r4, #8]
    62e0:	9300      	str	r3, [sp, #0]
    62e2:	9b00      	ldr	r3, [sp, #0]
    62e4:	3b01      	subs	r3, #1
    62e6:	9300      	str	r3, [sp, #0]
    62e8:	d40d      	bmi.n	6306 <_fwalk_reent+0x3a>
    62ea:	89ab      	ldrh	r3, [r5, #12]
    62ec:	2b01      	cmp	r3, #1
    62ee:	d908      	bls.n	6302 <_fwalk_reent+0x36>
    62f0:	220e      	movs	r2, #14
    62f2:	5eab      	ldrsh	r3, [r5, r2]
    62f4:	3301      	adds	r3, #1
    62f6:	d004      	beq.n	6302 <_fwalk_reent+0x36>
    62f8:	0029      	movs	r1, r5
    62fa:	0038      	movs	r0, r7
    62fc:	9b01      	ldr	r3, [sp, #4]
    62fe:	4798      	blx	r3
    6300:	4306      	orrs	r6, r0
    6302:	3568      	adds	r5, #104	; 0x68
    6304:	e7ed      	b.n	62e2 <_fwalk_reent+0x16>
    6306:	6824      	ldr	r4, [r4, #0]
    6308:	e7e6      	b.n	62d8 <_fwalk_reent+0xc>
    630a:	0030      	movs	r0, r6
    630c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006310 <__swhatbuf_r>:
    6310:	b570      	push	{r4, r5, r6, lr}
    6312:	000e      	movs	r6, r1
    6314:	001d      	movs	r5, r3
    6316:	230e      	movs	r3, #14
    6318:	5ec9      	ldrsh	r1, [r1, r3]
    631a:	b090      	sub	sp, #64	; 0x40
    631c:	0014      	movs	r4, r2
    631e:	2900      	cmp	r1, #0
    6320:	da06      	bge.n	6330 <__swhatbuf_r+0x20>
    6322:	2300      	movs	r3, #0
    6324:	602b      	str	r3, [r5, #0]
    6326:	89b3      	ldrh	r3, [r6, #12]
    6328:	061b      	lsls	r3, r3, #24
    632a:	d50f      	bpl.n	634c <__swhatbuf_r+0x3c>
    632c:	2340      	movs	r3, #64	; 0x40
    632e:	e00f      	b.n	6350 <__swhatbuf_r+0x40>
    6330:	aa01      	add	r2, sp, #4
    6332:	f000 fc85 	bl	6c40 <_fstat_r>
    6336:	2800      	cmp	r0, #0
    6338:	dbf3      	blt.n	6322 <__swhatbuf_r+0x12>
    633a:	23f0      	movs	r3, #240	; 0xf0
    633c:	9a02      	ldr	r2, [sp, #8]
    633e:	021b      	lsls	r3, r3, #8
    6340:	4013      	ands	r3, r2
    6342:	4a05      	ldr	r2, [pc, #20]	; (6358 <__swhatbuf_r+0x48>)
    6344:	189b      	adds	r3, r3, r2
    6346:	425a      	negs	r2, r3
    6348:	4153      	adcs	r3, r2
    634a:	602b      	str	r3, [r5, #0]
    634c:	2380      	movs	r3, #128	; 0x80
    634e:	00db      	lsls	r3, r3, #3
    6350:	2000      	movs	r0, #0
    6352:	6023      	str	r3, [r4, #0]
    6354:	b010      	add	sp, #64	; 0x40
    6356:	bd70      	pop	{r4, r5, r6, pc}
    6358:	ffffe000 	.word	0xffffe000

0000635c <__smakebuf_r>:
    635c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    635e:	2602      	movs	r6, #2
    6360:	898b      	ldrh	r3, [r1, #12]
    6362:	0005      	movs	r5, r0
    6364:	000c      	movs	r4, r1
    6366:	4233      	tst	r3, r6
    6368:	d110      	bne.n	638c <__smakebuf_r+0x30>
    636a:	ab01      	add	r3, sp, #4
    636c:	466a      	mov	r2, sp
    636e:	f7ff ffcf 	bl	6310 <__swhatbuf_r>
    6372:	9900      	ldr	r1, [sp, #0]
    6374:	0007      	movs	r7, r0
    6376:	0028      	movs	r0, r5
    6378:	f000 f87e 	bl	6478 <_malloc_r>
    637c:	2800      	cmp	r0, #0
    637e:	d10c      	bne.n	639a <__smakebuf_r+0x3e>
    6380:	220c      	movs	r2, #12
    6382:	5ea3      	ldrsh	r3, [r4, r2]
    6384:	059a      	lsls	r2, r3, #22
    6386:	d423      	bmi.n	63d0 <__smakebuf_r+0x74>
    6388:	4333      	orrs	r3, r6
    638a:	81a3      	strh	r3, [r4, #12]
    638c:	0023      	movs	r3, r4
    638e:	3347      	adds	r3, #71	; 0x47
    6390:	6023      	str	r3, [r4, #0]
    6392:	6123      	str	r3, [r4, #16]
    6394:	2301      	movs	r3, #1
    6396:	6163      	str	r3, [r4, #20]
    6398:	e01a      	b.n	63d0 <__smakebuf_r+0x74>
    639a:	2280      	movs	r2, #128	; 0x80
    639c:	4b0d      	ldr	r3, [pc, #52]	; (63d4 <__smakebuf_r+0x78>)
    639e:	62ab      	str	r3, [r5, #40]	; 0x28
    63a0:	89a3      	ldrh	r3, [r4, #12]
    63a2:	6020      	str	r0, [r4, #0]
    63a4:	4313      	orrs	r3, r2
    63a6:	81a3      	strh	r3, [r4, #12]
    63a8:	9b00      	ldr	r3, [sp, #0]
    63aa:	6120      	str	r0, [r4, #16]
    63ac:	6163      	str	r3, [r4, #20]
    63ae:	9b01      	ldr	r3, [sp, #4]
    63b0:	2b00      	cmp	r3, #0
    63b2:	d00a      	beq.n	63ca <__smakebuf_r+0x6e>
    63b4:	230e      	movs	r3, #14
    63b6:	5ee1      	ldrsh	r1, [r4, r3]
    63b8:	0028      	movs	r0, r5
    63ba:	f000 fc53 	bl	6c64 <_isatty_r>
    63be:	2800      	cmp	r0, #0
    63c0:	d003      	beq.n	63ca <__smakebuf_r+0x6e>
    63c2:	2201      	movs	r2, #1
    63c4:	89a3      	ldrh	r3, [r4, #12]
    63c6:	4313      	orrs	r3, r2
    63c8:	81a3      	strh	r3, [r4, #12]
    63ca:	89a3      	ldrh	r3, [r4, #12]
    63cc:	431f      	orrs	r7, r3
    63ce:	81a7      	strh	r7, [r4, #12]
    63d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    63d2:	46c0      	nop			; (mov r8, r8)
    63d4:	00006165 	.word	0x00006165

000063d8 <malloc>:
    63d8:	b510      	push	{r4, lr}
    63da:	4b03      	ldr	r3, [pc, #12]	; (63e8 <malloc+0x10>)
    63dc:	0001      	movs	r1, r0
    63de:	6818      	ldr	r0, [r3, #0]
    63e0:	f000 f84a 	bl	6478 <_malloc_r>
    63e4:	bd10      	pop	{r4, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	20000074 	.word	0x20000074

000063ec <_free_r>:
    63ec:	b530      	push	{r4, r5, lr}
    63ee:	2900      	cmp	r1, #0
    63f0:	d03e      	beq.n	6470 <_free_r+0x84>
    63f2:	3904      	subs	r1, #4
    63f4:	680b      	ldr	r3, [r1, #0]
    63f6:	2b00      	cmp	r3, #0
    63f8:	da00      	bge.n	63fc <_free_r+0x10>
    63fa:	18c9      	adds	r1, r1, r3
    63fc:	4a1d      	ldr	r2, [pc, #116]	; (6474 <_free_r+0x88>)
    63fe:	6813      	ldr	r3, [r2, #0]
    6400:	0014      	movs	r4, r2
    6402:	2b00      	cmp	r3, #0
    6404:	d102      	bne.n	640c <_free_r+0x20>
    6406:	604b      	str	r3, [r1, #4]
    6408:	6011      	str	r1, [r2, #0]
    640a:	e031      	b.n	6470 <_free_r+0x84>
    640c:	428b      	cmp	r3, r1
    640e:	d90d      	bls.n	642c <_free_r+0x40>
    6410:	680a      	ldr	r2, [r1, #0]
    6412:	1888      	adds	r0, r1, r2
    6414:	4283      	cmp	r3, r0
    6416:	d103      	bne.n	6420 <_free_r+0x34>
    6418:	6818      	ldr	r0, [r3, #0]
    641a:	685b      	ldr	r3, [r3, #4]
    641c:	1882      	adds	r2, r0, r2
    641e:	600a      	str	r2, [r1, #0]
    6420:	604b      	str	r3, [r1, #4]
    6422:	6021      	str	r1, [r4, #0]
    6424:	e024      	b.n	6470 <_free_r+0x84>
    6426:	428a      	cmp	r2, r1
    6428:	d803      	bhi.n	6432 <_free_r+0x46>
    642a:	0013      	movs	r3, r2
    642c:	685a      	ldr	r2, [r3, #4]
    642e:	2a00      	cmp	r2, #0
    6430:	d1f9      	bne.n	6426 <_free_r+0x3a>
    6432:	681d      	ldr	r5, [r3, #0]
    6434:	195c      	adds	r4, r3, r5
    6436:	428c      	cmp	r4, r1
    6438:	d10b      	bne.n	6452 <_free_r+0x66>
    643a:	6809      	ldr	r1, [r1, #0]
    643c:	1869      	adds	r1, r5, r1
    643e:	1858      	adds	r0, r3, r1
    6440:	6019      	str	r1, [r3, #0]
    6442:	4282      	cmp	r2, r0
    6444:	d114      	bne.n	6470 <_free_r+0x84>
    6446:	6810      	ldr	r0, [r2, #0]
    6448:	6852      	ldr	r2, [r2, #4]
    644a:	1841      	adds	r1, r0, r1
    644c:	6019      	str	r1, [r3, #0]
    644e:	605a      	str	r2, [r3, #4]
    6450:	e00e      	b.n	6470 <_free_r+0x84>
    6452:	428c      	cmp	r4, r1
    6454:	d902      	bls.n	645c <_free_r+0x70>
    6456:	230c      	movs	r3, #12
    6458:	6003      	str	r3, [r0, #0]
    645a:	e009      	b.n	6470 <_free_r+0x84>
    645c:	6808      	ldr	r0, [r1, #0]
    645e:	180c      	adds	r4, r1, r0
    6460:	42a2      	cmp	r2, r4
    6462:	d103      	bne.n	646c <_free_r+0x80>
    6464:	6814      	ldr	r4, [r2, #0]
    6466:	6852      	ldr	r2, [r2, #4]
    6468:	1820      	adds	r0, r4, r0
    646a:	6008      	str	r0, [r1, #0]
    646c:	604a      	str	r2, [r1, #4]
    646e:	6059      	str	r1, [r3, #4]
    6470:	bd30      	pop	{r4, r5, pc}
    6472:	46c0      	nop			; (mov r8, r8)
    6474:	200001c8 	.word	0x200001c8

00006478 <_malloc_r>:
    6478:	2303      	movs	r3, #3
    647a:	b570      	push	{r4, r5, r6, lr}
    647c:	1ccd      	adds	r5, r1, #3
    647e:	439d      	bics	r5, r3
    6480:	3508      	adds	r5, #8
    6482:	0006      	movs	r6, r0
    6484:	2d0c      	cmp	r5, #12
    6486:	d201      	bcs.n	648c <_malloc_r+0x14>
    6488:	250c      	movs	r5, #12
    648a:	e005      	b.n	6498 <_malloc_r+0x20>
    648c:	2d00      	cmp	r5, #0
    648e:	da03      	bge.n	6498 <_malloc_r+0x20>
    6490:	230c      	movs	r3, #12
    6492:	2000      	movs	r0, #0
    6494:	6033      	str	r3, [r6, #0]
    6496:	e040      	b.n	651a <_malloc_r+0xa2>
    6498:	42a9      	cmp	r1, r5
    649a:	d8f9      	bhi.n	6490 <_malloc_r+0x18>
    649c:	4b1f      	ldr	r3, [pc, #124]	; (651c <_malloc_r+0xa4>)
    649e:	681c      	ldr	r4, [r3, #0]
    64a0:	001a      	movs	r2, r3
    64a2:	0021      	movs	r1, r4
    64a4:	2900      	cmp	r1, #0
    64a6:	d013      	beq.n	64d0 <_malloc_r+0x58>
    64a8:	680b      	ldr	r3, [r1, #0]
    64aa:	1b5b      	subs	r3, r3, r5
    64ac:	d40d      	bmi.n	64ca <_malloc_r+0x52>
    64ae:	2b0b      	cmp	r3, #11
    64b0:	d902      	bls.n	64b8 <_malloc_r+0x40>
    64b2:	600b      	str	r3, [r1, #0]
    64b4:	18cc      	adds	r4, r1, r3
    64b6:	e01e      	b.n	64f6 <_malloc_r+0x7e>
    64b8:	428c      	cmp	r4, r1
    64ba:	d102      	bne.n	64c2 <_malloc_r+0x4a>
    64bc:	6863      	ldr	r3, [r4, #4]
    64be:	6013      	str	r3, [r2, #0]
    64c0:	e01a      	b.n	64f8 <_malloc_r+0x80>
    64c2:	684b      	ldr	r3, [r1, #4]
    64c4:	6063      	str	r3, [r4, #4]
    64c6:	000c      	movs	r4, r1
    64c8:	e016      	b.n	64f8 <_malloc_r+0x80>
    64ca:	000c      	movs	r4, r1
    64cc:	6849      	ldr	r1, [r1, #4]
    64ce:	e7e9      	b.n	64a4 <_malloc_r+0x2c>
    64d0:	4c13      	ldr	r4, [pc, #76]	; (6520 <_malloc_r+0xa8>)
    64d2:	6823      	ldr	r3, [r4, #0]
    64d4:	2b00      	cmp	r3, #0
    64d6:	d103      	bne.n	64e0 <_malloc_r+0x68>
    64d8:	0030      	movs	r0, r6
    64da:	f000 fb2d 	bl	6b38 <_sbrk_r>
    64de:	6020      	str	r0, [r4, #0]
    64e0:	0029      	movs	r1, r5
    64e2:	0030      	movs	r0, r6
    64e4:	f000 fb28 	bl	6b38 <_sbrk_r>
    64e8:	1c43      	adds	r3, r0, #1
    64ea:	d0d1      	beq.n	6490 <_malloc_r+0x18>
    64ec:	2303      	movs	r3, #3
    64ee:	1cc4      	adds	r4, r0, #3
    64f0:	439c      	bics	r4, r3
    64f2:	42a0      	cmp	r0, r4
    64f4:	d10a      	bne.n	650c <_malloc_r+0x94>
    64f6:	6025      	str	r5, [r4, #0]
    64f8:	0020      	movs	r0, r4
    64fa:	2207      	movs	r2, #7
    64fc:	300b      	adds	r0, #11
    64fe:	1d23      	adds	r3, r4, #4
    6500:	4390      	bics	r0, r2
    6502:	1ac3      	subs	r3, r0, r3
    6504:	d009      	beq.n	651a <_malloc_r+0xa2>
    6506:	425a      	negs	r2, r3
    6508:	50e2      	str	r2, [r4, r3]
    650a:	e006      	b.n	651a <_malloc_r+0xa2>
    650c:	1a21      	subs	r1, r4, r0
    650e:	0030      	movs	r0, r6
    6510:	f000 fb12 	bl	6b38 <_sbrk_r>
    6514:	1c43      	adds	r3, r0, #1
    6516:	d1ee      	bne.n	64f6 <_malloc_r+0x7e>
    6518:	e7ba      	b.n	6490 <_malloc_r+0x18>
    651a:	bd70      	pop	{r4, r5, r6, pc}
    651c:	200001c8 	.word	0x200001c8
    6520:	200001c4 	.word	0x200001c4

00006524 <__sfputc_r>:
    6524:	6893      	ldr	r3, [r2, #8]
    6526:	b510      	push	{r4, lr}
    6528:	3b01      	subs	r3, #1
    652a:	6093      	str	r3, [r2, #8]
    652c:	2b00      	cmp	r3, #0
    652e:	da05      	bge.n	653c <__sfputc_r+0x18>
    6530:	6994      	ldr	r4, [r2, #24]
    6532:	42a3      	cmp	r3, r4
    6534:	db08      	blt.n	6548 <__sfputc_r+0x24>
    6536:	b2cb      	uxtb	r3, r1
    6538:	2b0a      	cmp	r3, #10
    653a:	d005      	beq.n	6548 <__sfputc_r+0x24>
    653c:	6813      	ldr	r3, [r2, #0]
    653e:	1c58      	adds	r0, r3, #1
    6540:	6010      	str	r0, [r2, #0]
    6542:	7019      	strb	r1, [r3, #0]
    6544:	b2c8      	uxtb	r0, r1
    6546:	e001      	b.n	654c <__sfputc_r+0x28>
    6548:	f7ff fc8c 	bl	5e64 <__swbuf_r>
    654c:	bd10      	pop	{r4, pc}

0000654e <__sfputs_r>:
    654e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6550:	0006      	movs	r6, r0
    6552:	000f      	movs	r7, r1
    6554:	0014      	movs	r4, r2
    6556:	18d5      	adds	r5, r2, r3
    6558:	42ac      	cmp	r4, r5
    655a:	d008      	beq.n	656e <__sfputs_r+0x20>
    655c:	7821      	ldrb	r1, [r4, #0]
    655e:	003a      	movs	r2, r7
    6560:	0030      	movs	r0, r6
    6562:	f7ff ffdf 	bl	6524 <__sfputc_r>
    6566:	3401      	adds	r4, #1
    6568:	1c43      	adds	r3, r0, #1
    656a:	d1f5      	bne.n	6558 <__sfputs_r+0xa>
    656c:	e000      	b.n	6570 <__sfputs_r+0x22>
    656e:	2000      	movs	r0, #0
    6570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006574 <_vfiprintf_r>:
    6574:	b5f0      	push	{r4, r5, r6, r7, lr}
    6576:	b09f      	sub	sp, #124	; 0x7c
    6578:	0006      	movs	r6, r0
    657a:	000f      	movs	r7, r1
    657c:	9202      	str	r2, [sp, #8]
    657e:	9305      	str	r3, [sp, #20]
    6580:	2800      	cmp	r0, #0
    6582:	d004      	beq.n	658e <_vfiprintf_r+0x1a>
    6584:	6983      	ldr	r3, [r0, #24]
    6586:	2b00      	cmp	r3, #0
    6588:	d101      	bne.n	658e <_vfiprintf_r+0x1a>
    658a:	f7ff fe2d 	bl	61e8 <__sinit>
    658e:	4b7f      	ldr	r3, [pc, #508]	; (678c <_vfiprintf_r+0x218>)
    6590:	429f      	cmp	r7, r3
    6592:	d101      	bne.n	6598 <_vfiprintf_r+0x24>
    6594:	6877      	ldr	r7, [r6, #4]
    6596:	e008      	b.n	65aa <_vfiprintf_r+0x36>
    6598:	4b7d      	ldr	r3, [pc, #500]	; (6790 <_vfiprintf_r+0x21c>)
    659a:	429f      	cmp	r7, r3
    659c:	d101      	bne.n	65a2 <_vfiprintf_r+0x2e>
    659e:	68b7      	ldr	r7, [r6, #8]
    65a0:	e003      	b.n	65aa <_vfiprintf_r+0x36>
    65a2:	4b7c      	ldr	r3, [pc, #496]	; (6794 <_vfiprintf_r+0x220>)
    65a4:	429f      	cmp	r7, r3
    65a6:	d100      	bne.n	65aa <_vfiprintf_r+0x36>
    65a8:	68f7      	ldr	r7, [r6, #12]
    65aa:	89bb      	ldrh	r3, [r7, #12]
    65ac:	071b      	lsls	r3, r3, #28
    65ae:	d50a      	bpl.n	65c6 <_vfiprintf_r+0x52>
    65b0:	693b      	ldr	r3, [r7, #16]
    65b2:	2b00      	cmp	r3, #0
    65b4:	d007      	beq.n	65c6 <_vfiprintf_r+0x52>
    65b6:	2300      	movs	r3, #0
    65b8:	ad06      	add	r5, sp, #24
    65ba:	616b      	str	r3, [r5, #20]
    65bc:	3320      	adds	r3, #32
    65be:	766b      	strb	r3, [r5, #25]
    65c0:	3310      	adds	r3, #16
    65c2:	76ab      	strb	r3, [r5, #26]
    65c4:	e03d      	b.n	6642 <_vfiprintf_r+0xce>
    65c6:	0039      	movs	r1, r7
    65c8:	0030      	movs	r0, r6
    65ca:	f7ff fca3 	bl	5f14 <__swsetup_r>
    65ce:	2800      	cmp	r0, #0
    65d0:	d0f1      	beq.n	65b6 <_vfiprintf_r+0x42>
    65d2:	2001      	movs	r0, #1
    65d4:	4240      	negs	r0, r0
    65d6:	e0d6      	b.n	6786 <_vfiprintf_r+0x212>
    65d8:	9a05      	ldr	r2, [sp, #20]
    65da:	1d11      	adds	r1, r2, #4
    65dc:	6812      	ldr	r2, [r2, #0]
    65de:	9105      	str	r1, [sp, #20]
    65e0:	2a00      	cmp	r2, #0
    65e2:	da00      	bge.n	65e6 <_vfiprintf_r+0x72>
    65e4:	e07f      	b.n	66e6 <_vfiprintf_r+0x172>
    65e6:	9209      	str	r2, [sp, #36]	; 0x24
    65e8:	3401      	adds	r4, #1
    65ea:	7823      	ldrb	r3, [r4, #0]
    65ec:	2b2e      	cmp	r3, #46	; 0x2e
    65ee:	d100      	bne.n	65f2 <_vfiprintf_r+0x7e>
    65f0:	e08d      	b.n	670e <_vfiprintf_r+0x19a>
    65f2:	7821      	ldrb	r1, [r4, #0]
    65f4:	2203      	movs	r2, #3
    65f6:	4868      	ldr	r0, [pc, #416]	; (6798 <_vfiprintf_r+0x224>)
    65f8:	f000 fb5a 	bl	6cb0 <memchr>
    65fc:	2800      	cmp	r0, #0
    65fe:	d007      	beq.n	6610 <_vfiprintf_r+0x9c>
    6600:	4b65      	ldr	r3, [pc, #404]	; (6798 <_vfiprintf_r+0x224>)
    6602:	682a      	ldr	r2, [r5, #0]
    6604:	1ac0      	subs	r0, r0, r3
    6606:	2340      	movs	r3, #64	; 0x40
    6608:	4083      	lsls	r3, r0
    660a:	4313      	orrs	r3, r2
    660c:	602b      	str	r3, [r5, #0]
    660e:	3401      	adds	r4, #1
    6610:	7821      	ldrb	r1, [r4, #0]
    6612:	1c63      	adds	r3, r4, #1
    6614:	2206      	movs	r2, #6
    6616:	4861      	ldr	r0, [pc, #388]	; (679c <_vfiprintf_r+0x228>)
    6618:	9302      	str	r3, [sp, #8]
    661a:	7629      	strb	r1, [r5, #24]
    661c:	f000 fb48 	bl	6cb0 <memchr>
    6620:	2800      	cmp	r0, #0
    6622:	d100      	bne.n	6626 <_vfiprintf_r+0xb2>
    6624:	e09d      	b.n	6762 <_vfiprintf_r+0x1ee>
    6626:	4b5e      	ldr	r3, [pc, #376]	; (67a0 <_vfiprintf_r+0x22c>)
    6628:	2b00      	cmp	r3, #0
    662a:	d000      	beq.n	662e <_vfiprintf_r+0xba>
    662c:	e090      	b.n	6750 <_vfiprintf_r+0x1dc>
    662e:	2207      	movs	r2, #7
    6630:	9b05      	ldr	r3, [sp, #20]
    6632:	3307      	adds	r3, #7
    6634:	4393      	bics	r3, r2
    6636:	3308      	adds	r3, #8
    6638:	9305      	str	r3, [sp, #20]
    663a:	696b      	ldr	r3, [r5, #20]
    663c:	9a03      	ldr	r2, [sp, #12]
    663e:	189b      	adds	r3, r3, r2
    6640:	616b      	str	r3, [r5, #20]
    6642:	9c02      	ldr	r4, [sp, #8]
    6644:	7823      	ldrb	r3, [r4, #0]
    6646:	2b00      	cmp	r3, #0
    6648:	d104      	bne.n	6654 <_vfiprintf_r+0xe0>
    664a:	9b02      	ldr	r3, [sp, #8]
    664c:	1ae3      	subs	r3, r4, r3
    664e:	9304      	str	r3, [sp, #16]
    6650:	d012      	beq.n	6678 <_vfiprintf_r+0x104>
    6652:	e003      	b.n	665c <_vfiprintf_r+0xe8>
    6654:	2b25      	cmp	r3, #37	; 0x25
    6656:	d0f8      	beq.n	664a <_vfiprintf_r+0xd6>
    6658:	3401      	adds	r4, #1
    665a:	e7f3      	b.n	6644 <_vfiprintf_r+0xd0>
    665c:	9b04      	ldr	r3, [sp, #16]
    665e:	9a02      	ldr	r2, [sp, #8]
    6660:	0039      	movs	r1, r7
    6662:	0030      	movs	r0, r6
    6664:	f7ff ff73 	bl	654e <__sfputs_r>
    6668:	1c43      	adds	r3, r0, #1
    666a:	d100      	bne.n	666e <_vfiprintf_r+0xfa>
    666c:	e086      	b.n	677c <_vfiprintf_r+0x208>
    666e:	696a      	ldr	r2, [r5, #20]
    6670:	9b04      	ldr	r3, [sp, #16]
    6672:	4694      	mov	ip, r2
    6674:	4463      	add	r3, ip
    6676:	616b      	str	r3, [r5, #20]
    6678:	7823      	ldrb	r3, [r4, #0]
    667a:	2b00      	cmp	r3, #0
    667c:	d07e      	beq.n	677c <_vfiprintf_r+0x208>
    667e:	2201      	movs	r2, #1
    6680:	2300      	movs	r3, #0
    6682:	4252      	negs	r2, r2
    6684:	606a      	str	r2, [r5, #4]
    6686:	a902      	add	r1, sp, #8
    6688:	3254      	adds	r2, #84	; 0x54
    668a:	1852      	adds	r2, r2, r1
    668c:	3401      	adds	r4, #1
    668e:	602b      	str	r3, [r5, #0]
    6690:	60eb      	str	r3, [r5, #12]
    6692:	60ab      	str	r3, [r5, #8]
    6694:	7013      	strb	r3, [r2, #0]
    6696:	65ab      	str	r3, [r5, #88]	; 0x58
    6698:	7821      	ldrb	r1, [r4, #0]
    669a:	2205      	movs	r2, #5
    669c:	4841      	ldr	r0, [pc, #260]	; (67a4 <_vfiprintf_r+0x230>)
    669e:	f000 fb07 	bl	6cb0 <memchr>
    66a2:	2800      	cmp	r0, #0
    66a4:	d008      	beq.n	66b8 <_vfiprintf_r+0x144>
    66a6:	4b3f      	ldr	r3, [pc, #252]	; (67a4 <_vfiprintf_r+0x230>)
    66a8:	682a      	ldr	r2, [r5, #0]
    66aa:	1ac0      	subs	r0, r0, r3
    66ac:	2301      	movs	r3, #1
    66ae:	4083      	lsls	r3, r0
    66b0:	4313      	orrs	r3, r2
    66b2:	602b      	str	r3, [r5, #0]
    66b4:	3401      	adds	r4, #1
    66b6:	e7ef      	b.n	6698 <_vfiprintf_r+0x124>
    66b8:	682b      	ldr	r3, [r5, #0]
    66ba:	06da      	lsls	r2, r3, #27
    66bc:	d504      	bpl.n	66c8 <_vfiprintf_r+0x154>
    66be:	2253      	movs	r2, #83	; 0x53
    66c0:	2120      	movs	r1, #32
    66c2:	a802      	add	r0, sp, #8
    66c4:	1812      	adds	r2, r2, r0
    66c6:	7011      	strb	r1, [r2, #0]
    66c8:	071a      	lsls	r2, r3, #28
    66ca:	d504      	bpl.n	66d6 <_vfiprintf_r+0x162>
    66cc:	2253      	movs	r2, #83	; 0x53
    66ce:	212b      	movs	r1, #43	; 0x2b
    66d0:	a802      	add	r0, sp, #8
    66d2:	1812      	adds	r2, r2, r0
    66d4:	7011      	strb	r1, [r2, #0]
    66d6:	7822      	ldrb	r2, [r4, #0]
    66d8:	2a2a      	cmp	r2, #42	; 0x2a
    66da:	d100      	bne.n	66de <_vfiprintf_r+0x16a>
    66dc:	e77c      	b.n	65d8 <_vfiprintf_r+0x64>
    66de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    66e0:	2000      	movs	r0, #0
    66e2:	210a      	movs	r1, #10
    66e4:	e005      	b.n	66f2 <_vfiprintf_r+0x17e>
    66e6:	4252      	negs	r2, r2
    66e8:	60ea      	str	r2, [r5, #12]
    66ea:	2202      	movs	r2, #2
    66ec:	4313      	orrs	r3, r2
    66ee:	602b      	str	r3, [r5, #0]
    66f0:	e77a      	b.n	65e8 <_vfiprintf_r+0x74>
    66f2:	7822      	ldrb	r2, [r4, #0]
    66f4:	3a30      	subs	r2, #48	; 0x30
    66f6:	2a09      	cmp	r2, #9
    66f8:	d804      	bhi.n	6704 <_vfiprintf_r+0x190>
    66fa:	434b      	muls	r3, r1
    66fc:	3401      	adds	r4, #1
    66fe:	189b      	adds	r3, r3, r2
    6700:	2001      	movs	r0, #1
    6702:	e7f6      	b.n	66f2 <_vfiprintf_r+0x17e>
    6704:	2800      	cmp	r0, #0
    6706:	d100      	bne.n	670a <_vfiprintf_r+0x196>
    6708:	e76f      	b.n	65ea <_vfiprintf_r+0x76>
    670a:	9309      	str	r3, [sp, #36]	; 0x24
    670c:	e76d      	b.n	65ea <_vfiprintf_r+0x76>
    670e:	7863      	ldrb	r3, [r4, #1]
    6710:	2b2a      	cmp	r3, #42	; 0x2a
    6712:	d10a      	bne.n	672a <_vfiprintf_r+0x1b6>
    6714:	9b05      	ldr	r3, [sp, #20]
    6716:	3402      	adds	r4, #2
    6718:	1d1a      	adds	r2, r3, #4
    671a:	681b      	ldr	r3, [r3, #0]
    671c:	9205      	str	r2, [sp, #20]
    671e:	2b00      	cmp	r3, #0
    6720:	da01      	bge.n	6726 <_vfiprintf_r+0x1b2>
    6722:	2301      	movs	r3, #1
    6724:	425b      	negs	r3, r3
    6726:	9307      	str	r3, [sp, #28]
    6728:	e763      	b.n	65f2 <_vfiprintf_r+0x7e>
    672a:	2300      	movs	r3, #0
    672c:	200a      	movs	r0, #10
    672e:	001a      	movs	r2, r3
    6730:	3401      	adds	r4, #1
    6732:	606b      	str	r3, [r5, #4]
    6734:	7821      	ldrb	r1, [r4, #0]
    6736:	3930      	subs	r1, #48	; 0x30
    6738:	2909      	cmp	r1, #9
    673a:	d804      	bhi.n	6746 <_vfiprintf_r+0x1d2>
    673c:	4342      	muls	r2, r0
    673e:	3401      	adds	r4, #1
    6740:	1852      	adds	r2, r2, r1
    6742:	2301      	movs	r3, #1
    6744:	e7f6      	b.n	6734 <_vfiprintf_r+0x1c0>
    6746:	2b00      	cmp	r3, #0
    6748:	d100      	bne.n	674c <_vfiprintf_r+0x1d8>
    674a:	e752      	b.n	65f2 <_vfiprintf_r+0x7e>
    674c:	9207      	str	r2, [sp, #28]
    674e:	e750      	b.n	65f2 <_vfiprintf_r+0x7e>
    6750:	ab05      	add	r3, sp, #20
    6752:	9300      	str	r3, [sp, #0]
    6754:	003a      	movs	r2, r7
    6756:	4b14      	ldr	r3, [pc, #80]	; (67a8 <_vfiprintf_r+0x234>)
    6758:	0029      	movs	r1, r5
    675a:	0030      	movs	r0, r6
    675c:	e000      	b.n	6760 <_vfiprintf_r+0x1ec>
    675e:	bf00      	nop
    6760:	e007      	b.n	6772 <_vfiprintf_r+0x1fe>
    6762:	ab05      	add	r3, sp, #20
    6764:	9300      	str	r3, [sp, #0]
    6766:	003a      	movs	r2, r7
    6768:	4b0f      	ldr	r3, [pc, #60]	; (67a8 <_vfiprintf_r+0x234>)
    676a:	0029      	movs	r1, r5
    676c:	0030      	movs	r0, r6
    676e:	f000 f88b 	bl	6888 <_printf_i>
    6772:	9003      	str	r0, [sp, #12]
    6774:	9b03      	ldr	r3, [sp, #12]
    6776:	3301      	adds	r3, #1
    6778:	d000      	beq.n	677c <_vfiprintf_r+0x208>
    677a:	e75e      	b.n	663a <_vfiprintf_r+0xc6>
    677c:	89bb      	ldrh	r3, [r7, #12]
    677e:	065b      	lsls	r3, r3, #25
    6780:	d500      	bpl.n	6784 <_vfiprintf_r+0x210>
    6782:	e726      	b.n	65d2 <_vfiprintf_r+0x5e>
    6784:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6786:	b01f      	add	sp, #124	; 0x7c
    6788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    678a:	46c0      	nop			; (mov r8, r8)
    678c:	000080b4 	.word	0x000080b4
    6790:	000080d4 	.word	0x000080d4
    6794:	000080f4 	.word	0x000080f4
    6798:	0000811a 	.word	0x0000811a
    679c:	0000811e 	.word	0x0000811e
    67a0:	00000000 	.word	0x00000000
    67a4:	00008114 	.word	0x00008114
    67a8:	0000654f 	.word	0x0000654f

000067ac <_printf_common>:
    67ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67ae:	0017      	movs	r7, r2
    67b0:	9301      	str	r3, [sp, #4]
    67b2:	688a      	ldr	r2, [r1, #8]
    67b4:	690b      	ldr	r3, [r1, #16]
    67b6:	9000      	str	r0, [sp, #0]
    67b8:	000c      	movs	r4, r1
    67ba:	4293      	cmp	r3, r2
    67bc:	da00      	bge.n	67c0 <_printf_common+0x14>
    67be:	0013      	movs	r3, r2
    67c0:	0022      	movs	r2, r4
    67c2:	603b      	str	r3, [r7, #0]
    67c4:	3243      	adds	r2, #67	; 0x43
    67c6:	7812      	ldrb	r2, [r2, #0]
    67c8:	2a00      	cmp	r2, #0
    67ca:	d001      	beq.n	67d0 <_printf_common+0x24>
    67cc:	3301      	adds	r3, #1
    67ce:	603b      	str	r3, [r7, #0]
    67d0:	6823      	ldr	r3, [r4, #0]
    67d2:	069b      	lsls	r3, r3, #26
    67d4:	d502      	bpl.n	67dc <_printf_common+0x30>
    67d6:	683b      	ldr	r3, [r7, #0]
    67d8:	3302      	adds	r3, #2
    67da:	603b      	str	r3, [r7, #0]
    67dc:	2506      	movs	r5, #6
    67de:	6823      	ldr	r3, [r4, #0]
    67e0:	401d      	ands	r5, r3
    67e2:	d01e      	beq.n	6822 <_printf_common+0x76>
    67e4:	0023      	movs	r3, r4
    67e6:	3343      	adds	r3, #67	; 0x43
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	1e5a      	subs	r2, r3, #1
    67ec:	4193      	sbcs	r3, r2
    67ee:	6822      	ldr	r2, [r4, #0]
    67f0:	0692      	lsls	r2, r2, #26
    67f2:	d51c      	bpl.n	682e <_printf_common+0x82>
    67f4:	2030      	movs	r0, #48	; 0x30
    67f6:	18e1      	adds	r1, r4, r3
    67f8:	3143      	adds	r1, #67	; 0x43
    67fa:	7008      	strb	r0, [r1, #0]
    67fc:	0021      	movs	r1, r4
    67fe:	1c5a      	adds	r2, r3, #1
    6800:	3145      	adds	r1, #69	; 0x45
    6802:	7809      	ldrb	r1, [r1, #0]
    6804:	18a2      	adds	r2, r4, r2
    6806:	3243      	adds	r2, #67	; 0x43
    6808:	3302      	adds	r3, #2
    680a:	7011      	strb	r1, [r2, #0]
    680c:	e00f      	b.n	682e <_printf_common+0x82>
    680e:	0022      	movs	r2, r4
    6810:	2301      	movs	r3, #1
    6812:	3219      	adds	r2, #25
    6814:	9901      	ldr	r1, [sp, #4]
    6816:	9800      	ldr	r0, [sp, #0]
    6818:	9e08      	ldr	r6, [sp, #32]
    681a:	47b0      	blx	r6
    681c:	1c43      	adds	r3, r0, #1
    681e:	d00e      	beq.n	683e <_printf_common+0x92>
    6820:	3501      	adds	r5, #1
    6822:	68e3      	ldr	r3, [r4, #12]
    6824:	683a      	ldr	r2, [r7, #0]
    6826:	1a9b      	subs	r3, r3, r2
    6828:	429d      	cmp	r5, r3
    682a:	dbf0      	blt.n	680e <_printf_common+0x62>
    682c:	e7da      	b.n	67e4 <_printf_common+0x38>
    682e:	0022      	movs	r2, r4
    6830:	9901      	ldr	r1, [sp, #4]
    6832:	3243      	adds	r2, #67	; 0x43
    6834:	9800      	ldr	r0, [sp, #0]
    6836:	9d08      	ldr	r5, [sp, #32]
    6838:	47a8      	blx	r5
    683a:	1c43      	adds	r3, r0, #1
    683c:	d102      	bne.n	6844 <_printf_common+0x98>
    683e:	2001      	movs	r0, #1
    6840:	4240      	negs	r0, r0
    6842:	e020      	b.n	6886 <_printf_common+0xda>
    6844:	2306      	movs	r3, #6
    6846:	6820      	ldr	r0, [r4, #0]
    6848:	68e1      	ldr	r1, [r4, #12]
    684a:	683a      	ldr	r2, [r7, #0]
    684c:	4003      	ands	r3, r0
    684e:	2500      	movs	r5, #0
    6850:	2b04      	cmp	r3, #4
    6852:	d103      	bne.n	685c <_printf_common+0xb0>
    6854:	1a8d      	subs	r5, r1, r2
    6856:	43eb      	mvns	r3, r5
    6858:	17db      	asrs	r3, r3, #31
    685a:	401d      	ands	r5, r3
    685c:	68a3      	ldr	r3, [r4, #8]
    685e:	6922      	ldr	r2, [r4, #16]
    6860:	4293      	cmp	r3, r2
    6862:	dd01      	ble.n	6868 <_printf_common+0xbc>
    6864:	1a9b      	subs	r3, r3, r2
    6866:	18ed      	adds	r5, r5, r3
    6868:	2700      	movs	r7, #0
    686a:	42bd      	cmp	r5, r7
    686c:	d00a      	beq.n	6884 <_printf_common+0xd8>
    686e:	0022      	movs	r2, r4
    6870:	2301      	movs	r3, #1
    6872:	321a      	adds	r2, #26
    6874:	9901      	ldr	r1, [sp, #4]
    6876:	9800      	ldr	r0, [sp, #0]
    6878:	9e08      	ldr	r6, [sp, #32]
    687a:	47b0      	blx	r6
    687c:	1c43      	adds	r3, r0, #1
    687e:	d0de      	beq.n	683e <_printf_common+0x92>
    6880:	3701      	adds	r7, #1
    6882:	e7f2      	b.n	686a <_printf_common+0xbe>
    6884:	2000      	movs	r0, #0
    6886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006888 <_printf_i>:
    6888:	b5f0      	push	{r4, r5, r6, r7, lr}
    688a:	b08b      	sub	sp, #44	; 0x2c
    688c:	9206      	str	r2, [sp, #24]
    688e:	000a      	movs	r2, r1
    6890:	3243      	adds	r2, #67	; 0x43
    6892:	9307      	str	r3, [sp, #28]
    6894:	9005      	str	r0, [sp, #20]
    6896:	9204      	str	r2, [sp, #16]
    6898:	7e0a      	ldrb	r2, [r1, #24]
    689a:	000c      	movs	r4, r1
    689c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    689e:	2a6e      	cmp	r2, #110	; 0x6e
    68a0:	d100      	bne.n	68a4 <_printf_i+0x1c>
    68a2:	e0ab      	b.n	69fc <_printf_i+0x174>
    68a4:	d811      	bhi.n	68ca <_printf_i+0x42>
    68a6:	2a63      	cmp	r2, #99	; 0x63
    68a8:	d022      	beq.n	68f0 <_printf_i+0x68>
    68aa:	d809      	bhi.n	68c0 <_printf_i+0x38>
    68ac:	2a00      	cmp	r2, #0
    68ae:	d100      	bne.n	68b2 <_printf_i+0x2a>
    68b0:	e0b5      	b.n	6a1e <_printf_i+0x196>
    68b2:	2a58      	cmp	r2, #88	; 0x58
    68b4:	d000      	beq.n	68b8 <_printf_i+0x30>
    68b6:	e0c5      	b.n	6a44 <_printf_i+0x1bc>
    68b8:	3145      	adds	r1, #69	; 0x45
    68ba:	700a      	strb	r2, [r1, #0]
    68bc:	4a81      	ldr	r2, [pc, #516]	; (6ac4 <_printf_i+0x23c>)
    68be:	e04f      	b.n	6960 <_printf_i+0xd8>
    68c0:	2a64      	cmp	r2, #100	; 0x64
    68c2:	d01d      	beq.n	6900 <_printf_i+0x78>
    68c4:	2a69      	cmp	r2, #105	; 0x69
    68c6:	d01b      	beq.n	6900 <_printf_i+0x78>
    68c8:	e0bc      	b.n	6a44 <_printf_i+0x1bc>
    68ca:	2a73      	cmp	r2, #115	; 0x73
    68cc:	d100      	bne.n	68d0 <_printf_i+0x48>
    68ce:	e0aa      	b.n	6a26 <_printf_i+0x19e>
    68d0:	d809      	bhi.n	68e6 <_printf_i+0x5e>
    68d2:	2a6f      	cmp	r2, #111	; 0x6f
    68d4:	d029      	beq.n	692a <_printf_i+0xa2>
    68d6:	2a70      	cmp	r2, #112	; 0x70
    68d8:	d000      	beq.n	68dc <_printf_i+0x54>
    68da:	e0b3      	b.n	6a44 <_printf_i+0x1bc>
    68dc:	2220      	movs	r2, #32
    68de:	6809      	ldr	r1, [r1, #0]
    68e0:	430a      	orrs	r2, r1
    68e2:	6022      	str	r2, [r4, #0]
    68e4:	e037      	b.n	6956 <_printf_i+0xce>
    68e6:	2a75      	cmp	r2, #117	; 0x75
    68e8:	d01f      	beq.n	692a <_printf_i+0xa2>
    68ea:	2a78      	cmp	r2, #120	; 0x78
    68ec:	d033      	beq.n	6956 <_printf_i+0xce>
    68ee:	e0a9      	b.n	6a44 <_printf_i+0x1bc>
    68f0:	000e      	movs	r6, r1
    68f2:	681a      	ldr	r2, [r3, #0]
    68f4:	3642      	adds	r6, #66	; 0x42
    68f6:	1d11      	adds	r1, r2, #4
    68f8:	6019      	str	r1, [r3, #0]
    68fa:	6813      	ldr	r3, [r2, #0]
    68fc:	7033      	strb	r3, [r6, #0]
    68fe:	e0a4      	b.n	6a4a <_printf_i+0x1c2>
    6900:	6821      	ldr	r1, [r4, #0]
    6902:	681a      	ldr	r2, [r3, #0]
    6904:	0608      	lsls	r0, r1, #24
    6906:	d406      	bmi.n	6916 <_printf_i+0x8e>
    6908:	0649      	lsls	r1, r1, #25
    690a:	d504      	bpl.n	6916 <_printf_i+0x8e>
    690c:	1d11      	adds	r1, r2, #4
    690e:	6019      	str	r1, [r3, #0]
    6910:	2300      	movs	r3, #0
    6912:	5ed5      	ldrsh	r5, [r2, r3]
    6914:	e002      	b.n	691c <_printf_i+0x94>
    6916:	1d11      	adds	r1, r2, #4
    6918:	6019      	str	r1, [r3, #0]
    691a:	6815      	ldr	r5, [r2, #0]
    691c:	2d00      	cmp	r5, #0
    691e:	da3b      	bge.n	6998 <_printf_i+0x110>
    6920:	232d      	movs	r3, #45	; 0x2d
    6922:	9a04      	ldr	r2, [sp, #16]
    6924:	426d      	negs	r5, r5
    6926:	7013      	strb	r3, [r2, #0]
    6928:	e036      	b.n	6998 <_printf_i+0x110>
    692a:	6821      	ldr	r1, [r4, #0]
    692c:	681a      	ldr	r2, [r3, #0]
    692e:	0608      	lsls	r0, r1, #24
    6930:	d406      	bmi.n	6940 <_printf_i+0xb8>
    6932:	0649      	lsls	r1, r1, #25
    6934:	d504      	bpl.n	6940 <_printf_i+0xb8>
    6936:	6815      	ldr	r5, [r2, #0]
    6938:	1d11      	adds	r1, r2, #4
    693a:	6019      	str	r1, [r3, #0]
    693c:	b2ad      	uxth	r5, r5
    693e:	e002      	b.n	6946 <_printf_i+0xbe>
    6940:	1d11      	adds	r1, r2, #4
    6942:	6019      	str	r1, [r3, #0]
    6944:	6815      	ldr	r5, [r2, #0]
    6946:	4b5f      	ldr	r3, [pc, #380]	; (6ac4 <_printf_i+0x23c>)
    6948:	7e22      	ldrb	r2, [r4, #24]
    694a:	9303      	str	r3, [sp, #12]
    694c:	2708      	movs	r7, #8
    694e:	2a6f      	cmp	r2, #111	; 0x6f
    6950:	d01d      	beq.n	698e <_printf_i+0x106>
    6952:	270a      	movs	r7, #10
    6954:	e01b      	b.n	698e <_printf_i+0x106>
    6956:	0022      	movs	r2, r4
    6958:	2178      	movs	r1, #120	; 0x78
    695a:	3245      	adds	r2, #69	; 0x45
    695c:	7011      	strb	r1, [r2, #0]
    695e:	4a5a      	ldr	r2, [pc, #360]	; (6ac8 <_printf_i+0x240>)
    6960:	6819      	ldr	r1, [r3, #0]
    6962:	9203      	str	r2, [sp, #12]
    6964:	1d08      	adds	r0, r1, #4
    6966:	6822      	ldr	r2, [r4, #0]
    6968:	6018      	str	r0, [r3, #0]
    696a:	680d      	ldr	r5, [r1, #0]
    696c:	0610      	lsls	r0, r2, #24
    696e:	d402      	bmi.n	6976 <_printf_i+0xee>
    6970:	0650      	lsls	r0, r2, #25
    6972:	d500      	bpl.n	6976 <_printf_i+0xee>
    6974:	b2ad      	uxth	r5, r5
    6976:	07d3      	lsls	r3, r2, #31
    6978:	d502      	bpl.n	6980 <_printf_i+0xf8>
    697a:	2320      	movs	r3, #32
    697c:	431a      	orrs	r2, r3
    697e:	6022      	str	r2, [r4, #0]
    6980:	2710      	movs	r7, #16
    6982:	2d00      	cmp	r5, #0
    6984:	d103      	bne.n	698e <_printf_i+0x106>
    6986:	2320      	movs	r3, #32
    6988:	6822      	ldr	r2, [r4, #0]
    698a:	439a      	bics	r2, r3
    698c:	6022      	str	r2, [r4, #0]
    698e:	0023      	movs	r3, r4
    6990:	2200      	movs	r2, #0
    6992:	3343      	adds	r3, #67	; 0x43
    6994:	701a      	strb	r2, [r3, #0]
    6996:	e002      	b.n	699e <_printf_i+0x116>
    6998:	270a      	movs	r7, #10
    699a:	4b4a      	ldr	r3, [pc, #296]	; (6ac4 <_printf_i+0x23c>)
    699c:	9303      	str	r3, [sp, #12]
    699e:	6863      	ldr	r3, [r4, #4]
    69a0:	60a3      	str	r3, [r4, #8]
    69a2:	2b00      	cmp	r3, #0
    69a4:	db09      	blt.n	69ba <_printf_i+0x132>
    69a6:	2204      	movs	r2, #4
    69a8:	6821      	ldr	r1, [r4, #0]
    69aa:	4391      	bics	r1, r2
    69ac:	6021      	str	r1, [r4, #0]
    69ae:	2d00      	cmp	r5, #0
    69b0:	d105      	bne.n	69be <_printf_i+0x136>
    69b2:	9e04      	ldr	r6, [sp, #16]
    69b4:	2b00      	cmp	r3, #0
    69b6:	d011      	beq.n	69dc <_printf_i+0x154>
    69b8:	e07b      	b.n	6ab2 <_printf_i+0x22a>
    69ba:	2d00      	cmp	r5, #0
    69bc:	d079      	beq.n	6ab2 <_printf_i+0x22a>
    69be:	9e04      	ldr	r6, [sp, #16]
    69c0:	0028      	movs	r0, r5
    69c2:	0039      	movs	r1, r7
    69c4:	f7ff f888 	bl	5ad8 <__aeabi_uidivmod>
    69c8:	9b03      	ldr	r3, [sp, #12]
    69ca:	3e01      	subs	r6, #1
    69cc:	5c5b      	ldrb	r3, [r3, r1]
    69ce:	0028      	movs	r0, r5
    69d0:	7033      	strb	r3, [r6, #0]
    69d2:	0039      	movs	r1, r7
    69d4:	f7fe fffa 	bl	59cc <__aeabi_uidiv>
    69d8:	1e05      	subs	r5, r0, #0
    69da:	d1f1      	bne.n	69c0 <_printf_i+0x138>
    69dc:	2f08      	cmp	r7, #8
    69de:	d109      	bne.n	69f4 <_printf_i+0x16c>
    69e0:	6823      	ldr	r3, [r4, #0]
    69e2:	07db      	lsls	r3, r3, #31
    69e4:	d506      	bpl.n	69f4 <_printf_i+0x16c>
    69e6:	6863      	ldr	r3, [r4, #4]
    69e8:	6922      	ldr	r2, [r4, #16]
    69ea:	4293      	cmp	r3, r2
    69ec:	dc02      	bgt.n	69f4 <_printf_i+0x16c>
    69ee:	2330      	movs	r3, #48	; 0x30
    69f0:	3e01      	subs	r6, #1
    69f2:	7033      	strb	r3, [r6, #0]
    69f4:	9b04      	ldr	r3, [sp, #16]
    69f6:	1b9b      	subs	r3, r3, r6
    69f8:	6123      	str	r3, [r4, #16]
    69fa:	e02b      	b.n	6a54 <_printf_i+0x1cc>
    69fc:	6809      	ldr	r1, [r1, #0]
    69fe:	681a      	ldr	r2, [r3, #0]
    6a00:	0608      	lsls	r0, r1, #24
    6a02:	d407      	bmi.n	6a14 <_printf_i+0x18c>
    6a04:	0649      	lsls	r1, r1, #25
    6a06:	d505      	bpl.n	6a14 <_printf_i+0x18c>
    6a08:	1d11      	adds	r1, r2, #4
    6a0a:	6019      	str	r1, [r3, #0]
    6a0c:	6813      	ldr	r3, [r2, #0]
    6a0e:	8aa2      	ldrh	r2, [r4, #20]
    6a10:	801a      	strh	r2, [r3, #0]
    6a12:	e004      	b.n	6a1e <_printf_i+0x196>
    6a14:	1d11      	adds	r1, r2, #4
    6a16:	6019      	str	r1, [r3, #0]
    6a18:	6813      	ldr	r3, [r2, #0]
    6a1a:	6962      	ldr	r2, [r4, #20]
    6a1c:	601a      	str	r2, [r3, #0]
    6a1e:	2300      	movs	r3, #0
    6a20:	9e04      	ldr	r6, [sp, #16]
    6a22:	6123      	str	r3, [r4, #16]
    6a24:	e016      	b.n	6a54 <_printf_i+0x1cc>
    6a26:	681a      	ldr	r2, [r3, #0]
    6a28:	1d11      	adds	r1, r2, #4
    6a2a:	6019      	str	r1, [r3, #0]
    6a2c:	6816      	ldr	r6, [r2, #0]
    6a2e:	2100      	movs	r1, #0
    6a30:	6862      	ldr	r2, [r4, #4]
    6a32:	0030      	movs	r0, r6
    6a34:	f000 f93c 	bl	6cb0 <memchr>
    6a38:	2800      	cmp	r0, #0
    6a3a:	d001      	beq.n	6a40 <_printf_i+0x1b8>
    6a3c:	1b80      	subs	r0, r0, r6
    6a3e:	6060      	str	r0, [r4, #4]
    6a40:	6863      	ldr	r3, [r4, #4]
    6a42:	e003      	b.n	6a4c <_printf_i+0x1c4>
    6a44:	0026      	movs	r6, r4
    6a46:	3642      	adds	r6, #66	; 0x42
    6a48:	7032      	strb	r2, [r6, #0]
    6a4a:	2301      	movs	r3, #1
    6a4c:	6123      	str	r3, [r4, #16]
    6a4e:	2300      	movs	r3, #0
    6a50:	9a04      	ldr	r2, [sp, #16]
    6a52:	7013      	strb	r3, [r2, #0]
    6a54:	9b07      	ldr	r3, [sp, #28]
    6a56:	aa09      	add	r2, sp, #36	; 0x24
    6a58:	9300      	str	r3, [sp, #0]
    6a5a:	0021      	movs	r1, r4
    6a5c:	9b06      	ldr	r3, [sp, #24]
    6a5e:	9805      	ldr	r0, [sp, #20]
    6a60:	f7ff fea4 	bl	67ac <_printf_common>
    6a64:	1c43      	adds	r3, r0, #1
    6a66:	d102      	bne.n	6a6e <_printf_i+0x1e6>
    6a68:	2001      	movs	r0, #1
    6a6a:	4240      	negs	r0, r0
    6a6c:	e027      	b.n	6abe <_printf_i+0x236>
    6a6e:	6923      	ldr	r3, [r4, #16]
    6a70:	0032      	movs	r2, r6
    6a72:	9906      	ldr	r1, [sp, #24]
    6a74:	9805      	ldr	r0, [sp, #20]
    6a76:	9d07      	ldr	r5, [sp, #28]
    6a78:	47a8      	blx	r5
    6a7a:	1c43      	adds	r3, r0, #1
    6a7c:	d0f4      	beq.n	6a68 <_printf_i+0x1e0>
    6a7e:	6823      	ldr	r3, [r4, #0]
    6a80:	2500      	movs	r5, #0
    6a82:	079b      	lsls	r3, r3, #30
    6a84:	d40f      	bmi.n	6aa6 <_printf_i+0x21e>
    6a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a88:	68e0      	ldr	r0, [r4, #12]
    6a8a:	4298      	cmp	r0, r3
    6a8c:	da17      	bge.n	6abe <_printf_i+0x236>
    6a8e:	0018      	movs	r0, r3
    6a90:	e015      	b.n	6abe <_printf_i+0x236>
    6a92:	0022      	movs	r2, r4
    6a94:	2301      	movs	r3, #1
    6a96:	3219      	adds	r2, #25
    6a98:	9906      	ldr	r1, [sp, #24]
    6a9a:	9805      	ldr	r0, [sp, #20]
    6a9c:	9e07      	ldr	r6, [sp, #28]
    6a9e:	47b0      	blx	r6
    6aa0:	1c43      	adds	r3, r0, #1
    6aa2:	d0e1      	beq.n	6a68 <_printf_i+0x1e0>
    6aa4:	3501      	adds	r5, #1
    6aa6:	68e3      	ldr	r3, [r4, #12]
    6aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6aaa:	1a9b      	subs	r3, r3, r2
    6aac:	429d      	cmp	r5, r3
    6aae:	dbf0      	blt.n	6a92 <_printf_i+0x20a>
    6ab0:	e7e9      	b.n	6a86 <_printf_i+0x1fe>
    6ab2:	0026      	movs	r6, r4
    6ab4:	9b03      	ldr	r3, [sp, #12]
    6ab6:	3642      	adds	r6, #66	; 0x42
    6ab8:	781b      	ldrb	r3, [r3, #0]
    6aba:	7033      	strb	r3, [r6, #0]
    6abc:	e78e      	b.n	69dc <_printf_i+0x154>
    6abe:	b00b      	add	sp, #44	; 0x2c
    6ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ac2:	46c0      	nop			; (mov r8, r8)
    6ac4:	00008125 	.word	0x00008125
    6ac8:	00008136 	.word	0x00008136

00006acc <_putc_r>:
    6acc:	b570      	push	{r4, r5, r6, lr}
    6ace:	0006      	movs	r6, r0
    6ad0:	000d      	movs	r5, r1
    6ad2:	0014      	movs	r4, r2
    6ad4:	2800      	cmp	r0, #0
    6ad6:	d004      	beq.n	6ae2 <_putc_r+0x16>
    6ad8:	6983      	ldr	r3, [r0, #24]
    6ada:	2b00      	cmp	r3, #0
    6adc:	d101      	bne.n	6ae2 <_putc_r+0x16>
    6ade:	f7ff fb83 	bl	61e8 <__sinit>
    6ae2:	4b12      	ldr	r3, [pc, #72]	; (6b2c <_putc_r+0x60>)
    6ae4:	429c      	cmp	r4, r3
    6ae6:	d101      	bne.n	6aec <_putc_r+0x20>
    6ae8:	6874      	ldr	r4, [r6, #4]
    6aea:	e008      	b.n	6afe <_putc_r+0x32>
    6aec:	4b10      	ldr	r3, [pc, #64]	; (6b30 <_putc_r+0x64>)
    6aee:	429c      	cmp	r4, r3
    6af0:	d101      	bne.n	6af6 <_putc_r+0x2a>
    6af2:	68b4      	ldr	r4, [r6, #8]
    6af4:	e003      	b.n	6afe <_putc_r+0x32>
    6af6:	4b0f      	ldr	r3, [pc, #60]	; (6b34 <_putc_r+0x68>)
    6af8:	429c      	cmp	r4, r3
    6afa:	d100      	bne.n	6afe <_putc_r+0x32>
    6afc:	68f4      	ldr	r4, [r6, #12]
    6afe:	68a3      	ldr	r3, [r4, #8]
    6b00:	3b01      	subs	r3, #1
    6b02:	60a3      	str	r3, [r4, #8]
    6b04:	2b00      	cmp	r3, #0
    6b06:	da05      	bge.n	6b14 <_putc_r+0x48>
    6b08:	69a2      	ldr	r2, [r4, #24]
    6b0a:	4293      	cmp	r3, r2
    6b0c:	db08      	blt.n	6b20 <_putc_r+0x54>
    6b0e:	b2eb      	uxtb	r3, r5
    6b10:	2b0a      	cmp	r3, #10
    6b12:	d005      	beq.n	6b20 <_putc_r+0x54>
    6b14:	6823      	ldr	r3, [r4, #0]
    6b16:	b2e8      	uxtb	r0, r5
    6b18:	1c5a      	adds	r2, r3, #1
    6b1a:	6022      	str	r2, [r4, #0]
    6b1c:	701d      	strb	r5, [r3, #0]
    6b1e:	e004      	b.n	6b2a <_putc_r+0x5e>
    6b20:	0022      	movs	r2, r4
    6b22:	0029      	movs	r1, r5
    6b24:	0030      	movs	r0, r6
    6b26:	f7ff f99d 	bl	5e64 <__swbuf_r>
    6b2a:	bd70      	pop	{r4, r5, r6, pc}
    6b2c:	000080b4 	.word	0x000080b4
    6b30:	000080d4 	.word	0x000080d4
    6b34:	000080f4 	.word	0x000080f4

00006b38 <_sbrk_r>:
    6b38:	2300      	movs	r3, #0
    6b3a:	b570      	push	{r4, r5, r6, lr}
    6b3c:	4c06      	ldr	r4, [pc, #24]	; (6b58 <_sbrk_r+0x20>)
    6b3e:	0005      	movs	r5, r0
    6b40:	0008      	movs	r0, r1
    6b42:	6023      	str	r3, [r4, #0]
    6b44:	f7fe f920 	bl	4d88 <_sbrk>
    6b48:	1c43      	adds	r3, r0, #1
    6b4a:	d103      	bne.n	6b54 <_sbrk_r+0x1c>
    6b4c:	6823      	ldr	r3, [r4, #0]
    6b4e:	2b00      	cmp	r3, #0
    6b50:	d000      	beq.n	6b54 <_sbrk_r+0x1c>
    6b52:	602b      	str	r3, [r5, #0]
    6b54:	bd70      	pop	{r4, r5, r6, pc}
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	20000378 	.word	0x20000378

00006b5c <__sread>:
    6b5c:	b570      	push	{r4, r5, r6, lr}
    6b5e:	000c      	movs	r4, r1
    6b60:	250e      	movs	r5, #14
    6b62:	5f49      	ldrsh	r1, [r1, r5]
    6b64:	f000 f8b0 	bl	6cc8 <_read_r>
    6b68:	2800      	cmp	r0, #0
    6b6a:	db03      	blt.n	6b74 <__sread+0x18>
    6b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b6e:	181b      	adds	r3, r3, r0
    6b70:	6563      	str	r3, [r4, #84]	; 0x54
    6b72:	e003      	b.n	6b7c <__sread+0x20>
    6b74:	89a2      	ldrh	r2, [r4, #12]
    6b76:	4b02      	ldr	r3, [pc, #8]	; (6b80 <__sread+0x24>)
    6b78:	4013      	ands	r3, r2
    6b7a:	81a3      	strh	r3, [r4, #12]
    6b7c:	bd70      	pop	{r4, r5, r6, pc}
    6b7e:	46c0      	nop			; (mov r8, r8)
    6b80:	ffffefff 	.word	0xffffefff

00006b84 <__swrite>:
    6b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b86:	001f      	movs	r7, r3
    6b88:	898b      	ldrh	r3, [r1, #12]
    6b8a:	0005      	movs	r5, r0
    6b8c:	000c      	movs	r4, r1
    6b8e:	0016      	movs	r6, r2
    6b90:	05db      	lsls	r3, r3, #23
    6b92:	d505      	bpl.n	6ba0 <__swrite+0x1c>
    6b94:	230e      	movs	r3, #14
    6b96:	5ec9      	ldrsh	r1, [r1, r3]
    6b98:	2200      	movs	r2, #0
    6b9a:	2302      	movs	r3, #2
    6b9c:	f000 f874 	bl	6c88 <_lseek_r>
    6ba0:	89a2      	ldrh	r2, [r4, #12]
    6ba2:	4b05      	ldr	r3, [pc, #20]	; (6bb8 <__swrite+0x34>)
    6ba4:	0028      	movs	r0, r5
    6ba6:	4013      	ands	r3, r2
    6ba8:	81a3      	strh	r3, [r4, #12]
    6baa:	0032      	movs	r2, r6
    6bac:	230e      	movs	r3, #14
    6bae:	5ee1      	ldrsh	r1, [r4, r3]
    6bb0:	003b      	movs	r3, r7
    6bb2:	f000 f81f 	bl	6bf4 <_write_r>
    6bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bb8:	ffffefff 	.word	0xffffefff

00006bbc <__sseek>:
    6bbc:	b570      	push	{r4, r5, r6, lr}
    6bbe:	000c      	movs	r4, r1
    6bc0:	250e      	movs	r5, #14
    6bc2:	5f49      	ldrsh	r1, [r1, r5]
    6bc4:	f000 f860 	bl	6c88 <_lseek_r>
    6bc8:	89a3      	ldrh	r3, [r4, #12]
    6bca:	1c42      	adds	r2, r0, #1
    6bcc:	d103      	bne.n	6bd6 <__sseek+0x1a>
    6bce:	4a05      	ldr	r2, [pc, #20]	; (6be4 <__sseek+0x28>)
    6bd0:	4013      	ands	r3, r2
    6bd2:	81a3      	strh	r3, [r4, #12]
    6bd4:	e004      	b.n	6be0 <__sseek+0x24>
    6bd6:	2280      	movs	r2, #128	; 0x80
    6bd8:	0152      	lsls	r2, r2, #5
    6bda:	4313      	orrs	r3, r2
    6bdc:	81a3      	strh	r3, [r4, #12]
    6bde:	6560      	str	r0, [r4, #84]	; 0x54
    6be0:	bd70      	pop	{r4, r5, r6, pc}
    6be2:	46c0      	nop			; (mov r8, r8)
    6be4:	ffffefff 	.word	0xffffefff

00006be8 <__sclose>:
    6be8:	b510      	push	{r4, lr}
    6bea:	230e      	movs	r3, #14
    6bec:	5ec9      	ldrsh	r1, [r1, r3]
    6bee:	f000 f815 	bl	6c1c <_close_r>
    6bf2:	bd10      	pop	{r4, pc}

00006bf4 <_write_r>:
    6bf4:	b570      	push	{r4, r5, r6, lr}
    6bf6:	0005      	movs	r5, r0
    6bf8:	0008      	movs	r0, r1
    6bfa:	0011      	movs	r1, r2
    6bfc:	2200      	movs	r2, #0
    6bfe:	4c06      	ldr	r4, [pc, #24]	; (6c18 <_write_r+0x24>)
    6c00:	6022      	str	r2, [r4, #0]
    6c02:	001a      	movs	r2, r3
    6c04:	f7fe f898 	bl	4d38 <_write>
    6c08:	1c43      	adds	r3, r0, #1
    6c0a:	d103      	bne.n	6c14 <_write_r+0x20>
    6c0c:	6823      	ldr	r3, [r4, #0]
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d000      	beq.n	6c14 <_write_r+0x20>
    6c12:	602b      	str	r3, [r5, #0]
    6c14:	bd70      	pop	{r4, r5, r6, pc}
    6c16:	46c0      	nop			; (mov r8, r8)
    6c18:	20000378 	.word	0x20000378

00006c1c <_close_r>:
    6c1c:	2300      	movs	r3, #0
    6c1e:	b570      	push	{r4, r5, r6, lr}
    6c20:	4c06      	ldr	r4, [pc, #24]	; (6c3c <_close_r+0x20>)
    6c22:	0005      	movs	r5, r0
    6c24:	0008      	movs	r0, r1
    6c26:	6023      	str	r3, [r4, #0]
    6c28:	f7fe f8c0 	bl	4dac <_close>
    6c2c:	1c43      	adds	r3, r0, #1
    6c2e:	d103      	bne.n	6c38 <_close_r+0x1c>
    6c30:	6823      	ldr	r3, [r4, #0]
    6c32:	2b00      	cmp	r3, #0
    6c34:	d000      	beq.n	6c38 <_close_r+0x1c>
    6c36:	602b      	str	r3, [r5, #0]
    6c38:	bd70      	pop	{r4, r5, r6, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	20000378 	.word	0x20000378

00006c40 <_fstat_r>:
    6c40:	2300      	movs	r3, #0
    6c42:	b570      	push	{r4, r5, r6, lr}
    6c44:	4c06      	ldr	r4, [pc, #24]	; (6c60 <_fstat_r+0x20>)
    6c46:	0005      	movs	r5, r0
    6c48:	0008      	movs	r0, r1
    6c4a:	0011      	movs	r1, r2
    6c4c:	6023      	str	r3, [r4, #0]
    6c4e:	f7fe f8b1 	bl	4db4 <_fstat>
    6c52:	1c43      	adds	r3, r0, #1
    6c54:	d103      	bne.n	6c5e <_fstat_r+0x1e>
    6c56:	6823      	ldr	r3, [r4, #0]
    6c58:	2b00      	cmp	r3, #0
    6c5a:	d000      	beq.n	6c5e <_fstat_r+0x1e>
    6c5c:	602b      	str	r3, [r5, #0]
    6c5e:	bd70      	pop	{r4, r5, r6, pc}
    6c60:	20000378 	.word	0x20000378

00006c64 <_isatty_r>:
    6c64:	2300      	movs	r3, #0
    6c66:	b570      	push	{r4, r5, r6, lr}
    6c68:	4c06      	ldr	r4, [pc, #24]	; (6c84 <_isatty_r+0x20>)
    6c6a:	0005      	movs	r5, r0
    6c6c:	0008      	movs	r0, r1
    6c6e:	6023      	str	r3, [r4, #0]
    6c70:	f7fe f8a6 	bl	4dc0 <_isatty>
    6c74:	1c43      	adds	r3, r0, #1
    6c76:	d103      	bne.n	6c80 <_isatty_r+0x1c>
    6c78:	6823      	ldr	r3, [r4, #0]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d000      	beq.n	6c80 <_isatty_r+0x1c>
    6c7e:	602b      	str	r3, [r5, #0]
    6c80:	bd70      	pop	{r4, r5, r6, pc}
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	20000378 	.word	0x20000378

00006c88 <_lseek_r>:
    6c88:	b570      	push	{r4, r5, r6, lr}
    6c8a:	0005      	movs	r5, r0
    6c8c:	0008      	movs	r0, r1
    6c8e:	0011      	movs	r1, r2
    6c90:	2200      	movs	r2, #0
    6c92:	4c06      	ldr	r4, [pc, #24]	; (6cac <_lseek_r+0x24>)
    6c94:	6022      	str	r2, [r4, #0]
    6c96:	001a      	movs	r2, r3
    6c98:	f7fe f894 	bl	4dc4 <_lseek>
    6c9c:	1c43      	adds	r3, r0, #1
    6c9e:	d103      	bne.n	6ca8 <_lseek_r+0x20>
    6ca0:	6823      	ldr	r3, [r4, #0]
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d000      	beq.n	6ca8 <_lseek_r+0x20>
    6ca6:	602b      	str	r3, [r5, #0]
    6ca8:	bd70      	pop	{r4, r5, r6, pc}
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	20000378 	.word	0x20000378

00006cb0 <memchr>:
    6cb0:	b2c9      	uxtb	r1, r1
    6cb2:	1882      	adds	r2, r0, r2
    6cb4:	4290      	cmp	r0, r2
    6cb6:	d004      	beq.n	6cc2 <memchr+0x12>
    6cb8:	7803      	ldrb	r3, [r0, #0]
    6cba:	428b      	cmp	r3, r1
    6cbc:	d002      	beq.n	6cc4 <memchr+0x14>
    6cbe:	3001      	adds	r0, #1
    6cc0:	e7f8      	b.n	6cb4 <memchr+0x4>
    6cc2:	2000      	movs	r0, #0
    6cc4:	4770      	bx	lr
	...

00006cc8 <_read_r>:
    6cc8:	b570      	push	{r4, r5, r6, lr}
    6cca:	0005      	movs	r5, r0
    6ccc:	0008      	movs	r0, r1
    6cce:	0011      	movs	r1, r2
    6cd0:	2200      	movs	r2, #0
    6cd2:	4c06      	ldr	r4, [pc, #24]	; (6cec <_read_r+0x24>)
    6cd4:	6022      	str	r2, [r4, #0]
    6cd6:	001a      	movs	r2, r3
    6cd8:	f7fe f80e 	bl	4cf8 <_read>
    6cdc:	1c43      	adds	r3, r0, #1
    6cde:	d103      	bne.n	6ce8 <_read_r+0x20>
    6ce0:	6823      	ldr	r3, [r4, #0]
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d000      	beq.n	6ce8 <_read_r+0x20>
    6ce6:	602b      	str	r3, [r5, #0]
    6ce8:	bd70      	pop	{r4, r5, r6, pc}
    6cea:	46c0      	nop			; (mov r8, r8)
    6cec:	20000378 	.word	0x20000378
    6cf0:	42002c00 	.word	0x42002c00
    6cf4:	42003000 	.word	0x42003000
    6cf8:	42003400 	.word	0x42003400
    6cfc:	42003800 	.word	0x42003800
    6d00:	42003c00 	.word	0x42003c00
    6d04:	1d1c1c1b 	.word	0x1d1c1c1b
    6d08:	0000001d 	.word	0x0000001d
    6d0c:	10000800 	.word	0x10000800
    6d10:	40002000 	.word	0x40002000
    6d14:	00008000 	.word	0x00008000

00006d18 <tc_interrupt_vectors.13164>:
    6d18:	15141312 00000016                       ........

00006d20 <__FUNCTION__.13304>:
    6d20:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    6d30:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    6d40:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    6d50:	6320746c 0000646d 0000123c 00001214     lt cmd..<.......
    6d60:	0000120c 00001224 0000121c 0000123c     ....$.......<...
    6d70:	0000122c 00001234                       ,...4...

00006d78 <__FUNCTION__.12484>:
    6d78:	5f666968 646e6573 00000000              hif_send....

00006d84 <__FUNCTION__.12494>:
    6d84:	5f666968 00727369 46494828 69614629     hif_isr.(HIF)Fai
    6d94:	6f74206c 6b617720 74207075 63206568     l to wakup the c
    6da4:	00706968 66696828 49572029 485f4946     hip.(hif) WIFI_H
    6db4:	5f54534f 5f564352 4c525443 6220315f     OST_RCV_CTRL_1 b
    6dc4:	66207375 006c6961 66696828 64612029     us fail.(hif) ad
    6dd4:	73657264 75622073 61662073 00006c69     dress bus fail..
    6de4:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
    6df4:	6b636170 53207465 20657a69 7525203d     packet Size = %u
    6e04:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
    6e14:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
    6e24:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
    6e34:	2070756f 00004449 66696828 6f682029     oup ID..(hif) ho
    6e44:	61207473 64207070 276e6469 65732074     st app didn't se
    6e54:	58522074 6e6f4420 00000065 66696828     t RX Done...(hif
    6e64:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    6e74:	66696828 61462029 2065736c 65746e69     (hif) False inte
    6e84:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    6e94:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    6ea4:	7265746e 74707572 67657220 00000000     nterrupt reg....
    6eb4:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
    6ec4:	7075656b 65687420 69686320 00000070     keup the chip...
    6ed4:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    6ee4:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    6ef4:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    6f04:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    6f14:	696c6176 72612064 656d7567 0000746e     valid argument..
    6f24:	20505041 75716552 65747365 69532064     APP Requested Si
    6f34:	6920657a 616c2073 72656772 61687420     ze is larger tha
    6f44:	6874206e 65722065 65766963 75622064     n the recived bu
    6f54:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
    6f64:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
    6f74:	64412064 73657264 65622073 646e6f79     d Address beyond
    6f84:	65687420 63657220 64657669 66756220      the recived buf
    6f94:	20726566 72646461 20737365 20646e61     fer address and 
    6fa4:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
    6fb4:	0000000a                                ....

00006fb8 <__FUNCTION__.12500>:
    6fb8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00006fc8 <__FUNCTION__.12515>:
    6fc8:	5f666968 65636572 00657669              hif_receive.

00006fd4 <__FUNCTION__.12530>:
    6fd4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    6fe4:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    6ff4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    7004:	75252e75 2075252e 000a2022 20514552     u.%u.%u " ..REQ 
    7014:	20746f4e 69666564 2064656e 000a6425     Not defined %d..
    7024:	41564e49 2044494c 4e494f50 00524554     INVALID POINTER.
    7034:	41564e49 2044494c 44495353 00000000     INVALID SSID....
    7044:	41564e49 2044494c 00004843 41564e49     INVALID CH..INVA
    7054:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
    7064:	00005049 41564e49 2044494c 2059454b     IP..INVALID KEY 
    7074:	45444e49 00000058 41564e49 2044494c     INDEX...INVALID 
    7084:	2059454b 455a4953 00000000 41564e49     KEY SIZE....INVA
    7094:	2044494c 20504557 0059454b 41564e49     LID WEP KEY.INVA
    70a4:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
    70b4:	4d204e4f 0045444f 6d726946 65726177     ON MODE.Firmware
    70c4:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
    70d4:	00000a75 206e694d 76697264 76207265     u...Min driver v
    70e4:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
    70f4:	72727543 69726420 20726576 3a726576     Curr driver ver:
    7104:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
    7114:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
    7124:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
    7134:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    7144:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    7154:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    7164:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    7174:	20706557 2079656b 65646e69 64252078     Wep key index %d
    7184:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    7194:	2079656b 676e656c 25206874 00000a64     key length %d...
    71a4:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    71b4:	656c2079 6874676e 00000000 65646e75     y length....unde
    71c4:	656e6966 65732064 79742063 00006570     fined sec type..
    71d4:	41564e49 2044494c 6f206f4e 63732066     INVALID No of sc
    71e4:	73206e61 73746f6c 00000021 41564e49     an slots!...INVA
    71f4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
    7204:	0021656d 41564e49 2044494c 6f206f4e     me!.INVALID No o
    7214:	72702066 2065626f 75716572 73747365     f probe requests
    7224:	72657020 61637320 6c73206e 0000746f      per scan slot..
    7234:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
    7244:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
    7254:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
    7264:	6e696665 00006465 7473694c 63206e65     efined..Listen c
    7274:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
    7284:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
    7294:	00000000 45574f50 41532052 25204556     ....POWER SAVE %
    72a4:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
    72b4:	4e204e49 00454d41 474e5250 66754220     IN NAME.PRNG Buf
    72c4:	20726566 65637865 64656465 78616d20     fer exceeded max
    72d4:	6d756d69 7a697320 64252065 20726f20     imum size %d or 
    72e4:	4c4c554e 66754220 0a726566 00000000     NULL Buffer.....

000072f4 <__FUNCTION__.12509>:
    72f4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    7304:	0063735f                                _sc.

00007308 <__FUNCTION__.12457>:
    7308:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00007314 <__FUNCTION__.12481>:
    7314:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00007324 <__FUNCTION__.12388>:
    7324:	70696863 6965645f 0074696e 20737542     chip_deinit.Bus 
    7334:	6f727265 31282072 57202e29 20656b61     error (1). Wake 
    7344:	66207075 656c6961 00000064 20737542     up failed...Bus 
    7354:	6f727265 32282072 57202e29 20656b61     error (2). Wake 
    7364:	66207075 656c6961 00000064 636f6c63     up failed...cloc
    7374:	7320736b 6c6c6974 46464f20 6157202e     ks still OFF. Wa
    7384:	7520656b 61662070 64656c69 00000000     ke up failed....
    7394:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    73a4:	6572206c 72206461 30206765 31313178     l read reg 0x111
    73b4:	2e2e2038 0000002e 6c696166 74206465     8 ......failed t
    73c4:	6564206f 696e692d 6c616974 00657a69     o de-initialize.
    73d4:	6f727245 68772072 20656c69 74697277     Error while writ
    73e4:	20676e69 00676572 6f727245 68772072     ing reg.Error wh
    73f4:	20656c69 64616572 20676e69 00676572     ile reading reg.
    7404:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    7414:	656c6961 6f742064 61657220 00000064     ailed to read...
    7424:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    7434:	656c6961 6f742064 69727720 00006574     ailed to write..

00007444 <__FUNCTION__.12294>:
    7444:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00007454 <__FUNCTION__.12375>:
    7454:	645f6d6e 695f7672 0074696e              nm_drv_init.

00007460 <__FUNCTION__.12382>:
    7460:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    7470:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    7480:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    7490:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
    74a0:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    74b0:	75727265 2e737470 0000002e 696d6e5b     errupts.....[nmi
    74c0:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    74d0:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    74e0:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
    74f0:	69642068 6c626173 61662065 00006c69     h disable fail..
    7500:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
    7510:	696e6920 75622074 00000073 000023f4      init bus....#..
    7520:	000023f4 00002424 000023a6 000023ca     .#..$$...#...#..
    7530:	000023d8 0000240a 0000240a 00002452     .#...$...$..R$..
    7540:	00002396 000024b4 000024b4 000024b4     .#...$...$...$..
    7550:	000024b4 000023e6                       .$...#..

00007558 <__FUNCTION__.11808>:
    7558:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00007568 <__FUNCTION__.11759>:
    7568:	5f697073 00646d63                       spi_cmd.

00007570 <__FUNCTION__.11816>:
    7570:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00007580 <__FUNCTION__.11767>:
    7580:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000758c <__FUNCTION__.11825>:
    758c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000759c <__FUNCTION__.11783>:
    759c:	5f697073 61746164 6165725f 00000064     spi_data_read...
    75ac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    75bc:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    75cc:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    75dc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    75ec:	656c6961 61642064 72206174 6f707365     ailed data respo
    75fc:	2065736e 64616572 7562202c 72652073     nse read, bus er
    760c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    761c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    762c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    763c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    764c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    765c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    766c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    767c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    768c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    769c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    76ac:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    76bc:	72772064 2c657469 73756220 72726520     d write, bus err
    76cc:	2e2e726f 0000002e 696d6e5b 69707320     or......[nmi spi
    76dc:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
    76ec:	65746972 67657220 30252820 2e297838     rite reg (%08x).
    76fc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    770c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    771c:	202c6573 74697277 65722065 25282067     se, write reg (%
    772c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
    773c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    774c:	72202c64 20646165 20676572 38302528     d, read reg (%08
    775c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    776c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    777c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    778c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    779c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    77ac:	72206174 2e646165 00002e2e 696d6e5b     ta read.....[nmi
    77bc:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    77cc:	6e726574 72206c61 20646165 746f7270     ternal read prot
    77dc:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
    77ec:	6572202c 69727974 7720676e 20687469     , retyring with 
    77fc:	20435243 2e66666f 00002e2e 696d6e5b     CRC off.....[nmi
    780c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    781c:	6e726574 72206c61 20646165 746f7270     ternal read prot
    782c:	6c6f636f 002e2e2e 696d6e5b 69707320     ocol....[nmi spi
    783c:	46203a5d 656c6961 6e692064 6e726574     ]: Failed intern
    784c:	77206c61 65746972 6f727020 6f636f74     al write protoco
    785c:	6572206c 2e2e2e67 00000000 696d6e5b     l reg.......[nmi
    786c:	69707320 46203a5d 206c6961 20646d63      spi]: Fail cmd 
    787c:	64616572 69686320 64692070 002e2e2e     read chip id....
    788c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    789c:	6d632064 72202c64 20646165 636f6c62     d cmd, read bloc
    78ac:	2528206b 29783830 0a2e2e2e 00000000     k (%08x)........
    78bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    78cc:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    78dc:	64616572 6f6c6220 28206b63 78383025     read block (%08x
    78ec:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
    78fc:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
    790c:	61746164 61657220 2e2e2e64 00000000     data read.......
    791c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    792c:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    793c:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    794c:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    795c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    796c:	69727720 62206574 6b636f6c 30252820      write block (%0
    797c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    798c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    799c:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    79ac:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    79bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    79cc:	61642064 62206174 6b636f6c 69727720     d data block wri
    79dc:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    79ec:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    79fc:	656c6961 61642064 62206174 6b636f6c     ailed data block
    7a0c:	63726320 69727720 202c6574 20737562      crc write, bus 
    7a1c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    7a2c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    7a3c:	206b636f 61746164 69727720 2e2e6574     ock data write..
    7a4c:	0000002e                                ....

00007a50 <__FUNCTION__.11850>:
    7a50:	735f6d6e 695f6970 0074696e              nm_spi_init.

00007a5c <__FUNCTION__.11798>:
    7a5c:	5f697073 61746164 6972775f 00006574     spi_data_write..

00007a6c <__FUNCTION__.11833>:
    7a6c:	735f6d6e 725f6970 00646165              nm_spi_read.

00007a78 <crc7_syndrome_table>:
    7a78:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    7a88:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    7a98:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    7aa8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    7ab8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    7ac8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    7ad8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    7ae8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    7af8:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    7b08:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    7b18:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    7b28:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    7b38:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    7b48:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    7b58:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    7b68:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    7b78:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
    7b88:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
    7b98:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    7ba8:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    7bb8:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    7bc8:	204c5353 6b636f53 00007465 42000800     SSL Socket.....B
    7bd8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    7be8:	42001c00 0c0b0a09 00000e0d 0000444e     ...B........ND..
    7bf8:	0000444a 0000444a 000044a8 000044a8     JD..JD...D...D..
    7c08:	00004462 00004454 00004468 00004496     bD..TD..hD...D..
    7c18:	00004690 00004670 00004670 000046fc     .F..pF..pF...F..
    7c28:	00004682 0000469e 00004674 000046ac     .F...F..tF...F..
    7c38:	000046ec                                .F..

00007c3c <gau8HexDigits>:
    7c3c:	33323130 37363534 62613938 66656463     0123456789abcdef
    7c4c:	00000000 69746f6e 796d7966 72646e61     ....notifymyandr
    7c5c:	0064696f 776f7270 0000006c 2e777777     oid.prowl...www.
    7c6c:	69746f6e 796d7966 72646e61 2e64696f     notifymyandroid.
    7c7c:	006d6f63 2e697061 776f7270 7070616c     com.api.prowlapp
    7c8c:	6d6f632e 00000000 20544547 6275702f     .com....GET /pub
    7c9c:	6163696c 6e2f6970 6669746f 70613f79     licapi/notify?ap
    7cac:	79656b69 0000003d 20544547 6275702f     ikey=...GET /pub
    7cbc:	6163696c 612f6970 613f6464 656b6970     licapi/add?apike
    7ccc:	00003d79 70706126 6163696c 6e6f6974     y=..&application
    7cdc:	0000003d 65766526 003d746e 73656426     =...&event=.&des
    7cec:	70697263 6e6f6974 0000003d 54544820     cription=... HTT
    7cfc:	2e312f50 480a0d31 3a74736f 00000020     P/1.1..Host: ...
    7d0c:	0a0d0a0d 00000000 50545448 312e312f     ........HTTP/1.1
    7d1c:	00000020 00303032 00303034 00313034      ...200.400.401.
    7d2c:	00323034 00363034 00393034 574f5247     402.406.409.GROW
    7d3c:	6553204c 4520646e 726f7272 0a642520     L Send Error %d.
    7d4c:	00000000 776f7250 656b206c 6f4e2079     ....Prowl key No
    7d5c:	61562074 00646c69 20414d4e 2079656b     t Vaild.NMA key 
    7d6c:	20746f4e 6c696156 00000064 00414d4e     Not Vaild...NMA.
    7d7c:	574f5250 0000004c 73206f4e 656b636f     PROWL...No socke
    7d8c:	61207374 6c696176 656c6261 726f6620     ts available for
    7d9c:	65687420 72756320 746e6572 71657220      the current req
    7dac:	74736575 00000000 2067734d 657a6973     uest....Msg size
    7dbc:	20736920 206f6f74 676e6f6c 00000000      is too long....
    7dcc:	746f6e41 20726568 52207325 65757165     Another %s Reque
    7ddc:	69207473 65702073 6e69646e 00000a67     st is pending...

00007dec <__FUNCTION__.11891>:
    7dec:	5f494d4e 776f7247 6e65536c 746f4e64     NMI_GrowlSendNot
    7dfc:	63696669 6f697461 0000006e              ification...

00007e08 <__FUNCTION__.11865>:
    7e08:	574f5247 50415f4c 636f5350 4574656b     GROWL_APPSocketE
    7e18:	746e6576 646e6148 0072656c 646e6553     ventHandler.Send
    7e28:	20676e69 776f7247 656d206c 67617373     ing Growl messag
    7e38:	25203a65 0a0d2073 00000000 462d6957     e: %s ......Wi-F
    7e48:	6f632069 63656e6e 0d646574 00000000     i connected.....
    7e58:	462d6957 69642069 6e6f6373 7463656e     Wi-Fi disconnect
    7e68:	000d6465 50434844 6d6f6320 74656c70     ed..DHCP complet
    7e78:	202d2065 462d6957 50492069 20736920     e - Wi-Fi IP is 
    7e88:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
    7e98:	38373139 34303637 30356465 66633661     91787604ed50a6cf
    7ea8:	33643263 64333866 31656531 62633639     c2d3f83d1ee196cb
    7eb8:	61303363 30626333 65376138 30613936     c30a3cb08a7e69a0
    7ec8:	00000000 35336364 64663839 66343636     ....dc3598fd664f
    7ed8:	38303536 30303666 65316462 65666466     6508f600bd1efdfe
    7ee8:	35616334 66303434 38303362 00000000     4ca5440fb308....
    7ef8:	6e6e6f43 69746365 45206e6f 62617473     Connection Estab
    7f08:	6873696c 00006465 74617453 55207375     lished..Status U
    7f18:	74616470 00000065 77617244 4d207265     pdate...Drawer M
    7f28:	74696e6f 0000726f 69666977 3a62635f     onitor..wifi_cb:
    7f38:	4d324d20 4649575f 45525f49 505f5053      M2M_WIFI_RESP_P
    7f48:	49564f52 4e4f4953 464e495f 000d2e4f     ROVISION_INFO...
    7f58:	69666977 3a62635f 6f725020 69736976     wifi_cb: Provisi
    7f68:	66206e6f 656c6961 000d2e64 776f7247     on failed...Grow
    7f78:	736d206c 65732067 7320746e 65636375     l msg sent succe
    7f88:	75667373 2e796c6c 0000000d 4f525245     ssfully.....ERRO
    7f98:	47203a52 6c776f72 20424320 65646f43     R: Growl CB Code
    7fa8:	6425203a 000a0d20 20724831 72616548     : %d ...1Hr Hear
    7fb8:	61656274 69502074 0000676e 72616548     tbeat Ping..Hear
    7fc8:	61656274 00000074 74697753 4d206863     tbeat...Switch M
    7fd8:	74696e6f 0000726f 57202d2d 31434e49     onitor..-- WINC1
    7fe8:	20303035 706d6973 6720656c 6c776f72     500 simple growl
    7ff8:	61786520 656c706d 202d2d20 41530a0d      example -- ..SA
    8008:	3132444d 4c50585f 454e4941 52505f44     MD21_XPLAINED_PR
    8018:	2d2d204f 2d2d0a0d 6d6f4320 656c6970     O --..-- Compile
    8028:	4a203a64 32206c75 30322035 31203631     d: Jul 25 2016 1
    8038:	37343a33 2037343a 000d2d2d 6e69616d     3:47:47 --..main
    8048:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    8058:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    8068:	0000000a 796d6149 6672756f 65687461     ....Iamyourfathe
    8078:	00000072 6f676544 00686162 20776f4e     r...Degobah.Now 
    8088:	6e65704f 00000000 74617453 68432065     Open....State Ch
    8098:	65676e61 00000000 20776f4e 736f6c43     ange....Now Clos
    80a8:	00006465 00000043                       ed..C...

000080b0 <_global_impure_ptr>:
    80b0:	20000014                                ... 

000080b4 <__sf_fake_stdin>:
	...

000080d4 <__sf_fake_stdout>:
	...

000080f4 <__sf_fake_stderr>:
	...
    8114:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8124:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8134:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8144:	00006665                                ef..

00008148 <_init>:
    8148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    814a:	46c0      	nop			; (mov r8, r8)
    814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    814e:	bc08      	pop	{r3}
    8150:	469e      	mov	lr, r3
    8152:	4770      	bx	lr

00008154 <__init_array_start>:
    8154:	000000dd 	.word	0x000000dd

00008158 <_fini>:
    8158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    815a:	46c0      	nop			; (mov r8, r8)
    815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    815e:	bc08      	pop	{r3}
    8160:	469e      	mov	lr, r3
    8162:	4770      	bx	lr

00008164 <__fini_array_start>:
    8164:	000000b5 	.word	0x000000b5
